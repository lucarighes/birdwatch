#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/ContextQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *ContextQuery::class$ = NULL;
            jmethodID *ContextQuery::mids$ = NULL;
            bool ContextQuery::live$ = false;

            jclass ContextQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/ContextQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_e45829547aa5d0c2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/document/CompletionQuery;)V");
                mids$[mid_addAllContexts_f2cc1bce94666404] = env->getMethodID(cls, "addAllContexts", "()V");
                mids$[mid_addContext_4b7f5e38f806ae55] = env->getMethodID(cls, "addContext", "(Ljava/lang/CharSequence;)V");
                mids$[mid_addContext_a597019738f1d59f] = env->getMethodID(cls, "addContext", "(Ljava/lang/CharSequence;F)V");
                mids$[mid_addContext_a67f4380f3e4e8a1] = env->getMethodID(cls, "addContext", "(Ljava/lang/CharSequence;FZ)V");
                mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ContextQuery::ContextQuery(const ::org::apache::lucene::search::suggest::document::CompletionQuery & a0) : ::org::apache::lucene::search::suggest::document::CompletionQuery(env->newObject(initializeClass, &mids$, mid_init$_e45829547aa5d0c2, a0.this$)) {}

            void ContextQuery::addAllContexts() const
            {
              env->callVoidMethod(this$, mids$[mid_addAllContexts_f2cc1bce94666404]);
            }

            void ContextQuery::addContext(const ::java::lang::CharSequence & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addContext_4b7f5e38f806ae55], a0.this$);
            }

            void ContextQuery::addContext(const ::java::lang::CharSequence & a0, jfloat a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addContext_a597019738f1d59f], a0.this$, a1);
            }

            void ContextQuery::addContext(const ::java::lang::CharSequence & a0, jfloat a1, jboolean a2) const
            {
              env->callVoidMethod(this$, mids$[mid_addContext_a67f4380f3e4e8a1], a0.this$, a1, a2);
            }

            ::org::apache::lucene::search::Weight ContextQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
            {
              return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
            }

            jboolean ContextQuery::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            jint ContextQuery::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }

            jlong ContextQuery::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
            }

            ::java::lang::String ContextQuery::toString(const ::java::lang::String & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
            }

            void ContextQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_ContextQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ContextQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ContextQuery_init_(t_ContextQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ContextQuery_addAllContexts(t_ContextQuery *self);
            static PyObject *t_ContextQuery_addContext(t_ContextQuery *self, PyObject *args);
            static PyObject *t_ContextQuery_createWeight(t_ContextQuery *self, PyObject *args);
            static PyObject *t_ContextQuery_equals(t_ContextQuery *self, PyObject *args);
            static PyObject *t_ContextQuery_hashCode(t_ContextQuery *self, PyObject *args);
            static PyObject *t_ContextQuery_ramBytesUsed(t_ContextQuery *self);
            static PyObject *t_ContextQuery_toString(t_ContextQuery *self, PyObject *args);
            static PyObject *t_ContextQuery_visit(t_ContextQuery *self, PyObject *args);

            static PyMethodDef t_ContextQuery__methods_[] = {
              DECLARE_METHOD(t_ContextQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ContextQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ContextQuery, addAllContexts, METH_NOARGS),
              DECLARE_METHOD(t_ContextQuery, addContext, METH_VARARGS),
              DECLARE_METHOD(t_ContextQuery, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_ContextQuery, equals, METH_VARARGS),
              DECLARE_METHOD(t_ContextQuery, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_ContextQuery, ramBytesUsed, METH_NOARGS),
              DECLARE_METHOD(t_ContextQuery, toString, METH_VARARGS),
              DECLARE_METHOD(t_ContextQuery, visit, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(ContextQuery)[] = {
              { Py_tp_methods, t_ContextQuery__methods_ },
              { Py_tp_init, (void *) t_ContextQuery_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(ContextQuery)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::suggest::document::CompletionQuery),
              NULL
            };

            DEFINE_TYPE(ContextQuery, t_ContextQuery, ContextQuery);

            void t_ContextQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(ContextQuery), &PY_TYPE_DEF(ContextQuery), module, "ContextQuery", 0);
            }

            void t_ContextQuery::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(ContextQuery), "class_", make_descriptor(ContextQuery::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ContextQuery), "wrapfn_", make_descriptor(t_ContextQuery::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ContextQuery), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ContextQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ContextQuery::initializeClass, 1)))
                return NULL;
              return t_ContextQuery::wrap_Object(ContextQuery(((t_ContextQuery *) arg)->object.this$));
            }
            static PyObject *t_ContextQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ContextQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ContextQuery_init_(t_ContextQuery *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::search::suggest::document::CompletionQuery a0((jobject) NULL);
              ContextQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::document::CompletionQuery::initializeClass, &a0))
              {
                INT_CALL(object = ContextQuery(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ContextQuery_addAllContexts(t_ContextQuery *self)
            {
              OBJ_CALL(self->object.addAllContexts());
              Py_RETURN_NONE;
            }

            static PyObject *t_ContextQuery_addContext(t_ContextQuery *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);

                  if (!parseArgs(args, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                  {
                    OBJ_CALL(self->object.addContext(a0));
                    Py_RETURN_NONE;
                  }
                }
                break;
               case 2:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jfloat a1;

                  if (!parseArgs(args, "OF", ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                  {
                    OBJ_CALL(self->object.addContext(a0, a1));
                    Py_RETURN_NONE;
                  }
                }
                break;
               case 3:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jfloat a1;
                  jboolean a2;

                  if (!parseArgs(args, "OFZ", ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                  {
                    OBJ_CALL(self->object.addContext(a0, a1, a2));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "addContext", args);
              return NULL;
            }

            static PyObject *t_ContextQuery_createWeight(t_ContextQuery *self, PyObject *args)
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
              PyTypeObject **p1;
              jfloat a2;
              ::org::apache::lucene::search::Weight result((jobject) NULL);

              if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
              {
                OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
                return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
              }

              return callSuper(PY_TYPE(ContextQuery), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_ContextQuery_equals(t_ContextQuery *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(ContextQuery), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ContextQuery_hashCode(t_ContextQuery *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(ContextQuery), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_ContextQuery_ramBytesUsed(t_ContextQuery *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_ContextQuery_toString(t_ContextQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(ContextQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_ContextQuery_visit(t_ContextQuery *self, PyObject *args)
            {
              ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
              {
                OBJ_CALL(self->object.visit(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(ContextQuery), (PyObject *) self, "visit", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Diff.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Diff::class$ = NULL;
      jmethodID *Diff::mids$ = NULL;
      bool Diff::live$ = false;

      jclass Diff::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Diff");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_init$_34ab80131650555f] = env->getMethodID(cls, "<init>", "(IIII)V");
          mids$[mid_apply_aaa11480f68b0860] = env->getStaticMethodID(cls, "apply", "(Ljava/lang/StringBuilder;Ljava/lang/CharSequence;)V");
          mids$[mid_exec_04b762e0ad33dcc5] = env->getMethodID(cls, "exec", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

          class$ = new ::java::lang::Class(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Diff::Diff() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

      Diff::Diff(jint a0, jint a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_34ab80131650555f, a0, a1, a2, a3)) {}

      void Diff::apply(const ::java::lang::StringBuilder & a0, const ::java::lang::CharSequence & a1)
      {
        jclass cls = env->getClass(initializeClass);
        env->callStaticVoidMethod(cls, mids$[mid_apply_aaa11480f68b0860], a0.this$, a1.this$);
      }

      ::java::lang::String Diff::exec(const ::java::lang::String & a0, const ::java::lang::String & a1) const
      {
        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_exec_04b762e0ad33dcc5], a0.this$, a1.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Diff_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Diff_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Diff_init_(t_Diff *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Diff_apply(PyTypeObject *type, PyObject *args);
      static PyObject *t_Diff_exec(t_Diff *self, PyObject *args);

      static PyMethodDef t_Diff__methods_[] = {
        DECLARE_METHOD(t_Diff, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Diff, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Diff, apply, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Diff, exec, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      static PyType_Slot PY_TYPE_SLOTS(Diff)[] = {
        { Py_tp_methods, t_Diff__methods_ },
        { Py_tp_init, (void *) t_Diff_init_ },
        { 0, NULL }
      };

      static PyType_Def *PY_TYPE_BASES(Diff)[] = {
        &PY_TYPE_DEF(::java::lang::Object),
        NULL
      };

      DEFINE_TYPE(Diff, t_Diff, Diff);

      void t_Diff::install(PyObject *module)
      {
        installType(&PY_TYPE(Diff), &PY_TYPE_DEF(Diff), module, "Diff", 0);
      }

      void t_Diff::initialize(PyObject *module)
      {
        PyObject_SetAttrString((PyObject *) PY_TYPE(Diff), "class_", make_descriptor(Diff::initializeClass, 1));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Diff), "wrapfn_", make_descriptor(t_Diff::wrap_jobject));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Diff), "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Diff_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Diff::initializeClass, 1)))
          return NULL;
        return t_Diff::wrap_Object(Diff(((t_Diff *) arg)->object.this$));
      }
      static PyObject *t_Diff_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Diff::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Diff_init_(t_Diff *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            Diff object((jobject) NULL);

            INT_CALL(object = Diff());
            self->object = object;
            break;
          }
         case 4:
          {
            jint a0;
            jint a1;
            jint a2;
            jint a3;
            Diff object((jobject) NULL);

            if (!parseArgs(args, "IIII", &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = Diff(a0, a1, a2, a3));
              self->object = object;
              break;
            }
          }
         default:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Diff_apply(PyTypeObject *type, PyObject *args)
      {
        ::java::lang::StringBuilder a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "kO", ::java::lang::StringBuilder::initializeClass, ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(::org::egothor::stemmer::Diff::apply(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError(type, "apply", args);
        return NULL;
      }

      static PyObject *t_Diff_exec(t_Diff *self, PyObject *args)
      {
        ::java::lang::String a0((jobject) NULL);
        ::java::lang::String a1((jobject) NULL);
        ::java::lang::String result((jobject) NULL);

        if (!parseArgs(args, "ss", &a0, &a1))
        {
          OBJ_CALL(result = self->object.exec(a0, a1));
          return j2p(result);
        }

        PyErr_SetArgsError((PyObject *) self, "exec", args);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/boost/DelimitedBoostTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace boost {

          ::java::lang::Class *DelimitedBoostTokenFilter::class$ = NULL;
          jmethodID *DelimitedBoostTokenFilter::mids$ = NULL;
          bool DelimitedBoostTokenFilter::live$ = false;

          jclass DelimitedBoostTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/boost/DelimitedBoostTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ab485f7fd2eaf684] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;C)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DelimitedBoostTokenFilter::DelimitedBoostTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jchar a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ab485f7fd2eaf684, a0.this$, a1)) {}

          jboolean DelimitedBoostTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace boost {
          static PyObject *t_DelimitedBoostTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DelimitedBoostTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DelimitedBoostTokenFilter_init_(t_DelimitedBoostTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DelimitedBoostTokenFilter_incrementToken(t_DelimitedBoostTokenFilter *self, PyObject *args);

          static PyMethodDef t_DelimitedBoostTokenFilter__methods_[] = {
            DECLARE_METHOD(t_DelimitedBoostTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedBoostTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedBoostTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DelimitedBoostTokenFilter)[] = {
            { Py_tp_methods, t_DelimitedBoostTokenFilter__methods_ },
            { Py_tp_init, (void *) t_DelimitedBoostTokenFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DelimitedBoostTokenFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(DelimitedBoostTokenFilter, t_DelimitedBoostTokenFilter, DelimitedBoostTokenFilter);

          void t_DelimitedBoostTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DelimitedBoostTokenFilter), &PY_TYPE_DEF(DelimitedBoostTokenFilter), module, "DelimitedBoostTokenFilter", 0);
          }

          void t_DelimitedBoostTokenFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedBoostTokenFilter), "class_", make_descriptor(DelimitedBoostTokenFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedBoostTokenFilter), "wrapfn_", make_descriptor(t_DelimitedBoostTokenFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedBoostTokenFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DelimitedBoostTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DelimitedBoostTokenFilter::initializeClass, 1)))
              return NULL;
            return t_DelimitedBoostTokenFilter::wrap_Object(DelimitedBoostTokenFilter(((t_DelimitedBoostTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_DelimitedBoostTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DelimitedBoostTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DelimitedBoostTokenFilter_init_(t_DelimitedBoostTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jchar a1;
            DelimitedBoostTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kC", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              INT_CALL(object = DelimitedBoostTokenFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DelimitedBoostTokenFilter_incrementToken(t_DelimitedBoostTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(DelimitedBoostTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicAnalyzer::class$ = NULL;
          jmethodID *ArabicAnalyzer::mids$ = NULL;
          bool ArabicAnalyzer::live$ = false;
          ::java::lang::String *ArabicAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass ArabicAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicAnalyzer::ArabicAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ArabicAnalyzer::ArabicAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          ArabicAnalyzer::ArabicAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet ArabicAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicAnalyzer_init_(t_ArabicAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_ArabicAnalyzer_get__defaultStopSet(t_ArabicAnalyzer *self, void *data);
          static PyGetSetDef t_ArabicAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_ArabicAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ArabicAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ArabicAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ArabicAnalyzer)[] = {
            { Py_tp_methods, t_ArabicAnalyzer__methods_ },
            { Py_tp_init, (void *) t_ArabicAnalyzer_init_ },
            { Py_tp_getset, t_ArabicAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ArabicAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(ArabicAnalyzer, t_ArabicAnalyzer, ArabicAnalyzer);

          void t_ArabicAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicAnalyzer), &PY_TYPE_DEF(ArabicAnalyzer), module, "ArabicAnalyzer", 0);
          }

          void t_ArabicAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicAnalyzer), "class_", make_descriptor(ArabicAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicAnalyzer), "wrapfn_", make_descriptor(t_ArabicAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(ArabicAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*ArabicAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_ArabicAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ArabicAnalyzer::wrap_Object(ArabicAnalyzer(((t_ArabicAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ArabicAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicAnalyzer_init_(t_ArabicAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ArabicAnalyzer object((jobject) NULL);

                INT_CALL(object = ArabicAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ArabicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArabicAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ArabicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArabicAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ar::ArabicAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_ArabicAnalyzer_get__defaultStopSet(t_ArabicAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianStemmer::class$ = NULL;
          jmethodID *GalicianStemmer::mids$ = NULL;
          bool GalicianStemmer::live$ = false;

          jclass GalicianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianStemmer::GalicianStemmer() : ::org::apache::lucene::analysis::pt::RSLPStemmerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint GalicianStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianStemmer_init_(t_GalicianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianStemmer_stem(t_GalicianStemmer *self, PyObject *args);

          static PyMethodDef t_GalicianStemmer__methods_[] = {
            DECLARE_METHOD(t_GalicianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GalicianStemmer)[] = {
            { Py_tp_methods, t_GalicianStemmer__methods_ },
            { Py_tp_init, (void *) t_GalicianStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GalicianStemmer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::pt::RSLPStemmerBase),
            NULL
          };

          DEFINE_TYPE(GalicianStemmer, t_GalicianStemmer, GalicianStemmer);

          void t_GalicianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianStemmer), &PY_TYPE_DEF(GalicianStemmer), module, "GalicianStemmer", 0);
          }

          void t_GalicianStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianStemmer), "class_", make_descriptor(GalicianStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianStemmer), "wrapfn_", make_descriptor(t_GalicianStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianStemmer::initializeClass, 1)))
              return NULL;
            return t_GalicianStemmer::wrap_Object(GalicianStemmer(((t_GalicianStemmer *) arg)->object.this$));
          }
          static PyObject *t_GalicianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianStemmer_init_(t_GalicianStemmer *self, PyObject *args, PyObject *kwds)
          {
            GalicianStemmer object((jobject) NULL);

            INT_CALL(object = GalicianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GalicianStemmer_stem(t_GalicianStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TrimFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TrimFilterFactory::class$ = NULL;
          jmethodID *TrimFilterFactory::mids$ = NULL;
          bool TrimFilterFactory::live$ = false;
          ::java::lang::String *TrimFilterFactory::NAME = NULL;

          jclass TrimFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TrimFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_normalize_6de1e28d9d10cd9e] = env->getMethodID(cls, "normalize", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TrimFilterFactory::TrimFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream TrimFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TrimFilterFactory::normalize(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_normalize_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TrimFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TrimFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TrimFilterFactory_init_(t_TrimFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TrimFilterFactory_create(t_TrimFilterFactory *self, PyObject *args);
          static PyObject *t_TrimFilterFactory_normalize(t_TrimFilterFactory *self, PyObject *args);

          static PyMethodDef t_TrimFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TrimFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TrimFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TrimFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_TrimFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TrimFilterFactory)[] = {
            { Py_tp_methods, t_TrimFilterFactory__methods_ },
            { Py_tp_init, (void *) t_TrimFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TrimFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(TrimFilterFactory, t_TrimFilterFactory, TrimFilterFactory);

          void t_TrimFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TrimFilterFactory), &PY_TYPE_DEF(TrimFilterFactory), module, "TrimFilterFactory", 0);
          }

          void t_TrimFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TrimFilterFactory), "class_", make_descriptor(TrimFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TrimFilterFactory), "wrapfn_", make_descriptor(t_TrimFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TrimFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(TrimFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(TrimFilterFactory), "NAME", make_descriptor(j2p(*TrimFilterFactory::NAME)));
          }

          static PyObject *t_TrimFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TrimFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TrimFilterFactory::wrap_Object(TrimFilterFactory(((t_TrimFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TrimFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TrimFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TrimFilterFactory_init_(t_TrimFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TrimFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TrimFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TrimFilterFactory_create(t_TrimFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TrimFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_TrimFilterFactory_normalize(t_TrimFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TrimFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/util/OfflineSorter$BufferSize.h"
#include "java/util/concurrent/ExecutorService.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter::class$ = NULL;
        jmethodID *OfflineSorter::mids$ = NULL;
        bool OfflineSorter::live$ = false;
        jlong OfflineSorter::ABSOLUTE_MIN_SORT_BUFFER_SIZE = (jlong) 0;
        ::java::util::Comparator *OfflineSorter::DEFAULT_COMPARATOR = NULL;
        jlong OfflineSorter::GB = (jlong) 0;
        jint OfflineSorter::MAX_TEMPFILES = (jint) 0;
        jlong OfflineSorter::MB = (jlong) 0;
        jlong OfflineSorter::MIN_BUFFER_SIZE_MB = (jlong) 0;

        jclass OfflineSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a9516587cd7033fe] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;)V");
            mids$[mid_init$_55abbb9889e12777] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/util/Comparator;)V");
            mids$[mid_init$_5e4395b2c4e37b25] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/util/Comparator;Lorg/apache/lucene/util/OfflineSorter$BufferSize;IILjava/util/concurrent/ExecutorService;I)V");
            mids$[mid_getComparator_beb0414e0ec1de00] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_getDirectory_7452b086ce8219b2] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getTempFileNamePrefix_db9b55ba01e03e4b] = env->getMethodID(cls, "getTempFileNamePrefix", "()Ljava/lang/String;");
            mids$[mid_sort_9bfa75c9f141b67f] = env->getMethodID(cls, "sort", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getReader_fdd98311b70cfc52] = env->getMethodID(cls, "getReader", "(Lorg/apache/lucene/store/ChecksumIndexInput;Ljava/lang/String;)Lorg/apache/lucene/util/OfflineSorter$ByteSequencesReader;");
            mids$[mid_getWriter_a3f4fcc649c141ac] = env->getMethodID(cls, "getWriter", "(Lorg/apache/lucene/store/IndexOutput;J)Lorg/apache/lucene/util/OfflineSorter$ByteSequencesWriter;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            ABSOLUTE_MIN_SORT_BUFFER_SIZE = env->getStaticLongField(cls, "ABSOLUTE_MIN_SORT_BUFFER_SIZE");
            DEFAULT_COMPARATOR = new ::java::util::Comparator(env->getStaticObjectField(cls, "DEFAULT_COMPARATOR", "Ljava/util/Comparator;"));
            GB = env->getStaticLongField(cls, "GB");
            MAX_TEMPFILES = env->getStaticIntField(cls, "MAX_TEMPFILES");
            MB = env->getStaticLongField(cls, "MB");
            MIN_BUFFER_SIZE_MB = env->getStaticLongField(cls, "MIN_BUFFER_SIZE_MB");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter::OfflineSorter(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a9516587cd7033fe, a0.this$, a1.this$)) {}

        OfflineSorter::OfflineSorter(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::util::Comparator & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_55abbb9889e12777, a0.this$, a1.this$, a2.this$)) {}

        OfflineSorter::OfflineSorter(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::util::Comparator & a2, const ::org::apache::lucene::util::OfflineSorter$BufferSize & a3, jint a4, jint a5, const ::java::util::concurrent::ExecutorService & a6, jint a7) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5e4395b2c4e37b25, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5, a6.this$, a7)) {}

        ::java::util::Comparator OfflineSorter::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_beb0414e0ec1de00]));
        }

        ::org::apache::lucene::store::Directory OfflineSorter::getDirectory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_7452b086ce8219b2]));
        }

        ::java::lang::String OfflineSorter::getTempFileNamePrefix() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTempFileNamePrefix_db9b55ba01e03e4b]));
        }

        ::java::lang::String OfflineSorter::sort(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_sort_9bfa75c9f141b67f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/OfflineSorter$ByteSequencesReader.h"
#include "org/apache/lucene/util/OfflineSorter$ByteSequencesWriter.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OfflineSorter_init_(t_OfflineSorter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OfflineSorter_getComparator(t_OfflineSorter *self);
        static PyObject *t_OfflineSorter_getDirectory(t_OfflineSorter *self);
        static PyObject *t_OfflineSorter_getTempFileNamePrefix(t_OfflineSorter *self);
        static PyObject *t_OfflineSorter_sort(t_OfflineSorter *self, PyObject *arg);
        static PyObject *t_OfflineSorter_get__comparator(t_OfflineSorter *self, void *data);
        static PyObject *t_OfflineSorter_get__directory(t_OfflineSorter *self, void *data);
        static PyObject *t_OfflineSorter_get__tempFileNamePrefix(t_OfflineSorter *self, void *data);
        static PyGetSetDef t_OfflineSorter__fields_[] = {
          DECLARE_GET_FIELD(t_OfflineSorter, comparator),
          DECLARE_GET_FIELD(t_OfflineSorter, directory),
          DECLARE_GET_FIELD(t_OfflineSorter, tempFileNamePrefix),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OfflineSorter__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter, getComparator, METH_NOARGS),
          DECLARE_METHOD(t_OfflineSorter, getDirectory, METH_NOARGS),
          DECLARE_METHOD(t_OfflineSorter, getTempFileNamePrefix, METH_NOARGS),
          DECLARE_METHOD(t_OfflineSorter, sort, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(OfflineSorter)[] = {
          { Py_tp_methods, t_OfflineSorter__methods_ },
          { Py_tp_init, (void *) t_OfflineSorter_init_ },
          { Py_tp_getset, t_OfflineSorter__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(OfflineSorter)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(OfflineSorter, t_OfflineSorter, OfflineSorter);

        void t_OfflineSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter), &PY_TYPE_DEF(OfflineSorter), module, "OfflineSorter", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter), "ByteSequencesReader", make_descriptor(&PY_TYPE_DEF(OfflineSorter$ByteSequencesReader)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter), "ByteSequencesWriter", make_descriptor(&PY_TYPE_DEF(OfflineSorter$ByteSequencesWriter)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter), "BufferSize", make_descriptor(&PY_TYPE_DEF(OfflineSorter$BufferSize)));
        }

        void t_OfflineSorter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter), "class_", make_descriptor(OfflineSorter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter), "wrapfn_", make_descriptor(t_OfflineSorter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter), "boxfn_", make_descriptor(boxObject));
          env->getClass(OfflineSorter::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter), "ABSOLUTE_MIN_SORT_BUFFER_SIZE", make_descriptor(OfflineSorter::ABSOLUTE_MIN_SORT_BUFFER_SIZE));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter), "DEFAULT_COMPARATOR", make_descriptor(::java::util::t_Comparator::wrap_Object(*OfflineSorter::DEFAULT_COMPARATOR)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter), "GB", make_descriptor(OfflineSorter::GB));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter), "MAX_TEMPFILES", make_descriptor(OfflineSorter::MAX_TEMPFILES));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter), "MB", make_descriptor(OfflineSorter::MB));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter), "MIN_BUFFER_SIZE_MB", make_descriptor(OfflineSorter::MIN_BUFFER_SIZE_MB));
        }

        static PyObject *t_OfflineSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter::wrap_Object(OfflineSorter(((t_OfflineSorter *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OfflineSorter_init_(t_OfflineSorter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              OfflineSorter object((jobject) NULL);

              if (!parseArgs(args, "ks", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = OfflineSorter(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::util::Comparator a2((jobject) NULL);
              PyTypeObject **p2;
              OfflineSorter object((jobject) NULL);

              if (!parseArgs(args, "ksK", ::org::apache::lucene::store::Directory::initializeClass, ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Comparator::parameters_))
              {
                INT_CALL(object = OfflineSorter(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 8:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::util::Comparator a2((jobject) NULL);
              PyTypeObject **p2;
              ::org::apache::lucene::util::OfflineSorter$BufferSize a3((jobject) NULL);
              jint a4;
              jint a5;
              ::java::util::concurrent::ExecutorService a6((jobject) NULL);
              jint a7;
              OfflineSorter object((jobject) NULL);

              if (!parseArgs(args, "ksKkIIkI", ::org::apache::lucene::store::Directory::initializeClass, ::java::util::Comparator::initializeClass, ::org::apache::lucene::util::OfflineSorter$BufferSize::initializeClass, ::java::util::concurrent::ExecutorService::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Comparator::parameters_, &a3, &a4, &a5, &a6, &a7))
              {
                INT_CALL(object = OfflineSorter(a0, a1, a2, a3, a4, a5, a6, a7));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OfflineSorter_getComparator(t_OfflineSorter *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_OfflineSorter_getDirectory(t_OfflineSorter *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_OfflineSorter_getTempFileNamePrefix(t_OfflineSorter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getTempFileNamePrefix());
          return j2p(result);
        }

        static PyObject *t_OfflineSorter_sort(t_OfflineSorter *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.sort(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "sort", arg);
          return NULL;
        }

        static PyObject *t_OfflineSorter_get__comparator(t_OfflineSorter *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_OfflineSorter_get__directory(t_OfflineSorter *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_OfflineSorter_get__tempFileNamePrefix(t_OfflineSorter *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getTempFileNamePrefix());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/payloads/MinPayloadFunction.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace payloads {

          ::java::lang::Class *MinPayloadFunction::class$ = NULL;
          jmethodID *MinPayloadFunction::mids$ = NULL;
          bool MinPayloadFunction::live$ = false;

          jclass MinPayloadFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/payloads/MinPayloadFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_currentScore_0a14f13874ab46d9] = env->getMethodID(cls, "currentScore", "(ILjava/lang/String;IIIFF)F");
              mids$[mid_docScore_6294fc7b7308f6b0] = env->getMethodID(cls, "docScore", "(ILjava/lang/String;IF)F");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MinPayloadFunction::MinPayloadFunction() : ::org::apache::lucene::queries::payloads::PayloadFunction(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jfloat MinPayloadFunction::currentScore(jint a0, const ::java::lang::String & a1, jint a2, jint a3, jint a4, jfloat a5, jfloat a6) const
          {
            return env->callFloatMethod(this$, mids$[mid_currentScore_0a14f13874ab46d9], a0, a1.this$, a2, a3, a4, a5, a6);
          }

          jfloat MinPayloadFunction::docScore(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_docScore_6294fc7b7308f6b0], a0, a1.this$, a2, a3);
          }

          jboolean MinPayloadFunction::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint MinPayloadFunction::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace payloads {
          static PyObject *t_MinPayloadFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinPayloadFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MinPayloadFunction_init_(t_MinPayloadFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MinPayloadFunction_currentScore(t_MinPayloadFunction *self, PyObject *args);
          static PyObject *t_MinPayloadFunction_docScore(t_MinPayloadFunction *self, PyObject *args);
          static PyObject *t_MinPayloadFunction_equals(t_MinPayloadFunction *self, PyObject *args);
          static PyObject *t_MinPayloadFunction_hashCode(t_MinPayloadFunction *self, PyObject *args);

          static PyMethodDef t_MinPayloadFunction__methods_[] = {
            DECLARE_METHOD(t_MinPayloadFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinPayloadFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinPayloadFunction, currentScore, METH_VARARGS),
            DECLARE_METHOD(t_MinPayloadFunction, docScore, METH_VARARGS),
            DECLARE_METHOD(t_MinPayloadFunction, equals, METH_VARARGS),
            DECLARE_METHOD(t_MinPayloadFunction, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MinPayloadFunction)[] = {
            { Py_tp_methods, t_MinPayloadFunction__methods_ },
            { Py_tp_init, (void *) t_MinPayloadFunction_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MinPayloadFunction)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::queries::payloads::PayloadFunction),
            NULL
          };

          DEFINE_TYPE(MinPayloadFunction, t_MinPayloadFunction, MinPayloadFunction);

          void t_MinPayloadFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(MinPayloadFunction), &PY_TYPE_DEF(MinPayloadFunction), module, "MinPayloadFunction", 0);
          }

          void t_MinPayloadFunction::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MinPayloadFunction), "class_", make_descriptor(MinPayloadFunction::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MinPayloadFunction), "wrapfn_", make_descriptor(t_MinPayloadFunction::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MinPayloadFunction), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MinPayloadFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MinPayloadFunction::initializeClass, 1)))
              return NULL;
            return t_MinPayloadFunction::wrap_Object(MinPayloadFunction(((t_MinPayloadFunction *) arg)->object.this$));
          }
          static PyObject *t_MinPayloadFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MinPayloadFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MinPayloadFunction_init_(t_MinPayloadFunction *self, PyObject *args, PyObject *kwds)
          {
            MinPayloadFunction object((jobject) NULL);

            INT_CALL(object = MinPayloadFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_MinPayloadFunction_currentScore(t_MinPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jfloat a5;
            jfloat a6;
            jfloat result;

            if (!parseArgs(args, "IsIIIFF", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.currentScore(a0, a1, a2, a3, a4, a5, a6));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(MinPayloadFunction), (PyObject *) self, "currentScore", args, 2);
          }

          static PyObject *t_MinPayloadFunction_docScore(t_MinPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            jfloat result;

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.docScore(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(MinPayloadFunction), (PyObject *) self, "docScore", args, 2);
          }

          static PyObject *t_MinPayloadFunction_equals(t_MinPayloadFunction *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(MinPayloadFunction), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_MinPayloadFunction_hashCode(t_MinPayloadFunction *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(MinPayloadFunction), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Bits::class$ = NULL;
        jmethodID *Bits::mids$ = NULL;
        bool Bits::live$ = false;
        JArray< Bits > *Bits::EMPTY_ARRAY = NULL;

        jclass Bits::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Bits");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_a1d30e1ee40c89a2] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_length_9972fcc56b44e79d] = env->getMethodID(cls, "length", "()I");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            EMPTY_ARRAY = new JArray< Bits >(env->getStaticObjectField(cls, "EMPTY_ARRAY", "[Lorg/apache/lucene/util/Bits;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean Bits::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_a1d30e1ee40c89a2], a0);
        }

        jint Bits::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_9972fcc56b44e79d]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/Bits$MatchNoBits.h"
#include "org/apache/lucene/util/Bits$MatchAllBits.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Bits_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bits_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bits_get(t_Bits *self, PyObject *arg);
        static PyObject *t_Bits_length(t_Bits *self);

        static PyMethodDef t_Bits__methods_[] = {
          DECLARE_METHOD(t_Bits, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits, get, METH_O),
          DECLARE_METHOD(t_Bits, length, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Bits)[] = {
          { Py_tp_methods, t_Bits__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Bits)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Bits, t_Bits, Bits);

        void t_Bits::install(PyObject *module)
        {
          installType(&PY_TYPE(Bits), &PY_TYPE_DEF(Bits), module, "Bits", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(Bits), "MatchNoBits", make_descriptor(&PY_TYPE_DEF(Bits$MatchNoBits)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Bits), "MatchAllBits", make_descriptor(&PY_TYPE_DEF(Bits$MatchAllBits)));
        }

        void t_Bits::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Bits), "class_", make_descriptor(Bits::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Bits), "wrapfn_", make_descriptor(t_Bits::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Bits), "boxfn_", make_descriptor(boxObject));
          env->getClass(Bits::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(Bits), "EMPTY_ARRAY", make_descriptor(JArray<jobject>(Bits::EMPTY_ARRAY->this$).wrap(t_Bits::wrap_jobject)));
        }

        static PyObject *t_Bits_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Bits::initializeClass, 1)))
            return NULL;
          return t_Bits::wrap_Object(Bits(((t_Bits *) arg)->object.this$));
        }
        static PyObject *t_Bits_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Bits::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Bits_get(t_Bits *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_Bits_length(t_Bits *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/SuggestStopFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *SuggestStopFilterFactory::class$ = NULL;
            jmethodID *SuggestStopFilterFactory::mids$ = NULL;
            bool SuggestStopFilterFactory::live$ = false;
            ::java::lang::String *SuggestStopFilterFactory::FORMAT_SNOWBALL = NULL;
            ::java::lang::String *SuggestStopFilterFactory::FORMAT_WORDSET = NULL;
            ::java::lang::String *SuggestStopFilterFactory::NAME = NULL;

            jclass SuggestStopFilterFactory::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/SuggestStopFilterFactory");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
                mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
                mids$[mid_getStopWords_7aec8e69a9807ca1] = env->getMethodID(cls, "getStopWords", "()Lorg/apache/lucene/analysis/CharArraySet;");
                mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
                mids$[mid_isIgnoreCase_8454bd5aa23fd11e] = env->getMethodID(cls, "isIgnoreCase", "()Z");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                FORMAT_SNOWBALL = new ::java::lang::String(env->getStaticObjectField(cls, "FORMAT_SNOWBALL", "Ljava/lang/String;"));
                FORMAT_WORDSET = new ::java::lang::String(env->getStaticObjectField(cls, "FORMAT_WORDSET", "Ljava/lang/String;"));
                NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SuggestStopFilterFactory::SuggestStopFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

            ::org::apache::lucene::analysis::TokenStream SuggestStopFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
            {
              return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
            }

            ::org::apache::lucene::analysis::CharArraySet SuggestStopFilterFactory::getStopWords() const
            {
              return ::org::apache::lucene::analysis::CharArraySet(env->callObjectMethod(this$, mids$[mid_getStopWords_7aec8e69a9807ca1]));
            }

            void SuggestStopFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
            }

            jboolean SuggestStopFilterFactory::isIgnoreCase() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_8454bd5aa23fd11e]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_SuggestStopFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SuggestStopFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SuggestStopFilterFactory_init_(t_SuggestStopFilterFactory *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SuggestStopFilterFactory_create(t_SuggestStopFilterFactory *self, PyObject *args);
            static PyObject *t_SuggestStopFilterFactory_getStopWords(t_SuggestStopFilterFactory *self);
            static PyObject *t_SuggestStopFilterFactory_inform(t_SuggestStopFilterFactory *self, PyObject *arg);
            static PyObject *t_SuggestStopFilterFactory_isIgnoreCase(t_SuggestStopFilterFactory *self);
            static PyObject *t_SuggestStopFilterFactory_get__ignoreCase(t_SuggestStopFilterFactory *self, void *data);
            static PyObject *t_SuggestStopFilterFactory_get__stopWords(t_SuggestStopFilterFactory *self, void *data);
            static PyGetSetDef t_SuggestStopFilterFactory__fields_[] = {
              DECLARE_GET_FIELD(t_SuggestStopFilterFactory, ignoreCase),
              DECLARE_GET_FIELD(t_SuggestStopFilterFactory, stopWords),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SuggestStopFilterFactory__methods_[] = {
              DECLARE_METHOD(t_SuggestStopFilterFactory, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SuggestStopFilterFactory, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SuggestStopFilterFactory, create, METH_VARARGS),
              DECLARE_METHOD(t_SuggestStopFilterFactory, getStopWords, METH_NOARGS),
              DECLARE_METHOD(t_SuggestStopFilterFactory, inform, METH_O),
              DECLARE_METHOD(t_SuggestStopFilterFactory, isIgnoreCase, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SuggestStopFilterFactory)[] = {
              { Py_tp_methods, t_SuggestStopFilterFactory__methods_ },
              { Py_tp_init, (void *) t_SuggestStopFilterFactory_init_ },
              { Py_tp_getset, t_SuggestStopFilterFactory__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SuggestStopFilterFactory)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
              NULL
            };

            DEFINE_TYPE(SuggestStopFilterFactory, t_SuggestStopFilterFactory, SuggestStopFilterFactory);

            void t_SuggestStopFilterFactory::install(PyObject *module)
            {
              installType(&PY_TYPE(SuggestStopFilterFactory), &PY_TYPE_DEF(SuggestStopFilterFactory), module, "SuggestStopFilterFactory", 0);
            }

            void t_SuggestStopFilterFactory::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestStopFilterFactory), "class_", make_descriptor(SuggestStopFilterFactory::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestStopFilterFactory), "wrapfn_", make_descriptor(t_SuggestStopFilterFactory::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestStopFilterFactory), "boxfn_", make_descriptor(boxObject));
              env->getClass(SuggestStopFilterFactory::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestStopFilterFactory), "FORMAT_SNOWBALL", make_descriptor(j2p(*SuggestStopFilterFactory::FORMAT_SNOWBALL)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestStopFilterFactory), "FORMAT_WORDSET", make_descriptor(j2p(*SuggestStopFilterFactory::FORMAT_WORDSET)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestStopFilterFactory), "NAME", make_descriptor(j2p(*SuggestStopFilterFactory::NAME)));
            }

            static PyObject *t_SuggestStopFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SuggestStopFilterFactory::initializeClass, 1)))
                return NULL;
              return t_SuggestStopFilterFactory::wrap_Object(SuggestStopFilterFactory(((t_SuggestStopFilterFactory *) arg)->object.this$));
            }
            static PyObject *t_SuggestStopFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SuggestStopFilterFactory::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SuggestStopFilterFactory_init_(t_SuggestStopFilterFactory *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              SuggestStopFilterFactory object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = SuggestStopFilterFactory(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SuggestStopFilterFactory_create(t_SuggestStopFilterFactory *self, PyObject *args)
            {
              ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.create(a0));
                return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
              }

              return callSuper(PY_TYPE(SuggestStopFilterFactory), (PyObject *) self, "create", args, 2);
            }

            static PyObject *t_SuggestStopFilterFactory_getStopWords(t_SuggestStopFilterFactory *self)
            {
              ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
              OBJ_CALL(result = self->object.getStopWords());
              return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
            }

            static PyObject *t_SuggestStopFilterFactory_inform(t_SuggestStopFilterFactory *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.inform(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "inform", arg);
              return NULL;
            }

            static PyObject *t_SuggestStopFilterFactory_isIgnoreCase(t_SuggestStopFilterFactory *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isIgnoreCase());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_SuggestStopFilterFactory_get__ignoreCase(t_SuggestStopFilterFactory *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isIgnoreCase());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_SuggestStopFilterFactory_get__stopWords(t_SuggestStopFilterFactory *self, void *data)
            {
              ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
              OBJ_CALL(value = self->object.getStopWords());
              return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *DaciukMihovAutomatonBuilder::class$ = NULL;
          jmethodID *DaciukMihovAutomatonBuilder::mids$ = NULL;
          bool DaciukMihovAutomatonBuilder::live$ = false;

          jclass DaciukMihovAutomatonBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_099159949b7e02ee] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/CharsRef;)V");
              mids$[mid_build_1673d25b84e453fc] = env->getStaticMethodID(cls, "build", "(Ljava/util/Collection;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void DaciukMihovAutomatonBuilder::add(const ::org::apache::lucene::util::CharsRef & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_099159949b7e02ee], a0.this$);
          }

          ::org::apache::lucene::util::automaton::Automaton DaciukMihovAutomatonBuilder::build(const ::java::util::Collection & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_build_1673d25b84e453fc], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_DaciukMihovAutomatonBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DaciukMihovAutomatonBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DaciukMihovAutomatonBuilder_add(t_DaciukMihovAutomatonBuilder *self, PyObject *arg);
          static PyObject *t_DaciukMihovAutomatonBuilder_build(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_DaciukMihovAutomatonBuilder__methods_[] = {
            DECLARE_METHOD(t_DaciukMihovAutomatonBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DaciukMihovAutomatonBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DaciukMihovAutomatonBuilder, add, METH_O),
            DECLARE_METHOD(t_DaciukMihovAutomatonBuilder, build, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DaciukMihovAutomatonBuilder)[] = {
            { Py_tp_methods, t_DaciukMihovAutomatonBuilder__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DaciukMihovAutomatonBuilder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(DaciukMihovAutomatonBuilder, t_DaciukMihovAutomatonBuilder, DaciukMihovAutomatonBuilder);

          void t_DaciukMihovAutomatonBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(DaciukMihovAutomatonBuilder), &PY_TYPE_DEF(DaciukMihovAutomatonBuilder), module, "DaciukMihovAutomatonBuilder", 0);
          }

          void t_DaciukMihovAutomatonBuilder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DaciukMihovAutomatonBuilder), "class_", make_descriptor(DaciukMihovAutomatonBuilder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DaciukMihovAutomatonBuilder), "wrapfn_", make_descriptor(t_DaciukMihovAutomatonBuilder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DaciukMihovAutomatonBuilder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DaciukMihovAutomatonBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DaciukMihovAutomatonBuilder::initializeClass, 1)))
              return NULL;
            return t_DaciukMihovAutomatonBuilder::wrap_Object(DaciukMihovAutomatonBuilder(((t_DaciukMihovAutomatonBuilder *) arg)->object.this$));
          }
          static PyObject *t_DaciukMihovAutomatonBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DaciukMihovAutomatonBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DaciukMihovAutomatonBuilder_add(t_DaciukMihovAutomatonBuilder *self, PyObject *arg)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::CharsRef::initializeClass, &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_DaciukMihovAutomatonBuilder_build(PyTypeObject *type, PyObject *arg)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::DaciukMihovAutomatonBuilder::build(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "build", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/Rectangle.h"
#include "org/apache/lucene/geo/Polygon.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/geo/Rectangle.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *Rectangle::class$ = NULL;
        jmethodID *Rectangle::mids$ = NULL;
        jfieldID *Rectangle::fids$ = NULL;
        bool Rectangle::live$ = false;
        jdouble Rectangle::AXISLAT_ERROR = (jdouble) 0;

        jclass Rectangle::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/Rectangle");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_98b1cec09263a48f] = env->getMethodID(cls, "<init>", "(DDDD)V");
            mids$[mid_axisLat_990b512583b70d91] = env->getStaticMethodID(cls, "axisLat", "(DD)D");
            mids$[mid_containsPoint_c4e087cb1201d3d4] = env->getStaticMethodID(cls, "containsPoint", "(DDDDDD)Z");
            mids$[mid_crossesDateline_8454bd5aa23fd11e] = env->getMethodID(cls, "crossesDateline", "()Z");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_fromPointDistance_683cc039e2f7ed17] = env->getStaticMethodID(cls, "fromPointDistance", "(DDD)Lorg/apache/lucene/geo/Rectangle;");
            mids$[mid_fromPolygon_eebda915d8f4a0b9] = env->getStaticMethodID(cls, "fromPolygon", "([Lorg/apache/lucene/geo/Polygon;)Lorg/apache/lucene/geo/Rectangle;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toComponent2D_6fe8ae19c34b6817] = env->getMethodID(cls, "toComponent2D", "()Lorg/apache/lucene/geo/Component2D;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_maxLat] = env->getFieldID(cls, "maxLat", "D");
            fids$[fid_maxLon] = env->getFieldID(cls, "maxLon", "D");
            fids$[fid_minLat] = env->getFieldID(cls, "minLat", "D");
            fids$[fid_minLon] = env->getFieldID(cls, "minLon", "D");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            AXISLAT_ERROR = env->getStaticDoubleField(cls, "AXISLAT_ERROR");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Rectangle::Rectangle(jdouble a0, jdouble a1, jdouble a2, jdouble a3) : ::org::apache::lucene::geo::LatLonGeometry(env->newObject(initializeClass, &mids$, mid_init$_98b1cec09263a48f, a0, a1, a2, a3)) {}

        jdouble Rectangle::axisLat(jdouble a0, jdouble a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_axisLat_990b512583b70d91], a0, a1);
        }

        jboolean Rectangle::containsPoint(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_containsPoint_c4e087cb1201d3d4], a0, a1, a2, a3, a4, a5);
        }

        jboolean Rectangle::crossesDateline() const
        {
          return env->callBooleanMethod(this$, mids$[mid_crossesDateline_8454bd5aa23fd11e]);
        }

        jboolean Rectangle::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        Rectangle Rectangle::fromPointDistance(jdouble a0, jdouble a1, jdouble a2)
        {
          jclass cls = env->getClass(initializeClass);
          return Rectangle(env->callStaticObjectMethod(cls, mids$[mid_fromPointDistance_683cc039e2f7ed17], a0, a1, a2));
        }

        Rectangle Rectangle::fromPolygon(const JArray< ::org::apache::lucene::geo::Polygon > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Rectangle(env->callStaticObjectMethod(cls, mids$[mid_fromPolygon_eebda915d8f4a0b9], a0.this$));
        }

        jint Rectangle::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String Rectangle::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jdouble Rectangle::_get_maxLat() const
        {
          return env->getDoubleField(this$, fids$[fid_maxLat]);
        }

        jdouble Rectangle::_get_maxLon() const
        {
          return env->getDoubleField(this$, fids$[fid_maxLon]);
        }

        jdouble Rectangle::_get_minLat() const
        {
          return env->getDoubleField(this$, fids$[fid_minLat]);
        }

        jdouble Rectangle::_get_minLon() const
        {
          return env->getDoubleField(this$, fids$[fid_minLon]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_Rectangle_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Rectangle_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Rectangle_init_(t_Rectangle *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Rectangle_axisLat(PyTypeObject *type, PyObject *args);
        static PyObject *t_Rectangle_containsPoint(PyTypeObject *type, PyObject *args);
        static PyObject *t_Rectangle_crossesDateline(t_Rectangle *self);
        static PyObject *t_Rectangle_equals(t_Rectangle *self, PyObject *args);
        static PyObject *t_Rectangle_fromPointDistance(PyTypeObject *type, PyObject *args);
        static PyObject *t_Rectangle_fromPolygon(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Rectangle_hashCode(t_Rectangle *self, PyObject *args);
        static PyObject *t_Rectangle_toString(t_Rectangle *self, PyObject *args);
        static PyObject *t_Rectangle_get__maxLat(t_Rectangle *self, void *data);
        static PyObject *t_Rectangle_get__maxLon(t_Rectangle *self, void *data);
        static PyObject *t_Rectangle_get__minLat(t_Rectangle *self, void *data);
        static PyObject *t_Rectangle_get__minLon(t_Rectangle *self, void *data);

        static PyGetSetDef t_Rectangle__fields_[] = {
          DECLARE_GET_FIELD(t_Rectangle, maxLat),
          DECLARE_GET_FIELD(t_Rectangle, maxLon),
          DECLARE_GET_FIELD(t_Rectangle, minLat),
          DECLARE_GET_FIELD(t_Rectangle, minLon),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Rectangle__methods_[] = {
          DECLARE_METHOD(t_Rectangle, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Rectangle, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Rectangle, axisLat, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Rectangle, containsPoint, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Rectangle, crossesDateline, METH_NOARGS),
          DECLARE_METHOD(t_Rectangle, equals, METH_VARARGS),
          DECLARE_METHOD(t_Rectangle, fromPointDistance, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Rectangle, fromPolygon, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Rectangle, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Rectangle, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Rectangle)[] = {
          { Py_tp_methods, t_Rectangle__methods_ },
          { Py_tp_init, (void *) t_Rectangle_init_ },
          { Py_tp_getset, t_Rectangle__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Rectangle)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::geo::LatLonGeometry),
          NULL
        };

        DEFINE_TYPE(Rectangle, t_Rectangle, Rectangle);

        void t_Rectangle::install(PyObject *module)
        {
          installType(&PY_TYPE(Rectangle), &PY_TYPE_DEF(Rectangle), module, "Rectangle", 0);
        }

        void t_Rectangle::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Rectangle), "class_", make_descriptor(Rectangle::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Rectangle), "wrapfn_", make_descriptor(t_Rectangle::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Rectangle), "boxfn_", make_descriptor(boxObject));
          env->getClass(Rectangle::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(Rectangle), "AXISLAT_ERROR", make_descriptor(Rectangle::AXISLAT_ERROR));
        }

        static PyObject *t_Rectangle_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Rectangle::initializeClass, 1)))
            return NULL;
          return t_Rectangle::wrap_Object(Rectangle(((t_Rectangle *) arg)->object.this$));
        }
        static PyObject *t_Rectangle_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Rectangle::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Rectangle_init_(t_Rectangle *self, PyObject *args, PyObject *kwds)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          jdouble a3;
          Rectangle object((jobject) NULL);

          if (!parseArgs(args, "DDDD", &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = Rectangle(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Rectangle_axisLat(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble result;

          if (!parseArgs(args, "DD", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::Rectangle::axisLat(a0, a1));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "axisLat", args);
          return NULL;
        }

        static PyObject *t_Rectangle_containsPoint(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble a4;
          jdouble a5;
          jboolean result;

          if (!parseArgs(args, "DDDDDD", &a0, &a1, &a2, &a3, &a4, &a5))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::Rectangle::containsPoint(a0, a1, a2, a3, a4, a5));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "containsPoint", args);
          return NULL;
        }

        static PyObject *t_Rectangle_crossesDateline(t_Rectangle *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.crossesDateline());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Rectangle_equals(t_Rectangle *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(Rectangle), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Rectangle_fromPointDistance(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          Rectangle result((jobject) NULL);

          if (!parseArgs(args, "DDD", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::Rectangle::fromPointDistance(a0, a1, a2));
            return t_Rectangle::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "fromPointDistance", args);
          return NULL;
        }

        static PyObject *t_Rectangle_fromPolygon(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::org::apache::lucene::geo::Polygon > a0((jobject) NULL);
          Rectangle result((jobject) NULL);

          if (!parseArg(arg, "[k", ::org::apache::lucene::geo::Polygon::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::Rectangle::fromPolygon(a0));
            return t_Rectangle::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "fromPolygon", arg);
          return NULL;
        }

        static PyObject *t_Rectangle_hashCode(t_Rectangle *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(Rectangle), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Rectangle_toString(t_Rectangle *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(Rectangle), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Rectangle_get__maxLat(t_Rectangle *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object._get_maxLat());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_Rectangle_get__maxLon(t_Rectangle *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object._get_maxLon());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_Rectangle_get__minLat(t_Rectangle *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object._get_minLat());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_Rectangle_get__minLon(t_Rectangle *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object._get_minLon());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PhraseSlopQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *PhraseSlopQueryNode::class$ = NULL;
              jmethodID *PhraseSlopQueryNode::mids$ = NULL;
              bool PhraseSlopQueryNode::live$ = false;

              jclass PhraseSlopQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/PhraseSlopQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_fb9fd50664cff210] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;I)V");
                  mids$[mid_cloneTree_7f4134ae4682ace0] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_7f4134ae4682ace0] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_ba44900ab7d793b9] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getValue_9972fcc56b44e79d] = env->getMethodID(cls, "getValue", "()I");
                  mids$[mid_setField_4b7f5e38f806ae55] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PhraseSlopQueryNode::PhraseSlopQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, jint a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_fb9fd50664cff210, a0.this$, a1)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode PhraseSlopQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_7f4134ae4682ace0]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode PhraseSlopQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_7f4134ae4682ace0]));
              }

              ::java::lang::CharSequence PhraseSlopQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_ba44900ab7d793b9]));
              }

              jint PhraseSlopQueryNode::getValue() const
              {
                return env->callIntMethod(this$, mids$[mid_getValue_9972fcc56b44e79d]);
              }

              void PhraseSlopQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_4b7f5e38f806ae55], a0.this$);
              }

              ::java::lang::CharSequence PhraseSlopQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String PhraseSlopQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_PhraseSlopQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PhraseSlopQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PhraseSlopQueryNode_init_(t_PhraseSlopQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PhraseSlopQueryNode_cloneTree(t_PhraseSlopQueryNode *self, PyObject *args);
              static PyObject *t_PhraseSlopQueryNode_getChild(t_PhraseSlopQueryNode *self);
              static PyObject *t_PhraseSlopQueryNode_getField(t_PhraseSlopQueryNode *self);
              static PyObject *t_PhraseSlopQueryNode_getValue(t_PhraseSlopQueryNode *self);
              static PyObject *t_PhraseSlopQueryNode_setField(t_PhraseSlopQueryNode *self, PyObject *arg);
              static PyObject *t_PhraseSlopQueryNode_toQueryString(t_PhraseSlopQueryNode *self, PyObject *args);
              static PyObject *t_PhraseSlopQueryNode_toString(t_PhraseSlopQueryNode *self, PyObject *args);
              static PyObject *t_PhraseSlopQueryNode_get__child(t_PhraseSlopQueryNode *self, void *data);
              static PyObject *t_PhraseSlopQueryNode_get__field(t_PhraseSlopQueryNode *self, void *data);
              static int t_PhraseSlopQueryNode_set__field(t_PhraseSlopQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_PhraseSlopQueryNode_get__value(t_PhraseSlopQueryNode *self, void *data);
              static PyGetSetDef t_PhraseSlopQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_PhraseSlopQueryNode, child),
                DECLARE_GETSET_FIELD(t_PhraseSlopQueryNode, field),
                DECLARE_GET_FIELD(t_PhraseSlopQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_PhraseSlopQueryNode__methods_[] = {
                DECLARE_METHOD(t_PhraseSlopQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, setField, METH_O),
                DECLARE_METHOD(t_PhraseSlopQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(PhraseSlopQueryNode)[] = {
                { Py_tp_methods, t_PhraseSlopQueryNode__methods_ },
                { Py_tp_init, (void *) t_PhraseSlopQueryNode_init_ },
                { Py_tp_getset, t_PhraseSlopQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(PhraseSlopQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl),
                NULL
              };

              DEFINE_TYPE(PhraseSlopQueryNode, t_PhraseSlopQueryNode, PhraseSlopQueryNode);

              void t_PhraseSlopQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(PhraseSlopQueryNode), &PY_TYPE_DEF(PhraseSlopQueryNode), module, "PhraseSlopQueryNode", 0);
              }

              void t_PhraseSlopQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseSlopQueryNode), "class_", make_descriptor(PhraseSlopQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseSlopQueryNode), "wrapfn_", make_descriptor(t_PhraseSlopQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseSlopQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PhraseSlopQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PhraseSlopQueryNode::initializeClass, 1)))
                  return NULL;
                return t_PhraseSlopQueryNode::wrap_Object(PhraseSlopQueryNode(((t_PhraseSlopQueryNode *) arg)->object.this$));
              }
              static PyObject *t_PhraseSlopQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PhraseSlopQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PhraseSlopQueryNode_init_(t_PhraseSlopQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                jint a1;
                PhraseSlopQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = PhraseSlopQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PhraseSlopQueryNode_cloneTree(t_PhraseSlopQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(PhraseSlopQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_PhraseSlopQueryNode_getChild(t_PhraseSlopQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_PhraseSlopQueryNode_getField(t_PhraseSlopQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_PhraseSlopQueryNode_getValue(t_PhraseSlopQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getValue());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_PhraseSlopQueryNode_setField(t_PhraseSlopQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_PhraseSlopQueryNode_toQueryString(t_PhraseSlopQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(PhraseSlopQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_PhraseSlopQueryNode_toString(t_PhraseSlopQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(PhraseSlopQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_PhraseSlopQueryNode_get__child(t_PhraseSlopQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_PhraseSlopQueryNode_get__field(t_PhraseSlopQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_PhraseSlopQueryNode_set__field(t_PhraseSlopQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_PhraseSlopQueryNode_get__value(t_PhraseSlopQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getValue());
                return PyLong_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/ParseException.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/Token.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *ParseException::class$ = NULL;
              jmethodID *ParseException::mids$ = NULL;
              jfieldID *ParseException::fids$ = NULL;
              bool ParseException::live$ = false;

              jclass ParseException::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/ParseException");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_26a7a119e2ed968d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                  mids$[mid_init$_7fbbf4e99ac6a2ab] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;[[I[Ljava/lang/String;)V");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_currentToken] = env->getFieldID(cls, "currentToken", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  fids$[fid_expectedTokenSequences] = env->getFieldID(cls, "expectedTokenSequences", "[[I");
                  fids$[fid_tokenImage] = env->getFieldID(cls, "tokenImage", "[Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ParseException::ParseException() : ::org::apache::lucene::queryparser::flexible::core::QueryNodeParseException(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ParseException::ParseException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeParseException(env->newObject(initializeClass, &mids$, mid_init$_26a7a119e2ed968d, a0.this$)) {}

              ParseException::ParseException(const ::org::apache::lucene::queryparser::flexible::standard::parser::Token & a0, const JArray< JArray< jint > > & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeParseException(env->newObject(initializeClass, &mids$, mid_init$_7fbbf4e99ac6a2ab, a0.this$, a1.this$, a2.this$)) {}

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token ParseException::_get_currentToken() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->getObjectField(this$, fids$[fid_currentToken]));
              }

              void ParseException::_set_currentToken(const ::org::apache::lucene::queryparser::flexible::standard::parser::Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_currentToken], a0.this$);
              }

              JArray< JArray< jint > > ParseException::_get_expectedTokenSequences() const
              {
                return JArray< JArray< jint > >(env->getObjectField(this$, fids$[fid_expectedTokenSequences]));
              }

              void ParseException::_set_expectedTokenSequences(const JArray< JArray< jint > > & a0) const
              {
                env->setObjectField(this$, fids$[fid_expectedTokenSequences], a0.this$);
              }

              JArray< ::java::lang::String > ParseException::_get_tokenImage() const
              {
                return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_tokenImage]));
              }

              void ParseException::_set_tokenImage(const JArray< ::java::lang::String > & a0) const
              {
                env->setObjectField(this$, fids$[fid_tokenImage], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds);
              static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data);
              static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data);
              static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data);
              static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data);
              static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data);
              static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data);

              static PyGetSetDef t_ParseException__fields_[] = {
                DECLARE_GETSET_FIELD(t_ParseException, currentToken),
                DECLARE_GETSET_FIELD(t_ParseException, expectedTokenSequences),
                DECLARE_GETSET_FIELD(t_ParseException, tokenImage),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ParseException__methods_[] = {
                DECLARE_METHOD(t_ParseException, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ParseException, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(ParseException)[] = {
                { Py_tp_methods, t_ParseException__methods_ },
                { Py_tp_init, (void *) t_ParseException_init_ },
                { Py_tp_getset, t_ParseException__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(ParseException)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::QueryNodeParseException),
                NULL
              };

              DEFINE_TYPE(ParseException, t_ParseException, ParseException);

              void t_ParseException::install(PyObject *module)
              {
                installType(&PY_TYPE(ParseException), &PY_TYPE_DEF(ParseException), module, "ParseException", 0);
              }

              void t_ParseException::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(ParseException), "class_", make_descriptor(ParseException::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ParseException), "wrapfn_", make_descriptor(t_ParseException::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ParseException), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ParseException::initializeClass, 1)))
                  return NULL;
                return t_ParseException::wrap_Object(ParseException(((t_ParseException *) arg)->object.this$));
              }
              static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ParseException::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    ParseException object((jobject) NULL);

                    INT_CALL(object = ParseException());
                    self->object = object;
                    break;
                  }
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                    ParseException object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
                    {
                      INT_CALL(object = ParseException(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 3:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::Token a0((jobject) NULL);
                    JArray< JArray< jint > > a1((jobject) NULL);
                    JArray< ::java::lang::String > a2((jobject) NULL);
                    ParseException object((jobject) NULL);

                    if (!parseArgs(args, "k[[I[s", ::org::apache::lucene::queryparser::flexible::standard::parser::Token::initializeClass, &a0, &a1, &a2))
                    {
                      INT_CALL(object = ParseException(a0, a1, a2));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_currentToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
              static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_currentToken(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "currentToken", arg);
                return -1;
              }

              static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data)
              {
                JArray< JArray< jint > > value((jobject) NULL);
                OBJ_CALL(value = self->object._get_expectedTokenSequences());
                return JArray<jobject>(value.this$).wrap(NULL);
              }
              static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data)
              {
                JArray< JArray< jint > > value((jobject) NULL);
                if (!parseArg(arg, "[[I", &value))
                {
                  INT_CALL(self->object._set_expectedTokenSequences(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "expectedTokenSequences", arg);
                return -1;
              }

              static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data)
              {
                JArray< ::java::lang::String > value((jobject) NULL);
                OBJ_CALL(value = self->object._get_tokenImage());
                return JArray<jstring>(value.this$).wrap();
              }
              static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data)
              {
                JArray< ::java::lang::String > value((jobject) NULL);
                if (!parseArg(arg, "[s", &value))
                {
                  INT_CALL(self->object._set_tokenImage(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "tokenImage", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/BoostQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *BoostQueryNode::class$ = NULL;
              jmethodID *BoostQueryNode::mids$ = NULL;
              bool BoostQueryNode::live$ = false;

              jclass BoostQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/BoostQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_4d5f58ae1d8c1f5b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;F)V");
                  mids$[mid_cloneTree_7f4134ae4682ace0] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_7f4134ae4682ace0] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getValue_58aec2b64dff50c8] = env->getMethodID(cls, "getValue", "()F");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BoostQueryNode::BoostQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, jfloat a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_4d5f58ae1d8c1f5b, a0.this$, a1)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BoostQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_7f4134ae4682ace0]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BoostQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_7f4134ae4682ace0]));
              }

              jfloat BoostQueryNode::getValue() const
              {
                return env->callFloatMethod(this$, mids$[mid_getValue_58aec2b64dff50c8]);
              }

              ::java::lang::CharSequence BoostQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String BoostQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_BoostQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BoostQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BoostQueryNode_init_(t_BoostQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BoostQueryNode_cloneTree(t_BoostQueryNode *self, PyObject *args);
              static PyObject *t_BoostQueryNode_getChild(t_BoostQueryNode *self);
              static PyObject *t_BoostQueryNode_getValue(t_BoostQueryNode *self);
              static PyObject *t_BoostQueryNode_toQueryString(t_BoostQueryNode *self, PyObject *args);
              static PyObject *t_BoostQueryNode_toString(t_BoostQueryNode *self, PyObject *args);
              static PyObject *t_BoostQueryNode_get__child(t_BoostQueryNode *self, void *data);
              static PyObject *t_BoostQueryNode_get__value(t_BoostQueryNode *self, void *data);
              static PyGetSetDef t_BoostQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_BoostQueryNode, child),
                DECLARE_GET_FIELD(t_BoostQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_BoostQueryNode__methods_[] = {
                DECLARE_METHOD(t_BoostQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_BoostQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_BoostQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_BoostQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_BoostQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(BoostQueryNode)[] = {
                { Py_tp_methods, t_BoostQueryNode__methods_ },
                { Py_tp_init, (void *) t_BoostQueryNode_init_ },
                { Py_tp_getset, t_BoostQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(BoostQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl),
                NULL
              };

              DEFINE_TYPE(BoostQueryNode, t_BoostQueryNode, BoostQueryNode);

              void t_BoostQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(BoostQueryNode), &PY_TYPE_DEF(BoostQueryNode), module, "BoostQueryNode", 0);
              }

              void t_BoostQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(BoostQueryNode), "class_", make_descriptor(BoostQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(BoostQueryNode), "wrapfn_", make_descriptor(t_BoostQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(BoostQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BoostQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BoostQueryNode::initializeClass, 1)))
                  return NULL;
                return t_BoostQueryNode::wrap_Object(BoostQueryNode(((t_BoostQueryNode *) arg)->object.this$));
              }
              static PyObject *t_BoostQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BoostQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BoostQueryNode_init_(t_BoostQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                jfloat a1;
                BoostQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = BoostQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_BoostQueryNode_cloneTree(t_BoostQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(BoostQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_BoostQueryNode_getChild(t_BoostQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_BoostQueryNode_getValue(t_BoostQueryNode *self)
              {
                jfloat result;
                OBJ_CALL(result = self->object.getValue());
                return PyFloat_FromDouble((double) result);
              }

              static PyObject *t_BoostQueryNode_toQueryString(t_BoostQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(BoostQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_BoostQueryNode_toString(t_BoostQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(BoostQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_BoostQueryNode_get__child(t_BoostQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_BoostQueryNode_get__value(t_BoostQueryNode *self, void *data)
              {
                jfloat value;
                OBJ_CALL(value = self->object.getValue());
                return PyFloat_FromDouble((double) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/util/Map.h"
#include "org/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader$ChildrenIterator.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyReader::class$ = NULL;
          jmethodID *TaxonomyReader::mids$ = NULL;
          bool TaxonomyReader::live$ = false;
          jint TaxonomyReader::INVALID_ORDINAL = (jint) 0;
          jint TaxonomyReader::ROOT_ORDINAL = (jint) 0;

          jclass TaxonomyReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_decRef_f2cc1bce94666404] = env->getMethodID(cls, "decRef", "()V");
              mids$[mid_getChildren_4e31ca4cfcfd683d] = env->getMethodID(cls, "getChildren", "(I)Lorg/apache/lucene/facet/taxonomy/TaxonomyReader$ChildrenIterator;");
              mids$[mid_getCommitUserData_1c3426541413a55d] = env->getMethodID(cls, "getCommitUserData", "()Ljava/util/Map;");
              mids$[mid_getOrdinal_1e6795f28098d13d] = env->getMethodID(cls, "getOrdinal", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
              mids$[mid_getOrdinal_14824fa100558ea2] = env->getMethodID(cls, "getOrdinal", "(Ljava/lang/String;[Ljava/lang/String;)I");
              mids$[mid_getParallelTaxonomyArrays_1e0e55a7443a6fd1] = env->getMethodID(cls, "getParallelTaxonomyArrays", "()Lorg/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays;");
              mids$[mid_getPath_2f8d8c81610d6b29] = env->getMethodID(cls, "getPath", "(I)Lorg/apache/lucene/facet/taxonomy/FacetLabel;");
              mids$[mid_getRefCount_9972fcc56b44e79d] = env->getMethodID(cls, "getRefCount", "()I");
              mids$[mid_getSize_9972fcc56b44e79d] = env->getMethodID(cls, "getSize", "()I");
              mids$[mid_incRef_f2cc1bce94666404] = env->getMethodID(cls, "incRef", "()V");
              mids$[mid_openIfChanged_80589647fbe59fd1] = env->getStaticMethodID(cls, "openIfChanged", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;)Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;");
              mids$[mid_tryIncRef_8454bd5aa23fd11e] = env->getMethodID(cls, "tryIncRef", "()Z");
              mids$[mid_doClose_f2cc1bce94666404] = env->getMethodID(cls, "doClose", "()V");
              mids$[mid_doOpenIfChanged_f83f182c1358496d] = env->getMethodID(cls, "doOpenIfChanged", "()Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;");
              mids$[mid_ensureOpen_f2cc1bce94666404] = env->getMethodID(cls, "ensureOpen", "()V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              INVALID_ORDINAL = env->getStaticIntField(cls, "INVALID_ORDINAL");
              ROOT_ORDINAL = env->getStaticIntField(cls, "ROOT_ORDINAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyReader::TaxonomyReader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void TaxonomyReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void TaxonomyReader::decRef() const
          {
            env->callVoidMethod(this$, mids$[mid_decRef_f2cc1bce94666404]);
          }

          ::org::apache::lucene::facet::taxonomy::TaxonomyReader$ChildrenIterator TaxonomyReader::getChildren(jint a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::TaxonomyReader$ChildrenIterator(env->callObjectMethod(this$, mids$[mid_getChildren_4e31ca4cfcfd683d], a0));
          }

          ::java::util::Map TaxonomyReader::getCommitUserData() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitUserData_1c3426541413a55d]));
          }

          jint TaxonomyReader::getOrdinal(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_getOrdinal_1e6795f28098d13d], a0.this$);
          }

          jint TaxonomyReader::getOrdinal(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_getOrdinal_14824fa100558ea2], a0.this$, a1.this$);
          }

          ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays TaxonomyReader::getParallelTaxonomyArrays() const
          {
            return ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays(env->callObjectMethod(this$, mids$[mid_getParallelTaxonomyArrays_1e0e55a7443a6fd1]));
          }

          ::org::apache::lucene::facet::taxonomy::FacetLabel TaxonomyReader::getPath(jint a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::FacetLabel(env->callObjectMethod(this$, mids$[mid_getPath_2f8d8c81610d6b29], a0));
          }

          jint TaxonomyReader::getRefCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getRefCount_9972fcc56b44e79d]);
          }

          jint TaxonomyReader::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_9972fcc56b44e79d]);
          }

          void TaxonomyReader::incRef() const
          {
            env->callVoidMethod(this$, mids$[mid_incRef_f2cc1bce94666404]);
          }

          TaxonomyReader TaxonomyReader::openIfChanged(const TaxonomyReader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return TaxonomyReader(env->callStaticObjectMethod(cls, mids$[mid_openIfChanged_80589647fbe59fd1], a0.this$));
          }

          jboolean TaxonomyReader::tryIncRef() const
          {
            return env->callBooleanMethod(this$, mids$[mid_tryIncRef_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyReader_init_(t_TaxonomyReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TaxonomyReader_close(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_decRef(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_getChildren(t_TaxonomyReader *self, PyObject *arg);
          static PyObject *t_TaxonomyReader_getCommitUserData(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_getOrdinal(t_TaxonomyReader *self, PyObject *args);
          static PyObject *t_TaxonomyReader_getParallelTaxonomyArrays(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_getPath(t_TaxonomyReader *self, PyObject *arg);
          static PyObject *t_TaxonomyReader_getRefCount(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_getSize(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_incRef(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_openIfChanged(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyReader_tryIncRef(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_get__commitUserData(t_TaxonomyReader *self, void *data);
          static PyObject *t_TaxonomyReader_get__parallelTaxonomyArrays(t_TaxonomyReader *self, void *data);
          static PyObject *t_TaxonomyReader_get__refCount(t_TaxonomyReader *self, void *data);
          static PyObject *t_TaxonomyReader_get__size(t_TaxonomyReader *self, void *data);
          static PyGetSetDef t_TaxonomyReader__fields_[] = {
            DECLARE_GET_FIELD(t_TaxonomyReader, commitUserData),
            DECLARE_GET_FIELD(t_TaxonomyReader, parallelTaxonomyArrays),
            DECLARE_GET_FIELD(t_TaxonomyReader, refCount),
            DECLARE_GET_FIELD(t_TaxonomyReader, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TaxonomyReader__methods_[] = {
            DECLARE_METHOD(t_TaxonomyReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader, close, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, decRef, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, getChildren, METH_O),
            DECLARE_METHOD(t_TaxonomyReader, getCommitUserData, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, getOrdinal, METH_VARARGS),
            DECLARE_METHOD(t_TaxonomyReader, getParallelTaxonomyArrays, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, getPath, METH_O),
            DECLARE_METHOD(t_TaxonomyReader, getRefCount, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, getSize, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, incRef, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, openIfChanged, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader, tryIncRef, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TaxonomyReader)[] = {
            { Py_tp_methods, t_TaxonomyReader__methods_ },
            { Py_tp_init, (void *) t_TaxonomyReader_init_ },
            { Py_tp_getset, t_TaxonomyReader__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TaxonomyReader)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(TaxonomyReader, t_TaxonomyReader, TaxonomyReader);

          void t_TaxonomyReader::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyReader), &PY_TYPE_DEF(TaxonomyReader), module, "TaxonomyReader", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyReader), "ChildrenIterator", make_descriptor(&PY_TYPE_DEF(TaxonomyReader$ChildrenIterator)));
          }

          void t_TaxonomyReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyReader), "class_", make_descriptor(TaxonomyReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyReader), "wrapfn_", make_descriptor(t_TaxonomyReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyReader), "boxfn_", make_descriptor(boxObject));
            env->getClass(TaxonomyReader::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyReader), "INVALID_ORDINAL", make_descriptor(TaxonomyReader::INVALID_ORDINAL));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyReader), "ROOT_ORDINAL", make_descriptor(TaxonomyReader::ROOT_ORDINAL));
          }

          static PyObject *t_TaxonomyReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyReader::initializeClass, 1)))
              return NULL;
            return t_TaxonomyReader::wrap_Object(TaxonomyReader(((t_TaxonomyReader *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyReader_init_(t_TaxonomyReader *self, PyObject *args, PyObject *kwds)
          {
            TaxonomyReader object((jobject) NULL);

            INT_CALL(object = TaxonomyReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_TaxonomyReader_close(t_TaxonomyReader *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          static PyObject *t_TaxonomyReader_decRef(t_TaxonomyReader *self)
          {
            OBJ_CALL(self->object.decRef());
            Py_RETURN_NONE;
          }

          static PyObject *t_TaxonomyReader_getChildren(t_TaxonomyReader *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::facet::taxonomy::TaxonomyReader$ChildrenIterator result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getChildren(a0));
              return ::org::apache::lucene::facet::taxonomy::t_TaxonomyReader$ChildrenIterator::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getChildren", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyReader_getCommitUserData(t_TaxonomyReader *self)
          {
            ::java::util::Map result((jobject) NULL);
            OBJ_CALL(result = self->object.getCommitUserData());
            return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TaxonomyReader_getOrdinal(t_TaxonomyReader *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
                jint result;

                if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.getOrdinal(a0));
                  return PyLong_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                jint result;

                if (!parseArgs(args, "s[s", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getOrdinal(a0, a1));
                  return PyLong_FromLong((long) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getOrdinal", args);
            return NULL;
          }

          static PyObject *t_TaxonomyReader_getParallelTaxonomyArrays(t_TaxonomyReader *self)
          {
            ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays result((jobject) NULL);
            OBJ_CALL(result = self->object.getParallelTaxonomyArrays());
            return ::org::apache::lucene::facet::taxonomy::t_ParallelTaxonomyArrays::wrap_Object(result);
          }

          static PyObject *t_TaxonomyReader_getPath(t_TaxonomyReader *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::facet::taxonomy::FacetLabel result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getPath(a0));
              return ::org::apache::lucene::facet::taxonomy::t_FacetLabel::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPath", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyReader_getRefCount(t_TaxonomyReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getRefCount());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_TaxonomyReader_getSize(t_TaxonomyReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_TaxonomyReader_incRef(t_TaxonomyReader *self)
          {
            OBJ_CALL(self->object.incRef());
            Py_RETURN_NONE;
          }

          static PyObject *t_TaxonomyReader_openIfChanged(PyTypeObject *type, PyObject *arg)
          {
            TaxonomyReader a0((jobject) NULL);
            TaxonomyReader result((jobject) NULL);

            if (!parseArg(arg, "k", TaxonomyReader::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::TaxonomyReader::openIfChanged(a0));
              return t_TaxonomyReader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "openIfChanged", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyReader_tryIncRef(t_TaxonomyReader *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.tryIncRef());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_TaxonomyReader_get__commitUserData(t_TaxonomyReader *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getCommitUserData());
            return ::java::util::t_Map::wrap_Object(value);
          }

          static PyObject *t_TaxonomyReader_get__parallelTaxonomyArrays(t_TaxonomyReader *self, void *data)
          {
            ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays value((jobject) NULL);
            OBJ_CALL(value = self->object.getParallelTaxonomyArrays());
            return ::org::apache::lucene::facet::taxonomy::t_ParallelTaxonomyArrays::wrap_Object(value);
          }

          static PyObject *t_TaxonomyReader_get__refCount(t_TaxonomyReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getRefCount());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_TaxonomyReader_get__size(t_TaxonomyReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/Extensions$Pair.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *Extensions$Pair::class$ = NULL;
          jmethodID *Extensions$Pair::mids$ = NULL;
          jfieldID *Extensions$Pair::fids$ = NULL;
          bool Extensions$Pair::live$ = false;

          jclass Extensions$Pair::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/Extensions$Pair");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_912183be9c37d462] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;Ljava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_cud] = env->getFieldID(cls, "cud", "Ljava/lang/Object;");
              fids$[fid_cur] = env->getFieldID(cls, "cur", "Ljava/lang/Object;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Extensions$Pair::Extensions$Pair(const ::java::lang::Object & a0, const ::java::lang::Object & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_912183be9c37d462, a0.this$, a1.this$)) {}

          ::java::lang::Object Extensions$Pair::_get_cud() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_cud]));
          }

          ::java::lang::Object Extensions$Pair::_get_cur() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_cur]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_Extensions$Pair_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Extensions$Pair_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Extensions$Pair_of_(t_Extensions$Pair *self, PyObject *args);
          static int t_Extensions$Pair_init_(t_Extensions$Pair *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Extensions$Pair_get__cud(t_Extensions$Pair *self, void *data);
          static PyObject *t_Extensions$Pair_get__cur(t_Extensions$Pair *self, void *data);

          static PyObject *t_Extensions$Pair_get__parameters_(t_Extensions$Pair *self, void *data);
          static PyGetSetDef t_Extensions$Pair__fields_[] = {
            DECLARE_GET_FIELD(t_Extensions$Pair, cud),
            DECLARE_GET_FIELD(t_Extensions$Pair, cur),
            DECLARE_GET_FIELD(t_Extensions$Pair, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Extensions$Pair__methods_[] = {
            DECLARE_METHOD(t_Extensions$Pair, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Extensions$Pair, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Extensions$Pair, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Extensions$Pair)[] = {
            { Py_tp_methods, t_Extensions$Pair__methods_ },
            { Py_tp_init, (void *) t_Extensions$Pair_init_ },
            { Py_tp_getset, t_Extensions$Pair__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Extensions$Pair)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Extensions$Pair, t_Extensions$Pair, Extensions$Pair);
          PyObject *t_Extensions$Pair::wrap_Object(const Extensions$Pair& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_Extensions$Pair::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Extensions$Pair *self = (t_Extensions$Pair *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_Extensions$Pair::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_Extensions$Pair::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Extensions$Pair *self = (t_Extensions$Pair *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_Extensions$Pair::install(PyObject *module)
          {
            installType(&PY_TYPE(Extensions$Pair), &PY_TYPE_DEF(Extensions$Pair), module, "Extensions$Pair", 0);
          }

          void t_Extensions$Pair::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Extensions$Pair), "class_", make_descriptor(Extensions$Pair::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Extensions$Pair), "wrapfn_", make_descriptor(t_Extensions$Pair::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Extensions$Pair), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Extensions$Pair_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Extensions$Pair::initializeClass, 1)))
              return NULL;
            return t_Extensions$Pair::wrap_Object(Extensions$Pair(((t_Extensions$Pair *) arg)->object.this$));
          }
          static PyObject *t_Extensions$Pair_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Extensions$Pair::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Extensions$Pair_of_(t_Extensions$Pair *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Extensions$Pair_init_(t_Extensions$Pair *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            Extensions$Pair object((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              INT_CALL(object = Extensions$Pair(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_Extensions$Pair_get__parameters_(t_Extensions$Pair *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Extensions$Pair_get__cud(t_Extensions$Pair *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_cud());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_Extensions$Pair_get__cur(t_Extensions$Pair *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_cur());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter.h"
#include "org/apache/lucene/analysis/payloads/PayloadEncoder.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *DelimitedPayloadTokenFilter::class$ = NULL;
          jmethodID *DelimitedPayloadTokenFilter::mids$ = NULL;
          bool DelimitedPayloadTokenFilter::live$ = false;
          jchar DelimitedPayloadTokenFilter::DEFAULT_DELIMITER = (jchar) 0;

          jclass DelimitedPayloadTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_937c2481d850403a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;CLorg/apache/lucene/analysis/payloads/PayloadEncoder;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_DELIMITER = env->getStaticCharField(cls, "DEFAULT_DELIMITER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DelimitedPayloadTokenFilter::DelimitedPayloadTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jchar a1, const ::org::apache::lucene::analysis::payloads::PayloadEncoder & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_937c2481d850403a, a0.this$, a1, a2.this$)) {}

          jboolean DelimitedPayloadTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_DelimitedPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DelimitedPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DelimitedPayloadTokenFilter_init_(t_DelimitedPayloadTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DelimitedPayloadTokenFilter_incrementToken(t_DelimitedPayloadTokenFilter *self, PyObject *args);

          static PyMethodDef t_DelimitedPayloadTokenFilter__methods_[] = {
            DECLARE_METHOD(t_DelimitedPayloadTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DelimitedPayloadTokenFilter)[] = {
            { Py_tp_methods, t_DelimitedPayloadTokenFilter__methods_ },
            { Py_tp_init, (void *) t_DelimitedPayloadTokenFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DelimitedPayloadTokenFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(DelimitedPayloadTokenFilter, t_DelimitedPayloadTokenFilter, DelimitedPayloadTokenFilter);

          void t_DelimitedPayloadTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DelimitedPayloadTokenFilter), &PY_TYPE_DEF(DelimitedPayloadTokenFilter), module, "DelimitedPayloadTokenFilter", 0);
          }

          void t_DelimitedPayloadTokenFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedPayloadTokenFilter), "class_", make_descriptor(DelimitedPayloadTokenFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedPayloadTokenFilter), "wrapfn_", make_descriptor(t_DelimitedPayloadTokenFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedPayloadTokenFilter), "boxfn_", make_descriptor(boxObject));
            env->getClass(DelimitedPayloadTokenFilter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedPayloadTokenFilter), "DEFAULT_DELIMITER", make_descriptor(DelimitedPayloadTokenFilter::DEFAULT_DELIMITER));
          }

          static PyObject *t_DelimitedPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DelimitedPayloadTokenFilter::initializeClass, 1)))
              return NULL;
            return t_DelimitedPayloadTokenFilter::wrap_Object(DelimitedPayloadTokenFilter(((t_DelimitedPayloadTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_DelimitedPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DelimitedPayloadTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DelimitedPayloadTokenFilter_init_(t_DelimitedPayloadTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jchar a1;
            ::org::apache::lucene::analysis::payloads::PayloadEncoder a2((jobject) NULL);
            DelimitedPayloadTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kCk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::payloads::PayloadEncoder::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = DelimitedPayloadTokenFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DelimitedPayloadTokenFilter_incrementToken(t_DelimitedPayloadTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(DelimitedPayloadTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TimeLimitingCollector.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/LeafCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/TimeLimitingCollector$TimerThread.h"
#include "org/apache/lucene/search/Collector.h"
#include "org/apache/lucene/util/Counter.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TimeLimitingCollector::class$ = NULL;
        jmethodID *TimeLimitingCollector::mids$ = NULL;
        bool TimeLimitingCollector::live$ = false;

        jclass TimeLimitingCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TimeLimitingCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_42c98bb149e9f221] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Collector;Lorg/apache/lucene/util/Counter;J)V");
            mids$[mid_getGlobalCounter_9a5efba60e88cd95] = env->getStaticMethodID(cls, "getGlobalCounter", "()Lorg/apache/lucene/util/Counter;");
            mids$[mid_getGlobalTimerThread_f81eef417012b634] = env->getStaticMethodID(cls, "getGlobalTimerThread", "()Lorg/apache/lucene/search/TimeLimitingCollector$TimerThread;");
            mids$[mid_getLeafCollector_d5dbc8c30b21e920] = env->getMethodID(cls, "getLeafCollector", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/LeafCollector;");
            mids$[mid_isGreedy_8454bd5aa23fd11e] = env->getMethodID(cls, "isGreedy", "()Z");
            mids$[mid_scoreMode_8a35254b82ee8276] = env->getMethodID(cls, "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;");
            mids$[mid_setBaseline_f2cc1bce94666404] = env->getMethodID(cls, "setBaseline", "()V");
            mids$[mid_setBaseline_9c778c9bce6694df] = env->getMethodID(cls, "setBaseline", "(J)V");
            mids$[mid_setCollector_a816cd51c84fa652] = env->getMethodID(cls, "setCollector", "(Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_setGreedy_9d72768e8fdce2b7] = env->getMethodID(cls, "setGreedy", "(Z)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TimeLimitingCollector::TimeLimitingCollector(const ::org::apache::lucene::search::Collector & a0, const ::org::apache::lucene::util::Counter & a1, jlong a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_42c98bb149e9f221, a0.this$, a1.this$, a2)) {}

        ::org::apache::lucene::util::Counter TimeLimitingCollector::getGlobalCounter()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Counter(env->callStaticObjectMethod(cls, mids$[mid_getGlobalCounter_9a5efba60e88cd95]));
        }

        ::org::apache::lucene::search::TimeLimitingCollector$TimerThread TimeLimitingCollector::getGlobalTimerThread()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TimeLimitingCollector$TimerThread(env->callStaticObjectMethod(cls, mids$[mid_getGlobalTimerThread_f81eef417012b634]));
        }

        ::org::apache::lucene::search::LeafCollector TimeLimitingCollector::getLeafCollector(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::search::LeafCollector(env->callObjectMethod(this$, mids$[mid_getLeafCollector_d5dbc8c30b21e920], a0.this$));
        }

        jboolean TimeLimitingCollector::isGreedy() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isGreedy_8454bd5aa23fd11e]);
        }

        ::org::apache::lucene::search::ScoreMode TimeLimitingCollector::scoreMode() const
        {
          return ::org::apache::lucene::search::ScoreMode(env->callObjectMethod(this$, mids$[mid_scoreMode_8a35254b82ee8276]));
        }

        void TimeLimitingCollector::setBaseline() const
        {
          env->callVoidMethod(this$, mids$[mid_setBaseline_f2cc1bce94666404]);
        }

        void TimeLimitingCollector::setBaseline(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBaseline_9c778c9bce6694df], a0);
        }

        void TimeLimitingCollector::setCollector(const ::org::apache::lucene::search::Collector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCollector_a816cd51c84fa652], a0.this$);
        }

        void TimeLimitingCollector::setGreedy(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setGreedy_9d72768e8fdce2b7], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/TimeLimitingCollector$TimeExceededException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TimeLimitingCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimeLimitingCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TimeLimitingCollector_init_(t_TimeLimitingCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TimeLimitingCollector_getGlobalCounter(PyTypeObject *type);
        static PyObject *t_TimeLimitingCollector_getGlobalTimerThread(PyTypeObject *type);
        static PyObject *t_TimeLimitingCollector_getLeafCollector(t_TimeLimitingCollector *self, PyObject *arg);
        static PyObject *t_TimeLimitingCollector_isGreedy(t_TimeLimitingCollector *self);
        static PyObject *t_TimeLimitingCollector_scoreMode(t_TimeLimitingCollector *self);
        static PyObject *t_TimeLimitingCollector_setBaseline(t_TimeLimitingCollector *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector_setCollector(t_TimeLimitingCollector *self, PyObject *arg);
        static PyObject *t_TimeLimitingCollector_setGreedy(t_TimeLimitingCollector *self, PyObject *arg);
        static int t_TimeLimitingCollector_set__baseline(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static int t_TimeLimitingCollector_set__collector(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static PyObject *t_TimeLimitingCollector_get__globalCounter(t_TimeLimitingCollector *self, void *data);
        static PyObject *t_TimeLimitingCollector_get__globalTimerThread(t_TimeLimitingCollector *self, void *data);
        static PyObject *t_TimeLimitingCollector_get__greedy(t_TimeLimitingCollector *self, void *data);
        static int t_TimeLimitingCollector_set__greedy(t_TimeLimitingCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_TimeLimitingCollector__fields_[] = {
          DECLARE_SET_FIELD(t_TimeLimitingCollector, baseline),
          DECLARE_SET_FIELD(t_TimeLimitingCollector, collector),
          DECLARE_GET_FIELD(t_TimeLimitingCollector, globalCounter),
          DECLARE_GET_FIELD(t_TimeLimitingCollector, globalTimerThread),
          DECLARE_GETSET_FIELD(t_TimeLimitingCollector, greedy),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TimeLimitingCollector__methods_[] = {
          DECLARE_METHOD(t_TimeLimitingCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector, getGlobalCounter, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector, getGlobalTimerThread, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector, getLeafCollector, METH_O),
          DECLARE_METHOD(t_TimeLimitingCollector, isGreedy, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, scoreMode, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, setBaseline, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector, setCollector, METH_O),
          DECLARE_METHOD(t_TimeLimitingCollector, setGreedy, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TimeLimitingCollector)[] = {
          { Py_tp_methods, t_TimeLimitingCollector__methods_ },
          { Py_tp_init, (void *) t_TimeLimitingCollector_init_ },
          { Py_tp_getset, t_TimeLimitingCollector__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TimeLimitingCollector)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(TimeLimitingCollector, t_TimeLimitingCollector, TimeLimitingCollector);

        void t_TimeLimitingCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TimeLimitingCollector), &PY_TYPE_DEF(TimeLimitingCollector), module, "TimeLimitingCollector", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(TimeLimitingCollector), "TimerThread", make_descriptor(&PY_TYPE_DEF(TimeLimitingCollector$TimerThread)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TimeLimitingCollector), "TimeExceededException", make_descriptor(&PY_TYPE_DEF(TimeLimitingCollector$TimeExceededException)));
        }

        void t_TimeLimitingCollector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TimeLimitingCollector), "class_", make_descriptor(TimeLimitingCollector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TimeLimitingCollector), "wrapfn_", make_descriptor(t_TimeLimitingCollector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TimeLimitingCollector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TimeLimitingCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TimeLimitingCollector::initializeClass, 1)))
            return NULL;
          return t_TimeLimitingCollector::wrap_Object(TimeLimitingCollector(((t_TimeLimitingCollector *) arg)->object.this$));
        }
        static PyObject *t_TimeLimitingCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TimeLimitingCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TimeLimitingCollector_init_(t_TimeLimitingCollector *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Collector a0((jobject) NULL);
          ::org::apache::lucene::util::Counter a1((jobject) NULL);
          jlong a2;
          TimeLimitingCollector object((jobject) NULL);

          if (!parseArgs(args, "kkJ", ::org::apache::lucene::search::Collector::initializeClass, ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = TimeLimitingCollector(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TimeLimitingCollector_getGlobalCounter(PyTypeObject *type)
        {
          ::org::apache::lucene::util::Counter result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::TimeLimitingCollector::getGlobalCounter());
          return ::org::apache::lucene::util::t_Counter::wrap_Object(result);
        }

        static PyObject *t_TimeLimitingCollector_getGlobalTimerThread(PyTypeObject *type)
        {
          ::org::apache::lucene::search::TimeLimitingCollector$TimerThread result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::TimeLimitingCollector::getGlobalTimerThread());
          return ::org::apache::lucene::search::t_TimeLimitingCollector$TimerThread::wrap_Object(result);
        }

        static PyObject *t_TimeLimitingCollector_getLeafCollector(t_TimeLimitingCollector *self, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::LeafCollector result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getLeafCollector(a0));
            return ::org::apache::lucene::search::t_LeafCollector::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getLeafCollector", arg);
          return NULL;
        }

        static PyObject *t_TimeLimitingCollector_isGreedy(t_TimeLimitingCollector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isGreedy());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TimeLimitingCollector_scoreMode(t_TimeLimitingCollector *self)
        {
          ::org::apache::lucene::search::ScoreMode result((jobject) NULL);
          OBJ_CALL(result = self->object.scoreMode());
          return ::org::apache::lucene::search::t_ScoreMode::wrap_Object(result);
        }

        static PyObject *t_TimeLimitingCollector_setBaseline(t_TimeLimitingCollector *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.setBaseline());
              Py_RETURN_NONE;
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.setBaseline(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setBaseline", args);
          return NULL;
        }

        static PyObject *t_TimeLimitingCollector_setCollector(t_TimeLimitingCollector *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Collector a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setCollector(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCollector", arg);
          return NULL;
        }

        static PyObject *t_TimeLimitingCollector_setGreedy(t_TimeLimitingCollector *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setGreedy(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setGreedy", arg);
          return NULL;
        }

        static int t_TimeLimitingCollector_set__baseline(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setBaseline(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "baseline", arg);
          return -1;
        }

        static int t_TimeLimitingCollector_set__collector(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Collector value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Collector::initializeClass, &value))
            {
              INT_CALL(self->object.setCollector(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "collector", arg);
          return -1;
        }

        static PyObject *t_TimeLimitingCollector_get__globalCounter(t_TimeLimitingCollector *self, void *data)
        {
          ::org::apache::lucene::util::Counter value((jobject) NULL);
          OBJ_CALL(value = self->object.getGlobalCounter());
          return ::org::apache::lucene::util::t_Counter::wrap_Object(value);
        }

        static PyObject *t_TimeLimitingCollector_get__globalTimerThread(t_TimeLimitingCollector *self, void *data)
        {
          ::org::apache::lucene::search::TimeLimitingCollector$TimerThread value((jobject) NULL);
          OBJ_CALL(value = self->object.getGlobalTimerThread());
          return ::org::apache::lucene::search::t_TimeLimitingCollector$TimerThread::wrap_Object(value);
        }

        static PyObject *t_TimeLimitingCollector_get__greedy(t_TimeLimitingCollector *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isGreedy());
          Py_RETURN_BOOL(value);
        }
        static int t_TimeLimitingCollector_set__greedy(t_TimeLimitingCollector *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setGreedy(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "greedy", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/CharStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *FastCharStream::class$ = NULL;
              jmethodID *FastCharStream::mids$ = NULL;
              bool FastCharStream::live$ = false;

              jclass FastCharStream::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                  mids$[mid_BeginToken_8eea1dd85c3239c3] = env->getMethodID(cls, "BeginToken", "()C");
                  mids$[mid_Done_f2cc1bce94666404] = env->getMethodID(cls, "Done", "()V");
                  mids$[mid_GetImage_db9b55ba01e03e4b] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
                  mids$[mid_GetSuffix_4a35a620830b94db] = env->getMethodID(cls, "GetSuffix", "(I)[C");
                  mids$[mid_backup_040c4cd0390c5aff] = env->getMethodID(cls, "backup", "(I)V");
                  mids$[mid_getBeginColumn_9972fcc56b44e79d] = env->getMethodID(cls, "getBeginColumn", "()I");
                  mids$[mid_getBeginLine_9972fcc56b44e79d] = env->getMethodID(cls, "getBeginLine", "()I");
                  mids$[mid_getColumn_9972fcc56b44e79d] = env->getMethodID(cls, "getColumn", "()I");
                  mids$[mid_getEndColumn_9972fcc56b44e79d] = env->getMethodID(cls, "getEndColumn", "()I");
                  mids$[mid_getEndLine_9972fcc56b44e79d] = env->getMethodID(cls, "getEndLine", "()I");
                  mids$[mid_getLine_9972fcc56b44e79d] = env->getMethodID(cls, "getLine", "()I");
                  mids$[mid_readChar_8eea1dd85c3239c3] = env->getMethodID(cls, "readChar", "()C");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FastCharStream::FastCharStream(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b2f3c57f5e6eb3f2, a0.this$)) {}

              jchar FastCharStream::BeginToken() const
              {
                return env->callCharMethod(this$, mids$[mid_BeginToken_8eea1dd85c3239c3]);
              }

              void FastCharStream::Done() const
              {
                env->callVoidMethod(this$, mids$[mid_Done_f2cc1bce94666404]);
              }

              ::java::lang::String FastCharStream::GetImage() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_db9b55ba01e03e4b]));
              }

              JArray< jchar > FastCharStream::GetSuffix(jint a0) const
              {
                return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_4a35a620830b94db], a0));
              }

              void FastCharStream::backup(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_backup_040c4cd0390c5aff], a0);
              }

              jint FastCharStream::getBeginColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getBeginColumn_9972fcc56b44e79d]);
              }

              jint FastCharStream::getBeginLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getBeginLine_9972fcc56b44e79d]);
              }

              jint FastCharStream::getColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getColumn_9972fcc56b44e79d]);
              }

              jint FastCharStream::getEndColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getEndColumn_9972fcc56b44e79d]);
              }

              jint FastCharStream::getEndLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getEndLine_9972fcc56b44e79d]);
              }

              jint FastCharStream::getLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getLine_9972fcc56b44e79d]);
              }

              jchar FastCharStream::readChar() const
              {
                return env->callCharMethod(this$, mids$[mid_readChar_8eea1dd85c3239c3]);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self);
              static PyObject *t_FastCharStream_Done(t_FastCharStream *self);
              static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self);
              static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg);
              static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg);
              static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getLine(t_FastCharStream *self);
              static PyObject *t_FastCharStream_readChar(t_FastCharStream *self);
              static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data);
              static PyGetSetDef t_FastCharStream__fields_[] = {
                DECLARE_GET_FIELD(t_FastCharStream, beginColumn),
                DECLARE_GET_FIELD(t_FastCharStream, beginLine),
                DECLARE_GET_FIELD(t_FastCharStream, column),
                DECLARE_GET_FIELD(t_FastCharStream, endColumn),
                DECLARE_GET_FIELD(t_FastCharStream, endLine),
                DECLARE_GET_FIELD(t_FastCharStream, line),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FastCharStream__methods_[] = {
                DECLARE_METHOD(t_FastCharStream, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FastCharStream, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FastCharStream, BeginToken, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, Done, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, GetImage, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, GetSuffix, METH_O),
                DECLARE_METHOD(t_FastCharStream, backup, METH_O),
                DECLARE_METHOD(t_FastCharStream, getBeginColumn, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getBeginLine, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getColumn, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getEndColumn, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getEndLine, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getLine, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, readChar, METH_NOARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(FastCharStream)[] = {
                { Py_tp_methods, t_FastCharStream__methods_ },
                { Py_tp_init, (void *) t_FastCharStream_init_ },
                { Py_tp_getset, t_FastCharStream__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(FastCharStream)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(FastCharStream, t_FastCharStream, FastCharStream);

              void t_FastCharStream::install(PyObject *module)
              {
                installType(&PY_TYPE(FastCharStream), &PY_TYPE_DEF(FastCharStream), module, "FastCharStream", 0);
              }

              void t_FastCharStream::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(FastCharStream), "class_", make_descriptor(FastCharStream::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FastCharStream), "wrapfn_", make_descriptor(t_FastCharStream::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FastCharStream), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FastCharStream::initializeClass, 1)))
                  return NULL;
                return t_FastCharStream::wrap_Object(FastCharStream(((t_FastCharStream *) arg)->object.this$));
              }
              static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FastCharStream::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds)
              {
                ::java::io::Reader a0((jobject) NULL);
                FastCharStream object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = FastCharStream(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self)
              {
                jchar result;
                OBJ_CALL(result = self->object.BeginToken());
                return c2p(result);
              }

              static PyObject *t_FastCharStream_Done(t_FastCharStream *self)
              {
                OBJ_CALL(self->object.Done());
                Py_RETURN_NONE;
              }

              static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.GetImage());
                return j2p(result);
              }

              static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg)
              {
                jint a0;
                JArray< jchar > result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.GetSuffix(a0));
                  return result.wrap();
                }

                PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
                return NULL;
              }

              static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.backup(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "backup", arg);
                return NULL;
              }

              static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBeginColumn());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBeginLine());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getColumn());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEndColumn());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEndLine());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getLine(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getLine());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_readChar(t_FastCharStream *self)
              {
                jchar result;
                OBJ_CALL(result = self->object.readChar());
                return c2p(result);
              }

              static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBeginColumn());
                return PyLong_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBeginLine());
                return PyLong_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getColumn());
                return PyLong_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEndColumn());
                return PyLong_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEndLine());
                return PyLong_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getLine());
                return PyLong_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardTokenizer::class$ = NULL;
          jmethodID *StandardTokenizer::mids$ = NULL;
          bool StandardTokenizer::live$ = false;
          jint StandardTokenizer::ALPHANUM = (jint) 0;
          jint StandardTokenizer::EMOJI = (jint) 0;
          jint StandardTokenizer::HANGUL = (jint) 0;
          jint StandardTokenizer::HIRAGANA = (jint) 0;
          jint StandardTokenizer::IDEOGRAPHIC = (jint) 0;
          jint StandardTokenizer::KATAKANA = (jint) 0;
          jint StandardTokenizer::MAX_TOKEN_LENGTH_LIMIT = (jint) 0;
          jint StandardTokenizer::NUM = (jint) 0;
          jint StandardTokenizer::SOUTHEAST_ASIAN = (jint) 0;
          JArray< ::java::lang::String > *StandardTokenizer::TOKEN_TYPES = NULL;

          jclass StandardTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_a55a4d78167a7843] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getMaxTokenLength_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setMaxTokenLength_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              EMOJI = env->getStaticIntField(cls, "EMOJI");
              HANGUL = env->getStaticIntField(cls, "HANGUL");
              HIRAGANA = env->getStaticIntField(cls, "HIRAGANA");
              IDEOGRAPHIC = env->getStaticIntField(cls, "IDEOGRAPHIC");
              KATAKANA = env->getStaticIntField(cls, "KATAKANA");
              MAX_TOKEN_LENGTH_LIMIT = env->getStaticIntField(cls, "MAX_TOKEN_LENGTH_LIMIT");
              NUM = env->getStaticIntField(cls, "NUM");
              SOUTHEAST_ASIAN = env->getStaticIntField(cls, "SOUTHEAST_ASIAN");
              TOKEN_TYPES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "TOKEN_TYPES", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardTokenizer::StandardTokenizer() : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          StandardTokenizer::StandardTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_a55a4d78167a7843, a0.this$)) {}

          void StandardTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void StandardTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jint StandardTokenizer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_9972fcc56b44e79d]);
          }

          jboolean StandardTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void StandardTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }

          void StandardTokenizer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardTokenizer_init_(t_StandardTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardTokenizer_close(t_StandardTokenizer *self, PyObject *args);
          static PyObject *t_StandardTokenizer_end(t_StandardTokenizer *self, PyObject *args);
          static PyObject *t_StandardTokenizer_getMaxTokenLength(t_StandardTokenizer *self);
          static PyObject *t_StandardTokenizer_incrementToken(t_StandardTokenizer *self, PyObject *args);
          static PyObject *t_StandardTokenizer_reset(t_StandardTokenizer *self, PyObject *args);
          static PyObject *t_StandardTokenizer_setMaxTokenLength(t_StandardTokenizer *self, PyObject *arg);
          static PyObject *t_StandardTokenizer_get__maxTokenLength(t_StandardTokenizer *self, void *data);
          static int t_StandardTokenizer_set__maxTokenLength(t_StandardTokenizer *self, PyObject *arg, void *data);
          static PyGetSetDef t_StandardTokenizer__fields_[] = {
            DECLARE_GETSET_FIELD(t_StandardTokenizer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StandardTokenizer__methods_[] = {
            DECLARE_METHOD(t_StandardTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_StandardTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_StandardTokenizer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_StandardTokenizer, reset, METH_VARARGS),
            DECLARE_METHOD(t_StandardTokenizer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(StandardTokenizer)[] = {
            { Py_tp_methods, t_StandardTokenizer__methods_ },
            { Py_tp_init, (void *) t_StandardTokenizer_init_ },
            { Py_tp_getset, t_StandardTokenizer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(StandardTokenizer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Tokenizer),
            NULL
          };

          DEFINE_TYPE(StandardTokenizer, t_StandardTokenizer, StandardTokenizer);

          void t_StandardTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardTokenizer), &PY_TYPE_DEF(StandardTokenizer), module, "StandardTokenizer", 0);
          }

          void t_StandardTokenizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizer), "class_", make_descriptor(StandardTokenizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizer), "wrapfn_", make_descriptor(t_StandardTokenizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizer), "boxfn_", make_descriptor(boxObject));
            env->getClass(StandardTokenizer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizer), "ALPHANUM", make_descriptor(StandardTokenizer::ALPHANUM));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizer), "EMOJI", make_descriptor(StandardTokenizer::EMOJI));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizer), "HANGUL", make_descriptor(StandardTokenizer::HANGUL));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizer), "HIRAGANA", make_descriptor(StandardTokenizer::HIRAGANA));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizer), "IDEOGRAPHIC", make_descriptor(StandardTokenizer::IDEOGRAPHIC));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizer), "KATAKANA", make_descriptor(StandardTokenizer::KATAKANA));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizer), "MAX_TOKEN_LENGTH_LIMIT", make_descriptor(StandardTokenizer::MAX_TOKEN_LENGTH_LIMIT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizer), "NUM", make_descriptor(StandardTokenizer::NUM));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizer), "SOUTHEAST_ASIAN", make_descriptor(StandardTokenizer::SOUTHEAST_ASIAN));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizer), "TOKEN_TYPES", make_descriptor(JArray<jstring>(StandardTokenizer::TOKEN_TYPES->this$).wrap()));
          }

          static PyObject *t_StandardTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardTokenizer::initializeClass, 1)))
              return NULL;
            return t_StandardTokenizer::wrap_Object(StandardTokenizer(((t_StandardTokenizer *) arg)->object.this$));
          }
          static PyObject *t_StandardTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardTokenizer_init_(t_StandardTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                StandardTokenizer object((jobject) NULL);

                INT_CALL(object = StandardTokenizer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                StandardTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
                {
                  INT_CALL(object = StandardTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardTokenizer_close(t_StandardTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(StandardTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_StandardTokenizer_end(t_StandardTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(StandardTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_StandardTokenizer_getMaxTokenLength(t_StandardTokenizer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizer_incrementToken(t_StandardTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(StandardTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_StandardTokenizer_reset(t_StandardTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(StandardTokenizer), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_StandardTokenizer_setMaxTokenLength(t_StandardTokenizer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizer_get__maxTokenLength(t_StandardTokenizer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyLong_FromLong((long) value);
          }
          static int t_StandardTokenizer_set__maxTokenLength(t_StandardTokenizer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AfterEffectL.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AfterEffectL::class$ = NULL;
          jmethodID *AfterEffectL::mids$ = NULL;
          bool AfterEffectL::live$ = false;

          jclass AfterEffectL::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AfterEffectL");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_9724c62abce55cf4] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;D)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_scoreTimes1pTfn_3f1239f1e5e20981] = env->getMethodID(cls, "scoreTimes1pTfn", "(Lorg/apache/lucene/search/similarities/BasicStats;)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AfterEffectL::AfterEffectL() : ::org::apache::lucene::search::similarities::AfterEffect(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::search::Explanation AfterEffectL::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_9724c62abce55cf4], a0.this$, a1));
          }

          jdouble AfterEffectL::scoreTimes1pTfn(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_scoreTimes1pTfn_3f1239f1e5e20981], a0.this$);
          }

          ::java::lang::String AfterEffectL::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AfterEffectL_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AfterEffectL_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AfterEffectL_init_(t_AfterEffectL *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AfterEffectL_explain(t_AfterEffectL *self, PyObject *args);
          static PyObject *t_AfterEffectL_scoreTimes1pTfn(t_AfterEffectL *self, PyObject *args);
          static PyObject *t_AfterEffectL_toString(t_AfterEffectL *self, PyObject *args);

          static PyMethodDef t_AfterEffectL__methods_[] = {
            DECLARE_METHOD(t_AfterEffectL, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffectL, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffectL, explain, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffectL, scoreTimes1pTfn, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffectL, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(AfterEffectL)[] = {
            { Py_tp_methods, t_AfterEffectL__methods_ },
            { Py_tp_init, (void *) t_AfterEffectL_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(AfterEffectL)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::AfterEffect),
            NULL
          };

          DEFINE_TYPE(AfterEffectL, t_AfterEffectL, AfterEffectL);

          void t_AfterEffectL::install(PyObject *module)
          {
            installType(&PY_TYPE(AfterEffectL), &PY_TYPE_DEF(AfterEffectL), module, "AfterEffectL", 0);
          }

          void t_AfterEffectL::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(AfterEffectL), "class_", make_descriptor(AfterEffectL::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AfterEffectL), "wrapfn_", make_descriptor(t_AfterEffectL::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AfterEffectL), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AfterEffectL_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AfterEffectL::initializeClass, 1)))
              return NULL;
            return t_AfterEffectL::wrap_Object(AfterEffectL(((t_AfterEffectL *) arg)->object.this$));
          }
          static PyObject *t_AfterEffectL_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AfterEffectL::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AfterEffectL_init_(t_AfterEffectL *self, PyObject *args, PyObject *kwds)
          {
            AfterEffectL object((jobject) NULL);

            INT_CALL(object = AfterEffectL());
            self->object = object;

            return 0;
          }

          static PyObject *t_AfterEffectL_explain(t_AfterEffectL *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(PY_TYPE(AfterEffectL), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_AfterEffectL_scoreTimes1pTfn(t_AfterEffectL *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble result;

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.scoreTimes1pTfn(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(AfterEffectL), (PyObject *) self, "scoreTimes1pTfn", args, 2);
          }

          static PyObject *t_AfterEffectL_toString(t_AfterEffectL *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(AfterEffectL), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/AttributeSource$State.h"
#include "org/apache/lucene/util/Attribute.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "java/util/Iterator.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeSource::class$ = NULL;
        jmethodID *AttributeSource::mids$ = NULL;
        bool AttributeSource::live$ = false;

        jclass AttributeSource::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeSource");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_a55a4d78167a7843] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;)V");
            mids$[mid_addAttribute_dc1a2e28aa716826] = env->getMethodID(cls, "addAttribute", "(Ljava/lang/Class;)Lorg/apache/lucene/util/Attribute;");
            mids$[mid_addAttributeImpl_26346c38ebc9c090] = env->getMethodID(cls, "addAttributeImpl", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_captureState_e576d345b9d7fa00] = env->getMethodID(cls, "captureState", "()Lorg/apache/lucene/util/AttributeSource$State;");
            mids$[mid_clearAttributes_f2cc1bce94666404] = env->getMethodID(cls, "clearAttributes", "()V");
            mids$[mid_cloneAttributes_8fce18d62d0e145e] = env->getMethodID(cls, "cloneAttributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_copyTo_ac4d63b3420affe2] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeSource;)V");
            mids$[mid_endAttributes_f2cc1bce94666404] = env->getMethodID(cls, "endAttributes", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getAttribute_dc1a2e28aa716826] = env->getMethodID(cls, "getAttribute", "(Ljava/lang/Class;)Lorg/apache/lucene/util/Attribute;");
            mids$[mid_getAttributeClassesIterator_233a192dadb0917d] = env->getMethodID(cls, "getAttributeClassesIterator", "()Ljava/util/Iterator;");
            mids$[mid_getAttributeFactory_e08291aca9270e76] = env->getMethodID(cls, "getAttributeFactory", "()Lorg/apache/lucene/util/AttributeFactory;");
            mids$[mid_getAttributeImplsIterator_233a192dadb0917d] = env->getMethodID(cls, "getAttributeImplsIterator", "()Ljava/util/Iterator;");
            mids$[mid_hasAttribute_a895c7f53785ebe6] = env->getMethodID(cls, "hasAttribute", "(Ljava/lang/Class;)Z");
            mids$[mid_hasAttributes_8454bd5aa23fd11e] = env->getMethodID(cls, "hasAttributes", "()Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_reflectAsString_46a3600c464a391e] = env->getMethodID(cls, "reflectAsString", "(Z)Ljava/lang/String;");
            mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
            mids$[mid_removeAllAttributes_f2cc1bce94666404] = env->getMethodID(cls, "removeAllAttributes", "()V");
            mids$[mid_restoreState_68a3490c6111a696] = env->getMethodID(cls, "restoreState", "(Lorg/apache/lucene/util/AttributeSource$State;)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeSource::AttributeSource() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        AttributeSource::AttributeSource(const ::org::apache::lucene::util::AttributeFactory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a55a4d78167a7843, a0.this$)) {}

        ::org::apache::lucene::util::Attribute AttributeSource::addAttribute(const ::java::lang::Class & a0) const
        {
          return ::org::apache::lucene::util::Attribute(env->callObjectMethod(this$, mids$[mid_addAttribute_dc1a2e28aa716826], a0.this$));
        }

        void AttributeSource::addAttributeImpl(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addAttributeImpl_26346c38ebc9c090], a0.this$);
        }

        ::org::apache::lucene::util::AttributeSource$State AttributeSource::captureState() const
        {
          return ::org::apache::lucene::util::AttributeSource$State(env->callObjectMethod(this$, mids$[mid_captureState_e576d345b9d7fa00]));
        }

        void AttributeSource::clearAttributes() const
        {
          env->callVoidMethod(this$, mids$[mid_clearAttributes_f2cc1bce94666404]);
        }

        AttributeSource AttributeSource::cloneAttributes() const
        {
          return AttributeSource(env->callObjectMethod(this$, mids$[mid_cloneAttributes_8fce18d62d0e145e]));
        }

        void AttributeSource::copyTo(const AttributeSource & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_ac4d63b3420affe2], a0.this$);
        }

        void AttributeSource::endAttributes() const
        {
          env->callVoidMethod(this$, mids$[mid_endAttributes_f2cc1bce94666404]);
        }

        jboolean AttributeSource::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::org::apache::lucene::util::Attribute AttributeSource::getAttribute(const ::java::lang::Class & a0) const
        {
          return ::org::apache::lucene::util::Attribute(env->callObjectMethod(this$, mids$[mid_getAttribute_dc1a2e28aa716826], a0.this$));
        }

        ::java::util::Iterator AttributeSource::getAttributeClassesIterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_getAttributeClassesIterator_233a192dadb0917d]));
        }

        ::org::apache::lucene::util::AttributeFactory AttributeSource::getAttributeFactory() const
        {
          return ::org::apache::lucene::util::AttributeFactory(env->callObjectMethod(this$, mids$[mid_getAttributeFactory_e08291aca9270e76]));
        }

        ::java::util::Iterator AttributeSource::getAttributeImplsIterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_getAttributeImplsIterator_233a192dadb0917d]));
        }

        jboolean AttributeSource::hasAttribute(const ::java::lang::Class & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasAttribute_a895c7f53785ebe6], a0.this$);
        }

        jboolean AttributeSource::hasAttributes() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasAttributes_8454bd5aa23fd11e]);
        }

        jint AttributeSource::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String AttributeSource::reflectAsString(jboolean a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_reflectAsString_46a3600c464a391e], a0));
        }

        void AttributeSource::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
        }

        void AttributeSource::removeAllAttributes() const
        {
          env->callVoidMethod(this$, mids$[mid_removeAllAttributes_f2cc1bce94666404]);
        }

        void AttributeSource::restoreState(const ::org::apache::lucene::util::AttributeSource$State & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_restoreState_68a3490c6111a696], a0.this$);
        }

        ::java::lang::String AttributeSource::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeSource_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeSource_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AttributeSource_init_(t_AttributeSource *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeSource_addAttribute(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_addAttributeImpl(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_captureState(t_AttributeSource *self);
        static PyObject *t_AttributeSource_clearAttributes(t_AttributeSource *self);
        static PyObject *t_AttributeSource_cloneAttributes(t_AttributeSource *self);
        static PyObject *t_AttributeSource_copyTo(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_endAttributes(t_AttributeSource *self);
        static PyObject *t_AttributeSource_equals(t_AttributeSource *self, PyObject *args);
        static PyObject *t_AttributeSource_getAttribute(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_getAttributeClassesIterator(t_AttributeSource *self);
        static PyObject *t_AttributeSource_getAttributeFactory(t_AttributeSource *self);
        static PyObject *t_AttributeSource_getAttributeImplsIterator(t_AttributeSource *self);
        static PyObject *t_AttributeSource_hasAttribute(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_hasAttributes(t_AttributeSource *self);
        static PyObject *t_AttributeSource_hashCode(t_AttributeSource *self, PyObject *args);
        static PyObject *t_AttributeSource_reflectAsString(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_reflectWith(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_removeAllAttributes(t_AttributeSource *self);
        static PyObject *t_AttributeSource_restoreState(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_toString(t_AttributeSource *self, PyObject *args);
        static PyObject *t_AttributeSource_get__attributeClassesIterator(t_AttributeSource *self, void *data);
        static PyObject *t_AttributeSource_get__attributeFactory(t_AttributeSource *self, void *data);
        static PyObject *t_AttributeSource_get__attributeImplsIterator(t_AttributeSource *self, void *data);
        static PyGetSetDef t_AttributeSource__fields_[] = {
          DECLARE_GET_FIELD(t_AttributeSource, attributeClassesIterator),
          DECLARE_GET_FIELD(t_AttributeSource, attributeFactory),
          DECLARE_GET_FIELD(t_AttributeSource, attributeImplsIterator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AttributeSource__methods_[] = {
          DECLARE_METHOD(t_AttributeSource, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeSource, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeSource, addAttribute, METH_O),
          DECLARE_METHOD(t_AttributeSource, addAttributeImpl, METH_O),
          DECLARE_METHOD(t_AttributeSource, captureState, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, clearAttributes, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, cloneAttributes, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, copyTo, METH_O),
          DECLARE_METHOD(t_AttributeSource, endAttributes, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, equals, METH_VARARGS),
          DECLARE_METHOD(t_AttributeSource, getAttribute, METH_O),
          DECLARE_METHOD(t_AttributeSource, getAttributeClassesIterator, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, getAttributeFactory, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, getAttributeImplsIterator, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, hasAttribute, METH_O),
          DECLARE_METHOD(t_AttributeSource, hasAttributes, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_AttributeSource, reflectAsString, METH_O),
          DECLARE_METHOD(t_AttributeSource, reflectWith, METH_O),
          DECLARE_METHOD(t_AttributeSource, removeAllAttributes, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, restoreState, METH_O),
          DECLARE_METHOD(t_AttributeSource, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(AttributeSource)[] = {
          { Py_tp_methods, t_AttributeSource__methods_ },
          { Py_tp_init, (void *) t_AttributeSource_init_ },
          { Py_tp_getset, t_AttributeSource__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(AttributeSource)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(AttributeSource, t_AttributeSource, AttributeSource);

        void t_AttributeSource::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeSource), &PY_TYPE_DEF(AttributeSource), module, "AttributeSource", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(AttributeSource), "State", make_descriptor(&PY_TYPE_DEF(AttributeSource$State)));
        }

        void t_AttributeSource::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(AttributeSource), "class_", make_descriptor(AttributeSource::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(AttributeSource), "wrapfn_", make_descriptor(t_AttributeSource::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(AttributeSource), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AttributeSource_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeSource::initializeClass, 1)))
            return NULL;
          return t_AttributeSource::wrap_Object(AttributeSource(((t_AttributeSource *) arg)->object.this$));
        }
        static PyObject *t_AttributeSource_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeSource::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AttributeSource_init_(t_AttributeSource *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              AttributeSource object((jobject) NULL);

              INT_CALL(object = AttributeSource());
              self->object = object;
              break;
            }
           case 1:
            {
              ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
              AttributeSource object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
              {
                INT_CALL(object = AttributeSource(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_AttributeSource_addAttribute(t_AttributeSource *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::util::Attribute result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.addAttribute(a0));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::org::apache::lucene::util::t_Attribute::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "addAttribute", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_addAttributeImpl(t_AttributeSource *self, PyObject *arg)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addAttributeImpl(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addAttributeImpl", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_captureState(t_AttributeSource *self)
        {
          ::org::apache::lucene::util::AttributeSource$State result((jobject) NULL);
          OBJ_CALL(result = self->object.captureState());
          return ::org::apache::lucene::util::t_AttributeSource$State::wrap_Object(result);
        }

        static PyObject *t_AttributeSource_clearAttributes(t_AttributeSource *self)
        {
          OBJ_CALL(self->object.clearAttributes());
          Py_RETURN_NONE;
        }

        static PyObject *t_AttributeSource_cloneAttributes(t_AttributeSource *self)
        {
          AttributeSource result((jobject) NULL);
          OBJ_CALL(result = self->object.cloneAttributes());
          return t_AttributeSource::wrap_Object(result);
        }

        static PyObject *t_AttributeSource_copyTo(t_AttributeSource *self, PyObject *arg)
        {
          AttributeSource a0((jobject) NULL);

          if (!parseArg(arg, "k", AttributeSource::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyTo", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_endAttributes(t_AttributeSource *self)
        {
          OBJ_CALL(self->object.endAttributes());
          Py_RETURN_NONE;
        }

        static PyObject *t_AttributeSource_equals(t_AttributeSource *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(AttributeSource), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_AttributeSource_getAttribute(t_AttributeSource *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::util::Attribute result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.getAttribute(a0));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::org::apache::lucene::util::t_Attribute::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAttribute", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_getAttributeClassesIterator(t_AttributeSource *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributeClassesIterator());
          return ::java::util::t_Iterator::wrap_Object(result);
        }

        static PyObject *t_AttributeSource_getAttributeFactory(t_AttributeSource *self)
        {
          ::org::apache::lucene::util::AttributeFactory result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributeFactory());
          return ::org::apache::lucene::util::t_AttributeFactory::wrap_Object(result);
        }

        static PyObject *t_AttributeSource_getAttributeImplsIterator(t_AttributeSource *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributeImplsIterator());
          return ::java::util::t_Iterator::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(AttributeImpl));
        }

        static PyObject *t_AttributeSource_hasAttribute(t_AttributeSource *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.hasAttribute(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "hasAttribute", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_hasAttributes(t_AttributeSource *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasAttributes());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_AttributeSource_hashCode(t_AttributeSource *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(AttributeSource), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_AttributeSource_reflectAsString(t_AttributeSource *self, PyObject *arg)
        {
          jboolean a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.reflectAsString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "reflectAsString", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_reflectWith(t_AttributeSource *self, PyObject *arg)
        {
          ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reflectWith(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reflectWith", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_removeAllAttributes(t_AttributeSource *self)
        {
          OBJ_CALL(self->object.removeAllAttributes());
          Py_RETURN_NONE;
        }

        static PyObject *t_AttributeSource_restoreState(t_AttributeSource *self, PyObject *arg)
        {
          ::org::apache::lucene::util::AttributeSource$State a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeSource$State::initializeClass, &a0))
          {
            OBJ_CALL(self->object.restoreState(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "restoreState", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_toString(t_AttributeSource *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(AttributeSource), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_AttributeSource_get__attributeClassesIterator(t_AttributeSource *self, void *data)
        {
          ::java::util::Iterator value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributeClassesIterator());
          return ::java::util::t_Iterator::wrap_Object(value);
        }

        static PyObject *t_AttributeSource_get__attributeFactory(t_AttributeSource *self, void *data)
        {
          ::org::apache::lucene::util::AttributeFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributeFactory());
          return ::org::apache::lucene::util::t_AttributeFactory::wrap_Object(value);
        }

        static PyObject *t_AttributeSource_get__attributeImplsIterator(t_AttributeSource *self, void *data)
        {
          ::java::util::Iterator value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributeImplsIterator());
          return ::java::util::t_Iterator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/tokenattributes/PartOfSpeechAttributeImpl.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ja/Token.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/analysis/ja/tokenattributes/PartOfSpeechAttribute.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace tokenattributes {

            ::java::lang::Class *PartOfSpeechAttributeImpl::class$ = NULL;
            jmethodID *PartOfSpeechAttributeImpl::mids$ = NULL;
            bool PartOfSpeechAttributeImpl::live$ = false;

            jclass PartOfSpeechAttributeImpl::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/tokenattributes/PartOfSpeechAttributeImpl");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
                mids$[mid_getPartOfSpeech_db9b55ba01e03e4b] = env->getMethodID(cls, "getPartOfSpeech", "()Ljava/lang/String;");
                mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
                mids$[mid_setToken_e7eb8cf5a63e4354] = env->getMethodID(cls, "setToken", "(Lorg/apache/lucene/analysis/ja/Token;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            PartOfSpeechAttributeImpl::PartOfSpeechAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            void PartOfSpeechAttributeImpl::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
            }

            void PartOfSpeechAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_copyTo_26346c38ebc9c090], a0.this$);
            }

            ::java::lang::String PartOfSpeechAttributeImpl::getPartOfSpeech() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPartOfSpeech_db9b55ba01e03e4b]));
            }

            void PartOfSpeechAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
            }

            void PartOfSpeechAttributeImpl::setToken(const ::org::apache::lucene::analysis::ja::Token & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setToken_e7eb8cf5a63e4354], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace tokenattributes {
            static PyObject *t_PartOfSpeechAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PartOfSpeechAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
            static int t_PartOfSpeechAttributeImpl_init_(t_PartOfSpeechAttributeImpl *self, PyObject *args, PyObject *kwds);
            static PyObject *t_PartOfSpeechAttributeImpl_clear(t_PartOfSpeechAttributeImpl *self, PyObject *args);
            static PyObject *t_PartOfSpeechAttributeImpl_copyTo(t_PartOfSpeechAttributeImpl *self, PyObject *args);
            static PyObject *t_PartOfSpeechAttributeImpl_getPartOfSpeech(t_PartOfSpeechAttributeImpl *self);
            static PyObject *t_PartOfSpeechAttributeImpl_reflectWith(t_PartOfSpeechAttributeImpl *self, PyObject *args);
            static PyObject *t_PartOfSpeechAttributeImpl_setToken(t_PartOfSpeechAttributeImpl *self, PyObject *arg);
            static PyObject *t_PartOfSpeechAttributeImpl_get__partOfSpeech(t_PartOfSpeechAttributeImpl *self, void *data);
            static int t_PartOfSpeechAttributeImpl_set__token(t_PartOfSpeechAttributeImpl *self, PyObject *arg, void *data);
            static PyGetSetDef t_PartOfSpeechAttributeImpl__fields_[] = {
              DECLARE_GET_FIELD(t_PartOfSpeechAttributeImpl, partOfSpeech),
              DECLARE_SET_FIELD(t_PartOfSpeechAttributeImpl, token),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_PartOfSpeechAttributeImpl__methods_[] = {
              DECLARE_METHOD(t_PartOfSpeechAttributeImpl, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PartOfSpeechAttributeImpl, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PartOfSpeechAttributeImpl, clear, METH_VARARGS),
              DECLARE_METHOD(t_PartOfSpeechAttributeImpl, copyTo, METH_VARARGS),
              DECLARE_METHOD(t_PartOfSpeechAttributeImpl, getPartOfSpeech, METH_NOARGS),
              DECLARE_METHOD(t_PartOfSpeechAttributeImpl, reflectWith, METH_VARARGS),
              DECLARE_METHOD(t_PartOfSpeechAttributeImpl, setToken, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(PartOfSpeechAttributeImpl)[] = {
              { Py_tp_methods, t_PartOfSpeechAttributeImpl__methods_ },
              { Py_tp_init, (void *) t_PartOfSpeechAttributeImpl_init_ },
              { Py_tp_getset, t_PartOfSpeechAttributeImpl__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(PartOfSpeechAttributeImpl)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::util::AttributeImpl),
              NULL
            };

            DEFINE_TYPE(PartOfSpeechAttributeImpl, t_PartOfSpeechAttributeImpl, PartOfSpeechAttributeImpl);

            void t_PartOfSpeechAttributeImpl::install(PyObject *module)
            {
              installType(&PY_TYPE(PartOfSpeechAttributeImpl), &PY_TYPE_DEF(PartOfSpeechAttributeImpl), module, "PartOfSpeechAttributeImpl", 0);
            }

            void t_PartOfSpeechAttributeImpl::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(PartOfSpeechAttributeImpl), "class_", make_descriptor(PartOfSpeechAttributeImpl::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(PartOfSpeechAttributeImpl), "wrapfn_", make_descriptor(t_PartOfSpeechAttributeImpl::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(PartOfSpeechAttributeImpl), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PartOfSpeechAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PartOfSpeechAttributeImpl::initializeClass, 1)))
                return NULL;
              return t_PartOfSpeechAttributeImpl::wrap_Object(PartOfSpeechAttributeImpl(((t_PartOfSpeechAttributeImpl *) arg)->object.this$));
            }
            static PyObject *t_PartOfSpeechAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PartOfSpeechAttributeImpl::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_PartOfSpeechAttributeImpl_init_(t_PartOfSpeechAttributeImpl *self, PyObject *args, PyObject *kwds)
            {
              PartOfSpeechAttributeImpl object((jobject) NULL);

              INT_CALL(object = PartOfSpeechAttributeImpl());
              self->object = object;

              return 0;
            }

            static PyObject *t_PartOfSpeechAttributeImpl_clear(t_PartOfSpeechAttributeImpl *self, PyObject *args)
            {

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(self->object.clear());
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(PartOfSpeechAttributeImpl), (PyObject *) self, "clear", args, 2);
            }

            static PyObject *t_PartOfSpeechAttributeImpl_copyTo(t_PartOfSpeechAttributeImpl *self, PyObject *args)
            {
              ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
              {
                OBJ_CALL(self->object.copyTo(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(PartOfSpeechAttributeImpl), (PyObject *) self, "copyTo", args, 2);
            }

            static PyObject *t_PartOfSpeechAttributeImpl_getPartOfSpeech(t_PartOfSpeechAttributeImpl *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getPartOfSpeech());
              return j2p(result);
            }

            static PyObject *t_PartOfSpeechAttributeImpl_reflectWith(t_PartOfSpeechAttributeImpl *self, PyObject *args)
            {
              ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
              {
                OBJ_CALL(self->object.reflectWith(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(PartOfSpeechAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
            }

            static PyObject *t_PartOfSpeechAttributeImpl_setToken(t_PartOfSpeechAttributeImpl *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::ja::Token a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ja::Token::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setToken(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setToken", arg);
              return NULL;
            }

            static PyObject *t_PartOfSpeechAttributeImpl_get__partOfSpeech(t_PartOfSpeechAttributeImpl *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getPartOfSpeech());
              return j2p(value);
            }

            static int t_PartOfSpeechAttributeImpl_set__token(t_PartOfSpeechAttributeImpl *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::ja::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ja::Token::initializeClass, &value))
                {
                  INT_CALL(self->object.setToken(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "token", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/CombineSuggestion.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *CombineSuggestion::class$ = NULL;
          jmethodID *CombineSuggestion::mids$ = NULL;
          jfieldID *CombineSuggestion::fids$ = NULL;
          bool CombineSuggestion::live$ = false;

          jclass CombineSuggestion::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/CombineSuggestion");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f0a913bb7200a903] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spell/SuggestWord;[I)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_originalTermIndexes] = env->getFieldID(cls, "originalTermIndexes", "[I");
              fids$[fid_suggestion] = env->getFieldID(cls, "suggestion", "Lorg/apache/lucene/search/spell/SuggestWord;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CombineSuggestion::CombineSuggestion(const ::org::apache::lucene::search::spell::SuggestWord & a0, const JArray< jint > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f0a913bb7200a903, a0.this$, a1.this$)) {}

          JArray< jint > CombineSuggestion::_get_originalTermIndexes() const
          {
            return JArray< jint >(env->getObjectField(this$, fids$[fid_originalTermIndexes]));
          }

          ::org::apache::lucene::search::spell::SuggestWord CombineSuggestion::_get_suggestion() const
          {
            return ::org::apache::lucene::search::spell::SuggestWord(env->getObjectField(this$, fids$[fid_suggestion]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_CombineSuggestion_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CombineSuggestion_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CombineSuggestion_init_(t_CombineSuggestion *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CombineSuggestion_get__originalTermIndexes(t_CombineSuggestion *self, void *data);
          static PyObject *t_CombineSuggestion_get__suggestion(t_CombineSuggestion *self, void *data);

          static PyGetSetDef t_CombineSuggestion__fields_[] = {
            DECLARE_GET_FIELD(t_CombineSuggestion, originalTermIndexes),
            DECLARE_GET_FIELD(t_CombineSuggestion, suggestion),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CombineSuggestion__methods_[] = {
            DECLARE_METHOD(t_CombineSuggestion, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CombineSuggestion, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CombineSuggestion)[] = {
            { Py_tp_methods, t_CombineSuggestion__methods_ },
            { Py_tp_init, (void *) t_CombineSuggestion_init_ },
            { Py_tp_getset, t_CombineSuggestion__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CombineSuggestion)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(CombineSuggestion, t_CombineSuggestion, CombineSuggestion);

          void t_CombineSuggestion::install(PyObject *module)
          {
            installType(&PY_TYPE(CombineSuggestion), &PY_TYPE_DEF(CombineSuggestion), module, "CombineSuggestion", 0);
          }

          void t_CombineSuggestion::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CombineSuggestion), "class_", make_descriptor(CombineSuggestion::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CombineSuggestion), "wrapfn_", make_descriptor(t_CombineSuggestion::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CombineSuggestion), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CombineSuggestion_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CombineSuggestion::initializeClass, 1)))
              return NULL;
            return t_CombineSuggestion::wrap_Object(CombineSuggestion(((t_CombineSuggestion *) arg)->object.this$));
          }
          static PyObject *t_CombineSuggestion_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CombineSuggestion::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CombineSuggestion_init_(t_CombineSuggestion *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spell::SuggestWord a0((jobject) NULL);
            JArray< jint > a1((jobject) NULL);
            CombineSuggestion object((jobject) NULL);

            if (!parseArgs(args, "k[I", ::org::apache::lucene::search::spell::SuggestWord::initializeClass, &a0, &a1))
            {
              INT_CALL(object = CombineSuggestion(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CombineSuggestion_get__originalTermIndexes(t_CombineSuggestion *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_originalTermIndexes());
            return value.wrap();
          }

          static PyObject *t_CombineSuggestion_get__suggestion(t_CombineSuggestion *self, void *data)
          {
            ::org::apache::lucene::search::spell::SuggestWord value((jobject) NULL);
            OBJ_CALL(value = self->object._get_suggestion());
            return ::org::apache::lucene::search::spell::t_SuggestWord::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "java/util/Collection.h"
#include "java/lang/Comparable.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "java/util/LinkedList.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldPhraseList$WeightedPhraseInfo::class$ = NULL;
          jmethodID *FieldPhraseList$WeightedPhraseInfo::mids$ = NULL;
          bool FieldPhraseList$WeightedPhraseInfo::live$ = false;

          jclass FieldPhraseList$WeightedPhraseInfo::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_50bc3ddc62a19f2d] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;)V");
              mids$[mid_init$_cd3f2a3b82833b44] = env->getMethodID(cls, "<init>", "(Ljava/util/LinkedList;F)V");
              mids$[mid_init$_2b6b930e0d47737c] = env->getMethodID(cls, "<init>", "(Ljava/util/LinkedList;FI)V");
              mids$[mid_compareTo_5122988dde28a408] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo;)I");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getBoost_58aec2b64dff50c8] = env->getMethodID(cls, "getBoost", "()F");
              mids$[mid_getEndOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getSeqnum_9972fcc56b44e79d] = env->getMethodID(cls, "getSeqnum", "()I");
              mids$[mid_getStartOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_getTermsInfos_49ec78390f08338a] = env->getMethodID(cls, "getTermsInfos", "()Ljava/util/List;");
              mids$[mid_getTermsOffsets_49ec78390f08338a] = env->getMethodID(cls, "getTermsOffsets", "()Ljava/util/List;");
              mids$[mid_getText_db9b55ba01e03e4b] = env->getMethodID(cls, "getText", "()Ljava/lang/String;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isOffsetOverlap_e3179a7d35efdda8] = env->getMethodID(cls, "isOffsetOverlap", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo;)Z");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldPhraseList$WeightedPhraseInfo::FieldPhraseList$WeightedPhraseInfo(const ::java::util::Collection & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_50bc3ddc62a19f2d, a0.this$)) {}

          FieldPhraseList$WeightedPhraseInfo::FieldPhraseList$WeightedPhraseInfo(const ::java::util::LinkedList & a0, jfloat a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cd3f2a3b82833b44, a0.this$, a1)) {}

          FieldPhraseList$WeightedPhraseInfo::FieldPhraseList$WeightedPhraseInfo(const ::java::util::LinkedList & a0, jfloat a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2b6b930e0d47737c, a0.this$, a1, a2)) {}

          jint FieldPhraseList$WeightedPhraseInfo::compareTo(const FieldPhraseList$WeightedPhraseInfo & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_5122988dde28a408], a0.this$);
          }

          jboolean FieldPhraseList$WeightedPhraseInfo::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jfloat FieldPhraseList$WeightedPhraseInfo::getBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getBoost_58aec2b64dff50c8]);
          }

          jint FieldPhraseList$WeightedPhraseInfo::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_9972fcc56b44e79d]);
          }

          jint FieldPhraseList$WeightedPhraseInfo::getSeqnum() const
          {
            return env->callIntMethod(this$, mids$[mid_getSeqnum_9972fcc56b44e79d]);
          }

          jint FieldPhraseList$WeightedPhraseInfo::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_9972fcc56b44e79d]);
          }

          ::java::util::List FieldPhraseList$WeightedPhraseInfo::getTermsInfos() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTermsInfos_49ec78390f08338a]));
          }

          ::java::util::List FieldPhraseList$WeightedPhraseInfo::getTermsOffsets() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTermsOffsets_49ec78390f08338a]));
          }

          ::java::lang::String FieldPhraseList$WeightedPhraseInfo::getText() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getText_db9b55ba01e03e4b]));
          }

          jint FieldPhraseList$WeightedPhraseInfo::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          jboolean FieldPhraseList$WeightedPhraseInfo::isOffsetOverlap(const FieldPhraseList$WeightedPhraseInfo & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isOffsetOverlap_e3179a7d35efdda8], a0.this$);
          }

          ::java::lang::String FieldPhraseList$WeightedPhraseInfo::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldPhraseList$WeightedPhraseInfo_init_(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_compareTo(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_equals(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getBoost(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getEndOffset(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getSeqnum(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getStartOffset(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getTermsInfos(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getTermsOffsets(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getText(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_hashCode(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_isOffsetOverlap(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_toString(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__boost(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__endOffset(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__seqnum(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__startOffset(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__termsInfos(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__termsOffsets(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__text(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyGetSetDef t_FieldPhraseList$WeightedPhraseInfo__fields_[] = {
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, boost),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, endOffset),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, seqnum),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, startOffset),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, termsInfos),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, termsOffsets),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, text),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldPhraseList$WeightedPhraseInfo__methods_[] = {
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, compareTo, METH_O),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, equals, METH_VARARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getBoost, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getSeqnum, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getTermsInfos, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getTermsOffsets, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getText, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, isOffsetOverlap, METH_O),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FieldPhraseList$WeightedPhraseInfo)[] = {
            { Py_tp_methods, t_FieldPhraseList$WeightedPhraseInfo__methods_ },
            { Py_tp_init, (void *) t_FieldPhraseList$WeightedPhraseInfo_init_ },
            { Py_tp_getset, t_FieldPhraseList$WeightedPhraseInfo__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FieldPhraseList$WeightedPhraseInfo)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FieldPhraseList$WeightedPhraseInfo, t_FieldPhraseList$WeightedPhraseInfo, FieldPhraseList$WeightedPhraseInfo);

          void t_FieldPhraseList$WeightedPhraseInfo::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo), &PY_TYPE_DEF(FieldPhraseList$WeightedPhraseInfo), module, "FieldPhraseList$WeightedPhraseInfo", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldPhraseList$WeightedPhraseInfo), "Toffs", make_descriptor(&PY_TYPE_DEF(FieldPhraseList$WeightedPhraseInfo$Toffs)));
          }

          void t_FieldPhraseList$WeightedPhraseInfo::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldPhraseList$WeightedPhraseInfo), "class_", make_descriptor(FieldPhraseList$WeightedPhraseInfo::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldPhraseList$WeightedPhraseInfo), "wrapfn_", make_descriptor(t_FieldPhraseList$WeightedPhraseInfo::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldPhraseList$WeightedPhraseInfo), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldPhraseList$WeightedPhraseInfo::initializeClass, 1)))
              return NULL;
            return t_FieldPhraseList$WeightedPhraseInfo::wrap_Object(FieldPhraseList$WeightedPhraseInfo(((t_FieldPhraseList$WeightedPhraseInfo *) arg)->object.this$));
          }
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldPhraseList$WeightedPhraseInfo::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldPhraseList$WeightedPhraseInfo_init_(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                FieldPhraseList$WeightedPhraseInfo object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  INT_CALL(object = FieldPhraseList$WeightedPhraseInfo(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::util::LinkedList a0((jobject) NULL);
                PyTypeObject **p0;
                jfloat a1;
                FieldPhraseList$WeightedPhraseInfo object((jobject) NULL);

                if (!parseArgs(args, "KF", ::java::util::LinkedList::initializeClass, &a0, &p0, ::java::util::t_LinkedList::parameters_, &a1))
                {
                  INT_CALL(object = FieldPhraseList$WeightedPhraseInfo(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::util::LinkedList a0((jobject) NULL);
                PyTypeObject **p0;
                jfloat a1;
                jint a2;
                FieldPhraseList$WeightedPhraseInfo object((jobject) NULL);

                if (!parseArgs(args, "KFI", ::java::util::LinkedList::initializeClass, &a0, &p0, ::java::util::t_LinkedList::parameters_, &a1, &a2))
                {
                  INT_CALL(object = FieldPhraseList$WeightedPhraseInfo(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_compareTo(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *arg)
          {
            FieldPhraseList$WeightedPhraseInfo a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", FieldPhraseList$WeightedPhraseInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_equals(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FieldPhraseList$WeightedPhraseInfo), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getBoost(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getEndOffset(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getSeqnum(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSeqnum());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getStartOffset(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getTermsInfos(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getTermsInfos());
            return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldTermStack$TermInfo));
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getTermsOffsets(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getTermsOffsets());
            return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs));
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getText(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getText());
            return j2p(result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_hashCode(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FieldPhraseList$WeightedPhraseInfo), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_isOffsetOverlap(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *arg)
          {
            FieldPhraseList$WeightedPhraseInfo a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", FieldPhraseList$WeightedPhraseInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isOffsetOverlap(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isOffsetOverlap", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_toString(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(FieldPhraseList$WeightedPhraseInfo), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__boost(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getBoost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__endOffset(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__seqnum(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSeqnum());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__startOffset(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__termsInfos(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getTermsInfos());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__termsOffsets(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getTermsOffsets());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__text(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getText());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/StringWriter.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/StringWriter.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/StringBuffer.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *StringWriter::class$ = NULL;
    jmethodID *StringWriter::mids$ = NULL;
    bool StringWriter::live$ = false;

    jclass StringWriter::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/StringWriter");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_append_f3607c00b41833a7] = env->getMethodID(cls, "append", "(C)Ljava/io/StringWriter;");
        mids$[mid_append_c7e6573b05b21f21] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/io/StringWriter;");
        mids$[mid_append_7e59d0e0a8eb8c2d] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/io/StringWriter;");
        mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
        mids$[mid_flush_f2cc1bce94666404] = env->getMethodID(cls, "flush", "()V");
        mids$[mid_getBuffer_3e74005fd5116584] = env->getMethodID(cls, "getBuffer", "()Ljava/lang/StringBuffer;");
        mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_write_9fd2eb66a64e6f0f] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
        mids$[mid_write_040c4cd0390c5aff] = env->getMethodID(cls, "write", "(I)V");
        mids$[mid_write_d5128be76a214037] = env->getMethodID(cls, "write", "([CII)V");
        mids$[mid_write_08af6957f9159d4d] = env->getMethodID(cls, "write", "(Ljava/lang/String;II)V");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    StringWriter::StringWriter() : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

    StringWriter::StringWriter(jint a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

    StringWriter StringWriter::append(jchar a0) const
    {
      return StringWriter(env->callObjectMethod(this$, mids$[mid_append_f3607c00b41833a7], a0));
    }

    StringWriter StringWriter::append(const ::java::lang::CharSequence & a0) const
    {
      return StringWriter(env->callObjectMethod(this$, mids$[mid_append_c7e6573b05b21f21], a0.this$));
    }

    StringWriter StringWriter::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
    {
      return StringWriter(env->callObjectMethod(this$, mids$[mid_append_7e59d0e0a8eb8c2d], a0.this$, a1, a2));
    }

    void StringWriter::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
    }

    void StringWriter::flush() const
    {
      env->callVoidMethod(this$, mids$[mid_flush_f2cc1bce94666404]);
    }

    ::java::lang::StringBuffer StringWriter::getBuffer() const
    {
      return ::java::lang::StringBuffer(env->callObjectMethod(this$, mids$[mid_getBuffer_3e74005fd5116584]));
    }

    ::java::lang::String StringWriter::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
    }

    void StringWriter::write(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_9fd2eb66a64e6f0f], a0.this$);
    }

    void StringWriter::write(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_040c4cd0390c5aff], a0);
    }

    void StringWriter::write(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_d5128be76a214037], a0.this$, a1, a2);
    }

    void StringWriter::write(const ::java::lang::String & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_08af6957f9159d4d], a0.this$, a1, a2);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_StringWriter_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_StringWriter_instance_(PyTypeObject *type, PyObject *arg);
    static int t_StringWriter_init_(t_StringWriter *self, PyObject *args, PyObject *kwds);
    static PyObject *t_StringWriter_append(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_close(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_flush(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_getBuffer(t_StringWriter *self);
    static PyObject *t_StringWriter_toString(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_write(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_get__buffer(t_StringWriter *self, void *data);
    static PyGetSetDef t_StringWriter__fields_[] = {
      DECLARE_GET_FIELD(t_StringWriter, buffer),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_StringWriter__methods_[] = {
      DECLARE_METHOD(t_StringWriter, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_StringWriter, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_StringWriter, append, METH_VARARGS),
      DECLARE_METHOD(t_StringWriter, close, METH_VARARGS),
      DECLARE_METHOD(t_StringWriter, flush, METH_VARARGS),
      DECLARE_METHOD(t_StringWriter, getBuffer, METH_NOARGS),
      DECLARE_METHOD(t_StringWriter, toString, METH_VARARGS),
      DECLARE_METHOD(t_StringWriter, write, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(StringWriter)[] = {
      { Py_tp_methods, t_StringWriter__methods_ },
      { Py_tp_init, (void *) t_StringWriter_init_ },
      { Py_tp_getset, t_StringWriter__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(StringWriter)[] = {
      &PY_TYPE_DEF(::java::io::Writer),
      NULL
    };

    DEFINE_TYPE(StringWriter, t_StringWriter, StringWriter);

    void t_StringWriter::install(PyObject *module)
    {
      installType(&PY_TYPE(StringWriter), &PY_TYPE_DEF(StringWriter), module, "StringWriter", 0);
    }

    void t_StringWriter::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(StringWriter), "class_", make_descriptor(StringWriter::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(StringWriter), "wrapfn_", make_descriptor(t_StringWriter::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(StringWriter), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_StringWriter_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, StringWriter::initializeClass, 1)))
        return NULL;
      return t_StringWriter::wrap_Object(StringWriter(((t_StringWriter *) arg)->object.this$));
    }
    static PyObject *t_StringWriter_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, StringWriter::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_StringWriter_init_(t_StringWriter *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          StringWriter object((jobject) NULL);

          INT_CALL(object = StringWriter());
          self->object = object;
          break;
        }
       case 1:
        {
          jint a0;
          StringWriter object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = StringWriter(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_StringWriter_append(t_StringWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          StringWriter result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_StringWriter::wrap_Object(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          StringWriter result((jobject) NULL);

          if (!parseArgs(args, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_StringWriter::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          StringWriter result((jobject) NULL);

          if (!parseArgs(args, "OII", ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.append(a0, a1, a2));
            return t_StringWriter::wrap_Object(result);
          }
        }
      }

      return callSuper(PY_TYPE(StringWriter), (PyObject *) self, "append", args, 2);
    }

    static PyObject *t_StringWriter_close(t_StringWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(StringWriter), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_StringWriter_flush(t_StringWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.flush());
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(StringWriter), (PyObject *) self, "flush", args, 2);
    }

    static PyObject *t_StringWriter_getBuffer(t_StringWriter *self)
    {
      ::java::lang::StringBuffer result((jobject) NULL);
      OBJ_CALL(result = self->object.getBuffer());
      return ::java::lang::t_StringBuffer::wrap_Object(result);
    }

    static PyObject *t_StringWriter_toString(t_StringWriter *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(PY_TYPE(StringWriter), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_StringWriter_write(t_StringWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "sII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
      }

      return callSuper(PY_TYPE(StringWriter), (PyObject *) self, "write", args, 2);
    }

    static PyObject *t_StringWriter_get__buffer(t_StringWriter *self, void *data)
    {
      ::java::lang::StringBuffer value((jobject) NULL);
      OBJ_CALL(value = self->object.getBuffer());
      return ::java::lang::t_StringBuffer::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BlendedTermQuery$Builder.h"
#include "org/apache/lucene/search/BlendedTermQuery$RewriteMethod.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/BlendedTermQuery.h"
#include "org/apache/lucene/index/TermStates.h"
#include "org/apache/lucene/search/BlendedTermQuery$Builder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BlendedTermQuery$Builder::class$ = NULL;
        jmethodID *BlendedTermQuery$Builder::mids$ = NULL;
        bool BlendedTermQuery$Builder::live$ = false;

        jclass BlendedTermQuery$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BlendedTermQuery$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_8748bb65f7153529] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/BlendedTermQuery$Builder;");
            mids$[mid_add_3cf9700bfd67115e] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;F)Lorg/apache/lucene/search/BlendedTermQuery$Builder;");
            mids$[mid_add_6eb18b0022d95b58] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;FLorg/apache/lucene/index/TermStates;)Lorg/apache/lucene/search/BlendedTermQuery$Builder;");
            mids$[mid_build_24ea9d64cfec7a61] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/search/BlendedTermQuery;");
            mids$[mid_setRewriteMethod_8446997eb404bf58] = env->getMethodID(cls, "setRewriteMethod", "(Lorg/apache/lucene/search/BlendedTermQuery$RewriteMethod;)Lorg/apache/lucene/search/BlendedTermQuery$Builder;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BlendedTermQuery$Builder::BlendedTermQuery$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        BlendedTermQuery$Builder BlendedTermQuery$Builder::add(const ::org::apache::lucene::index::Term & a0) const
        {
          return BlendedTermQuery$Builder(env->callObjectMethod(this$, mids$[mid_add_8748bb65f7153529], a0.this$));
        }

        BlendedTermQuery$Builder BlendedTermQuery$Builder::add(const ::org::apache::lucene::index::Term & a0, jfloat a1) const
        {
          return BlendedTermQuery$Builder(env->callObjectMethod(this$, mids$[mid_add_3cf9700bfd67115e], a0.this$, a1));
        }

        BlendedTermQuery$Builder BlendedTermQuery$Builder::add(const ::org::apache::lucene::index::Term & a0, jfloat a1, const ::org::apache::lucene::index::TermStates & a2) const
        {
          return BlendedTermQuery$Builder(env->callObjectMethod(this$, mids$[mid_add_6eb18b0022d95b58], a0.this$, a1, a2.this$));
        }

        ::org::apache::lucene::search::BlendedTermQuery BlendedTermQuery$Builder::build() const
        {
          return ::org::apache::lucene::search::BlendedTermQuery(env->callObjectMethod(this$, mids$[mid_build_24ea9d64cfec7a61]));
        }

        BlendedTermQuery$Builder BlendedTermQuery$Builder::setRewriteMethod(const ::org::apache::lucene::search::BlendedTermQuery$RewriteMethod & a0) const
        {
          return BlendedTermQuery$Builder(env->callObjectMethod(this$, mids$[mid_setRewriteMethod_8446997eb404bf58], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BlendedTermQuery$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BlendedTermQuery$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BlendedTermQuery$Builder_init_(t_BlendedTermQuery$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BlendedTermQuery$Builder_add(t_BlendedTermQuery$Builder *self, PyObject *args);
        static PyObject *t_BlendedTermQuery$Builder_build(t_BlendedTermQuery$Builder *self);
        static PyObject *t_BlendedTermQuery$Builder_setRewriteMethod(t_BlendedTermQuery$Builder *self, PyObject *arg);
        static int t_BlendedTermQuery$Builder_set__rewriteMethod(t_BlendedTermQuery$Builder *self, PyObject *arg, void *data);
        static PyGetSetDef t_BlendedTermQuery$Builder__fields_[] = {
          DECLARE_SET_FIELD(t_BlendedTermQuery$Builder, rewriteMethod),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BlendedTermQuery$Builder__methods_[] = {
          DECLARE_METHOD(t_BlendedTermQuery$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BlendedTermQuery$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BlendedTermQuery$Builder, add, METH_VARARGS),
          DECLARE_METHOD(t_BlendedTermQuery$Builder, build, METH_NOARGS),
          DECLARE_METHOD(t_BlendedTermQuery$Builder, setRewriteMethod, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BlendedTermQuery$Builder)[] = {
          { Py_tp_methods, t_BlendedTermQuery$Builder__methods_ },
          { Py_tp_init, (void *) t_BlendedTermQuery$Builder_init_ },
          { Py_tp_getset, t_BlendedTermQuery$Builder__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BlendedTermQuery$Builder)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(BlendedTermQuery$Builder, t_BlendedTermQuery$Builder, BlendedTermQuery$Builder);

        void t_BlendedTermQuery$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(BlendedTermQuery$Builder), &PY_TYPE_DEF(BlendedTermQuery$Builder), module, "BlendedTermQuery$Builder", 0);
        }

        void t_BlendedTermQuery$Builder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedTermQuery$Builder), "class_", make_descriptor(BlendedTermQuery$Builder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedTermQuery$Builder), "wrapfn_", make_descriptor(t_BlendedTermQuery$Builder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedTermQuery$Builder), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BlendedTermQuery$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BlendedTermQuery$Builder::initializeClass, 1)))
            return NULL;
          return t_BlendedTermQuery$Builder::wrap_Object(BlendedTermQuery$Builder(((t_BlendedTermQuery$Builder *) arg)->object.this$));
        }
        static PyObject *t_BlendedTermQuery$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BlendedTermQuery$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BlendedTermQuery$Builder_init_(t_BlendedTermQuery$Builder *self, PyObject *args, PyObject *kwds)
        {
          BlendedTermQuery$Builder object((jobject) NULL);

          INT_CALL(object = BlendedTermQuery$Builder());
          self->object = object;

          return 0;
        }

        static PyObject *t_BlendedTermQuery$Builder_add(t_BlendedTermQuery$Builder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              BlendedTermQuery$Builder result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_BlendedTermQuery$Builder::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jfloat a1;
              BlendedTermQuery$Builder result((jobject) NULL);

              if (!parseArgs(args, "kF", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.add(a0, a1));
                return t_BlendedTermQuery$Builder::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jfloat a1;
              ::org::apache::lucene::index::TermStates a2((jobject) NULL);
              BlendedTermQuery$Builder result((jobject) NULL);

              if (!parseArgs(args, "kFk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::TermStates::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.add(a0, a1, a2));
                return t_BlendedTermQuery$Builder::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_BlendedTermQuery$Builder_build(t_BlendedTermQuery$Builder *self)
        {
          ::org::apache::lucene::search::BlendedTermQuery result((jobject) NULL);
          OBJ_CALL(result = self->object.build());
          return ::org::apache::lucene::search::t_BlendedTermQuery::wrap_Object(result);
        }

        static PyObject *t_BlendedTermQuery$Builder_setRewriteMethod(t_BlendedTermQuery$Builder *self, PyObject *arg)
        {
          ::org::apache::lucene::search::BlendedTermQuery$RewriteMethod a0((jobject) NULL);
          BlendedTermQuery$Builder result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::BlendedTermQuery$RewriteMethod::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setRewriteMethod(a0));
            return t_BlendedTermQuery$Builder::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setRewriteMethod", arg);
          return NULL;
        }

        static int t_BlendedTermQuery$Builder_set__rewriteMethod(t_BlendedTermQuery$Builder *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::BlendedTermQuery$RewriteMethod value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::BlendedTermQuery$RewriteMethod::initializeClass, &value))
            {
              INT_CALL(self->object.setRewriteMethod(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rewriteMethod", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/comparators/FloatComparator$FloatLeafComparator.h"
#include "org/apache/lucene/search/comparators/FloatComparator.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Float.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {

          ::java::lang::Class *FloatComparator$FloatLeafComparator::class$ = NULL;
          jmethodID *FloatComparator$FloatLeafComparator::mids$ = NULL;
          bool FloatComparator$FloatLeafComparator::live$ = false;

          jclass FloatComparator$FloatLeafComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/comparators/FloatComparator$FloatLeafComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_107de66f3f52855e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/comparators/FloatComparator;Lorg/apache/lucene/index/LeafReaderContext;)V");
              mids$[mid_compareBottom_1e143afe1894d213] = env->getMethodID(cls, "compareBottom", "(I)I");
              mids$[mid_compareTop_1e143afe1894d213] = env->getMethodID(cls, "compareTop", "(I)I");
              mids$[mid_copy_438c62480c481c65] = env->getMethodID(cls, "copy", "(II)V");
              mids$[mid_setBottom_040c4cd0390c5aff] = env->getMethodID(cls, "setBottom", "(I)V");
              mids$[mid_encodeTop_9ffdf271836656c4] = env->getMethodID(cls, "encodeTop", "([B)V");
              mids$[mid_encodeBottom_9ffdf271836656c4] = env->getMethodID(cls, "encodeBottom", "([B)V");
              mids$[mid_isMissingValueCompetitive_8454bd5aa23fd11e] = env->getMethodID(cls, "isMissingValueCompetitive", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FloatComparator$FloatLeafComparator::FloatComparator$FloatLeafComparator(const ::org::apache::lucene::search::comparators::FloatComparator & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) : ::org::apache::lucene::search::comparators::NumericComparator$NumericLeafComparator(env->newObject(initializeClass, &mids$, mid_init$_107de66f3f52855e, a0.this$, a1.this$)) {}

          jint FloatComparator$FloatLeafComparator::compareBottom(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareBottom_1e143afe1894d213], a0);
          }

          jint FloatComparator$FloatLeafComparator::compareTop(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTop_1e143afe1894d213], a0);
          }

          void FloatComparator$FloatLeafComparator::copy(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_438c62480c481c65], a0, a1);
          }

          void FloatComparator$FloatLeafComparator::setBottom(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBottom_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {
          static PyObject *t_FloatComparator$FloatLeafComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatComparator$FloatLeafComparator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatComparator$FloatLeafComparator_of_(t_FloatComparator$FloatLeafComparator *self, PyObject *args);
          static int t_FloatComparator$FloatLeafComparator_init_(t_FloatComparator$FloatLeafComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FloatComparator$FloatLeafComparator_compareBottom(t_FloatComparator$FloatLeafComparator *self, PyObject *args);
          static PyObject *t_FloatComparator$FloatLeafComparator_compareTop(t_FloatComparator$FloatLeafComparator *self, PyObject *args);
          static PyObject *t_FloatComparator$FloatLeafComparator_copy(t_FloatComparator$FloatLeafComparator *self, PyObject *args);
          static PyObject *t_FloatComparator$FloatLeafComparator_setBottom(t_FloatComparator$FloatLeafComparator *self, PyObject *args);
          static int t_FloatComparator$FloatLeafComparator_set__bottom(t_FloatComparator$FloatLeafComparator *self, PyObject *arg, void *data);
          static PyObject *t_FloatComparator$FloatLeafComparator_get__parameters_(t_FloatComparator$FloatLeafComparator *self, void *data);
          static PyGetSetDef t_FloatComparator$FloatLeafComparator__fields_[] = {
            DECLARE_SET_FIELD(t_FloatComparator$FloatLeafComparator, bottom),
            DECLARE_GET_FIELD(t_FloatComparator$FloatLeafComparator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FloatComparator$FloatLeafComparator__methods_[] = {
            DECLARE_METHOD(t_FloatComparator$FloatLeafComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatComparator$FloatLeafComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatComparator$FloatLeafComparator, of_, METH_VARARGS),
            DECLARE_METHOD(t_FloatComparator$FloatLeafComparator, compareBottom, METH_VARARGS),
            DECLARE_METHOD(t_FloatComparator$FloatLeafComparator, compareTop, METH_VARARGS),
            DECLARE_METHOD(t_FloatComparator$FloatLeafComparator, copy, METH_VARARGS),
            DECLARE_METHOD(t_FloatComparator$FloatLeafComparator, setBottom, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FloatComparator$FloatLeafComparator)[] = {
            { Py_tp_methods, t_FloatComparator$FloatLeafComparator__methods_ },
            { Py_tp_init, (void *) t_FloatComparator$FloatLeafComparator_init_ },
            { Py_tp_getset, t_FloatComparator$FloatLeafComparator__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FloatComparator$FloatLeafComparator)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::comparators::NumericComparator$NumericLeafComparator),
            NULL
          };

          DEFINE_TYPE(FloatComparator$FloatLeafComparator, t_FloatComparator$FloatLeafComparator, FloatComparator$FloatLeafComparator);
          PyObject *t_FloatComparator$FloatLeafComparator::wrap_Object(const FloatComparator$FloatLeafComparator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FloatComparator$FloatLeafComparator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FloatComparator$FloatLeafComparator *self = (t_FloatComparator$FloatLeafComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FloatComparator$FloatLeafComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FloatComparator$FloatLeafComparator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FloatComparator$FloatLeafComparator *self = (t_FloatComparator$FloatLeafComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FloatComparator$FloatLeafComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(FloatComparator$FloatLeafComparator), &PY_TYPE_DEF(FloatComparator$FloatLeafComparator), module, "FloatComparator$FloatLeafComparator", 0);
          }

          void t_FloatComparator$FloatLeafComparator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FloatComparator$FloatLeafComparator), "class_", make_descriptor(FloatComparator$FloatLeafComparator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FloatComparator$FloatLeafComparator), "wrapfn_", make_descriptor(t_FloatComparator$FloatLeafComparator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FloatComparator$FloatLeafComparator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FloatComparator$FloatLeafComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FloatComparator$FloatLeafComparator::initializeClass, 1)))
              return NULL;
            return t_FloatComparator$FloatLeafComparator::wrap_Object(FloatComparator$FloatLeafComparator(((t_FloatComparator$FloatLeafComparator *) arg)->object.this$));
          }
          static PyObject *t_FloatComparator$FloatLeafComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FloatComparator$FloatLeafComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FloatComparator$FloatLeafComparator_of_(t_FloatComparator$FloatLeafComparator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_FloatComparator$FloatLeafComparator_init_(t_FloatComparator$FloatLeafComparator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::comparators::FloatComparator a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
            FloatComparator$FloatLeafComparator object((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::search::comparators::FloatComparator::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::org::apache::lucene::search::comparators::t_FloatComparator::parameters_, &a1))
            {
              INT_CALL(object = FloatComparator$FloatLeafComparator(a0, a1));
              self->object = object;
              self->parameters[0] = ::java::lang::PY_TYPE(Float);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FloatComparator$FloatLeafComparator_compareBottom(t_FloatComparator$FloatLeafComparator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareBottom(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FloatComparator$FloatLeafComparator), (PyObject *) self, "compareBottom", args, 2);
          }

          static PyObject *t_FloatComparator$FloatLeafComparator_compareTop(t_FloatComparator$FloatLeafComparator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareTop(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FloatComparator$FloatLeafComparator), (PyObject *) self, "compareTop", args, 2);
          }

          static PyObject *t_FloatComparator$FloatLeafComparator_copy(t_FloatComparator$FloatLeafComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.copy(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FloatComparator$FloatLeafComparator), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_FloatComparator$FloatLeafComparator_setBottom(t_FloatComparator$FloatLeafComparator *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.setBottom(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FloatComparator$FloatLeafComparator), (PyObject *) self, "setBottom", args, 2);
          }
          static PyObject *t_FloatComparator$FloatLeafComparator_get__parameters_(t_FloatComparator$FloatLeafComparator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_FloatComparator$FloatLeafComparator_set__bottom(t_FloatComparator$FloatLeafComparator *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setBottom(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "bottom", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/uniformsplit/TermBytes.h"
#include "org/apache/lucene/codecs/uniformsplit/sharedterms/FieldMetadataTermState.h"
#include "org/apache/lucene/codecs/uniformsplit/FieldMetadata.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {

            ::java::lang::Class *STBlockLine::class$ = NULL;
            jmethodID *STBlockLine::mids$ = NULL;
            bool STBlockLine::live$ = false;

            jclass STBlockLine::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_826efd9d8341a15a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/uniformsplit/TermBytes;Ljava/util/List;)V");
                mids$[mid_collectFields_50bc3ddc62a19f2d] = env->getMethodID(cls, "collectFields", "(Ljava/util/Collection;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            STBlockLine::STBlockLine(const ::org::apache::lucene::codecs::uniformsplit::TermBytes & a0, const ::java::util::List & a1) : ::org::apache::lucene::codecs::uniformsplit::BlockLine(env->newObject(initializeClass, &mids$, mid_init$_826efd9d8341a15a, a0.this$, a1.this$)) {}

            void STBlockLine::collectFields(const ::java::util::Collection & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_collectFields_50bc3ddc62a19f2d], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine$Serializer.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {
            static PyObject *t_STBlockLine_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_STBlockLine_instance_(PyTypeObject *type, PyObject *arg);
            static int t_STBlockLine_init_(t_STBlockLine *self, PyObject *args, PyObject *kwds);
            static PyObject *t_STBlockLine_collectFields(t_STBlockLine *self, PyObject *arg);

            static PyMethodDef t_STBlockLine__methods_[] = {
              DECLARE_METHOD(t_STBlockLine, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_STBlockLine, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_STBlockLine, collectFields, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(STBlockLine)[] = {
              { Py_tp_methods, t_STBlockLine__methods_ },
              { Py_tp_init, (void *) t_STBlockLine_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(STBlockLine)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::codecs::uniformsplit::BlockLine),
              NULL
            };

            DEFINE_TYPE(STBlockLine, t_STBlockLine, STBlockLine);

            void t_STBlockLine::install(PyObject *module)
            {
              installType(&PY_TYPE(STBlockLine), &PY_TYPE_DEF(STBlockLine), module, "STBlockLine", 0);
              PyObject_SetAttrString((PyObject *) PY_TYPE(STBlockLine), "Serializer", make_descriptor(&PY_TYPE_DEF(STBlockLine$Serializer)));
            }

            void t_STBlockLine::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(STBlockLine), "class_", make_descriptor(STBlockLine::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STBlockLine), "wrapfn_", make_descriptor(t_STBlockLine::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STBlockLine), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_STBlockLine_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, STBlockLine::initializeClass, 1)))
                return NULL;
              return t_STBlockLine::wrap_Object(STBlockLine(((t_STBlockLine *) arg)->object.this$));
            }
            static PyObject *t_STBlockLine_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, STBlockLine::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_STBlockLine_init_(t_STBlockLine *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::codecs::uniformsplit::TermBytes a0((jobject) NULL);
              ::java::util::List a1((jobject) NULL);
              PyTypeObject **p1;
              STBlockLine object((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::codecs::uniformsplit::TermBytes::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = STBlockLine(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_STBlockLine_collectFields(t_STBlockLine *self, PyObject *arg)
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(self->object.collectFields(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "collectFields", arg);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockHeader$Serializer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockHeader.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *BlockHeader$Serializer::class$ = NULL;
          jmethodID *BlockHeader$Serializer::mids$ = NULL;
          bool BlockHeader$Serializer::live$ = false;

          jclass BlockHeader$Serializer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/BlockHeader$Serializer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_read_5de64dae06a1e52a] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/codecs/uniformsplit/BlockHeader;)Lorg/apache/lucene/codecs/uniformsplit/BlockHeader;");
              mids$[mid_write_4a6c02945a492592] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/codecs/uniformsplit/BlockHeader;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockHeader$Serializer::BlockHeader$Serializer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::uniformsplit::BlockHeader BlockHeader$Serializer::read(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::codecs::uniformsplit::BlockHeader & a1) const
          {
            return ::org::apache::lucene::codecs::uniformsplit::BlockHeader(env->callObjectMethod(this$, mids$[mid_read_5de64dae06a1e52a], a0.this$, a1.this$));
          }

          void BlockHeader$Serializer::write(const ::org::apache::lucene::store::DataOutput & a0, const ::org::apache::lucene::codecs::uniformsplit::BlockHeader & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_4a6c02945a492592], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_BlockHeader$Serializer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockHeader$Serializer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockHeader$Serializer_init_(t_BlockHeader$Serializer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockHeader$Serializer_read(t_BlockHeader$Serializer *self, PyObject *args);
          static PyObject *t_BlockHeader$Serializer_write(t_BlockHeader$Serializer *self, PyObject *args);

          static PyMethodDef t_BlockHeader$Serializer__methods_[] = {
            DECLARE_METHOD(t_BlockHeader$Serializer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockHeader$Serializer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockHeader$Serializer, read, METH_VARARGS),
            DECLARE_METHOD(t_BlockHeader$Serializer, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BlockHeader$Serializer)[] = {
            { Py_tp_methods, t_BlockHeader$Serializer__methods_ },
            { Py_tp_init, (void *) t_BlockHeader$Serializer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BlockHeader$Serializer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BlockHeader$Serializer, t_BlockHeader$Serializer, BlockHeader$Serializer);

          void t_BlockHeader$Serializer::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockHeader$Serializer), &PY_TYPE_DEF(BlockHeader$Serializer), module, "BlockHeader$Serializer", 0);
          }

          void t_BlockHeader$Serializer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockHeader$Serializer), "class_", make_descriptor(BlockHeader$Serializer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockHeader$Serializer), "wrapfn_", make_descriptor(t_BlockHeader$Serializer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockHeader$Serializer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockHeader$Serializer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockHeader$Serializer::initializeClass, 1)))
              return NULL;
            return t_BlockHeader$Serializer::wrap_Object(BlockHeader$Serializer(((t_BlockHeader$Serializer *) arg)->object.this$));
          }
          static PyObject *t_BlockHeader$Serializer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockHeader$Serializer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockHeader$Serializer_init_(t_BlockHeader$Serializer *self, PyObject *args, PyObject *kwds)
          {
            BlockHeader$Serializer object((jobject) NULL);

            INT_CALL(object = BlockHeader$Serializer());
            self->object = object;

            return 0;
          }

          static PyObject *t_BlockHeader$Serializer_read(t_BlockHeader$Serializer *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::codecs::uniformsplit::BlockHeader a1((jobject) NULL);
            ::org::apache::lucene::codecs::uniformsplit::BlockHeader result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockHeader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.read(a0, a1));
              return ::org::apache::lucene::codecs::uniformsplit::t_BlockHeader::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "read", args);
            return NULL;
          }

          static PyObject *t_BlockHeader$Serializer_write(t_BlockHeader$Serializer *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            ::org::apache::lucene::codecs::uniformsplit::BlockHeader a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockHeader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "write", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/boost/DelimitedBoostTokenFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/boost/DelimitedBoostTokenFilter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace boost {

          ::java::lang::Class *DelimitedBoostTokenFilterFactory::class$ = NULL;
          jmethodID *DelimitedBoostTokenFilterFactory::mids$ = NULL;
          bool DelimitedBoostTokenFilterFactory::live$ = false;
          jchar DelimitedBoostTokenFilterFactory::DEFAULT_DELIMITER = (jchar) 0;
          ::java::lang::String *DelimitedBoostTokenFilterFactory::DELIMITER_ATTR = NULL;
          ::java::lang::String *DelimitedBoostTokenFilterFactory::NAME = NULL;

          jclass DelimitedBoostTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/boost/DelimitedBoostTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_0a2ab2ce5a15f733] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/boost/DelimitedBoostTokenFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_DELIMITER = env->getStaticCharField(cls, "DEFAULT_DELIMITER");
              DELIMITER_ATTR = new ::java::lang::String(env->getStaticObjectField(cls, "DELIMITER_ATTR", "Ljava/lang/String;"));
              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DelimitedBoostTokenFilterFactory::DelimitedBoostTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::boost::DelimitedBoostTokenFilter DelimitedBoostTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::boost::DelimitedBoostTokenFilter(env->callObjectMethod(this$, mids$[mid_create_0a2ab2ce5a15f733], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace boost {
          static PyObject *t_DelimitedBoostTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DelimitedBoostTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DelimitedBoostTokenFilterFactory_init_(t_DelimitedBoostTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DelimitedBoostTokenFilterFactory_create(t_DelimitedBoostTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_DelimitedBoostTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_DelimitedBoostTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedBoostTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedBoostTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DelimitedBoostTokenFilterFactory)[] = {
            { Py_tp_methods, t_DelimitedBoostTokenFilterFactory__methods_ },
            { Py_tp_init, (void *) t_DelimitedBoostTokenFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DelimitedBoostTokenFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(DelimitedBoostTokenFilterFactory, t_DelimitedBoostTokenFilterFactory, DelimitedBoostTokenFilterFactory);

          void t_DelimitedBoostTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(DelimitedBoostTokenFilterFactory), &PY_TYPE_DEF(DelimitedBoostTokenFilterFactory), module, "DelimitedBoostTokenFilterFactory", 0);
          }

          void t_DelimitedBoostTokenFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedBoostTokenFilterFactory), "class_", make_descriptor(DelimitedBoostTokenFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedBoostTokenFilterFactory), "wrapfn_", make_descriptor(t_DelimitedBoostTokenFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedBoostTokenFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(DelimitedBoostTokenFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedBoostTokenFilterFactory), "DEFAULT_DELIMITER", make_descriptor(DelimitedBoostTokenFilterFactory::DEFAULT_DELIMITER));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedBoostTokenFilterFactory), "DELIMITER_ATTR", make_descriptor(j2p(*DelimitedBoostTokenFilterFactory::DELIMITER_ATTR)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedBoostTokenFilterFactory), "NAME", make_descriptor(j2p(*DelimitedBoostTokenFilterFactory::NAME)));
          }

          static PyObject *t_DelimitedBoostTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DelimitedBoostTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_DelimitedBoostTokenFilterFactory::wrap_Object(DelimitedBoostTokenFilterFactory(((t_DelimitedBoostTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_DelimitedBoostTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DelimitedBoostTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DelimitedBoostTokenFilterFactory_init_(t_DelimitedBoostTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            DelimitedBoostTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = DelimitedBoostTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DelimitedBoostTokenFilterFactory_create(t_DelimitedBoostTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::boost::DelimitedBoostTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::boost::t_DelimitedBoostTokenFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DelimitedBoostTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockReader.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockDecoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/codecs/uniformsplit/FieldMetadata.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/uniformsplit/IndexDictionary$BrowserSupplier.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {

            ::java::lang::Class *STBlockReader::class$ = NULL;
            jmethodID *STBlockReader::mids$ = NULL;
            bool STBlockReader::live$ = false;

            jclass STBlockReader::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockReader");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_091726feda784e90] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/uniformsplit/IndexDictionary$BrowserSupplier;Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/codecs/PostingsReaderBase;Lorg/apache/lucene/codecs/uniformsplit/FieldMetadata;Lorg/apache/lucene/codecs/uniformsplit/BlockDecoder;Lorg/apache/lucene/index/FieldInfos;)V");
                mids$[mid_next_7af2ea2e37ce82b8] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
                mids$[mid_seekCeil_78824f53cd7bdb8a] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
                mids$[mid_seekExact_553d972fe19daaec] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
                mids$[mid_nextTerm_7af2ea2e37ce82b8] = env->getMethodID(cls, "nextTerm", "()Lorg/apache/lucene/util/BytesRef;");
                mids$[mid_isBeyondLastTerm_70c1ccb4f1d27d02] = env->getMethodID(cls, "isBeyondLastTerm", "(Lorg/apache/lucene/util/BytesRef;J)Z");
                mids$[mid_createBlockLineSerializer_b823d7b540bbfc47] = env->getMethodID(cls, "createBlockLineSerializer", "()Lorg/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine$Serializer;");
                mids$[mid_readTermState_ec21239f6d5a0c5b] = env->getMethodID(cls, "readTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            STBlockReader::STBlockReader(const ::org::apache::lucene::codecs::uniformsplit::IndexDictionary$BrowserSupplier & a0, const ::org::apache::lucene::store::IndexInput & a1, const ::org::apache::lucene::codecs::PostingsReaderBase & a2, const ::org::apache::lucene::codecs::uniformsplit::FieldMetadata & a3, const ::org::apache::lucene::codecs::uniformsplit::BlockDecoder & a4, const ::org::apache::lucene::index::FieldInfos & a5) : ::org::apache::lucene::codecs::uniformsplit::BlockReader(env->newObject(initializeClass, &mids$, mid_init$_091726feda784e90, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$)) {}

            ::org::apache::lucene::util::BytesRef STBlockReader::next() const
            {
              return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_7af2ea2e37ce82b8]));
            }

            ::org::apache::lucene::index::TermsEnum$SeekStatus STBlockReader::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
            {
              return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_78824f53cd7bdb8a], a0.this$));
            }

            jboolean STBlockReader::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_seekExact_553d972fe19daaec], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {
            static PyObject *t_STBlockReader_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_STBlockReader_instance_(PyTypeObject *type, PyObject *arg);
            static int t_STBlockReader_init_(t_STBlockReader *self, PyObject *args, PyObject *kwds);
            static PyObject *t_STBlockReader_next(t_STBlockReader *self, PyObject *args);
            static PyObject *t_STBlockReader_seekCeil(t_STBlockReader *self, PyObject *args);
            static PyObject *t_STBlockReader_seekExact(t_STBlockReader *self, PyObject *args);

            static PyMethodDef t_STBlockReader__methods_[] = {
              DECLARE_METHOD(t_STBlockReader, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_STBlockReader, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_STBlockReader, next, METH_VARARGS),
              DECLARE_METHOD(t_STBlockReader, seekCeil, METH_VARARGS),
              DECLARE_METHOD(t_STBlockReader, seekExact, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(STBlockReader)[] = {
              { Py_tp_methods, t_STBlockReader__methods_ },
              { Py_tp_init, (void *) t_STBlockReader_init_ },
              { Py_tp_iter, (void *) PyObject_SelfIter },
              { Py_tp_iternext, (void *) ((PyObject *(*)(t_STBlockReader *)) get_next< t_STBlockReader,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >) },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(STBlockReader)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::codecs::uniformsplit::BlockReader),
              NULL
            };

            DEFINE_TYPE(STBlockReader, t_STBlockReader, STBlockReader);

            void t_STBlockReader::install(PyObject *module)
            {
              installType(&PY_TYPE(STBlockReader), &PY_TYPE_DEF(STBlockReader), module, "STBlockReader", 0);
            }

            void t_STBlockReader::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(STBlockReader), "class_", make_descriptor(STBlockReader::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STBlockReader), "wrapfn_", make_descriptor(t_STBlockReader::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STBlockReader), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_STBlockReader_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, STBlockReader::initializeClass, 1)))
                return NULL;
              return t_STBlockReader::wrap_Object(STBlockReader(((t_STBlockReader *) arg)->object.this$));
            }
            static PyObject *t_STBlockReader_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, STBlockReader::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_STBlockReader_init_(t_STBlockReader *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::codecs::uniformsplit::IndexDictionary$BrowserSupplier a0((jobject) NULL);
              ::org::apache::lucene::store::IndexInput a1((jobject) NULL);
              ::org::apache::lucene::codecs::PostingsReaderBase a2((jobject) NULL);
              ::org::apache::lucene::codecs::uniformsplit::FieldMetadata a3((jobject) NULL);
              ::org::apache::lucene::codecs::uniformsplit::BlockDecoder a4((jobject) NULL);
              ::org::apache::lucene::index::FieldInfos a5((jobject) NULL);
              STBlockReader object((jobject) NULL);

              if (!parseArgs(args, "kkkkkk", ::org::apache::lucene::codecs::uniformsplit::IndexDictionary$BrowserSupplier::initializeClass, ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::codecs::PostingsReaderBase::initializeClass, ::org::apache::lucene::codecs::uniformsplit::FieldMetadata::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockDecoder::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                INT_CALL(object = STBlockReader(a0, a1, a2, a3, a4, a5));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_STBlockReader_next(t_STBlockReader *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.next());
                return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
              }

              return callSuper(PY_TYPE(STBlockReader), (PyObject *) self, "next", args, 2);
            }

            static PyObject *t_STBlockReader_seekCeil(t_STBlockReader *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekCeil(a0));
                return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
              }

              return callSuper(PY_TYPE(STBlockReader), (PyObject *) self, "seekCeil", args, 2);
            }

            static PyObject *t_STBlockReader_seekExact(t_STBlockReader *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(STBlockReader), (PyObject *) self, "seekExact", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/FieldOffsetStrategy.h"
#include "org/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/search/uhighlight/OffsetsEnum.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/uhighlight/UHComponents.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *FieldOffsetStrategy::class$ = NULL;
          jmethodID *FieldOffsetStrategy::mids$ = NULL;
          bool FieldOffsetStrategy::live$ = false;

          jclass FieldOffsetStrategy::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/FieldOffsetStrategy");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8858451d37bfc18c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/uhighlight/UHComponents;)V");
              mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getOffsetSource_d592a7a3fc9567b1] = env->getMethodID(cls, "getOffsetSource", "()Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource;");
              mids$[mid_getOffsetsEnum_55596ccb3f6b81ab] = env->getMethodID(cls, "getOffsetsEnum", "(Lorg/apache/lucene/index/LeafReader;ILjava/lang/String;)Lorg/apache/lucene/search/uhighlight/OffsetsEnum;");
              mids$[mid_createOffsetsEnumFromReader_ea3253413bb7a79d] = env->getMethodID(cls, "createOffsetsEnumFromReader", "(Lorg/apache/lucene/index/LeafReader;I)Lorg/apache/lucene/search/uhighlight/OffsetsEnum;");
              mids$[mid_createOffsetsEnumsWeightMatcher_af48ca8156e21201] = env->getMethodID(cls, "createOffsetsEnumsWeightMatcher", "(Lorg/apache/lucene/index/LeafReader;ILjava/util/List;)V");
              mids$[mid_createOffsetsEnumsForTerms_865446310864ce4e] = env->getMethodID(cls, "createOffsetsEnumsForTerms", "([Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/Terms;ILjava/util/List;)V");
              mids$[mid_createOffsetsEnumsForAutomata_500b73666cc50f09] = env->getMethodID(cls, "createOffsetsEnumsForAutomata", "(Lorg/apache/lucene/index/Terms;ILjava/util/List;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldOffsetStrategy::FieldOffsetStrategy(const ::org::apache::lucene::search::uhighlight::UHComponents & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8858451d37bfc18c, a0.this$)) {}

          ::java::lang::String FieldOffsetStrategy::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource FieldOffsetStrategy::getOffsetSource() const
          {
            return ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource(env->callObjectMethod(this$, mids$[mid_getOffsetSource_d592a7a3fc9567b1]));
          }

          ::org::apache::lucene::search::uhighlight::OffsetsEnum FieldOffsetStrategy::getOffsetsEnum(const ::org::apache::lucene::index::LeafReader & a0, jint a1, const ::java::lang::String & a2) const
          {
            return ::org::apache::lucene::search::uhighlight::OffsetsEnum(env->callObjectMethod(this$, mids$[mid_getOffsetsEnum_55596ccb3f6b81ab], a0.this$, a1, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_FieldOffsetStrategy_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldOffsetStrategy_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldOffsetStrategy_init_(t_FieldOffsetStrategy *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldOffsetStrategy_getField(t_FieldOffsetStrategy *self);
          static PyObject *t_FieldOffsetStrategy_getOffsetSource(t_FieldOffsetStrategy *self);
          static PyObject *t_FieldOffsetStrategy_getOffsetsEnum(t_FieldOffsetStrategy *self, PyObject *args);
          static PyObject *t_FieldOffsetStrategy_get__field(t_FieldOffsetStrategy *self, void *data);
          static PyObject *t_FieldOffsetStrategy_get__offsetSource(t_FieldOffsetStrategy *self, void *data);
          static PyGetSetDef t_FieldOffsetStrategy__fields_[] = {
            DECLARE_GET_FIELD(t_FieldOffsetStrategy, field),
            DECLARE_GET_FIELD(t_FieldOffsetStrategy, offsetSource),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldOffsetStrategy__methods_[] = {
            DECLARE_METHOD(t_FieldOffsetStrategy, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldOffsetStrategy, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldOffsetStrategy, getField, METH_NOARGS),
            DECLARE_METHOD(t_FieldOffsetStrategy, getOffsetSource, METH_NOARGS),
            DECLARE_METHOD(t_FieldOffsetStrategy, getOffsetsEnum, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FieldOffsetStrategy)[] = {
            { Py_tp_methods, t_FieldOffsetStrategy__methods_ },
            { Py_tp_init, (void *) t_FieldOffsetStrategy_init_ },
            { Py_tp_getset, t_FieldOffsetStrategy__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FieldOffsetStrategy)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FieldOffsetStrategy, t_FieldOffsetStrategy, FieldOffsetStrategy);

          void t_FieldOffsetStrategy::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldOffsetStrategy), &PY_TYPE_DEF(FieldOffsetStrategy), module, "FieldOffsetStrategy", 0);
          }

          void t_FieldOffsetStrategy::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldOffsetStrategy), "class_", make_descriptor(FieldOffsetStrategy::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldOffsetStrategy), "wrapfn_", make_descriptor(t_FieldOffsetStrategy::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldOffsetStrategy), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldOffsetStrategy_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldOffsetStrategy::initializeClass, 1)))
              return NULL;
            return t_FieldOffsetStrategy::wrap_Object(FieldOffsetStrategy(((t_FieldOffsetStrategy *) arg)->object.this$));
          }
          static PyObject *t_FieldOffsetStrategy_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldOffsetStrategy::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldOffsetStrategy_init_(t_FieldOffsetStrategy *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::uhighlight::UHComponents a0((jobject) NULL);
            FieldOffsetStrategy object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::uhighlight::UHComponents::initializeClass, &a0))
            {
              INT_CALL(object = FieldOffsetStrategy(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldOffsetStrategy_getField(t_FieldOffsetStrategy *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_FieldOffsetStrategy_getOffsetSource(t_FieldOffsetStrategy *self)
          {
            ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource result((jobject) NULL);
            OBJ_CALL(result = self->object.getOffsetSource());
            return ::org::apache::lucene::search::uhighlight::t_UnifiedHighlighter$OffsetSource::wrap_Object(result);
          }

          static PyObject *t_FieldOffsetStrategy_getOffsetsEnum(t_FieldOffsetStrategy *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::search::uhighlight::OffsetsEnum result((jobject) NULL);

            if (!parseArgs(args, "kIs", ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getOffsetsEnum(a0, a1, a2));
              return ::org::apache::lucene::search::uhighlight::t_OffsetsEnum::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getOffsetsEnum", args);
            return NULL;
          }

          static PyObject *t_FieldOffsetStrategy_get__field(t_FieldOffsetStrategy *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_FieldOffsetStrategy_get__offsetSource(t_FieldOffsetStrategy *self, void *data)
          {
            ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource value((jobject) NULL);
            OBJ_CALL(value = self->object.getOffsetSource());
            return ::org::apache::lucene::search::uhighlight::t_UnifiedHighlighter$OffsetSource::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/NumericDocValuesField.h"
#include "java/lang/Long.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *NumericDocValuesField::class$ = NULL;
        jmethodID *NumericDocValuesField::mids$ = NULL;
        bool NumericDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *NumericDocValuesField::TYPE = NULL;

        jclass NumericDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/NumericDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_42bd00c01368bbf8] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Long;)V");
            mids$[mid_init$_0084e2c6585d8c01] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");
            mids$[mid_newSlowExactQuery_e80322a2f14dee9e] = env->getStaticMethodID(cls, "newSlowExactQuery", "(Ljava/lang/String;J)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSlowRangeQuery_fea81632216932e2] = env->getStaticMethodID(cls, "newSlowRangeQuery", "(Ljava/lang/String;JJ)Lorg/apache/lucene/search/Query;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NumericDocValuesField::NumericDocValuesField(const ::java::lang::String & a0, const ::java::lang::Long & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_42bd00c01368bbf8, a0.this$, a1.this$)) {}

        NumericDocValuesField::NumericDocValuesField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_0084e2c6585d8c01, a0.this$, a1)) {}

        ::org::apache::lucene::search::Query NumericDocValuesField::newSlowExactQuery(const ::java::lang::String & a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSlowExactQuery_e80322a2f14dee9e], a0.this$, a1));
        }

        ::org::apache::lucene::search::Query NumericDocValuesField::newSlowRangeQuery(const ::java::lang::String & a0, jlong a1, jlong a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSlowRangeQuery_fea81632216932e2], a0.this$, a1, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_NumericDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumericDocValuesField_init_(t_NumericDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NumericDocValuesField_newSlowExactQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericDocValuesField_newSlowRangeQuery(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_NumericDocValuesField__methods_[] = {
          DECLARE_METHOD(t_NumericDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericDocValuesField, newSlowExactQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericDocValuesField, newSlowRangeQuery, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NumericDocValuesField)[] = {
          { Py_tp_methods, t_NumericDocValuesField__methods_ },
          { Py_tp_init, (void *) t_NumericDocValuesField_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NumericDocValuesField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(NumericDocValuesField, t_NumericDocValuesField, NumericDocValuesField);

        void t_NumericDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericDocValuesField), &PY_TYPE_DEF(NumericDocValuesField), module, "NumericDocValuesField", 0);
        }

        void t_NumericDocValuesField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NumericDocValuesField), "class_", make_descriptor(NumericDocValuesField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NumericDocValuesField), "wrapfn_", make_descriptor(t_NumericDocValuesField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NumericDocValuesField), "boxfn_", make_descriptor(boxObject));
          env->getClass(NumericDocValuesField::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(NumericDocValuesField), "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*NumericDocValuesField::TYPE)));
        }

        static PyObject *t_NumericDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericDocValuesField::initializeClass, 1)))
            return NULL;
          return t_NumericDocValuesField::wrap_Object(NumericDocValuesField(((t_NumericDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_NumericDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NumericDocValuesField_init_(t_NumericDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Long a1((jobject) NULL);
              NumericDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "sO", ::java::lang::PY_TYPE(Long), &a0, &a1))
              {
                INT_CALL(object = NumericDocValuesField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jlong a1;
              NumericDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "sJ", &a0, &a1))
              {
                INT_CALL(object = NumericDocValuesField(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NumericDocValuesField_newSlowExactQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::NumericDocValuesField::newSlowExactQuery(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSlowExactQuery", args);
          return NULL;
        }

        static PyObject *t_NumericDocValuesField_newSlowRangeQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::NumericDocValuesField::newSlowRangeQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSlowRangeQuery", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IOSupplier.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IOSupplier::class$ = NULL;
        jmethodID *IOSupplier::mids$ = NULL;
        bool IOSupplier::live$ = false;

        jclass IOSupplier::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IOSupplier");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_d6bcd06f3102c4d9] = env->getMethodID(cls, "get", "()Ljava/lang/Object;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Object IOSupplier::get() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_d6bcd06f3102c4d9]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IOSupplier_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOSupplier_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOSupplier_of_(t_IOSupplier *self, PyObject *args);
        static PyObject *t_IOSupplier_get(t_IOSupplier *self);
        static PyObject *t_IOSupplier_get__parameters_(t_IOSupplier *self, void *data);
        static PyGetSetDef t_IOSupplier__fields_[] = {
          DECLARE_GET_FIELD(t_IOSupplier, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IOSupplier__methods_[] = {
          DECLARE_METHOD(t_IOSupplier, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOSupplier, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOSupplier, of_, METH_VARARGS),
          DECLARE_METHOD(t_IOSupplier, get, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IOSupplier)[] = {
          { Py_tp_methods, t_IOSupplier__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_IOSupplier__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IOSupplier)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IOSupplier, t_IOSupplier, IOSupplier);
        PyObject *t_IOSupplier::wrap_Object(const IOSupplier& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IOSupplier::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IOSupplier *self = (t_IOSupplier *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_IOSupplier::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IOSupplier::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IOSupplier *self = (t_IOSupplier *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_IOSupplier::install(PyObject *module)
        {
          installType(&PY_TYPE(IOSupplier), &PY_TYPE_DEF(IOSupplier), module, "IOSupplier", 0);
        }

        void t_IOSupplier::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOSupplier), "class_", make_descriptor(IOSupplier::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOSupplier), "wrapfn_", make_descriptor(t_IOSupplier::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOSupplier), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IOSupplier_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IOSupplier::initializeClass, 1)))
            return NULL;
          return t_IOSupplier::wrap_Object(IOSupplier(((t_IOSupplier *) arg)->object.this$));
        }
        static PyObject *t_IOSupplier_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IOSupplier::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IOSupplier_of_(t_IOSupplier *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_IOSupplier_get(t_IOSupplier *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }
        static PyObject *t_IOSupplier_get__parameters_(t_IOSupplier *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue.h"
#include "org/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *TopOrdAndFloatQueue$OrdAndValue::class$ = NULL;
        jmethodID *TopOrdAndFloatQueue$OrdAndValue::mids$ = NULL;
        jfieldID *TopOrdAndFloatQueue$OrdAndValue::fids$ = NULL;
        bool TopOrdAndFloatQueue$OrdAndValue::live$ = false;

        jclass TopOrdAndFloatQueue$OrdAndValue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_ord] = env->getFieldID(cls, "ord", "I");
            fids$[fid_value] = env->getFieldID(cls, "value", "F");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopOrdAndFloatQueue$OrdAndValue::TopOrdAndFloatQueue$OrdAndValue() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jint TopOrdAndFloatQueue$OrdAndValue::_get_ord() const
        {
          return env->getIntField(this$, fids$[fid_ord]);
        }

        void TopOrdAndFloatQueue$OrdAndValue::_set_ord(jint a0) const
        {
          env->setIntField(this$, fids$[fid_ord], a0);
        }

        jfloat TopOrdAndFloatQueue$OrdAndValue::_get_value() const
        {
          return env->getFloatField(this$, fids$[fid_value]);
        }

        void TopOrdAndFloatQueue$OrdAndValue::_set_value(jfloat a0) const
        {
          env->setFloatField(this$, fids$[fid_value], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_of_(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *args);
        static int t_TopOrdAndFloatQueue$OrdAndValue_init_(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__ord(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data);
        static int t_TopOrdAndFloatQueue$OrdAndValue_set__ord(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *arg, void *data);
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__value(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data);
        static int t_TopOrdAndFloatQueue$OrdAndValue_set__value(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *arg, void *data);

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__parameters_(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data);
        static PyGetSetDef t_TopOrdAndFloatQueue$OrdAndValue__fields_[] = {
          DECLARE_GETSET_FIELD(t_TopOrdAndFloatQueue$OrdAndValue, ord),
          DECLARE_GETSET_FIELD(t_TopOrdAndFloatQueue$OrdAndValue, value),
          DECLARE_GET_FIELD(t_TopOrdAndFloatQueue$OrdAndValue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopOrdAndFloatQueue$OrdAndValue__methods_[] = {
          DECLARE_METHOD(t_TopOrdAndFloatQueue$OrdAndValue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndFloatQueue$OrdAndValue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndFloatQueue$OrdAndValue, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TopOrdAndFloatQueue$OrdAndValue)[] = {
          { Py_tp_methods, t_TopOrdAndFloatQueue$OrdAndValue__methods_ },
          { Py_tp_init, (void *) t_TopOrdAndFloatQueue$OrdAndValue_init_ },
          { Py_tp_getset, t_TopOrdAndFloatQueue$OrdAndValue__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TopOrdAndFloatQueue$OrdAndValue)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(TopOrdAndFloatQueue$OrdAndValue, t_TopOrdAndFloatQueue$OrdAndValue, TopOrdAndFloatQueue$OrdAndValue);
        PyObject *t_TopOrdAndFloatQueue$OrdAndValue::wrap_Object(const TopOrdAndFloatQueue$OrdAndValue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndFloatQueue$OrdAndValue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndFloatQueue$OrdAndValue *self = (t_TopOrdAndFloatQueue$OrdAndValue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopOrdAndFloatQueue$OrdAndValue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndFloatQueue$OrdAndValue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndFloatQueue$OrdAndValue *self = (t_TopOrdAndFloatQueue$OrdAndValue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopOrdAndFloatQueue$OrdAndValue::install(PyObject *module)
        {
          installType(&PY_TYPE(TopOrdAndFloatQueue$OrdAndValue), &PY_TYPE_DEF(TopOrdAndFloatQueue$OrdAndValue), module, "TopOrdAndFloatQueue$OrdAndValue", 0);
        }

        void t_TopOrdAndFloatQueue$OrdAndValue::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopOrdAndFloatQueue$OrdAndValue), "class_", make_descriptor(TopOrdAndFloatQueue$OrdAndValue::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopOrdAndFloatQueue$OrdAndValue), "wrapfn_", make_descriptor(t_TopOrdAndFloatQueue$OrdAndValue::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopOrdAndFloatQueue$OrdAndValue), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopOrdAndFloatQueue$OrdAndValue::initializeClass, 1)))
            return NULL;
          return t_TopOrdAndFloatQueue$OrdAndValue::wrap_Object(TopOrdAndFloatQueue$OrdAndValue(((t_TopOrdAndFloatQueue$OrdAndValue *) arg)->object.this$));
        }
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopOrdAndFloatQueue$OrdAndValue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_of_(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopOrdAndFloatQueue$OrdAndValue_init_(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *args, PyObject *kwds)
        {
          TopOrdAndFloatQueue$OrdAndValue object((jobject) NULL);

          INT_CALL(object = TopOrdAndFloatQueue$OrdAndValue());
          self->object = object;
          self->parameters[0] = ::org::apache::lucene::facet::PY_TYPE(TopOrdAndFloatQueue$OrdAndValue);

          return 0;
        }
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__parameters_(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__ord(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_ord());
          return PyLong_FromLong((long) value);
        }
        static int t_TopOrdAndFloatQueue$OrdAndValue_set__ord(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_ord(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ord", arg);
          return -1;
        }

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__value(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_value());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TopOrdAndFloatQueue$OrdAndValue_set__value(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *arg, void *data)
        {
          jfloat value;
          if (!parseArg(arg, "F", &value))
          {
            INT_CALL(self->object._set_value(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "value", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceSubQuery.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *DistanceQuery::class$ = NULL;
            jmethodID *DistanceQuery::mids$ = NULL;
            bool DistanceQuery::live$ = false;

            jclass DistanceQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/DistanceQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_2932ce8a7caf0f3d] = env->getMethodID(cls, "<init>", "(Ljava/util/List;ZILjava/lang/String;Z)V");
                mids$[mid_addSpanQueries_121a707f1abd1a95] = env->getMethodID(cls, "addSpanQueries", "(Lorg/apache/lucene/queryparser/surround/query/SpanNearClauseFactory;)V");
                mids$[mid_distanceSubQueryNotAllowed_db9b55ba01e03e4b] = env->getMethodID(cls, "distanceSubQueryNotAllowed", "()Ljava/lang/String;");
                mids$[mid_getOpDistance_9972fcc56b44e79d] = env->getMethodID(cls, "getOpDistance", "()I");
                mids$[mid_getSpanNearQuery_45b62b4e1b5f8a1c] = env->getMethodID(cls, "getSpanNearQuery", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_makeLuceneQueryFieldNoBoost_464e180a5423633e] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_subQueriesOrdered_8454bd5aa23fd11e] = env->getMethodID(cls, "subQueriesOrdered", "()Z");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DistanceQuery::DistanceQuery(const ::java::util::List & a0, jboolean a1, jint a2, const ::java::lang::String & a3, jboolean a4) : ::org::apache::lucene::queryparser::surround::query::ComposedQuery(env->newObject(initializeClass, &mids$, mid_init$_2932ce8a7caf0f3d, a0.this$, a1, a2, a3.this$, a4)) {}

            void DistanceQuery::addSpanQueries(const ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQueries_121a707f1abd1a95], a0.this$);
            }

            ::java::lang::String DistanceQuery::distanceSubQueryNotAllowed() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_distanceSubQueryNotAllowed_db9b55ba01e03e4b]));
            }

            jint DistanceQuery::getOpDistance() const
            {
              return env->callIntMethod(this$, mids$[mid_getOpDistance_9972fcc56b44e79d]);
            }

            ::org::apache::lucene::search::Query DistanceQuery::getSpanNearQuery(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a2) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getSpanNearQuery_45b62b4e1b5f8a1c], a0.this$, a1.this$, a2.this$));
            }

            ::org::apache::lucene::search::Query DistanceQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_464e180a5423633e], a0.this$, a1.this$));
            }

            jboolean DistanceQuery::subQueriesOrdered() const
            {
              return env->callBooleanMethod(this$, mids$[mid_subQueriesOrdered_8454bd5aa23fd11e]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_DistanceQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DistanceQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DistanceQuery_init_(t_DistanceQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DistanceQuery_addSpanQueries(t_DistanceQuery *self, PyObject *arg);
            static PyObject *t_DistanceQuery_distanceSubQueryNotAllowed(t_DistanceQuery *self);
            static PyObject *t_DistanceQuery_getOpDistance(t_DistanceQuery *self);
            static PyObject *t_DistanceQuery_getSpanNearQuery(t_DistanceQuery *self, PyObject *args);
            static PyObject *t_DistanceQuery_makeLuceneQueryFieldNoBoost(t_DistanceQuery *self, PyObject *args);
            static PyObject *t_DistanceQuery_subQueriesOrdered(t_DistanceQuery *self);
            static PyObject *t_DistanceQuery_get__opDistance(t_DistanceQuery *self, void *data);
            static PyGetSetDef t_DistanceQuery__fields_[] = {
              DECLARE_GET_FIELD(t_DistanceQuery, opDistance),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DistanceQuery__methods_[] = {
              DECLARE_METHOD(t_DistanceQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DistanceQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DistanceQuery, addSpanQueries, METH_O),
              DECLARE_METHOD(t_DistanceQuery, distanceSubQueryNotAllowed, METH_NOARGS),
              DECLARE_METHOD(t_DistanceQuery, getOpDistance, METH_NOARGS),
              DECLARE_METHOD(t_DistanceQuery, getSpanNearQuery, METH_VARARGS),
              DECLARE_METHOD(t_DistanceQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              DECLARE_METHOD(t_DistanceQuery, subQueriesOrdered, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(DistanceQuery)[] = {
              { Py_tp_methods, t_DistanceQuery__methods_ },
              { Py_tp_init, (void *) t_DistanceQuery_init_ },
              { Py_tp_getset, t_DistanceQuery__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(DistanceQuery)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::surround::query::ComposedQuery),
              NULL
            };

            DEFINE_TYPE(DistanceQuery, t_DistanceQuery, DistanceQuery);

            void t_DistanceQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(DistanceQuery), &PY_TYPE_DEF(DistanceQuery), module, "DistanceQuery", 0);
            }

            void t_DistanceQuery::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(DistanceQuery), "class_", make_descriptor(DistanceQuery::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DistanceQuery), "wrapfn_", make_descriptor(t_DistanceQuery::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DistanceQuery), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DistanceQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DistanceQuery::initializeClass, 1)))
                return NULL;
              return t_DistanceQuery::wrap_Object(DistanceQuery(((t_DistanceQuery *) arg)->object.this$));
            }
            static PyObject *t_DistanceQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DistanceQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DistanceQuery_init_(t_DistanceQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              jint a2;
              ::java::lang::String a3((jobject) NULL);
              jboolean a4;
              DistanceQuery object((jobject) NULL);

              if (!parseArgs(args, "KZIsZ", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = DistanceQuery(a0, a1, a2, a3, a4));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DistanceQuery_addSpanQueries(t_DistanceQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQueries(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQueries", arg);
              return NULL;
            }

            static PyObject *t_DistanceQuery_distanceSubQueryNotAllowed(t_DistanceQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.distanceSubQueryNotAllowed());
              return j2p(result);
            }

            static PyObject *t_DistanceQuery_getOpDistance(t_DistanceQuery *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getOpDistance());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_DistanceQuery_getSpanNearQuery(t_DistanceQuery *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a2((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getSpanNearQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getSpanNearQuery", args);
              return NULL;
            }

            static PyObject *t_DistanceQuery_makeLuceneQueryFieldNoBoost(t_DistanceQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(PY_TYPE(DistanceQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }

            static PyObject *t_DistanceQuery_subQueriesOrdered(t_DistanceQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.subQueriesOrdered());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_DistanceQuery_get__opDistance(t_DistanceQuery *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getOpDistance());
              return PyLong_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseMinimalStemmer::class$ = NULL;
          jmethodID *PortugueseMinimalStemmer::mids$ = NULL;
          bool PortugueseMinimalStemmer::live$ = false;

          jclass PortugueseMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseMinimalStemmer::PortugueseMinimalStemmer() : ::org::apache::lucene::analysis::pt::RSLPStemmerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint PortugueseMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseMinimalStemmer_init_(t_PortugueseMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseMinimalStemmer_stem(t_PortugueseMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_PortugueseMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_PortugueseMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PortugueseMinimalStemmer)[] = {
            { Py_tp_methods, t_PortugueseMinimalStemmer__methods_ },
            { Py_tp_init, (void *) t_PortugueseMinimalStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PortugueseMinimalStemmer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::pt::RSLPStemmerBase),
            NULL
          };

          DEFINE_TYPE(PortugueseMinimalStemmer, t_PortugueseMinimalStemmer, PortugueseMinimalStemmer);

          void t_PortugueseMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseMinimalStemmer), &PY_TYPE_DEF(PortugueseMinimalStemmer), module, "PortugueseMinimalStemmer", 0);
          }

          void t_PortugueseMinimalStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseMinimalStemmer), "class_", make_descriptor(PortugueseMinimalStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseMinimalStemmer), "wrapfn_", make_descriptor(t_PortugueseMinimalStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseMinimalStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_PortugueseMinimalStemmer::wrap_Object(PortugueseMinimalStemmer(((t_PortugueseMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_PortugueseMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseMinimalStemmer_init_(t_PortugueseMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            PortugueseMinimalStemmer object((jobject) NULL);

            INT_CALL(object = PortugueseMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_PortugueseMinimalStemmer_stem(t_PortugueseMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/DoubleRange.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *DoubleRange::class$ = NULL;
          jmethodID *DoubleRange::mids$ = NULL;
          jfieldID *DoubleRange::fids$ = NULL;
          bool DoubleRange::live$ = false;

          jclass DoubleRange::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/DoubleRange");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_75a41c58a4d52f7d] = env->getMethodID(cls, "<init>", "(DD)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_max] = env->getFieldID(cls, "max", "D");
              fids$[fid_min] = env->getFieldID(cls, "min", "D");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DoubleRange::DoubleRange(jdouble a0, jdouble a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_75a41c58a4d52f7d, a0, a1)) {}

          jboolean DoubleRange::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint DoubleRange::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::String DoubleRange::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          jdouble DoubleRange::_get_max() const
          {
            return env->getDoubleField(this$, fids$[fid_max]);
          }

          void DoubleRange::_set_max(jdouble a0) const
          {
            env->setDoubleField(this$, fids$[fid_max], a0);
          }

          jdouble DoubleRange::_get_min() const
          {
            return env->getDoubleField(this$, fids$[fid_min]);
          }

          void DoubleRange::_set_min(jdouble a0) const
          {
            env->setDoubleField(this$, fids$[fid_min], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_DoubleRange_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DoubleRange_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DoubleRange_init_(t_DoubleRange *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DoubleRange_equals(t_DoubleRange *self, PyObject *args);
          static PyObject *t_DoubleRange_hashCode(t_DoubleRange *self, PyObject *args);
          static PyObject *t_DoubleRange_toString(t_DoubleRange *self, PyObject *args);
          static PyObject *t_DoubleRange_get__max(t_DoubleRange *self, void *data);
          static int t_DoubleRange_set__max(t_DoubleRange *self, PyObject *arg, void *data);
          static PyObject *t_DoubleRange_get__min(t_DoubleRange *self, void *data);
          static int t_DoubleRange_set__min(t_DoubleRange *self, PyObject *arg, void *data);

          static PyGetSetDef t_DoubleRange__fields_[] = {
            DECLARE_GETSET_FIELD(t_DoubleRange, max),
            DECLARE_GETSET_FIELD(t_DoubleRange, min),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DoubleRange__methods_[] = {
            DECLARE_METHOD(t_DoubleRange, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleRange, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleRange, equals, METH_VARARGS),
            DECLARE_METHOD(t_DoubleRange, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_DoubleRange, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DoubleRange)[] = {
            { Py_tp_methods, t_DoubleRange__methods_ },
            { Py_tp_init, (void *) t_DoubleRange_init_ },
            { Py_tp_getset, t_DoubleRange__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DoubleRange)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(DoubleRange, t_DoubleRange, DoubleRange);

          void t_DoubleRange::install(PyObject *module)
          {
            installType(&PY_TYPE(DoubleRange), &PY_TYPE_DEF(DoubleRange), module, "DoubleRange", 0);
          }

          void t_DoubleRange::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRange), "class_", make_descriptor(DoubleRange::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRange), "wrapfn_", make_descriptor(t_DoubleRange::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRange), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DoubleRange_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DoubleRange::initializeClass, 1)))
              return NULL;
            return t_DoubleRange::wrap_Object(DoubleRange(((t_DoubleRange *) arg)->object.this$));
          }
          static PyObject *t_DoubleRange_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DoubleRange::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DoubleRange_init_(t_DoubleRange *self, PyObject *args, PyObject *kwds)
          {
            jdouble a0;
            jdouble a1;
            DoubleRange object((jobject) NULL);

            if (!parseArgs(args, "DD", &a0, &a1))
            {
              INT_CALL(object = DoubleRange(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DoubleRange_equals(t_DoubleRange *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(DoubleRange), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_DoubleRange_hashCode(t_DoubleRange *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(DoubleRange), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_DoubleRange_toString(t_DoubleRange *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(DoubleRange), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_DoubleRange_get__max(t_DoubleRange *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_max());
            return PyFloat_FromDouble((double) value);
          }
          static int t_DoubleRange_set__max(t_DoubleRange *self, PyObject *arg, void *data)
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object._set_max(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "max", arg);
            return -1;
          }

          static PyObject *t_DoubleRange_get__min(t_DoubleRange *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_min());
            return PyFloat_FromDouble((double) value);
          }
          static int t_DoubleRange_set__min(t_DoubleRange *self, PyObject *arg, void *data)
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object._set_min(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "min", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *HyphenationCompoundWordTokenFilter::class$ = NULL;
          jmethodID *HyphenationCompoundWordTokenFilter::mids$ = NULL;
          bool HyphenationCompoundWordTokenFilter::live$ = false;

          jclass HyphenationCompoundWordTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_109a56dc2ba6eaa7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;)V");
              mids$[mid_init$_356a83c2ce3d6727] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_1989952f76b81ed8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;III)V");
              mids$[mid_init$_1009895ba68886bb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;Lorg/apache/lucene/analysis/CharArraySet;IIIZ)V");
              mids$[mid_getHyphenationTree_8d935e5a5a067e76] = env->getStaticMethodID(cls, "getHyphenationTree", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;");
              mids$[mid_decompose_f2cc1bce94666404] = env->getMethodID(cls, "decompose", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a1) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_109a56dc2ba6eaa7, a0.this$, a1.this$)) {}

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a1, const ::org::apache::lucene::analysis::CharArraySet & a2) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_356a83c2ce3d6727, a0.this$, a1.this$, a2.this$)) {}

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a1, jint a2, jint a3, jint a4) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_1989952f76b81ed8, a0.this$, a1.this$, a2, a3, a4)) {}

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a1, const ::org::apache::lucene::analysis::CharArraySet & a2, jint a3, jint a4, jint a5, jboolean a6) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_1009895ba68886bb, a0.this$, a1.this$, a2.this$, a3, a4, a5, a6)) {}

          ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree HyphenationCompoundWordTokenFilter::getHyphenationTree(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree(env->callStaticObjectMethod(cls, mids$[mid_getHyphenationTree_8d935e5a5a067e76], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_HyphenationCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HyphenationCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HyphenationCompoundWordTokenFilter_init_(t_HyphenationCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HyphenationCompoundWordTokenFilter_getHyphenationTree(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_HyphenationCompoundWordTokenFilter__methods_[] = {
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilter, getHyphenationTree, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HyphenationCompoundWordTokenFilter)[] = {
            { Py_tp_methods, t_HyphenationCompoundWordTokenFilter__methods_ },
            { Py_tp_init, (void *) t_HyphenationCompoundWordTokenFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HyphenationCompoundWordTokenFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase),
            NULL
          };

          DEFINE_TYPE(HyphenationCompoundWordTokenFilter, t_HyphenationCompoundWordTokenFilter, HyphenationCompoundWordTokenFilter);

          void t_HyphenationCompoundWordTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HyphenationCompoundWordTokenFilter), &PY_TYPE_DEF(HyphenationCompoundWordTokenFilter), module, "HyphenationCompoundWordTokenFilter", 0);
          }

          void t_HyphenationCompoundWordTokenFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HyphenationCompoundWordTokenFilter), "class_", make_descriptor(HyphenationCompoundWordTokenFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HyphenationCompoundWordTokenFilter), "wrapfn_", make_descriptor(t_HyphenationCompoundWordTokenFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HyphenationCompoundWordTokenFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HyphenationCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HyphenationCompoundWordTokenFilter::initializeClass, 1)))
              return NULL;
            return t_HyphenationCompoundWordTokenFilter::wrap_Object(HyphenationCompoundWordTokenFilter(((t_HyphenationCompoundWordTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_HyphenationCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HyphenationCompoundWordTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HyphenationCompoundWordTokenFilter_init_(t_HyphenationCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a1((jobject) NULL);
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a1((jobject) NULL);
                ::org::apache::lucene::analysis::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kkK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a1((jobject) NULL);
                jint a2;
                jint a3;
                jint a4;
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kkIII", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 7:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a1((jobject) NULL);
                ::org::apache::lucene::analysis::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                jint a3;
                jint a4;
                jint a5;
                jboolean a6;
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kkKIIIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a3, &a4, &a5, &a6))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2, a3, a4, a5, a6));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HyphenationCompoundWordTokenFilter_getHyphenationTree(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::compound::HyphenationCompoundWordTokenFilter::getHyphenationTree(a0));
              return ::org::apache::lucene::analysis::compound::hyphenation::t_HyphenationTree::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getHyphenationTree", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/IndriDisjunctionScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *IndriDisjunctionScorer::class$ = NULL;
        jmethodID *IndriDisjunctionScorer::mids$ = NULL;
        bool IndriDisjunctionScorer::live$ = false;

        jclass IndriDisjunctionScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/IndriDisjunctionScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_getMaxScore_384f078ef4b8f931] = env->getMethodID(cls, "getMaxScore", "(I)F");
            mids$[mid_getSubMatches_49ec78390f08338a] = env->getMethodID(cls, "getSubMatches", "()Ljava/util/List;");
            mids$[mid_iterator_173d81d7b8f93882] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_score_58aec2b64dff50c8] = env->getMethodID(cls, "score", "()F");
            mids$[mid_smoothingScore_384f078ef4b8f931] = env->getMethodID(cls, "smoothingScore", "(I)F");
            mids$[mid_smoothingScore_5c128e5051334904] = env->getMethodID(cls, "smoothingScore", "(Ljava/util/List;I)F");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint IndriDisjunctionScorer::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        jfloat IndriDisjunctionScorer::getMaxScore(jint a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_getMaxScore_384f078ef4b8f931], a0);
        }

        ::java::util::List IndriDisjunctionScorer::getSubMatches() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getSubMatches_49ec78390f08338a]));
        }

        ::org::apache::lucene::search::DocIdSetIterator IndriDisjunctionScorer::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_173d81d7b8f93882]));
        }

        jfloat IndriDisjunctionScorer::score() const
        {
          return env->callFloatMethod(this$, mids$[mid_score_58aec2b64dff50c8]);
        }

        jfloat IndriDisjunctionScorer::smoothingScore(jint a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_smoothingScore_384f078ef4b8f931], a0);
        }

        jfloat IndriDisjunctionScorer::smoothingScore(const ::java::util::List & a0, jint a1) const
        {
          return env->callFloatMethod(this$, mids$[mid_smoothingScore_5c128e5051334904], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_IndriDisjunctionScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndriDisjunctionScorer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndriDisjunctionScorer_docID(t_IndriDisjunctionScorer *self, PyObject *args);
        static PyObject *t_IndriDisjunctionScorer_getMaxScore(t_IndriDisjunctionScorer *self, PyObject *args);
        static PyObject *t_IndriDisjunctionScorer_getSubMatches(t_IndriDisjunctionScorer *self);
        static PyObject *t_IndriDisjunctionScorer_iterator(t_IndriDisjunctionScorer *self, PyObject *args);
        static PyObject *t_IndriDisjunctionScorer_score(t_IndriDisjunctionScorer *self, PyObject *args);
        static PyObject *t_IndriDisjunctionScorer_smoothingScore(t_IndriDisjunctionScorer *self, PyObject *args);
        static PyObject *t_IndriDisjunctionScorer_get__subMatches(t_IndriDisjunctionScorer *self, void *data);
        static PyGetSetDef t_IndriDisjunctionScorer__fields_[] = {
          DECLARE_GET_FIELD(t_IndriDisjunctionScorer, subMatches),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndriDisjunctionScorer__methods_[] = {
          DECLARE_METHOD(t_IndriDisjunctionScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndriDisjunctionScorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndriDisjunctionScorer, docID, METH_VARARGS),
          DECLARE_METHOD(t_IndriDisjunctionScorer, getMaxScore, METH_VARARGS),
          DECLARE_METHOD(t_IndriDisjunctionScorer, getSubMatches, METH_NOARGS),
          DECLARE_METHOD(t_IndriDisjunctionScorer, iterator, METH_VARARGS),
          DECLARE_METHOD(t_IndriDisjunctionScorer, score, METH_VARARGS),
          DECLARE_METHOD(t_IndriDisjunctionScorer, smoothingScore, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndriDisjunctionScorer)[] = {
          { Py_tp_methods, t_IndriDisjunctionScorer__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_IndriDisjunctionScorer__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndriDisjunctionScorer)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::IndriScorer),
          NULL
        };

        DEFINE_TYPE(IndriDisjunctionScorer, t_IndriDisjunctionScorer, IndriDisjunctionScorer);

        void t_IndriDisjunctionScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(IndriDisjunctionScorer), &PY_TYPE_DEF(IndriDisjunctionScorer), module, "IndriDisjunctionScorer", 0);
        }

        void t_IndriDisjunctionScorer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndriDisjunctionScorer), "class_", make_descriptor(IndriDisjunctionScorer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndriDisjunctionScorer), "wrapfn_", make_descriptor(t_IndriDisjunctionScorer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndriDisjunctionScorer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndriDisjunctionScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndriDisjunctionScorer::initializeClass, 1)))
            return NULL;
          return t_IndriDisjunctionScorer::wrap_Object(IndriDisjunctionScorer(((t_IndriDisjunctionScorer *) arg)->object.this$));
        }
        static PyObject *t_IndriDisjunctionScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndriDisjunctionScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndriDisjunctionScorer_docID(t_IndriDisjunctionScorer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(IndriDisjunctionScorer), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_IndriDisjunctionScorer_getMaxScore(t_IndriDisjunctionScorer *self, PyObject *args)
        {
          jint a0;
          jfloat result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getMaxScore(a0));
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(PY_TYPE(IndriDisjunctionScorer), (PyObject *) self, "getMaxScore", args, 2);
        }

        static PyObject *t_IndriDisjunctionScorer_getSubMatches(t_IndriDisjunctionScorer *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubMatches());
          return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::PY_TYPE(Scorer));
        }

        static PyObject *t_IndriDisjunctionScorer_iterator(t_IndriDisjunctionScorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndriDisjunctionScorer), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_IndriDisjunctionScorer_score(t_IndriDisjunctionScorer *self, PyObject *args)
        {
          jfloat result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.score());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(PY_TYPE(IndriDisjunctionScorer), (PyObject *) self, "score", args, 2);
        }

        static PyObject *t_IndriDisjunctionScorer_smoothingScore(t_IndriDisjunctionScorer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.smoothingScore(a0));
                return PyFloat_FromDouble((double) result);
              }
            }
            break;
           case 2:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jint a1;
              jfloat result;

              if (!parseArgs(args, "KI", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.smoothingScore(a0, a1));
                return PyFloat_FromDouble((double) result);
              }
            }
          }

          return callSuper(PY_TYPE(IndriDisjunctionScorer), (PyObject *) self, "smoothingScore", args, 2);
        }

        static PyObject *t_IndriDisjunctionScorer_get__subMatches(t_IndriDisjunctionScorer *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubMatches());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonIndexOutput.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonIndexOutput::class$ = NULL;
        jmethodID *PythonIndexOutput::mids$ = NULL;
        bool PythonIndexOutput::live$ = false;

        jclass PythonIndexOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonIndexOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_15b72f6a44ff93f2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_getChecksum_2e5ae9edcb9b072f] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_2e5ae9edcb9b072f] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_writeByte_9c36fec3bac1d0c7] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_9ffdf271836656c4] = env->getMethodID(cls, "writeBytes", "([B)V");
            mids$[mid_writeBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIndexOutput::PythonIndexOutput(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_15b72f6a44ff93f2, a0.this$, a1.this$)) {}

        void PythonIndexOutput::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
        }

        jlong PythonIndexOutput::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
        }

        void PythonIndexOutput::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
        }

        void PythonIndexOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonIndexOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIndexOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIndexOutput_init_(t_PythonIndexOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIndexOutput_finalize(t_PythonIndexOutput *self);
        static PyObject *t_PythonIndexOutput_pythonExtension(t_PythonIndexOutput *self, PyObject *args);
        static PyObject *t_PythonIndexOutput_writeBytes(t_PythonIndexOutput *self, PyObject *args);
        static void JNICALL t_PythonIndexOutput_close0(JNIEnv *jenv, jobject jobj);
        static jlong JNICALL t_PythonIndexOutput_getChecksum1(JNIEnv *jenv, jobject jobj);
        static jlong JNICALL t_PythonIndexOutput_getFilePointer2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIndexOutput_pythonDecRef3(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIndexOutput_writeByte4(JNIEnv *jenv, jobject jobj, jbyte a0);
        static void JNICALL t_PythonIndexOutput_writeBytes5(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonIndexOutput_get__self(t_PythonIndexOutput *self, void *data);
        static PyGetSetDef t_PythonIndexOutput__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIndexOutput, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIndexOutput__methods_[] = {
          DECLARE_METHOD(t_PythonIndexOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexOutput, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIndexOutput, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonIndexOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PythonIndexOutput)[] = {
          { Py_tp_methods, t_PythonIndexOutput__methods_ },
          { Py_tp_init, (void *) t_PythonIndexOutput_init_ },
          { Py_tp_getset, t_PythonIndexOutput__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PythonIndexOutput)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::IndexOutput),
          NULL
        };

        DEFINE_TYPE(PythonIndexOutput, t_PythonIndexOutput, PythonIndexOutput);

        void t_PythonIndexOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIndexOutput), &PY_TYPE_DEF(PythonIndexOutput), module, "PythonIndexOutput", 1);
        }

        void t_PythonIndexOutput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonIndexOutput), "class_", make_descriptor(PythonIndexOutput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonIndexOutput), "wrapfn_", make_descriptor(t_PythonIndexOutput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonIndexOutput), "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIndexOutput::initializeClass);
          JNINativeMethod methods[] = {
            { "close", "()V", (void *) t_PythonIndexOutput_close0 },
            { "getChecksum", "()J", (void *) t_PythonIndexOutput_getChecksum1 },
            { "getFilePointer", "()J", (void *) t_PythonIndexOutput_getFilePointer2 },
            { "pythonDecRef", "()V", (void *) t_PythonIndexOutput_pythonDecRef3 },
            { "writeByte", "(B)V", (void *) t_PythonIndexOutput_writeByte4 },
            { "writeBytes", "([B)V", (void *) t_PythonIndexOutput_writeBytes5 },
          };
          env->registerNatives(cls, methods, 6);
        }

        static PyObject *t_PythonIndexOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIndexOutput::initializeClass, 1)))
            return NULL;
          return t_PythonIndexOutput::wrap_Object(PythonIndexOutput(((t_PythonIndexOutput *) arg)->object.this$));
        }
        static PyObject *t_PythonIndexOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIndexOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIndexOutput_init_(t_PythonIndexOutput *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          PythonIndexOutput object((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            INT_CALL(object = PythonIndexOutput(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIndexOutput_finalize(t_PythonIndexOutput *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIndexOutput_pythonExtension(t_PythonIndexOutput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonIndexOutput_writeBytes(t_PythonIndexOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(PythonIndexOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static void JNICALL t_PythonIndexOutput_close0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jlong JNICALL t_PythonIndexOutput_getChecksum1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *result = PyObject_CallMethod(obj, "getChecksum", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("getChecksum", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static jlong JNICALL t_PythonIndexOutput_getFilePointer2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *result = PyObject_CallMethod(obj, "getFilePointer", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("getFilePointer", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static void JNICALL t_PythonIndexOutput_pythonDecRef3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonIndexOutput_writeByte4(JNIEnv *jenv, jobject jobj, jbyte a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = PyLong_FromLong(a0);
          PyObject *result = PyObject_CallMethod(obj, "writeByte", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonIndexOutput_writeBytes5(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = JArray<jbyte>(a0).wrap();
          PyObject *result = PyObject_CallMethod(obj, "writeBytes", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonIndexOutput_get__self(t_PythonIndexOutput *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *TokenOffsetPayloadTokenFilterFactory::class$ = NULL;
          jmethodID *TokenOffsetPayloadTokenFilterFactory::mids$ = NULL;
          bool TokenOffsetPayloadTokenFilterFactory::live$ = false;
          ::java::lang::String *TokenOffsetPayloadTokenFilterFactory::NAME = NULL;

          jclass TokenOffsetPayloadTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_0040958a64fc3910] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenOffsetPayloadTokenFilterFactory::TokenOffsetPayloadTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::payloads::TokenOffsetPayloadTokenFilter TokenOffsetPayloadTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::payloads::TokenOffsetPayloadTokenFilter(env->callObjectMethod(this$, mids$[mid_create_0040958a64fc3910], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenOffsetPayloadTokenFilterFactory_init_(t_TokenOffsetPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_create(t_TokenOffsetPayloadTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_TokenOffsetPayloadTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TokenOffsetPayloadTokenFilterFactory)[] = {
            { Py_tp_methods, t_TokenOffsetPayloadTokenFilterFactory__methods_ },
            { Py_tp_init, (void *) t_TokenOffsetPayloadTokenFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TokenOffsetPayloadTokenFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(TokenOffsetPayloadTokenFilterFactory, t_TokenOffsetPayloadTokenFilterFactory, TokenOffsetPayloadTokenFilterFactory);

          void t_TokenOffsetPayloadTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenOffsetPayloadTokenFilterFactory), &PY_TYPE_DEF(TokenOffsetPayloadTokenFilterFactory), module, "TokenOffsetPayloadTokenFilterFactory", 0);
          }

          void t_TokenOffsetPayloadTokenFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenOffsetPayloadTokenFilterFactory), "class_", make_descriptor(TokenOffsetPayloadTokenFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenOffsetPayloadTokenFilterFactory), "wrapfn_", make_descriptor(t_TokenOffsetPayloadTokenFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenOffsetPayloadTokenFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(TokenOffsetPayloadTokenFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenOffsetPayloadTokenFilterFactory), "NAME", make_descriptor(j2p(*TokenOffsetPayloadTokenFilterFactory::NAME)));
          }

          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenOffsetPayloadTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TokenOffsetPayloadTokenFilterFactory::wrap_Object(TokenOffsetPayloadTokenFilterFactory(((t_TokenOffsetPayloadTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenOffsetPayloadTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenOffsetPayloadTokenFilterFactory_init_(t_TokenOffsetPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TokenOffsetPayloadTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TokenOffsetPayloadTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_create(t_TokenOffsetPayloadTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::payloads::TokenOffsetPayloadTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::payloads::t_TokenOffsetPayloadTokenFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TokenOffsetPayloadTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource.h"
#include "org/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *UnifiedHighlighter$OffsetSource::class$ = NULL;
          jmethodID *UnifiedHighlighter$OffsetSource::mids$ = NULL;
          bool UnifiedHighlighter$OffsetSource::live$ = false;
          UnifiedHighlighter$OffsetSource *UnifiedHighlighter$OffsetSource::ANALYSIS = NULL;
          UnifiedHighlighter$OffsetSource *UnifiedHighlighter$OffsetSource::NONE_NEEDED = NULL;
          UnifiedHighlighter$OffsetSource *UnifiedHighlighter$OffsetSource::POSTINGS = NULL;
          UnifiedHighlighter$OffsetSource *UnifiedHighlighter$OffsetSource::POSTINGS_WITH_TERM_VECTORS = NULL;
          UnifiedHighlighter$OffsetSource *UnifiedHighlighter$OffsetSource::TERM_VECTORS = NULL;

          jclass UnifiedHighlighter$OffsetSource::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_4e354603e57d21a7] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource;");
              mids$[mid_values_b31f37b10fe83622] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              ANALYSIS = new UnifiedHighlighter$OffsetSource(env->getStaticObjectField(cls, "ANALYSIS", "Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource;"));
              NONE_NEEDED = new UnifiedHighlighter$OffsetSource(env->getStaticObjectField(cls, "NONE_NEEDED", "Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource;"));
              POSTINGS = new UnifiedHighlighter$OffsetSource(env->getStaticObjectField(cls, "POSTINGS", "Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource;"));
              POSTINGS_WITH_TERM_VECTORS = new UnifiedHighlighter$OffsetSource(env->getStaticObjectField(cls, "POSTINGS_WITH_TERM_VECTORS", "Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource;"));
              TERM_VECTORS = new UnifiedHighlighter$OffsetSource(env->getStaticObjectField(cls, "TERM_VECTORS", "Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UnifiedHighlighter$OffsetSource UnifiedHighlighter$OffsetSource::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return UnifiedHighlighter$OffsetSource(env->callStaticObjectMethod(cls, mids$[mid_valueOf_4e354603e57d21a7], a0.this$));
          }

          JArray< UnifiedHighlighter$OffsetSource > UnifiedHighlighter$OffsetSource::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< UnifiedHighlighter$OffsetSource >(env->callStaticObjectMethod(cls, mids$[mid_values_b31f37b10fe83622]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_UnifiedHighlighter$OffsetSource_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UnifiedHighlighter$OffsetSource_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UnifiedHighlighter$OffsetSource_of_(t_UnifiedHighlighter$OffsetSource *self, PyObject *args);
          static PyObject *t_UnifiedHighlighter$OffsetSource_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_UnifiedHighlighter$OffsetSource_values(PyTypeObject *type);
          static PyObject *t_UnifiedHighlighter$OffsetSource_get__parameters_(t_UnifiedHighlighter$OffsetSource *self, void *data);
          static PyGetSetDef t_UnifiedHighlighter$OffsetSource__fields_[] = {
            DECLARE_GET_FIELD(t_UnifiedHighlighter$OffsetSource, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UnifiedHighlighter$OffsetSource__methods_[] = {
            DECLARE_METHOD(t_UnifiedHighlighter$OffsetSource, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UnifiedHighlighter$OffsetSource, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UnifiedHighlighter$OffsetSource, of_, METH_VARARGS),
            DECLARE_METHOD(t_UnifiedHighlighter$OffsetSource, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_UnifiedHighlighter$OffsetSource, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(UnifiedHighlighter$OffsetSource)[] = {
            { Py_tp_methods, t_UnifiedHighlighter$OffsetSource__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_UnifiedHighlighter$OffsetSource__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(UnifiedHighlighter$OffsetSource)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(UnifiedHighlighter$OffsetSource, t_UnifiedHighlighter$OffsetSource, UnifiedHighlighter$OffsetSource);
          PyObject *t_UnifiedHighlighter$OffsetSource::wrap_Object(const UnifiedHighlighter$OffsetSource& object, PyTypeObject *p0)
          {
            PyObject *obj = t_UnifiedHighlighter$OffsetSource::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_UnifiedHighlighter$OffsetSource *self = (t_UnifiedHighlighter$OffsetSource *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_UnifiedHighlighter$OffsetSource::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_UnifiedHighlighter$OffsetSource::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_UnifiedHighlighter$OffsetSource *self = (t_UnifiedHighlighter$OffsetSource *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_UnifiedHighlighter$OffsetSource::install(PyObject *module)
          {
            installType(&PY_TYPE(UnifiedHighlighter$OffsetSource), &PY_TYPE_DEF(UnifiedHighlighter$OffsetSource), module, "UnifiedHighlighter$OffsetSource", 0);
          }

          void t_UnifiedHighlighter$OffsetSource::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter$OffsetSource), "class_", make_descriptor(UnifiedHighlighter$OffsetSource::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter$OffsetSource), "wrapfn_", make_descriptor(t_UnifiedHighlighter$OffsetSource::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter$OffsetSource), "boxfn_", make_descriptor(boxObject));
            env->getClass(UnifiedHighlighter$OffsetSource::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter$OffsetSource), "ANALYSIS", make_descriptor(t_UnifiedHighlighter$OffsetSource::wrap_Object(*UnifiedHighlighter$OffsetSource::ANALYSIS)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter$OffsetSource), "NONE_NEEDED", make_descriptor(t_UnifiedHighlighter$OffsetSource::wrap_Object(*UnifiedHighlighter$OffsetSource::NONE_NEEDED)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter$OffsetSource), "POSTINGS", make_descriptor(t_UnifiedHighlighter$OffsetSource::wrap_Object(*UnifiedHighlighter$OffsetSource::POSTINGS)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter$OffsetSource), "POSTINGS_WITH_TERM_VECTORS", make_descriptor(t_UnifiedHighlighter$OffsetSource::wrap_Object(*UnifiedHighlighter$OffsetSource::POSTINGS_WITH_TERM_VECTORS)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter$OffsetSource), "TERM_VECTORS", make_descriptor(t_UnifiedHighlighter$OffsetSource::wrap_Object(*UnifiedHighlighter$OffsetSource::TERM_VECTORS)));
          }

          static PyObject *t_UnifiedHighlighter$OffsetSource_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UnifiedHighlighter$OffsetSource::initializeClass, 1)))
              return NULL;
            return t_UnifiedHighlighter$OffsetSource::wrap_Object(UnifiedHighlighter$OffsetSource(((t_UnifiedHighlighter$OffsetSource *) arg)->object.this$));
          }
          static PyObject *t_UnifiedHighlighter$OffsetSource_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UnifiedHighlighter$OffsetSource::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_UnifiedHighlighter$OffsetSource_of_(t_UnifiedHighlighter$OffsetSource *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_UnifiedHighlighter$OffsetSource_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            UnifiedHighlighter$OffsetSource result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource::valueOf(a0));
              return t_UnifiedHighlighter$OffsetSource::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_UnifiedHighlighter$OffsetSource_values(PyTypeObject *type)
          {
            JArray< UnifiedHighlighter$OffsetSource > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource::values());
            return JArray<jobject>(result.this$).wrap(t_UnifiedHighlighter$OffsetSource::wrap_jobject);
          }
          static PyObject *t_UnifiedHighlighter$OffsetSource_get__parameters_(t_UnifiedHighlighter$OffsetSource *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *SearcherTaxonomyManager$SearcherAndTaxonomy::class$ = NULL;
          jmethodID *SearcherTaxonomyManager$SearcherAndTaxonomy::mids$ = NULL;
          jfieldID *SearcherTaxonomyManager$SearcherAndTaxonomy::fids$ = NULL;
          bool SearcherTaxonomyManager$SearcherAndTaxonomy::live$ = false;

          jclass SearcherTaxonomyManager$SearcherAndTaxonomy::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9750b374b6c6cff6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_searcher] = env->getFieldID(cls, "searcher", "Lorg/apache/lucene/search/IndexSearcher;");
              fids$[fid_taxonomyReader] = env->getFieldID(cls, "taxonomyReader", "Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SearcherTaxonomyManager$SearcherAndTaxonomy::SearcherTaxonomyManager$SearcherAndTaxonomy(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9750b374b6c6cff6, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::IndexSearcher SearcherTaxonomyManager$SearcherAndTaxonomy::_get_searcher() const
          {
            return ::org::apache::lucene::search::IndexSearcher(env->getObjectField(this$, fids$[fid_searcher]));
          }

          ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader SearcherTaxonomyManager$SearcherAndTaxonomy::_get_taxonomyReader() const
          {
            return ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader(env->getObjectField(this$, fids$[fid_taxonomyReader]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_of_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, PyObject *args);
          static int t_SearcherTaxonomyManager$SearcherAndTaxonomy_init_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__searcher(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data);
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__taxonomyReader(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data);

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__parameters_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data);
          static PyGetSetDef t_SearcherTaxonomyManager$SearcherAndTaxonomy__fields_[] = {
            DECLARE_GET_FIELD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, searcher),
            DECLARE_GET_FIELD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, taxonomyReader),
            DECLARE_GET_FIELD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SearcherTaxonomyManager$SearcherAndTaxonomy__methods_[] = {
            DECLARE_METHOD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SearcherTaxonomyManager$SearcherAndTaxonomy)[] = {
            { Py_tp_methods, t_SearcherTaxonomyManager$SearcherAndTaxonomy__methods_ },
            { Py_tp_init, (void *) t_SearcherTaxonomyManager$SearcherAndTaxonomy_init_ },
            { Py_tp_getset, t_SearcherTaxonomyManager$SearcherAndTaxonomy__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SearcherTaxonomyManager$SearcherAndTaxonomy)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy, t_SearcherTaxonomyManager$SearcherAndTaxonomy, SearcherTaxonomyManager$SearcherAndTaxonomy);
          PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_Object(const SearcherTaxonomyManager$SearcherAndTaxonomy& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearcherTaxonomyManager$SearcherAndTaxonomy *self = (t_SearcherTaxonomyManager$SearcherAndTaxonomy *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearcherTaxonomyManager$SearcherAndTaxonomy *self = (t_SearcherTaxonomyManager$SearcherAndTaxonomy *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SearcherTaxonomyManager$SearcherAndTaxonomy::install(PyObject *module)
          {
            installType(&PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy), &PY_TYPE_DEF(SearcherTaxonomyManager$SearcherAndTaxonomy), module, "SearcherTaxonomyManager$SearcherAndTaxonomy", 0);
          }

          void t_SearcherTaxonomyManager$SearcherAndTaxonomy::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy), "class_", make_descriptor(SearcherTaxonomyManager$SearcherAndTaxonomy::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy), "wrapfn_", make_descriptor(t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SearcherTaxonomyManager$SearcherAndTaxonomy::initializeClass, 1)))
              return NULL;
            return t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_Object(SearcherTaxonomyManager$SearcherAndTaxonomy(((t_SearcherTaxonomyManager$SearcherAndTaxonomy *) arg)->object.this$));
          }
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SearcherTaxonomyManager$SearcherAndTaxonomy::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_of_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SearcherTaxonomyManager$SearcherAndTaxonomy_init_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader a1((jobject) NULL);
            SearcherTaxonomyManager$SearcherAndTaxonomy object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SearcherTaxonomyManager$SearcherAndTaxonomy(a0, a1));
              self->object = object;
              self->parameters[0] = ::org::apache::lucene::facet::taxonomy::PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__parameters_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__searcher(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data)
          {
            ::org::apache::lucene::search::IndexSearcher value((jobject) NULL);
            OBJ_CALL(value = self->object._get_searcher());
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(value);
          }

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__taxonomyReader(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data)
          {
            ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader value((jobject) NULL);
            OBJ_CALL(value = self->object._get_taxonomyReader());
            return ::org::apache::lucene::facet::taxonomy::directory::t_DirectoryTaxonomyReader::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanLightStemmer::class$ = NULL;
          jmethodID *GermanLightStemmer::mids$ = NULL;
          bool GermanLightStemmer::live$ = false;

          jclass GermanLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanLightStemmer::GermanLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint GermanLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanLightStemmer_init_(t_GermanLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanLightStemmer_stem(t_GermanLightStemmer *self, PyObject *args);

          static PyMethodDef t_GermanLightStemmer__methods_[] = {
            DECLARE_METHOD(t_GermanLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GermanLightStemmer)[] = {
            { Py_tp_methods, t_GermanLightStemmer__methods_ },
            { Py_tp_init, (void *) t_GermanLightStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GermanLightStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GermanLightStemmer, t_GermanLightStemmer, GermanLightStemmer);

          void t_GermanLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanLightStemmer), &PY_TYPE_DEF(GermanLightStemmer), module, "GermanLightStemmer", 0);
          }

          void t_GermanLightStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanLightStemmer), "class_", make_descriptor(GermanLightStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanLightStemmer), "wrapfn_", make_descriptor(t_GermanLightStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanLightStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanLightStemmer::initializeClass, 1)))
              return NULL;
            return t_GermanLightStemmer::wrap_Object(GermanLightStemmer(((t_GermanLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_GermanLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanLightStemmer_init_(t_GermanLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            GermanLightStemmer object((jobject) NULL);

            INT_CALL(object = GermanLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GermanLightStemmer_stem(t_GermanLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldPhraseList::class$ = NULL;
          jmethodID *FieldPhraseList::mids$ = NULL;
          bool FieldPhraseList::live$ = false;

          jclass FieldPhraseList::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldPhraseList");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8519bd74d326741b] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;)V");
              mids$[mid_init$_f812552c39df4392] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/FieldTermStack;Lorg/apache/lucene/search/vectorhighlight/FieldQuery;)V");
              mids$[mid_init$_08f179f23b93129b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/FieldTermStack;Lorg/apache/lucene/search/vectorhighlight/FieldQuery;I)V");
              mids$[mid_addIfNoOverlap_bc2295d06c8d64dc] = env->getMethodID(cls, "addIfNoOverlap", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo;)V");
              mids$[mid_getPhraseList_49ec78390f08338a] = env->getMethodID(cls, "getPhraseList", "()Ljava/util/List;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldPhraseList::FieldPhraseList(const JArray< FieldPhraseList > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8519bd74d326741b, a0.this$)) {}

          FieldPhraseList::FieldPhraseList(const ::org::apache::lucene::search::vectorhighlight::FieldTermStack & a0, const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f812552c39df4392, a0.this$, a1.this$)) {}

          FieldPhraseList::FieldPhraseList(const ::org::apache::lucene::search::vectorhighlight::FieldTermStack & a0, const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_08f179f23b93129b, a0.this$, a1.this$, a2)) {}

          void FieldPhraseList::addIfNoOverlap(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList$WeightedPhraseInfo & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addIfNoOverlap_bc2295d06c8d64dc], a0.this$);
          }

          ::java::util::List FieldPhraseList::getPhraseList() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getPhraseList_49ec78390f08338a]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldPhraseList_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldPhraseList_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldPhraseList_init_(t_FieldPhraseList *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldPhraseList_addIfNoOverlap(t_FieldPhraseList *self, PyObject *arg);
          static PyObject *t_FieldPhraseList_getPhraseList(t_FieldPhraseList *self);
          static PyObject *t_FieldPhraseList_get__phraseList(t_FieldPhraseList *self, void *data);
          static PyGetSetDef t_FieldPhraseList__fields_[] = {
            DECLARE_GET_FIELD(t_FieldPhraseList, phraseList),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldPhraseList__methods_[] = {
            DECLARE_METHOD(t_FieldPhraseList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList, addIfNoOverlap, METH_O),
            DECLARE_METHOD(t_FieldPhraseList, getPhraseList, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FieldPhraseList)[] = {
            { Py_tp_methods, t_FieldPhraseList__methods_ },
            { Py_tp_init, (void *) t_FieldPhraseList_init_ },
            { Py_tp_getset, t_FieldPhraseList__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FieldPhraseList)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FieldPhraseList, t_FieldPhraseList, FieldPhraseList);

          void t_FieldPhraseList::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldPhraseList), &PY_TYPE_DEF(FieldPhraseList), module, "FieldPhraseList", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldPhraseList), "WeightedPhraseInfo", make_descriptor(&PY_TYPE_DEF(FieldPhraseList$WeightedPhraseInfo)));
          }

          void t_FieldPhraseList::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldPhraseList), "class_", make_descriptor(FieldPhraseList::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldPhraseList), "wrapfn_", make_descriptor(t_FieldPhraseList::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldPhraseList), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldPhraseList_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldPhraseList::initializeClass, 1)))
              return NULL;
            return t_FieldPhraseList::wrap_Object(FieldPhraseList(((t_FieldPhraseList *) arg)->object.this$));
          }
          static PyObject *t_FieldPhraseList_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldPhraseList::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldPhraseList_init_(t_FieldPhraseList *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< FieldPhraseList > a0((jobject) NULL);
                FieldPhraseList object((jobject) NULL);

                if (!parseArgs(args, "[k", FieldPhraseList::initializeClass, &a0))
                {
                  INT_CALL(object = FieldPhraseList(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldTermStack a0((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a1((jobject) NULL);
                FieldPhraseList object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::vectorhighlight::FieldTermStack::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FieldPhraseList(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldTermStack a0((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a1((jobject) NULL);
                jint a2;
                FieldPhraseList object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::search::vectorhighlight::FieldTermStack::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = FieldPhraseList(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldPhraseList_addIfNoOverlap(t_FieldPhraseList *self, PyObject *arg)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList$WeightedPhraseInfo a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList$WeightedPhraseInfo::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addIfNoOverlap(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addIfNoOverlap", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList_getPhraseList(t_FieldPhraseList *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getPhraseList());
            return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldPhraseList$WeightedPhraseInfo));
          }

          static PyObject *t_FieldPhraseList_get__phraseList(t_FieldPhraseList *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getPhraseList());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/FieldMetadata$Serializer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/codecs/uniformsplit/FieldMetadata.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/uniformsplit/FieldMetadata$Serializer.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *FieldMetadata$Serializer::class$ = NULL;
          jmethodID *FieldMetadata$Serializer::mids$ = NULL;
          bool FieldMetadata$Serializer::live$ = false;
          FieldMetadata$Serializer *FieldMetadata$Serializer::INSTANCE = NULL;

          jclass FieldMetadata$Serializer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/FieldMetadata$Serializer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_read_2ff5442f8d745185] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/index/FieldInfos;I)Lorg/apache/lucene/codecs/uniformsplit/FieldMetadata;");
              mids$[mid_write_431f1a7f62143502] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/codecs/uniformsplit/FieldMetadata;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              INSTANCE = new FieldMetadata$Serializer(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/codecs/uniformsplit/FieldMetadata$Serializer;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldMetadata$Serializer::FieldMetadata$Serializer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::uniformsplit::FieldMetadata FieldMetadata$Serializer::read(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::index::FieldInfos & a1, jint a2) const
          {
            return ::org::apache::lucene::codecs::uniformsplit::FieldMetadata(env->callObjectMethod(this$, mids$[mid_read_2ff5442f8d745185], a0.this$, a1.this$, a2));
          }

          void FieldMetadata$Serializer::write(const ::org::apache::lucene::store::DataOutput & a0, const ::org::apache::lucene::codecs::uniformsplit::FieldMetadata & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_431f1a7f62143502], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_FieldMetadata$Serializer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldMetadata$Serializer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldMetadata$Serializer_init_(t_FieldMetadata$Serializer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldMetadata$Serializer_read(t_FieldMetadata$Serializer *self, PyObject *args);
          static PyObject *t_FieldMetadata$Serializer_write(t_FieldMetadata$Serializer *self, PyObject *args);

          static PyMethodDef t_FieldMetadata$Serializer__methods_[] = {
            DECLARE_METHOD(t_FieldMetadata$Serializer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldMetadata$Serializer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldMetadata$Serializer, read, METH_VARARGS),
            DECLARE_METHOD(t_FieldMetadata$Serializer, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FieldMetadata$Serializer)[] = {
            { Py_tp_methods, t_FieldMetadata$Serializer__methods_ },
            { Py_tp_init, (void *) t_FieldMetadata$Serializer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FieldMetadata$Serializer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FieldMetadata$Serializer, t_FieldMetadata$Serializer, FieldMetadata$Serializer);

          void t_FieldMetadata$Serializer::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldMetadata$Serializer), &PY_TYPE_DEF(FieldMetadata$Serializer), module, "FieldMetadata$Serializer", 0);
          }

          void t_FieldMetadata$Serializer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldMetadata$Serializer), "class_", make_descriptor(FieldMetadata$Serializer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldMetadata$Serializer), "wrapfn_", make_descriptor(t_FieldMetadata$Serializer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldMetadata$Serializer), "boxfn_", make_descriptor(boxObject));
            env->getClass(FieldMetadata$Serializer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldMetadata$Serializer), "INSTANCE", make_descriptor(t_FieldMetadata$Serializer::wrap_Object(*FieldMetadata$Serializer::INSTANCE)));
          }

          static PyObject *t_FieldMetadata$Serializer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldMetadata$Serializer::initializeClass, 1)))
              return NULL;
            return t_FieldMetadata$Serializer::wrap_Object(FieldMetadata$Serializer(((t_FieldMetadata$Serializer *) arg)->object.this$));
          }
          static PyObject *t_FieldMetadata$Serializer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldMetadata$Serializer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldMetadata$Serializer_init_(t_FieldMetadata$Serializer *self, PyObject *args, PyObject *kwds)
          {
            FieldMetadata$Serializer object((jobject) NULL);

            INT_CALL(object = FieldMetadata$Serializer());
            self->object = object;

            return 0;
          }

          static PyObject *t_FieldMetadata$Serializer_read(t_FieldMetadata$Serializer *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::codecs::uniformsplit::FieldMetadata result((jobject) NULL);

            if (!parseArgs(args, "kkI", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.read(a0, a1, a2));
              return ::org::apache::lucene::codecs::uniformsplit::t_FieldMetadata::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "read", args);
            return NULL;
          }

          static PyObject *t_FieldMetadata$Serializer_write(t_FieldMetadata$Serializer *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            ::org::apache::lucene::codecs::uniformsplit::FieldMetadata a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::codecs::uniformsplit::FieldMetadata::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "write", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MaxNonCompetitiveBoostAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MaxNonCompetitiveBoostAttribute::class$ = NULL;
        jmethodID *MaxNonCompetitiveBoostAttribute::mids$ = NULL;
        bool MaxNonCompetitiveBoostAttribute::live$ = false;

        jclass MaxNonCompetitiveBoostAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MaxNonCompetitiveBoostAttribute");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getCompetitiveTerm_7af2ea2e37ce82b8] = env->getMethodID(cls, "getCompetitiveTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getMaxNonCompetitiveBoost_58aec2b64dff50c8] = env->getMethodID(cls, "getMaxNonCompetitiveBoost", "()F");
            mids$[mid_setCompetitiveTerm_0bdfd2603b7490a8] = env->getMethodID(cls, "setCompetitiveTerm", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setMaxNonCompetitiveBoost_8e1d952dd65cdc3a] = env->getMethodID(cls, "setMaxNonCompetitiveBoost", "(F)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef MaxNonCompetitiveBoostAttribute::getCompetitiveTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getCompetitiveTerm_7af2ea2e37ce82b8]));
        }

        jfloat MaxNonCompetitiveBoostAttribute::getMaxNonCompetitiveBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getMaxNonCompetitiveBoost_58aec2b64dff50c8]);
        }

        void MaxNonCompetitiveBoostAttribute::setCompetitiveTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCompetitiveTerm_0bdfd2603b7490a8], a0.this$);
        }

        void MaxNonCompetitiveBoostAttribute::setMaxNonCompetitiveBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxNonCompetitiveBoost_8e1d952dd65cdc3a], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MaxNonCompetitiveBoostAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_getCompetitiveTerm(t_MaxNonCompetitiveBoostAttribute *self);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_getMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_setCompetitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_setMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_get__competitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, void *data);
        static int t_MaxNonCompetitiveBoostAttribute_set__competitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg, void *data);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_get__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, void *data);
        static int t_MaxNonCompetitiveBoostAttribute_set__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg, void *data);
        static PyGetSetDef t_MaxNonCompetitiveBoostAttribute__fields_[] = {
          DECLARE_GETSET_FIELD(t_MaxNonCompetitiveBoostAttribute, competitiveTerm),
          DECLARE_GETSET_FIELD(t_MaxNonCompetitiveBoostAttribute, maxNonCompetitiveBoost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MaxNonCompetitiveBoostAttribute__methods_[] = {
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, getCompetitiveTerm, METH_NOARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, getMaxNonCompetitiveBoost, METH_NOARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, setCompetitiveTerm, METH_O),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, setMaxNonCompetitiveBoost, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MaxNonCompetitiveBoostAttribute)[] = {
          { Py_tp_methods, t_MaxNonCompetitiveBoostAttribute__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_MaxNonCompetitiveBoostAttribute__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MaxNonCompetitiveBoostAttribute)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::Attribute),
          NULL
        };

        DEFINE_TYPE(MaxNonCompetitiveBoostAttribute, t_MaxNonCompetitiveBoostAttribute, MaxNonCompetitiveBoostAttribute);

        void t_MaxNonCompetitiveBoostAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(MaxNonCompetitiveBoostAttribute), &PY_TYPE_DEF(MaxNonCompetitiveBoostAttribute), module, "MaxNonCompetitiveBoostAttribute", 0);
        }

        void t_MaxNonCompetitiveBoostAttribute::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MaxNonCompetitiveBoostAttribute), "class_", make_descriptor(MaxNonCompetitiveBoostAttribute::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MaxNonCompetitiveBoostAttribute), "wrapfn_", make_descriptor(t_MaxNonCompetitiveBoostAttribute::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MaxNonCompetitiveBoostAttribute), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MaxNonCompetitiveBoostAttribute::initializeClass, 1)))
            return NULL;
          return t_MaxNonCompetitiveBoostAttribute::wrap_Object(MaxNonCompetitiveBoostAttribute(((t_MaxNonCompetitiveBoostAttribute *) arg)->object.this$));
        }
        static PyObject *t_MaxNonCompetitiveBoostAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MaxNonCompetitiveBoostAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_getCompetitiveTerm(t_MaxNonCompetitiveBoostAttribute *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getCompetitiveTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_getMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getMaxNonCompetitiveBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_setCompetitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setCompetitiveTerm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCompetitiveTerm", arg);
          return NULL;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_setMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setMaxNonCompetitiveBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxNonCompetitiveBoost", arg);
          return NULL;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_get__competitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getCompetitiveTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
        static int t_MaxNonCompetitiveBoostAttribute_set__competitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setCompetitiveTerm(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "competitiveTerm", arg);
          return -1;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_get__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getMaxNonCompetitiveBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_MaxNonCompetitiveBoostAttribute_set__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setMaxNonCompetitiveBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxNonCompetitiveBoost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/TokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/util/TokenizerFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/ClassLoader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *TokenizerFactory::class$ = NULL;
          jmethodID *TokenizerFactory::mids$ = NULL;
          bool TokenizerFactory::live$ = false;

          jclass TokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/TokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_availableTokenizers_7dcf4034c6d1a92a] = env->getStaticMethodID(cls, "availableTokenizers", "()Ljava/util/Set;");
              mids$[mid_create_ad7699b1db6da82a] = env->getMethodID(cls, "create", "()Lorg/apache/lucene/analysis/Tokenizer;");
              mids$[mid_create_824583f10752bea9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;)Lorg/apache/lucene/analysis/Tokenizer;");
              mids$[mid_findSPIName_1d6fc28577e5ff15] = env->getStaticMethodID(cls, "findSPIName", "(Ljava/lang/Class;)Ljava/lang/String;");
              mids$[mid_forName_a1b9620978f4a6ec] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/lucene/analysis/util/TokenizerFactory;");
              mids$[mid_lookupClass_337d52b895d55b49] = env->getStaticMethodID(cls, "lookupClass", "(Ljava/lang/String;)Ljava/lang/Class;");
              mids$[mid_reloadTokenizers_98a876e82795b112] = env->getStaticMethodID(cls, "reloadTokenizers", "(Ljava/lang/ClassLoader;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Set TokenizerFactory::availableTokenizers()
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableTokenizers_7dcf4034c6d1a92a]));
          }

          ::org::apache::lucene::analysis::Tokenizer TokenizerFactory::create() const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_ad7699b1db6da82a]));
          }

          ::org::apache::lucene::analysis::Tokenizer TokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_824583f10752bea9], a0.this$));
          }

          ::java::lang::String TokenizerFactory::findSPIName(const ::java::lang::Class & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_findSPIName_1d6fc28577e5ff15], a0.this$));
          }

          TokenizerFactory TokenizerFactory::forName(const ::java::lang::String & a0, const ::java::util::Map & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return TokenizerFactory(env->callStaticObjectMethod(cls, mids$[mid_forName_a1b9620978f4a6ec], a0.this$, a1.this$));
          }

          ::java::lang::Class TokenizerFactory::lookupClass(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_lookupClass_337d52b895d55b49], a0.this$));
          }

          void TokenizerFactory::reloadTokenizers(const ::java::lang::ClassLoader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reloadTokenizers_98a876e82795b112], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_TokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenizerFactory_availableTokenizers(PyTypeObject *type);
          static PyObject *t_TokenizerFactory_create(t_TokenizerFactory *self, PyObject *args);
          static PyObject *t_TokenizerFactory_findSPIName(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenizerFactory_forName(PyTypeObject *type, PyObject *args);
          static PyObject *t_TokenizerFactory_lookupClass(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenizerFactory_reloadTokenizers(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_TokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_TokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, availableTokenizers, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_TokenizerFactory, findSPIName, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, forName, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, lookupClass, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, reloadTokenizers, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TokenizerFactory)[] = {
            { Py_tp_methods, t_TokenizerFactory__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TokenizerFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::AbstractAnalysisFactory),
            NULL
          };

          DEFINE_TYPE(TokenizerFactory, t_TokenizerFactory, TokenizerFactory);

          void t_TokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenizerFactory), &PY_TYPE_DEF(TokenizerFactory), module, "TokenizerFactory", 0);
          }

          void t_TokenizerFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenizerFactory), "class_", make_descriptor(TokenizerFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenizerFactory), "wrapfn_", make_descriptor(t_TokenizerFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenizerFactory), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_TokenizerFactory::wrap_Object(TokenizerFactory(((t_TokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_TokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TokenizerFactory_availableTokenizers(PyTypeObject *type)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenizerFactory::availableTokenizers());
            return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TokenizerFactory_create(t_TokenizerFactory *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);
                OBJ_CALL(result = self->object.create());
                return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
              }
              break;
             case 1:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.create(a0));
                  return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "create", args);
            return NULL;
          }

          static PyObject *t_TokenizerFactory_findSPIName(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::Class a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenizerFactory::findSPIName(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "findSPIName", arg);
            return NULL;
          }

          static PyObject *t_TokenizerFactory_forName(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::Map a1((jobject) NULL);
            PyTypeObject **p1;
            TokenizerFactory result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenizerFactory::forName(a0, a1));
              return t_TokenizerFactory::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "forName", args);
            return NULL;
          }

          static PyObject *t_TokenizerFactory_lookupClass(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenizerFactory::lookupClass(a0));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "lookupClass", arg);
            return NULL;
          }

          static PyObject *t_TokenizerFactory_reloadTokenizers(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::ClassLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::analysis::util::TokenizerFactory::reloadTokenizers(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "reloadTokenizers", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/BaseTermsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *BaseTermsEnum::class$ = NULL;
        jmethodID *BaseTermsEnum::mids$ = NULL;
        bool BaseTermsEnum::live$ = false;

        jclass BaseTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/BaseTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_attributes_8fce18d62d0e145e] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_seekExact_553d972fe19daaec] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_59a5c9565dacabef] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_termState_774a8ebb2c222d2d] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::AttributeSource BaseTermsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_8fce18d62d0e145e]));
        }

        jboolean BaseTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_553d972fe19daaec], a0.this$);
        }

        void BaseTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_59a5c9565dacabef], a0.this$, a1.this$);
        }

        ::org::apache::lucene::index::TermState BaseTermsEnum::termState() const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_774a8ebb2c222d2d]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_BaseTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseTermsEnum_attributes(t_BaseTermsEnum *self, PyObject *args);
        static PyObject *t_BaseTermsEnum_seekExact(t_BaseTermsEnum *self, PyObject *args);
        static PyObject *t_BaseTermsEnum_termState(t_BaseTermsEnum *self, PyObject *args);

        static PyMethodDef t_BaseTermsEnum__methods_[] = {
          DECLARE_METHOD(t_BaseTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseTermsEnum, attributes, METH_VARARGS),
          DECLARE_METHOD(t_BaseTermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_BaseTermsEnum, termState, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BaseTermsEnum)[] = {
          { Py_tp_methods, t_BaseTermsEnum__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BaseTermsEnum)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::TermsEnum),
          NULL
        };

        DEFINE_TYPE(BaseTermsEnum, t_BaseTermsEnum, BaseTermsEnum);

        void t_BaseTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(BaseTermsEnum), &PY_TYPE_DEF(BaseTermsEnum), module, "BaseTermsEnum", 0);
        }

        void t_BaseTermsEnum::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BaseTermsEnum), "class_", make_descriptor(BaseTermsEnum::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BaseTermsEnum), "wrapfn_", make_descriptor(t_BaseTermsEnum::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BaseTermsEnum), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BaseTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BaseTermsEnum::initializeClass, 1)))
            return NULL;
          return t_BaseTermsEnum::wrap_Object(BaseTermsEnum(((t_BaseTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_BaseTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BaseTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BaseTermsEnum_attributes(t_BaseTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(PY_TYPE(BaseTermsEnum), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_BaseTermsEnum_seekExact(t_BaseTermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.seekExact(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(PY_TYPE(BaseTermsEnum), (PyObject *) self, "seekExact", args, 2);
        }

        static PyObject *t_BaseTermsEnum_termState(t_BaseTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.termState());
            return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
          }

          return callSuper(PY_TYPE(BaseTermsEnum), (PyObject *) self, "termState", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanMinimalStemFilter::class$ = NULL;
          jmethodID *GermanMinimalStemFilter::mids$ = NULL;
          bool GermanMinimalStemFilter::live$ = false;

          jclass GermanMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanMinimalStemFilter::GermanMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean GermanMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanMinimalStemFilter_init_(t_GermanMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanMinimalStemFilter_incrementToken(t_GermanMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_GermanMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_GermanMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GermanMinimalStemFilter)[] = {
            { Py_tp_methods, t_GermanMinimalStemFilter__methods_ },
            { Py_tp_init, (void *) t_GermanMinimalStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GermanMinimalStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(GermanMinimalStemFilter, t_GermanMinimalStemFilter, GermanMinimalStemFilter);

          void t_GermanMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanMinimalStemFilter), &PY_TYPE_DEF(GermanMinimalStemFilter), module, "GermanMinimalStemFilter", 0);
          }

          void t_GermanMinimalStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanMinimalStemFilter), "class_", make_descriptor(GermanMinimalStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanMinimalStemFilter), "wrapfn_", make_descriptor(t_GermanMinimalStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanMinimalStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_GermanMinimalStemFilter::wrap_Object(GermanMinimalStemFilter(((t_GermanMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GermanMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanMinimalStemFilter_init_(t_GermanMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GermanMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GermanMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanMinimalStemFilter_incrementToken(t_GermanMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(GermanMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/SortedInputIterator.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *SortedInputIterator::class$ = NULL;
          jmethodID *SortedInputIterator::mids$ = NULL;
          bool SortedInputIterator::live$ = false;

          jclass SortedInputIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/SortedInputIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c2d816a57670c277] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/search/suggest/InputIterator;)V");
              mids$[mid_init$_e69adb3292da91fe] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/search/suggest/InputIterator;Ljava/util/Comparator;)V");
              mids$[mid_contexts_7dcf4034c6d1a92a] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_hasContexts_8454bd5aa23fd11e] = env->getMethodID(cls, "hasContexts", "()Z");
              mids$[mid_hasPayloads_8454bd5aa23fd11e] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_next_7af2ea2e37ce82b8] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_payload_7af2ea2e37ce82b8] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_2e5ae9edcb9b072f] = env->getMethodID(cls, "weight", "()J");
              mids$[mid_decodeContexts_9e9af729eef54113] = env->getMethodID(cls, "decodeContexts", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/ByteArrayDataInput;)Ljava/util/Set;");
              mids$[mid_decodePayload_b029a890a387cda7] = env->getMethodID(cls, "decodePayload", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/ByteArrayDataInput;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_decode_62b7f90a0981ef3d] = env->getMethodID(cls, "decode", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/ByteArrayDataInput;)J");
              mids$[mid_encode_e941369832f62243] = env->getMethodID(cls, "encode", "(Lorg/apache/lucene/util/OfflineSorter$ByteSequencesWriter;Lorg/apache/lucene/store/ByteArrayDataOutput;[BLorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;Ljava/util/Set;J)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedInputIterator::SortedInputIterator(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::suggest::InputIterator & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c2d816a57670c277, a0.this$, a1.this$, a2.this$)) {}

          SortedInputIterator::SortedInputIterator(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::suggest::InputIterator & a2, const ::java::util::Comparator & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e69adb3292da91fe, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          ::java::util::Set SortedInputIterator::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_7dcf4034c6d1a92a]));
          }

          jboolean SortedInputIterator::hasContexts() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasContexts_8454bd5aa23fd11e]);
          }

          jboolean SortedInputIterator::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_8454bd5aa23fd11e]);
          }

          ::org::apache::lucene::util::BytesRef SortedInputIterator::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_7af2ea2e37ce82b8]));
          }

          ::org::apache::lucene::util::BytesRef SortedInputIterator::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_7af2ea2e37ce82b8]));
          }

          jlong SortedInputIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_2e5ae9edcb9b072f]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_SortedInputIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedInputIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedInputIterator_init_(t_SortedInputIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedInputIterator_contexts(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_hasContexts(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_hasPayloads(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_next(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_payload(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_weight(t_SortedInputIterator *self);

          static PyMethodDef t_SortedInputIterator__methods_[] = {
            DECLARE_METHOD(t_SortedInputIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedInputIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedInputIterator, contexts, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, hasContexts, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, hasPayloads, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, next, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, payload, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SortedInputIterator)[] = {
            { Py_tp_methods, t_SortedInputIterator__methods_ },
            { Py_tp_init, (void *) t_SortedInputIterator_init_ },
            { Py_tp_iter, (void *) PyObject_SelfIter },
            { Py_tp_iternext, (void *) ((PyObject *(*)(t_SortedInputIterator *)) get_next< t_SortedInputIterator,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >) },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SortedInputIterator)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SortedInputIterator, t_SortedInputIterator, SortedInputIterator);

          void t_SortedInputIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedInputIterator), &PY_TYPE_DEF(SortedInputIterator), module, "SortedInputIterator", 0);
          }

          void t_SortedInputIterator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SortedInputIterator), "class_", make_descriptor(SortedInputIterator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SortedInputIterator), "wrapfn_", make_descriptor(t_SortedInputIterator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SortedInputIterator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedInputIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedInputIterator::initializeClass, 1)))
              return NULL;
            return t_SortedInputIterator::wrap_Object(SortedInputIterator(((t_SortedInputIterator *) arg)->object.this$));
          }
          static PyObject *t_SortedInputIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedInputIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedInputIterator_init_(t_SortedInputIterator *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::search::suggest::InputIterator a2((jobject) NULL);
                SortedInputIterator object((jobject) NULL);

                if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SortedInputIterator(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::search::suggest::InputIterator a2((jobject) NULL);
                ::java::util::Comparator a3((jobject) NULL);
                PyTypeObject **p3;
                SortedInputIterator object((jobject) NULL);

                if (!parseArgs(args, "kskK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::suggest::InputIterator::initializeClass, ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
                {
                  INT_CALL(object = SortedInputIterator(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedInputIterator_contexts(t_SortedInputIterator *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.contexts());
            return ::java::util::t_Set::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_SortedInputIterator_hasContexts(t_SortedInputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasContexts());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SortedInputIterator_hasPayloads(t_SortedInputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SortedInputIterator_next(t_SortedInputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_SortedInputIterator_payload(t_SortedInputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_SortedInputIterator_weight(t_SortedInputIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryParserHelper.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/SyntaxParser.h"
#include "org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {

            ::java::lang::Class *QueryParserHelper::class$ = NULL;
            jmethodID *QueryParserHelper::mids$ = NULL;
            bool QueryParserHelper::live$ = false;

            jclass QueryParserHelper::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/QueryParserHelper");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_e8e450d56f67ed2d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;Lorg/apache/lucene/queryparser/flexible/core/parser/SyntaxParser;Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;)V");
                mids$[mid_getQueryBuilder_9658641571f73a7b] = env->getMethodID(cls, "getQueryBuilder", "()Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;");
                mids$[mid_getQueryConfigHandler_04fdb47806be47b9] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                mids$[mid_getQueryNodeProcessor_ec6ac5a997927dc6] = env->getMethodID(cls, "getQueryNodeProcessor", "()Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;");
                mids$[mid_getSyntaxParser_5da4a996865388c2] = env->getMethodID(cls, "getSyntaxParser", "()Lorg/apache/lucene/queryparser/flexible/core/parser/SyntaxParser;");
                mids$[mid_parse_2f6fb31a87be462e] = env->getMethodID(cls, "parse", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;");
                mids$[mid_setQueryBuilder_44140a10aae98a11] = env->getMethodID(cls, "setQueryBuilder", "(Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;)V");
                mids$[mid_setQueryConfigHandler_ae2484f2d8820041] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                mids$[mid_setQueryNodeProcessor_d2c147c43d4bdb60] = env->getMethodID(cls, "setQueryNodeProcessor", "(Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;)V");
                mids$[mid_setSyntaxParser_95202750f7c98195] = env->getMethodID(cls, "setSyntaxParser", "(Lorg/apache/lucene/queryparser/flexible/core/parser/SyntaxParser;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryParserHelper::QueryParserHelper(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0, const ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser & a1, const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a2, const ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e8e450d56f67ed2d, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder QueryParserHelper::getQueryBuilder() const
            {
              return ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder(env->callObjectMethod(this$, mids$[mid_getQueryBuilder_9658641571f73a7b]));
            }

            ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler QueryParserHelper::getQueryConfigHandler() const
            {
              return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_04fdb47806be47b9]));
            }

            ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor QueryParserHelper::getQueryNodeProcessor() const
            {
              return ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor(env->callObjectMethod(this$, mids$[mid_getQueryNodeProcessor_ec6ac5a997927dc6]));
            }

            ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser QueryParserHelper::getSyntaxParser() const
            {
              return ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser(env->callObjectMethod(this$, mids$[mid_getSyntaxParser_5da4a996865388c2]));
            }

            ::java::lang::Object QueryParserHelper::parse(const ::java::lang::String & a0, const ::java::lang::String & a1) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_parse_2f6fb31a87be462e], a0.this$, a1.this$));
            }

            void QueryParserHelper::setQueryBuilder(const ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setQueryBuilder_44140a10aae98a11], a0.this$);
            }

            void QueryParserHelper::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_ae2484f2d8820041], a0.this$);
            }

            void QueryParserHelper::setQueryNodeProcessor(const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setQueryNodeProcessor_d2c147c43d4bdb60], a0.this$);
            }

            void QueryParserHelper::setSyntaxParser(const ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setSyntaxParser_95202750f7c98195], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            static PyObject *t_QueryParserHelper_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserHelper_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryParserHelper_init_(t_QueryParserHelper *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryParserHelper_getQueryBuilder(t_QueryParserHelper *self);
            static PyObject *t_QueryParserHelper_getQueryConfigHandler(t_QueryParserHelper *self);
            static PyObject *t_QueryParserHelper_getQueryNodeProcessor(t_QueryParserHelper *self);
            static PyObject *t_QueryParserHelper_getSyntaxParser(t_QueryParserHelper *self);
            static PyObject *t_QueryParserHelper_parse(t_QueryParserHelper *self, PyObject *args);
            static PyObject *t_QueryParserHelper_setQueryBuilder(t_QueryParserHelper *self, PyObject *arg);
            static PyObject *t_QueryParserHelper_setQueryConfigHandler(t_QueryParserHelper *self, PyObject *arg);
            static PyObject *t_QueryParserHelper_setQueryNodeProcessor(t_QueryParserHelper *self, PyObject *arg);
            static PyObject *t_QueryParserHelper_setSyntaxParser(t_QueryParserHelper *self, PyObject *arg);
            static PyObject *t_QueryParserHelper_get__queryBuilder(t_QueryParserHelper *self, void *data);
            static int t_QueryParserHelper_set__queryBuilder(t_QueryParserHelper *self, PyObject *arg, void *data);
            static PyObject *t_QueryParserHelper_get__queryConfigHandler(t_QueryParserHelper *self, void *data);
            static int t_QueryParserHelper_set__queryConfigHandler(t_QueryParserHelper *self, PyObject *arg, void *data);
            static PyObject *t_QueryParserHelper_get__queryNodeProcessor(t_QueryParserHelper *self, void *data);
            static int t_QueryParserHelper_set__queryNodeProcessor(t_QueryParserHelper *self, PyObject *arg, void *data);
            static PyObject *t_QueryParserHelper_get__syntaxParser(t_QueryParserHelper *self, void *data);
            static int t_QueryParserHelper_set__syntaxParser(t_QueryParserHelper *self, PyObject *arg, void *data);
            static PyGetSetDef t_QueryParserHelper__fields_[] = {
              DECLARE_GETSET_FIELD(t_QueryParserHelper, queryBuilder),
              DECLARE_GETSET_FIELD(t_QueryParserHelper, queryConfigHandler),
              DECLARE_GETSET_FIELD(t_QueryParserHelper, queryNodeProcessor),
              DECLARE_GETSET_FIELD(t_QueryParserHelper, syntaxParser),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryParserHelper__methods_[] = {
              DECLARE_METHOD(t_QueryParserHelper, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserHelper, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserHelper, getQueryBuilder, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserHelper, getQueryConfigHandler, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserHelper, getQueryNodeProcessor, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserHelper, getSyntaxParser, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserHelper, parse, METH_VARARGS),
              DECLARE_METHOD(t_QueryParserHelper, setQueryBuilder, METH_O),
              DECLARE_METHOD(t_QueryParserHelper, setQueryConfigHandler, METH_O),
              DECLARE_METHOD(t_QueryParserHelper, setQueryNodeProcessor, METH_O),
              DECLARE_METHOD(t_QueryParserHelper, setSyntaxParser, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(QueryParserHelper)[] = {
              { Py_tp_methods, t_QueryParserHelper__methods_ },
              { Py_tp_init, (void *) t_QueryParserHelper_init_ },
              { Py_tp_getset, t_QueryParserHelper__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(QueryParserHelper)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(QueryParserHelper, t_QueryParserHelper, QueryParserHelper);

            void t_QueryParserHelper::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParserHelper), &PY_TYPE_DEF(QueryParserHelper), module, "QueryParserHelper", 0);
            }

            void t_QueryParserHelper::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserHelper), "class_", make_descriptor(QueryParserHelper::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserHelper), "wrapfn_", make_descriptor(t_QueryParserHelper::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserHelper), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryParserHelper_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParserHelper::initializeClass, 1)))
                return NULL;
              return t_QueryParserHelper::wrap_Object(QueryParserHelper(((t_QueryParserHelper *) arg)->object.this$));
            }
            static PyObject *t_QueryParserHelper_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParserHelper::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryParserHelper_init_(t_QueryParserHelper *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
              ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser a1((jobject) NULL);
              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a2((jobject) NULL);
              ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder a3((jobject) NULL);
              QueryParserHelper object((jobject) NULL);

              if (!parseArgs(args, "kkkk", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser::initializeClass, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = QueryParserHelper(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryParserHelper_getQueryBuilder(t_QueryParserHelper *self)
            {
              ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder result((jobject) NULL);
              OBJ_CALL(result = self->object.getQueryBuilder());
              return ::org::apache::lucene::queryparser::flexible::core::builders::t_QueryBuilder::wrap_Object(result);
            }

            static PyObject *t_QueryParserHelper_getQueryConfigHandler(t_QueryParserHelper *self)
            {
              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
              OBJ_CALL(result = self->object.getQueryConfigHandler());
              return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
            }

            static PyObject *t_QueryParserHelper_getQueryNodeProcessor(t_QueryParserHelper *self)
            {
              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor result((jobject) NULL);
              OBJ_CALL(result = self->object.getQueryNodeProcessor());
              return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(result);
            }

            static PyObject *t_QueryParserHelper_getSyntaxParser(t_QueryParserHelper *self)
            {
              ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser result((jobject) NULL);
              OBJ_CALL(result = self->object.getSyntaxParser());
              return ::org::apache::lucene::queryparser::flexible::core::parser::t_SyntaxParser::wrap_Object(result);
            }

            static PyObject *t_QueryParserHelper_parse(t_QueryParserHelper *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.parse(a0, a1));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "parse", args);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_setQueryBuilder(t_QueryParserHelper *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setQueryBuilder(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setQueryBuilder", arg);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_setQueryConfigHandler(t_QueryParserHelper *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setQueryConfigHandler(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_setQueryNodeProcessor(t_QueryParserHelper *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setQueryNodeProcessor(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setQueryNodeProcessor", arg);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_setSyntaxParser(t_QueryParserHelper *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setSyntaxParser(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setSyntaxParser", arg);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_get__queryBuilder(t_QueryParserHelper *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder value((jobject) NULL);
              OBJ_CALL(value = self->object.getQueryBuilder());
              return ::org::apache::lucene::queryparser::flexible::core::builders::t_QueryBuilder::wrap_Object(value);
            }
            static int t_QueryParserHelper_set__queryBuilder(t_QueryParserHelper *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &value))
                {
                  INT_CALL(self->object.setQueryBuilder(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "queryBuilder", arg);
              return -1;
            }

            static PyObject *t_QueryParserHelper_get__queryConfigHandler(t_QueryParserHelper *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
              OBJ_CALL(value = self->object.getQueryConfigHandler());
              return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
            }
            static int t_QueryParserHelper_set__queryConfigHandler(t_QueryParserHelper *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                {
                  INT_CALL(self->object.setQueryConfigHandler(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
              return -1;
            }

            static PyObject *t_QueryParserHelper_get__queryNodeProcessor(t_QueryParserHelper *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor value((jobject) NULL);
              OBJ_CALL(value = self->object.getQueryNodeProcessor());
              return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(value);
            }
            static int t_QueryParserHelper_set__queryNodeProcessor(t_QueryParserHelper *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &value))
                {
                  INT_CALL(self->object.setQueryNodeProcessor(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "queryNodeProcessor", arg);
              return -1;
            }

            static PyObject *t_QueryParserHelper_get__syntaxParser(t_QueryParserHelper *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser value((jobject) NULL);
              OBJ_CALL(value = self->object.getSyntaxParser());
              return ::org::apache::lucene::queryparser::flexible::core::parser::t_SyntaxParser::wrap_Object(value);
            }
            static int t_QueryParserHelper_set__syntaxParser(t_QueryParserHelper *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser::initializeClass, &value))
                {
                  INT_CALL(self->object.setSyntaxParser(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "syntaxParser", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$BooleqneContext.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/List.h"
#include "org/antlr/v4/runtime/Token.h"
#include "org/antlr/v4/runtime/atn/ParserATNSimulator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$BooleqneContext::class$ = NULL;
          jmethodID *JavascriptParser$BooleqneContext::mids$ = NULL;
          bool JavascriptParser$BooleqneContext::live$ = false;

          jclass JavascriptParser$BooleqneContext::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$BooleqneContext");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5b630188893587b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;)V");
              mids$[mid_expression_49ec78390f08338a] = env->getMethodID(cls, "expression", "()Ljava/util/List;");
              mids$[mid_expression_a4fb3fdc55d1c64a] = env->getMethodID(cls, "expression", "(I)Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$BooleqneContext::JavascriptParser$BooleqneContext(const ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext & a0) : ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->newObject(initializeClass, &mids$, mid_init$_5b630188893587b5, a0.this$)) {}

          ::java::util::List JavascriptParser$BooleqneContext::expression() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_expression_49ec78390f08338a]));
          }

          ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext JavascriptParser$BooleqneContext::expression(jint a0) const
          {
            return ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->callObjectMethod(this$, mids$[mid_expression_a4fb3fdc55d1c64a], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$BooleqneContext_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$BooleqneContext_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$BooleqneContext_of_(t_JavascriptParser$BooleqneContext *self, PyObject *args);
          static int t_JavascriptParser$BooleqneContext_init_(t_JavascriptParser$BooleqneContext *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JavascriptParser$BooleqneContext_expression(t_JavascriptParser$BooleqneContext *self, PyObject *args);
          static PyObject *t_JavascriptParser$BooleqneContext_get__parameters_(t_JavascriptParser$BooleqneContext *self, void *data);
          static PyGetSetDef t_JavascriptParser$BooleqneContext__fields_[] = {
            DECLARE_GET_FIELD(t_JavascriptParser$BooleqneContext, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JavascriptParser$BooleqneContext__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$BooleqneContext, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$BooleqneContext, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$BooleqneContext, of_, METH_VARARGS),
            DECLARE_METHOD(t_JavascriptParser$BooleqneContext, expression, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JavascriptParser$BooleqneContext)[] = {
            { Py_tp_methods, t_JavascriptParser$BooleqneContext__methods_ },
            { Py_tp_init, (void *) t_JavascriptParser$BooleqneContext_init_ },
            { Py_tp_getset, t_JavascriptParser$BooleqneContext__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JavascriptParser$BooleqneContext)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext),
            NULL
          };

          DEFINE_TYPE(JavascriptParser$BooleqneContext, t_JavascriptParser$BooleqneContext, JavascriptParser$BooleqneContext);
          PyObject *t_JavascriptParser$BooleqneContext::wrap_Object(const JavascriptParser$BooleqneContext& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$BooleqneContext::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$BooleqneContext *self = (t_JavascriptParser$BooleqneContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_JavascriptParser$BooleqneContext::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$BooleqneContext::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$BooleqneContext *self = (t_JavascriptParser$BooleqneContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_JavascriptParser$BooleqneContext::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$BooleqneContext), &PY_TYPE_DEF(JavascriptParser$BooleqneContext), module, "JavascriptParser$BooleqneContext", 0);
          }

          void t_JavascriptParser$BooleqneContext::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BooleqneContext), "class_", make_descriptor(JavascriptParser$BooleqneContext::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BooleqneContext), "wrapfn_", make_descriptor(t_JavascriptParser$BooleqneContext::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BooleqneContext), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$BooleqneContext_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$BooleqneContext::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$BooleqneContext::wrap_Object(JavascriptParser$BooleqneContext(((t_JavascriptParser$BooleqneContext *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$BooleqneContext_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$BooleqneContext::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptParser$BooleqneContext_of_(t_JavascriptParser$BooleqneContext *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_JavascriptParser$BooleqneContext_init_(t_JavascriptParser$BooleqneContext *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext a0((jobject) NULL);
            PyTypeObject **p0;
            JavascriptParser$BooleqneContext object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext::initializeClass, &a0, &p0, ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::parameters_))
            {
              INT_CALL(object = JavascriptParser$BooleqneContext(a0));
              self->object = object;
              self->parameters[0] = ::org::antlr::v4::runtime::PY_TYPE(Token);
              self->parameters[1] = ::org::antlr::v4::runtime::atn::PY_TYPE(ParserATNSimulator);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JavascriptParser$BooleqneContext_expression(t_JavascriptParser$BooleqneContext *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.expression());
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::expressions::js::PY_TYPE(JavascriptParser$ExpressionContext));
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.expression(a0));
                  return ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "expression", args);
            return NULL;
          }
          static PyObject *t_JavascriptParser$BooleqneContext_get__parameters_(t_JavascriptParser$BooleqneContext *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilderFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *QueryBuilderFactory::class$ = NULL;
          jmethodID *QueryBuilderFactory::mids$ = NULL;
          bool QueryBuilderFactory::live$ = false;

          jclass QueryBuilderFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/QueryBuilderFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_addBuilder_af2b25e035a80d26] = env->getMethodID(cls, "addBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");
              mids$[mid_getQueryBuilder_51a7fe245610f27d] = env->getMethodID(cls, "getQueryBuilder", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/xml/QueryBuilder;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryBuilderFactory::QueryBuilderFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void QueryBuilderFactory::addBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::QueryBuilder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addBuilder_af2b25e035a80d26], a0.this$, a1.this$);
          }

          ::org::apache::lucene::queryparser::xml::QueryBuilder QueryBuilderFactory::getQueryBuilder(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::queryparser::xml::QueryBuilder(env->callObjectMethod(this$, mids$[mid_getQueryBuilder_51a7fe245610f27d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_QueryBuilderFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryBuilderFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryBuilderFactory_init_(t_QueryBuilderFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryBuilderFactory_addBuilder(t_QueryBuilderFactory *self, PyObject *args);
          static PyObject *t_QueryBuilderFactory_getQueryBuilder(t_QueryBuilderFactory *self, PyObject *arg);

          static PyMethodDef t_QueryBuilderFactory__methods_[] = {
            DECLARE_METHOD(t_QueryBuilderFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryBuilderFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryBuilderFactory, addBuilder, METH_VARARGS),
            DECLARE_METHOD(t_QueryBuilderFactory, getQueryBuilder, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(QueryBuilderFactory)[] = {
            { Py_tp_methods, t_QueryBuilderFactory__methods_ },
            { Py_tp_init, (void *) t_QueryBuilderFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(QueryBuilderFactory)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(QueryBuilderFactory, t_QueryBuilderFactory, QueryBuilderFactory);

          void t_QueryBuilderFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryBuilderFactory), &PY_TYPE_DEF(QueryBuilderFactory), module, "QueryBuilderFactory", 0);
          }

          void t_QueryBuilderFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryBuilderFactory), "class_", make_descriptor(QueryBuilderFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryBuilderFactory), "wrapfn_", make_descriptor(t_QueryBuilderFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryBuilderFactory), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryBuilderFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryBuilderFactory::initializeClass, 1)))
              return NULL;
            return t_QueryBuilderFactory::wrap_Object(QueryBuilderFactory(((t_QueryBuilderFactory *) arg)->object.this$));
          }
          static PyObject *t_QueryBuilderFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryBuilderFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryBuilderFactory_init_(t_QueryBuilderFactory *self, PyObject *args, PyObject *kwds)
          {
            QueryBuilderFactory object((jobject) NULL);

            INT_CALL(object = QueryBuilderFactory());
            self->object = object;

            return 0;
          }

          static PyObject *t_QueryBuilderFactory_addBuilder(t_QueryBuilderFactory *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::QueryBuilder a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addBuilder(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addBuilder", args);
            return NULL;
          }

          static PyObject *t_QueryBuilderFactory_getQueryBuilder(t_QueryBuilderFactory *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::QueryBuilder result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getQueryBuilder(a0));
              return ::org::apache::lucene::queryparser::xml::t_QueryBuilder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getQueryBuilder", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ExitableDirectoryReader$ExitableFilterAtomicReader.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/PointValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/QueryTimeout.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/IndexReader$CacheHelper.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ExitableDirectoryReader$ExitableFilterAtomicReader::class$ = NULL;
        jmethodID *ExitableDirectoryReader$ExitableFilterAtomicReader::mids$ = NULL;
        bool ExitableDirectoryReader$ExitableFilterAtomicReader::live$ = false;

        jclass ExitableDirectoryReader$ExitableFilterAtomicReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ExitableDirectoryReader$ExitableFilterAtomicReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_60a07676f959d30a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/LeafReader;Lorg/apache/lucene/index/QueryTimeout;)V");
            mids$[mid_getBinaryDocValues_6cf59c3533d4df22] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getCoreCacheHelper_a64c414fea9a8cf6] = env->getMethodID(cls, "getCoreCacheHelper", "()Lorg/apache/lucene/index/IndexReader$CacheHelper;");
            mids$[mid_getNumericDocValues_2b2c87c24a70ef49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getPointValues_72b990dbae0eea09] = env->getMethodID(cls, "getPointValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/PointValues;");
            mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6] = env->getMethodID(cls, "getReaderCacheHelper", "()Lorg/apache/lucene/index/IndexReader$CacheHelper;");
            mids$[mid_getSortedDocValues_adb16e9c5e3d9604] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_25e77b19828c4dfa] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_379820f082b251eb] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_terms_3976802ad88273cd] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ExitableDirectoryReader$ExitableFilterAtomicReader::ExitableDirectoryReader$ExitableFilterAtomicReader(const ::org::apache::lucene::index::LeafReader & a0, const ::org::apache::lucene::index::QueryTimeout & a1) : ::org::apache::lucene::index::FilterLeafReader(env->newObject(initializeClass, &mids$, mid_init$_60a07676f959d30a, a0.this$, a1.this$)) {}

        ::org::apache::lucene::index::BinaryDocValues ExitableDirectoryReader$ExitableFilterAtomicReader::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_6cf59c3533d4df22], a0.this$));
        }

        ::org::apache::lucene::index::IndexReader$CacheHelper ExitableDirectoryReader$ExitableFilterAtomicReader::getCoreCacheHelper() const
        {
          return ::org::apache::lucene::index::IndexReader$CacheHelper(env->callObjectMethod(this$, mids$[mid_getCoreCacheHelper_a64c414fea9a8cf6]));
        }

        ::org::apache::lucene::index::NumericDocValues ExitableDirectoryReader$ExitableFilterAtomicReader::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_2b2c87c24a70ef49], a0.this$));
        }

        ::org::apache::lucene::index::PointValues ExitableDirectoryReader$ExitableFilterAtomicReader::getPointValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::PointValues(env->callObjectMethod(this$, mids$[mid_getPointValues_72b990dbae0eea09], a0.this$));
        }

        ::org::apache::lucene::index::IndexReader$CacheHelper ExitableDirectoryReader$ExitableFilterAtomicReader::getReaderCacheHelper() const
        {
          return ::org::apache::lucene::index::IndexReader$CacheHelper(env->callObjectMethod(this$, mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6]));
        }

        ::org::apache::lucene::index::SortedDocValues ExitableDirectoryReader$ExitableFilterAtomicReader::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_adb16e9c5e3d9604], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues ExitableDirectoryReader$ExitableFilterAtomicReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_25e77b19828c4dfa], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues ExitableDirectoryReader$ExitableFilterAtomicReader::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_379820f082b251eb], a0.this$));
        }

        ::org::apache::lucene::index::Terms ExitableDirectoryReader$ExitableFilterAtomicReader::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_3976802ad88273cd], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_of_(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args);
        static int t_ExitableDirectoryReader$ExitableFilterAtomicReader_init_(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_getBinaryDocValues(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args);
        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_getCoreCacheHelper(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args);
        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_getNumericDocValues(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args);
        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_getPointValues(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args);
        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_getReaderCacheHelper(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args);
        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_getSortedDocValues(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args);
        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_getSortedNumericDocValues(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args);
        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_getSortedSetDocValues(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args);
        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_terms(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args);
        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_get__coreCacheHelper(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, void *data);
        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_get__readerCacheHelper(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, void *data);
        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_get__parameters_(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, void *data);
        static PyGetSetDef t_ExitableDirectoryReader$ExitableFilterAtomicReader__fields_[] = {
          DECLARE_GET_FIELD(t_ExitableDirectoryReader$ExitableFilterAtomicReader, coreCacheHelper),
          DECLARE_GET_FIELD(t_ExitableDirectoryReader$ExitableFilterAtomicReader, readerCacheHelper),
          DECLARE_GET_FIELD(t_ExitableDirectoryReader$ExitableFilterAtomicReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ExitableDirectoryReader$ExitableFilterAtomicReader__methods_[] = {
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableFilterAtomicReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableFilterAtomicReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableFilterAtomicReader, of_, METH_VARARGS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableFilterAtomicReader, getBinaryDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableFilterAtomicReader, getCoreCacheHelper, METH_VARARGS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableFilterAtomicReader, getNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableFilterAtomicReader, getPointValues, METH_VARARGS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableFilterAtomicReader, getReaderCacheHelper, METH_VARARGS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableFilterAtomicReader, getSortedDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableFilterAtomicReader, getSortedNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableFilterAtomicReader, getSortedSetDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableFilterAtomicReader, terms, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ExitableDirectoryReader$ExitableFilterAtomicReader)[] = {
          { Py_tp_methods, t_ExitableDirectoryReader$ExitableFilterAtomicReader__methods_ },
          { Py_tp_init, (void *) t_ExitableDirectoryReader$ExitableFilterAtomicReader_init_ },
          { Py_tp_getset, t_ExitableDirectoryReader$ExitableFilterAtomicReader__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ExitableDirectoryReader$ExitableFilterAtomicReader)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::FilterLeafReader),
          NULL
        };

        DEFINE_TYPE(ExitableDirectoryReader$ExitableFilterAtomicReader, t_ExitableDirectoryReader$ExitableFilterAtomicReader, ExitableDirectoryReader$ExitableFilterAtomicReader);
        PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader::wrap_Object(const ExitableDirectoryReader$ExitableFilterAtomicReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ExitableDirectoryReader$ExitableFilterAtomicReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ExitableDirectoryReader$ExitableFilterAtomicReader *self = (t_ExitableDirectoryReader$ExitableFilterAtomicReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ExitableDirectoryReader$ExitableFilterAtomicReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ExitableDirectoryReader$ExitableFilterAtomicReader *self = (t_ExitableDirectoryReader$ExitableFilterAtomicReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ExitableDirectoryReader$ExitableFilterAtomicReader::install(PyObject *module)
        {
          installType(&PY_TYPE(ExitableDirectoryReader$ExitableFilterAtomicReader), &PY_TYPE_DEF(ExitableDirectoryReader$ExitableFilterAtomicReader), module, "ExitableDirectoryReader$ExitableFilterAtomicReader", 0);
        }

        void t_ExitableDirectoryReader$ExitableFilterAtomicReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader$ExitableFilterAtomicReader), "class_", make_descriptor(ExitableDirectoryReader$ExitableFilterAtomicReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader$ExitableFilterAtomicReader), "wrapfn_", make_descriptor(t_ExitableDirectoryReader$ExitableFilterAtomicReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader$ExitableFilterAtomicReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ExitableDirectoryReader$ExitableFilterAtomicReader::initializeClass, 1)))
            return NULL;
          return t_ExitableDirectoryReader$ExitableFilterAtomicReader::wrap_Object(ExitableDirectoryReader$ExitableFilterAtomicReader(((t_ExitableDirectoryReader$ExitableFilterAtomicReader *) arg)->object.this$));
        }
        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ExitableDirectoryReader$ExitableFilterAtomicReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_of_(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ExitableDirectoryReader$ExitableFilterAtomicReader_init_(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
          ::org::apache::lucene::index::QueryTimeout a1((jobject) NULL);
          ExitableDirectoryReader$ExitableFilterAtomicReader object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::LeafReader::initializeClass, ::org::apache::lucene::index::QueryTimeout::initializeClass, &a0, &a1))
          {
            INT_CALL(object = ExitableDirectoryReader$ExitableFilterAtomicReader(a0, a1));
            self->object = object;
            self->parameters[0] = ::org::apache::lucene::index::PY_TYPE(LeafReader);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_getBinaryDocValues(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ExitableDirectoryReader$ExitableFilterAtomicReader), (PyObject *) self, "getBinaryDocValues", args, 2);
        }

        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_getCoreCacheHelper(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCoreCacheHelper());
            return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ExitableDirectoryReader$ExitableFilterAtomicReader), (PyObject *) self, "getCoreCacheHelper", args, 2);
        }

        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_getNumericDocValues(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ExitableDirectoryReader$ExitableFilterAtomicReader), (PyObject *) self, "getNumericDocValues", args, 2);
        }

        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_getPointValues(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::PointValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getPointValues(a0));
            return ::org::apache::lucene::index::t_PointValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ExitableDirectoryReader$ExitableFilterAtomicReader), (PyObject *) self, "getPointValues", args, 2);
        }

        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_getReaderCacheHelper(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getReaderCacheHelper());
            return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ExitableDirectoryReader$ExitableFilterAtomicReader), (PyObject *) self, "getReaderCacheHelper", args, 2);
        }

        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_getSortedDocValues(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ExitableDirectoryReader$ExitableFilterAtomicReader), (PyObject *) self, "getSortedDocValues", args, 2);
        }

        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_getSortedNumericDocValues(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ExitableDirectoryReader$ExitableFilterAtomicReader), (PyObject *) self, "getSortedNumericDocValues", args, 2);
        }

        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_getSortedSetDocValues(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ExitableDirectoryReader$ExitableFilterAtomicReader), (PyObject *) self, "getSortedSetDocValues", args, 2);
        }

        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_terms(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ExitableDirectoryReader$ExitableFilterAtomicReader), (PyObject *) self, "terms", args, 2);
        }
        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_get__parameters_(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_get__coreCacheHelper(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper value((jobject) NULL);
          OBJ_CALL(value = self->object.getCoreCacheHelper());
          return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(value);
        }

        static PyObject *t_ExitableDirectoryReader$ExitableFilterAtomicReader_get__readerCacheHelper(t_ExitableDirectoryReader$ExitableFilterAtomicReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper value((jobject) NULL);
          OBJ_CALL(value = self->object.getReaderCacheHelper());
          return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/LatLonBoundingBox.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *LatLonBoundingBox::class$ = NULL;
        jmethodID *LatLonBoundingBox::mids$ = NULL;
        bool LatLonBoundingBox::live$ = false;
        jint LatLonBoundingBox::BYTES = (jint) 0;

        jclass LatLonBoundingBox::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/LatLonBoundingBox");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_13c7f716d411d3a7] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;DDDD)V");
            mids$[mid_newContainsQuery_a7f4245a62724723] = env->getStaticMethodID(cls, "newContainsQuery", "(Ljava/lang/String;DDDD)Lorg/apache/lucene/search/Query;");
            mids$[mid_newCrossesQuery_a7f4245a62724723] = env->getStaticMethodID(cls, "newCrossesQuery", "(Ljava/lang/String;DDDD)Lorg/apache/lucene/search/Query;");
            mids$[mid_newIntersectsQuery_a7f4245a62724723] = env->getStaticMethodID(cls, "newIntersectsQuery", "(Ljava/lang/String;DDDD)Lorg/apache/lucene/search/Query;");
            mids$[mid_newWithinQuery_a7f4245a62724723] = env->getStaticMethodID(cls, "newWithinQuery", "(Ljava/lang/String;DDDD)Lorg/apache/lucene/search/Query;");
            mids$[mid_setRangeValues_98b1cec09263a48f] = env->getMethodID(cls, "setRangeValues", "(DDDD)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            BYTES = env->getStaticIntField(cls, "BYTES");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LatLonBoundingBox::LatLonBoundingBox(const ::java::lang::String & a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_13c7f716d411d3a7, a0.this$, a1, a2, a3, a4)) {}

        ::org::apache::lucene::search::Query LatLonBoundingBox::newContainsQuery(const ::java::lang::String & a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newContainsQuery_a7f4245a62724723], a0.this$, a1, a2, a3, a4));
        }

        ::org::apache::lucene::search::Query LatLonBoundingBox::newCrossesQuery(const ::java::lang::String & a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newCrossesQuery_a7f4245a62724723], a0.this$, a1, a2, a3, a4));
        }

        ::org::apache::lucene::search::Query LatLonBoundingBox::newIntersectsQuery(const ::java::lang::String & a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newIntersectsQuery_a7f4245a62724723], a0.this$, a1, a2, a3, a4));
        }

        ::org::apache::lucene::search::Query LatLonBoundingBox::newWithinQuery(const ::java::lang::String & a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newWithinQuery_a7f4245a62724723], a0.this$, a1, a2, a3, a4));
        }

        void LatLonBoundingBox::setRangeValues(jdouble a0, jdouble a1, jdouble a2, jdouble a3) const
        {
          env->callVoidMethod(this$, mids$[mid_setRangeValues_98b1cec09263a48f], a0, a1, a2, a3);
        }

        ::java::lang::String LatLonBoundingBox::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_LatLonBoundingBox_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LatLonBoundingBox_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LatLonBoundingBox_init_(t_LatLonBoundingBox *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LatLonBoundingBox_newContainsQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LatLonBoundingBox_newCrossesQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LatLonBoundingBox_newIntersectsQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LatLonBoundingBox_newWithinQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LatLonBoundingBox_setRangeValues(t_LatLonBoundingBox *self, PyObject *args);
        static PyObject *t_LatLonBoundingBox_toString(t_LatLonBoundingBox *self, PyObject *args);

        static PyMethodDef t_LatLonBoundingBox__methods_[] = {
          DECLARE_METHOD(t_LatLonBoundingBox, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LatLonBoundingBox, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LatLonBoundingBox, newContainsQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LatLonBoundingBox, newCrossesQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LatLonBoundingBox, newIntersectsQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LatLonBoundingBox, newWithinQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LatLonBoundingBox, setRangeValues, METH_VARARGS),
          DECLARE_METHOD(t_LatLonBoundingBox, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LatLonBoundingBox)[] = {
          { Py_tp_methods, t_LatLonBoundingBox__methods_ },
          { Py_tp_init, (void *) t_LatLonBoundingBox_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LatLonBoundingBox)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(LatLonBoundingBox, t_LatLonBoundingBox, LatLonBoundingBox);

        void t_LatLonBoundingBox::install(PyObject *module)
        {
          installType(&PY_TYPE(LatLonBoundingBox), &PY_TYPE_DEF(LatLonBoundingBox), module, "LatLonBoundingBox", 0);
        }

        void t_LatLonBoundingBox::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonBoundingBox), "class_", make_descriptor(LatLonBoundingBox::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonBoundingBox), "wrapfn_", make_descriptor(t_LatLonBoundingBox::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonBoundingBox), "boxfn_", make_descriptor(boxObject));
          env->getClass(LatLonBoundingBox::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonBoundingBox), "BYTES", make_descriptor(LatLonBoundingBox::BYTES));
        }

        static PyObject *t_LatLonBoundingBox_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LatLonBoundingBox::initializeClass, 1)))
            return NULL;
          return t_LatLonBoundingBox::wrap_Object(LatLonBoundingBox(((t_LatLonBoundingBox *) arg)->object.this$));
        }
        static PyObject *t_LatLonBoundingBox_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LatLonBoundingBox::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LatLonBoundingBox_init_(t_LatLonBoundingBox *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble a4;
          LatLonBoundingBox object((jobject) NULL);

          if (!parseArgs(args, "sDDDD", &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = LatLonBoundingBox(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LatLonBoundingBox_newContainsQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble a4;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sDDDD", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LatLonBoundingBox::newContainsQuery(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newContainsQuery", args);
          return NULL;
        }

        static PyObject *t_LatLonBoundingBox_newCrossesQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble a4;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sDDDD", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LatLonBoundingBox::newCrossesQuery(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newCrossesQuery", args);
          return NULL;
        }

        static PyObject *t_LatLonBoundingBox_newIntersectsQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble a4;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sDDDD", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LatLonBoundingBox::newIntersectsQuery(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newIntersectsQuery", args);
          return NULL;
        }

        static PyObject *t_LatLonBoundingBox_newWithinQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble a4;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sDDDD", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LatLonBoundingBox::newWithinQuery(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newWithinQuery", args);
          return NULL;
        }

        static PyObject *t_LatLonBoundingBox_setRangeValues(t_LatLonBoundingBox *self, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          jdouble a3;

          if (!parseArgs(args, "DDDD", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.setRangeValues(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRangeValues", args);
          return NULL;
        }

        static PyObject *t_LatLonBoundingBox_toString(t_LatLonBoundingBox *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(LatLonBoundingBox), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/bloom/DefaultBloomFilterFactory.h"
#include "org/apache/lucene/codecs/bloom/FuzzySet.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace bloom {

          ::java::lang::Class *DefaultBloomFilterFactory::class$ = NULL;
          jmethodID *DefaultBloomFilterFactory::mids$ = NULL;
          bool DefaultBloomFilterFactory::live$ = false;

          jclass DefaultBloomFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/bloom/DefaultBloomFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getSetForField_a88e25f1123572f0] = env->getMethodID(cls, "getSetForField", "(Lorg/apache/lucene/index/SegmentWriteState;Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/codecs/bloom/FuzzySet;");
              mids$[mid_isSaturated_ac34470664e5294b] = env->getMethodID(cls, "isSaturated", "(Lorg/apache/lucene/codecs/bloom/FuzzySet;Lorg/apache/lucene/index/FieldInfo;)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DefaultBloomFilterFactory::DefaultBloomFilterFactory() : ::org::apache::lucene::codecs::bloom::BloomFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::bloom::FuzzySet DefaultBloomFilterFactory::getSetForField(const ::org::apache::lucene::index::SegmentWriteState & a0, const ::org::apache::lucene::index::FieldInfo & a1) const
          {
            return ::org::apache::lucene::codecs::bloom::FuzzySet(env->callObjectMethod(this$, mids$[mid_getSetForField_a88e25f1123572f0], a0.this$, a1.this$));
          }

          jboolean DefaultBloomFilterFactory::isSaturated(const ::org::apache::lucene::codecs::bloom::FuzzySet & a0, const ::org::apache::lucene::index::FieldInfo & a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isSaturated_ac34470664e5294b], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace bloom {
          static PyObject *t_DefaultBloomFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DefaultBloomFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DefaultBloomFilterFactory_init_(t_DefaultBloomFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DefaultBloomFilterFactory_getSetForField(t_DefaultBloomFilterFactory *self, PyObject *args);
          static PyObject *t_DefaultBloomFilterFactory_isSaturated(t_DefaultBloomFilterFactory *self, PyObject *args);

          static PyMethodDef t_DefaultBloomFilterFactory__methods_[] = {
            DECLARE_METHOD(t_DefaultBloomFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultBloomFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultBloomFilterFactory, getSetForField, METH_VARARGS),
            DECLARE_METHOD(t_DefaultBloomFilterFactory, isSaturated, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DefaultBloomFilterFactory)[] = {
            { Py_tp_methods, t_DefaultBloomFilterFactory__methods_ },
            { Py_tp_init, (void *) t_DefaultBloomFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DefaultBloomFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::bloom::BloomFilterFactory),
            NULL
          };

          DEFINE_TYPE(DefaultBloomFilterFactory, t_DefaultBloomFilterFactory, DefaultBloomFilterFactory);

          void t_DefaultBloomFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(DefaultBloomFilterFactory), &PY_TYPE_DEF(DefaultBloomFilterFactory), module, "DefaultBloomFilterFactory", 0);
          }

          void t_DefaultBloomFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DefaultBloomFilterFactory), "class_", make_descriptor(DefaultBloomFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DefaultBloomFilterFactory), "wrapfn_", make_descriptor(t_DefaultBloomFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DefaultBloomFilterFactory), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DefaultBloomFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DefaultBloomFilterFactory::initializeClass, 1)))
              return NULL;
            return t_DefaultBloomFilterFactory::wrap_Object(DefaultBloomFilterFactory(((t_DefaultBloomFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_DefaultBloomFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DefaultBloomFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DefaultBloomFilterFactory_init_(t_DefaultBloomFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            DefaultBloomFilterFactory object((jobject) NULL);

            INT_CALL(object = DefaultBloomFilterFactory());
            self->object = object;

            return 0;
          }

          static PyObject *t_DefaultBloomFilterFactory_getSetForField(t_DefaultBloomFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfo a1((jobject) NULL);
            ::org::apache::lucene::codecs::bloom::FuzzySet result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentWriteState::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSetForField(a0, a1));
              return ::org::apache::lucene::codecs::bloom::t_FuzzySet::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DefaultBloomFilterFactory), (PyObject *) self, "getSetForField", args, 2);
          }

          static PyObject *t_DefaultBloomFilterFactory_isSaturated(t_DefaultBloomFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::bloom::FuzzySet a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfo a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::codecs::bloom::FuzzySet::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.isSaturated(a0, a1));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(DefaultBloomFilterFactory), (PyObject *) self, "isSaturated", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/TermBytes.h"
#include "org/apache/lucene/codecs/uniformsplit/TermBytes.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *TermBytes::class$ = NULL;
          jmethodID *TermBytes::mids$ = NULL;
          bool TermBytes::live$ = false;

          jclass TermBytes::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/TermBytes");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_2986347cf15d1696] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_computeMdpLength_f465493e4f3be174] = env->getStaticMethodID(cls, "computeMdpLength", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)I");
              mids$[mid_getMdpLength_9972fcc56b44e79d] = env->getMethodID(cls, "getMdpLength", "()I");
              mids$[mid_getSuffixLength_9972fcc56b44e79d] = env->getMethodID(cls, "getSuffixLength", "()I");
              mids$[mid_getSuffixOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getSuffixOffset", "()I");
              mids$[mid_getTerm_7af2ea2e37ce82b8] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_reset_660dba1961819202] = env->getMethodID(cls, "reset", "(ILorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/codecs/uniformsplit/TermBytes;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TermBytes::TermBytes(jint a0, const ::org::apache::lucene::util::BytesRef & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2986347cf15d1696, a0, a1.this$)) {}

          jint TermBytes::computeMdpLength(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_computeMdpLength_f465493e4f3be174], a0.this$, a1.this$);
          }

          jint TermBytes::getMdpLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMdpLength_9972fcc56b44e79d]);
          }

          jint TermBytes::getSuffixLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getSuffixLength_9972fcc56b44e79d]);
          }

          jint TermBytes::getSuffixOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getSuffixOffset_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::util::BytesRef TermBytes::getTerm() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getTerm_7af2ea2e37ce82b8]));
          }

          jlong TermBytes::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          TermBytes TermBytes::reset(jint a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return TermBytes(env->callObjectMethod(this$, mids$[mid_reset_660dba1961819202], a0, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_TermBytes_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermBytes_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TermBytes_init_(t_TermBytes *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TermBytes_computeMdpLength(PyTypeObject *type, PyObject *args);
          static PyObject *t_TermBytes_getMdpLength(t_TermBytes *self);
          static PyObject *t_TermBytes_getSuffixLength(t_TermBytes *self);
          static PyObject *t_TermBytes_getSuffixOffset(t_TermBytes *self);
          static PyObject *t_TermBytes_getTerm(t_TermBytes *self);
          static PyObject *t_TermBytes_ramBytesUsed(t_TermBytes *self);
          static PyObject *t_TermBytes_reset(t_TermBytes *self, PyObject *args);
          static PyObject *t_TermBytes_get__mdpLength(t_TermBytes *self, void *data);
          static PyObject *t_TermBytes_get__suffixLength(t_TermBytes *self, void *data);
          static PyObject *t_TermBytes_get__suffixOffset(t_TermBytes *self, void *data);
          static PyObject *t_TermBytes_get__term(t_TermBytes *self, void *data);
          static PyGetSetDef t_TermBytes__fields_[] = {
            DECLARE_GET_FIELD(t_TermBytes, mdpLength),
            DECLARE_GET_FIELD(t_TermBytes, suffixLength),
            DECLARE_GET_FIELD(t_TermBytes, suffixOffset),
            DECLARE_GET_FIELD(t_TermBytes, term),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TermBytes__methods_[] = {
            DECLARE_METHOD(t_TermBytes, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermBytes, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermBytes, computeMdpLength, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TermBytes, getMdpLength, METH_NOARGS),
            DECLARE_METHOD(t_TermBytes, getSuffixLength, METH_NOARGS),
            DECLARE_METHOD(t_TermBytes, getSuffixOffset, METH_NOARGS),
            DECLARE_METHOD(t_TermBytes, getTerm, METH_NOARGS),
            DECLARE_METHOD(t_TermBytes, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_TermBytes, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TermBytes)[] = {
            { Py_tp_methods, t_TermBytes__methods_ },
            { Py_tp_init, (void *) t_TermBytes_init_ },
            { Py_tp_getset, t_TermBytes__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TermBytes)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(TermBytes, t_TermBytes, TermBytes);

          void t_TermBytes::install(PyObject *module)
          {
            installType(&PY_TYPE(TermBytes), &PY_TYPE_DEF(TermBytes), module, "TermBytes", 0);
          }

          void t_TermBytes::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermBytes), "class_", make_descriptor(TermBytes::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermBytes), "wrapfn_", make_descriptor(t_TermBytes::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermBytes), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermBytes_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermBytes::initializeClass, 1)))
              return NULL;
            return t_TermBytes::wrap_Object(TermBytes(((t_TermBytes *) arg)->object.this$));
          }
          static PyObject *t_TermBytes_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermBytes::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TermBytes_init_(t_TermBytes *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            TermBytes object((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              INT_CALL(object = TermBytes(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TermBytes_computeMdpLength(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::uniformsplit::TermBytes::computeMdpLength(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "computeMdpLength", args);
            return NULL;
          }

          static PyObject *t_TermBytes_getMdpLength(t_TermBytes *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMdpLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_TermBytes_getSuffixLength(t_TermBytes *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSuffixLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_TermBytes_getSuffixOffset(t_TermBytes *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSuffixOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_TermBytes_getTerm(t_TermBytes *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getTerm());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_TermBytes_ramBytesUsed(t_TermBytes *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_TermBytes_reset(t_TermBytes *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            TermBytes result((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.reset(a0, a1));
              return t_TermBytes::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "reset", args);
            return NULL;
          }

          static PyObject *t_TermBytes_get__mdpLength(t_TermBytes *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMdpLength());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_TermBytes_get__suffixLength(t_TermBytes *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSuffixLength());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_TermBytes_get__suffixOffset(t_TermBytes *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSuffixOffset());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_TermBytes_get__term(t_TermBytes *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getTerm());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/Hyphenation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *Hyphenation::class$ = NULL;
            jmethodID *Hyphenation::mids$ = NULL;
            bool Hyphenation::live$ = false;

            jclass Hyphenation::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/Hyphenation");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getHyphenationPoints_d2c45ef07a322466] = env->getMethodID(cls, "getHyphenationPoints", "()[I");
                mids$[mid_length_9972fcc56b44e79d] = env->getMethodID(cls, "length", "()I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JArray< jint > Hyphenation::getHyphenationPoints() const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getHyphenationPoints_d2c45ef07a322466]));
            }

            jint Hyphenation::length() const
            {
              return env->callIntMethod(this$, mids$[mid_length_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_Hyphenation_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Hyphenation_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Hyphenation_getHyphenationPoints(t_Hyphenation *self);
            static PyObject *t_Hyphenation_length(t_Hyphenation *self);
            static PyObject *t_Hyphenation_get__hyphenationPoints(t_Hyphenation *self, void *data);
            static PyGetSetDef t_Hyphenation__fields_[] = {
              DECLARE_GET_FIELD(t_Hyphenation, hyphenationPoints),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Hyphenation__methods_[] = {
              DECLARE_METHOD(t_Hyphenation, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Hyphenation, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Hyphenation, getHyphenationPoints, METH_NOARGS),
              DECLARE_METHOD(t_Hyphenation, length, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(Hyphenation)[] = {
              { Py_tp_methods, t_Hyphenation__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_Hyphenation__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(Hyphenation)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(Hyphenation, t_Hyphenation, Hyphenation);

            void t_Hyphenation::install(PyObject *module)
            {
              installType(&PY_TYPE(Hyphenation), &PY_TYPE_DEF(Hyphenation), module, "Hyphenation", 0);
            }

            void t_Hyphenation::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(Hyphenation), "class_", make_descriptor(Hyphenation::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(Hyphenation), "wrapfn_", make_descriptor(t_Hyphenation::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(Hyphenation), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Hyphenation_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Hyphenation::initializeClass, 1)))
                return NULL;
              return t_Hyphenation::wrap_Object(Hyphenation(((t_Hyphenation *) arg)->object.this$));
            }
            static PyObject *t_Hyphenation_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Hyphenation::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_Hyphenation_getHyphenationPoints(t_Hyphenation *self)
            {
              JArray< jint > result((jobject) NULL);
              OBJ_CALL(result = self->object.getHyphenationPoints());
              return result.wrap();
            }

            static PyObject *t_Hyphenation_length(t_Hyphenation *self)
            {
              jint result;
              OBJ_CALL(result = self->object.length());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_Hyphenation_get__hyphenationPoints(t_Hyphenation *self, void *data)
            {
              JArray< jint > value((jobject) NULL);
              OBJ_CALL(value = self->object.getHyphenationPoints());
              return value.wrap();
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonIterator.h"
#include "java/util/Iterator.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonIterator::class$ = NULL;
        jmethodID *PythonIterator::mids$ = NULL;
        bool PythonIterator::live$ = false;

        jclass PythonIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_hasNext_8454bd5aa23fd11e] = env->getMethodID(cls, "hasNext", "()Z");
            mids$[mid_next_d6bcd06f3102c4d9] = env->getMethodID(cls, "next", "()Ljava/lang/Object;");
            mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_remove_f2cc1bce94666404] = env->getMethodID(cls, "remove", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIterator::PythonIterator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void PythonIterator::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
        }

        jlong PythonIterator::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
        }

        void PythonIterator::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
        }

        void PythonIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIterator_init_(t_PythonIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIterator_finalize(t_PythonIterator *self);
        static PyObject *t_PythonIterator_pythonExtension(t_PythonIterator *self, PyObject *args);
        static PyObject *t_PythonIterator_remove(t_PythonIterator *self);
        static jboolean JNICALL t_PythonIterator_hasNext0(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonIterator_next1(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIterator_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonIterator_get__self(t_PythonIterator *self, void *data);
        static PyGetSetDef t_PythonIterator__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIterator, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIterator__methods_[] = {
          DECLARE_METHOD(t_PythonIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIterator, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIterator, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonIterator, remove, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PythonIterator)[] = {
          { Py_tp_methods, t_PythonIterator__methods_ },
          { Py_tp_init, (void *) t_PythonIterator_init_ },
          { Py_tp_getset, t_PythonIterator__fields_ },
          { Py_tp_iter, (void *) PyObject_SelfIter },
          { Py_tp_iternext, (void *) get_extension_next },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PythonIterator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PythonIterator, t_PythonIterator, PythonIterator);

        void t_PythonIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIterator), &PY_TYPE_DEF(PythonIterator), module, "PythonIterator", 1);
        }

        void t_PythonIterator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonIterator), "class_", make_descriptor(PythonIterator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonIterator), "wrapfn_", make_descriptor(t_PythonIterator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonIterator), "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIterator::initializeClass);
          JNINativeMethod methods[] = {
            { "hasNext", "()Z", (void *) t_PythonIterator_hasNext0 },
            { "next", "()Ljava/lang/Object;", (void *) t_PythonIterator_next1 },
            { "pythonDecRef", "()V", (void *) t_PythonIterator_pythonDecRef2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIterator::initializeClass, 1)))
            return NULL;
          return t_PythonIterator::wrap_Object(PythonIterator(((t_PythonIterator *) arg)->object.this$));
        }
        static PyObject *t_PythonIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIterator_init_(t_PythonIterator *self, PyObject *args, PyObject *kwds)
        {
          PythonIterator object((jobject) NULL);

          INT_CALL(object = PythonIterator());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIterator_finalize(t_PythonIterator *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIterator_pythonExtension(t_PythonIterator *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonIterator_remove(t_PythonIterator *self)
        {
          OBJ_CALL(self->object.remove());
          Py_RETURN_NONE;
        }

        static jboolean JNICALL t_PythonIterator_hasNext0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIterator::mids$[PythonIterator::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "hasNext", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("hasNext", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonIterator_next1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIterator::mids$[PythonIterator::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::lang::Object value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "next", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "o", &value))
          {
            throwTypeError("next", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonIterator_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIterator::mids$[PythonIterator::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIterator::mids$[PythonIterator::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonIterator_get__self(t_PythonIterator *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilterCollector.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/LeafCollector.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Collector.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilterCollector::class$ = NULL;
        jmethodID *FilterCollector::mids$ = NULL;
        bool FilterCollector::live$ = false;

        jclass FilterCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilterCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a816cd51c84fa652] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_getLeafCollector_d5dbc8c30b21e920] = env->getMethodID(cls, "getLeafCollector", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/LeafCollector;");
            mids$[mid_scoreMode_8a35254b82ee8276] = env->getMethodID(cls, "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterCollector::FilterCollector(const ::org::apache::lucene::search::Collector & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a816cd51c84fa652, a0.this$)) {}

        ::org::apache::lucene::search::LeafCollector FilterCollector::getLeafCollector(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::search::LeafCollector(env->callObjectMethod(this$, mids$[mid_getLeafCollector_d5dbc8c30b21e920], a0.this$));
        }

        ::org::apache::lucene::search::ScoreMode FilterCollector::scoreMode() const
        {
          return ::org::apache::lucene::search::ScoreMode(env->callObjectMethod(this$, mids$[mid_scoreMode_8a35254b82ee8276]));
        }

        ::java::lang::String FilterCollector::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilterCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterCollector_init_(t_FilterCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterCollector_getLeafCollector(t_FilterCollector *self, PyObject *arg);
        static PyObject *t_FilterCollector_scoreMode(t_FilterCollector *self);
        static PyObject *t_FilterCollector_toString(t_FilterCollector *self, PyObject *args);

        static PyMethodDef t_FilterCollector__methods_[] = {
          DECLARE_METHOD(t_FilterCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterCollector, getLeafCollector, METH_O),
          DECLARE_METHOD(t_FilterCollector, scoreMode, METH_NOARGS),
          DECLARE_METHOD(t_FilterCollector, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterCollector)[] = {
          { Py_tp_methods, t_FilterCollector__methods_ },
          { Py_tp_init, (void *) t_FilterCollector_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterCollector)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FilterCollector, t_FilterCollector, FilterCollector);

        void t_FilterCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterCollector), &PY_TYPE_DEF(FilterCollector), module, "FilterCollector", 0);
        }

        void t_FilterCollector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterCollector), "class_", make_descriptor(FilterCollector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterCollector), "wrapfn_", make_descriptor(t_FilterCollector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterCollector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterCollector::initializeClass, 1)))
            return NULL;
          return t_FilterCollector::wrap_Object(FilterCollector(((t_FilterCollector *) arg)->object.this$));
        }
        static PyObject *t_FilterCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterCollector_init_(t_FilterCollector *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Collector a0((jobject) NULL);
          FilterCollector object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
          {
            INT_CALL(object = FilterCollector(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterCollector_getLeafCollector(t_FilterCollector *self, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::LeafCollector result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getLeafCollector(a0));
            return ::org::apache::lucene::search::t_LeafCollector::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getLeafCollector", arg);
          return NULL;
        }

        static PyObject *t_FilterCollector_scoreMode(t_FilterCollector *self)
        {
          ::org::apache::lucene::search::ScoreMode result((jobject) NULL);
          OBJ_CALL(result = self->object.scoreMode());
          return ::org::apache::lucene::search::t_ScoreMode::wrap_Object(result);
        }

        static PyObject *t_FilterCollector_toString(t_FilterCollector *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(FilterCollector), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekStemFilterFactory::class$ = NULL;
          jmethodID *GreekStemFilterFactory::mids$ = NULL;
          bool GreekStemFilterFactory::live$ = false;
          ::java::lang::String *GreekStemFilterFactory::NAME = NULL;

          jclass GreekStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekStemFilterFactory::GreekStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GreekStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekStemFilterFactory_init_(t_GreekStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekStemFilterFactory_create(t_GreekStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GreekStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GreekStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GreekStemFilterFactory)[] = {
            { Py_tp_methods, t_GreekStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_GreekStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GreekStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(GreekStemFilterFactory, t_GreekStemFilterFactory, GreekStemFilterFactory);

          void t_GreekStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekStemFilterFactory), &PY_TYPE_DEF(GreekStemFilterFactory), module, "GreekStemFilterFactory", 0);
          }

          void t_GreekStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GreekStemFilterFactory), "class_", make_descriptor(GreekStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GreekStemFilterFactory), "wrapfn_", make_descriptor(t_GreekStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GreekStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(GreekStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(GreekStemFilterFactory), "NAME", make_descriptor(j2p(*GreekStemFilterFactory::NAME)));
          }

          static PyObject *t_GreekStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GreekStemFilterFactory::wrap_Object(GreekStemFilterFactory(((t_GreekStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GreekStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekStemFilterFactory_init_(t_GreekStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GreekStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GreekStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekStemFilterFactory_create(t_GreekStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(GreekStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocValuesStats$LongDocValuesStats.h"
#include "java/lang/Long.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocValuesStats$LongDocValuesStats::class$ = NULL;
        jmethodID *DocValuesStats$LongDocValuesStats::mids$ = NULL;
        bool DocValuesStats$LongDocValuesStats::live$ = false;

        jclass DocValuesStats$LongDocValuesStats::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocValuesStats$LongDocValuesStats");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_sum_24165e10e82b50a8] = env->getMethodID(cls, "sum", "()Ljava/lang/Long;");
            mids$[mid_doAccumulate_040c4cd0390c5aff] = env->getMethodID(cls, "doAccumulate", "(I)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocValuesStats$LongDocValuesStats::DocValuesStats$LongDocValuesStats(const ::java::lang::String & a0) : ::org::apache::lucene::search::DocValuesStats$NumericDocValuesStats(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

        ::java::lang::Long DocValuesStats$LongDocValuesStats::sum() const
        {
          return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_sum_24165e10e82b50a8]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocValuesStats$LongDocValuesStats_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesStats$LongDocValuesStats_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesStats$LongDocValuesStats_of_(t_DocValuesStats$LongDocValuesStats *self, PyObject *args);
        static int t_DocValuesStats$LongDocValuesStats_init_(t_DocValuesStats$LongDocValuesStats *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocValuesStats$LongDocValuesStats_sum(t_DocValuesStats$LongDocValuesStats *self, PyObject *args);
        static PyObject *t_DocValuesStats$LongDocValuesStats_get__parameters_(t_DocValuesStats$LongDocValuesStats *self, void *data);
        static PyGetSetDef t_DocValuesStats$LongDocValuesStats__fields_[] = {
          DECLARE_GET_FIELD(t_DocValuesStats$LongDocValuesStats, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocValuesStats$LongDocValuesStats__methods_[] = {
          DECLARE_METHOD(t_DocValuesStats$LongDocValuesStats, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesStats$LongDocValuesStats, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesStats$LongDocValuesStats, of_, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesStats$LongDocValuesStats, sum, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocValuesStats$LongDocValuesStats)[] = {
          { Py_tp_methods, t_DocValuesStats$LongDocValuesStats__methods_ },
          { Py_tp_init, (void *) t_DocValuesStats$LongDocValuesStats_init_ },
          { Py_tp_getset, t_DocValuesStats$LongDocValuesStats__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocValuesStats$LongDocValuesStats)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::DocValuesStats$NumericDocValuesStats),
          NULL
        };

        DEFINE_TYPE(DocValuesStats$LongDocValuesStats, t_DocValuesStats$LongDocValuesStats, DocValuesStats$LongDocValuesStats);
        PyObject *t_DocValuesStats$LongDocValuesStats::wrap_Object(const DocValuesStats$LongDocValuesStats& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocValuesStats$LongDocValuesStats::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocValuesStats$LongDocValuesStats *self = (t_DocValuesStats$LongDocValuesStats *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DocValuesStats$LongDocValuesStats::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocValuesStats$LongDocValuesStats::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocValuesStats$LongDocValuesStats *self = (t_DocValuesStats$LongDocValuesStats *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DocValuesStats$LongDocValuesStats::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesStats$LongDocValuesStats), &PY_TYPE_DEF(DocValuesStats$LongDocValuesStats), module, "DocValuesStats$LongDocValuesStats", 0);
        }

        void t_DocValuesStats$LongDocValuesStats::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$LongDocValuesStats), "class_", make_descriptor(DocValuesStats$LongDocValuesStats::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$LongDocValuesStats), "wrapfn_", make_descriptor(t_DocValuesStats$LongDocValuesStats::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$LongDocValuesStats), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesStats$LongDocValuesStats_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesStats$LongDocValuesStats::initializeClass, 1)))
            return NULL;
          return t_DocValuesStats$LongDocValuesStats::wrap_Object(DocValuesStats$LongDocValuesStats(((t_DocValuesStats$LongDocValuesStats *) arg)->object.this$));
        }
        static PyObject *t_DocValuesStats$LongDocValuesStats_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesStats$LongDocValuesStats::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesStats$LongDocValuesStats_of_(t_DocValuesStats$LongDocValuesStats *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_DocValuesStats$LongDocValuesStats_init_(t_DocValuesStats$LongDocValuesStats *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          DocValuesStats$LongDocValuesStats object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = DocValuesStats$LongDocValuesStats(a0));
            self->object = object;
            self->parameters[0] = ::java::lang::PY_TYPE(Long);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocValuesStats$LongDocValuesStats_sum(t_DocValuesStats$LongDocValuesStats *self, PyObject *args)
        {
          ::java::lang::Long result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.sum());
            return ::java::lang::t_Long::wrap_Object(result);
          }

          return callSuper(PY_TYPE(DocValuesStats$LongDocValuesStats), (PyObject *) self, "sum", args, 2);
        }
        static PyObject *t_DocValuesStats$LongDocValuesStats_get__parameters_(t_DocValuesStats$LongDocValuesStats *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/LongRangeFacetCounts.h"
#include "org/apache/lucene/search/LongValuesSource.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/range/LongRange.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *LongRangeFacetCounts::class$ = NULL;
          jmethodID *LongRangeFacetCounts::mids$ = NULL;
          bool LongRangeFacetCounts::live$ = false;

          jclass LongRangeFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/LongRangeFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_17d8b328d0ec2e0a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/range/LongRange;)V");
              mids$[mid_init$_e7c48c13316c0392] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/LongValuesSource;Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/range/LongRange;)V");
              mids$[mid_init$_150f269fd443fe68] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/LongValuesSource;Lorg/apache/lucene/facet/FacetsCollector;Lorg/apache/lucene/search/Query;[Lorg/apache/lucene/facet/range/LongRange;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LongRangeFacetCounts::LongRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::facet::FacetsCollector & a1, const JArray< ::org::apache::lucene::facet::range::LongRange > & a2) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_17d8b328d0ec2e0a, a0.this$, a1.this$, a2.this$)) {}

          LongRangeFacetCounts::LongRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::search::LongValuesSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const JArray< ::org::apache::lucene::facet::range::LongRange > & a3) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_e7c48c13316c0392, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          LongRangeFacetCounts::LongRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::search::LongValuesSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const ::org::apache::lucene::search::Query & a3, const JArray< ::org::apache::lucene::facet::range::LongRange > & a4) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_150f269fd443fe68, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_LongRangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongRangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LongRangeFacetCounts_init_(t_LongRangeFacetCounts *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_LongRangeFacetCounts__methods_[] = {
            DECLARE_METHOD(t_LongRangeFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRangeFacetCounts, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LongRangeFacetCounts)[] = {
            { Py_tp_methods, t_LongRangeFacetCounts__methods_ },
            { Py_tp_init, (void *) t_LongRangeFacetCounts_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LongRangeFacetCounts)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::facet::range::RangeFacetCounts),
            NULL
          };

          DEFINE_TYPE(LongRangeFacetCounts, t_LongRangeFacetCounts, LongRangeFacetCounts);

          void t_LongRangeFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(LongRangeFacetCounts), &PY_TYPE_DEF(LongRangeFacetCounts), module, "LongRangeFacetCounts", 0);
          }

          void t_LongRangeFacetCounts::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongRangeFacetCounts), "class_", make_descriptor(LongRangeFacetCounts::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongRangeFacetCounts), "wrapfn_", make_descriptor(t_LongRangeFacetCounts::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongRangeFacetCounts), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LongRangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LongRangeFacetCounts::initializeClass, 1)))
              return NULL;
            return t_LongRangeFacetCounts::wrap_Object(LongRangeFacetCounts(((t_LongRangeFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_LongRangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LongRangeFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LongRangeFacetCounts_init_(t_LongRangeFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a1((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::LongRange > a2((jobject) NULL);
                LongRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "sk[k", ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::facet::range::LongRange::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LongRangeFacetCounts(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::LongValuesSource a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::LongRange > a3((jobject) NULL);
                LongRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skk[k", ::org::apache::lucene::search::LongValuesSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::facet::range::LongRange::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = LongRangeFacetCounts(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::LongValuesSource a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                ::org::apache::lucene::search::Query a3((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::LongRange > a4((jobject) NULL);
                LongRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skkk[k", ::org::apache::lucene::search::LongValuesSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::facet::range::LongRange::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = LongRangeFacetCounts(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *DisjunctionMaxQueryBuilder::class$ = NULL;
            jmethodID *DisjunctionMaxQueryBuilder::mids$ = NULL;
            bool DisjunctionMaxQueryBuilder::live$ = false;

            jclass DisjunctionMaxQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_66be9e8c52a02d3e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DisjunctionMaxQueryBuilder::DisjunctionMaxQueryBuilder(const ::org::apache::lucene::queryparser::xml::QueryBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_66be9e8c52a02d3e, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_DisjunctionMaxQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DisjunctionMaxQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DisjunctionMaxQueryBuilder_init_(t_DisjunctionMaxQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_DisjunctionMaxQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_DisjunctionMaxQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DisjunctionMaxQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(DisjunctionMaxQueryBuilder)[] = {
              { Py_tp_methods, t_DisjunctionMaxQueryBuilder__methods_ },
              { Py_tp_init, (void *) t_DisjunctionMaxQueryBuilder_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(DisjunctionMaxQueryBuilder)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(DisjunctionMaxQueryBuilder, t_DisjunctionMaxQueryBuilder, DisjunctionMaxQueryBuilder);

            void t_DisjunctionMaxQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(DisjunctionMaxQueryBuilder), &PY_TYPE_DEF(DisjunctionMaxQueryBuilder), module, "DisjunctionMaxQueryBuilder", 0);
            }

            void t_DisjunctionMaxQueryBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(DisjunctionMaxQueryBuilder), "class_", make_descriptor(DisjunctionMaxQueryBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DisjunctionMaxQueryBuilder), "wrapfn_", make_descriptor(t_DisjunctionMaxQueryBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DisjunctionMaxQueryBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DisjunctionMaxQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DisjunctionMaxQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_DisjunctionMaxQueryBuilder::wrap_Object(DisjunctionMaxQueryBuilder(((t_DisjunctionMaxQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_DisjunctionMaxQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DisjunctionMaxQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DisjunctionMaxQueryBuilder_init_(t_DisjunctionMaxQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::QueryBuilder a0((jobject) NULL);
              DisjunctionMaxQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = DisjunctionMaxQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/CompoundFormat.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/codecs/CompoundDirectory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *CompoundFormat::class$ = NULL;
        jmethodID *CompoundFormat::mids$ = NULL;
        bool CompoundFormat::live$ = false;

        jclass CompoundFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/CompoundFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getCompoundReader_8e5fdfa35a2f9c39] = env->getMethodID(cls, "getCompoundReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/CompoundDirectory;");
            mids$[mid_write_42bd8d9f441f9252] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CompoundFormat::CompoundFormat() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::codecs::CompoundDirectory CompoundFormat::getCompoundReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::codecs::CompoundDirectory(env->callObjectMethod(this$, mids$[mid_getCompoundReader_8e5fdfa35a2f9c39], a0.this$, a1.this$, a2.this$));
        }

        void CompoundFormat::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_write_42bd8d9f441f9252], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_CompoundFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompoundFormat_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CompoundFormat_init_(t_CompoundFormat *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CompoundFormat_getCompoundReader(t_CompoundFormat *self, PyObject *args);
        static PyObject *t_CompoundFormat_write(t_CompoundFormat *self, PyObject *args);

        static PyMethodDef t_CompoundFormat__methods_[] = {
          DECLARE_METHOD(t_CompoundFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompoundFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompoundFormat, getCompoundReader, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFormat, write, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CompoundFormat)[] = {
          { Py_tp_methods, t_CompoundFormat__methods_ },
          { Py_tp_init, (void *) t_CompoundFormat_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CompoundFormat)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CompoundFormat, t_CompoundFormat, CompoundFormat);

        void t_CompoundFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(CompoundFormat), &PY_TYPE_DEF(CompoundFormat), module, "CompoundFormat", 0);
        }

        void t_CompoundFormat::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CompoundFormat), "class_", make_descriptor(CompoundFormat::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CompoundFormat), "wrapfn_", make_descriptor(t_CompoundFormat::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CompoundFormat), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompoundFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompoundFormat::initializeClass, 1)))
            return NULL;
          return t_CompoundFormat::wrap_Object(CompoundFormat(((t_CompoundFormat *) arg)->object.this$));
        }
        static PyObject *t_CompoundFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompoundFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CompoundFormat_init_(t_CompoundFormat *self, PyObject *args, PyObject *kwds)
        {
          CompoundFormat object((jobject) NULL);

          INT_CALL(object = CompoundFormat());
          self->object = object;

          return 0;
        }

        static PyObject *t_CompoundFormat_getCompoundReader(t_CompoundFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::codecs::CompoundDirectory result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.getCompoundReader(a0, a1, a2));
            return ::org::apache::lucene::codecs::t_CompoundDirectory::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getCompoundReader", args);
          return NULL;
        }

        static PyObject *t_CompoundFormat_write(t_CompoundFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "write", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Reduce.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Reduce::class$ = NULL;
      jmethodID *Reduce::mids$ = NULL;
      bool Reduce::live$ = false;

      jclass Reduce::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Reduce");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_optimize_76214b7d9a62d571] = env->getMethodID(cls, "optimize", "(Lorg/egothor/stemmer/Trie;)Lorg/egothor/stemmer/Trie;");

          class$ = new ::java::lang::Class(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Reduce::Reduce() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

      ::org::egothor::stemmer::Trie Reduce::optimize(const ::org::egothor::stemmer::Trie & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_optimize_76214b7d9a62d571], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Reduce_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Reduce_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Reduce_init_(t_Reduce *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Reduce_optimize(t_Reduce *self, PyObject *arg);

      static PyMethodDef t_Reduce__methods_[] = {
        DECLARE_METHOD(t_Reduce, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Reduce, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Reduce, optimize, METH_O),
        { NULL, NULL, 0, NULL }
      };

      static PyType_Slot PY_TYPE_SLOTS(Reduce)[] = {
        { Py_tp_methods, t_Reduce__methods_ },
        { Py_tp_init, (void *) t_Reduce_init_ },
        { 0, NULL }
      };

      static PyType_Def *PY_TYPE_BASES(Reduce)[] = {
        &PY_TYPE_DEF(::java::lang::Object),
        NULL
      };

      DEFINE_TYPE(Reduce, t_Reduce, Reduce);

      void t_Reduce::install(PyObject *module)
      {
        installType(&PY_TYPE(Reduce), &PY_TYPE_DEF(Reduce), module, "Reduce", 0);
      }

      void t_Reduce::initialize(PyObject *module)
      {
        PyObject_SetAttrString((PyObject *) PY_TYPE(Reduce), "class_", make_descriptor(Reduce::initializeClass, 1));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Reduce), "wrapfn_", make_descriptor(t_Reduce::wrap_jobject));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Reduce), "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Reduce_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Reduce::initializeClass, 1)))
          return NULL;
        return t_Reduce::wrap_Object(Reduce(((t_Reduce *) arg)->object.this$));
      }
      static PyObject *t_Reduce_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Reduce::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Reduce_init_(t_Reduce *self, PyObject *args, PyObject *kwds)
      {
        Reduce object((jobject) NULL);

        INT_CALL(object = Reduce());
        self->object = object;

        return 0;
      }

      static PyObject *t_Reduce_optimize(t_Reduce *self, PyObject *arg)
      {
        ::org::egothor::stemmer::Trie a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArg(arg, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.optimize(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "optimize", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/index/IndexWriter$IndexReaderWarmer.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "java/io/PrintStream.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexWriterConfig::class$ = NULL;
        jmethodID *IndexWriterConfig::mids$ = NULL;
        bool IndexWriterConfig::live$ = false;
        jboolean IndexWriterConfig::DEFAULT_COMMIT_ON_CLOSE = (jboolean) 0;
        jint IndexWriterConfig::DEFAULT_MAX_BUFFERED_DELETE_TERMS = (jint) 0;
        jint IndexWriterConfig::DEFAULT_MAX_BUFFERED_DOCS = (jint) 0;
        jlong IndexWriterConfig::DEFAULT_MAX_FULL_FLUSH_MERGE_WAIT_MILLIS = (jlong) 0;
        jdouble IndexWriterConfig::DEFAULT_RAM_BUFFER_SIZE_MB = (jdouble) 0;
        jint IndexWriterConfig::DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB = (jint) 0;
        jboolean IndexWriterConfig::DEFAULT_READER_POOLING = (jboolean) 0;
        jboolean IndexWriterConfig::DEFAULT_USE_COMPOUND_FILE_SYSTEM = (jboolean) 0;
        jint IndexWriterConfig::DISABLE_AUTO_FLUSH = (jint) 0;

        jclass IndexWriterConfig::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexWriterConfig");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_651b708fb3f85e6e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_getAnalyzer_75a99b097bd64493] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_getCodec_a302ebac25c26553] = env->getMethodID(cls, "getCodec", "()Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getIndexCommit_4abaa8d830d8ecf1] = env->getMethodID(cls, "getIndexCommit", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getIndexDeletionPolicy_625a1301ba76cda9] = env->getMethodID(cls, "getIndexDeletionPolicy", "()Lorg/apache/lucene/index/IndexDeletionPolicy;");
            mids$[mid_getInfoStream_05a6766ae71db614] = env->getMethodID(cls, "getInfoStream", "()Lorg/apache/lucene/util/InfoStream;");
            mids$[mid_getMaxBufferedDocs_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxBufferedDocs", "()I");
            mids$[mid_getMergePolicy_7169dd5a863dd2a6] = env->getMethodID(cls, "getMergePolicy", "()Lorg/apache/lucene/index/MergePolicy;");
            mids$[mid_getMergeScheduler_5b8711e0a4a13251] = env->getMethodID(cls, "getMergeScheduler", "()Lorg/apache/lucene/index/MergeScheduler;");
            mids$[mid_getMergedSegmentWarmer_ec20118a8af94b4b] = env->getMethodID(cls, "getMergedSegmentWarmer", "()Lorg/apache/lucene/index/IndexWriter$IndexReaderWarmer;");
            mids$[mid_getOpenMode_0d3fdc98e044bb89] = env->getMethodID(cls, "getOpenMode", "()Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;");
            mids$[mid_getRAMBufferSizeMB_8c74b787998ce4bc] = env->getMethodID(cls, "getRAMBufferSizeMB", "()D");
            mids$[mid_getRAMPerThreadHardLimitMB_9972fcc56b44e79d] = env->getMethodID(cls, "getRAMPerThreadHardLimitMB", "()I");
            mids$[mid_getReaderPooling_8454bd5aa23fd11e] = env->getMethodID(cls, "getReaderPooling", "()Z");
            mids$[mid_getSimilarity_35e3c46e8ea97897] = env->getMethodID(cls, "getSimilarity", "()Lorg/apache/lucene/search/similarities/Similarity;");
            mids$[mid_setCheckPendingFlushUpdate_55d6c68515c37ca7] = env->getMethodID(cls, "setCheckPendingFlushUpdate", "(Z)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setCodec_aa06151733ac6d4e] = env->getMethodID(cls, "setCodec", "(Lorg/apache/lucene/codecs/Codec;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setCommitOnClose_55d6c68515c37ca7] = env->getMethodID(cls, "setCommitOnClose", "(Z)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setIndexCommit_d4c7f2d1a5e5016a] = env->getMethodID(cls, "setIndexCommit", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setIndexCreatedVersionMajor_455e03c7ac3ddc31] = env->getMethodID(cls, "setIndexCreatedVersionMajor", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setIndexDeletionPolicy_bf4e8d3b27097e1f] = env->getMethodID(cls, "setIndexDeletionPolicy", "(Lorg/apache/lucene/index/IndexDeletionPolicy;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setIndexSort_76d1bdfb5c8d88b2] = env->getMethodID(cls, "setIndexSort", "(Lorg/apache/lucene/search/Sort;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setInfoStream_2249a75331ac1f9d] = env->getMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setInfoStream_9df3cc2305ecb5d7] = env->getMethodID(cls, "setInfoStream", "(Lorg/apache/lucene/util/InfoStream;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setLeafSorter_db9ebbed99bd96b8] = env->getMethodID(cls, "setLeafSorter", "(Ljava/util/Comparator;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMaxBufferedDocs_455e03c7ac3ddc31] = env->getMethodID(cls, "setMaxBufferedDocs", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMaxFullFlushMergeWaitMillis_155c70cec97a15bb] = env->getMethodID(cls, "setMaxFullFlushMergeWaitMillis", "(J)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMergePolicy_afc3d0981a5cd312] = env->getMethodID(cls, "setMergePolicy", "(Lorg/apache/lucene/index/MergePolicy;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMergeScheduler_a8b9afbea5f71956] = env->getMethodID(cls, "setMergeScheduler", "(Lorg/apache/lucene/index/MergeScheduler;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMergedSegmentWarmer_3470a9710b4c0809] = env->getMethodID(cls, "setMergedSegmentWarmer", "(Lorg/apache/lucene/index/IndexWriter$IndexReaderWarmer;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setOpenMode_85208b7651de5894] = env->getMethodID(cls, "setOpenMode", "(Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setRAMBufferSizeMB_57e2dae80821a612] = env->getMethodID(cls, "setRAMBufferSizeMB", "(D)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setRAMPerThreadHardLimitMB_455e03c7ac3ddc31] = env->getMethodID(cls, "setRAMPerThreadHardLimitMB", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setReaderPooling_55d6c68515c37ca7] = env->getMethodID(cls, "setReaderPooling", "(Z)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setSimilarity_7ddbb4c0fd2c4ced] = env->getMethodID(cls, "setSimilarity", "(Lorg/apache/lucene/search/similarities/Similarity;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setSoftDeletesField_c2c6f18454676a3a] = env->getMethodID(cls, "setSoftDeletesField", "(Ljava/lang/String;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setUseCompoundFile_55d6c68515c37ca7] = env->getMethodID(cls, "setUseCompoundFile", "(Z)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DEFAULT_COMMIT_ON_CLOSE = env->getStaticBooleanField(cls, "DEFAULT_COMMIT_ON_CLOSE");
            DEFAULT_MAX_BUFFERED_DELETE_TERMS = env->getStaticIntField(cls, "DEFAULT_MAX_BUFFERED_DELETE_TERMS");
            DEFAULT_MAX_BUFFERED_DOCS = env->getStaticIntField(cls, "DEFAULT_MAX_BUFFERED_DOCS");
            DEFAULT_MAX_FULL_FLUSH_MERGE_WAIT_MILLIS = env->getStaticLongField(cls, "DEFAULT_MAX_FULL_FLUSH_MERGE_WAIT_MILLIS");
            DEFAULT_RAM_BUFFER_SIZE_MB = env->getStaticDoubleField(cls, "DEFAULT_RAM_BUFFER_SIZE_MB");
            DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB = env->getStaticIntField(cls, "DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB");
            DEFAULT_READER_POOLING = env->getStaticBooleanField(cls, "DEFAULT_READER_POOLING");
            DEFAULT_USE_COMPOUND_FILE_SYSTEM = env->getStaticBooleanField(cls, "DEFAULT_USE_COMPOUND_FILE_SYSTEM");
            DISABLE_AUTO_FLUSH = env->getStaticIntField(cls, "DISABLE_AUTO_FLUSH");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexWriterConfig::IndexWriterConfig() : ::org::apache::lucene::index::LiveIndexWriterConfig(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        IndexWriterConfig::IndexWriterConfig(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::index::LiveIndexWriterConfig(env->newObject(initializeClass, &mids$, mid_init$_651b708fb3f85e6e, a0.this$)) {}

        ::org::apache::lucene::analysis::Analyzer IndexWriterConfig::getAnalyzer() const
        {
          return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_75a99b097bd64493]));
        }

        ::org::apache::lucene::codecs::Codec IndexWriterConfig::getCodec() const
        {
          return ::org::apache::lucene::codecs::Codec(env->callObjectMethod(this$, mids$[mid_getCodec_a302ebac25c26553]));
        }

        ::org::apache::lucene::index::IndexCommit IndexWriterConfig::getIndexCommit() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_4abaa8d830d8ecf1]));
        }

        ::org::apache::lucene::index::IndexDeletionPolicy IndexWriterConfig::getIndexDeletionPolicy() const
        {
          return ::org::apache::lucene::index::IndexDeletionPolicy(env->callObjectMethod(this$, mids$[mid_getIndexDeletionPolicy_625a1301ba76cda9]));
        }

        ::org::apache::lucene::util::InfoStream IndexWriterConfig::getInfoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->callObjectMethod(this$, mids$[mid_getInfoStream_05a6766ae71db614]));
        }

        jint IndexWriterConfig::getMaxBufferedDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxBufferedDocs_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::MergePolicy IndexWriterConfig::getMergePolicy() const
        {
          return ::org::apache::lucene::index::MergePolicy(env->callObjectMethod(this$, mids$[mid_getMergePolicy_7169dd5a863dd2a6]));
        }

        ::org::apache::lucene::index::MergeScheduler IndexWriterConfig::getMergeScheduler() const
        {
          return ::org::apache::lucene::index::MergeScheduler(env->callObjectMethod(this$, mids$[mid_getMergeScheduler_5b8711e0a4a13251]));
        }

        ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer IndexWriterConfig::getMergedSegmentWarmer() const
        {
          return ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer(env->callObjectMethod(this$, mids$[mid_getMergedSegmentWarmer_ec20118a8af94b4b]));
        }

        ::org::apache::lucene::index::IndexWriterConfig$OpenMode IndexWriterConfig::getOpenMode() const
        {
          return ::org::apache::lucene::index::IndexWriterConfig$OpenMode(env->callObjectMethod(this$, mids$[mid_getOpenMode_0d3fdc98e044bb89]));
        }

        jdouble IndexWriterConfig::getRAMBufferSizeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getRAMBufferSizeMB_8c74b787998ce4bc]);
        }

        jint IndexWriterConfig::getRAMPerThreadHardLimitMB() const
        {
          return env->callIntMethod(this$, mids$[mid_getRAMPerThreadHardLimitMB_9972fcc56b44e79d]);
        }

        jboolean IndexWriterConfig::getReaderPooling() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getReaderPooling_8454bd5aa23fd11e]);
        }

        ::org::apache::lucene::search::similarities::Similarity IndexWriterConfig::getSimilarity() const
        {
          return ::org::apache::lucene::search::similarities::Similarity(env->callObjectMethod(this$, mids$[mid_getSimilarity_35e3c46e8ea97897]));
        }

        IndexWriterConfig IndexWriterConfig::setCheckPendingFlushUpdate(jboolean a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setCheckPendingFlushUpdate_55d6c68515c37ca7], a0));
        }

        IndexWriterConfig IndexWriterConfig::setCodec(const ::org::apache::lucene::codecs::Codec & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setCodec_aa06151733ac6d4e], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setCommitOnClose(jboolean a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setCommitOnClose_55d6c68515c37ca7], a0));
        }

        IndexWriterConfig IndexWriterConfig::setIndexCommit(const ::org::apache::lucene::index::IndexCommit & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setIndexCommit_d4c7f2d1a5e5016a], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setIndexCreatedVersionMajor(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setIndexCreatedVersionMajor_455e03c7ac3ddc31], a0));
        }

        IndexWriterConfig IndexWriterConfig::setIndexDeletionPolicy(const ::org::apache::lucene::index::IndexDeletionPolicy & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setIndexDeletionPolicy_bf4e8d3b27097e1f], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setIndexSort(const ::org::apache::lucene::search::Sort & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setIndexSort_76d1bdfb5c8d88b2], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setInfoStream(const ::java::io::PrintStream & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setInfoStream_2249a75331ac1f9d], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setInfoStream(const ::org::apache::lucene::util::InfoStream & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setInfoStream_9df3cc2305ecb5d7], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setLeafSorter(const ::java::util::Comparator & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setLeafSorter_db9ebbed99bd96b8], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setMaxBufferedDocs(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxBufferedDocs_455e03c7ac3ddc31], a0));
        }

        IndexWriterConfig IndexWriterConfig::setMaxFullFlushMergeWaitMillis(jlong a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxFullFlushMergeWaitMillis_155c70cec97a15bb], a0));
        }

        IndexWriterConfig IndexWriterConfig::setMergePolicy(const ::org::apache::lucene::index::MergePolicy & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergePolicy_afc3d0981a5cd312], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setMergeScheduler(const ::org::apache::lucene::index::MergeScheduler & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergeScheduler_a8b9afbea5f71956], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setMergedSegmentWarmer(const ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergedSegmentWarmer_3470a9710b4c0809], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setOpenMode(const ::org::apache::lucene::index::IndexWriterConfig$OpenMode & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setOpenMode_85208b7651de5894], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setRAMBufferSizeMB(jdouble a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setRAMBufferSizeMB_57e2dae80821a612], a0));
        }

        IndexWriterConfig IndexWriterConfig::setRAMPerThreadHardLimitMB(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setRAMPerThreadHardLimitMB_455e03c7ac3ddc31], a0));
        }

        IndexWriterConfig IndexWriterConfig::setReaderPooling(jboolean a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setReaderPooling_55d6c68515c37ca7], a0));
        }

        IndexWriterConfig IndexWriterConfig::setSimilarity(const ::org::apache::lucene::search::similarities::Similarity & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setSimilarity_7ddbb4c0fd2c4ced], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setSoftDeletesField(const ::java::lang::String & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setSoftDeletesField_c2c6f18454676a3a], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setUseCompoundFile(jboolean a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setUseCompoundFile_55d6c68515c37ca7], a0));
        }

        ::java::lang::String IndexWriterConfig::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexWriterConfig_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriterConfig_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexWriterConfig_init_(t_IndexWriterConfig *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexWriterConfig_getAnalyzer(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getCodec(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getIndexCommit(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getIndexDeletionPolicy(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getInfoStream(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMaxBufferedDocs(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMergePolicy(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMergeScheduler(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getOpenMode(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getRAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getRAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getReaderPooling(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getSimilarity(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setCheckPendingFlushUpdate(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setCodec(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setCommitOnClose(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setIndexCommit(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setIndexCreatedVersionMajor(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setIndexDeletionPolicy(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setIndexSort(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setInfoStream(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setLeafSorter(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setMaxBufferedDocs(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setMaxFullFlushMergeWaitMillis(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setMergePolicy(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setMergeScheduler(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setMergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setOpenMode(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setRAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setRAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setReaderPooling(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setSimilarity(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setSoftDeletesField(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setUseCompoundFile(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_toString(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_get__analyzer(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__checkPendingFlushUpdate(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__codec(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__codec(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static int t_IndexWriterConfig_set__commitOnClose(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__indexCommit(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__indexCommit(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static int t_IndexWriterConfig_set__indexCreatedVersionMajor(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__indexDeletionPolicy(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__indexDeletionPolicy(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static int t_IndexWriterConfig_set__indexSort(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__infoStream(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__infoStream(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static int t_IndexWriterConfig_set__leafSorter(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__maxBufferedDocs(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__maxBufferedDocs(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static int t_IndexWriterConfig_set__maxFullFlushMergeWaitMillis(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__mergePolicy(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__mergePolicy(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__mergeScheduler(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__mergeScheduler(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__mergedSegmentWarmer(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__mergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__openMode(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__openMode(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__rAMBufferSizeMB(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__rAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__rAMPerThreadHardLimitMB(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__rAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__readerPooling(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__readerPooling(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__similarity(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__similarity(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static int t_IndexWriterConfig_set__softDeletesField(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static int t_IndexWriterConfig_set__useCompoundFile(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyGetSetDef t_IndexWriterConfig__fields_[] = {
          DECLARE_GET_FIELD(t_IndexWriterConfig, analyzer),
          DECLARE_SET_FIELD(t_IndexWriterConfig, checkPendingFlushUpdate),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, codec),
          DECLARE_SET_FIELD(t_IndexWriterConfig, commitOnClose),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, indexCommit),
          DECLARE_SET_FIELD(t_IndexWriterConfig, indexCreatedVersionMajor),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, indexDeletionPolicy),
          DECLARE_SET_FIELD(t_IndexWriterConfig, indexSort),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, infoStream),
          DECLARE_SET_FIELD(t_IndexWriterConfig, leafSorter),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, maxBufferedDocs),
          DECLARE_SET_FIELD(t_IndexWriterConfig, maxFullFlushMergeWaitMillis),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, mergePolicy),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, mergeScheduler),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, mergedSegmentWarmer),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, openMode),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, rAMBufferSizeMB),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, rAMPerThreadHardLimitMB),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, readerPooling),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, similarity),
          DECLARE_SET_FIELD(t_IndexWriterConfig, softDeletesField),
          DECLARE_SET_FIELD(t_IndexWriterConfig, useCompoundFile),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexWriterConfig__methods_[] = {
          DECLARE_METHOD(t_IndexWriterConfig, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig, getAnalyzer, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getCodec, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getIndexCommit, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getIndexDeletionPolicy, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getInfoStream, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMaxBufferedDocs, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMergePolicy, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMergeScheduler, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMergedSegmentWarmer, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getOpenMode, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getRAMBufferSizeMB, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getRAMPerThreadHardLimitMB, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getReaderPooling, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getSimilarity, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setCheckPendingFlushUpdate, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setCodec, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setCommitOnClose, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setIndexCommit, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setIndexCreatedVersionMajor, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setIndexDeletionPolicy, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setIndexSort, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setInfoStream, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setLeafSorter, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setMaxBufferedDocs, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setMaxFullFlushMergeWaitMillis, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setMergePolicy, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setMergeScheduler, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setMergedSegmentWarmer, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setOpenMode, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setRAMBufferSizeMB, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setRAMPerThreadHardLimitMB, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setReaderPooling, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setSimilarity, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setSoftDeletesField, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setUseCompoundFile, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexWriterConfig)[] = {
          { Py_tp_methods, t_IndexWriterConfig__methods_ },
          { Py_tp_init, (void *) t_IndexWriterConfig_init_ },
          { Py_tp_getset, t_IndexWriterConfig__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexWriterConfig)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::LiveIndexWriterConfig),
          NULL
        };

        DEFINE_TYPE(IndexWriterConfig, t_IndexWriterConfig, IndexWriterConfig);

        void t_IndexWriterConfig::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexWriterConfig), &PY_TYPE_DEF(IndexWriterConfig), module, "IndexWriterConfig", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriterConfig), "OpenMode", make_descriptor(&PY_TYPE_DEF(IndexWriterConfig$OpenMode)));
        }

        void t_IndexWriterConfig::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriterConfig), "class_", make_descriptor(IndexWriterConfig::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriterConfig), "wrapfn_", make_descriptor(t_IndexWriterConfig::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriterConfig), "boxfn_", make_descriptor(boxObject));
          env->getClass(IndexWriterConfig::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriterConfig), "DEFAULT_COMMIT_ON_CLOSE", make_descriptor(IndexWriterConfig::DEFAULT_COMMIT_ON_CLOSE));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriterConfig), "DEFAULT_MAX_BUFFERED_DELETE_TERMS", make_descriptor(IndexWriterConfig::DEFAULT_MAX_BUFFERED_DELETE_TERMS));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriterConfig), "DEFAULT_MAX_BUFFERED_DOCS", make_descriptor(IndexWriterConfig::DEFAULT_MAX_BUFFERED_DOCS));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriterConfig), "DEFAULT_MAX_FULL_FLUSH_MERGE_WAIT_MILLIS", make_descriptor(IndexWriterConfig::DEFAULT_MAX_FULL_FLUSH_MERGE_WAIT_MILLIS));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriterConfig), "DEFAULT_RAM_BUFFER_SIZE_MB", make_descriptor(IndexWriterConfig::DEFAULT_RAM_BUFFER_SIZE_MB));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriterConfig), "DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB", make_descriptor(IndexWriterConfig::DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriterConfig), "DEFAULT_READER_POOLING", make_descriptor(IndexWriterConfig::DEFAULT_READER_POOLING));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriterConfig), "DEFAULT_USE_COMPOUND_FILE_SYSTEM", make_descriptor(IndexWriterConfig::DEFAULT_USE_COMPOUND_FILE_SYSTEM));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriterConfig), "DISABLE_AUTO_FLUSH", make_descriptor(IndexWriterConfig::DISABLE_AUTO_FLUSH));
        }

        static PyObject *t_IndexWriterConfig_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexWriterConfig::initializeClass, 1)))
            return NULL;
          return t_IndexWriterConfig::wrap_Object(IndexWriterConfig(((t_IndexWriterConfig *) arg)->object.this$));
        }
        static PyObject *t_IndexWriterConfig_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexWriterConfig::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexWriterConfig_init_(t_IndexWriterConfig *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              IndexWriterConfig object((jobject) NULL);

              INT_CALL(object = IndexWriterConfig());
              self->object = object;
              break;
            }
           case 1:
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              IndexWriterConfig object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                INT_CALL(object = IndexWriterConfig(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexWriterConfig_getAnalyzer(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndexWriterConfig), (PyObject *) self, "getAnalyzer", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getCodec(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::Codec result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCodec());
            return ::org::apache::lucene::codecs::t_Codec::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndexWriterConfig), (PyObject *) self, "getCodec", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getIndexCommit(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIndexCommit());
            return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndexWriterConfig), (PyObject *) self, "getIndexCommit", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getIndexDeletionPolicy(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIndexDeletionPolicy());
            return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndexWriterConfig), (PyObject *) self, "getIndexDeletionPolicy", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getInfoStream(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::util::InfoStream result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getInfoStream());
            return ::org::apache::lucene::util::t_InfoStream::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndexWriterConfig), (PyObject *) self, "getInfoStream", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMaxBufferedDocs(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMaxBufferedDocs());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMaxBufferedDocs", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMergePolicy(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergePolicy result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMergePolicy());
            return ::org::apache::lucene::index::t_MergePolicy::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMergePolicy", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMergeScheduler(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeScheduler result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMergeScheduler());
            return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMergeScheduler", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMergedSegmentWarmer());
            return ::org::apache::lucene::index::t_IndexWriter$IndexReaderWarmer::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMergedSegmentWarmer", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getOpenMode(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getOpenMode());
            return ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndexWriterConfig), (PyObject *) self, "getOpenMode", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getRAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *args)
        {
          jdouble result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getRAMBufferSizeMB());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(PY_TYPE(IndexWriterConfig), (PyObject *) self, "getRAMBufferSizeMB", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getRAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getRAMPerThreadHardLimitMB());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(IndexWriterConfig), (PyObject *) self, "getRAMPerThreadHardLimitMB", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getReaderPooling(t_IndexWriterConfig *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getReaderPooling());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(IndexWriterConfig), (PyObject *) self, "getReaderPooling", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getSimilarity(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSimilarity());
            return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndexWriterConfig), (PyObject *) self, "getSimilarity", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setCheckPendingFlushUpdate(t_IndexWriterConfig *self, PyObject *args)
        {
          jboolean a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setCheckPendingFlushUpdate(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndexWriterConfig), (PyObject *) self, "setCheckPendingFlushUpdate", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setCodec(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::codecs::Codec a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setCodec(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setCodec", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setCommitOnClose(t_IndexWriterConfig *self, PyObject *arg)
        {
          jboolean a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setCommitOnClose(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setCommitOnClose", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setIndexCommit(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setIndexCommit(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexCommit", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setIndexCreatedVersionMajor(t_IndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setIndexCreatedVersionMajor(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexCreatedVersionMajor", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setIndexDeletionPolicy(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setIndexDeletionPolicy(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexDeletionPolicy", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setIndexSort(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Sort a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setIndexSort(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexSort", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setInfoStream(t_IndexWriterConfig *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::PrintStream a0((jobject) NULL);
              IndexWriterConfig result((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.setInfoStream(a0));
                return t_IndexWriterConfig::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::util::InfoStream a0((jobject) NULL);
              IndexWriterConfig result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::InfoStream::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.setInfoStream(a0));
                return t_IndexWriterConfig::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setInfoStream", args);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setLeafSorter(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = self->object.setLeafSorter(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setLeafSorter", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setMaxBufferedDocs(t_IndexWriterConfig *self, PyObject *args)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxBufferedDocs(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndexWriterConfig), (PyObject *) self, "setMaxBufferedDocs", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setMaxFullFlushMergeWaitMillis(t_IndexWriterConfig *self, PyObject *arg)
        {
          jlong a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.setMaxFullFlushMergeWaitMillis(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxFullFlushMergeWaitMillis", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setMergePolicy(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergePolicy a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::MergePolicy::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergePolicy(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndexWriterConfig), (PyObject *) self, "setMergePolicy", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setMergeScheduler(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeScheduler a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeScheduler::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergeScheduler(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeScheduler", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setMergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergedSegmentWarmer(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndexWriterConfig), (PyObject *) self, "setMergedSegmentWarmer", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setOpenMode(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode a0((jobject) NULL);
          PyTypeObject **p0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "K", ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::parameters_))
          {
            OBJ_CALL(result = self->object.setOpenMode(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setOpenMode", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setRAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *args)
        {
          jdouble a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(result = self->object.setRAMBufferSizeMB(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndexWriterConfig), (PyObject *) self, "setRAMBufferSizeMB", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setRAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setRAMPerThreadHardLimitMB(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setRAMPerThreadHardLimitMB", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setReaderPooling(t_IndexWriterConfig *self, PyObject *arg)
        {
          jboolean a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setReaderPooling(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setReaderPooling", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setSimilarity(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::search::similarities::Similarity a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setSimilarity(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setSimilarity", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setSoftDeletesField(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.setSoftDeletesField(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setSoftDeletesField", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setUseCompoundFile(t_IndexWriterConfig *self, PyObject *args)
        {
          jboolean a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setUseCompoundFile(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndexWriterConfig), (PyObject *) self, "setUseCompoundFile", args, 2);
        }

        static PyObject *t_IndexWriterConfig_toString(t_IndexWriterConfig *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(IndexWriterConfig), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IndexWriterConfig_get__analyzer(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
          OBJ_CALL(value = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
        }

        static int t_IndexWriterConfig_set__checkPendingFlushUpdate(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setCheckPendingFlushUpdate(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "checkPendingFlushUpdate", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__codec(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          OBJ_CALL(value = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__codec(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::codecs::Codec value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &value))
            {
              INT_CALL(self->object.setCodec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "codec", arg);
          return -1;
        }

        static int t_IndexWriterConfig_set__commitOnClose(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setCommitOnClose(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "commitOnClose", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__indexCommit(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__indexCommit(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &value))
            {
              INT_CALL(self->object.setIndexCommit(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexCommit", arg);
          return -1;
        }

        static int t_IndexWriterConfig_set__indexCreatedVersionMajor(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIndexCreatedVersionMajor(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexCreatedVersionMajor", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__indexDeletionPolicy(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexDeletionPolicy());
          return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__indexDeletionPolicy(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexDeletionPolicy value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, &value))
            {
              INT_CALL(self->object.setIndexDeletionPolicy(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexDeletionPolicy", arg);
          return -1;
        }

        static int t_IndexWriterConfig_set__indexSort(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Sort value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &value))
            {
              INT_CALL(self->object.setIndexSort(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexSort", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__infoStream(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getInfoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__infoStream(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::java::io::PrintStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          {
            ::org::apache::lucene::util::InfoStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::InfoStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "infoStream", arg);
          return -1;
        }

        static int t_IndexWriterConfig_set__leafSorter(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Comparator value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Comparator::initializeClass, &value))
            {
              INT_CALL(self->object.setLeafSorter(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "leafSorter", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__maxBufferedDocs(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxBufferedDocs());
          return PyLong_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__maxBufferedDocs(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxBufferedDocs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxBufferedDocs", arg);
          return -1;
        }

        static int t_IndexWriterConfig_set__maxFullFlushMergeWaitMillis(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setMaxFullFlushMergeWaitMillis(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxFullFlushMergeWaitMillis", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__mergePolicy(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::MergePolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergePolicy());
          return ::org::apache::lucene::index::t_MergePolicy::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__mergePolicy(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::MergePolicy value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy::initializeClass, &value))
            {
              INT_CALL(self->object.setMergePolicy(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergePolicy", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__mergeScheduler(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::MergeScheduler value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeScheduler());
          return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__mergeScheduler(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::MergeScheduler value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeScheduler::initializeClass, &value))
            {
              INT_CALL(self->object.setMergeScheduler(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeScheduler", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__mergedSegmentWarmer(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergedSegmentWarmer());
          return ::org::apache::lucene::index::t_IndexWriter$IndexReaderWarmer::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__mergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer::initializeClass, &value))
            {
              INT_CALL(self->object.setMergedSegmentWarmer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergedSegmentWarmer", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__openMode(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode value((jobject) NULL);
          OBJ_CALL(value = self->object.getOpenMode());
          return ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__openMode(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexWriterConfig$OpenMode value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, &value))
            {
              INT_CALL(self->object.setOpenMode(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "openMode", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__rAMBufferSizeMB(t_IndexWriterConfig *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getRAMBufferSizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_IndexWriterConfig_set__rAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setRAMBufferSizeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rAMBufferSizeMB", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__rAMPerThreadHardLimitMB(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getRAMPerThreadHardLimitMB());
          return PyLong_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__rAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setRAMPerThreadHardLimitMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rAMPerThreadHardLimitMB", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__readerPooling(t_IndexWriterConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getReaderPooling());
          Py_RETURN_BOOL(value);
        }
        static int t_IndexWriterConfig_set__readerPooling(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setReaderPooling(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "readerPooling", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__similarity(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
          OBJ_CALL(value = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__similarity(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &value))
            {
              INT_CALL(self->object.setSimilarity(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "similarity", arg);
          return -1;
        }

        static int t_IndexWriterConfig_set__softDeletesField(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object.setSoftDeletesField(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "softDeletesField", arg);
          return -1;
        }

        static int t_IndexWriterConfig_set__useCompoundFile(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setUseCompoundFile(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "useCompoundFile", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/ParserExtension.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/queryparser/ext/ExtensionQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *ParserExtension::class$ = NULL;
          jmethodID *ParserExtension::mids$ = NULL;
          bool ParserExtension::live$ = false;

          jclass ParserExtension::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/ParserExtension");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_parse_f812aa22a5ebc7a8] = env->getMethodID(cls, "parse", "(Lorg/apache/lucene/queryparser/ext/ExtensionQuery;)Lorg/apache/lucene/search/Query;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ParserExtension::ParserExtension() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::search::Query ParserExtension::parse(const ::org::apache::lucene::queryparser::ext::ExtensionQuery & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_f812aa22a5ebc7a8], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_ParserExtension_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ParserExtension_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ParserExtension_init_(t_ParserExtension *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ParserExtension_parse(t_ParserExtension *self, PyObject *arg);

          static PyMethodDef t_ParserExtension__methods_[] = {
            DECLARE_METHOD(t_ParserExtension, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParserExtension, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParserExtension, parse, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ParserExtension)[] = {
            { Py_tp_methods, t_ParserExtension__methods_ },
            { Py_tp_init, (void *) t_ParserExtension_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ParserExtension)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(ParserExtension, t_ParserExtension, ParserExtension);

          void t_ParserExtension::install(PyObject *module)
          {
            installType(&PY_TYPE(ParserExtension), &PY_TYPE_DEF(ParserExtension), module, "ParserExtension", 0);
          }

          void t_ParserExtension::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ParserExtension), "class_", make_descriptor(ParserExtension::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ParserExtension), "wrapfn_", make_descriptor(t_ParserExtension::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ParserExtension), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ParserExtension_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ParserExtension::initializeClass, 1)))
              return NULL;
            return t_ParserExtension::wrap_Object(ParserExtension(((t_ParserExtension *) arg)->object.this$));
          }
          static PyObject *t_ParserExtension_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ParserExtension::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ParserExtension_init_(t_ParserExtension *self, PyObject *args, PyObject *kwds)
          {
            ParserExtension object((jobject) NULL);

            INT_CALL(object = ParserExtension());
            self->object = object;

            return 0;
          }

          static PyObject *t_ParserExtension_parse(t_ParserExtension *self, PyObject *arg)
          {
            ::org::apache::lucene::queryparser::ext::ExtensionQuery a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::ext::ExtensionQuery::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/misc/SweetSpotSimilarity.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {

        ::java::lang::Class *SweetSpotSimilarity::class$ = NULL;
        jmethodID *SweetSpotSimilarity::mids$ = NULL;
        bool SweetSpotSimilarity::live$ = false;

        jclass SweetSpotSimilarity::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/misc/SweetSpotSimilarity");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_baselineTf_8c8518d25218b9c5] = env->getMethodID(cls, "baselineTf", "(F)F");
            mids$[mid_hyperbolicTf_8c8518d25218b9c5] = env->getMethodID(cls, "hyperbolicTf", "(F)F");
            mids$[mid_lengthNorm_384f078ef4b8f931] = env->getMethodID(cls, "lengthNorm", "(I)F");
            mids$[mid_setBaselineTfFactors_5a9245193073da7b] = env->getMethodID(cls, "setBaselineTfFactors", "(FF)V");
            mids$[mid_setHyperbolicTfFactors_2944a3cac38261c2] = env->getMethodID(cls, "setHyperbolicTfFactors", "(FFDF)V");
            mids$[mid_setLengthNormFactors_b2a45559b5888aa2] = env->getMethodID(cls, "setLengthNormFactors", "(IIFZ)V");
            mids$[mid_tf_8c8518d25218b9c5] = env->getMethodID(cls, "tf", "(F)F");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SweetSpotSimilarity::SweetSpotSimilarity() : ::org::apache::lucene::search::similarities::ClassicSimilarity(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jfloat SweetSpotSimilarity::baselineTf(jfloat a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_baselineTf_8c8518d25218b9c5], a0);
        }

        jfloat SweetSpotSimilarity::hyperbolicTf(jfloat a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_hyperbolicTf_8c8518d25218b9c5], a0);
        }

        jfloat SweetSpotSimilarity::lengthNorm(jint a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_lengthNorm_384f078ef4b8f931], a0);
        }

        void SweetSpotSimilarity::setBaselineTfFactors(jfloat a0, jfloat a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setBaselineTfFactors_5a9245193073da7b], a0, a1);
        }

        void SweetSpotSimilarity::setHyperbolicTfFactors(jfloat a0, jfloat a1, jdouble a2, jfloat a3) const
        {
          env->callVoidMethod(this$, mids$[mid_setHyperbolicTfFactors_2944a3cac38261c2], a0, a1, a2, a3);
        }

        void SweetSpotSimilarity::setLengthNormFactors(jint a0, jint a1, jfloat a2, jboolean a3) const
        {
          env->callVoidMethod(this$, mids$[mid_setLengthNormFactors_b2a45559b5888aa2], a0, a1, a2, a3);
        }

        jfloat SweetSpotSimilarity::tf(jfloat a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_tf_8c8518d25218b9c5], a0);
        }

        ::java::lang::String SweetSpotSimilarity::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {
        static PyObject *t_SweetSpotSimilarity_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SweetSpotSimilarity_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SweetSpotSimilarity_init_(t_SweetSpotSimilarity *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SweetSpotSimilarity_baselineTf(t_SweetSpotSimilarity *self, PyObject *arg);
        static PyObject *t_SweetSpotSimilarity_hyperbolicTf(t_SweetSpotSimilarity *self, PyObject *arg);
        static PyObject *t_SweetSpotSimilarity_lengthNorm(t_SweetSpotSimilarity *self, PyObject *args);
        static PyObject *t_SweetSpotSimilarity_setBaselineTfFactors(t_SweetSpotSimilarity *self, PyObject *args);
        static PyObject *t_SweetSpotSimilarity_setHyperbolicTfFactors(t_SweetSpotSimilarity *self, PyObject *args);
        static PyObject *t_SweetSpotSimilarity_setLengthNormFactors(t_SweetSpotSimilarity *self, PyObject *args);
        static PyObject *t_SweetSpotSimilarity_tf(t_SweetSpotSimilarity *self, PyObject *args);
        static PyObject *t_SweetSpotSimilarity_toString(t_SweetSpotSimilarity *self, PyObject *args);

        static PyMethodDef t_SweetSpotSimilarity__methods_[] = {
          DECLARE_METHOD(t_SweetSpotSimilarity, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SweetSpotSimilarity, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SweetSpotSimilarity, baselineTf, METH_O),
          DECLARE_METHOD(t_SweetSpotSimilarity, hyperbolicTf, METH_O),
          DECLARE_METHOD(t_SweetSpotSimilarity, lengthNorm, METH_VARARGS),
          DECLARE_METHOD(t_SweetSpotSimilarity, setBaselineTfFactors, METH_VARARGS),
          DECLARE_METHOD(t_SweetSpotSimilarity, setHyperbolicTfFactors, METH_VARARGS),
          DECLARE_METHOD(t_SweetSpotSimilarity, setLengthNormFactors, METH_VARARGS),
          DECLARE_METHOD(t_SweetSpotSimilarity, tf, METH_VARARGS),
          DECLARE_METHOD(t_SweetSpotSimilarity, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SweetSpotSimilarity)[] = {
          { Py_tp_methods, t_SweetSpotSimilarity__methods_ },
          { Py_tp_init, (void *) t_SweetSpotSimilarity_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SweetSpotSimilarity)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::similarities::ClassicSimilarity),
          NULL
        };

        DEFINE_TYPE(SweetSpotSimilarity, t_SweetSpotSimilarity, SweetSpotSimilarity);

        void t_SweetSpotSimilarity::install(PyObject *module)
        {
          installType(&PY_TYPE(SweetSpotSimilarity), &PY_TYPE_DEF(SweetSpotSimilarity), module, "SweetSpotSimilarity", 0);
        }

        void t_SweetSpotSimilarity::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SweetSpotSimilarity), "class_", make_descriptor(SweetSpotSimilarity::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SweetSpotSimilarity), "wrapfn_", make_descriptor(t_SweetSpotSimilarity::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SweetSpotSimilarity), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SweetSpotSimilarity_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SweetSpotSimilarity::initializeClass, 1)))
            return NULL;
          return t_SweetSpotSimilarity::wrap_Object(SweetSpotSimilarity(((t_SweetSpotSimilarity *) arg)->object.this$));
        }
        static PyObject *t_SweetSpotSimilarity_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SweetSpotSimilarity::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SweetSpotSimilarity_init_(t_SweetSpotSimilarity *self, PyObject *args, PyObject *kwds)
        {
          SweetSpotSimilarity object((jobject) NULL);

          INT_CALL(object = SweetSpotSimilarity());
          self->object = object;

          return 0;
        }

        static PyObject *t_SweetSpotSimilarity_baselineTf(t_SweetSpotSimilarity *self, PyObject *arg)
        {
          jfloat a0;
          jfloat result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = self->object.baselineTf(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "baselineTf", arg);
          return NULL;
        }

        static PyObject *t_SweetSpotSimilarity_hyperbolicTf(t_SweetSpotSimilarity *self, PyObject *arg)
        {
          jfloat a0;
          jfloat result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = self->object.hyperbolicTf(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "hyperbolicTf", arg);
          return NULL;
        }

        static PyObject *t_SweetSpotSimilarity_lengthNorm(t_SweetSpotSimilarity *self, PyObject *args)
        {
          jint a0;
          jfloat result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.lengthNorm(a0));
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(PY_TYPE(SweetSpotSimilarity), (PyObject *) self, "lengthNorm", args, 2);
        }

        static PyObject *t_SweetSpotSimilarity_setBaselineTfFactors(t_SweetSpotSimilarity *self, PyObject *args)
        {
          jfloat a0;
          jfloat a1;

          if (!parseArgs(args, "FF", &a0, &a1))
          {
            OBJ_CALL(self->object.setBaselineTfFactors(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBaselineTfFactors", args);
          return NULL;
        }

        static PyObject *t_SweetSpotSimilarity_setHyperbolicTfFactors(t_SweetSpotSimilarity *self, PyObject *args)
        {
          jfloat a0;
          jfloat a1;
          jdouble a2;
          jfloat a3;

          if (!parseArgs(args, "FFDF", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.setHyperbolicTfFactors(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setHyperbolicTfFactors", args);
          return NULL;
        }

        static PyObject *t_SweetSpotSimilarity_setLengthNormFactors(t_SweetSpotSimilarity *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jfloat a2;
          jboolean a3;

          if (!parseArgs(args, "IIFZ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.setLengthNormFactors(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLengthNormFactors", args);
          return NULL;
        }

        static PyObject *t_SweetSpotSimilarity_tf(t_SweetSpotSimilarity *self, PyObject *args)
        {
          jfloat a0;
          jfloat result;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(result = self->object.tf(a0));
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(PY_TYPE(SweetSpotSimilarity), (PyObject *) self, "tf", args, 2);
        }

        static PyObject *t_SweetSpotSimilarity_toString(t_SweetSpotSimilarity *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(SweetSpotSimilarity), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsCollector$MatchingDocs.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsCollector$MatchingDocs::class$ = NULL;
        jmethodID *FacetsCollector$MatchingDocs::mids$ = NULL;
        jfieldID *FacetsCollector$MatchingDocs::fids$ = NULL;
        bool FacetsCollector$MatchingDocs::live$ = false;

        jclass FacetsCollector$MatchingDocs::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsCollector$MatchingDocs");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0d2f49a30dd6653b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/LeafReaderContext;Lorg/apache/lucene/search/DocIdSet;I[F)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_bits] = env->getFieldID(cls, "bits", "Lorg/apache/lucene/search/DocIdSet;");
            fids$[fid_context] = env->getFieldID(cls, "context", "Lorg/apache/lucene/index/LeafReaderContext;");
            fids$[fid_scores] = env->getFieldID(cls, "scores", "[F");
            fids$[fid_totalHits] = env->getFieldID(cls, "totalHits", "I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsCollector$MatchingDocs::FacetsCollector$MatchingDocs(const ::org::apache::lucene::index::LeafReaderContext & a0, const ::org::apache::lucene::search::DocIdSet & a1, jint a2, const JArray< jfloat > & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0d2f49a30dd6653b, a0.this$, a1.this$, a2, a3.this$)) {}

        ::org::apache::lucene::search::DocIdSet FacetsCollector$MatchingDocs::_get_bits() const
        {
          return ::org::apache::lucene::search::DocIdSet(env->getObjectField(this$, fids$[fid_bits]));
        }

        ::org::apache::lucene::index::LeafReaderContext FacetsCollector$MatchingDocs::_get_context() const
        {
          return ::org::apache::lucene::index::LeafReaderContext(env->getObjectField(this$, fids$[fid_context]));
        }

        JArray< jfloat > FacetsCollector$MatchingDocs::_get_scores() const
        {
          return JArray< jfloat >(env->getObjectField(this$, fids$[fid_scores]));
        }

        jint FacetsCollector$MatchingDocs::_get_totalHits() const
        {
          return env->getIntField(this$, fids$[fid_totalHits]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsCollector$MatchingDocs_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsCollector$MatchingDocs_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetsCollector$MatchingDocs_init_(t_FacetsCollector$MatchingDocs *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetsCollector$MatchingDocs_get__bits(t_FacetsCollector$MatchingDocs *self, void *data);
        static PyObject *t_FacetsCollector$MatchingDocs_get__context(t_FacetsCollector$MatchingDocs *self, void *data);
        static PyObject *t_FacetsCollector$MatchingDocs_get__scores(t_FacetsCollector$MatchingDocs *self, void *data);
        static PyObject *t_FacetsCollector$MatchingDocs_get__totalHits(t_FacetsCollector$MatchingDocs *self, void *data);

        static PyGetSetDef t_FacetsCollector$MatchingDocs__fields_[] = {
          DECLARE_GET_FIELD(t_FacetsCollector$MatchingDocs, bits),
          DECLARE_GET_FIELD(t_FacetsCollector$MatchingDocs, context),
          DECLARE_GET_FIELD(t_FacetsCollector$MatchingDocs, scores),
          DECLARE_GET_FIELD(t_FacetsCollector$MatchingDocs, totalHits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetsCollector$MatchingDocs__methods_[] = {
          DECLARE_METHOD(t_FacetsCollector$MatchingDocs, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector$MatchingDocs, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FacetsCollector$MatchingDocs)[] = {
          { Py_tp_methods, t_FacetsCollector$MatchingDocs__methods_ },
          { Py_tp_init, (void *) t_FacetsCollector$MatchingDocs_init_ },
          { Py_tp_getset, t_FacetsCollector$MatchingDocs__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FacetsCollector$MatchingDocs)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FacetsCollector$MatchingDocs, t_FacetsCollector$MatchingDocs, FacetsCollector$MatchingDocs);

        void t_FacetsCollector$MatchingDocs::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsCollector$MatchingDocs), &PY_TYPE_DEF(FacetsCollector$MatchingDocs), module, "FacetsCollector$MatchingDocs", 0);
        }

        void t_FacetsCollector$MatchingDocs::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsCollector$MatchingDocs), "class_", make_descriptor(FacetsCollector$MatchingDocs::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsCollector$MatchingDocs), "wrapfn_", make_descriptor(t_FacetsCollector$MatchingDocs::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsCollector$MatchingDocs), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetsCollector$MatchingDocs_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsCollector$MatchingDocs::initializeClass, 1)))
            return NULL;
          return t_FacetsCollector$MatchingDocs::wrap_Object(FacetsCollector$MatchingDocs(((t_FacetsCollector$MatchingDocs *) arg)->object.this$));
        }
        static PyObject *t_FacetsCollector$MatchingDocs_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsCollector$MatchingDocs::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetsCollector$MatchingDocs_init_(t_FacetsCollector$MatchingDocs *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet a1((jobject) NULL);
          jint a2;
          JArray< jfloat > a3((jobject) NULL);
          FacetsCollector$MatchingDocs object((jobject) NULL);

          if (!parseArgs(args, "kkI[F", ::org::apache::lucene::index::LeafReaderContext::initializeClass, ::org::apache::lucene::search::DocIdSet::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FacetsCollector$MatchingDocs(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FacetsCollector$MatchingDocs_get__bits(t_FacetsCollector$MatchingDocs *self, void *data)
        {
          ::org::apache::lucene::search::DocIdSet value((jobject) NULL);
          OBJ_CALL(value = self->object._get_bits());
          return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(value);
        }

        static PyObject *t_FacetsCollector$MatchingDocs_get__context(t_FacetsCollector$MatchingDocs *self, void *data)
        {
          ::org::apache::lucene::index::LeafReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_context());
          return ::org::apache::lucene::index::t_LeafReaderContext::wrap_Object(value);
        }

        static PyObject *t_FacetsCollector$MatchingDocs_get__scores(t_FacetsCollector$MatchingDocs *self, void *data)
        {
          JArray< jfloat > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_scores());
          return value.wrap();
        }

        static PyObject *t_FacetsCollector$MatchingDocs_get__totalHits(t_FacetsCollector$MatchingDocs *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totalHits());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/bkd/BKDReader$IndexTree.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/util/bkd/BKDReader$IndexTree.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {

          ::java::lang::Class *BKDReader$IndexTree::class$ = NULL;
          jmethodID *BKDReader$IndexTree::mids$ = NULL;
          bool BKDReader$IndexTree::live$ = false;

          jclass BKDReader$IndexTree::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/bkd/BKDReader$IndexTree");

              mids$ = new jmethodID[max_mid];
              mids$[mid_clone_e60fdb7742b3b605] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/bkd/BKDReader$IndexTree;");
              mids$[mid_getLeafBlockFP_2e5ae9edcb9b072f] = env->getMethodID(cls, "getLeafBlockFP", "()J");
              mids$[mid_getNodeID_9972fcc56b44e79d] = env->getMethodID(cls, "getNodeID", "()I");
              mids$[mid_getNumLeaves_9972fcc56b44e79d] = env->getMethodID(cls, "getNumLeaves", "()I");
              mids$[mid_getSplitDim_9972fcc56b44e79d] = env->getMethodID(cls, "getSplitDim", "()I");
              mids$[mid_getSplitDimValue_7af2ea2e37ce82b8] = env->getMethodID(cls, "getSplitDimValue", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getSplitPackedValue_cf386cdb1bbd339f] = env->getMethodID(cls, "getSplitPackedValue", "()[B");
              mids$[mid_isLeafNode_8454bd5aa23fd11e] = env->getMethodID(cls, "isLeafNode", "()Z");
              mids$[mid_nodeExists_8454bd5aa23fd11e] = env->getMethodID(cls, "nodeExists", "()Z");
              mids$[mid_pop_f2cc1bce94666404] = env->getMethodID(cls, "pop", "()V");
              mids$[mid_pushLeft_f2cc1bce94666404] = env->getMethodID(cls, "pushLeft", "()V");
              mids$[mid_pushRight_f2cc1bce94666404] = env->getMethodID(cls, "pushRight", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BKDReader$IndexTree BKDReader$IndexTree::clone() const
          {
            return BKDReader$IndexTree(env->callObjectMethod(this$, mids$[mid_clone_e60fdb7742b3b605]));
          }

          jlong BKDReader$IndexTree::getLeafBlockFP() const
          {
            return env->callLongMethod(this$, mids$[mid_getLeafBlockFP_2e5ae9edcb9b072f]);
          }

          jint BKDReader$IndexTree::getNodeID() const
          {
            return env->callIntMethod(this$, mids$[mid_getNodeID_9972fcc56b44e79d]);
          }

          jint BKDReader$IndexTree::getNumLeaves() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumLeaves_9972fcc56b44e79d]);
          }

          jint BKDReader$IndexTree::getSplitDim() const
          {
            return env->callIntMethod(this$, mids$[mid_getSplitDim_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::util::BytesRef BKDReader$IndexTree::getSplitDimValue() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getSplitDimValue_7af2ea2e37ce82b8]));
          }

          JArray< jbyte > BKDReader$IndexTree::getSplitPackedValue() const
          {
            return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getSplitPackedValue_cf386cdb1bbd339f]));
          }

          jboolean BKDReader$IndexTree::isLeafNode() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isLeafNode_8454bd5aa23fd11e]);
          }

          jboolean BKDReader$IndexTree::nodeExists() const
          {
            return env->callBooleanMethod(this$, mids$[mid_nodeExists_8454bd5aa23fd11e]);
          }

          void BKDReader$IndexTree::pop() const
          {
            env->callVoidMethod(this$, mids$[mid_pop_f2cc1bce94666404]);
          }

          void BKDReader$IndexTree::pushLeft() const
          {
            env->callVoidMethod(this$, mids$[mid_pushLeft_f2cc1bce94666404]);
          }

          void BKDReader$IndexTree::pushRight() const
          {
            env->callVoidMethod(this$, mids$[mid_pushRight_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {
          static PyObject *t_BKDReader$IndexTree_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BKDReader$IndexTree_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BKDReader$IndexTree_clone(t_BKDReader$IndexTree *self);
          static PyObject *t_BKDReader$IndexTree_getLeafBlockFP(t_BKDReader$IndexTree *self);
          static PyObject *t_BKDReader$IndexTree_getNodeID(t_BKDReader$IndexTree *self);
          static PyObject *t_BKDReader$IndexTree_getNumLeaves(t_BKDReader$IndexTree *self);
          static PyObject *t_BKDReader$IndexTree_getSplitDim(t_BKDReader$IndexTree *self);
          static PyObject *t_BKDReader$IndexTree_getSplitDimValue(t_BKDReader$IndexTree *self);
          static PyObject *t_BKDReader$IndexTree_getSplitPackedValue(t_BKDReader$IndexTree *self);
          static PyObject *t_BKDReader$IndexTree_isLeafNode(t_BKDReader$IndexTree *self);
          static PyObject *t_BKDReader$IndexTree_nodeExists(t_BKDReader$IndexTree *self);
          static PyObject *t_BKDReader$IndexTree_pop(t_BKDReader$IndexTree *self);
          static PyObject *t_BKDReader$IndexTree_pushLeft(t_BKDReader$IndexTree *self);
          static PyObject *t_BKDReader$IndexTree_pushRight(t_BKDReader$IndexTree *self);
          static PyObject *t_BKDReader$IndexTree_get__leafBlockFP(t_BKDReader$IndexTree *self, void *data);
          static PyObject *t_BKDReader$IndexTree_get__leafNode(t_BKDReader$IndexTree *self, void *data);
          static PyObject *t_BKDReader$IndexTree_get__nodeID(t_BKDReader$IndexTree *self, void *data);
          static PyObject *t_BKDReader$IndexTree_get__numLeaves(t_BKDReader$IndexTree *self, void *data);
          static PyObject *t_BKDReader$IndexTree_get__splitDim(t_BKDReader$IndexTree *self, void *data);
          static PyObject *t_BKDReader$IndexTree_get__splitDimValue(t_BKDReader$IndexTree *self, void *data);
          static PyObject *t_BKDReader$IndexTree_get__splitPackedValue(t_BKDReader$IndexTree *self, void *data);
          static PyGetSetDef t_BKDReader$IndexTree__fields_[] = {
            DECLARE_GET_FIELD(t_BKDReader$IndexTree, leafBlockFP),
            DECLARE_GET_FIELD(t_BKDReader$IndexTree, leafNode),
            DECLARE_GET_FIELD(t_BKDReader$IndexTree, nodeID),
            DECLARE_GET_FIELD(t_BKDReader$IndexTree, numLeaves),
            DECLARE_GET_FIELD(t_BKDReader$IndexTree, splitDim),
            DECLARE_GET_FIELD(t_BKDReader$IndexTree, splitDimValue),
            DECLARE_GET_FIELD(t_BKDReader$IndexTree, splitPackedValue),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BKDReader$IndexTree__methods_[] = {
            DECLARE_METHOD(t_BKDReader$IndexTree, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BKDReader$IndexTree, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BKDReader$IndexTree, clone, METH_NOARGS),
            DECLARE_METHOD(t_BKDReader$IndexTree, getLeafBlockFP, METH_NOARGS),
            DECLARE_METHOD(t_BKDReader$IndexTree, getNodeID, METH_NOARGS),
            DECLARE_METHOD(t_BKDReader$IndexTree, getNumLeaves, METH_NOARGS),
            DECLARE_METHOD(t_BKDReader$IndexTree, getSplitDim, METH_NOARGS),
            DECLARE_METHOD(t_BKDReader$IndexTree, getSplitDimValue, METH_NOARGS),
            DECLARE_METHOD(t_BKDReader$IndexTree, getSplitPackedValue, METH_NOARGS),
            DECLARE_METHOD(t_BKDReader$IndexTree, isLeafNode, METH_NOARGS),
            DECLARE_METHOD(t_BKDReader$IndexTree, nodeExists, METH_NOARGS),
            DECLARE_METHOD(t_BKDReader$IndexTree, pop, METH_NOARGS),
            DECLARE_METHOD(t_BKDReader$IndexTree, pushLeft, METH_NOARGS),
            DECLARE_METHOD(t_BKDReader$IndexTree, pushRight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BKDReader$IndexTree)[] = {
            { Py_tp_methods, t_BKDReader$IndexTree__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_BKDReader$IndexTree__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BKDReader$IndexTree)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BKDReader$IndexTree, t_BKDReader$IndexTree, BKDReader$IndexTree);

          void t_BKDReader$IndexTree::install(PyObject *module)
          {
            installType(&PY_TYPE(BKDReader$IndexTree), &PY_TYPE_DEF(BKDReader$IndexTree), module, "BKDReader$IndexTree", 0);
          }

          void t_BKDReader$IndexTree::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDReader$IndexTree), "class_", make_descriptor(BKDReader$IndexTree::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDReader$IndexTree), "wrapfn_", make_descriptor(t_BKDReader$IndexTree::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDReader$IndexTree), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BKDReader$IndexTree_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BKDReader$IndexTree::initializeClass, 1)))
              return NULL;
            return t_BKDReader$IndexTree::wrap_Object(BKDReader$IndexTree(((t_BKDReader$IndexTree *) arg)->object.this$));
          }
          static PyObject *t_BKDReader$IndexTree_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BKDReader$IndexTree::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BKDReader$IndexTree_clone(t_BKDReader$IndexTree *self)
          {
            BKDReader$IndexTree result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return t_BKDReader$IndexTree::wrap_Object(result);
          }

          static PyObject *t_BKDReader$IndexTree_getLeafBlockFP(t_BKDReader$IndexTree *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getLeafBlockFP());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BKDReader$IndexTree_getNodeID(t_BKDReader$IndexTree *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNodeID());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_BKDReader$IndexTree_getNumLeaves(t_BKDReader$IndexTree *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumLeaves());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_BKDReader$IndexTree_getSplitDim(t_BKDReader$IndexTree *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSplitDim());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_BKDReader$IndexTree_getSplitDimValue(t_BKDReader$IndexTree *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getSplitDimValue());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_BKDReader$IndexTree_getSplitPackedValue(t_BKDReader$IndexTree *self)
          {
            JArray< jbyte > result((jobject) NULL);
            OBJ_CALL(result = self->object.getSplitPackedValue());
            return result.wrap();
          }

          static PyObject *t_BKDReader$IndexTree_isLeafNode(t_BKDReader$IndexTree *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isLeafNode());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BKDReader$IndexTree_nodeExists(t_BKDReader$IndexTree *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.nodeExists());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BKDReader$IndexTree_pop(t_BKDReader$IndexTree *self)
          {
            OBJ_CALL(self->object.pop());
            Py_RETURN_NONE;
          }

          static PyObject *t_BKDReader$IndexTree_pushLeft(t_BKDReader$IndexTree *self)
          {
            OBJ_CALL(self->object.pushLeft());
            Py_RETURN_NONE;
          }

          static PyObject *t_BKDReader$IndexTree_pushRight(t_BKDReader$IndexTree *self)
          {
            OBJ_CALL(self->object.pushRight());
            Py_RETURN_NONE;
          }

          static PyObject *t_BKDReader$IndexTree_get__leafBlockFP(t_BKDReader$IndexTree *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getLeafBlockFP());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_BKDReader$IndexTree_get__leafNode(t_BKDReader$IndexTree *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isLeafNode());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_BKDReader$IndexTree_get__nodeID(t_BKDReader$IndexTree *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNodeID());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_BKDReader$IndexTree_get__numLeaves(t_BKDReader$IndexTree *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumLeaves());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_BKDReader$IndexTree_get__splitDim(t_BKDReader$IndexTree *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSplitDim());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_BKDReader$IndexTree_get__splitDimValue(t_BKDReader$IndexTree *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getSplitDimValue());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_BKDReader$IndexTree_get__splitPackedValue(t_BKDReader$IndexTree *self, void *data)
          {
            JArray< jbyte > value((jobject) NULL);
            OBJ_CALL(value = self->object.getSplitPackedValue());
            return value.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/DistinctValuesCollector$GroupCount.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *DistinctValuesCollector$GroupCount::class$ = NULL;
          jmethodID *DistinctValuesCollector$GroupCount::mids$ = NULL;
          jfieldID *DistinctValuesCollector$GroupCount::fids$ = NULL;
          bool DistinctValuesCollector$GroupCount::live$ = false;

          jclass DistinctValuesCollector$GroupCount::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/DistinctValuesCollector$GroupCount");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d9e61008f3b32536] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;Ljava/util/Set;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");
              fids$[fid_uniqueValues] = env->getFieldID(cls, "uniqueValues", "Ljava/util/Set;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DistinctValuesCollector$GroupCount::DistinctValuesCollector$GroupCount(const ::java::lang::Object & a0, const ::java::util::Set & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d9e61008f3b32536, a0.this$, a1.this$)) {}

          ::java::lang::Object DistinctValuesCollector$GroupCount::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }

          ::java::util::Set DistinctValuesCollector$GroupCount::_get_uniqueValues() const
          {
            return ::java::util::Set(env->getObjectField(this$, fids$[fid_uniqueValues]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_DistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DistinctValuesCollector$GroupCount_of_(t_DistinctValuesCollector$GroupCount *self, PyObject *args);
          static int t_DistinctValuesCollector$GroupCount_init_(t_DistinctValuesCollector$GroupCount *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DistinctValuesCollector$GroupCount_get__groupValue(t_DistinctValuesCollector$GroupCount *self, void *data);
          static PyObject *t_DistinctValuesCollector$GroupCount_get__uniqueValues(t_DistinctValuesCollector$GroupCount *self, void *data);

          static PyObject *t_DistinctValuesCollector$GroupCount_get__parameters_(t_DistinctValuesCollector$GroupCount *self, void *data);
          static PyGetSetDef t_DistinctValuesCollector$GroupCount__fields_[] = {
            DECLARE_GET_FIELD(t_DistinctValuesCollector$GroupCount, groupValue),
            DECLARE_GET_FIELD(t_DistinctValuesCollector$GroupCount, uniqueValues),
            DECLARE_GET_FIELD(t_DistinctValuesCollector$GroupCount, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DistinctValuesCollector$GroupCount__methods_[] = {
            DECLARE_METHOD(t_DistinctValuesCollector$GroupCount, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistinctValuesCollector$GroupCount, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistinctValuesCollector$GroupCount, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DistinctValuesCollector$GroupCount)[] = {
            { Py_tp_methods, t_DistinctValuesCollector$GroupCount__methods_ },
            { Py_tp_init, (void *) t_DistinctValuesCollector$GroupCount_init_ },
            { Py_tp_getset, t_DistinctValuesCollector$GroupCount__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DistinctValuesCollector$GroupCount)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(DistinctValuesCollector$GroupCount, t_DistinctValuesCollector$GroupCount, DistinctValuesCollector$GroupCount);
          PyObject *t_DistinctValuesCollector$GroupCount::wrap_Object(const DistinctValuesCollector$GroupCount& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_DistinctValuesCollector$GroupCount::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DistinctValuesCollector$GroupCount *self = (t_DistinctValuesCollector$GroupCount *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_DistinctValuesCollector$GroupCount::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_DistinctValuesCollector$GroupCount::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DistinctValuesCollector$GroupCount *self = (t_DistinctValuesCollector$GroupCount *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_DistinctValuesCollector$GroupCount::install(PyObject *module)
          {
            installType(&PY_TYPE(DistinctValuesCollector$GroupCount), &PY_TYPE_DEF(DistinctValuesCollector$GroupCount), module, "DistinctValuesCollector$GroupCount", 0);
          }

          void t_DistinctValuesCollector$GroupCount::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DistinctValuesCollector$GroupCount), "class_", make_descriptor(DistinctValuesCollector$GroupCount::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DistinctValuesCollector$GroupCount), "wrapfn_", make_descriptor(t_DistinctValuesCollector$GroupCount::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DistinctValuesCollector$GroupCount), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DistinctValuesCollector$GroupCount::initializeClass, 1)))
              return NULL;
            return t_DistinctValuesCollector$GroupCount::wrap_Object(DistinctValuesCollector$GroupCount(((t_DistinctValuesCollector$GroupCount *) arg)->object.this$));
          }
          static PyObject *t_DistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DistinctValuesCollector$GroupCount::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DistinctValuesCollector$GroupCount_of_(t_DistinctValuesCollector$GroupCount *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_DistinctValuesCollector$GroupCount_init_(t_DistinctValuesCollector$GroupCount *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::util::Set a1((jobject) NULL);
            PyTypeObject **p1;
            DistinctValuesCollector$GroupCount object((jobject) NULL);

            if (!parseArgs(args, "oK", ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
            {
              INT_CALL(object = DistinctValuesCollector$GroupCount(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_DistinctValuesCollector$GroupCount_get__parameters_(t_DistinctValuesCollector$GroupCount *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_DistinctValuesCollector$GroupCount_get__groupValue(t_DistinctValuesCollector$GroupCount *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_DistinctValuesCollector$GroupCount_get__uniqueValues(t_DistinctValuesCollector$GroupCount *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object._get_uniqueValues());
            return ::java::util::t_Set::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKBigramFilter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKBigramFilter::class$ = NULL;
          jmethodID *CJKBigramFilter::mids$ = NULL;
          bool CJKBigramFilter::live$ = false;
          ::java::lang::String *CJKBigramFilter::DOUBLE_TYPE = NULL;
          jint CJKBigramFilter::HAN = (jint) 0;
          jint CJKBigramFilter::HANGUL = (jint) 0;
          jint CJKBigramFilter::HIRAGANA = (jint) 0;
          jint CJKBigramFilter::KATAKANA = (jint) 0;
          ::java::lang::String *CJKBigramFilter::SINGLE_TYPE = NULL;

          jclass CJKBigramFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKBigramFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_ec84dcad1ccbb797] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_66cff404b0168626] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;IZ)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DOUBLE_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "DOUBLE_TYPE", "Ljava/lang/String;"));
              HAN = env->getStaticIntField(cls, "HAN");
              HANGUL = env->getStaticIntField(cls, "HANGUL");
              HIRAGANA = env->getStaticIntField(cls, "HIRAGANA");
              KATAKANA = env->getStaticIntField(cls, "KATAKANA");
              SINGLE_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "SINGLE_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKBigramFilter::CJKBigramFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          CJKBigramFilter::CJKBigramFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ec84dcad1ccbb797, a0.this$, a1)) {}

          CJKBigramFilter::CJKBigramFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_66cff404b0168626, a0.this$, a1, a2)) {}

          jboolean CJKBigramFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void CJKBigramFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKBigramFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKBigramFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKBigramFilter_init_(t_CJKBigramFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKBigramFilter_incrementToken(t_CJKBigramFilter *self, PyObject *args);
          static PyObject *t_CJKBigramFilter_reset(t_CJKBigramFilter *self, PyObject *args);

          static PyMethodDef t_CJKBigramFilter__methods_[] = {
            DECLARE_METHOD(t_CJKBigramFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKBigramFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKBigramFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CJKBigramFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CJKBigramFilter)[] = {
            { Py_tp_methods, t_CJKBigramFilter__methods_ },
            { Py_tp_init, (void *) t_CJKBigramFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CJKBigramFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(CJKBigramFilter, t_CJKBigramFilter, CJKBigramFilter);

          void t_CJKBigramFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKBigramFilter), &PY_TYPE_DEF(CJKBigramFilter), module, "CJKBigramFilter", 0);
          }

          void t_CJKBigramFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKBigramFilter), "class_", make_descriptor(CJKBigramFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKBigramFilter), "wrapfn_", make_descriptor(t_CJKBigramFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKBigramFilter), "boxfn_", make_descriptor(boxObject));
            env->getClass(CJKBigramFilter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKBigramFilter), "DOUBLE_TYPE", make_descriptor(j2p(*CJKBigramFilter::DOUBLE_TYPE)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKBigramFilter), "HAN", make_descriptor(CJKBigramFilter::HAN));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKBigramFilter), "HANGUL", make_descriptor(CJKBigramFilter::HANGUL));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKBigramFilter), "HIRAGANA", make_descriptor(CJKBigramFilter::HIRAGANA));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKBigramFilter), "KATAKANA", make_descriptor(CJKBigramFilter::KATAKANA));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKBigramFilter), "SINGLE_TYPE", make_descriptor(j2p(*CJKBigramFilter::SINGLE_TYPE)));
          }

          static PyObject *t_CJKBigramFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKBigramFilter::initializeClass, 1)))
              return NULL;
            return t_CJKBigramFilter::wrap_Object(CJKBigramFilter(((t_CJKBigramFilter *) arg)->object.this$));
          }
          static PyObject *t_CJKBigramFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKBigramFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKBigramFilter_init_(t_CJKBigramFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                CJKBigramFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = CJKBigramFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                CJKBigramFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CJKBigramFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jboolean a2;
                CJKBigramFilter object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = CJKBigramFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKBigramFilter_incrementToken(t_CJKBigramFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(CJKBigramFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CJKBigramFilter_reset(t_CJKBigramFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CJKBigramFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoS2ShapeFactory.h"
#include "org/apache/lucene/spatial3d/geom/GeoPolygon.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoS2ShapeFactory::class$ = NULL;
          jmethodID *GeoS2ShapeFactory::mids$ = NULL;
          bool GeoS2ShapeFactory::live$ = false;

          jclass GeoS2ShapeFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoS2ShapeFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_makeGeoS2Shape_ffa406210edb76dd] = env->getStaticMethodID(cls, "makeGeoS2Shape", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/GeoPoint;Lorg/apache/lucene/spatial3d/geom/GeoPoint;Lorg/apache/lucene/spatial3d/geom/GeoPoint;Lorg/apache/lucene/spatial3d/geom/GeoPoint;)Lorg/apache/lucene/spatial3d/geom/GeoPolygon;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::spatial3d::geom::GeoPolygon GeoS2ShapeFactory::makeGeoS2Shape(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a2, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a3, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::GeoPolygon(env->callStaticObjectMethod(cls, mids$[mid_makeGeoS2Shape_ffa406210edb76dd], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoS2ShapeFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoS2ShapeFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoS2ShapeFactory_makeGeoS2Shape(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_GeoS2ShapeFactory__methods_[] = {
            DECLARE_METHOD(t_GeoS2ShapeFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoS2ShapeFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoS2ShapeFactory, makeGeoS2Shape, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoS2ShapeFactory)[] = {
            { Py_tp_methods, t_GeoS2ShapeFactory__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoS2ShapeFactory)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GeoS2ShapeFactory, t_GeoS2ShapeFactory, GeoS2ShapeFactory);

          void t_GeoS2ShapeFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoS2ShapeFactory), &PY_TYPE_DEF(GeoS2ShapeFactory), module, "GeoS2ShapeFactory", 0);
          }

          void t_GeoS2ShapeFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoS2ShapeFactory), "class_", make_descriptor(GeoS2ShapeFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoS2ShapeFactory), "wrapfn_", make_descriptor(t_GeoS2ShapeFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoS2ShapeFactory), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoS2ShapeFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoS2ShapeFactory::initializeClass, 1)))
              return NULL;
            return t_GeoS2ShapeFactory::wrap_Object(GeoS2ShapeFactory(((t_GeoS2ShapeFactory *) arg)->object.this$));
          }
          static PyObject *t_GeoS2ShapeFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoS2ShapeFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoS2ShapeFactory_makeGeoS2Shape(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::GeoPoint a2((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::GeoPoint a3((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::GeoPoint a4((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::GeoPolygon result((jobject) NULL);

            if (!parseArgs(args, "kkkkk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::GeoS2ShapeFactory::makeGeoS2Shape(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::spatial3d::geom::t_GeoPolygon::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeGeoS2Shape", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/payloads/PayloadSpanCollector.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/search/spans/SpanCollector.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace payloads {

        ::java::lang::Class *PayloadSpanCollector::class$ = NULL;
        jmethodID *PayloadSpanCollector::mids$ = NULL;
        bool PayloadSpanCollector::live$ = false;

        jclass PayloadSpanCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/payloads/PayloadSpanCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_collectLeaf_a1c6efa50e122f38] = env->getMethodID(cls, "collectLeaf", "(Lorg/apache/lucene/index/PostingsEnum;ILorg/apache/lucene/index/Term;)V");
            mids$[mid_getPayloads_d4dfbf7a26ff41df] = env->getMethodID(cls, "getPayloads", "()Ljava/util/Collection;");
            mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PayloadSpanCollector::PayloadSpanCollector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void PayloadSpanCollector::collectLeaf(const ::org::apache::lucene::index::PostingsEnum & a0, jint a1, const ::org::apache::lucene::index::Term & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_collectLeaf_a1c6efa50e122f38], a0.this$, a1, a2.this$);
        }

        ::java::util::Collection PayloadSpanCollector::getPayloads() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayloads_d4dfbf7a26ff41df]));
        }

        void PayloadSpanCollector::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace payloads {
        static PyObject *t_PayloadSpanCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PayloadSpanCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PayloadSpanCollector_init_(t_PayloadSpanCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PayloadSpanCollector_collectLeaf(t_PayloadSpanCollector *self, PyObject *args);
        static PyObject *t_PayloadSpanCollector_getPayloads(t_PayloadSpanCollector *self);
        static PyObject *t_PayloadSpanCollector_reset(t_PayloadSpanCollector *self);
        static PyObject *t_PayloadSpanCollector_get__payloads(t_PayloadSpanCollector *self, void *data);
        static PyGetSetDef t_PayloadSpanCollector__fields_[] = {
          DECLARE_GET_FIELD(t_PayloadSpanCollector, payloads),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PayloadSpanCollector__methods_[] = {
          DECLARE_METHOD(t_PayloadSpanCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PayloadSpanCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PayloadSpanCollector, collectLeaf, METH_VARARGS),
          DECLARE_METHOD(t_PayloadSpanCollector, getPayloads, METH_NOARGS),
          DECLARE_METHOD(t_PayloadSpanCollector, reset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PayloadSpanCollector)[] = {
          { Py_tp_methods, t_PayloadSpanCollector__methods_ },
          { Py_tp_init, (void *) t_PayloadSpanCollector_init_ },
          { Py_tp_getset, t_PayloadSpanCollector__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PayloadSpanCollector)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PayloadSpanCollector, t_PayloadSpanCollector, PayloadSpanCollector);

        void t_PayloadSpanCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(PayloadSpanCollector), &PY_TYPE_DEF(PayloadSpanCollector), module, "PayloadSpanCollector", 0);
        }

        void t_PayloadSpanCollector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadSpanCollector), "class_", make_descriptor(PayloadSpanCollector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadSpanCollector), "wrapfn_", make_descriptor(t_PayloadSpanCollector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadSpanCollector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PayloadSpanCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PayloadSpanCollector::initializeClass, 1)))
            return NULL;
          return t_PayloadSpanCollector::wrap_Object(PayloadSpanCollector(((t_PayloadSpanCollector *) arg)->object.this$));
        }
        static PyObject *t_PayloadSpanCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PayloadSpanCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PayloadSpanCollector_init_(t_PayloadSpanCollector *self, PyObject *args, PyObject *kwds)
        {
          PayloadSpanCollector object((jobject) NULL);

          INT_CALL(object = PayloadSpanCollector());
          self->object = object;

          return 0;
        }

        static PyObject *t_PayloadSpanCollector_collectLeaf(t_PayloadSpanCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::PostingsEnum a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::index::Term a2((jobject) NULL);

          if (!parseArgs(args, "kIk", ::org::apache::lucene::index::PostingsEnum::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.collectLeaf(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "collectLeaf", args);
          return NULL;
        }

        static PyObject *t_PayloadSpanCollector_getPayloads(t_PayloadSpanCollector *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getPayloads());
          return ::java::util::t_Collection::wrap_Object(result, ::java::lang::PY_TYPE(Object));
        }

        static PyObject *t_PayloadSpanCollector_reset(t_PayloadSpanCollector *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }

        static PyObject *t_PayloadSpanCollector_get__payloads(t_PayloadSpanCollector *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayloads());
          return ::java::util::t_Collection::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiReader.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader$CacheHelper.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiReader::class$ = NULL;
        jmethodID *MultiReader::mids$ = NULL;
        bool MultiReader::live$ = false;

        jclass MultiReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_00d04f08cc6f95a7] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/IndexReader;)V");
            mids$[mid_init$_aa10ede082e41a67] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/IndexReader;Z)V");
            mids$[mid_init$_bf398e41acc52c4b] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/IndexReader;Ljava/util/Comparator;Z)V");
            mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6] = env->getMethodID(cls, "getReaderCacheHelper", "()Lorg/apache/lucene/index/IndexReader$CacheHelper;");
            mids$[mid_doClose_f2cc1bce94666404] = env->getMethodID(cls, "doClose", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiReader::MultiReader(const JArray< ::org::apache::lucene::index::IndexReader > & a0) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_00d04f08cc6f95a7, a0.this$)) {}

        MultiReader::MultiReader(const JArray< ::org::apache::lucene::index::IndexReader > & a0, jboolean a1) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_aa10ede082e41a67, a0.this$, a1)) {}

        MultiReader::MultiReader(const JArray< ::org::apache::lucene::index::IndexReader > & a0, const ::java::util::Comparator & a1, jboolean a2) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_bf398e41acc52c4b, a0.this$, a1.this$, a2)) {}

        ::org::apache::lucene::index::IndexReader$CacheHelper MultiReader::getReaderCacheHelper() const
        {
          return ::org::apache::lucene::index::IndexReader$CacheHelper(env->callObjectMethod(this$, mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiReader_of_(t_MultiReader *self, PyObject *args);
        static int t_MultiReader_init_(t_MultiReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiReader_getReaderCacheHelper(t_MultiReader *self, PyObject *args);
        static PyObject *t_MultiReader_get__readerCacheHelper(t_MultiReader *self, void *data);
        static PyObject *t_MultiReader_get__parameters_(t_MultiReader *self, void *data);
        static PyGetSetDef t_MultiReader__fields_[] = {
          DECLARE_GET_FIELD(t_MultiReader, readerCacheHelper),
          DECLARE_GET_FIELD(t_MultiReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiReader__methods_[] = {
          DECLARE_METHOD(t_MultiReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiReader, of_, METH_VARARGS),
          DECLARE_METHOD(t_MultiReader, getReaderCacheHelper, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiReader)[] = {
          { Py_tp_methods, t_MultiReader__methods_ },
          { Py_tp_init, (void *) t_MultiReader_init_ },
          { Py_tp_getset, t_MultiReader__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiReader)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::BaseCompositeReader),
          NULL
        };

        DEFINE_TYPE(MultiReader, t_MultiReader, MultiReader);
        PyObject *t_MultiReader::wrap_Object(const MultiReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiReader *self = (t_MultiReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiReader *self = (t_MultiReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiReader::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiReader), &PY_TYPE_DEF(MultiReader), module, "MultiReader", 0);
        }

        void t_MultiReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiReader), "class_", make_descriptor(MultiReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiReader), "wrapfn_", make_descriptor(t_MultiReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiReader::initializeClass, 1)))
            return NULL;
          return t_MultiReader::wrap_Object(MultiReader(((t_MultiReader *) arg)->object.this$));
        }
        static PyObject *t_MultiReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiReader_of_(t_MultiReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MultiReader_init_(t_MultiReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::IndexReader > a0((jobject) NULL);
              MultiReader object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
              {
                INT_CALL(object = MultiReader(a0));
                self->object = object;
                self->parameters[0] = ::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< ::org::apache::lucene::index::IndexReader > a0((jobject) NULL);
              jboolean a1;
              MultiReader object((jobject) NULL);

              if (!parseArgs(args, "[kZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MultiReader(a0, a1));
                self->object = object;
                self->parameters[0] = ::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< ::org::apache::lucene::index::IndexReader > a0((jobject) NULL);
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              MultiReader object((jobject) NULL);

              if (!parseArgs(args, "[kKZ", ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_, &a2))
              {
                INT_CALL(object = MultiReader(a0, a1, a2));
                self->object = object;
                self->parameters[0] = ::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiReader_getReaderCacheHelper(t_MultiReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getReaderCacheHelper());
            return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MultiReader), (PyObject *) self, "getReaderCacheHelper", args, 2);
        }
        static PyObject *t_MultiReader_get__parameters_(t_MultiReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_MultiReader_get__readerCacheHelper(t_MultiReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper value((jobject) NULL);
          OBJ_CALL(value = self->object.getReaderCacheHelper());
          return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockVerifyServer.h"
#include "java/lang/String.h"
#include "java/lang/Exception.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockVerifyServer::class$ = NULL;
        jmethodID *LockVerifyServer::mids$ = NULL;
        bool LockVerifyServer::live$ = false;
        jint LockVerifyServer::START_GUN_SIGNAL = (jint) 0;

        jclass LockVerifyServer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockVerifyServer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_main_2fc318b999a7aba3] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            START_GUN_SIGNAL = env->getStaticIntField(cls, "START_GUN_SIGNAL");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockVerifyServer::LockVerifyServer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void LockVerifyServer::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_2fc318b999a7aba3], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockVerifyServer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockVerifyServer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockVerifyServer_init_(t_LockVerifyServer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LockVerifyServer_main(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_LockVerifyServer__methods_[] = {
          DECLARE_METHOD(t_LockVerifyServer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockVerifyServer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockVerifyServer, main, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LockVerifyServer)[] = {
          { Py_tp_methods, t_LockVerifyServer__methods_ },
          { Py_tp_init, (void *) t_LockVerifyServer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LockVerifyServer)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LockVerifyServer, t_LockVerifyServer, LockVerifyServer);

        void t_LockVerifyServer::install(PyObject *module)
        {
          installType(&PY_TYPE(LockVerifyServer), &PY_TYPE_DEF(LockVerifyServer), module, "LockVerifyServer", 0);
        }

        void t_LockVerifyServer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LockVerifyServer), "class_", make_descriptor(LockVerifyServer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LockVerifyServer), "wrapfn_", make_descriptor(t_LockVerifyServer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LockVerifyServer), "boxfn_", make_descriptor(boxObject));
          env->getClass(LockVerifyServer::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(LockVerifyServer), "START_GUN_SIGNAL", make_descriptor(LockVerifyServer::START_GUN_SIGNAL));
        }

        static PyObject *t_LockVerifyServer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockVerifyServer::initializeClass, 1)))
            return NULL;
          return t_LockVerifyServer::wrap_Object(LockVerifyServer(((t_LockVerifyServer *) arg)->object.this$));
        }
        static PyObject *t_LockVerifyServer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockVerifyServer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockVerifyServer_init_(t_LockVerifyServer *self, PyObject *args, PyObject *kwds)
        {
          LockVerifyServer object((jobject) NULL);

          INT_CALL(object = LockVerifyServer());
          self->object = object;

          return 0;
        }

        static PyObject *t_LockVerifyServer_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::store::LockVerifyServer::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/LongPoint.h"
#include "java/lang/Long.h"
#include "java/util/Collection.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *LongPoint::class$ = NULL;
        jmethodID *LongPoint::mids$ = NULL;
        bool LongPoint::live$ = false;

        jclass LongPoint::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/LongPoint");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_713574b80c0518e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[J)V");
            mids$[mid_decodeDimension_d4ee5c8094735e0d] = env->getStaticMethodID(cls, "decodeDimension", "([BI)J");
            mids$[mid_encodeDimension_d29578c9e7af98d1] = env->getStaticMethodID(cls, "encodeDimension", "(J[BI)V");
            mids$[mid_newDistanceFeatureQuery_892c68083cdcf4d3] = env->getStaticMethodID(cls, "newDistanceFeatureQuery", "(Ljava/lang/String;FJJ)Lorg/apache/lucene/search/Query;");
            mids$[mid_newExactQuery_e80322a2f14dee9e] = env->getStaticMethodID(cls, "newExactQuery", "(Ljava/lang/String;J)Lorg/apache/lucene/search/Query;");
            mids$[mid_newRangeQuery_e8bfb6169bf1df05] = env->getStaticMethodID(cls, "newRangeQuery", "(Ljava/lang/String;[J[J)Lorg/apache/lucene/search/Query;");
            mids$[mid_newRangeQuery_fea81632216932e2] = env->getStaticMethodID(cls, "newRangeQuery", "(Ljava/lang/String;JJ)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSetQuery_8e65ec12af2ce04c] = env->getStaticMethodID(cls, "newSetQuery", "(Ljava/lang/String;[J)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSetQuery_263cb7d6a0b161ae] = env->getStaticMethodID(cls, "newSetQuery", "(Ljava/lang/String;Ljava/util/Collection;)Lorg/apache/lucene/search/Query;");
            mids$[mid_numericValue_f5813404cc5e3a1e] = env->getMethodID(cls, "numericValue", "()Ljava/lang/Number;");
            mids$[mid_pack_07db68d069c15626] = env->getStaticMethodID(cls, "pack", "([J)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_setBytesValue_0bdfd2603b7490a8] = env->getMethodID(cls, "setBytesValue", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setLongValue_9c778c9bce6694df] = env->getMethodID(cls, "setLongValue", "(J)V");
            mids$[mid_setLongValues_7f1c853abc1a9198] = env->getMethodID(cls, "setLongValues", "([J)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongPoint::LongPoint(const ::java::lang::String & a0, const JArray< jlong > & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_713574b80c0518e2, a0.this$, a1.this$)) {}

        jlong LongPoint::decodeDimension(const JArray< jbyte > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_decodeDimension_d4ee5c8094735e0d], a0.this$, a1);
        }

        void LongPoint::encodeDimension(jlong a0, const JArray< jbyte > & a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_encodeDimension_d29578c9e7af98d1], a0, a1.this$, a2);
        }

        ::org::apache::lucene::search::Query LongPoint::newDistanceFeatureQuery(const ::java::lang::String & a0, jfloat a1, jlong a2, jlong a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newDistanceFeatureQuery_892c68083cdcf4d3], a0.this$, a1, a2, a3));
        }

        ::org::apache::lucene::search::Query LongPoint::newExactQuery(const ::java::lang::String & a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newExactQuery_e80322a2f14dee9e], a0.this$, a1));
        }

        ::org::apache::lucene::search::Query LongPoint::newRangeQuery(const ::java::lang::String & a0, const JArray< jlong > & a1, const JArray< jlong > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newRangeQuery_e8bfb6169bf1df05], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query LongPoint::newRangeQuery(const ::java::lang::String & a0, jlong a1, jlong a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newRangeQuery_fea81632216932e2], a0.this$, a1, a2));
        }

        ::org::apache::lucene::search::Query LongPoint::newSetQuery(const ::java::lang::String & a0, const JArray< jlong > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSetQuery_8e65ec12af2ce04c], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query LongPoint::newSetQuery(const ::java::lang::String & a0, const ::java::util::Collection & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSetQuery_263cb7d6a0b161ae], a0.this$, a1.this$));
        }

        ::java::lang::Number LongPoint::numericValue() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_numericValue_f5813404cc5e3a1e]));
        }

        ::org::apache::lucene::util::BytesRef LongPoint::pack(const JArray< jlong > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_pack_07db68d069c15626], a0.this$));
        }

        void LongPoint::setBytesValue(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesValue_0bdfd2603b7490a8], a0.this$);
        }

        void LongPoint::setLongValue(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLongValue_9c778c9bce6694df], a0);
        }

        void LongPoint::setLongValues(const JArray< jlong > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLongValues_7f1c853abc1a9198], a0.this$);
        }

        ::java::lang::String LongPoint::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_LongPoint_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongPoint_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongPoint_init_(t_LongPoint *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongPoint_decodeDimension(PyTypeObject *type, PyObject *args);
        static PyObject *t_LongPoint_encodeDimension(PyTypeObject *type, PyObject *args);
        static PyObject *t_LongPoint_newDistanceFeatureQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LongPoint_newExactQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LongPoint_newRangeQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LongPoint_newSetQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LongPoint_numericValue(t_LongPoint *self, PyObject *args);
        static PyObject *t_LongPoint_pack(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongPoint_setBytesValue(t_LongPoint *self, PyObject *args);
        static PyObject *t_LongPoint_setLongValue(t_LongPoint *self, PyObject *args);
        static PyObject *t_LongPoint_setLongValues(t_LongPoint *self, PyObject *arg);
        static PyObject *t_LongPoint_toString(t_LongPoint *self, PyObject *args);
        static int t_LongPoint_set__bytesValue(t_LongPoint *self, PyObject *arg, void *data);
        static int t_LongPoint_set__longValue(t_LongPoint *self, PyObject *arg, void *data);
        static int t_LongPoint_set__longValues(t_LongPoint *self, PyObject *arg, void *data);
        static PyGetSetDef t_LongPoint__fields_[] = {
          DECLARE_SET_FIELD(t_LongPoint, bytesValue),
          DECLARE_SET_FIELD(t_LongPoint, longValue),
          DECLARE_SET_FIELD(t_LongPoint, longValues),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LongPoint__methods_[] = {
          DECLARE_METHOD(t_LongPoint, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongPoint, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongPoint, decodeDimension, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LongPoint, encodeDimension, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LongPoint, newDistanceFeatureQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LongPoint, newExactQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LongPoint, newRangeQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LongPoint, newSetQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LongPoint, numericValue, METH_VARARGS),
          DECLARE_METHOD(t_LongPoint, pack, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongPoint, setBytesValue, METH_VARARGS),
          DECLARE_METHOD(t_LongPoint, setLongValue, METH_VARARGS),
          DECLARE_METHOD(t_LongPoint, setLongValues, METH_O),
          DECLARE_METHOD(t_LongPoint, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LongPoint)[] = {
          { Py_tp_methods, t_LongPoint__methods_ },
          { Py_tp_init, (void *) t_LongPoint_init_ },
          { Py_tp_getset, t_LongPoint__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LongPoint)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(LongPoint, t_LongPoint, LongPoint);

        void t_LongPoint::install(PyObject *module)
        {
          installType(&PY_TYPE(LongPoint), &PY_TYPE_DEF(LongPoint), module, "LongPoint", 0);
        }

        void t_LongPoint::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongPoint), "class_", make_descriptor(LongPoint::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongPoint), "wrapfn_", make_descriptor(t_LongPoint::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongPoint), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LongPoint_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongPoint::initializeClass, 1)))
            return NULL;
          return t_LongPoint::wrap_Object(LongPoint(((t_LongPoint *) arg)->object.this$));
        }
        static PyObject *t_LongPoint_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongPoint::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongPoint_init_(t_LongPoint *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          LongPoint object((jobject) NULL);

          if (!parseArgs(args, "s[J", &a0, &a1))
          {
            INT_CALL(object = LongPoint(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LongPoint_decodeDimension(PyTypeObject *type, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jlong result;

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LongPoint::decodeDimension(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "decodeDimension", args);
          return NULL;
        }

        static PyObject *t_LongPoint_encodeDimension(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          JArray< jbyte > a1((jobject) NULL);
          jint a2;

          if (!parseArgs(args, "J[BI", &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::document::LongPoint::encodeDimension(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "encodeDimension", args);
          return NULL;
        }

        static PyObject *t_LongPoint_newDistanceFeatureQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jfloat a1;
          jlong a2;
          jlong a3;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sFJJ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LongPoint::newDistanceFeatureQuery(a0, a1, a2, a3));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newDistanceFeatureQuery", args);
          return NULL;
        }

        static PyObject *t_LongPoint_newExactQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LongPoint::newExactQuery(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newExactQuery", args);
          return NULL;
        }

        static PyObject *t_LongPoint_newRangeQuery(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jlong > a1((jobject) NULL);
              JArray< jlong > a2((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "s[J[J", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::LongPoint::newRangeQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jlong a1;
              jlong a2;
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::LongPoint::newRangeQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newRangeQuery", args);
          return NULL;
        }

        static PyObject *t_LongPoint_newSetQuery(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jlong > a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "s[J", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::LongPoint::newSetQuery(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::Collection a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sK", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::LongPoint::newSetQuery(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newSetQuery", args);
          return NULL;
        }

        static PyObject *t_LongPoint_numericValue(t_LongPoint *self, PyObject *args)
        {
          ::java::lang::Number result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numericValue());
            return ::java::lang::t_Number::wrap_Object(result);
          }

          return callSuper(PY_TYPE(LongPoint), (PyObject *) self, "numericValue", args, 2);
        }

        static PyObject *t_LongPoint_pack(PyTypeObject *type, PyObject *arg)
        {
          JArray< jlong > a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "[J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LongPoint::pack(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "pack", arg);
          return NULL;
        }

        static PyObject *t_LongPoint_setBytesValue(t_LongPoint *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setBytesValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(LongPoint), (PyObject *) self, "setBytesValue", args, 2);
        }

        static PyObject *t_LongPoint_setLongValue(t_LongPoint *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.setLongValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(LongPoint), (PyObject *) self, "setLongValue", args, 2);
        }

        static PyObject *t_LongPoint_setLongValues(t_LongPoint *self, PyObject *arg)
        {
          JArray< jlong > a0((jobject) NULL);

          if (!parseArg(arg, "[J", &a0))
          {
            OBJ_CALL(self->object.setLongValues(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLongValues", arg);
          return NULL;
        }

        static PyObject *t_LongPoint_toString(t_LongPoint *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(LongPoint), (PyObject *) self, "toString", args, 2);
        }

        static int t_LongPoint_set__bytesValue(t_LongPoint *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setBytesValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bytesValue", arg);
          return -1;
        }

        static int t_LongPoint_set__longValue(t_LongPoint *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setLongValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "longValue", arg);
          return -1;
        }

        static int t_LongPoint_set__longValues(t_LongPoint *self, PyObject *arg, void *data)
        {
          {
            JArray< jlong > value((jobject) NULL);
            if (!parseArg(arg, "[J", &value))
            {
              INT_CALL(self->object.setLongValues(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "longValues", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/TokenStreamToAutomaton.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *TokenStreamToAutomaton::class$ = NULL;
        jmethodID *TokenStreamToAutomaton::mids$ = NULL;
        bool TokenStreamToAutomaton::live$ = false;
        jint TokenStreamToAutomaton::HOLE = (jint) 0;
        jint TokenStreamToAutomaton::POS_SEP = (jint) 0;

        jclass TokenStreamToAutomaton::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/TokenStreamToAutomaton");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_setFinalOffsetGapAsHole_9d72768e8fdce2b7] = env->getMethodID(cls, "setFinalOffsetGapAsHole", "(Z)V");
            mids$[mid_setPreservePositionIncrements_9d72768e8fdce2b7] = env->getMethodID(cls, "setPreservePositionIncrements", "(Z)V");
            mids$[mid_setUnicodeArcs_9d72768e8fdce2b7] = env->getMethodID(cls, "setUnicodeArcs", "(Z)V");
            mids$[mid_toAutomaton_ad28492925218690] = env->getMethodID(cls, "toAutomaton", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/util/automaton/Automaton;");
            mids$[mid_changeToken_858d77d551759ace] = env->getMethodID(cls, "changeToken", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            HOLE = env->getStaticIntField(cls, "HOLE");
            POS_SEP = env->getStaticIntField(cls, "POS_SEP");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TokenStreamToAutomaton::TokenStreamToAutomaton() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void TokenStreamToAutomaton::setFinalOffsetGapAsHole(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFinalOffsetGapAsHole_9d72768e8fdce2b7], a0);
        }

        void TokenStreamToAutomaton::setPreservePositionIncrements(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPreservePositionIncrements_9d72768e8fdce2b7], a0);
        }

        void TokenStreamToAutomaton::setUnicodeArcs(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setUnicodeArcs_9d72768e8fdce2b7], a0);
        }

        ::org::apache::lucene::util::automaton::Automaton TokenStreamToAutomaton::toAutomaton(const ::org::apache::lucene::analysis::TokenStream & a0) const
        {
          return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_ad28492925218690], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_TokenStreamToAutomaton_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenStreamToAutomaton_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TokenStreamToAutomaton_init_(t_TokenStreamToAutomaton *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TokenStreamToAutomaton_setFinalOffsetGapAsHole(t_TokenStreamToAutomaton *self, PyObject *arg);
        static PyObject *t_TokenStreamToAutomaton_setPreservePositionIncrements(t_TokenStreamToAutomaton *self, PyObject *arg);
        static PyObject *t_TokenStreamToAutomaton_setUnicodeArcs(t_TokenStreamToAutomaton *self, PyObject *arg);
        static PyObject *t_TokenStreamToAutomaton_toAutomaton(t_TokenStreamToAutomaton *self, PyObject *arg);
        static int t_TokenStreamToAutomaton_set__finalOffsetGapAsHole(t_TokenStreamToAutomaton *self, PyObject *arg, void *data);
        static int t_TokenStreamToAutomaton_set__preservePositionIncrements(t_TokenStreamToAutomaton *self, PyObject *arg, void *data);
        static int t_TokenStreamToAutomaton_set__unicodeArcs(t_TokenStreamToAutomaton *self, PyObject *arg, void *data);
        static PyGetSetDef t_TokenStreamToAutomaton__fields_[] = {
          DECLARE_SET_FIELD(t_TokenStreamToAutomaton, finalOffsetGapAsHole),
          DECLARE_SET_FIELD(t_TokenStreamToAutomaton, preservePositionIncrements),
          DECLARE_SET_FIELD(t_TokenStreamToAutomaton, unicodeArcs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TokenStreamToAutomaton__methods_[] = {
          DECLARE_METHOD(t_TokenStreamToAutomaton, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStreamToAutomaton, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStreamToAutomaton, setFinalOffsetGapAsHole, METH_O),
          DECLARE_METHOD(t_TokenStreamToAutomaton, setPreservePositionIncrements, METH_O),
          DECLARE_METHOD(t_TokenStreamToAutomaton, setUnicodeArcs, METH_O),
          DECLARE_METHOD(t_TokenStreamToAutomaton, toAutomaton, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TokenStreamToAutomaton)[] = {
          { Py_tp_methods, t_TokenStreamToAutomaton__methods_ },
          { Py_tp_init, (void *) t_TokenStreamToAutomaton_init_ },
          { Py_tp_getset, t_TokenStreamToAutomaton__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TokenStreamToAutomaton)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(TokenStreamToAutomaton, t_TokenStreamToAutomaton, TokenStreamToAutomaton);

        void t_TokenStreamToAutomaton::install(PyObject *module)
        {
          installType(&PY_TYPE(TokenStreamToAutomaton), &PY_TYPE_DEF(TokenStreamToAutomaton), module, "TokenStreamToAutomaton", 0);
        }

        void t_TokenStreamToAutomaton::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TokenStreamToAutomaton), "class_", make_descriptor(TokenStreamToAutomaton::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TokenStreamToAutomaton), "wrapfn_", make_descriptor(t_TokenStreamToAutomaton::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TokenStreamToAutomaton), "boxfn_", make_descriptor(boxObject));
          env->getClass(TokenStreamToAutomaton::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(TokenStreamToAutomaton), "HOLE", make_descriptor(TokenStreamToAutomaton::HOLE));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TokenStreamToAutomaton), "POS_SEP", make_descriptor(TokenStreamToAutomaton::POS_SEP));
        }

        static PyObject *t_TokenStreamToAutomaton_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TokenStreamToAutomaton::initializeClass, 1)))
            return NULL;
          return t_TokenStreamToAutomaton::wrap_Object(TokenStreamToAutomaton(((t_TokenStreamToAutomaton *) arg)->object.this$));
        }
        static PyObject *t_TokenStreamToAutomaton_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TokenStreamToAutomaton::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TokenStreamToAutomaton_init_(t_TokenStreamToAutomaton *self, PyObject *args, PyObject *kwds)
        {
          TokenStreamToAutomaton object((jobject) NULL);

          INT_CALL(object = TokenStreamToAutomaton());
          self->object = object;

          return 0;
        }

        static PyObject *t_TokenStreamToAutomaton_setFinalOffsetGapAsHole(t_TokenStreamToAutomaton *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setFinalOffsetGapAsHole(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFinalOffsetGapAsHole", arg);
          return NULL;
        }

        static PyObject *t_TokenStreamToAutomaton_setPreservePositionIncrements(t_TokenStreamToAutomaton *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setPreservePositionIncrements(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPreservePositionIncrements", arg);
          return NULL;
        }

        static PyObject *t_TokenStreamToAutomaton_setUnicodeArcs(t_TokenStreamToAutomaton *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setUnicodeArcs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setUnicodeArcs", arg);
          return NULL;
        }

        static PyObject *t_TokenStreamToAutomaton_toAutomaton(t_TokenStreamToAutomaton *self, PyObject *arg)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.toAutomaton(a0));
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "toAutomaton", arg);
          return NULL;
        }

        static int t_TokenStreamToAutomaton_set__finalOffsetGapAsHole(t_TokenStreamToAutomaton *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setFinalOffsetGapAsHole(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "finalOffsetGapAsHole", arg);
          return -1;
        }

        static int t_TokenStreamToAutomaton_set__preservePositionIncrements(t_TokenStreamToAutomaton *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setPreservePositionIncrements(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "preservePositionIncrements", arg);
          return -1;
        }

        static int t_TokenStreamToAutomaton_set__unicodeArcs(t_TokenStreamToAutomaton *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setUnicodeArcs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "unicodeArcs", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/String.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {

            ::java::lang::Class *Message::class$ = NULL;
            jmethodID *Message::mids$ = NULL;
            bool Message::live$ = false;

            jclass Message::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/messages/Message");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getArguments_6becf78ffd87a9bc] = env->getMethodID(cls, "getArguments", "()[Ljava/lang/Object;");
                mids$[mid_getKey_db9b55ba01e03e4b] = env->getMethodID(cls, "getKey", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_db9b55ba01e03e4b] = env->getMethodID(cls, "getLocalizedMessage", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_8cbdae2bb55ad99c] = env->getMethodID(cls, "getLocalizedMessage", "(Ljava/util/Locale;)Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JArray< ::java::lang::Object > Message::getArguments() const
            {
              return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getArguments_6becf78ffd87a9bc]));
            }

            ::java::lang::String Message::getKey() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getKey_db9b55ba01e03e4b]));
            }

            ::java::lang::String Message::getLocalizedMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_db9b55ba01e03e4b]));
            }

            ::java::lang::String Message::getLocalizedMessage(const ::java::util::Locale & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_8cbdae2bb55ad99c], a0.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {
            static PyObject *t_Message_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Message_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Message_getArguments(t_Message *self);
            static PyObject *t_Message_getKey(t_Message *self);
            static PyObject *t_Message_getLocalizedMessage(t_Message *self, PyObject *args);
            static PyObject *t_Message_get__arguments(t_Message *self, void *data);
            static PyObject *t_Message_get__key(t_Message *self, void *data);
            static PyObject *t_Message_get__localizedMessage(t_Message *self, void *data);
            static PyGetSetDef t_Message__fields_[] = {
              DECLARE_GET_FIELD(t_Message, arguments),
              DECLARE_GET_FIELD(t_Message, key),
              DECLARE_GET_FIELD(t_Message, localizedMessage),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Message__methods_[] = {
              DECLARE_METHOD(t_Message, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Message, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Message, getArguments, METH_NOARGS),
              DECLARE_METHOD(t_Message, getKey, METH_NOARGS),
              DECLARE_METHOD(t_Message, getLocalizedMessage, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(Message)[] = {
              { Py_tp_methods, t_Message__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_Message__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(Message)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(Message, t_Message, Message);

            void t_Message::install(PyObject *module)
            {
              installType(&PY_TYPE(Message), &PY_TYPE_DEF(Message), module, "Message", 0);
            }

            void t_Message::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(Message), "class_", make_descriptor(Message::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(Message), "wrapfn_", make_descriptor(t_Message::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(Message), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Message_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Message::initializeClass, 1)))
                return NULL;
              return t_Message::wrap_Object(Message(((t_Message *) arg)->object.this$));
            }
            static PyObject *t_Message_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Message::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_Message_getArguments(t_Message *self)
            {
              JArray< ::java::lang::Object > result((jobject) NULL);
              OBJ_CALL(result = self->object.getArguments());
              return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
            }

            static PyObject *t_Message_getKey(t_Message *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getKey());
              return j2p(result);
            }

            static PyObject *t_Message_getLocalizedMessage(t_Message *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ::java::lang::String result((jobject) NULL);
                  OBJ_CALL(result = self->object.getLocalizedMessage());
                  return j2p(result);
                }
                break;
               case 1:
                {
                  ::java::util::Locale a0((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                  {
                    OBJ_CALL(result = self->object.getLocalizedMessage(a0));
                    return j2p(result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "getLocalizedMessage", args);
              return NULL;
            }

            static PyObject *t_Message_get__arguments(t_Message *self, void *data)
            {
              JArray< ::java::lang::Object > value((jobject) NULL);
              OBJ_CALL(value = self->object.getArguments());
              return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
            }

            static PyObject *t_Message_get__key(t_Message *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getKey());
              return j2p(value);
            }

            static PyObject *t_Message_get__localizedMessage(t_Message *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocalizedMessage());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Normalization$NoNormalization.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Normalization$NoNormalization::class$ = NULL;
          jmethodID *Normalization$NoNormalization::mids$ = NULL;
          bool Normalization$NoNormalization::live$ = false;

          jclass Normalization$NoNormalization::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Normalization$NoNormalization");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_77a68ba236144920] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfn_761ab1c432346fd0] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Normalization$NoNormalization::Normalization$NoNormalization() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::search::Explanation Normalization$NoNormalization::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_77a68ba236144920], a0.this$, a1, a2));
          }

          jdouble Normalization$NoNormalization::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_tfn_761ab1c432346fd0], a0.this$, a1, a2);
          }

          ::java::lang::String Normalization$NoNormalization::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Normalization$NoNormalization_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Normalization$NoNormalization_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Normalization$NoNormalization_init_(t_Normalization$NoNormalization *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Normalization$NoNormalization_explain(t_Normalization$NoNormalization *self, PyObject *args);
          static PyObject *t_Normalization$NoNormalization_tfn(t_Normalization$NoNormalization *self, PyObject *args);
          static PyObject *t_Normalization$NoNormalization_toString(t_Normalization$NoNormalization *self, PyObject *args);

          static PyMethodDef t_Normalization$NoNormalization__methods_[] = {
            DECLARE_METHOD(t_Normalization$NoNormalization, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Normalization$NoNormalization, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Normalization$NoNormalization, explain, METH_VARARGS),
            DECLARE_METHOD(t_Normalization$NoNormalization, tfn, METH_VARARGS),
            DECLARE_METHOD(t_Normalization$NoNormalization, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Normalization$NoNormalization)[] = {
            { Py_tp_methods, t_Normalization$NoNormalization__methods_ },
            { Py_tp_init, (void *) t_Normalization$NoNormalization_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Normalization$NoNormalization)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Normalization),
            NULL
          };

          DEFINE_TYPE(Normalization$NoNormalization, t_Normalization$NoNormalization, Normalization$NoNormalization);

          void t_Normalization$NoNormalization::install(PyObject *module)
          {
            installType(&PY_TYPE(Normalization$NoNormalization), &PY_TYPE_DEF(Normalization$NoNormalization), module, "Normalization$NoNormalization", 0);
          }

          void t_Normalization$NoNormalization::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Normalization$NoNormalization), "class_", make_descriptor(Normalization$NoNormalization::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Normalization$NoNormalization), "wrapfn_", make_descriptor(t_Normalization$NoNormalization::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Normalization$NoNormalization), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Normalization$NoNormalization_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Normalization$NoNormalization::initializeClass, 1)))
              return NULL;
            return t_Normalization$NoNormalization::wrap_Object(Normalization$NoNormalization(((t_Normalization$NoNormalization *) arg)->object.this$));
          }
          static PyObject *t_Normalization$NoNormalization_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Normalization$NoNormalization::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Normalization$NoNormalization_init_(t_Normalization$NoNormalization *self, PyObject *args, PyObject *kwds)
          {
            Normalization$NoNormalization object((jobject) NULL);

            INT_CALL(object = Normalization$NoNormalization());
            self->object = object;

            return 0;
          }

          static PyObject *t_Normalization$NoNormalization_explain(t_Normalization$NoNormalization *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Normalization$NoNormalization), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_Normalization$NoNormalization_tfn(t_Normalization$NoNormalization *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            jdouble result;

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(Normalization$NoNormalization), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_Normalization$NoNormalization_toString(t_Normalization$NoNormalization *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Normalization$NoNormalization), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PointRangeQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PointRangeQuery::class$ = NULL;
        jmethodID *PointRangeQuery::mids$ = NULL;
        bool PointRangeQuery::live$ = false;

        jclass PointRangeQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PointRangeQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkArgs_f4cf1c4fd71b17c5] = env->getStaticMethodID(cls, "checkArgs", "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getBytesPerDim_9972fcc56b44e79d] = env->getMethodID(cls, "getBytesPerDim", "()I");
            mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getLowerPoint_cf386cdb1bbd339f] = env->getMethodID(cls, "getLowerPoint", "()[B");
            mids$[mid_getNumDims_9972fcc56b44e79d] = env->getMethodID(cls, "getNumDims", "()I");
            mids$[mid_getUpperPoint_cf386cdb1bbd339f] = env->getMethodID(cls, "getUpperPoint", "()[B");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");
            mids$[mid_toString_3b5a1335c24253e0] = env->getMethodID(cls, "toString", "(I[B)Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PointRangeQuery::checkArgs(const ::java::lang::String & a0, const ::java::lang::Object & a1, const ::java::lang::Object & a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_checkArgs_f4cf1c4fd71b17c5], a0.this$, a1.this$, a2.this$);
        }

        ::org::apache::lucene::search::Weight PointRangeQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean PointRangeQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint PointRangeQuery::getBytesPerDim() const
        {
          return env->callIntMethod(this$, mids$[mid_getBytesPerDim_9972fcc56b44e79d]);
        }

        ::java::lang::String PointRangeQuery::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
        }

        JArray< jbyte > PointRangeQuery::getLowerPoint() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getLowerPoint_cf386cdb1bbd339f]));
        }

        jint PointRangeQuery::getNumDims() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumDims_9972fcc56b44e79d]);
        }

        JArray< jbyte > PointRangeQuery::getUpperPoint() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getUpperPoint_cf386cdb1bbd339f]));
        }

        jint PointRangeQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String PointRangeQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void PointRangeQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PointRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PointRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PointRangeQuery_checkArgs(PyTypeObject *type, PyObject *args);
        static PyObject *t_PointRangeQuery_createWeight(t_PointRangeQuery *self, PyObject *args);
        static PyObject *t_PointRangeQuery_equals(t_PointRangeQuery *self, PyObject *args);
        static PyObject *t_PointRangeQuery_getBytesPerDim(t_PointRangeQuery *self);
        static PyObject *t_PointRangeQuery_getField(t_PointRangeQuery *self);
        static PyObject *t_PointRangeQuery_getLowerPoint(t_PointRangeQuery *self);
        static PyObject *t_PointRangeQuery_getNumDims(t_PointRangeQuery *self);
        static PyObject *t_PointRangeQuery_getUpperPoint(t_PointRangeQuery *self);
        static PyObject *t_PointRangeQuery_hashCode(t_PointRangeQuery *self, PyObject *args);
        static PyObject *t_PointRangeQuery_toString(t_PointRangeQuery *self, PyObject *args);
        static PyObject *t_PointRangeQuery_visit(t_PointRangeQuery *self, PyObject *args);
        static PyObject *t_PointRangeQuery_get__bytesPerDim(t_PointRangeQuery *self, void *data);
        static PyObject *t_PointRangeQuery_get__field(t_PointRangeQuery *self, void *data);
        static PyObject *t_PointRangeQuery_get__lowerPoint(t_PointRangeQuery *self, void *data);
        static PyObject *t_PointRangeQuery_get__numDims(t_PointRangeQuery *self, void *data);
        static PyObject *t_PointRangeQuery_get__upperPoint(t_PointRangeQuery *self, void *data);
        static PyGetSetDef t_PointRangeQuery__fields_[] = {
          DECLARE_GET_FIELD(t_PointRangeQuery, bytesPerDim),
          DECLARE_GET_FIELD(t_PointRangeQuery, field),
          DECLARE_GET_FIELD(t_PointRangeQuery, lowerPoint),
          DECLARE_GET_FIELD(t_PointRangeQuery, numDims),
          DECLARE_GET_FIELD(t_PointRangeQuery, upperPoint),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PointRangeQuery__methods_[] = {
          DECLARE_METHOD(t_PointRangeQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PointRangeQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PointRangeQuery, checkArgs, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_PointRangeQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_PointRangeQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_PointRangeQuery, getBytesPerDim, METH_NOARGS),
          DECLARE_METHOD(t_PointRangeQuery, getField, METH_NOARGS),
          DECLARE_METHOD(t_PointRangeQuery, getLowerPoint, METH_NOARGS),
          DECLARE_METHOD(t_PointRangeQuery, getNumDims, METH_NOARGS),
          DECLARE_METHOD(t_PointRangeQuery, getUpperPoint, METH_NOARGS),
          DECLARE_METHOD(t_PointRangeQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PointRangeQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_PointRangeQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PointRangeQuery)[] = {
          { Py_tp_methods, t_PointRangeQuery__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_PointRangeQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PointRangeQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(PointRangeQuery, t_PointRangeQuery, PointRangeQuery);

        void t_PointRangeQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(PointRangeQuery), &PY_TYPE_DEF(PointRangeQuery), module, "PointRangeQuery", 0);
        }

        void t_PointRangeQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointRangeQuery), "class_", make_descriptor(PointRangeQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointRangeQuery), "wrapfn_", make_descriptor(t_PointRangeQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointRangeQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PointRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PointRangeQuery::initializeClass, 1)))
            return NULL;
          return t_PointRangeQuery::wrap_Object(PointRangeQuery(((t_PointRangeQuery *) arg)->object.this$));
        }
        static PyObject *t_PointRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PointRangeQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PointRangeQuery_checkArgs(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          ::java::lang::Object a2((jobject) NULL);

          if (!parseArgs(args, "soo", &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::search::PointRangeQuery::checkArgs(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "checkArgs", args);
          return NULL;
        }

        static PyObject *t_PointRangeQuery_createWeight(t_PointRangeQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(PointRangeQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_PointRangeQuery_equals(t_PointRangeQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(PointRangeQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PointRangeQuery_getBytesPerDim(t_PointRangeQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getBytesPerDim());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_PointRangeQuery_getField(t_PointRangeQuery *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_PointRangeQuery_getLowerPoint(t_PointRangeQuery *self)
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.getLowerPoint());
          return result.wrap();
        }

        static PyObject *t_PointRangeQuery_getNumDims(t_PointRangeQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumDims());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_PointRangeQuery_getUpperPoint(t_PointRangeQuery *self)
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.getUpperPoint());
          return result.wrap();
        }

        static PyObject *t_PointRangeQuery_hashCode(t_PointRangeQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(PointRangeQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PointRangeQuery_toString(t_PointRangeQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(PointRangeQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_PointRangeQuery_visit(t_PointRangeQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(PointRangeQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_PointRangeQuery_get__bytesPerDim(t_PointRangeQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getBytesPerDim());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_PointRangeQuery_get__field(t_PointRangeQuery *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static PyObject *t_PointRangeQuery_get__lowerPoint(t_PointRangeQuery *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getLowerPoint());
          return value.wrap();
        }

        static PyObject *t_PointRangeQuery_get__numDims(t_PointRangeQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumDims());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_PointRangeQuery_get__upperPoint(t_PointRangeQuery *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getUpperPoint());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/MappingCharFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *MappingCharFilter::class$ = NULL;
          jmethodID *MappingCharFilter::mids$ = NULL;
          bool MappingCharFilter::live$ = false;

          jclass MappingCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/MappingCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_04767129d29aa6a2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/charfilter/NormalizeCharMap;Ljava/io/Reader;)V");
              mids$[mid_read_9972fcc56b44e79d] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_644fc0bf0aa7fb26] = env->getMethodID(cls, "read", "([CII)I");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MappingCharFilter::MappingCharFilter(const ::org::apache::lucene::analysis::charfilter::NormalizeCharMap & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_04767129d29aa6a2, a0.this$, a1.this$)) {}

          jint MappingCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_9972fcc56b44e79d]);
          }

          jint MappingCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_644fc0bf0aa7fb26], a0.this$, a1, a2);
          }

          void MappingCharFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_MappingCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MappingCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MappingCharFilter_init_(t_MappingCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MappingCharFilter_read(t_MappingCharFilter *self, PyObject *args);
          static PyObject *t_MappingCharFilter_reset(t_MappingCharFilter *self, PyObject *args);

          static PyMethodDef t_MappingCharFilter__methods_[] = {
            DECLARE_METHOD(t_MappingCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MappingCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MappingCharFilter, read, METH_VARARGS),
            DECLARE_METHOD(t_MappingCharFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MappingCharFilter)[] = {
            { Py_tp_methods, t_MappingCharFilter__methods_ },
            { Py_tp_init, (void *) t_MappingCharFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MappingCharFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::charfilter::BaseCharFilter),
            NULL
          };

          DEFINE_TYPE(MappingCharFilter, t_MappingCharFilter, MappingCharFilter);

          void t_MappingCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(MappingCharFilter), &PY_TYPE_DEF(MappingCharFilter), module, "MappingCharFilter", 0);
          }

          void t_MappingCharFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MappingCharFilter), "class_", make_descriptor(MappingCharFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MappingCharFilter), "wrapfn_", make_descriptor(t_MappingCharFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MappingCharFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MappingCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MappingCharFilter::initializeClass, 1)))
              return NULL;
            return t_MappingCharFilter::wrap_Object(MappingCharFilter(((t_MappingCharFilter *) arg)->object.this$));
          }
          static PyObject *t_MappingCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MappingCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MappingCharFilter_init_(t_MappingCharFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::charfilter::NormalizeCharMap a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            MappingCharFilter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::charfilter::NormalizeCharMap::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              INT_CALL(object = MappingCharFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MappingCharFilter_read(t_MappingCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyLong_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyLong_FromLong((long) result);
                }
              }
            }

            return callSuper(PY_TYPE(MappingCharFilter), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_MappingCharFilter_reset(t_MappingCharFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(MappingCharFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/ArmenianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *ArmenianStemmer::class$ = NULL;
        jmethodID *ArmenianStemmer::mids$ = NULL;
        bool ArmenianStemmer::live$ = false;

        jclass ArmenianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/ArmenianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ArmenianStemmer::ArmenianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean ArmenianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint ArmenianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean ArmenianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_ArmenianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ArmenianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ArmenianStemmer_init_(t_ArmenianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ArmenianStemmer_equals(t_ArmenianStemmer *self, PyObject *args);
        static PyObject *t_ArmenianStemmer_hashCode(t_ArmenianStemmer *self, PyObject *args);
        static PyObject *t_ArmenianStemmer_stem(t_ArmenianStemmer *self, PyObject *args);

        static PyMethodDef t_ArmenianStemmer__methods_[] = {
          DECLARE_METHOD(t_ArmenianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArmenianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArmenianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_ArmenianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_ArmenianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ArmenianStemmer)[] = {
          { Py_tp_methods, t_ArmenianStemmer__methods_ },
          { Py_tp_init, (void *) t_ArmenianStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ArmenianStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(ArmenianStemmer, t_ArmenianStemmer, ArmenianStemmer);

        void t_ArmenianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(ArmenianStemmer), &PY_TYPE_DEF(ArmenianStemmer), module, "ArmenianStemmer", 0);
        }

        void t_ArmenianStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ArmenianStemmer), "class_", make_descriptor(ArmenianStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ArmenianStemmer), "wrapfn_", make_descriptor(t_ArmenianStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ArmenianStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ArmenianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ArmenianStemmer::initializeClass, 1)))
            return NULL;
          return t_ArmenianStemmer::wrap_Object(ArmenianStemmer(((t_ArmenianStemmer *) arg)->object.this$));
        }
        static PyObject *t_ArmenianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ArmenianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ArmenianStemmer_init_(t_ArmenianStemmer *self, PyObject *args, PyObject *kwds)
        {
          ArmenianStemmer object((jobject) NULL);

          INT_CALL(object = ArmenianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_ArmenianStemmer_equals(t_ArmenianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(ArmenianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_ArmenianStemmer_hashCode(t_ArmenianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ArmenianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_ArmenianStemmer_stem(t_ArmenianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(ArmenianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CombinedFieldQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CombinedFieldQuery::class$ = NULL;
        jmethodID *CombinedFieldQuery::mids$ = NULL;
        bool CombinedFieldQuery::live$ = false;

        jclass CombinedFieldQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CombinedFieldQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getTerms_49ec78390f08338a] = env->getMethodID(cls, "getTerms", "()Ljava/util/List;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::Weight CombinedFieldQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean CombinedFieldQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::java::util::List CombinedFieldQuery::getTerms() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTerms_49ec78390f08338a]));
        }

        jint CombinedFieldQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jlong CombinedFieldQuery::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::search::Query CombinedFieldQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
        }

        ::java::lang::String CombinedFieldQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void CombinedFieldQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/CombinedFieldQuery$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CombinedFieldQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CombinedFieldQuery_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CombinedFieldQuery_createWeight(t_CombinedFieldQuery *self, PyObject *args);
        static PyObject *t_CombinedFieldQuery_equals(t_CombinedFieldQuery *self, PyObject *args);
        static PyObject *t_CombinedFieldQuery_getTerms(t_CombinedFieldQuery *self);
        static PyObject *t_CombinedFieldQuery_hashCode(t_CombinedFieldQuery *self, PyObject *args);
        static PyObject *t_CombinedFieldQuery_ramBytesUsed(t_CombinedFieldQuery *self);
        static PyObject *t_CombinedFieldQuery_rewrite(t_CombinedFieldQuery *self, PyObject *args);
        static PyObject *t_CombinedFieldQuery_toString(t_CombinedFieldQuery *self, PyObject *args);
        static PyObject *t_CombinedFieldQuery_visit(t_CombinedFieldQuery *self, PyObject *args);
        static PyObject *t_CombinedFieldQuery_get__terms(t_CombinedFieldQuery *self, void *data);
        static PyGetSetDef t_CombinedFieldQuery__fields_[] = {
          DECLARE_GET_FIELD(t_CombinedFieldQuery, terms),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CombinedFieldQuery__methods_[] = {
          DECLARE_METHOD(t_CombinedFieldQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CombinedFieldQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CombinedFieldQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_CombinedFieldQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_CombinedFieldQuery, getTerms, METH_NOARGS),
          DECLARE_METHOD(t_CombinedFieldQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CombinedFieldQuery, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_CombinedFieldQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_CombinedFieldQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_CombinedFieldQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CombinedFieldQuery)[] = {
          { Py_tp_methods, t_CombinedFieldQuery__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_CombinedFieldQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CombinedFieldQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(CombinedFieldQuery, t_CombinedFieldQuery, CombinedFieldQuery);

        void t_CombinedFieldQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(CombinedFieldQuery), &PY_TYPE_DEF(CombinedFieldQuery), module, "CombinedFieldQuery", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(CombinedFieldQuery), "Builder", make_descriptor(&PY_TYPE_DEF(CombinedFieldQuery$Builder)));
        }

        void t_CombinedFieldQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CombinedFieldQuery), "class_", make_descriptor(CombinedFieldQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CombinedFieldQuery), "wrapfn_", make_descriptor(t_CombinedFieldQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CombinedFieldQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CombinedFieldQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CombinedFieldQuery::initializeClass, 1)))
            return NULL;
          return t_CombinedFieldQuery::wrap_Object(CombinedFieldQuery(((t_CombinedFieldQuery *) arg)->object.this$));
        }
        static PyObject *t_CombinedFieldQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CombinedFieldQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CombinedFieldQuery_createWeight(t_CombinedFieldQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(CombinedFieldQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_CombinedFieldQuery_equals(t_CombinedFieldQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(CombinedFieldQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CombinedFieldQuery_getTerms(t_CombinedFieldQuery *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerms());
          return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(Term));
        }

        static PyObject *t_CombinedFieldQuery_hashCode(t_CombinedFieldQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(CombinedFieldQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CombinedFieldQuery_ramBytesUsed(t_CombinedFieldQuery *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CombinedFieldQuery_rewrite(t_CombinedFieldQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(CombinedFieldQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_CombinedFieldQuery_toString(t_CombinedFieldQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(CombinedFieldQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CombinedFieldQuery_visit(t_CombinedFieldQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(CombinedFieldQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_CombinedFieldQuery_get__terms(t_CombinedFieldQuery *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerms());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/FilteringTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *FilteringTokenFilter::class$ = NULL;
        jmethodID *FilteringTokenFilter::mids$ = NULL;
        bool FilteringTokenFilter::live$ = false;

        jclass FilteringTokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/FilteringTokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
            mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_accept_8454bd5aa23fd11e] = env->getMethodID(cls, "accept", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteringTokenFilter::FilteringTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

        void FilteringTokenFilter::end() const
        {
          env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
        }

        jboolean FilteringTokenFilter::incrementToken() const
        {
          return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
        }

        void FilteringTokenFilter::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_FilteringTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteringTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteringTokenFilter_init_(t_FilteringTokenFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteringTokenFilter_end(t_FilteringTokenFilter *self, PyObject *args);
        static PyObject *t_FilteringTokenFilter_incrementToken(t_FilteringTokenFilter *self, PyObject *args);
        static PyObject *t_FilteringTokenFilter_reset(t_FilteringTokenFilter *self, PyObject *args);

        static PyMethodDef t_FilteringTokenFilter__methods_[] = {
          DECLARE_METHOD(t_FilteringTokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteringTokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteringTokenFilter, end, METH_VARARGS),
          DECLARE_METHOD(t_FilteringTokenFilter, incrementToken, METH_VARARGS),
          DECLARE_METHOD(t_FilteringTokenFilter, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilteringTokenFilter)[] = {
          { Py_tp_methods, t_FilteringTokenFilter__methods_ },
          { Py_tp_init, (void *) t_FilteringTokenFilter_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilteringTokenFilter)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
          NULL
        };

        DEFINE_TYPE(FilteringTokenFilter, t_FilteringTokenFilter, FilteringTokenFilter);

        void t_FilteringTokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteringTokenFilter), &PY_TYPE_DEF(FilteringTokenFilter), module, "FilteringTokenFilter", 0);
        }

        void t_FilteringTokenFilter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilteringTokenFilter), "class_", make_descriptor(FilteringTokenFilter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilteringTokenFilter), "wrapfn_", make_descriptor(t_FilteringTokenFilter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilteringTokenFilter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteringTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteringTokenFilter::initializeClass, 1)))
            return NULL;
          return t_FilteringTokenFilter::wrap_Object(FilteringTokenFilter(((t_FilteringTokenFilter *) arg)->object.this$));
        }
        static PyObject *t_FilteringTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteringTokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteringTokenFilter_init_(t_FilteringTokenFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          FilteringTokenFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            INT_CALL(object = FilteringTokenFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilteringTokenFilter_end(t_FilteringTokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.end());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FilteringTokenFilter), (PyObject *) self, "end", args, 2);
        }

        static PyObject *t_FilteringTokenFilter_incrementToken(t_FilteringTokenFilter *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.incrementToken());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FilteringTokenFilter), (PyObject *) self, "incrementToken", args, 2);
        }

        static PyObject *t_FilteringTokenFilter_reset(t_FilteringTokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FilteringTokenFilter), (PyObject *) self, "reset", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/UsageTrackingQueryCachingPolicy.h"
#include "org/apache/lucene/search/QueryCachingPolicy.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *UsageTrackingQueryCachingPolicy::class$ = NULL;
        jmethodID *UsageTrackingQueryCachingPolicy::mids$ = NULL;
        bool UsageTrackingQueryCachingPolicy::live$ = false;

        jclass UsageTrackingQueryCachingPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/UsageTrackingQueryCachingPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_onUse_ede25bb9d48237ac] = env->getMethodID(cls, "onUse", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_shouldCache_8b8c985512e42a98] = env->getMethodID(cls, "shouldCache", "(Lorg/apache/lucene/search/Query;)Z");
            mids$[mid_minFrequencyToCache_5621be3d00acce07] = env->getMethodID(cls, "minFrequencyToCache", "(Lorg/apache/lucene/search/Query;)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        UsageTrackingQueryCachingPolicy::UsageTrackingQueryCachingPolicy() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        UsageTrackingQueryCachingPolicy::UsageTrackingQueryCachingPolicy(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        void UsageTrackingQueryCachingPolicy::onUse(const ::org::apache::lucene::search::Query & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onUse_ede25bb9d48237ac], a0.this$);
        }

        jboolean UsageTrackingQueryCachingPolicy::shouldCache(const ::org::apache::lucene::search::Query & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_shouldCache_8b8c985512e42a98], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_UsageTrackingQueryCachingPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UsageTrackingQueryCachingPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_UsageTrackingQueryCachingPolicy_init_(t_UsageTrackingQueryCachingPolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_UsageTrackingQueryCachingPolicy_onUse(t_UsageTrackingQueryCachingPolicy *self, PyObject *arg);
        static PyObject *t_UsageTrackingQueryCachingPolicy_shouldCache(t_UsageTrackingQueryCachingPolicy *self, PyObject *arg);

        static PyMethodDef t_UsageTrackingQueryCachingPolicy__methods_[] = {
          DECLARE_METHOD(t_UsageTrackingQueryCachingPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UsageTrackingQueryCachingPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UsageTrackingQueryCachingPolicy, onUse, METH_O),
          DECLARE_METHOD(t_UsageTrackingQueryCachingPolicy, shouldCache, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(UsageTrackingQueryCachingPolicy)[] = {
          { Py_tp_methods, t_UsageTrackingQueryCachingPolicy__methods_ },
          { Py_tp_init, (void *) t_UsageTrackingQueryCachingPolicy_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(UsageTrackingQueryCachingPolicy)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(UsageTrackingQueryCachingPolicy, t_UsageTrackingQueryCachingPolicy, UsageTrackingQueryCachingPolicy);

        void t_UsageTrackingQueryCachingPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(UsageTrackingQueryCachingPolicy), &PY_TYPE_DEF(UsageTrackingQueryCachingPolicy), module, "UsageTrackingQueryCachingPolicy", 0);
        }

        void t_UsageTrackingQueryCachingPolicy::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(UsageTrackingQueryCachingPolicy), "class_", make_descriptor(UsageTrackingQueryCachingPolicy::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(UsageTrackingQueryCachingPolicy), "wrapfn_", make_descriptor(t_UsageTrackingQueryCachingPolicy::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(UsageTrackingQueryCachingPolicy), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_UsageTrackingQueryCachingPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, UsageTrackingQueryCachingPolicy::initializeClass, 1)))
            return NULL;
          return t_UsageTrackingQueryCachingPolicy::wrap_Object(UsageTrackingQueryCachingPolicy(((t_UsageTrackingQueryCachingPolicy *) arg)->object.this$));
        }
        static PyObject *t_UsageTrackingQueryCachingPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, UsageTrackingQueryCachingPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_UsageTrackingQueryCachingPolicy_init_(t_UsageTrackingQueryCachingPolicy *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              UsageTrackingQueryCachingPolicy object((jobject) NULL);

              INT_CALL(object = UsageTrackingQueryCachingPolicy());
              self->object = object;
              break;
            }
           case 1:
            {
              jint a0;
              UsageTrackingQueryCachingPolicy object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = UsageTrackingQueryCachingPolicy(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_UsageTrackingQueryCachingPolicy_onUse(t_UsageTrackingQueryCachingPolicy *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(self->object.onUse(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onUse", arg);
          return NULL;
        }

        static PyObject *t_UsageTrackingQueryCachingPolicy_shouldCache(t_UsageTrackingQueryCachingPolicy *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.shouldCache(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "shouldCache", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/KoreanNumberFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {

          ::java::lang::Class *KoreanNumberFilterFactory::class$ = NULL;
          jmethodID *KoreanNumberFilterFactory::mids$ = NULL;
          bool KoreanNumberFilterFactory::live$ = false;
          ::java::lang::String *KoreanNumberFilterFactory::NAME = NULL;

          jclass KoreanNumberFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/KoreanNumberFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KoreanNumberFilterFactory::KoreanNumberFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream KoreanNumberFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          static PyObject *t_KoreanNumberFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KoreanNumberFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KoreanNumberFilterFactory_init_(t_KoreanNumberFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KoreanNumberFilterFactory_create(t_KoreanNumberFilterFactory *self, PyObject *args);

          static PyMethodDef t_KoreanNumberFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KoreanNumberFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanNumberFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanNumberFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KoreanNumberFilterFactory)[] = {
            { Py_tp_methods, t_KoreanNumberFilterFactory__methods_ },
            { Py_tp_init, (void *) t_KoreanNumberFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KoreanNumberFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(KoreanNumberFilterFactory, t_KoreanNumberFilterFactory, KoreanNumberFilterFactory);

          void t_KoreanNumberFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KoreanNumberFilterFactory), &PY_TYPE_DEF(KoreanNumberFilterFactory), module, "KoreanNumberFilterFactory", 0);
          }

          void t_KoreanNumberFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanNumberFilterFactory), "class_", make_descriptor(KoreanNumberFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanNumberFilterFactory), "wrapfn_", make_descriptor(t_KoreanNumberFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanNumberFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(KoreanNumberFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanNumberFilterFactory), "NAME", make_descriptor(j2p(*KoreanNumberFilterFactory::NAME)));
          }

          static PyObject *t_KoreanNumberFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KoreanNumberFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KoreanNumberFilterFactory::wrap_Object(KoreanNumberFilterFactory(((t_KoreanNumberFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KoreanNumberFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KoreanNumberFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KoreanNumberFilterFactory_init_(t_KoreanNumberFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KoreanNumberFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KoreanNumberFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KoreanNumberFilterFactory_create(t_KoreanNumberFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(KoreanNumberFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TimeLimitingCollector$TimeExceededException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TimeLimitingCollector$TimeExceededException::class$ = NULL;
        jmethodID *TimeLimitingCollector$TimeExceededException::mids$ = NULL;
        bool TimeLimitingCollector$TimeExceededException::live$ = false;

        jclass TimeLimitingCollector$TimeExceededException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TimeLimitingCollector$TimeExceededException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getLastDocCollected_9972fcc56b44e79d] = env->getMethodID(cls, "getLastDocCollected", "()I");
            mids$[mid_getTimeAllowed_2e5ae9edcb9b072f] = env->getMethodID(cls, "getTimeAllowed", "()J");
            mids$[mid_getTimeElapsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "getTimeElapsed", "()J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint TimeLimitingCollector$TimeExceededException::getLastDocCollected() const
        {
          return env->callIntMethod(this$, mids$[mid_getLastDocCollected_9972fcc56b44e79d]);
        }

        jlong TimeLimitingCollector$TimeExceededException::getTimeAllowed() const
        {
          return env->callLongMethod(this$, mids$[mid_getTimeAllowed_2e5ae9edcb9b072f]);
        }

        jlong TimeLimitingCollector$TimeExceededException::getTimeElapsed() const
        {
          return env->callLongMethod(this$, mids$[mid_getTimeElapsed_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TimeLimitingCollector$TimeExceededException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_getLastDocCollected(t_TimeLimitingCollector$TimeExceededException *self);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_getTimeAllowed(t_TimeLimitingCollector$TimeExceededException *self);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_getTimeElapsed(t_TimeLimitingCollector$TimeExceededException *self);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__lastDocCollected(t_TimeLimitingCollector$TimeExceededException *self, void *data);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__timeAllowed(t_TimeLimitingCollector$TimeExceededException *self, void *data);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__timeElapsed(t_TimeLimitingCollector$TimeExceededException *self, void *data);
        static PyGetSetDef t_TimeLimitingCollector$TimeExceededException__fields_[] = {
          DECLARE_GET_FIELD(t_TimeLimitingCollector$TimeExceededException, lastDocCollected),
          DECLARE_GET_FIELD(t_TimeLimitingCollector$TimeExceededException, timeAllowed),
          DECLARE_GET_FIELD(t_TimeLimitingCollector$TimeExceededException, timeElapsed),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TimeLimitingCollector$TimeExceededException__methods_[] = {
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, getLastDocCollected, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, getTimeAllowed, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, getTimeElapsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TimeLimitingCollector$TimeExceededException)[] = {
          { Py_tp_methods, t_TimeLimitingCollector$TimeExceededException__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_TimeLimitingCollector$TimeExceededException__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TimeLimitingCollector$TimeExceededException)[] = {
          &PY_TYPE_DEF(::java::lang::RuntimeException),
          NULL
        };

        DEFINE_TYPE(TimeLimitingCollector$TimeExceededException, t_TimeLimitingCollector$TimeExceededException, TimeLimitingCollector$TimeExceededException);

        void t_TimeLimitingCollector$TimeExceededException::install(PyObject *module)
        {
          installType(&PY_TYPE(TimeLimitingCollector$TimeExceededException), &PY_TYPE_DEF(TimeLimitingCollector$TimeExceededException), module, "TimeLimitingCollector$TimeExceededException", 0);
        }

        void t_TimeLimitingCollector$TimeExceededException::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TimeLimitingCollector$TimeExceededException), "class_", make_descriptor(TimeLimitingCollector$TimeExceededException::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TimeLimitingCollector$TimeExceededException), "wrapfn_", make_descriptor(t_TimeLimitingCollector$TimeExceededException::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TimeLimitingCollector$TimeExceededException), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TimeLimitingCollector$TimeExceededException::initializeClass, 1)))
            return NULL;
          return t_TimeLimitingCollector$TimeExceededException::wrap_Object(TimeLimitingCollector$TimeExceededException(((t_TimeLimitingCollector$TimeExceededException *) arg)->object.this$));
        }
        static PyObject *t_TimeLimitingCollector$TimeExceededException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TimeLimitingCollector$TimeExceededException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_getLastDocCollected(t_TimeLimitingCollector$TimeExceededException *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getLastDocCollected());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_getTimeAllowed(t_TimeLimitingCollector$TimeExceededException *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getTimeAllowed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_getTimeElapsed(t_TimeLimitingCollector$TimeExceededException *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getTimeElapsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__lastDocCollected(t_TimeLimitingCollector$TimeExceededException *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getLastDocCollected());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__timeAllowed(t_TimeLimitingCollector$TimeExceededException *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getTimeAllowed());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__timeElapsed(t_TimeLimitingCollector$TimeExceededException *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getTimeElapsed());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldDoc.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldDoc::class$ = NULL;
        jmethodID *FieldDoc::mids$ = NULL;
        jfieldID *FieldDoc::fids$ = NULL;
        bool FieldDoc::live$ = false;

        jclass FieldDoc::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldDoc");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_da161bce5801b190] = env->getMethodID(cls, "<init>", "(IF)V");
            mids$[mid_init$_4e37db4af26ebb2f] = env->getMethodID(cls, "<init>", "(IF[Ljava/lang/Object;)V");
            mids$[mid_init$_5b17a7bc13b68fe1] = env->getMethodID(cls, "<init>", "(IF[Ljava/lang/Object;I)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_fields] = env->getFieldID(cls, "fields", "[Ljava/lang/Object;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldDoc::FieldDoc(jint a0, jfloat a1) : ::org::apache::lucene::search::ScoreDoc(env->newObject(initializeClass, &mids$, mid_init$_da161bce5801b190, a0, a1)) {}

        FieldDoc::FieldDoc(jint a0, jfloat a1, const JArray< ::java::lang::Object > & a2) : ::org::apache::lucene::search::ScoreDoc(env->newObject(initializeClass, &mids$, mid_init$_4e37db4af26ebb2f, a0, a1, a2.this$)) {}

        FieldDoc::FieldDoc(jint a0, jfloat a1, const JArray< ::java::lang::Object > & a2, jint a3) : ::org::apache::lucene::search::ScoreDoc(env->newObject(initializeClass, &mids$, mid_init$_5b17a7bc13b68fe1, a0, a1, a2.this$, a3)) {}

        ::java::lang::String FieldDoc::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        JArray< ::java::lang::Object > FieldDoc::_get_fields() const
        {
          return JArray< ::java::lang::Object >(env->getObjectField(this$, fids$[fid_fields]));
        }

        void FieldDoc::_set_fields(const JArray< ::java::lang::Object > & a0) const
        {
          env->setObjectField(this$, fids$[fid_fields], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldDoc_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldDoc_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldDoc_init_(t_FieldDoc *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldDoc_toString(t_FieldDoc *self, PyObject *args);
        static PyObject *t_FieldDoc_get__fields(t_FieldDoc *self, void *data);
        static int t_FieldDoc_set__fields(t_FieldDoc *self, PyObject *arg, void *data);

        static PyGetSetDef t_FieldDoc__fields_[] = {
          DECLARE_GETSET_FIELD(t_FieldDoc, fields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldDoc__methods_[] = {
          DECLARE_METHOD(t_FieldDoc, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldDoc, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldDoc, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FieldDoc)[] = {
          { Py_tp_methods, t_FieldDoc__methods_ },
          { Py_tp_init, (void *) t_FieldDoc_init_ },
          { Py_tp_getset, t_FieldDoc__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FieldDoc)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::ScoreDoc),
          NULL
        };

        DEFINE_TYPE(FieldDoc, t_FieldDoc, FieldDoc);

        void t_FieldDoc::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldDoc), &PY_TYPE_DEF(FieldDoc), module, "FieldDoc", 0);
        }

        void t_FieldDoc::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldDoc), "class_", make_descriptor(FieldDoc::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldDoc), "wrapfn_", make_descriptor(t_FieldDoc::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldDoc), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldDoc_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldDoc::initializeClass, 1)))
            return NULL;
          return t_FieldDoc::wrap_Object(FieldDoc(((t_FieldDoc *) arg)->object.this$));
        }
        static PyObject *t_FieldDoc_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldDoc::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldDoc_init_(t_FieldDoc *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              jfloat a1;
              FieldDoc object((jobject) NULL);

              if (!parseArgs(args, "IF", &a0, &a1))
              {
                INT_CALL(object = FieldDoc(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              jfloat a1;
              JArray< ::java::lang::Object > a2((jobject) NULL);
              FieldDoc object((jobject) NULL);

              if (!parseArgs(args, "IF[o", &a0, &a1, &a2))
              {
                INT_CALL(object = FieldDoc(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              jint a0;
              jfloat a1;
              JArray< ::java::lang::Object > a2((jobject) NULL);
              jint a3;
              FieldDoc object((jobject) NULL);

              if (!parseArgs(args, "IF[oI", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = FieldDoc(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldDoc_toString(t_FieldDoc *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(FieldDoc), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FieldDoc_get__fields(t_FieldDoc *self, void *data)
        {
          JArray< ::java::lang::Object > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fields());
          return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
        }
        static int t_FieldDoc_set__fields(t_FieldDoc *self, PyObject *arg, void *data)
        {
          JArray< ::java::lang::Object > value((jobject) NULL);
          if (!parseArg(arg, "[o", &value))
          {
            INT_CALL(self->object._set_fields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "fields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/concurrent/AbstractExecutorService.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "java/util/concurrent/ExecutionException.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/lang/Runnable.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/TimeoutException.h"
#include "java/lang/InterruptedException.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/Callable.h"
#include "JArray.h"

namespace java {
  namespace util {
    namespace concurrent {

      ::java::lang::Class *AbstractExecutorService::class$ = NULL;
      jmethodID *AbstractExecutorService::mids$ = NULL;
      bool AbstractExecutorService::live$ = false;

      jclass AbstractExecutorService::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("java/util/concurrent/AbstractExecutorService");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_invokeAll_a71e1c6683cd688a] = env->getMethodID(cls, "invokeAll", "(Ljava/util/Collection;)Ljava/util/List;");
          mids$[mid_invokeAll_cb2f9bf716428758] = env->getMethodID(cls, "invokeAll", "(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/util/List;");
          mids$[mid_invokeAny_f186668b4e43c778] = env->getMethodID(cls, "invokeAny", "(Ljava/util/Collection;)Ljava/lang/Object;");
          mids$[mid_invokeAny_1d5f23182fbe7c62] = env->getMethodID(cls, "invokeAny", "(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;");
          mids$[mid_submit_a65cd5a637725e4b] = env->getMethodID(cls, "submit", "(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;");
          mids$[mid_submit_4935160b38dd7a16] = env->getMethodID(cls, "submit", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;");
          mids$[mid_submit_d0c4b0810c5b0244] = env->getMethodID(cls, "submit", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;");
          mids$[mid_newTaskFor_20f71611dab304bf] = env->getMethodID(cls, "newTaskFor", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/RunnableFuture;");
          mids$[mid_newTaskFor_c7475478d72c9c9e] = env->getMethodID(cls, "newTaskFor", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/RunnableFuture;");

          class$ = new ::java::lang::Class(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      AbstractExecutorService::AbstractExecutorService() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

      ::java::util::List AbstractExecutorService::invokeAll(const ::java::util::Collection & a0) const
      {
        return ::java::util::List(env->callObjectMethod(this$, mids$[mid_invokeAll_a71e1c6683cd688a], a0.this$));
      }

      ::java::util::List AbstractExecutorService::invokeAll(const ::java::util::Collection & a0, jlong a1, const ::java::util::concurrent::TimeUnit & a2) const
      {
        return ::java::util::List(env->callObjectMethod(this$, mids$[mid_invokeAll_cb2f9bf716428758], a0.this$, a1, a2.this$));
      }

      ::java::lang::Object AbstractExecutorService::invokeAny(const ::java::util::Collection & a0) const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_invokeAny_f186668b4e43c778], a0.this$));
      }

      ::java::lang::Object AbstractExecutorService::invokeAny(const ::java::util::Collection & a0, jlong a1, const ::java::util::concurrent::TimeUnit & a2) const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_invokeAny_1d5f23182fbe7c62], a0.this$, a1, a2.this$));
      }

      ::java::util::concurrent::Future AbstractExecutorService::submit(const ::java::lang::Runnable & a0) const
      {
        return ::java::util::concurrent::Future(env->callObjectMethod(this$, mids$[mid_submit_a65cd5a637725e4b], a0.this$));
      }

      ::java::util::concurrent::Future AbstractExecutorService::submit(const ::java::util::concurrent::Callable & a0) const
      {
        return ::java::util::concurrent::Future(env->callObjectMethod(this$, mids$[mid_submit_4935160b38dd7a16], a0.this$));
      }

      ::java::util::concurrent::Future AbstractExecutorService::submit(const ::java::lang::Runnable & a0, const ::java::lang::Object & a1) const
      {
        return ::java::util::concurrent::Future(env->callObjectMethod(this$, mids$[mid_submit_d0c4b0810c5b0244], a0.this$, a1.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    namespace concurrent {
      static PyObject *t_AbstractExecutorService_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_AbstractExecutorService_instance_(PyTypeObject *type, PyObject *arg);
      static int t_AbstractExecutorService_init_(t_AbstractExecutorService *self, PyObject *args, PyObject *kwds);
      static PyObject *t_AbstractExecutorService_invokeAll(t_AbstractExecutorService *self, PyObject *args);
      static PyObject *t_AbstractExecutorService_invokeAny(t_AbstractExecutorService *self, PyObject *args);
      static PyObject *t_AbstractExecutorService_submit(t_AbstractExecutorService *self, PyObject *args);

      static PyMethodDef t_AbstractExecutorService__methods_[] = {
        DECLARE_METHOD(t_AbstractExecutorService, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_AbstractExecutorService, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_AbstractExecutorService, invokeAll, METH_VARARGS),
        DECLARE_METHOD(t_AbstractExecutorService, invokeAny, METH_VARARGS),
        DECLARE_METHOD(t_AbstractExecutorService, submit, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      static PyType_Slot PY_TYPE_SLOTS(AbstractExecutorService)[] = {
        { Py_tp_methods, t_AbstractExecutorService__methods_ },
        { Py_tp_init, (void *) t_AbstractExecutorService_init_ },
        { 0, NULL }
      };

      static PyType_Def *PY_TYPE_BASES(AbstractExecutorService)[] = {
        &PY_TYPE_DEF(::java::lang::Object),
        NULL
      };

      DEFINE_TYPE(AbstractExecutorService, t_AbstractExecutorService, AbstractExecutorService);

      void t_AbstractExecutorService::install(PyObject *module)
      {
        installType(&PY_TYPE(AbstractExecutorService), &PY_TYPE_DEF(AbstractExecutorService), module, "AbstractExecutorService", 0);
      }

      void t_AbstractExecutorService::initialize(PyObject *module)
      {
        PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractExecutorService), "class_", make_descriptor(AbstractExecutorService::initializeClass, 1));
        PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractExecutorService), "wrapfn_", make_descriptor(t_AbstractExecutorService::wrap_jobject));
        PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractExecutorService), "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_AbstractExecutorService_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, AbstractExecutorService::initializeClass, 1)))
          return NULL;
        return t_AbstractExecutorService::wrap_Object(AbstractExecutorService(((t_AbstractExecutorService *) arg)->object.this$));
      }
      static PyObject *t_AbstractExecutorService_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, AbstractExecutorService::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_AbstractExecutorService_init_(t_AbstractExecutorService *self, PyObject *args, PyObject *kwds)
      {
        AbstractExecutorService object((jobject) NULL);

        INT_CALL(object = AbstractExecutorService());
        self->object = object;

        return 0;
      }

      static PyObject *t_AbstractExecutorService_invokeAll(t_AbstractExecutorService *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(result = self->object.invokeAll(a0));
              return ::java::util::t_List::wrap_Object(result);
            }
          }
          break;
         case 3:
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jlong a1;
            ::java::util::concurrent::TimeUnit a2((jobject) NULL);
            PyTypeObject **p2;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "KJK", ::java::util::Collection::initializeClass, ::java::util::concurrent::TimeUnit::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &a2, &p2, ::java::util::concurrent::t_TimeUnit::parameters_))
            {
              OBJ_CALL(result = self->object.invokeAll(a0, a1, a2));
              return ::java::util::t_List::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "invokeAll", args);
        return NULL;
      }

      static PyObject *t_AbstractExecutorService_invokeAny(t_AbstractExecutorService *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(result = self->object.invokeAny(a0));
              return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }
          }
          break;
         case 3:
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jlong a1;
            ::java::util::concurrent::TimeUnit a2((jobject) NULL);
            PyTypeObject **p2;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "KJK", ::java::util::Collection::initializeClass, ::java::util::concurrent::TimeUnit::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &a2, &p2, ::java::util::concurrent::t_TimeUnit::parameters_))
            {
              OBJ_CALL(result = self->object.invokeAny(a0, a1, a2));
              return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "invokeAny", args);
        return NULL;
      }

      static PyObject *t_AbstractExecutorService_submit(t_AbstractExecutorService *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::lang::Runnable a0((jobject) NULL);
            ::java::util::concurrent::Future result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::lang::Runnable::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.submit(a0));
              return ::java::util::concurrent::t_Future::wrap_Object(result);
            }
          }
          {
            ::java::util::concurrent::Callable a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::concurrent::Future result((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::concurrent::Callable::initializeClass, &a0, &p0, ::java::util::concurrent::t_Callable::parameters_))
            {
              OBJ_CALL(result = self->object.submit(a0));
              return ::java::util::concurrent::t_Future::wrap_Object(result);
            }
          }
          break;
         case 2:
          {
            ::java::lang::Runnable a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::util::concurrent::Future result((jobject) NULL);

            if (!parseArgs(args, "ko", ::java::lang::Runnable::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.submit(a0, a1));
              return ::java::util::concurrent::t_Future::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "submit", args);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "org/apache/lucene/util/Attribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeFactory::class$ = NULL;
        jmethodID *AttributeFactory::mids$ = NULL;
        bool AttributeFactory::live$ = false;
        AttributeFactory *AttributeFactory::DEFAULT_ATTRIBUTE_FACTORY = NULL;

        jclass AttributeFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_createAttributeInstance_735d71ec4c74ee78] = env->getMethodID(cls, "createAttributeInstance", "(Ljava/lang/Class;)Lorg/apache/lucene/util/AttributeImpl;");
            mids$[mid_getStaticImplementation_b43af07435791b5c] = env->getStaticMethodID(cls, "getStaticImplementation", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/lang/Class;)Lorg/apache/lucene/util/AttributeFactory;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DEFAULT_ATTRIBUTE_FACTORY = new AttributeFactory(env->getStaticObjectField(cls, "DEFAULT_ATTRIBUTE_FACTORY", "Lorg/apache/lucene/util/AttributeFactory;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeFactory::AttributeFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::util::AttributeImpl AttributeFactory::createAttributeInstance(const ::java::lang::Class & a0) const
        {
          return ::org::apache::lucene::util::AttributeImpl(env->callObjectMethod(this$, mids$[mid_createAttributeInstance_735d71ec4c74ee78], a0.this$));
        }

        AttributeFactory AttributeFactory::getStaticImplementation(const AttributeFactory & a0, const ::java::lang::Class & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return AttributeFactory(env->callStaticObjectMethod(cls, mids$[mid_getStaticImplementation_b43af07435791b5c], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/AttributeFactory$StaticImplementationAttributeFactory.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AttributeFactory_init_(t_AttributeFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeFactory_createAttributeInstance(t_AttributeFactory *self, PyObject *arg);
        static PyObject *t_AttributeFactory_getStaticImplementation(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_AttributeFactory__methods_[] = {
          DECLARE_METHOD(t_AttributeFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeFactory, createAttributeInstance, METH_O),
          DECLARE_METHOD(t_AttributeFactory, getStaticImplementation, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(AttributeFactory)[] = {
          { Py_tp_methods, t_AttributeFactory__methods_ },
          { Py_tp_init, (void *) t_AttributeFactory_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(AttributeFactory)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(AttributeFactory, t_AttributeFactory, AttributeFactory);

        void t_AttributeFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeFactory), &PY_TYPE_DEF(AttributeFactory), module, "AttributeFactory", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(AttributeFactory), "StaticImplementationAttributeFactory", make_descriptor(&PY_TYPE_DEF(AttributeFactory$StaticImplementationAttributeFactory)));
        }

        void t_AttributeFactory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(AttributeFactory), "class_", make_descriptor(AttributeFactory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(AttributeFactory), "wrapfn_", make_descriptor(t_AttributeFactory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(AttributeFactory), "boxfn_", make_descriptor(boxObject));
          env->getClass(AttributeFactory::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(AttributeFactory), "DEFAULT_ATTRIBUTE_FACTORY", make_descriptor(t_AttributeFactory::wrap_Object(*AttributeFactory::DEFAULT_ATTRIBUTE_FACTORY)));
        }

        static PyObject *t_AttributeFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeFactory::initializeClass, 1)))
            return NULL;
          return t_AttributeFactory::wrap_Object(AttributeFactory(((t_AttributeFactory *) arg)->object.this$));
        }
        static PyObject *t_AttributeFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AttributeFactory_init_(t_AttributeFactory *self, PyObject *args, PyObject *kwds)
        {
          AttributeFactory object((jobject) NULL);

          INT_CALL(object = AttributeFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_AttributeFactory_createAttributeInstance(t_AttributeFactory *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::util::AttributeImpl result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.createAttributeInstance(a0));
            return ::org::apache::lucene::util::t_AttributeImpl::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createAttributeInstance", arg);
          return NULL;
        }

        static PyObject *t_AttributeFactory_getStaticImplementation(PyTypeObject *type, PyObject *args)
        {
          AttributeFactory a0((jobject) NULL);
          ::java::lang::Class a1((jobject) NULL);
          PyTypeObject **p1;
          AttributeFactory result((jobject) NULL);

          if (!parseArgs(args, "kK", AttributeFactory::initializeClass, ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::AttributeFactory::getStaticImplementation(a0, a1));
            return t_AttributeFactory::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getStaticImplementation", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/TFValueSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *TFValueSource::class$ = NULL;
            jmethodID *TFValueSource::mids$ = NULL;
            bool TFValueSource::live$ = false;

            jclass TFValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/TFValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1329b9cc98226e6f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TFValueSource::TFValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::valuesource::TermFreqValueSource(env->newObject(initializeClass, &mids$, mid_init$_1329b9cc98226e6f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues TFValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            ::java::lang::String TFValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_db9b55ba01e03e4b]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_TFValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TFValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TFValueSource_init_(t_TFValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TFValueSource_getValues(t_TFValueSource *self, PyObject *args);
            static PyObject *t_TFValueSource_name(t_TFValueSource *self, PyObject *args);

            static PyMethodDef t_TFValueSource__methods_[] = {
              DECLARE_METHOD(t_TFValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TFValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TFValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_TFValueSource, name, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(TFValueSource)[] = {
              { Py_tp_methods, t_TFValueSource__methods_ },
              { Py_tp_init, (void *) t_TFValueSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(TFValueSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::TermFreqValueSource),
              NULL
            };

            DEFINE_TYPE(TFValueSource, t_TFValueSource, TFValueSource);

            void t_TFValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(TFValueSource), &PY_TYPE_DEF(TFValueSource), module, "TFValueSource", 0);
            }

            void t_TFValueSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(TFValueSource), "class_", make_descriptor(TFValueSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TFValueSource), "wrapfn_", make_descriptor(t_TFValueSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TFValueSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TFValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TFValueSource::initializeClass, 1)))
                return NULL;
              return t_TFValueSource::wrap_Object(TFValueSource(((t_TFValueSource *) arg)->object.this$));
            }
            static PyObject *t_TFValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TFValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TFValueSource_init_(t_TFValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              TFValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = TFValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TFValueSource_getValues(t_TFValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(TFValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_TFValueSource_name(t_TFValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.name());
                return j2p(result);
              }

              return callSuper(PY_TYPE(TFValueSource), (PyObject *) self, "name", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ExitableDirectoryReader$ExitableTermsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/QueryTimeout.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ExitableDirectoryReader$ExitableTermsEnum::class$ = NULL;
        jmethodID *ExitableDirectoryReader$ExitableTermsEnum::mids$ = NULL;
        bool ExitableDirectoryReader$ExitableTermsEnum::live$ = false;

        jclass ExitableDirectoryReader$ExitableTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ExitableDirectoryReader$ExitableTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c21b7e818b8cfdd6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/index/QueryTimeout;)V");
            mids$[mid_next_7af2ea2e37ce82b8] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ExitableDirectoryReader$ExitableTermsEnum::ExitableDirectoryReader$ExitableTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::org::apache::lucene::index::QueryTimeout & a1) : ::org::apache::lucene::index::FilterLeafReader$FilterTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_c21b7e818b8cfdd6, a0.this$, a1.this$)) {}

        ::org::apache::lucene::util::BytesRef ExitableDirectoryReader$ExitableTermsEnum::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_7af2ea2e37ce82b8]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ExitableDirectoryReader$ExitableTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ExitableDirectoryReader$ExitableTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ExitableDirectoryReader$ExitableTermsEnum_of_(t_ExitableDirectoryReader$ExitableTermsEnum *self, PyObject *args);
        static int t_ExitableDirectoryReader$ExitableTermsEnum_init_(t_ExitableDirectoryReader$ExitableTermsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ExitableDirectoryReader$ExitableTermsEnum_next(t_ExitableDirectoryReader$ExitableTermsEnum *self, PyObject *args);
        static PyObject *t_ExitableDirectoryReader$ExitableTermsEnum_get__parameters_(t_ExitableDirectoryReader$ExitableTermsEnum *self, void *data);
        static PyGetSetDef t_ExitableDirectoryReader$ExitableTermsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_ExitableDirectoryReader$ExitableTermsEnum, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ExitableDirectoryReader$ExitableTermsEnum__methods_[] = {
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableTermsEnum, of_, METH_VARARGS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableTermsEnum, next, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ExitableDirectoryReader$ExitableTermsEnum)[] = {
          { Py_tp_methods, t_ExitableDirectoryReader$ExitableTermsEnum__methods_ },
          { Py_tp_init, (void *) t_ExitableDirectoryReader$ExitableTermsEnum_init_ },
          { Py_tp_getset, t_ExitableDirectoryReader$ExitableTermsEnum__fields_ },
          { Py_tp_iter, (void *) PyObject_SelfIter },
          { Py_tp_iternext, (void *) ((PyObject *(*)(t_ExitableDirectoryReader$ExitableTermsEnum *)) get_generic_next< t_ExitableDirectoryReader$ExitableTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >) },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ExitableDirectoryReader$ExitableTermsEnum)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::FilterLeafReader$FilterTermsEnum),
          NULL
        };

        DEFINE_TYPE(ExitableDirectoryReader$ExitableTermsEnum, t_ExitableDirectoryReader$ExitableTermsEnum, ExitableDirectoryReader$ExitableTermsEnum);
        PyObject *t_ExitableDirectoryReader$ExitableTermsEnum::wrap_Object(const ExitableDirectoryReader$ExitableTermsEnum& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ExitableDirectoryReader$ExitableTermsEnum::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ExitableDirectoryReader$ExitableTermsEnum *self = (t_ExitableDirectoryReader$ExitableTermsEnum *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ExitableDirectoryReader$ExitableTermsEnum::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ExitableDirectoryReader$ExitableTermsEnum::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ExitableDirectoryReader$ExitableTermsEnum *self = (t_ExitableDirectoryReader$ExitableTermsEnum *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ExitableDirectoryReader$ExitableTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(ExitableDirectoryReader$ExitableTermsEnum), &PY_TYPE_DEF(ExitableDirectoryReader$ExitableTermsEnum), module, "ExitableDirectoryReader$ExitableTermsEnum", 0);
        }

        void t_ExitableDirectoryReader$ExitableTermsEnum::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader$ExitableTermsEnum), "class_", make_descriptor(ExitableDirectoryReader$ExitableTermsEnum::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader$ExitableTermsEnum), "wrapfn_", make_descriptor(t_ExitableDirectoryReader$ExitableTermsEnum::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader$ExitableTermsEnum), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ExitableDirectoryReader$ExitableTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ExitableDirectoryReader$ExitableTermsEnum::initializeClass, 1)))
            return NULL;
          return t_ExitableDirectoryReader$ExitableTermsEnum::wrap_Object(ExitableDirectoryReader$ExitableTermsEnum(((t_ExitableDirectoryReader$ExitableTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_ExitableDirectoryReader$ExitableTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ExitableDirectoryReader$ExitableTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ExitableDirectoryReader$ExitableTermsEnum_of_(t_ExitableDirectoryReader$ExitableTermsEnum *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ExitableDirectoryReader$ExitableTermsEnum_init_(t_ExitableDirectoryReader$ExitableTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::index::QueryTimeout a1((jobject) NULL);
          ExitableDirectoryReader$ExitableTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::index::QueryTimeout::initializeClass, &a0, &a1))
          {
            INT_CALL(object = ExitableDirectoryReader$ExitableTermsEnum(a0, a1));
            self->object = object;
            self->parameters[0] = ::org::apache::lucene::index::PY_TYPE(LeafReader);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ExitableDirectoryReader$ExitableTermsEnum_next(t_ExitableDirectoryReader$ExitableTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ExitableDirectoryReader$ExitableTermsEnum), (PyObject *) self, "next", args, 2);
        }
        static PyObject *t_ExitableDirectoryReader$ExitableTermsEnum_get__parameters_(t_ExitableDirectoryReader$ExitableTermsEnum *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SrndTruncQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SrndTruncQuery::class$ = NULL;
            jmethodID *SrndTruncQuery::mids$ = NULL;
            bool SrndTruncQuery::live$ = false;

            jclass SrndTruncQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SrndTruncQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_fb4d8c9629702ac6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;CC)V");
                mids$[mid_getTruncated_db9b55ba01e03e4b] = env->getMethodID(cls, "getTruncated", "()Ljava/lang/String;");
                mids$[mid_toStringUnquoted_db9b55ba01e03e4b] = env->getMethodID(cls, "toStringUnquoted", "()Ljava/lang/String;");
                mids$[mid_visitMatchingTerms_dbcd50bd393e5e56] = env->getMethodID(cls, "visitMatchingTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor;)V");
                mids$[mid_appendRegExpForChar_7391856c832f59c0] = env->getMethodID(cls, "appendRegExpForChar", "(CLjava/lang/StringBuilder;)V");
                mids$[mid_truncatedToPrefixAndPattern_f2cc1bce94666404] = env->getMethodID(cls, "truncatedToPrefixAndPattern", "()V");
                mids$[mid_matchingChar_540573ecd04ffc16] = env->getMethodID(cls, "matchingChar", "(C)Z");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SrndTruncQuery::SrndTruncQuery(const ::java::lang::String & a0, jchar a1, jchar a2) : ::org::apache::lucene::queryparser::surround::query::SimpleTerm(env->newObject(initializeClass, &mids$, mid_init$_fb4d8c9629702ac6, a0.this$, a1, a2)) {}

            ::java::lang::String SrndTruncQuery::getTruncated() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTruncated_db9b55ba01e03e4b]));
            }

            ::java::lang::String SrndTruncQuery::toStringUnquoted() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringUnquoted_db9b55ba01e03e4b]));
            }

            void SrndTruncQuery::visitMatchingTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerms_dbcd50bd393e5e56], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SrndTruncQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SrndTruncQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SrndTruncQuery_init_(t_SrndTruncQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SrndTruncQuery_getTruncated(t_SrndTruncQuery *self);
            static PyObject *t_SrndTruncQuery_toStringUnquoted(t_SrndTruncQuery *self, PyObject *args);
            static PyObject *t_SrndTruncQuery_visitMatchingTerms(t_SrndTruncQuery *self, PyObject *args);
            static PyObject *t_SrndTruncQuery_get__truncated(t_SrndTruncQuery *self, void *data);
            static PyGetSetDef t_SrndTruncQuery__fields_[] = {
              DECLARE_GET_FIELD(t_SrndTruncQuery, truncated),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SrndTruncQuery__methods_[] = {
              DECLARE_METHOD(t_SrndTruncQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndTruncQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndTruncQuery, getTruncated, METH_NOARGS),
              DECLARE_METHOD(t_SrndTruncQuery, toStringUnquoted, METH_VARARGS),
              DECLARE_METHOD(t_SrndTruncQuery, visitMatchingTerms, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SrndTruncQuery)[] = {
              { Py_tp_methods, t_SrndTruncQuery__methods_ },
              { Py_tp_init, (void *) t_SrndTruncQuery_init_ },
              { Py_tp_getset, t_SrndTruncQuery__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SrndTruncQuery)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::surround::query::SimpleTerm),
              NULL
            };

            DEFINE_TYPE(SrndTruncQuery, t_SrndTruncQuery, SrndTruncQuery);

            void t_SrndTruncQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(SrndTruncQuery), &PY_TYPE_DEF(SrndTruncQuery), module, "SrndTruncQuery", 0);
            }

            void t_SrndTruncQuery::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SrndTruncQuery), "class_", make_descriptor(SrndTruncQuery::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SrndTruncQuery), "wrapfn_", make_descriptor(t_SrndTruncQuery::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SrndTruncQuery), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SrndTruncQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SrndTruncQuery::initializeClass, 1)))
                return NULL;
              return t_SrndTruncQuery::wrap_Object(SrndTruncQuery(((t_SrndTruncQuery *) arg)->object.this$));
            }
            static PyObject *t_SrndTruncQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SrndTruncQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SrndTruncQuery_init_(t_SrndTruncQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              jchar a1;
              jchar a2;
              SrndTruncQuery object((jobject) NULL);

              if (!parseArgs(args, "sCC", &a0, &a1, &a2))
              {
                INT_CALL(object = SrndTruncQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SrndTruncQuery_getTruncated(t_SrndTruncQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getTruncated());
              return j2p(result);
            }

            static PyObject *t_SrndTruncQuery_toStringUnquoted(t_SrndTruncQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toStringUnquoted());
                return j2p(result);
              }

              return callSuper(PY_TYPE(SrndTruncQuery), (PyObject *) self, "toStringUnquoted", args, 2);
            }

            static PyObject *t_SrndTruncQuery_visitMatchingTerms(t_SrndTruncQuery *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor a2((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.visitMatchingTerms(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(SrndTruncQuery), (PyObject *) self, "visitMatchingTerms", args, 2);
            }

            static PyObject *t_SrndTruncQuery_get__truncated(t_SrndTruncQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getTruncated());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonTokenStream.h"
#include "java/lang/Throwable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonTokenStream::class$ = NULL;
        jmethodID *PythonTokenStream::mids$ = NULL;
        bool PythonTokenStream::live$ = false;

        jclass PythonTokenStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonTokenStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
            mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonTokenStream::PythonTokenStream() : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void PythonTokenStream::close() const
        {
          env->callNonvirtualVoidMethod(this$, (jclass) ::org::apache::lucene::analysis::TokenStream::class$->this$, ::org::apache::lucene::analysis::TokenStream::mids$[::org::apache::lucene::analysis::TokenStream::mid_close_f2cc1bce94666404]);
        }

        void PythonTokenStream::end() const
        {
          env->callNonvirtualVoidMethod(this$, (jclass) ::org::apache::lucene::analysis::TokenStream::class$->this$, ::org::apache::lucene::analysis::TokenStream::mids$[::org::apache::lucene::analysis::TokenStream::mid_end_f2cc1bce94666404]);
        }

        void PythonTokenStream::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
        }

        jlong PythonTokenStream::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
        }

        void PythonTokenStream::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
        }

        void PythonTokenStream::reset() const
        {
          env->callNonvirtualVoidMethod(this$, (jclass) ::org::apache::lucene::analysis::TokenStream::class$->this$, ::org::apache::lucene::analysis::TokenStream::mids$[::org::apache::lucene::analysis::TokenStream::mid_reset_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonTokenStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonTokenStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonTokenStream_init_(t_PythonTokenStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonTokenStream_close(t_PythonTokenStream *self, PyObject *args);
        static PyObject *t_PythonTokenStream_end(t_PythonTokenStream *self, PyObject *args);
        static PyObject *t_PythonTokenStream_finalize(t_PythonTokenStream *self);
        static PyObject *t_PythonTokenStream_pythonExtension(t_PythonTokenStream *self, PyObject *args);
        static PyObject *t_PythonTokenStream_reset(t_PythonTokenStream *self, PyObject *args);
        static void JNICALL t_PythonTokenStream_close0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenStream_end1(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonTokenStream_incrementToken2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenStream_pythonDecRef3(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenStream_reset4(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonTokenStream_get__self(t_PythonTokenStream *self, void *data);
        static PyGetSetDef t_PythonTokenStream__fields_[] = {
          DECLARE_GET_FIELD(t_PythonTokenStream, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonTokenStream__methods_[] = {
          DECLARE_METHOD(t_PythonTokenStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenStream, close, METH_VARARGS),
          DECLARE_METHOD(t_PythonTokenStream, end, METH_VARARGS),
          DECLARE_METHOD(t_PythonTokenStream, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonTokenStream, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonTokenStream, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PythonTokenStream)[] = {
          { Py_tp_methods, t_PythonTokenStream__methods_ },
          { Py_tp_init, (void *) t_PythonTokenStream_init_ },
          { Py_tp_getset, t_PythonTokenStream__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PythonTokenStream)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenStream),
          NULL
        };

        DEFINE_TYPE(PythonTokenStream, t_PythonTokenStream, PythonTokenStream);

        void t_PythonTokenStream::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonTokenStream), &PY_TYPE_DEF(PythonTokenStream), module, "PythonTokenStream", 1);
        }

        void t_PythonTokenStream::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonTokenStream), "class_", make_descriptor(PythonTokenStream::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonTokenStream), "wrapfn_", make_descriptor(t_PythonTokenStream::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonTokenStream), "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonTokenStream::initializeClass);
          JNINativeMethod methods[] = {
            { "close", "()V", (void *) t_PythonTokenStream_close0 },
            { "end", "()V", (void *) t_PythonTokenStream_end1 },
            { "incrementToken", "()Z", (void *) t_PythonTokenStream_incrementToken2 },
            { "pythonDecRef", "()V", (void *) t_PythonTokenStream_pythonDecRef3 },
            { "reset", "()V", (void *) t_PythonTokenStream_reset4 },
          };
          env->registerNatives(cls, methods, 5);
        }

        static PyObject *t_PythonTokenStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonTokenStream::initializeClass, 1)))
            return NULL;
          return t_PythonTokenStream::wrap_Object(PythonTokenStream(((t_PythonTokenStream *) arg)->object.this$));
        }
        static PyObject *t_PythonTokenStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonTokenStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonTokenStream_init_(t_PythonTokenStream *self, PyObject *args, PyObject *kwds)
        {
          PythonTokenStream object((jobject) NULL);

          INT_CALL(object = PythonTokenStream());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonTokenStream_close(t_PythonTokenStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(PythonTokenStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_PythonTokenStream_end(t_PythonTokenStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.end());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(PythonTokenStream), (PyObject *) self, "end", args, 2);
        }

        static PyObject *t_PythonTokenStream_finalize(t_PythonTokenStream *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonTokenStream_pythonExtension(t_PythonTokenStream *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonTokenStream_reset(t_PythonTokenStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(PythonTokenStream), (PyObject *) self, "reset", args, 2);
        }

        static void JNICALL t_PythonTokenStream_close0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonTokenStream_end1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "end", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonTokenStream_incrementToken2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "incrementToken", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("incrementToken", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonTokenStream_pythonDecRef3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonTokenStream_reset4(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "reset", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonTokenStream_get__self(t_PythonTokenStream *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace perfield {

          ::java::lang::Class *PerFieldPostingsFormat::class$ = NULL;
          jmethodID *PerFieldPostingsFormat::mids$ = NULL;
          bool PerFieldPostingsFormat::live$ = false;
          ::java::lang::String *PerFieldPostingsFormat::PER_FIELD_FORMAT_KEY = NULL;
          ::java::lang::String *PerFieldPostingsFormat::PER_FIELD_NAME = NULL;
          ::java::lang::String *PerFieldPostingsFormat::PER_FIELD_SUFFIX_KEY = NULL;

          jclass PerFieldPostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/perfield/PerFieldPostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_876dc181a1f61814] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c39bdf540a53fab9] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_getPostingsFormatForField_62d8049c839a109a] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              PER_FIELD_FORMAT_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_FORMAT_KEY", "Ljava/lang/String;"));
              PER_FIELD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_NAME", "Ljava/lang/String;"));
              PER_FIELD_SUFFIX_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_SUFFIX_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PerFieldPostingsFormat::PerFieldPostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::FieldsConsumer PerFieldPostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_876dc181a1f61814], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer PerFieldPostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c39bdf540a53fab9], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat PerFieldPostingsFormat::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_62d8049c839a109a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace perfield {
          static PyObject *t_PerFieldPostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PerFieldPostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PerFieldPostingsFormat_init_(t_PerFieldPostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PerFieldPostingsFormat_fieldsConsumer(t_PerFieldPostingsFormat *self, PyObject *args);
          static PyObject *t_PerFieldPostingsFormat_fieldsProducer(t_PerFieldPostingsFormat *self, PyObject *args);
          static PyObject *t_PerFieldPostingsFormat_getPostingsFormatForField(t_PerFieldPostingsFormat *self, PyObject *arg);

          static PyMethodDef t_PerFieldPostingsFormat__methods_[] = {
            DECLARE_METHOD(t_PerFieldPostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldPostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldPostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldPostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldPostingsFormat, getPostingsFormatForField, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PerFieldPostingsFormat)[] = {
            { Py_tp_methods, t_PerFieldPostingsFormat__methods_ },
            { Py_tp_init, (void *) t_PerFieldPostingsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PerFieldPostingsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::PostingsFormat),
            NULL
          };

          DEFINE_TYPE(PerFieldPostingsFormat, t_PerFieldPostingsFormat, PerFieldPostingsFormat);

          void t_PerFieldPostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(PerFieldPostingsFormat), &PY_TYPE_DEF(PerFieldPostingsFormat), module, "PerFieldPostingsFormat", 0);
          }

          void t_PerFieldPostingsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PerFieldPostingsFormat), "class_", make_descriptor(PerFieldPostingsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PerFieldPostingsFormat), "wrapfn_", make_descriptor(t_PerFieldPostingsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PerFieldPostingsFormat), "boxfn_", make_descriptor(boxObject));
            env->getClass(PerFieldPostingsFormat::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PerFieldPostingsFormat), "PER_FIELD_FORMAT_KEY", make_descriptor(j2p(*PerFieldPostingsFormat::PER_FIELD_FORMAT_KEY)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PerFieldPostingsFormat), "PER_FIELD_NAME", make_descriptor(j2p(*PerFieldPostingsFormat::PER_FIELD_NAME)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PerFieldPostingsFormat), "PER_FIELD_SUFFIX_KEY", make_descriptor(j2p(*PerFieldPostingsFormat::PER_FIELD_SUFFIX_KEY)));
          }

          static PyObject *t_PerFieldPostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PerFieldPostingsFormat::initializeClass, 1)))
              return NULL;
            return t_PerFieldPostingsFormat::wrap_Object(PerFieldPostingsFormat(((t_PerFieldPostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_PerFieldPostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PerFieldPostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PerFieldPostingsFormat_init_(t_PerFieldPostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            PerFieldPostingsFormat object((jobject) NULL);

            INT_CALL(object = PerFieldPostingsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_PerFieldPostingsFormat_fieldsConsumer(t_PerFieldPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PerFieldPostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_PerFieldPostingsFormat_fieldsProducer(t_PerFieldPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PerFieldPostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_PerFieldPostingsFormat_getPostingsFormatForField(t_PerFieldPostingsFormat *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/index/PythonIndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace index {

        ::java::lang::Class *PythonIndexDeletionPolicy::class$ = NULL;
        jmethodID *PythonIndexDeletionPolicy::mids$ = NULL;
        bool PythonIndexDeletionPolicy::live$ = false;

        jclass PythonIndexDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/index/PythonIndexDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_onCommit_d03990be0130160d] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_d03990be0130160d] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");
            mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIndexDeletionPolicy::PythonIndexDeletionPolicy() : ::org::apache::lucene::index::IndexDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void PythonIndexDeletionPolicy::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
        }

        jlong PythonIndexDeletionPolicy::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
        }

        void PythonIndexDeletionPolicy::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace index {
        static PyObject *t_PythonIndexDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIndexDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIndexDeletionPolicy_init_(t_PythonIndexDeletionPolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIndexDeletionPolicy_finalize(t_PythonIndexDeletionPolicy *self);
        static PyObject *t_PythonIndexDeletionPolicy_pythonExtension(t_PythonIndexDeletionPolicy *self, PyObject *args);
        static void JNICALL t_PythonIndexDeletionPolicy_onCommit0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonIndexDeletionPolicy_onInit1(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonIndexDeletionPolicy_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonIndexDeletionPolicy_get__self(t_PythonIndexDeletionPolicy *self, void *data);
        static PyGetSetDef t_PythonIndexDeletionPolicy__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIndexDeletionPolicy, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIndexDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_PythonIndexDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexDeletionPolicy, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIndexDeletionPolicy, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PythonIndexDeletionPolicy)[] = {
          { Py_tp_methods, t_PythonIndexDeletionPolicy__methods_ },
          { Py_tp_init, (void *) t_PythonIndexDeletionPolicy_init_ },
          { Py_tp_getset, t_PythonIndexDeletionPolicy__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PythonIndexDeletionPolicy)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::IndexDeletionPolicy),
          NULL
        };

        DEFINE_TYPE(PythonIndexDeletionPolicy, t_PythonIndexDeletionPolicy, PythonIndexDeletionPolicy);

        void t_PythonIndexDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIndexDeletionPolicy), &PY_TYPE_DEF(PythonIndexDeletionPolicy), module, "PythonIndexDeletionPolicy", 1);
        }

        void t_PythonIndexDeletionPolicy::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonIndexDeletionPolicy), "class_", make_descriptor(PythonIndexDeletionPolicy::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonIndexDeletionPolicy), "wrapfn_", make_descriptor(t_PythonIndexDeletionPolicy::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonIndexDeletionPolicy), "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIndexDeletionPolicy::initializeClass);
          JNINativeMethod methods[] = {
            { "onCommit", "(Ljava/util/List;)V", (void *) t_PythonIndexDeletionPolicy_onCommit0 },
            { "onInit", "(Ljava/util/List;)V", (void *) t_PythonIndexDeletionPolicy_onInit1 },
            { "pythonDecRef", "()V", (void *) t_PythonIndexDeletionPolicy_pythonDecRef2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonIndexDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIndexDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_PythonIndexDeletionPolicy::wrap_Object(PythonIndexDeletionPolicy(((t_PythonIndexDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_PythonIndexDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIndexDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIndexDeletionPolicy_init_(t_PythonIndexDeletionPolicy *self, PyObject *args, PyObject *kwds)
        {
          PythonIndexDeletionPolicy object((jobject) NULL);

          INT_CALL(object = PythonIndexDeletionPolicy());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIndexDeletionPolicy_finalize(t_PythonIndexDeletionPolicy *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIndexDeletionPolicy_pythonExtension(t_PythonIndexDeletionPolicy *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static void JNICALL t_PythonIndexDeletionPolicy_onCommit0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexDeletionPolicy::mids$[PythonIndexDeletionPolicy::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::java::util::t_List::wrap_Object(::java::util::List(a0));
          PyObject *result = PyObject_CallMethod(obj, "onCommit", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonIndexDeletionPolicy_onInit1(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexDeletionPolicy::mids$[PythonIndexDeletionPolicy::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::java::util::t_List::wrap_Object(::java::util::List(a0));
          PyObject *result = PyObject_CallMethod(obj, "onInit", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonIndexDeletionPolicy_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexDeletionPolicy::mids$[PythonIndexDeletionPolicy::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIndexDeletionPolicy::mids$[PythonIndexDeletionPolicy::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonIndexDeletionPolicy_get__self(t_PythonIndexDeletionPolicy *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *CompiledAutomaton$AUTOMATON_TYPE::class$ = NULL;
          jmethodID *CompiledAutomaton$AUTOMATON_TYPE::mids$ = NULL;
          bool CompiledAutomaton$AUTOMATON_TYPE::live$ = false;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::ALL = NULL;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::NONE = NULL;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::NORMAL = NULL;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::SINGLE = NULL;

          jclass CompiledAutomaton$AUTOMATON_TYPE::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_f700ada9277f9842] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;");
              mids$[mid_values_4019c2a96bd3da19] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              ALL = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "ALL", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              NONE = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "NONE", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              NORMAL = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "NORMAL", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              SINGLE = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "SINGLE", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompiledAutomaton$AUTOMATON_TYPE CompiledAutomaton$AUTOMATON_TYPE::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CompiledAutomaton$AUTOMATON_TYPE(env->callStaticObjectMethod(cls, mids$[mid_valueOf_f700ada9277f9842], a0.this$));
          }

          JArray< CompiledAutomaton$AUTOMATON_TYPE > CompiledAutomaton$AUTOMATON_TYPE::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< CompiledAutomaton$AUTOMATON_TYPE >(env->callStaticObjectMethod(cls, mids$[mid_values_4019c2a96bd3da19]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_of_(t_CompiledAutomaton$AUTOMATON_TYPE *self, PyObject *args);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_values(PyTypeObject *type);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_get__parameters_(t_CompiledAutomaton$AUTOMATON_TYPE *self, void *data);
          static PyGetSetDef t_CompiledAutomaton$AUTOMATON_TYPE__fields_[] = {
            DECLARE_GET_FIELD(t_CompiledAutomaton$AUTOMATON_TYPE, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CompiledAutomaton$AUTOMATON_TYPE__methods_[] = {
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, of_, METH_VARARGS),
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CompiledAutomaton$AUTOMATON_TYPE)[] = {
            { Py_tp_methods, t_CompiledAutomaton$AUTOMATON_TYPE__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_CompiledAutomaton$AUTOMATON_TYPE__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CompiledAutomaton$AUTOMATON_TYPE)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(CompiledAutomaton$AUTOMATON_TYPE, t_CompiledAutomaton$AUTOMATON_TYPE, CompiledAutomaton$AUTOMATON_TYPE);
          PyObject *t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(const CompiledAutomaton$AUTOMATON_TYPE& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CompiledAutomaton$AUTOMATON_TYPE *self = (t_CompiledAutomaton$AUTOMATON_TYPE *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CompiledAutomaton$AUTOMATON_TYPE::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CompiledAutomaton$AUTOMATON_TYPE::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CompiledAutomaton$AUTOMATON_TYPE *self = (t_CompiledAutomaton$AUTOMATON_TYPE *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CompiledAutomaton$AUTOMATON_TYPE::install(PyObject *module)
          {
            installType(&PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE), &PY_TYPE_DEF(CompiledAutomaton$AUTOMATON_TYPE), module, "CompiledAutomaton$AUTOMATON_TYPE", 0);
          }

          void t_CompiledAutomaton$AUTOMATON_TYPE::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE), "class_", make_descriptor(CompiledAutomaton$AUTOMATON_TYPE::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE), "wrapfn_", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE), "boxfn_", make_descriptor(boxObject));
            env->getClass(CompiledAutomaton$AUTOMATON_TYPE::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE), "ALL", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::ALL)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE), "NONE", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::NONE)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE), "NORMAL", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::NORMAL)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE), "SINGLE", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::SINGLE)));
          }

          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompiledAutomaton$AUTOMATON_TYPE::initializeClass, 1)))
              return NULL;
            return t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(CompiledAutomaton$AUTOMATON_TYPE(((t_CompiledAutomaton$AUTOMATON_TYPE *) arg)->object.this$));
          }
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompiledAutomaton$AUTOMATON_TYPE::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_of_(t_CompiledAutomaton$AUTOMATON_TYPE *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            CompiledAutomaton$AUTOMATON_TYPE result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE::valueOf(a0));
              return t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_values(PyTypeObject *type)
          {
            JArray< CompiledAutomaton$AUTOMATON_TYPE > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE::values());
            return JArray<jobject>(result.this$).wrap(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_jobject);
          }
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_get__parameters_(t_CompiledAutomaton$AUTOMATON_TYPE *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NoLockFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/NoLockFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NoLockFactory::class$ = NULL;
        jmethodID *NoLockFactory::mids$ = NULL;
        bool NoLockFactory::live$ = false;
        NoLockFactory *NoLockFactory::INSTANCE = NULL;

        jclass NoLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NoLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_obtainLock_6aee55f49034dd72] = env->getMethodID(cls, "obtainLock", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            INSTANCE = new NoLockFactory(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/store/NoLockFactory;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::store::Lock NoLockFactory::obtainLock(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_obtainLock_6aee55f49034dd72], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NoLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoLockFactory_obtainLock(t_NoLockFactory *self, PyObject *args);

        static PyMethodDef t_NoLockFactory__methods_[] = {
          DECLARE_METHOD(t_NoLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoLockFactory, obtainLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NoLockFactory)[] = {
          { Py_tp_methods, t_NoLockFactory__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NoLockFactory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::LockFactory),
          NULL
        };

        DEFINE_TYPE(NoLockFactory, t_NoLockFactory, NoLockFactory);

        void t_NoLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(NoLockFactory), &PY_TYPE_DEF(NoLockFactory), module, "NoLockFactory", 0);
        }

        void t_NoLockFactory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NoLockFactory), "class_", make_descriptor(NoLockFactory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NoLockFactory), "wrapfn_", make_descriptor(t_NoLockFactory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NoLockFactory), "boxfn_", make_descriptor(boxObject));
          env->getClass(NoLockFactory::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(NoLockFactory), "INSTANCE", make_descriptor(t_NoLockFactory::wrap_Object(*NoLockFactory::INSTANCE)));
        }

        static PyObject *t_NoLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoLockFactory::initializeClass, 1)))
            return NULL;
          return t_NoLockFactory::wrap_Object(NoLockFactory(((t_NoLockFactory *) arg)->object.this$));
        }
        static PyObject *t_NoLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NoLockFactory_obtainLock(t_NoLockFactory *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.obtainLock(a0, a1));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(PY_TYPE(NoLockFactory), (PyObject *) self, "obtainLock", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$ProximityType.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ProximityQueryNode$ProximityType::class$ = NULL;
              jmethodID *ProximityQueryNode$ProximityType::mids$ = NULL;
              bool ProximityQueryNode$ProximityType::live$ = false;

              jclass ProximityQueryNode$ProximityType::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$ProximityType");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f40f3b0b376469db] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;)V");
                  mids$[mid_init$_09356d5969576305] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;I)V");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ProximityQueryNode$ProximityType::ProximityQueryNode$ProximityType(const ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f40f3b0b376469db, a0.this$)) {}

              ProximityQueryNode$ProximityType::ProximityQueryNode$ProximityType(const ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_09356d5969576305, a0.this$, a1)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ProximityQueryNode$ProximityType_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ProximityQueryNode$ProximityType_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ProximityQueryNode$ProximityType_init_(t_ProximityQueryNode$ProximityType *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_ProximityQueryNode$ProximityType__methods_[] = {
                DECLARE_METHOD(t_ProximityQueryNode$ProximityType, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode$ProximityType, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(ProximityQueryNode$ProximityType)[] = {
                { Py_tp_methods, t_ProximityQueryNode$ProximityType__methods_ },
                { Py_tp_init, (void *) t_ProximityQueryNode$ProximityType_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(ProximityQueryNode$ProximityType)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(ProximityQueryNode$ProximityType, t_ProximityQueryNode$ProximityType, ProximityQueryNode$ProximityType);

              void t_ProximityQueryNode$ProximityType::install(PyObject *module)
              {
                installType(&PY_TYPE(ProximityQueryNode$ProximityType), &PY_TYPE_DEF(ProximityQueryNode$ProximityType), module, "ProximityQueryNode$ProximityType", 0);
              }

              void t_ProximityQueryNode$ProximityType::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(ProximityQueryNode$ProximityType), "class_", make_descriptor(ProximityQueryNode$ProximityType::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ProximityQueryNode$ProximityType), "wrapfn_", make_descriptor(t_ProximityQueryNode$ProximityType::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ProximityQueryNode$ProximityType), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ProximityQueryNode$ProximityType_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ProximityQueryNode$ProximityType::initializeClass, 1)))
                  return NULL;
                return t_ProximityQueryNode$ProximityType::wrap_Object(ProximityQueryNode$ProximityType(((t_ProximityQueryNode$ProximityType *) arg)->object.this$));
              }
              static PyObject *t_ProximityQueryNode$ProximityType_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ProximityQueryNode$ProximityType::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ProximityQueryNode$ProximityType_init_(t_ProximityQueryNode$ProximityType *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type a0((jobject) NULL);
                    PyTypeObject **p0;
                    ProximityQueryNode$ProximityType object((jobject) NULL);

                    if (!parseArgs(args, "K", ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::parameters_))
                    {
                      INT_CALL(object = ProximityQueryNode$ProximityType(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 2:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type a0((jobject) NULL);
                    PyTypeObject **p0;
                    jint a1;
                    ProximityQueryNode$ProximityType object((jobject) NULL);

                    if (!parseArgs(args, "KI", ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::parameters_, &a1))
                    {
                      INT_CALL(object = ProximityQueryNode$ProximityType(a0, a1));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/GradientFormatter.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *GradientFormatter::class$ = NULL;
          jmethodID *GradientFormatter::mids$ = NULL;
          bool GradientFormatter::live$ = false;

          jclass GradientFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/GradientFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_83fb09b4857a051b] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_hexToInt_a5a7d1128e9e2bb7] = env->getStaticMethodID(cls, "hexToInt", "(Ljava/lang/String;)I");
              mids$[mid_highlightTerm_89cd75f77d741eb4] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");
              mids$[mid_getForegroundColorString_64158b2ec62ced09] = env->getMethodID(cls, "getForegroundColorString", "(F)Ljava/lang/String;");
              mids$[mid_getBackgroundColorString_64158b2ec62ced09] = env->getMethodID(cls, "getBackgroundColorString", "(F)Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GradientFormatter::GradientFormatter(jfloat a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, const ::java::lang::String & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_83fb09b4857a051b, a0, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          jint GradientFormatter::hexToInt(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_hexToInt_a5a7d1128e9e2bb7], a0.this$);
          }

          ::java::lang::String GradientFormatter::highlightTerm(const ::java::lang::String & a0, const ::org::apache::lucene::search::highlight::TokenGroup & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_highlightTerm_89cd75f77d741eb4], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_GradientFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GradientFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GradientFormatter_init_(t_GradientFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GradientFormatter_hexToInt(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GradientFormatter_highlightTerm(t_GradientFormatter *self, PyObject *args);

          static PyMethodDef t_GradientFormatter__methods_[] = {
            DECLARE_METHOD(t_GradientFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GradientFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GradientFormatter, hexToInt, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GradientFormatter, highlightTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GradientFormatter)[] = {
            { Py_tp_methods, t_GradientFormatter__methods_ },
            { Py_tp_init, (void *) t_GradientFormatter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GradientFormatter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GradientFormatter, t_GradientFormatter, GradientFormatter);

          void t_GradientFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(GradientFormatter), &PY_TYPE_DEF(GradientFormatter), module, "GradientFormatter", 0);
          }

          void t_GradientFormatter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GradientFormatter), "class_", make_descriptor(GradientFormatter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GradientFormatter), "wrapfn_", make_descriptor(t_GradientFormatter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GradientFormatter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GradientFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GradientFormatter::initializeClass, 1)))
              return NULL;
            return t_GradientFormatter::wrap_Object(GradientFormatter(((t_GradientFormatter *) arg)->object.this$));
          }
          static PyObject *t_GradientFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GradientFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GradientFormatter_init_(t_GradientFormatter *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::java::lang::String a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            GradientFormatter object((jobject) NULL);

            if (!parseArgs(args, "Fssss", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = GradientFormatter(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GradientFormatter_hexToInt(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::highlight::GradientFormatter::hexToInt(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "hexToInt", arg);
            return NULL;
          }

          static PyObject *t_GradientFormatter_highlightTerm(t_GradientFormatter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::TokenGroup a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::highlight::TokenGroup::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.highlightTerm(a0, a1));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "highlightTerm", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/SegmentingTokenizerBase.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/text/BreakIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *SegmentingTokenizerBase::class$ = NULL;
          jmethodID *SegmentingTokenizerBase::mids$ = NULL;
          bool SegmentingTokenizerBase::live$ = false;

          jclass SegmentingTokenizerBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/SegmentingTokenizerBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a55d72120f228769] = env->getMethodID(cls, "<init>", "(Ljava/text/BreakIterator;)V");
              mids$[mid_init$_ded1d67c698a538d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/text/BreakIterator;)V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setNextSentence_438c62480c481c65] = env->getMethodID(cls, "setNextSentence", "(II)V");
              mids$[mid_incrementWord_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementWord", "()Z");
              mids$[mid_isSafeEnd_540573ecd04ffc16] = env->getMethodID(cls, "isSafeEnd", "(C)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SegmentingTokenizerBase::SegmentingTokenizerBase(const ::java::text::BreakIterator & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_a55d72120f228769, a0.this$)) {}

          SegmentingTokenizerBase::SegmentingTokenizerBase(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::text::BreakIterator & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_ded1d67c698a538d, a0.this$, a1.this$)) {}

          void SegmentingTokenizerBase::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean SegmentingTokenizerBase::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void SegmentingTokenizerBase::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_SegmentingTokenizerBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SegmentingTokenizerBase_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SegmentingTokenizerBase_init_(t_SegmentingTokenizerBase *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SegmentingTokenizerBase_end(t_SegmentingTokenizerBase *self, PyObject *args);
          static PyObject *t_SegmentingTokenizerBase_incrementToken(t_SegmentingTokenizerBase *self, PyObject *args);
          static PyObject *t_SegmentingTokenizerBase_reset(t_SegmentingTokenizerBase *self, PyObject *args);

          static PyMethodDef t_SegmentingTokenizerBase__methods_[] = {
            DECLARE_METHOD(t_SegmentingTokenizerBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SegmentingTokenizerBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SegmentingTokenizerBase, end, METH_VARARGS),
            DECLARE_METHOD(t_SegmentingTokenizerBase, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_SegmentingTokenizerBase, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SegmentingTokenizerBase)[] = {
            { Py_tp_methods, t_SegmentingTokenizerBase__methods_ },
            { Py_tp_init, (void *) t_SegmentingTokenizerBase_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SegmentingTokenizerBase)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Tokenizer),
            NULL
          };

          DEFINE_TYPE(SegmentingTokenizerBase, t_SegmentingTokenizerBase, SegmentingTokenizerBase);

          void t_SegmentingTokenizerBase::install(PyObject *module)
          {
            installType(&PY_TYPE(SegmentingTokenizerBase), &PY_TYPE_DEF(SegmentingTokenizerBase), module, "SegmentingTokenizerBase", 0);
          }

          void t_SegmentingTokenizerBase::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentingTokenizerBase), "class_", make_descriptor(SegmentingTokenizerBase::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentingTokenizerBase), "wrapfn_", make_descriptor(t_SegmentingTokenizerBase::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentingTokenizerBase), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SegmentingTokenizerBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SegmentingTokenizerBase::initializeClass, 1)))
              return NULL;
            return t_SegmentingTokenizerBase::wrap_Object(SegmentingTokenizerBase(((t_SegmentingTokenizerBase *) arg)->object.this$));
          }
          static PyObject *t_SegmentingTokenizerBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SegmentingTokenizerBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SegmentingTokenizerBase_init_(t_SegmentingTokenizerBase *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::text::BreakIterator a0((jobject) NULL);
                SegmentingTokenizerBase object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::text::BreakIterator::initializeClass, &a0))
                {
                  INT_CALL(object = SegmentingTokenizerBase(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::text::BreakIterator a1((jobject) NULL);
                SegmentingTokenizerBase object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::text::BreakIterator::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SegmentingTokenizerBase(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SegmentingTokenizerBase_end(t_SegmentingTokenizerBase *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SegmentingTokenizerBase), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_SegmentingTokenizerBase_incrementToken(t_SegmentingTokenizerBase *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SegmentingTokenizerBase), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_SegmentingTokenizerBase_reset(t_SegmentingTokenizerBase *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SegmentingTokenizerBase), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/messages/QueryParserMessages.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace messages {

              ::java::lang::Class *QueryParserMessages::class$ = NULL;
              jmethodID *QueryParserMessages::mids$ = NULL;
              bool QueryParserMessages::live$ = false;
              ::java::lang::String *QueryParserMessages::COULD_NOT_PARSE_NUMBER = NULL;
              ::java::lang::String *QueryParserMessages::EMPTY_MESSAGE = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_CANNOT_PARSE = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_ESCAPE_CHARACTER = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_FUZZY_EDITS = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_FUZZY_LIMITS = NULL;
              ::java::lang::String *QueryParserMessages::LEADING_WILDCARD_NOT_ALLOWED = NULL;
              ::java::lang::String *QueryParserMessages::LUCENE_QUERY_CONVERSION_ERROR = NULL;
              ::java::lang::String *QueryParserMessages::NODE_ACTION_NOT_SUPPORTED = NULL;
              ::java::lang::String *QueryParserMessages::NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY = NULL;
              ::java::lang::String *QueryParserMessages::NUMERIC_CANNOT_BE_EMPTY = NULL;
              ::java::lang::String *QueryParserMessages::PARAMETER_VALUE_NOT_SUPPORTED = NULL;
              ::java::lang::String *QueryParserMessages::TOO_MANY_BOOLEAN_CLAUSES = NULL;
              ::java::lang::String *QueryParserMessages::UNSUPPORTED_NUMERIC_DATA_TYPE = NULL;
              ::java::lang::String *QueryParserMessages::WILDCARD_NOT_SUPPORTED = NULL;

              jclass QueryParserMessages::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/messages/QueryParserMessages");

                  class$ = new ::java::lang::Class(cls);
                  cls = (jclass) class$->this$;

                  COULD_NOT_PARSE_NUMBER = new ::java::lang::String(env->getStaticObjectField(cls, "COULD_NOT_PARSE_NUMBER", "Ljava/lang/String;"));
                  EMPTY_MESSAGE = new ::java::lang::String(env->getStaticObjectField(cls, "EMPTY_MESSAGE", "Ljava/lang/String;"));
                  INVALID_SYNTAX = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX", "Ljava/lang/String;"));
                  INVALID_SYNTAX_CANNOT_PARSE = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_CANNOT_PARSE", "Ljava/lang/String;"));
                  INVALID_SYNTAX_ESCAPE_CHARACTER = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_ESCAPE_CHARACTER", "Ljava/lang/String;"));
                  INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE", "Ljava/lang/String;"));
                  INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION", "Ljava/lang/String;"));
                  INVALID_SYNTAX_FUZZY_EDITS = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_FUZZY_EDITS", "Ljava/lang/String;"));
                  INVALID_SYNTAX_FUZZY_LIMITS = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_FUZZY_LIMITS", "Ljava/lang/String;"));
                  LEADING_WILDCARD_NOT_ALLOWED = new ::java::lang::String(env->getStaticObjectField(cls, "LEADING_WILDCARD_NOT_ALLOWED", "Ljava/lang/String;"));
                  LUCENE_QUERY_CONVERSION_ERROR = new ::java::lang::String(env->getStaticObjectField(cls, "LUCENE_QUERY_CONVERSION_ERROR", "Ljava/lang/String;"));
                  NODE_ACTION_NOT_SUPPORTED = new ::java::lang::String(env->getStaticObjectField(cls, "NODE_ACTION_NOT_SUPPORTED", "Ljava/lang/String;"));
                  NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY = new ::java::lang::String(env->getStaticObjectField(cls, "NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY", "Ljava/lang/String;"));
                  NUMERIC_CANNOT_BE_EMPTY = new ::java::lang::String(env->getStaticObjectField(cls, "NUMERIC_CANNOT_BE_EMPTY", "Ljava/lang/String;"));
                  PARAMETER_VALUE_NOT_SUPPORTED = new ::java::lang::String(env->getStaticObjectField(cls, "PARAMETER_VALUE_NOT_SUPPORTED", "Ljava/lang/String;"));
                  TOO_MANY_BOOLEAN_CLAUSES = new ::java::lang::String(env->getStaticObjectField(cls, "TOO_MANY_BOOLEAN_CLAUSES", "Ljava/lang/String;"));
                  UNSUPPORTED_NUMERIC_DATA_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "UNSUPPORTED_NUMERIC_DATA_TYPE", "Ljava/lang/String;"));
                  WILDCARD_NOT_SUPPORTED = new ::java::lang::String(env->getStaticObjectField(cls, "WILDCARD_NOT_SUPPORTED", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace messages {
              static PyObject *t_QueryParserMessages_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryParserMessages_instance_(PyTypeObject *type, PyObject *arg);

              static PyMethodDef t_QueryParserMessages__methods_[] = {
                DECLARE_METHOD(t_QueryParserMessages, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryParserMessages, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(QueryParserMessages)[] = {
                { Py_tp_methods, t_QueryParserMessages__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(QueryParserMessages)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::messages::NLS),
                NULL
              };

              DEFINE_TYPE(QueryParserMessages, t_QueryParserMessages, QueryParserMessages);

              void t_QueryParserMessages::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryParserMessages), &PY_TYPE_DEF(QueryParserMessages), module, "QueryParserMessages", 0);
              }

              void t_QueryParserMessages::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserMessages), "class_", make_descriptor(QueryParserMessages::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserMessages), "wrapfn_", make_descriptor(t_QueryParserMessages::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserMessages), "boxfn_", make_descriptor(boxObject));
                env->getClass(QueryParserMessages::initializeClass);
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserMessages), "COULD_NOT_PARSE_NUMBER", make_descriptor(j2p(*QueryParserMessages::COULD_NOT_PARSE_NUMBER)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserMessages), "EMPTY_MESSAGE", make_descriptor(j2p(*QueryParserMessages::EMPTY_MESSAGE)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserMessages), "INVALID_SYNTAX", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserMessages), "INVALID_SYNTAX_CANNOT_PARSE", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_CANNOT_PARSE)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserMessages), "INVALID_SYNTAX_ESCAPE_CHARACTER", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_ESCAPE_CHARACTER)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserMessages), "INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserMessages), "INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserMessages), "INVALID_SYNTAX_FUZZY_EDITS", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_FUZZY_EDITS)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserMessages), "INVALID_SYNTAX_FUZZY_LIMITS", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_FUZZY_LIMITS)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserMessages), "LEADING_WILDCARD_NOT_ALLOWED", make_descriptor(j2p(*QueryParserMessages::LEADING_WILDCARD_NOT_ALLOWED)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserMessages), "LUCENE_QUERY_CONVERSION_ERROR", make_descriptor(j2p(*QueryParserMessages::LUCENE_QUERY_CONVERSION_ERROR)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserMessages), "NODE_ACTION_NOT_SUPPORTED", make_descriptor(j2p(*QueryParserMessages::NODE_ACTION_NOT_SUPPORTED)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserMessages), "NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY", make_descriptor(j2p(*QueryParserMessages::NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserMessages), "NUMERIC_CANNOT_BE_EMPTY", make_descriptor(j2p(*QueryParserMessages::NUMERIC_CANNOT_BE_EMPTY)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserMessages), "PARAMETER_VALUE_NOT_SUPPORTED", make_descriptor(j2p(*QueryParserMessages::PARAMETER_VALUE_NOT_SUPPORTED)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserMessages), "TOO_MANY_BOOLEAN_CLAUSES", make_descriptor(j2p(*QueryParserMessages::TOO_MANY_BOOLEAN_CLAUSES)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserMessages), "UNSUPPORTED_NUMERIC_DATA_TYPE", make_descriptor(j2p(*QueryParserMessages::UNSUPPORTED_NUMERIC_DATA_TYPE)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserMessages), "WILDCARD_NOT_SUPPORTED", make_descriptor(j2p(*QueryParserMessages::WILDCARD_NOT_SUPPORTED)));
              }

              static PyObject *t_QueryParserMessages_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryParserMessages::initializeClass, 1)))
                  return NULL;
                return t_QueryParserMessages::wrap_Object(QueryParserMessages(((t_QueryParserMessages *) arg)->object.this$));
              }
              static PyObject *t_QueryParserMessages_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryParserMessages::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ReaderUtil.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ReaderUtil::class$ = NULL;
        jmethodID *ReaderUtil::mids$ = NULL;
        bool ReaderUtil::live$ = false;

        jclass ReaderUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ReaderUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getTopLevelContext_d57b9557292906ff] = env->getStaticMethodID(cls, "getTopLevelContext", "(Lorg/apache/lucene/index/IndexReaderContext;)Lorg/apache/lucene/index/IndexReaderContext;");
            mids$[mid_subIndex_2155253b1d6fbef1] = env->getStaticMethodID(cls, "subIndex", "(I[I)I");
            mids$[mid_subIndex_d5048b0f56c661bc] = env->getStaticMethodID(cls, "subIndex", "(ILjava/util/List;)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::IndexReaderContext ReaderUtil::getTopLevelContext(const ::org::apache::lucene::index::IndexReaderContext & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::IndexReaderContext(env->callStaticObjectMethod(cls, mids$[mid_getTopLevelContext_d57b9557292906ff], a0.this$));
        }

        jint ReaderUtil::subIndex(jint a0, const JArray< jint > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_subIndex_2155253b1d6fbef1], a0, a1.this$);
        }

        jint ReaderUtil::subIndex(jint a0, const ::java::util::List & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_subIndex_d5048b0f56c661bc], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ReaderUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderUtil_getTopLevelContext(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderUtil_subIndex(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_ReaderUtil__methods_[] = {
          DECLARE_METHOD(t_ReaderUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderUtil, getTopLevelContext, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderUtil, subIndex, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ReaderUtil)[] = {
          { Py_tp_methods, t_ReaderUtil__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ReaderUtil)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(ReaderUtil, t_ReaderUtil, ReaderUtil);

        void t_ReaderUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(ReaderUtil), &PY_TYPE_DEF(ReaderUtil), module, "ReaderUtil", 0);
        }

        void t_ReaderUtil::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ReaderUtil), "class_", make_descriptor(ReaderUtil::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ReaderUtil), "wrapfn_", make_descriptor(t_ReaderUtil::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ReaderUtil), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ReaderUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReaderUtil::initializeClass, 1)))
            return NULL;
          return t_ReaderUtil::wrap_Object(ReaderUtil(((t_ReaderUtil *) arg)->object.this$));
        }
        static PyObject *t_ReaderUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReaderUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ReaderUtil_getTopLevelContext(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
          ::org::apache::lucene::index::IndexReaderContext result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::ReaderUtil::getTopLevelContext(a0));
            return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getTopLevelContext", arg);
          return NULL;
        }

        static PyObject *t_ReaderUtil_subIndex(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              JArray< jint > a1((jobject) NULL);
              jint result;

              if (!parseArgs(args, "I[I", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::ReaderUtil::subIndex(a0, a1));
                return PyLong_FromLong((long) result);
              }
            }
            {
              jint a0;
              ::java::util::List a1((jobject) NULL);
              PyTypeObject **p1;
              jint result;

              if (!parseArgs(args, "IK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::ReaderUtil::subIndex(a0, a1));
                return PyLong_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "subIndex", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FileSwitchDirectory.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FileSwitchDirectory::class$ = NULL;
        jmethodID *FileSwitchDirectory::mids$ = NULL;
        bool FileSwitchDirectory::live$ = false;

        jclass FileSwitchDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FileSwitchDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a43d40323b09c5e8] = env->getMethodID(cls, "<init>", "(Ljava/util/Set;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Z)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_40e6d6dcc3f676b9] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_createTempOutput_918504249dfbe513] = env->getMethodID(cls, "createTempOutput", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_9fd2eb66a64e6f0f] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileLength_b1e05207ec98e246] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getExtension_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "getExtension", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getPendingDeletions_7dcf4034c6d1a92a] = env->getMethodID(cls, "getPendingDeletions", "()Ljava/util/Set;");
            mids$[mid_getPrimaryDir_7452b086ce8219b2] = env->getMethodID(cls, "getPrimaryDir", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getSecondaryDir_7452b086ce8219b2] = env->getMethodID(cls, "getSecondaryDir", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_listAll_9865da0b5ee490bc] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_obtainLock_f265149b22017c5b] = env->getMethodID(cls, "obtainLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openInput_cc9a9aabe8db93df] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_rename_15b72f6a44ff93f2] = env->getMethodID(cls, "rename", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_sync_50bc3ddc62a19f2d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_syncMetaData_f2cc1bce94666404] = env->getMethodID(cls, "syncMetaData", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FileSwitchDirectory::FileSwitchDirectory(const ::java::util::Set & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::store::Directory & a2, jboolean a3) : ::org::apache::lucene::store::Directory(env->newObject(initializeClass, &mids$, mid_init$_a43d40323b09c5e8, a0.this$, a1.this$, a2.this$, a3)) {}

        void FileSwitchDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        ::org::apache::lucene::store::IndexOutput FileSwitchDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_40e6d6dcc3f676b9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::store::IndexOutput FileSwitchDirectory::createTempOutput(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createTempOutput_918504249dfbe513], a0.this$, a1.this$, a2.this$));
        }

        void FileSwitchDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_9fd2eb66a64e6f0f], a0.this$);
        }

        jlong FileSwitchDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_b1e05207ec98e246], a0.this$);
        }

        ::java::lang::String FileSwitchDirectory::getExtension(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getExtension_9bfa75c9f141b67f], a0.this$));
        }

        ::java::util::Set FileSwitchDirectory::getPendingDeletions() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getPendingDeletions_7dcf4034c6d1a92a]));
        }

        ::org::apache::lucene::store::Directory FileSwitchDirectory::getPrimaryDir() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getPrimaryDir_7452b086ce8219b2]));
        }

        ::org::apache::lucene::store::Directory FileSwitchDirectory::getSecondaryDir() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getSecondaryDir_7452b086ce8219b2]));
        }

        JArray< ::java::lang::String > FileSwitchDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_9865da0b5ee490bc]));
        }

        ::org::apache::lucene::store::Lock FileSwitchDirectory::obtainLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_obtainLock_f265149b22017c5b], a0.this$));
        }

        ::org::apache::lucene::store::IndexInput FileSwitchDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_cc9a9aabe8db93df], a0.this$, a1.this$));
        }

        void FileSwitchDirectory::rename(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_rename_15b72f6a44ff93f2], a0.this$, a1.this$);
        }

        void FileSwitchDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_50bc3ddc62a19f2d], a0.this$);
        }

        void FileSwitchDirectory::syncMetaData() const
        {
          env->callVoidMethod(this$, mids$[mid_syncMetaData_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FileSwitchDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FileSwitchDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FileSwitchDirectory_init_(t_FileSwitchDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FileSwitchDirectory_close(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_createOutput(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_createTempOutput(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_deleteFile(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_fileLength(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_getExtension(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FileSwitchDirectory_getPendingDeletions(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_getPrimaryDir(t_FileSwitchDirectory *self);
        static PyObject *t_FileSwitchDirectory_getSecondaryDir(t_FileSwitchDirectory *self);
        static PyObject *t_FileSwitchDirectory_listAll(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_obtainLock(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_openInput(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_rename(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_sync(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_syncMetaData(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_get__pendingDeletions(t_FileSwitchDirectory *self, void *data);
        static PyObject *t_FileSwitchDirectory_get__primaryDir(t_FileSwitchDirectory *self, void *data);
        static PyObject *t_FileSwitchDirectory_get__secondaryDir(t_FileSwitchDirectory *self, void *data);
        static PyGetSetDef t_FileSwitchDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_FileSwitchDirectory, pendingDeletions),
          DECLARE_GET_FIELD(t_FileSwitchDirectory, primaryDir),
          DECLARE_GET_FIELD(t_FileSwitchDirectory, secondaryDir),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FileSwitchDirectory__methods_[] = {
          DECLARE_METHOD(t_FileSwitchDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FileSwitchDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FileSwitchDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, createTempOutput, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, getExtension, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FileSwitchDirectory, getPendingDeletions, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, getPrimaryDir, METH_NOARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, getSecondaryDir, METH_NOARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, obtainLock, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, rename, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, syncMetaData, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FileSwitchDirectory)[] = {
          { Py_tp_methods, t_FileSwitchDirectory__methods_ },
          { Py_tp_init, (void *) t_FileSwitchDirectory_init_ },
          { Py_tp_getset, t_FileSwitchDirectory__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FileSwitchDirectory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::Directory),
          NULL
        };

        DEFINE_TYPE(FileSwitchDirectory, t_FileSwitchDirectory, FileSwitchDirectory);

        void t_FileSwitchDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(FileSwitchDirectory), &PY_TYPE_DEF(FileSwitchDirectory), module, "FileSwitchDirectory", 0);
        }

        void t_FileSwitchDirectory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FileSwitchDirectory), "class_", make_descriptor(FileSwitchDirectory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FileSwitchDirectory), "wrapfn_", make_descriptor(t_FileSwitchDirectory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FileSwitchDirectory), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FileSwitchDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FileSwitchDirectory::initializeClass, 1)))
            return NULL;
          return t_FileSwitchDirectory::wrap_Object(FileSwitchDirectory(((t_FileSwitchDirectory *) arg)->object.this$));
        }
        static PyObject *t_FileSwitchDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FileSwitchDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FileSwitchDirectory_init_(t_FileSwitchDirectory *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::store::Directory a1((jobject) NULL);
          ::org::apache::lucene::store::Directory a2((jobject) NULL);
          jboolean a3;
          FileSwitchDirectory object((jobject) NULL);

          if (!parseArgs(args, "KkkZ", ::java::util::Set::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_, &a1, &a2, &a3))
          {
            INT_CALL(object = FileSwitchDirectory(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FileSwitchDirectory_close(t_FileSwitchDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FileSwitchDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_createOutput(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FileSwitchDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_createTempOutput(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "ssk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.createTempOutput(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FileSwitchDirectory), (PyObject *) self, "createTempOutput", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_deleteFile(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FileSwitchDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_fileLength(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FileSwitchDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_getExtension(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::FileSwitchDirectory::getExtension(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "getExtension", arg);
          return NULL;
        }

        static PyObject *t_FileSwitchDirectory_getPendingDeletions(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::util::Set result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPendingDeletions());
            return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
          }

          return callSuper(PY_TYPE(FileSwitchDirectory), (PyObject *) self, "getPendingDeletions", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_getPrimaryDir(t_FileSwitchDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getPrimaryDir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_FileSwitchDirectory_getSecondaryDir(t_FileSwitchDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getSecondaryDir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_FileSwitchDirectory_listAll(t_FileSwitchDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(PY_TYPE(FileSwitchDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_obtainLock(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.obtainLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FileSwitchDirectory), (PyObject *) self, "obtainLock", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_openInput(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FileSwitchDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_rename(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.rename(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FileSwitchDirectory), (PyObject *) self, "rename", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_sync(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FileSwitchDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_syncMetaData(t_FileSwitchDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.syncMetaData());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FileSwitchDirectory), (PyObject *) self, "syncMetaData", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_get__pendingDeletions(t_FileSwitchDirectory *self, void *data)
        {
          ::java::util::Set value((jobject) NULL);
          OBJ_CALL(value = self->object.getPendingDeletions());
          return ::java::util::t_Set::wrap_Object(value);
        }

        static PyObject *t_FileSwitchDirectory_get__primaryDir(t_FileSwitchDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getPrimaryDir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_FileSwitchDirectory_get__secondaryDir(t_FileSwitchDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getSecondaryDir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockReader.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "org/apache/lucene/index/ImpactsEnum.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *BlockReader::class$ = NULL;
          jmethodID *BlockReader::mids$ = NULL;
          bool BlockReader::live$ = false;

          jclass BlockReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/BlockReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_docFreq_9972fcc56b44e79d] = env->getMethodID(cls, "docFreq", "()I");
              mids$[mid_impacts_db5ea3c87adc7c65] = env->getMethodID(cls, "impacts", "(I)Lorg/apache/lucene/index/ImpactsEnum;");
              mids$[mid_next_7af2ea2e37ce82b8] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_ord_2e5ae9edcb9b072f] = env->getMethodID(cls, "ord", "()J");
              mids$[mid_postings_bb7f8f714d51176b] = env->getMethodID(cls, "postings", "(Lorg/apache/lucene/index/PostingsEnum;I)Lorg/apache/lucene/index/PostingsEnum;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_seekCeil_78824f53cd7bdb8a] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
              mids$[mid_seekExact_553d972fe19daaec] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
              mids$[mid_seekExact_9c778c9bce6694df] = env->getMethodID(cls, "seekExact", "(J)V");
              mids$[mid_seekExact_59a5c9565dacabef] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
              mids$[mid_term_7af2ea2e37ce82b8] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_termState_774a8ebb2c222d2d] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
              mids$[mid_totalTermFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "totalTermFreq", "()J");
              mids$[mid_nextTerm_7af2ea2e37ce82b8] = env->getMethodID(cls, "nextTerm", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getOrCreateDictionaryBrowser_f36d038b8a827a9e] = env->getMethodID(cls, "getOrCreateDictionaryBrowser", "()Lorg/apache/lucene/codecs/uniformsplit/IndexDictionary$Browser;");
              mids$[mid_isBeyondLastTerm_70c1ccb4f1d27d02] = env->getMethodID(cls, "isBeyondLastTerm", "(Lorg/apache/lucene/util/BytesRef;J)Z");
              mids$[mid_initializeHeader_c61df66683b6c9c2] = env->getMethodID(cls, "initializeHeader", "(Lorg/apache/lucene/util/BytesRef;J)V");
              mids$[mid_readLineInBlock_d9d7e41577bb8485] = env->getMethodID(cls, "readLineInBlock", "()Lorg/apache/lucene/codecs/uniformsplit/BlockLine;");
              mids$[mid_seekInBlock_78824f53cd7bdb8a] = env->getMethodID(cls, "seekInBlock", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
              mids$[mid_seekInBlock_4dd3141a587a8238] = env->getMethodID(cls, "seekInBlock", "(Lorg/apache/lucene/util/BytesRef;J)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
              mids$[mid_createDeltaBaseTermStateSerializer_582cc298510958b7] = env->getMethodID(cls, "createDeltaBaseTermStateSerializer", "()Lorg/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer;");
              mids$[mid_isCurrentTerm_553d972fe19daaec] = env->getMethodID(cls, "isCurrentTerm", "(Lorg/apache/lucene/util/BytesRef;)Z");
              mids$[mid_compareToMiddleAndJump_1c2e5fa34f4312de] = env->getMethodID(cls, "compareToMiddleAndJump", "(Lorg/apache/lucene/util/BytesRef;)I");
              mids$[mid_initializeBlockReadLazily_f2cc1bce94666404] = env->getMethodID(cls, "initializeBlockReadLazily", "()V");
              mids$[mid_createBlockHeaderSerializer_d9142c3f0777a24f] = env->getMethodID(cls, "createBlockHeaderSerializer", "()Lorg/apache/lucene/codecs/uniformsplit/BlockHeader$Serializer;");
              mids$[mid_createBlockLineSerializer_8d7f678ac5857d60] = env->getMethodID(cls, "createBlockLineSerializer", "()Lorg/apache/lucene/codecs/uniformsplit/BlockLine$Serializer;");
              mids$[mid_readHeader_8b6637037729ea33] = env->getMethodID(cls, "readHeader", "()Lorg/apache/lucene/codecs/uniformsplit/BlockHeader;");
              mids$[mid_decodeBlockBytesIfNeeded_83238e65a54c68bb] = env->getMethodID(cls, "decodeBlockBytesIfNeeded", "(I)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_readTermStateIfNotRead_ec21239f6d5a0c5b] = env->getMethodID(cls, "readTermStateIfNotRead", "()Lorg/apache/lucene/codecs/BlockTermState;");
              mids$[mid_readTermState_ec21239f6d5a0c5b] = env->getMethodID(cls, "readTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");
              mids$[mid_clearTermState_f2cc1bce94666404] = env->getMethodID(cls, "clearTermState", "()V");
              mids$[mid_newCorruptIndexException_798ec2323aebd6e3] = env->getMethodID(cls, "newCorruptIndexException", "(Ljava/lang/String;Ljava/lang/Long;)Lorg/apache/lucene/index/CorruptIndexException;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint BlockReader::docFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_docFreq_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::index::ImpactsEnum BlockReader::impacts(jint a0) const
          {
            return ::org::apache::lucene::index::ImpactsEnum(env->callObjectMethod(this$, mids$[mid_impacts_db5ea3c87adc7c65], a0));
          }

          ::org::apache::lucene::util::BytesRef BlockReader::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_7af2ea2e37ce82b8]));
          }

          jlong BlockReader::ord() const
          {
            return env->callLongMethod(this$, mids$[mid_ord_2e5ae9edcb9b072f]);
          }

          ::org::apache::lucene::index::PostingsEnum BlockReader::postings(const ::org::apache::lucene::index::PostingsEnum & a0, jint a1) const
          {
            return ::org::apache::lucene::index::PostingsEnum(env->callObjectMethod(this$, mids$[mid_postings_bb7f8f714d51176b], a0.this$, a1));
          }

          jlong BlockReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          ::org::apache::lucene::index::TermsEnum$SeekStatus BlockReader::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_78824f53cd7bdb8a], a0.this$));
          }

          jboolean BlockReader::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_seekExact_553d972fe19daaec], a0.this$);
          }

          void BlockReader::seekExact(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_seekExact_9c778c9bce6694df], a0);
          }

          void BlockReader::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_seekExact_59a5c9565dacabef], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::BytesRef BlockReader::term() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_7af2ea2e37ce82b8]));
          }

          ::org::apache::lucene::index::TermState BlockReader::termState() const
          {
            return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_774a8ebb2c222d2d]));
          }

          jlong BlockReader::totalTermFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_totalTermFreq_2e5ae9edcb9b072f]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_BlockReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockReader_docFreq(t_BlockReader *self, PyObject *args);
          static PyObject *t_BlockReader_impacts(t_BlockReader *self, PyObject *args);
          static PyObject *t_BlockReader_next(t_BlockReader *self, PyObject *args);
          static PyObject *t_BlockReader_ord(t_BlockReader *self, PyObject *args);
          static PyObject *t_BlockReader_postings(t_BlockReader *self, PyObject *args);
          static PyObject *t_BlockReader_ramBytesUsed(t_BlockReader *self);
          static PyObject *t_BlockReader_seekCeil(t_BlockReader *self, PyObject *args);
          static PyObject *t_BlockReader_seekExact(t_BlockReader *self, PyObject *args);
          static PyObject *t_BlockReader_term(t_BlockReader *self, PyObject *args);
          static PyObject *t_BlockReader_termState(t_BlockReader *self, PyObject *args);
          static PyObject *t_BlockReader_totalTermFreq(t_BlockReader *self, PyObject *args);

          static PyMethodDef t_BlockReader__methods_[] = {
            DECLARE_METHOD(t_BlockReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockReader, docFreq, METH_VARARGS),
            DECLARE_METHOD(t_BlockReader, impacts, METH_VARARGS),
            DECLARE_METHOD(t_BlockReader, next, METH_VARARGS),
            DECLARE_METHOD(t_BlockReader, ord, METH_VARARGS),
            DECLARE_METHOD(t_BlockReader, postings, METH_VARARGS),
            DECLARE_METHOD(t_BlockReader, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_BlockReader, seekCeil, METH_VARARGS),
            DECLARE_METHOD(t_BlockReader, seekExact, METH_VARARGS),
            DECLARE_METHOD(t_BlockReader, term, METH_VARARGS),
            DECLARE_METHOD(t_BlockReader, termState, METH_VARARGS),
            DECLARE_METHOD(t_BlockReader, totalTermFreq, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BlockReader)[] = {
            { Py_tp_methods, t_BlockReader__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_iter, (void *) PyObject_SelfIter },
            { Py_tp_iternext, (void *) ((PyObject *(*)(t_BlockReader *)) get_next< t_BlockReader,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >) },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BlockReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::index::BaseTermsEnum),
            NULL
          };

          DEFINE_TYPE(BlockReader, t_BlockReader, BlockReader);

          void t_BlockReader::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockReader), &PY_TYPE_DEF(BlockReader), module, "BlockReader", 0);
          }

          void t_BlockReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockReader), "class_", make_descriptor(BlockReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockReader), "wrapfn_", make_descriptor(t_BlockReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockReader::initializeClass, 1)))
              return NULL;
            return t_BlockReader::wrap_Object(BlockReader(((t_BlockReader *) arg)->object.this$));
          }
          static PyObject *t_BlockReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BlockReader_docFreq(t_BlockReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docFreq());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(BlockReader), (PyObject *) self, "docFreq", args, 2);
          }

          static PyObject *t_BlockReader_impacts(t_BlockReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::ImpactsEnum result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.impacts(a0));
              return ::org::apache::lucene::index::t_ImpactsEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BlockReader), (PyObject *) self, "impacts", args, 2);
          }

          static PyObject *t_BlockReader_next(t_BlockReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BlockReader), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_BlockReader_ord(t_BlockReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ord());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(BlockReader), (PyObject *) self, "ord", args, 2);
          }

          static PyObject *t_BlockReader_postings(t_BlockReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::PostingsEnum a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::index::PostingsEnum result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::PostingsEnum::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.postings(a0, a1));
              return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BlockReader), (PyObject *) self, "postings", args, 2);
          }

          static PyObject *t_BlockReader_ramBytesUsed(t_BlockReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BlockReader_seekCeil(t_BlockReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekCeil(a0));
              return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BlockReader), (PyObject *) self, "seekCeil", args, 2);
          }

          static PyObject *t_BlockReader_seekExact(t_BlockReader *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.seekExact(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.seekExact(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                ::org::apache::lucene::index::TermState a1((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.seekExact(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            return callSuper(PY_TYPE(BlockReader), (PyObject *) self, "seekExact", args, 2);
          }

          static PyObject *t_BlockReader_term(t_BlockReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.term());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BlockReader), (PyObject *) self, "term", args, 2);
          }

          static PyObject *t_BlockReader_termState(t_BlockReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::TermState result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termState());
              return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BlockReader), (PyObject *) self, "termState", args, 2);
          }

          static PyObject *t_BlockReader_totalTermFreq(t_BlockReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.totalTermFreq());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(BlockReader), (PyObject *) self, "totalTermFreq", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/FloatAssociationFacetField.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *FloatAssociationFacetField::class$ = NULL;
          jmethodID *FloatAssociationFacetField::mids$ = NULL;
          bool FloatAssociationFacetField::live$ = false;

          jclass FloatAssociationFacetField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/FloatAssociationFacetField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_bb5808bc42a48663] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_bytesRefToFloat_4a3180a3fc317019] = env->getStaticMethodID(cls, "bytesRefToFloat", "(Lorg/apache/lucene/util/BytesRef;)F");
              mids$[mid_floatToBytesRef_a2abd5b753e63e3c] = env->getStaticMethodID(cls, "floatToBytesRef", "(F)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FloatAssociationFacetField::FloatAssociationFacetField(jfloat a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::facet::taxonomy::AssociationFacetField(env->newObject(initializeClass, &mids$, mid_init$_bb5808bc42a48663, a0, a1.this$, a2.this$)) {}

          jfloat FloatAssociationFacetField::bytesRefToFloat(const ::org::apache::lucene::util::BytesRef & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticFloatMethod(cls, mids$[mid_bytesRefToFloat_4a3180a3fc317019], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef FloatAssociationFacetField::floatToBytesRef(jfloat a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_floatToBytesRef_a2abd5b753e63e3c], a0));
          }

          ::java::lang::String FloatAssociationFacetField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_FloatAssociationFacetField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatAssociationFacetField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FloatAssociationFacetField_init_(t_FloatAssociationFacetField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FloatAssociationFacetField_bytesRefToFloat(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatAssociationFacetField_floatToBytesRef(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatAssociationFacetField_toString(t_FloatAssociationFacetField *self, PyObject *args);

          static PyMethodDef t_FloatAssociationFacetField__methods_[] = {
            DECLARE_METHOD(t_FloatAssociationFacetField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatAssociationFacetField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatAssociationFacetField, bytesRefToFloat, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatAssociationFacetField, floatToBytesRef, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatAssociationFacetField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FloatAssociationFacetField)[] = {
            { Py_tp_methods, t_FloatAssociationFacetField__methods_ },
            { Py_tp_init, (void *) t_FloatAssociationFacetField_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FloatAssociationFacetField)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::facet::taxonomy::AssociationFacetField),
            NULL
          };

          DEFINE_TYPE(FloatAssociationFacetField, t_FloatAssociationFacetField, FloatAssociationFacetField);

          void t_FloatAssociationFacetField::install(PyObject *module)
          {
            installType(&PY_TYPE(FloatAssociationFacetField), &PY_TYPE_DEF(FloatAssociationFacetField), module, "FloatAssociationFacetField", 0);
          }

          void t_FloatAssociationFacetField::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FloatAssociationFacetField), "class_", make_descriptor(FloatAssociationFacetField::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FloatAssociationFacetField), "wrapfn_", make_descriptor(t_FloatAssociationFacetField::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FloatAssociationFacetField), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FloatAssociationFacetField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FloatAssociationFacetField::initializeClass, 1)))
              return NULL;
            return t_FloatAssociationFacetField::wrap_Object(FloatAssociationFacetField(((t_FloatAssociationFacetField *) arg)->object.this$));
          }
          static PyObject *t_FloatAssociationFacetField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FloatAssociationFacetField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FloatAssociationFacetField_init_(t_FloatAssociationFacetField *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            FloatAssociationFacetField object((jobject) NULL);

            if (!parseArgs(args, "Fs[s", &a0, &a1, &a2))
            {
              INT_CALL(object = FloatAssociationFacetField(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FloatAssociationFacetField_bytesRefToFloat(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::FloatAssociationFacetField::bytesRefToFloat(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError(type, "bytesRefToFloat", arg);
            return NULL;
          }

          static PyObject *t_FloatAssociationFacetField_floatToBytesRef(PyTypeObject *type, PyObject *arg)
          {
            jfloat a0;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::FloatAssociationFacetField::floatToBytesRef(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "floatToBytesRef", arg);
            return NULL;
          }

          static PyObject *t_FloatAssociationFacetField_toString(t_FloatAssociationFacetField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(FloatAssociationFacetField), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/GeoEncodingUtils$Grid.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *GeoEncodingUtils$Grid::class$ = NULL;
        jmethodID *GeoEncodingUtils$Grid::mids$ = NULL;
        bool GeoEncodingUtils$Grid::live$ = false;

        jclass GeoEncodingUtils$Grid::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/GeoEncodingUtils$Grid");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_GeoEncodingUtils$Grid_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GeoEncodingUtils$Grid_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_GeoEncodingUtils$Grid__methods_[] = {
          DECLARE_METHOD(t_GeoEncodingUtils$Grid, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GeoEncodingUtils$Grid, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(GeoEncodingUtils$Grid)[] = {
          { Py_tp_methods, t_GeoEncodingUtils$Grid__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(GeoEncodingUtils$Grid)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(GeoEncodingUtils$Grid, t_GeoEncodingUtils$Grid, GeoEncodingUtils$Grid);

        void t_GeoEncodingUtils$Grid::install(PyObject *module)
        {
          installType(&PY_TYPE(GeoEncodingUtils$Grid), &PY_TYPE_DEF(GeoEncodingUtils$Grid), module, "GeoEncodingUtils$Grid", 0);
        }

        void t_GeoEncodingUtils$Grid::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoEncodingUtils$Grid), "class_", make_descriptor(GeoEncodingUtils$Grid::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoEncodingUtils$Grid), "wrapfn_", make_descriptor(t_GeoEncodingUtils$Grid::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoEncodingUtils$Grid), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_GeoEncodingUtils$Grid_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, GeoEncodingUtils$Grid::initializeClass, 1)))
            return NULL;
          return t_GeoEncodingUtils$Grid::wrap_Object(GeoEncodingUtils$Grid(((t_GeoEncodingUtils$Grid *) arg)->object.this$));
        }
        static PyObject *t_GeoEncodingUtils$Grid_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, GeoEncodingUtils$Grid::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/SlopQueryNodeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *SlopQueryNodeBuilder::class$ = NULL;
              jmethodID *SlopQueryNodeBuilder::mids$ = NULL;
              bool SlopQueryNodeBuilder::live$ = false;

              jclass SlopQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/SlopQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_266d6dc3b958f456] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              SlopQueryNodeBuilder::SlopQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::search::Query SlopQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_266d6dc3b958f456], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_SlopQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SlopQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_SlopQueryNodeBuilder_init_(t_SlopQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_SlopQueryNodeBuilder_build(t_SlopQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_SlopQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_SlopQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SlopQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SlopQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(SlopQueryNodeBuilder)[] = {
                { Py_tp_methods, t_SlopQueryNodeBuilder__methods_ },
                { Py_tp_init, (void *) t_SlopQueryNodeBuilder_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(SlopQueryNodeBuilder)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(SlopQueryNodeBuilder, t_SlopQueryNodeBuilder, SlopQueryNodeBuilder);

              void t_SlopQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(SlopQueryNodeBuilder), &PY_TYPE_DEF(SlopQueryNodeBuilder), module, "SlopQueryNodeBuilder", 0);
              }

              void t_SlopQueryNodeBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(SlopQueryNodeBuilder), "class_", make_descriptor(SlopQueryNodeBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(SlopQueryNodeBuilder), "wrapfn_", make_descriptor(t_SlopQueryNodeBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(SlopQueryNodeBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_SlopQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, SlopQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_SlopQueryNodeBuilder::wrap_Object(SlopQueryNodeBuilder(((t_SlopQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_SlopQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, SlopQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_SlopQueryNodeBuilder_init_(t_SlopQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                SlopQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = SlopQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_SlopQueryNodeBuilder_build(t_SlopQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/SnowballProgram.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {

      ::java::lang::Class *SnowballProgram::class$ = NULL;
      jmethodID *SnowballProgram::mids$ = NULL;
      bool SnowballProgram::live$ = false;

      jclass SnowballProgram::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/tartarus/snowball/SnowballProgram");

          mids$ = new jmethodID[max_mid];
          mids$[mid_getCurrent_db9b55ba01e03e4b] = env->getMethodID(cls, "getCurrent", "()Ljava/lang/String;");
          mids$[mid_getCurrentBuffer_e11cf13c9a887534] = env->getMethodID(cls, "getCurrentBuffer", "()[C");
          mids$[mid_getCurrentBufferLength_9972fcc56b44e79d] = env->getMethodID(cls, "getCurrentBufferLength", "()I");
          mids$[mid_setCurrent_9fd2eb66a64e6f0f] = env->getMethodID(cls, "setCurrent", "(Ljava/lang/String;)V");
          mids$[mid_setCurrent_d7b537fea0247190] = env->getMethodID(cls, "setCurrent", "([CI)V");
          mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");
          mids$[mid_copy_from_d3a2d1edeac61f36] = env->getMethodID(cls, "copy_from", "(Lorg/tartarus/snowball/SnowballProgram;)V");
          mids$[mid_in_grouping_4c2a9c7f32a6ad26] = env->getMethodID(cls, "in_grouping", "([CII)Z");
          mids$[mid_eq_s_950cd4bb7cfc2401] = env->getMethodID(cls, "eq_s", "(ILjava/lang/CharSequence;)Z");
          mids$[mid_slice_from_4b7f5e38f806ae55] = env->getMethodID(cls, "slice_from", "(Ljava/lang/CharSequence;)V");
          mids$[mid_find_among_9eaa2340c146e15f] = env->getMethodID(cls, "find_among", "([Lorg/tartarus/snowball/Among;I)I");
          mids$[mid_out_grouping_4c2a9c7f32a6ad26] = env->getMethodID(cls, "out_grouping", "([CII)Z");
          mids$[mid_find_among_b_9eaa2340c146e15f] = env->getMethodID(cls, "find_among_b", "([Lorg/tartarus/snowball/Among;I)I");
          mids$[mid_slice_del_f2cc1bce94666404] = env->getMethodID(cls, "slice_del", "()V");
          mids$[mid_eq_s_b_950cd4bb7cfc2401] = env->getMethodID(cls, "eq_s_b", "(ILjava/lang/CharSequence;)Z");
          mids$[mid_out_grouping_b_4c2a9c7f32a6ad26] = env->getMethodID(cls, "out_grouping_b", "([CII)Z");
          mids$[mid_in_grouping_b_4c2a9c7f32a6ad26] = env->getMethodID(cls, "in_grouping_b", "([CII)Z");
          mids$[mid_out_range_fd32c163183a36f2] = env->getMethodID(cls, "out_range", "(II)Z");
          mids$[mid_out_range_b_fd32c163183a36f2] = env->getMethodID(cls, "out_range_b", "(II)Z");
          mids$[mid_in_range_b_fd32c163183a36f2] = env->getMethodID(cls, "in_range_b", "(II)Z");
          mids$[mid_eq_v_b_2cd6b83cb18fe093] = env->getMethodID(cls, "eq_v_b", "(Ljava/lang/CharSequence;)Z");
          mids$[mid_eq_v_2cd6b83cb18fe093] = env->getMethodID(cls, "eq_v", "(Ljava/lang/CharSequence;)Z");
          mids$[mid_in_range_fd32c163183a36f2] = env->getMethodID(cls, "in_range", "(II)Z");
          mids$[mid_replace_s_90717380b3ebecf2] = env->getMethodID(cls, "replace_s", "(IILjava/lang/CharSequence;)I");
          mids$[mid_slice_check_f2cc1bce94666404] = env->getMethodID(cls, "slice_check", "()V");
          mids$[mid_slice_to_4c7a138e4607159b] = env->getMethodID(cls, "slice_to", "(Ljava/lang/StringBuilder;)Ljava/lang/StringBuilder;");
          mids$[mid_assign_to_4c7a138e4607159b] = env->getMethodID(cls, "assign_to", "(Ljava/lang/StringBuilder;)Ljava/lang/StringBuilder;");
          mids$[mid_insert_0dbb75d35b062243] = env->getMethodID(cls, "insert", "(IILjava/lang/CharSequence;)V");

          class$ = new ::java::lang::Class(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::java::lang::String SnowballProgram::getCurrent() const
      {
        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getCurrent_db9b55ba01e03e4b]));
      }

      JArray< jchar > SnowballProgram::getCurrentBuffer() const
      {
        return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getCurrentBuffer_e11cf13c9a887534]));
      }

      jint SnowballProgram::getCurrentBufferLength() const
      {
        return env->callIntMethod(this$, mids$[mid_getCurrentBufferLength_9972fcc56b44e79d]);
      }

      void SnowballProgram::setCurrent(const ::java::lang::String & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setCurrent_9fd2eb66a64e6f0f], a0.this$);
      }

      void SnowballProgram::setCurrent(const JArray< jchar > & a0, jint a1) const
      {
        env->callVoidMethod(this$, mids$[mid_setCurrent_d7b537fea0247190], a0.this$, a1);
      }

      jboolean SnowballProgram::stem() const
      {
        return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      static PyObject *t_SnowballProgram_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_SnowballProgram_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_SnowballProgram_getCurrent(t_SnowballProgram *self);
      static PyObject *t_SnowballProgram_getCurrentBuffer(t_SnowballProgram *self);
      static PyObject *t_SnowballProgram_getCurrentBufferLength(t_SnowballProgram *self);
      static PyObject *t_SnowballProgram_setCurrent(t_SnowballProgram *self, PyObject *args);
      static PyObject *t_SnowballProgram_stem(t_SnowballProgram *self);
      static PyObject *t_SnowballProgram_get__current(t_SnowballProgram *self, void *data);
      static int t_SnowballProgram_set__current(t_SnowballProgram *self, PyObject *arg, void *data);
      static PyObject *t_SnowballProgram_get__currentBuffer(t_SnowballProgram *self, void *data);
      static PyObject *t_SnowballProgram_get__currentBufferLength(t_SnowballProgram *self, void *data);
      static PyGetSetDef t_SnowballProgram__fields_[] = {
        DECLARE_GETSET_FIELD(t_SnowballProgram, current),
        DECLARE_GET_FIELD(t_SnowballProgram, currentBuffer),
        DECLARE_GET_FIELD(t_SnowballProgram, currentBufferLength),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_SnowballProgram__methods_[] = {
        DECLARE_METHOD(t_SnowballProgram, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_SnowballProgram, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_SnowballProgram, getCurrent, METH_NOARGS),
        DECLARE_METHOD(t_SnowballProgram, getCurrentBuffer, METH_NOARGS),
        DECLARE_METHOD(t_SnowballProgram, getCurrentBufferLength, METH_NOARGS),
        DECLARE_METHOD(t_SnowballProgram, setCurrent, METH_VARARGS),
        DECLARE_METHOD(t_SnowballProgram, stem, METH_NOARGS),
        { NULL, NULL, 0, NULL }
      };

      static PyType_Slot PY_TYPE_SLOTS(SnowballProgram)[] = {
        { Py_tp_methods, t_SnowballProgram__methods_ },
        { Py_tp_init, (void *) abstract_init },
        { Py_tp_getset, t_SnowballProgram__fields_ },
        { 0, NULL }
      };

      static PyType_Def *PY_TYPE_BASES(SnowballProgram)[] = {
        &PY_TYPE_DEF(::java::lang::Object),
        NULL
      };

      DEFINE_TYPE(SnowballProgram, t_SnowballProgram, SnowballProgram);

      void t_SnowballProgram::install(PyObject *module)
      {
        installType(&PY_TYPE(SnowballProgram), &PY_TYPE_DEF(SnowballProgram), module, "SnowballProgram", 0);
      }

      void t_SnowballProgram::initialize(PyObject *module)
      {
        PyObject_SetAttrString((PyObject *) PY_TYPE(SnowballProgram), "class_", make_descriptor(SnowballProgram::initializeClass, 1));
        PyObject_SetAttrString((PyObject *) PY_TYPE(SnowballProgram), "wrapfn_", make_descriptor(t_SnowballProgram::wrap_jobject));
        PyObject_SetAttrString((PyObject *) PY_TYPE(SnowballProgram), "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_SnowballProgram_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, SnowballProgram::initializeClass, 1)))
          return NULL;
        return t_SnowballProgram::wrap_Object(SnowballProgram(((t_SnowballProgram *) arg)->object.this$));
      }
      static PyObject *t_SnowballProgram_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, SnowballProgram::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_SnowballProgram_getCurrent(t_SnowballProgram *self)
      {
        ::java::lang::String result((jobject) NULL);
        OBJ_CALL(result = self->object.getCurrent());
        return j2p(result);
      }

      static PyObject *t_SnowballProgram_getCurrentBuffer(t_SnowballProgram *self)
      {
        JArray< jchar > result((jobject) NULL);
        OBJ_CALL(result = self->object.getCurrentBuffer());
        return result.wrap();
      }

      static PyObject *t_SnowballProgram_getCurrentBufferLength(t_SnowballProgram *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCurrentBufferLength());
        return PyLong_FromLong((long) result);
      }

      static PyObject *t_SnowballProgram_setCurrent(t_SnowballProgram *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(self->object.setCurrent(a0));
              Py_RETURN_NONE;
            }
          }
          break;
         case 2:
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(self->object.setCurrent(a0, a1));
              Py_RETURN_NONE;
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "setCurrent", args);
        return NULL;
      }

      static PyObject *t_SnowballProgram_stem(t_SnowballProgram *self)
      {
        jboolean result;
        OBJ_CALL(result = self->object.stem());
        Py_RETURN_BOOL(result);
      }

      static PyObject *t_SnowballProgram_get__current(t_SnowballProgram *self, void *data)
      {
        ::java::lang::String value((jobject) NULL);
        OBJ_CALL(value = self->object.getCurrent());
        return j2p(value);
      }
      static int t_SnowballProgram_set__current(t_SnowballProgram *self, PyObject *arg, void *data)
      {
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object.setCurrent(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "current", arg);
        return -1;
      }

      static PyObject *t_SnowballProgram_get__currentBuffer(t_SnowballProgram *self, void *data)
      {
        JArray< jchar > value((jobject) NULL);
        OBJ_CALL(value = self->object.getCurrentBuffer());
        return value.wrap();
      }

      static PyObject *t_SnowballProgram_get__currentBufferLength(t_SnowballProgram *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCurrentBufferLength());
        return PyLong_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/FieldComparatorSource.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/index/IndexSorter.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortField::class$ = NULL;
        jmethodID *SortField::mids$ = NULL;
        bool SortField::live$ = false;
        SortField *SortField::FIELD_DOC = NULL;
        SortField *SortField::FIELD_SCORE = NULL;
        ::java::lang::Object *SortField::STRING_FIRST = NULL;
        ::java::lang::Object *SortField::STRING_LAST = NULL;

        jclass SortField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6811f13f8ecb0aa6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;)V");
            mids$[mid_init$_5217a6ade2078f85] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldComparatorSource;)V");
            mids$[mid_init$_d088f299e352f332] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;Z)V");
            mids$[mid_init$_d27e052e5880c6f8] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldComparatorSource;Z)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getBytesComparator_beb0414e0ec1de00] = env->getMethodID(cls, "getBytesComparator", "()Ljava/util/Comparator;");
            mids$[mid_getCanUsePoints_8454bd5aa23fd11e] = env->getMethodID(cls, "getCanUsePoints", "()Z");
            mids$[mid_getComparator_d36dcbe0af6d9ef2] = env->getMethodID(cls, "getComparator", "(II)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_getComparatorSource_46d6e7ab03c5c749] = env->getMethodID(cls, "getComparatorSource", "()Lorg/apache/lucene/search/FieldComparatorSource;");
            mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getIndexSorter_ee706dd57fd4883b] = env->getMethodID(cls, "getIndexSorter", "()Lorg/apache/lucene/index/IndexSorter;");
            mids$[mid_getMissingValue_d6bcd06f3102c4d9] = env->getMethodID(cls, "getMissingValue", "()Ljava/lang/Object;");
            mids$[mid_getReverse_8454bd5aa23fd11e] = env->getMethodID(cls, "getReverse", "()Z");
            mids$[mid_getType_9e07327298655963] = env->getMethodID(cls, "getType", "()Lorg/apache/lucene/search/SortField$Type;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_needsScores_8454bd5aa23fd11e] = env->getMethodID(cls, "needsScores", "()Z");
            mids$[mid_rewrite_172444b870ec7c0f] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/SortField;");
            mids$[mid_setBytesComparator_4703504c5d45d50f] = env->getMethodID(cls, "setBytesComparator", "(Ljava/util/Comparator;)V");
            mids$[mid_setCanUsePoints_f2cc1bce94666404] = env->getMethodID(cls, "setCanUsePoints", "()V");
            mids$[mid_setMissingValue_d20f626183f72f7d] = env->getMethodID(cls, "setMissingValue", "(Ljava/lang/Object;)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_readType_3ab48ff515d9874c] = env->getStaticMethodID(cls, "readType", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/search/SortField$Type;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            FIELD_DOC = new SortField(env->getStaticObjectField(cls, "FIELD_DOC", "Lorg/apache/lucene/search/SortField;"));
            FIELD_SCORE = new SortField(env->getStaticObjectField(cls, "FIELD_SCORE", "Lorg/apache/lucene/search/SortField;"));
            STRING_FIRST = new ::java::lang::Object(env->getStaticObjectField(cls, "STRING_FIRST", "Ljava/lang/Object;"));
            STRING_LAST = new ::java::lang::Object(env->getStaticObjectField(cls, "STRING_LAST", "Ljava/lang/Object;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6811f13f8ecb0aa6, a0.this$, a1.this$)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldComparatorSource & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5217a6ade2078f85, a0.this$, a1.this$)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d088f299e352f332, a0.this$, a1.this$, a2)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldComparatorSource & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d27e052e5880c6f8, a0.this$, a1.this$, a2)) {}

        jboolean SortField::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::java::util::Comparator SortField::getBytesComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getBytesComparator_beb0414e0ec1de00]));
        }

        jboolean SortField::getCanUsePoints() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getCanUsePoints_8454bd5aa23fd11e]);
        }

        ::org::apache::lucene::search::FieldComparator SortField::getComparator(jint a0, jint a1) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_getComparator_d36dcbe0af6d9ef2], a0, a1));
        }

        ::org::apache::lucene::search::FieldComparatorSource SortField::getComparatorSource() const
        {
          return ::org::apache::lucene::search::FieldComparatorSource(env->callObjectMethod(this$, mids$[mid_getComparatorSource_46d6e7ab03c5c749]));
        }

        ::java::lang::String SortField::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
        }

        ::org::apache::lucene::index::IndexSorter SortField::getIndexSorter() const
        {
          return ::org::apache::lucene::index::IndexSorter(env->callObjectMethod(this$, mids$[mid_getIndexSorter_ee706dd57fd4883b]));
        }

        ::java::lang::Object SortField::getMissingValue() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getMissingValue_d6bcd06f3102c4d9]));
        }

        jboolean SortField::getReverse() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getReverse_8454bd5aa23fd11e]);
        }

        ::org::apache::lucene::search::SortField$Type SortField::getType() const
        {
          return ::org::apache::lucene::search::SortField$Type(env->callObjectMethod(this$, mids$[mid_getType_9e07327298655963]));
        }

        jint SortField::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean SortField::needsScores() const
        {
          return env->callBooleanMethod(this$, mids$[mid_needsScores_8454bd5aa23fd11e]);
        }

        SortField SortField::rewrite(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return SortField(env->callObjectMethod(this$, mids$[mid_rewrite_172444b870ec7c0f], a0.this$));
        }

        void SortField::setBytesComparator(const ::java::util::Comparator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesComparator_4703504c5d45d50f], a0.this$);
        }

        void SortField::setCanUsePoints() const
        {
          env->callVoidMethod(this$, mids$[mid_setCanUsePoints_f2cc1bce94666404]);
        }

        void SortField::setMissingValue(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMissingValue_d20f626183f72f7d], a0.this$);
        }

        ::java::lang::String SortField::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/SortField$Provider.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortField_init_(t_SortField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortField_equals(t_SortField *self, PyObject *args);
        static PyObject *t_SortField_getBytesComparator(t_SortField *self);
        static PyObject *t_SortField_getCanUsePoints(t_SortField *self);
        static PyObject *t_SortField_getComparator(t_SortField *self, PyObject *args);
        static PyObject *t_SortField_getComparatorSource(t_SortField *self);
        static PyObject *t_SortField_getField(t_SortField *self);
        static PyObject *t_SortField_getIndexSorter(t_SortField *self);
        static PyObject *t_SortField_getMissingValue(t_SortField *self);
        static PyObject *t_SortField_getReverse(t_SortField *self);
        static PyObject *t_SortField_getType(t_SortField *self);
        static PyObject *t_SortField_hashCode(t_SortField *self, PyObject *args);
        static PyObject *t_SortField_needsScores(t_SortField *self);
        static PyObject *t_SortField_rewrite(t_SortField *self, PyObject *arg);
        static PyObject *t_SortField_setBytesComparator(t_SortField *self, PyObject *arg);
        static PyObject *t_SortField_setCanUsePoints(t_SortField *self);
        static PyObject *t_SortField_setMissingValue(t_SortField *self, PyObject *arg);
        static PyObject *t_SortField_toString(t_SortField *self, PyObject *args);
        static PyObject *t_SortField_get__bytesComparator(t_SortField *self, void *data);
        static int t_SortField_set__bytesComparator(t_SortField *self, PyObject *arg, void *data);
        static PyObject *t_SortField_get__canUsePoints(t_SortField *self, void *data);
        static PyObject *t_SortField_get__comparatorSource(t_SortField *self, void *data);
        static PyObject *t_SortField_get__field(t_SortField *self, void *data);
        static PyObject *t_SortField_get__indexSorter(t_SortField *self, void *data);
        static PyObject *t_SortField_get__missingValue(t_SortField *self, void *data);
        static int t_SortField_set__missingValue(t_SortField *self, PyObject *arg, void *data);
        static PyObject *t_SortField_get__reverse(t_SortField *self, void *data);
        static PyObject *t_SortField_get__type(t_SortField *self, void *data);
        static PyGetSetDef t_SortField__fields_[] = {
          DECLARE_GETSET_FIELD(t_SortField, bytesComparator),
          DECLARE_GET_FIELD(t_SortField, canUsePoints),
          DECLARE_GET_FIELD(t_SortField, comparatorSource),
          DECLARE_GET_FIELD(t_SortField, field),
          DECLARE_GET_FIELD(t_SortField, indexSorter),
          DECLARE_GETSET_FIELD(t_SortField, missingValue),
          DECLARE_GET_FIELD(t_SortField, reverse),
          DECLARE_GET_FIELD(t_SortField, type),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortField__methods_[] = {
          DECLARE_METHOD(t_SortField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField, equals, METH_VARARGS),
          DECLARE_METHOD(t_SortField, getBytesComparator, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getCanUsePoints, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_SortField, getComparatorSource, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getField, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getIndexSorter, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getMissingValue, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getReverse, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getType, METH_NOARGS),
          DECLARE_METHOD(t_SortField, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SortField, needsScores, METH_NOARGS),
          DECLARE_METHOD(t_SortField, rewrite, METH_O),
          DECLARE_METHOD(t_SortField, setBytesComparator, METH_O),
          DECLARE_METHOD(t_SortField, setCanUsePoints, METH_NOARGS),
          DECLARE_METHOD(t_SortField, setMissingValue, METH_O),
          DECLARE_METHOD(t_SortField, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SortField)[] = {
          { Py_tp_methods, t_SortField__methods_ },
          { Py_tp_init, (void *) t_SortField_init_ },
          { Py_tp_getset, t_SortField__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SortField)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SortField, t_SortField, SortField);

        void t_SortField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortField), &PY_TYPE_DEF(SortField), module, "SortField", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField), "Provider", make_descriptor(&PY_TYPE_DEF(SortField$Provider)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField), "Type", make_descriptor(&PY_TYPE_DEF(SortField$Type)));
        }

        void t_SortField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField), "class_", make_descriptor(SortField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField), "wrapfn_", make_descriptor(t_SortField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField), "boxfn_", make_descriptor(boxObject));
          env->getClass(SortField::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField), "FIELD_DOC", make_descriptor(t_SortField::wrap_Object(*SortField::FIELD_DOC)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField), "FIELD_SCORE", make_descriptor(t_SortField::wrap_Object(*SortField::FIELD_SCORE)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField), "STRING_FIRST", make_descriptor(::java::lang::t_Object::wrap_Object(*SortField::STRING_FIRST)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortField), "STRING_LAST", make_descriptor(::java::lang::t_Object::wrap_Object(*SortField::STRING_LAST)));
        }

        static PyObject *t_SortField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortField::initializeClass, 1)))
            return NULL;
          return t_SortField::wrap_Object(SortField(((t_SortField *) arg)->object.this$));
        }
        static PyObject *t_SortField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortField_init_(t_SortField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              SortField object((jobject) NULL);

              if (!parseArgs(args, "sK", ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_))
              {
                INT_CALL(object = SortField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldComparatorSource a1((jobject) NULL);
              SortField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldComparatorSource::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SortField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              SortField object((jobject) NULL);

              if (!parseArgs(args, "sKZ", ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2))
              {
                INT_CALL(object = SortField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldComparatorSource a1((jobject) NULL);
              jboolean a2;
              SortField object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::search::FieldComparatorSource::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SortField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SortField_equals(t_SortField *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(SortField), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SortField_getBytesComparator(t_SortField *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getBytesComparator());
          return ::java::util::t_Comparator::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_SortField_getCanUsePoints(t_SortField *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getCanUsePoints());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SortField_getComparator(t_SortField *self, PyObject *args)
        {
          jint a0;
          jint a1;
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getComparator(a0, a1));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getComparator", args);
          return NULL;
        }

        static PyObject *t_SortField_getComparatorSource(t_SortField *self)
        {
          ::org::apache::lucene::search::FieldComparatorSource result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparatorSource());
          return ::org::apache::lucene::search::t_FieldComparatorSource::wrap_Object(result);
        }

        static PyObject *t_SortField_getField(t_SortField *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_SortField_getIndexSorter(t_SortField *self)
        {
          ::org::apache::lucene::index::IndexSorter result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexSorter());
          return ::org::apache::lucene::index::t_IndexSorter::wrap_Object(result);
        }

        static PyObject *t_SortField_getMissingValue(t_SortField *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getMissingValue());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_SortField_getReverse(t_SortField *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getReverse());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SortField_getType(t_SortField *self)
        {
          ::org::apache::lucene::search::SortField$Type result((jobject) NULL);
          OBJ_CALL(result = self->object.getType());
          return ::org::apache::lucene::search::t_SortField$Type::wrap_Object(result);
        }

        static PyObject *t_SortField_hashCode(t_SortField *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SortField), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SortField_needsScores(t_SortField *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.needsScores());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SortField_rewrite(t_SortField *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          SortField result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_SortField_setBytesComparator(t_SortField *self, PyObject *arg)
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(self->object.setBytesComparator(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBytesComparator", arg);
          return NULL;
        }

        static PyObject *t_SortField_setCanUsePoints(t_SortField *self)
        {
          OBJ_CALL(self->object.setCanUsePoints());
          Py_RETURN_NONE;
        }

        static PyObject *t_SortField_setMissingValue(t_SortField *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.setMissingValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMissingValue", arg);
          return NULL;
        }

        static PyObject *t_SortField_toString(t_SortField *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(SortField), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SortField_get__bytesComparator(t_SortField *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getBytesComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
        static int t_SortField_set__bytesComparator(t_SortField *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Comparator value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Comparator::initializeClass, &value))
            {
              INT_CALL(self->object.setBytesComparator(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bytesComparator", arg);
          return -1;
        }

        static PyObject *t_SortField_get__canUsePoints(t_SortField *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getCanUsePoints());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_SortField_get__comparatorSource(t_SortField *self, void *data)
        {
          ::org::apache::lucene::search::FieldComparatorSource value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparatorSource());
          return ::org::apache::lucene::search::t_FieldComparatorSource::wrap_Object(value);
        }

        static PyObject *t_SortField_get__field(t_SortField *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static PyObject *t_SortField_get__indexSorter(t_SortField *self, void *data)
        {
          ::org::apache::lucene::index::IndexSorter value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexSorter());
          return ::org::apache::lucene::index::t_IndexSorter::wrap_Object(value);
        }

        static PyObject *t_SortField_get__missingValue(t_SortField *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getMissingValue());
          return ::java::lang::t_Object::wrap_Object(value);
        }
        static int t_SortField_set__missingValue(t_SortField *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object.setMissingValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "missingValue", arg);
          return -1;
        }

        static PyObject *t_SortField_get__reverse(t_SortField *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getReverse());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_SortField_get__type(t_SortField *self, void *data)
        {
          ::org::apache::lucene::search::SortField$Type value((jobject) NULL);
          OBJ_CALL(value = self->object.getType());
          return ::org::apache::lucene::search::t_SortField$Type::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PayloadAttributeImpl::class$ = NULL;
          jmethodID *PayloadAttributeImpl::mids$ = NULL;
          bool PayloadAttributeImpl::live$ = false;

          jclass PayloadAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_0bdfd2603b7490a8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_clone_6ba3732772f35c8c] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl;");
              mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getPayload_7af2ea2e37ce82b8] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
              mids$[mid_setPayload_0bdfd2603b7490a8] = env->getMethodID(cls, "setPayload", "(Lorg/apache/lucene/util/BytesRef;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadAttributeImpl::PayloadAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          PayloadAttributeImpl::PayloadAttributeImpl(const ::org::apache::lucene::util::BytesRef & a0) : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_0bdfd2603b7490a8, a0.this$)) {}

          void PayloadAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
          }

          PayloadAttributeImpl PayloadAttributeImpl::clone() const
          {
            return PayloadAttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_6ba3732772f35c8c]));
          }

          void PayloadAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_26346c38ebc9c090], a0.this$);
          }

          jboolean PayloadAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef PayloadAttributeImpl::getPayload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_7af2ea2e37ce82b8]));
          }

          jint PayloadAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          void PayloadAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
          }

          void PayloadAttributeImpl::setPayload(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPayload_0bdfd2603b7490a8], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PayloadAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadAttributeImpl_init_(t_PayloadAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadAttributeImpl_clear(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_clone(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_copyTo(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_equals(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_getPayload(t_PayloadAttributeImpl *self);
          static PyObject *t_PayloadAttributeImpl_hashCode(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_reflectWith(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_setPayload(t_PayloadAttributeImpl *self, PyObject *arg);
          static PyObject *t_PayloadAttributeImpl_get__payload(t_PayloadAttributeImpl *self, void *data);
          static int t_PayloadAttributeImpl_set__payload(t_PayloadAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_PayloadAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_PayloadAttributeImpl, payload),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PayloadAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_PayloadAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, clone, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, getPayload, METH_NOARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, reflectWith, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, setPayload, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PayloadAttributeImpl)[] = {
            { Py_tp_methods, t_PayloadAttributeImpl__methods_ },
            { Py_tp_init, (void *) t_PayloadAttributeImpl_init_ },
            { Py_tp_getset, t_PayloadAttributeImpl__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PayloadAttributeImpl)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::AttributeImpl),
            NULL
          };

          DEFINE_TYPE(PayloadAttributeImpl, t_PayloadAttributeImpl, PayloadAttributeImpl);

          void t_PayloadAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadAttributeImpl), &PY_TYPE_DEF(PayloadAttributeImpl), module, "PayloadAttributeImpl", 0);
          }

          void t_PayloadAttributeImpl::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadAttributeImpl), "class_", make_descriptor(PayloadAttributeImpl::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadAttributeImpl), "wrapfn_", make_descriptor(t_PayloadAttributeImpl::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadAttributeImpl), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_PayloadAttributeImpl::wrap_Object(PayloadAttributeImpl(((t_PayloadAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_PayloadAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadAttributeImpl_init_(t_PayloadAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                PayloadAttributeImpl object((jobject) NULL);

                INT_CALL(object = PayloadAttributeImpl());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                PayloadAttributeImpl object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
                {
                  INT_CALL(object = PayloadAttributeImpl(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadAttributeImpl_clear(t_PayloadAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_clone(t_PayloadAttributeImpl *self, PyObject *args)
          {
            PayloadAttributeImpl result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_PayloadAttributeImpl::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_copyTo(t_PayloadAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_equals(t_PayloadAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_getPayload(t_PayloadAttributeImpl *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_PayloadAttributeImpl_hashCode(t_PayloadAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_reflectWith(t_PayloadAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reflectWith(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_setPayload(t_PayloadAttributeImpl *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setPayload(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPayload", arg);
            return NULL;
          }

          static PyObject *t_PayloadAttributeImpl_get__payload(t_PayloadAttributeImpl *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
          static int t_PayloadAttributeImpl_set__payload(t_PayloadAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::util::BytesRef value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
              {
                INT_CALL(self->object.setPayload(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "payload", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MatchAllDocsQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MatchAllDocsQuery::class$ = NULL;
        jmethodID *MatchAllDocsQuery::mids$ = NULL;
        bool MatchAllDocsQuery::live$ = false;

        jclass MatchAllDocsQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MatchAllDocsQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MatchAllDocsQuery::MatchAllDocsQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::search::Weight MatchAllDocsQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean MatchAllDocsQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint MatchAllDocsQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String MatchAllDocsQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void MatchAllDocsQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MatchAllDocsQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MatchAllDocsQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MatchAllDocsQuery_init_(t_MatchAllDocsQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MatchAllDocsQuery_createWeight(t_MatchAllDocsQuery *self, PyObject *args);
        static PyObject *t_MatchAllDocsQuery_equals(t_MatchAllDocsQuery *self, PyObject *args);
        static PyObject *t_MatchAllDocsQuery_hashCode(t_MatchAllDocsQuery *self, PyObject *args);
        static PyObject *t_MatchAllDocsQuery_toString(t_MatchAllDocsQuery *self, PyObject *args);
        static PyObject *t_MatchAllDocsQuery_visit(t_MatchAllDocsQuery *self, PyObject *args);

        static PyMethodDef t_MatchAllDocsQuery__methods_[] = {
          DECLARE_METHOD(t_MatchAllDocsQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MatchAllDocsQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MatchAllDocsQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_MatchAllDocsQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_MatchAllDocsQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MatchAllDocsQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_MatchAllDocsQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MatchAllDocsQuery)[] = {
          { Py_tp_methods, t_MatchAllDocsQuery__methods_ },
          { Py_tp_init, (void *) t_MatchAllDocsQuery_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MatchAllDocsQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(MatchAllDocsQuery, t_MatchAllDocsQuery, MatchAllDocsQuery);

        void t_MatchAllDocsQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(MatchAllDocsQuery), &PY_TYPE_DEF(MatchAllDocsQuery), module, "MatchAllDocsQuery", 0);
        }

        void t_MatchAllDocsQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MatchAllDocsQuery), "class_", make_descriptor(MatchAllDocsQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MatchAllDocsQuery), "wrapfn_", make_descriptor(t_MatchAllDocsQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MatchAllDocsQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MatchAllDocsQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MatchAllDocsQuery::initializeClass, 1)))
            return NULL;
          return t_MatchAllDocsQuery::wrap_Object(MatchAllDocsQuery(((t_MatchAllDocsQuery *) arg)->object.this$));
        }
        static PyObject *t_MatchAllDocsQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MatchAllDocsQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MatchAllDocsQuery_init_(t_MatchAllDocsQuery *self, PyObject *args, PyObject *kwds)
        {
          MatchAllDocsQuery object((jobject) NULL);

          INT_CALL(object = MatchAllDocsQuery());
          self->object = object;

          return 0;
        }

        static PyObject *t_MatchAllDocsQuery_createWeight(t_MatchAllDocsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_MatchAllDocsQuery_equals(t_MatchAllDocsQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MatchAllDocsQuery_hashCode(t_MatchAllDocsQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MatchAllDocsQuery_toString(t_MatchAllDocsQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MatchAllDocsQuery_visit(t_MatchAllDocsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "visit", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *OrdinalsReader$OrdinalsSegmentReader::class$ = NULL;
          jmethodID *OrdinalsReader$OrdinalsSegmentReader::mids$ = NULL;
          bool OrdinalsReader$OrdinalsSegmentReader::live$ = false;

          jclass OrdinalsReader$OrdinalsSegmentReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_get_c36a226219ff2c18] = env->getMethodID(cls, "get", "(ILorg/apache/lucene/util/IntsRef;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OrdinalsReader$OrdinalsSegmentReader::OrdinalsReader$OrdinalsSegmentReader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void OrdinalsReader$OrdinalsSegmentReader::get(jint a0, const ::org::apache::lucene::util::IntsRef & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_get_c36a226219ff2c18], a0, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OrdinalsReader$OrdinalsSegmentReader_init_(t_OrdinalsReader$OrdinalsSegmentReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_get(t_OrdinalsReader$OrdinalsSegmentReader *self, PyObject *args);

          static PyMethodDef t_OrdinalsReader$OrdinalsSegmentReader__methods_[] = {
            DECLARE_METHOD(t_OrdinalsReader$OrdinalsSegmentReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalsReader$OrdinalsSegmentReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalsReader$OrdinalsSegmentReader, get, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(OrdinalsReader$OrdinalsSegmentReader)[] = {
            { Py_tp_methods, t_OrdinalsReader$OrdinalsSegmentReader__methods_ },
            { Py_tp_init, (void *) t_OrdinalsReader$OrdinalsSegmentReader_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(OrdinalsReader$OrdinalsSegmentReader)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(OrdinalsReader$OrdinalsSegmentReader, t_OrdinalsReader$OrdinalsSegmentReader, OrdinalsReader$OrdinalsSegmentReader);

          void t_OrdinalsReader$OrdinalsSegmentReader::install(PyObject *module)
          {
            installType(&PY_TYPE(OrdinalsReader$OrdinalsSegmentReader), &PY_TYPE_DEF(OrdinalsReader$OrdinalsSegmentReader), module, "OrdinalsReader$OrdinalsSegmentReader", 0);
          }

          void t_OrdinalsReader$OrdinalsSegmentReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdinalsReader$OrdinalsSegmentReader), "class_", make_descriptor(OrdinalsReader$OrdinalsSegmentReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdinalsReader$OrdinalsSegmentReader), "wrapfn_", make_descriptor(t_OrdinalsReader$OrdinalsSegmentReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdinalsReader$OrdinalsSegmentReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OrdinalsReader$OrdinalsSegmentReader::initializeClass, 1)))
              return NULL;
            return t_OrdinalsReader$OrdinalsSegmentReader::wrap_Object(OrdinalsReader$OrdinalsSegmentReader(((t_OrdinalsReader$OrdinalsSegmentReader *) arg)->object.this$));
          }
          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OrdinalsReader$OrdinalsSegmentReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OrdinalsReader$OrdinalsSegmentReader_init_(t_OrdinalsReader$OrdinalsSegmentReader *self, PyObject *args, PyObject *kwds)
          {
            OrdinalsReader$OrdinalsSegmentReader object((jobject) NULL);

            INT_CALL(object = OrdinalsReader$OrdinalsSegmentReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_get(t_OrdinalsReader$OrdinalsSegmentReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.get(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RAFDirectory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/nio/file/Path.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RAFDirectory::class$ = NULL;
        jmethodID *RAFDirectory::mids$ = NULL;
        bool RAFDirectory::live$ = false;

        jclass RAFDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RAFDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_636077fee54d306c] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;)V");
            mids$[mid_init$_71c9ab2266463084] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_openInput_cc9a9aabe8db93df] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RAFDirectory::RAFDirectory(const ::java::nio::file::Path & a0) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_636077fee54d306c, a0.this$)) {}

        RAFDirectory::RAFDirectory(const ::java::nio::file::Path & a0, const ::org::apache::lucene::store::LockFactory & a1) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_71c9ab2266463084, a0.this$, a1.this$)) {}

        ::org::apache::lucene::store::IndexInput RAFDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_cc9a9aabe8db93df], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RAFDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RAFDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RAFDirectory_init_(t_RAFDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RAFDirectory_openInput(t_RAFDirectory *self, PyObject *args);

        static PyMethodDef t_RAFDirectory__methods_[] = {
          DECLARE_METHOD(t_RAFDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAFDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAFDirectory, openInput, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RAFDirectory)[] = {
          { Py_tp_methods, t_RAFDirectory__methods_ },
          { Py_tp_init, (void *) t_RAFDirectory_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RAFDirectory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::FSDirectory),
          NULL
        };

        DEFINE_TYPE(RAFDirectory, t_RAFDirectory, RAFDirectory);

        void t_RAFDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(RAFDirectory), &PY_TYPE_DEF(RAFDirectory), module, "RAFDirectory", 0);
        }

        void t_RAFDirectory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RAFDirectory), "class_", make_descriptor(RAFDirectory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RAFDirectory), "wrapfn_", make_descriptor(t_RAFDirectory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RAFDirectory), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RAFDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RAFDirectory::initializeClass, 1)))
            return NULL;
          return t_RAFDirectory::wrap_Object(RAFDirectory(((t_RAFDirectory *) arg)->object.this$));
        }
        static PyObject *t_RAFDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RAFDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RAFDirectory_init_(t_RAFDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::nio::file::Path a0((jobject) NULL);
              RAFDirectory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::nio::file::Path::initializeClass, &a0))
              {
                INT_CALL(object = RAFDirectory(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::nio::file::Path a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              RAFDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::nio::file::Path::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = RAFDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RAFDirectory_openInput(t_RAFDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(RAFDirectory), (PyObject *) self, "openInput", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanOrTermsBuilder::class$ = NULL;
            jmethodID *SpanOrTermsBuilder::mids$ = NULL;
            bool SpanOrTermsBuilder::live$ = false;

            jclass SpanOrTermsBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_651b708fb3f85e6e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanOrTermsBuilder::SpanOrTermsBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_651b708fb3f85e6e, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanOrTermsBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanOrTermsBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanOrTermsBuilder_init_(t_SpanOrTermsBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanOrTermsBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanOrTermsBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanOrTermsBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SpanOrTermsBuilder)[] = {
              { Py_tp_methods, t_SpanOrTermsBuilder__methods_ },
              { Py_tp_init, (void *) t_SpanOrTermsBuilder_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SpanOrTermsBuilder)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase),
              NULL
            };

            DEFINE_TYPE(SpanOrTermsBuilder, t_SpanOrTermsBuilder, SpanOrTermsBuilder);

            void t_SpanOrTermsBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanOrTermsBuilder), &PY_TYPE_DEF(SpanOrTermsBuilder), module, "SpanOrTermsBuilder", 0);
            }

            void t_SpanOrTermsBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanOrTermsBuilder), "class_", make_descriptor(SpanOrTermsBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanOrTermsBuilder), "wrapfn_", make_descriptor(t_SpanOrTermsBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanOrTermsBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanOrTermsBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanOrTermsBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanOrTermsBuilder::wrap_Object(SpanOrTermsBuilder(((t_SpanOrTermsBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanOrTermsBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanOrTermsBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanOrTermsBuilder_init_(t_SpanOrTermsBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              SpanOrTermsBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                INT_CALL(object = SpanOrTermsBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/MergeInfo.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *MergeInfo::class$ = NULL;
        jmethodID *MergeInfo::mids$ = NULL;
        jfieldID *MergeInfo::fids$ = NULL;
        bool MergeInfo::live$ = false;

        jclass MergeInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/MergeInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_efecb63a6eee2a7b] = env->getMethodID(cls, "<init>", "(IJZI)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_estimatedMergeBytes] = env->getFieldID(cls, "estimatedMergeBytes", "J");
            fids$[fid_isExternal] = env->getFieldID(cls, "isExternal", "Z");
            fids$[fid_mergeMaxNumSegments] = env->getFieldID(cls, "mergeMaxNumSegments", "I");
            fids$[fid_totalMaxDoc] = env->getFieldID(cls, "totalMaxDoc", "I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergeInfo::MergeInfo(jint a0, jlong a1, jboolean a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_efecb63a6eee2a7b, a0, a1, a2, a3)) {}

        jboolean MergeInfo::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint MergeInfo::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String MergeInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jlong MergeInfo::_get_estimatedMergeBytes() const
        {
          return env->getLongField(this$, fids$[fid_estimatedMergeBytes]);
        }

        jboolean MergeInfo::_get_isExternal() const
        {
          return env->getBooleanField(this$, fids$[fid_isExternal]);
        }

        jint MergeInfo::_get_mergeMaxNumSegments() const
        {
          return env->getIntField(this$, fids$[fid_mergeMaxNumSegments]);
        }

        jint MergeInfo::_get_totalMaxDoc() const
        {
          return env->getIntField(this$, fids$[fid_totalMaxDoc]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_MergeInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergeInfo_init_(t_MergeInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergeInfo_equals(t_MergeInfo *self, PyObject *args);
        static PyObject *t_MergeInfo_hashCode(t_MergeInfo *self, PyObject *args);
        static PyObject *t_MergeInfo_toString(t_MergeInfo *self, PyObject *args);
        static PyObject *t_MergeInfo_get__estimatedMergeBytes(t_MergeInfo *self, void *data);
        static PyObject *t_MergeInfo_get__isExternal(t_MergeInfo *self, void *data);
        static PyObject *t_MergeInfo_get__mergeMaxNumSegments(t_MergeInfo *self, void *data);
        static PyObject *t_MergeInfo_get__totalMaxDoc(t_MergeInfo *self, void *data);

        static PyGetSetDef t_MergeInfo__fields_[] = {
          DECLARE_GET_FIELD(t_MergeInfo, estimatedMergeBytes),
          DECLARE_GET_FIELD(t_MergeInfo, isExternal),
          DECLARE_GET_FIELD(t_MergeInfo, mergeMaxNumSegments),
          DECLARE_GET_FIELD(t_MergeInfo, totalMaxDoc),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergeInfo__methods_[] = {
          DECLARE_METHOD(t_MergeInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeInfo, equals, METH_VARARGS),
          DECLARE_METHOD(t_MergeInfo, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MergeInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MergeInfo)[] = {
          { Py_tp_methods, t_MergeInfo__methods_ },
          { Py_tp_init, (void *) t_MergeInfo_init_ },
          { Py_tp_getset, t_MergeInfo__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MergeInfo)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MergeInfo, t_MergeInfo, MergeInfo);

        void t_MergeInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeInfo), &PY_TYPE_DEF(MergeInfo), module, "MergeInfo", 0);
        }

        void t_MergeInfo::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeInfo), "class_", make_descriptor(MergeInfo::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeInfo), "wrapfn_", make_descriptor(t_MergeInfo::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeInfo), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeInfo::initializeClass, 1)))
            return NULL;
          return t_MergeInfo::wrap_Object(MergeInfo(((t_MergeInfo *) arg)->object.this$));
        }
        static PyObject *t_MergeInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergeInfo_init_(t_MergeInfo *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jlong a1;
          jboolean a2;
          jint a3;
          MergeInfo object((jobject) NULL);

          if (!parseArgs(args, "IJZI", &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = MergeInfo(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergeInfo_equals(t_MergeInfo *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(MergeInfo), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MergeInfo_hashCode(t_MergeInfo *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MergeInfo), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MergeInfo_toString(t_MergeInfo *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(MergeInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MergeInfo_get__estimatedMergeBytes(t_MergeInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_estimatedMergeBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_MergeInfo_get__isExternal(t_MergeInfo *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_isExternal());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_MergeInfo_get__mergeMaxNumSegments(t_MergeInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_mergeMaxNumSegments());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_MergeInfo_get__totalMaxDoc(t_MergeInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totalMaxDoc());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/FieldsIndexWriter.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *FieldsIndexWriter::class$ = NULL;
          jmethodID *FieldsIndexWriter::mids$ = NULL;
          bool FieldsIndexWriter::live$ = false;

          jclass FieldsIndexWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/FieldsIndexWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void FieldsIndexWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_FieldsIndexWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldsIndexWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldsIndexWriter_close(t_FieldsIndexWriter *self);

          static PyMethodDef t_FieldsIndexWriter__methods_[] = {
            DECLARE_METHOD(t_FieldsIndexWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldsIndexWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldsIndexWriter, close, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FieldsIndexWriter)[] = {
            { Py_tp_methods, t_FieldsIndexWriter__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FieldsIndexWriter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FieldsIndexWriter, t_FieldsIndexWriter, FieldsIndexWriter);

          void t_FieldsIndexWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldsIndexWriter), &PY_TYPE_DEF(FieldsIndexWriter), module, "FieldsIndexWriter", 0);
          }

          void t_FieldsIndexWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldsIndexWriter), "class_", make_descriptor(FieldsIndexWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldsIndexWriter), "wrapfn_", make_descriptor(t_FieldsIndexWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldsIndexWriter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldsIndexWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldsIndexWriter::initializeClass, 1)))
              return NULL;
            return t_FieldsIndexWriter::wrap_Object(FieldsIndexWriter(((t_FieldsIndexWriter *) arg)->object.this$));
          }
          static PyObject *t_FieldsIndexWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldsIndexWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FieldsIndexWriter_close(t_FieldsIndexWriter *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/PointsConfigListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *PointsConfigListener::class$ = NULL;
              jmethodID *PointsConfigListener::mids$ = NULL;
              bool PointsConfigListener::live$ = false;

              jclass PointsConfigListener::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/PointsConfigListener");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ae2484f2d8820041] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_buildFieldConfig_4a2b3be8fbbde515] = env->getMethodID(cls, "buildFieldConfig", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;)V");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PointsConfigListener::PointsConfigListener(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ae2484f2d8820041, a0.this$)) {}

              void PointsConfigListener::buildFieldConfig(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_buildFieldConfig_4a2b3be8fbbde515], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_PointsConfigListener_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PointsConfigListener_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PointsConfigListener_init_(t_PointsConfigListener *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PointsConfigListener_buildFieldConfig(t_PointsConfigListener *self, PyObject *arg);

              static PyMethodDef t_PointsConfigListener__methods_[] = {
                DECLARE_METHOD(t_PointsConfigListener, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PointsConfigListener, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PointsConfigListener, buildFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(PointsConfigListener)[] = {
                { Py_tp_methods, t_PointsConfigListener__methods_ },
                { Py_tp_init, (void *) t_PointsConfigListener_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(PointsConfigListener)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(PointsConfigListener, t_PointsConfigListener, PointsConfigListener);

              void t_PointsConfigListener::install(PyObject *module)
              {
                installType(&PY_TYPE(PointsConfigListener), &PY_TYPE_DEF(PointsConfigListener), module, "PointsConfigListener", 0);
              }

              void t_PointsConfigListener::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(PointsConfigListener), "class_", make_descriptor(PointsConfigListener::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PointsConfigListener), "wrapfn_", make_descriptor(t_PointsConfigListener::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PointsConfigListener), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PointsConfigListener_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PointsConfigListener::initializeClass, 1)))
                  return NULL;
                return t_PointsConfigListener::wrap_Object(PointsConfigListener(((t_PointsConfigListener *) arg)->object.this$));
              }
              static PyObject *t_PointsConfigListener_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PointsConfigListener::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PointsConfigListener_init_(t_PointsConfigListener *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                PointsConfigListener object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = PointsConfigListener(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PointsConfigListener_buildFieldConfig(t_PointsConfigListener *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.buildFieldConfig(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "buildFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *FacetLabel::class$ = NULL;
          jmethodID *FacetLabel::mids$ = NULL;
          jfieldID *FacetLabel::fids$ = NULL;
          bool FacetLabel::live$ = false;
          jint FacetLabel::MAX_CATEGORY_PATH_LENGTH = (jint) 0;

          jclass FacetLabel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/FacetLabel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_2fc318b999a7aba3] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;)V");
              mids$[mid_init$_e15507bf45c25446] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_compareTo_1e6795f28098d13d] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_longHashCode_2e5ae9edcb9b072f] = env->getMethodID(cls, "longHashCode", "()J");
              mids$[mid_subpath_2f8d8c81610d6b29] = env->getMethodID(cls, "subpath", "(I)Lorg/apache/lucene/facet/taxonomy/FacetLabel;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_components] = env->getFieldID(cls, "components", "[Ljava/lang/String;");
              fids$[fid_length] = env->getFieldID(cls, "length", "I");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              MAX_CATEGORY_PATH_LENGTH = env->getStaticIntField(cls, "MAX_CATEGORY_PATH_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FacetLabel::FacetLabel(const JArray< ::java::lang::String > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2fc318b999a7aba3, a0.this$)) {}

          FacetLabel::FacetLabel(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e15507bf45c25446, a0.this$, a1.this$)) {}

          jint FacetLabel::compareTo(const FacetLabel & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_1e6795f28098d13d], a0.this$);
          }

          jboolean FacetLabel::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint FacetLabel::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          jlong FacetLabel::longHashCode() const
          {
            return env->callLongMethod(this$, mids$[mid_longHashCode_2e5ae9edcb9b072f]);
          }

          FacetLabel FacetLabel::subpath(jint a0) const
          {
            return FacetLabel(env->callObjectMethod(this$, mids$[mid_subpath_2f8d8c81610d6b29], a0));
          }

          ::java::lang::String FacetLabel::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          JArray< ::java::lang::String > FacetLabel::_get_components() const
          {
            return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_components]));
          }

          jint FacetLabel::_get_length() const
          {
            return env->getIntField(this$, fids$[fid_length]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_FacetLabel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FacetLabel_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FacetLabel_init_(t_FacetLabel *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FacetLabel_compareTo(t_FacetLabel *self, PyObject *arg);
          static PyObject *t_FacetLabel_equals(t_FacetLabel *self, PyObject *args);
          static PyObject *t_FacetLabel_hashCode(t_FacetLabel *self, PyObject *args);
          static PyObject *t_FacetLabel_longHashCode(t_FacetLabel *self);
          static PyObject *t_FacetLabel_subpath(t_FacetLabel *self, PyObject *arg);
          static PyObject *t_FacetLabel_toString(t_FacetLabel *self, PyObject *args);
          static PyObject *t_FacetLabel_get__components(t_FacetLabel *self, void *data);
          static PyObject *t_FacetLabel_get__length(t_FacetLabel *self, void *data);

          static PyGetSetDef t_FacetLabel__fields_[] = {
            DECLARE_GET_FIELD(t_FacetLabel, components),
            DECLARE_GET_FIELD(t_FacetLabel, length),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FacetLabel__methods_[] = {
            DECLARE_METHOD(t_FacetLabel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FacetLabel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FacetLabel, compareTo, METH_O),
            DECLARE_METHOD(t_FacetLabel, equals, METH_VARARGS),
            DECLARE_METHOD(t_FacetLabel, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FacetLabel, longHashCode, METH_NOARGS),
            DECLARE_METHOD(t_FacetLabel, subpath, METH_O),
            DECLARE_METHOD(t_FacetLabel, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FacetLabel)[] = {
            { Py_tp_methods, t_FacetLabel__methods_ },
            { Py_tp_init, (void *) t_FacetLabel_init_ },
            { Py_tp_getset, t_FacetLabel__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FacetLabel)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FacetLabel, t_FacetLabel, FacetLabel);

          void t_FacetLabel::install(PyObject *module)
          {
            installType(&PY_TYPE(FacetLabel), &PY_TYPE_DEF(FacetLabel), module, "FacetLabel", 0);
          }

          void t_FacetLabel::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FacetLabel), "class_", make_descriptor(FacetLabel::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FacetLabel), "wrapfn_", make_descriptor(t_FacetLabel::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FacetLabel), "boxfn_", make_descriptor(boxObject));
            env->getClass(FacetLabel::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FacetLabel), "MAX_CATEGORY_PATH_LENGTH", make_descriptor(FacetLabel::MAX_CATEGORY_PATH_LENGTH));
          }

          static PyObject *t_FacetLabel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FacetLabel::initializeClass, 1)))
              return NULL;
            return t_FacetLabel::wrap_Object(FacetLabel(((t_FacetLabel *) arg)->object.this$));
          }
          static PyObject *t_FacetLabel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FacetLabel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FacetLabel_init_(t_FacetLabel *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                FacetLabel object((jobject) NULL);

                if (!parseArgs(args, "[s", &a0))
                {
                  INT_CALL(object = FacetLabel(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                FacetLabel object((jobject) NULL);

                if (!parseArgs(args, "s[s", &a0, &a1))
                {
                  INT_CALL(object = FacetLabel(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FacetLabel_compareTo(t_FacetLabel *self, PyObject *arg)
          {
            FacetLabel a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", FacetLabel::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_FacetLabel_equals(t_FacetLabel *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FacetLabel), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FacetLabel_hashCode(t_FacetLabel *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FacetLabel), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FacetLabel_longHashCode(t_FacetLabel *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.longHashCode());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FacetLabel_subpath(t_FacetLabel *self, PyObject *arg)
          {
            jint a0;
            FacetLabel result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.subpath(a0));
              return t_FacetLabel::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subpath", arg);
            return NULL;
          }

          static PyObject *t_FacetLabel_toString(t_FacetLabel *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(FacetLabel), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FacetLabel_get__components(t_FacetLabel *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_components());
            return JArray<jstring>(value.this$).wrap();
          }

          static PyObject *t_FacetLabel_get__length(t_FacetLabel *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_length());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap$Builder.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *NormalizeCharMap$Builder::class$ = NULL;
          jmethodID *NormalizeCharMap$Builder::mids$ = NULL;
          bool NormalizeCharMap$Builder::live$ = false;

          jclass NormalizeCharMap$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/NormalizeCharMap$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_add_15b72f6a44ff93f2] = env->getMethodID(cls, "add", "(Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_build_f68f3503d194d84a] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/analysis/charfilter/NormalizeCharMap;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizeCharMap$Builder::NormalizeCharMap$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void NormalizeCharMap$Builder::add(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_add_15b72f6a44ff93f2], a0.this$, a1.this$);
          }

          ::org::apache::lucene::analysis::charfilter::NormalizeCharMap NormalizeCharMap$Builder::build() const
          {
            return ::org::apache::lucene::analysis::charfilter::NormalizeCharMap(env->callObjectMethod(this$, mids$[mid_build_f68f3503d194d84a]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_NormalizeCharMap$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizeCharMap$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizeCharMap$Builder_init_(t_NormalizeCharMap$Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizeCharMap$Builder_add(t_NormalizeCharMap$Builder *self, PyObject *args);
          static PyObject *t_NormalizeCharMap$Builder_build(t_NormalizeCharMap$Builder *self);

          static PyMethodDef t_NormalizeCharMap$Builder__methods_[] = {
            DECLARE_METHOD(t_NormalizeCharMap$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizeCharMap$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizeCharMap$Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_NormalizeCharMap$Builder, build, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NormalizeCharMap$Builder)[] = {
            { Py_tp_methods, t_NormalizeCharMap$Builder__methods_ },
            { Py_tp_init, (void *) t_NormalizeCharMap$Builder_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NormalizeCharMap$Builder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(NormalizeCharMap$Builder, t_NormalizeCharMap$Builder, NormalizeCharMap$Builder);

          void t_NormalizeCharMap$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizeCharMap$Builder), &PY_TYPE_DEF(NormalizeCharMap$Builder), module, "NormalizeCharMap$Builder", 0);
          }

          void t_NormalizeCharMap$Builder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalizeCharMap$Builder), "class_", make_descriptor(NormalizeCharMap$Builder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalizeCharMap$Builder), "wrapfn_", make_descriptor(t_NormalizeCharMap$Builder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalizeCharMap$Builder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizeCharMap$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizeCharMap$Builder::initializeClass, 1)))
              return NULL;
            return t_NormalizeCharMap$Builder::wrap_Object(NormalizeCharMap$Builder(((t_NormalizeCharMap$Builder *) arg)->object.this$));
          }
          static PyObject *t_NormalizeCharMap$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizeCharMap$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizeCharMap$Builder_init_(t_NormalizeCharMap$Builder *self, PyObject *args, PyObject *kwds)
          {
            NormalizeCharMap$Builder object((jobject) NULL);

            INT_CALL(object = NormalizeCharMap$Builder());
            self->object = object;

            return 0;
          }

          static PyObject *t_NormalizeCharMap$Builder_add(t_NormalizeCharMap$Builder *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(self->object.add(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_NormalizeCharMap$Builder_build(t_NormalizeCharMap$Builder *self)
          {
            ::org::apache::lucene::analysis::charfilter::NormalizeCharMap result((jobject) NULL);
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::analysis::charfilter::t_NormalizeCharMap::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/dict/TokenInfoFST.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "java/lang/Long.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace dict {

            ::java::lang::Class *TokenInfoFST::class$ = NULL;
            jmethodID *TokenInfoFST::mids$ = NULL;
            jfieldID *TokenInfoFST::fids$ = NULL;
            bool TokenInfoFST::live$ = false;

            jclass TokenInfoFST::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/dict/TokenInfoFST");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d50ca64c20bd9cd4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;Z)V");
                mids$[mid_findTargetArc_dbab044ed5b9d825] = env->getMethodID(cls, "findTargetArc", "(ILorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;ZLorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
                mids$[mid_getBytesReader_79a0688c6e123a32] = env->getMethodID(cls, "getBytesReader", "()Lorg/apache/lucene/util/fst/FST$BytesReader;");
                mids$[mid_getFirstArc_bfd8ca0b4a5c83d7] = env->getMethodID(cls, "getFirstArc", "(Lorg/apache/lucene/util/fst/FST$Arc;)Lorg/apache/lucene/util/fst/FST$Arc;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_NO_OUTPUT] = env->getFieldID(cls, "NO_OUTPUT", "Ljava/lang/Long;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TokenInfoFST::TokenInfoFST(const ::org::apache::lucene::util::fst::FST & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d50ca64c20bd9cd4, a0.this$, a1)) {}

            ::org::apache::lucene::util::fst::FST$Arc TokenInfoFST::findTargetArc(jint a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::fst::FST$Arc & a2, jboolean a3, const ::org::apache::lucene::util::fst::FST$BytesReader & a4) const
            {
              return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_findTargetArc_dbab044ed5b9d825], a0, a1.this$, a2.this$, a3, a4.this$));
            }

            ::org::apache::lucene::util::fst::FST$BytesReader TokenInfoFST::getBytesReader() const
            {
              return ::org::apache::lucene::util::fst::FST$BytesReader(env->callObjectMethod(this$, mids$[mid_getBytesReader_79a0688c6e123a32]));
            }

            ::org::apache::lucene::util::fst::FST$Arc TokenInfoFST::getFirstArc(const ::org::apache::lucene::util::fst::FST$Arc & a0) const
            {
              return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_getFirstArc_bfd8ca0b4a5c83d7], a0.this$));
            }

            ::java::lang::Long TokenInfoFST::_get_NO_OUTPUT() const
            {
              return ::java::lang::Long(env->getObjectField(this$, fids$[fid_NO_OUTPUT]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace dict {
            static PyObject *t_TokenInfoFST_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TokenInfoFST_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TokenInfoFST_init_(t_TokenInfoFST *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TokenInfoFST_findTargetArc(t_TokenInfoFST *self, PyObject *args);
            static PyObject *t_TokenInfoFST_getBytesReader(t_TokenInfoFST *self);
            static PyObject *t_TokenInfoFST_getFirstArc(t_TokenInfoFST *self, PyObject *arg);
            static PyObject *t_TokenInfoFST_get__NO_OUTPUT(t_TokenInfoFST *self, void *data);

            static PyObject *t_TokenInfoFST_get__bytesReader(t_TokenInfoFST *self, void *data);
            static PyGetSetDef t_TokenInfoFST__fields_[] = {
              DECLARE_GET_FIELD(t_TokenInfoFST, NO_OUTPUT),
              DECLARE_GET_FIELD(t_TokenInfoFST, bytesReader),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TokenInfoFST__methods_[] = {
              DECLARE_METHOD(t_TokenInfoFST, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TokenInfoFST, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TokenInfoFST, findTargetArc, METH_VARARGS),
              DECLARE_METHOD(t_TokenInfoFST, getBytesReader, METH_NOARGS),
              DECLARE_METHOD(t_TokenInfoFST, getFirstArc, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(TokenInfoFST)[] = {
              { Py_tp_methods, t_TokenInfoFST__methods_ },
              { Py_tp_init, (void *) t_TokenInfoFST_init_ },
              { Py_tp_getset, t_TokenInfoFST__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(TokenInfoFST)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(TokenInfoFST, t_TokenInfoFST, TokenInfoFST);

            void t_TokenInfoFST::install(PyObject *module)
            {
              installType(&PY_TYPE(TokenInfoFST), &PY_TYPE_DEF(TokenInfoFST), module, "TokenInfoFST", 0);
            }

            void t_TokenInfoFST::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(TokenInfoFST), "class_", make_descriptor(TokenInfoFST::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TokenInfoFST), "wrapfn_", make_descriptor(t_TokenInfoFST::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TokenInfoFST), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TokenInfoFST_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TokenInfoFST::initializeClass, 1)))
                return NULL;
              return t_TokenInfoFST::wrap_Object(TokenInfoFST(((t_TokenInfoFST *) arg)->object.this$));
            }
            static PyObject *t_TokenInfoFST_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TokenInfoFST::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TokenInfoFST_init_(t_TokenInfoFST *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              TokenInfoFST object((jobject) NULL);

              if (!parseArgs(args, "KZ", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1))
              {
                INT_CALL(object = TokenInfoFST(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TokenInfoFST_findTargetArc(t_TokenInfoFST *self, PyObject *args)
            {
              jint a0;
              ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::util::fst::FST$Arc a2((jobject) NULL);
              PyTypeObject **p2;
              jboolean a3;
              ::org::apache::lucene::util::fst::FST$BytesReader a4((jobject) NULL);
              PyTypeObject **p4;
              ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

              if (!parseArgs(args, "IKKZK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a3, &a4, &p4, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
              {
                OBJ_CALL(result = self->object.findTargetArc(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, ::java::lang::PY_TYPE(Long));
              }

              PyErr_SetArgsError((PyObject *) self, "findTargetArc", args);
              return NULL;
            }

            static PyObject *t_TokenInfoFST_getBytesReader(t_TokenInfoFST *self)
            {
              ::org::apache::lucene::util::fst::FST$BytesReader result((jobject) NULL);
              OBJ_CALL(result = self->object.getBytesReader());
              return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(result);
            }

            static PyObject *t_TokenInfoFST_getFirstArc(t_TokenInfoFST *self, PyObject *arg)
            {
              ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

              if (!parseArg(arg, "K", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_))
              {
                OBJ_CALL(result = self->object.getFirstArc(a0));
                return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, ::java::lang::PY_TYPE(Long));
              }

              PyErr_SetArgsError((PyObject *) self, "getFirstArc", arg);
              return NULL;
            }

            static PyObject *t_TokenInfoFST_get__NO_OUTPUT(t_TokenInfoFST *self, void *data)
            {
              ::java::lang::Long value((jobject) NULL);
              OBJ_CALL(value = self->object._get_NO_OUTPUT());
              return ::java::lang::t_Long::wrap_Object(value);
            }

            static PyObject *t_TokenInfoFST_get__bytesReader(t_TokenInfoFST *self, void *data)
            {
              ::org::apache::lucene::util::fst::FST$BytesReader value((jobject) NULL);
              OBJ_CALL(value = self->object.getBytesReader());
              return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/ShapeField.h"
#include "org/apache/lucene/document/ShapeField$DecodedTriangle.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *ShapeField::class$ = NULL;
        jmethodID *ShapeField::mids$ = NULL;
        bool ShapeField::live$ = false;

        jclass ShapeField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/ShapeField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_decodeTriangle_1bc0ca28890cb0a9] = env->getStaticMethodID(cls, "decodeTriangle", "([BLorg/apache/lucene/document/ShapeField$DecodedTriangle;)V");
            mids$[mid_encodeTriangle_f17e069e214d6ed1] = env->getStaticMethodID(cls, "encodeTriangle", "([BIIZIIZIIZ)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void ShapeField::decodeTriangle(const JArray< jbyte > & a0, const ::org::apache::lucene::document::ShapeField$DecodedTriangle & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_decodeTriangle_1bc0ca28890cb0a9], a0.this$, a1.this$);
        }

        void ShapeField::encodeTriangle(const JArray< jbyte > & a0, jint a1, jint a2, jboolean a3, jint a4, jint a5, jboolean a6, jint a7, jint a8, jboolean a9)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_encodeTriangle_f17e069e214d6ed1], a0.this$, a1, a2, a3, a4, a5, a6, a7, a8, a9);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/document/ShapeField$QueryRelation.h"
#include "org/apache/lucene/document/ShapeField$Triangle.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_ShapeField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ShapeField_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ShapeField_decodeTriangle(PyTypeObject *type, PyObject *args);
        static PyObject *t_ShapeField_encodeTriangle(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_ShapeField__methods_[] = {
          DECLARE_METHOD(t_ShapeField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ShapeField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ShapeField, decodeTriangle, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ShapeField, encodeTriangle, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ShapeField)[] = {
          { Py_tp_methods, t_ShapeField__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ShapeField)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(ShapeField, t_ShapeField, ShapeField);

        void t_ShapeField::install(PyObject *module)
        {
          installType(&PY_TYPE(ShapeField), &PY_TYPE_DEF(ShapeField), module, "ShapeField", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField), "DecodedTriangle", make_descriptor(&PY_TYPE_DEF(ShapeField$DecodedTriangle)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField), "QueryRelation", make_descriptor(&PY_TYPE_DEF(ShapeField$QueryRelation)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField), "Triangle", make_descriptor(&PY_TYPE_DEF(ShapeField$Triangle)));
        }

        void t_ShapeField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField), "class_", make_descriptor(ShapeField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField), "wrapfn_", make_descriptor(t_ShapeField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ShapeField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ShapeField::initializeClass, 1)))
            return NULL;
          return t_ShapeField::wrap_Object(ShapeField(((t_ShapeField *) arg)->object.this$));
        }
        static PyObject *t_ShapeField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ShapeField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ShapeField_decodeTriangle(PyTypeObject *type, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          ::org::apache::lucene::document::ShapeField$DecodedTriangle a1((jobject) NULL);

          if (!parseArgs(args, "[Bk", ::org::apache::lucene::document::ShapeField$DecodedTriangle::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::document::ShapeField::decodeTriangle(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "decodeTriangle", args);
          return NULL;
        }

        static PyObject *t_ShapeField_encodeTriangle(PyTypeObject *type, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jboolean a3;
          jint a4;
          jint a5;
          jboolean a6;
          jint a7;
          jint a8;
          jboolean a9;

          if (!parseArgs(args, "[BIIZIIZIIZ", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9))
          {
            OBJ_CALL(::org::apache::lucene::document::ShapeField::encodeTriangle(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "encodeTriangle", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonList.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/util/Iterator.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonList::class$ = NULL;
        jmethodID *PythonList::mids$ = NULL;
        bool PythonList::live$ = false;

        jclass PythonList::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonList");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_8b72f2dcdde6fd1d] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
            mids$[mid_add_cf6732d7dfcfc293] = env->getMethodID(cls, "add", "(ILjava/lang/Object;)V");
            mids$[mid_addAll_15d9cc2398c22637] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
            mids$[mid_addAll_8980636bfaaa897b] = env->getMethodID(cls, "addAll", "(ILjava/util/Collection;)Z");
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_contains_8b72f2dcdde6fd1d] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
            mids$[mid_containsAll_15d9cc2398c22637] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_get_b15c79acb15c2870] = env->getMethodID(cls, "get", "(I)Ljava/lang/Object;");
            mids$[mid_indexOf_5a4805a36cf611e7] = env->getMethodID(cls, "indexOf", "(Ljava/lang/Object;)I");
            mids$[mid_isEmpty_8454bd5aa23fd11e] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_lastIndexOf_5a4805a36cf611e7] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/Object;)I");
            mids$[mid_listIterator_78bda7a3d01214c3] = env->getMethodID(cls, "listIterator", "()Ljava/util/ListIterator;");
            mids$[mid_listIterator_8204cc66da390272] = env->getMethodID(cls, "listIterator", "(I)Ljava/util/ListIterator;");
            mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_remove_b15c79acb15c2870] = env->getMethodID(cls, "remove", "(I)Ljava/lang/Object;");
            mids$[mid_remove_8b72f2dcdde6fd1d] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
            mids$[mid_removeAll_15d9cc2398c22637] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
            mids$[mid_retainAll_15d9cc2398c22637] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
            mids$[mid_set_55e2638f354bbf61] = env->getMethodID(cls, "set", "(ILjava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
            mids$[mid_subList_e1795bf76fe1346f] = env->getMethodID(cls, "subList", "(II)Ljava/util/List;");
            mids$[mid_toArray_6becf78ffd87a9bc] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
            mids$[mid_toArray_609b05756010dc5d] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonList::PythonList() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean PythonList::equals(const ::java::lang::Object & a0) const
        {
          return env->callNonvirtualBooleanMethod(this$, (jclass) ::java::lang::Object::class$->this$, ::java::lang::Object::mids$[::java::lang::Object::mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        void PythonList::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
        }

        ::java::util::ListIterator PythonList::listIterator() const
        {
          return ::java::util::ListIterator(env->callObjectMethod(this$, mids$[mid_listIterator_78bda7a3d01214c3]));
        }

        jlong PythonList::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
        }

        void PythonList::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
        }

        ::java::lang::Object PythonList::remove(jint a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_b15c79acb15c2870], a0));
        }

        jboolean PythonList::remove(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_remove_8b72f2dcdde6fd1d], a0.this$);
        }

        ::java::util::List PythonList::subList(jint a0, jint a1) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_subList_e1795bf76fe1346f], a0, a1));
        }

        JArray< ::java::lang::Object > PythonList::toArray(const JArray< ::java::lang::Object > & a0) const
        {
          return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_609b05756010dc5d], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonList_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonList_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonList_init_(t_PythonList *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonList_equals(t_PythonList *self, PyObject *args);
        static PyObject *t_PythonList_finalize(t_PythonList *self);
        static PyObject *t_PythonList_listIterator(t_PythonList *self);
        static PyObject *t_PythonList_pythonExtension(t_PythonList *self, PyObject *args);
        static PyObject *t_PythonList_remove(t_PythonList *self, PyObject *args);
        static PyObject *t_PythonList_subList(t_PythonList *self, PyObject *args);
        static PyObject *t_PythonList_toArray(t_PythonList *self, PyObject *arg);
        static jboolean JNICALL t_PythonList_add0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonList_add1(JNIEnv *jenv, jobject jobj, jint a0, jobject a1);
        static jboolean JNICALL t_PythonList_addAll2(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_addAll3(JNIEnv *jenv, jobject jobj, jint a0, jobject a1);
        static void JNICALL t_PythonList_clear4(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonList_contains5(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_containsAll6(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_equals7(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonList_get8(JNIEnv *jenv, jobject jobj, jint a0);
        static jint JNICALL t_PythonList_indexOf9(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_isEmpty10(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonList_iterator11(JNIEnv *jenv, jobject jobj);
        static jint JNICALL t_PythonList_lastIndexOf12(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonList_listIterator13(JNIEnv *jenv, jobject jobj, jint a0);
        static void JNICALL t_PythonList_pythonDecRef14(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonList_removeAll15(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_retainAll16(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonList_set17(JNIEnv *jenv, jobject jobj, jint a0, jobject a1);
        static jint JNICALL t_PythonList_size18(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonList_toArray19(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonList_get__self(t_PythonList *self, void *data);
        static PyGetSetDef t_PythonList__fields_[] = {
          DECLARE_GET_FIELD(t_PythonList, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonList__methods_[] = {
          DECLARE_METHOD(t_PythonList, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonList, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonList, equals, METH_VARARGS),
          DECLARE_METHOD(t_PythonList, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonList, listIterator, METH_NOARGS),
          DECLARE_METHOD(t_PythonList, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonList, remove, METH_VARARGS),
          DECLARE_METHOD(t_PythonList, subList, METH_VARARGS),
          DECLARE_METHOD(t_PythonList, toArray, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PythonList)[] = {
          { Py_tp_methods, t_PythonList__methods_ },
          { Py_tp_init, (void *) t_PythonList_init_ },
          { Py_tp_getset, t_PythonList__fields_ },
          { Py_tp_iter, (void *) get_extension_iterator },
          { Py_tp_iternext, (void *) 0 },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PythonList)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PythonList, t_PythonList, PythonList);

        void t_PythonList::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonList), &PY_TYPE_DEF(PythonList), module, "PythonList", 1);
        }

        void t_PythonList::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonList), "class_", make_descriptor(PythonList::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonList), "wrapfn_", make_descriptor(t_PythonList::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonList), "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonList::initializeClass);
          JNINativeMethod methods[] = {
            { "add", "(Ljava/lang/Object;)Z", (void *) t_PythonList_add0 },
            { "add", "(ILjava/lang/Object;)V", (void *) t_PythonList_add1 },
            { "addAll", "(Ljava/util/Collection;)Z", (void *) t_PythonList_addAll2 },
            { "addAll", "(ILjava/util/Collection;)Z", (void *) t_PythonList_addAll3 },
            { "clear", "()V", (void *) t_PythonList_clear4 },
            { "contains", "(Ljava/lang/Object;)Z", (void *) t_PythonList_contains5 },
            { "containsAll", "(Ljava/util/Collection;)Z", (void *) t_PythonList_containsAll6 },
            { "equals", "(Ljava/lang/Object;)Z", (void *) t_PythonList_equals7 },
            { "get", "(I)Ljava/lang/Object;", (void *) t_PythonList_get8 },
            { "indexOf", "(Ljava/lang/Object;)I", (void *) t_PythonList_indexOf9 },
            { "isEmpty", "()Z", (void *) t_PythonList_isEmpty10 },
            { "iterator", "()Ljava/util/Iterator;", (void *) t_PythonList_iterator11 },
            { "lastIndexOf", "(Ljava/lang/Object;)I", (void *) t_PythonList_lastIndexOf12 },
            { "listIterator", "(I)Ljava/util/ListIterator;", (void *) t_PythonList_listIterator13 },
            { "pythonDecRef", "()V", (void *) t_PythonList_pythonDecRef14 },
            { "removeAll", "(Ljava/util/Collection;)Z", (void *) t_PythonList_removeAll15 },
            { "retainAll", "(Ljava/util/Collection;)Z", (void *) t_PythonList_retainAll16 },
            { "set", "(ILjava/lang/Object;)Ljava/lang/Object;", (void *) t_PythonList_set17 },
            { "size", "()I", (void *) t_PythonList_size18 },
            { "toArray", "()[Ljava/lang/Object;", (void *) t_PythonList_toArray19 },
          };
          env->registerNatives(cls, methods, 20);
        }

        static PyObject *t_PythonList_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonList::initializeClass, 1)))
            return NULL;
          return t_PythonList::wrap_Object(PythonList(((t_PythonList *) arg)->object.this$));
        }
        static PyObject *t_PythonList_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonList::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonList_init_(t_PythonList *self, PyObject *args, PyObject *kwds)
        {
          PythonList object((jobject) NULL);

          INT_CALL(object = PythonList());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonList_equals(t_PythonList *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(PythonList), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PythonList_finalize(t_PythonList *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonList_listIterator(t_PythonList *self)
        {
          ::java::util::ListIterator result((jobject) NULL);
          OBJ_CALL(result = self->object.listIterator());
          return ::java::util::t_ListIterator::wrap_Object(result);
        }

        static PyObject *t_PythonList_pythonExtension(t_PythonList *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonList_remove(t_PythonList *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.remove(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }
            }
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.remove(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "remove", args);
          return NULL;
        }

        static PyObject *t_PythonList_subList(t_PythonList *self, PyObject *args)
        {
          jint a0;
          jint a1;
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.subList(a0, a1));
            return ::java::util::t_List::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "subList", args);
          return NULL;
        }

        static PyObject *t_PythonList_toArray(t_PythonList *self, PyObject *arg)
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArg(arg, "[o", &a0))
          {
            OBJ_CALL(result = self->object.toArray(a0));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "toArray", arg);
          return NULL;
        }

        static jboolean JNICALL t_PythonList_add0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "add", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("add", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonList_add1(JNIEnv *jenv, jobject jobj, jint a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o1 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a1));
          PyObject *result = PyObject_CallMethod(obj, "add", "iO", (int) a0, o1);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonList_addAll2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "addAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("addAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonList_addAll3(JNIEnv *jenv, jobject jobj, jint a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o1 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a1));
          PyObject *result = PyObject_CallMethod(obj, "addAll", "iO", (int) a0, o1);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("addAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonList_clear4(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "clear", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonList_contains5(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "contains", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("contains", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonList_containsAll6(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "containsAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("containsAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonList_equals7(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "equals", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("equals", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonList_get8(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::lang::Object value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "get", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "o", &value))
          {
            throwTypeError("get", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jint JNICALL t_PythonList_indexOf9(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "indexOf", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("indexOf", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jboolean JNICALL t_PythonList_isEmpty10(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "isEmpty", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("isEmpty", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonList_iterator11(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::util::Iterator value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "iterator", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::java::util::Iterator::initializeClass, &value))
          {
            throwTypeError("iterator", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jint JNICALL t_PythonList_lastIndexOf12(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "lastIndexOf", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("lastIndexOf", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jobject JNICALL t_PythonList_listIterator13(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::util::ListIterator value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "listIterator", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::java::util::ListIterator::initializeClass, &value))
          {
            throwTypeError("listIterator", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonList_pythonDecRef14(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jboolean JNICALL t_PythonList_removeAll15(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "removeAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("removeAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonList_retainAll16(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "retainAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("retainAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonList_set17(JNIEnv *jenv, jobject jobj, jint a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::lang::Object value((jobject) NULL);
          PyObject *o1 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a1));
          PyObject *result = PyObject_CallMethod(obj, "set", "iO", (int) a0, o1);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "o", &value))
          {
            throwTypeError("set", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jint JNICALL t_PythonList_size18(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "size", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("size", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jobject JNICALL t_PythonList_toArray19(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          JArray< ::java::lang::Object > value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "toArray", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "[o", &value))
          {
            throwTypeError("toArray", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonList_get__self(t_PythonList *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$MergeSpecification::class$ = NULL;
        jmethodID *MergePolicy$MergeSpecification::mids$ = NULL;
        jfieldID *MergePolicy$MergeSpecification::fids$ = NULL;
        bool MergePolicy$MergeSpecification::live$ = false;

        jclass MergePolicy$MergeSpecification::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$MergeSpecification");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_b4144ef05f017168] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;)V");
            mids$[mid_segString_903f3c17c153fcea] = env->getMethodID(cls, "segString", "(Lorg/apache/lucene/store/Directory;)Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_merges] = env->getFieldID(cls, "merges", "Ljava/util/List;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$MergeSpecification::MergePolicy$MergeSpecification() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void MergePolicy$MergeSpecification::add(const ::org::apache::lucene::index::MergePolicy$OneMerge & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_b4144ef05f017168], a0.this$);
        }

        ::java::lang::String MergePolicy$MergeSpecification::segString(const ::org::apache::lucene::store::Directory & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_903f3c17c153fcea], a0.this$));
        }

        ::java::util::List MergePolicy$MergeSpecification::_get_merges() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_merges]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$MergeSpecification_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$MergeSpecification_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy$MergeSpecification_init_(t_MergePolicy$MergeSpecification *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergePolicy$MergeSpecification_add(t_MergePolicy$MergeSpecification *self, PyObject *arg);
        static PyObject *t_MergePolicy$MergeSpecification_segString(t_MergePolicy$MergeSpecification *self, PyObject *arg);
        static PyObject *t_MergePolicy$MergeSpecification_get__merges(t_MergePolicy$MergeSpecification *self, void *data);

        static PyGetSetDef t_MergePolicy$MergeSpecification__fields_[] = {
          DECLARE_GET_FIELD(t_MergePolicy$MergeSpecification, merges),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy$MergeSpecification__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$MergeSpecification, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeSpecification, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeSpecification, add, METH_O),
          DECLARE_METHOD(t_MergePolicy$MergeSpecification, segString, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MergePolicy$MergeSpecification)[] = {
          { Py_tp_methods, t_MergePolicy$MergeSpecification__methods_ },
          { Py_tp_init, (void *) t_MergePolicy$MergeSpecification_init_ },
          { Py_tp_getset, t_MergePolicy$MergeSpecification__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MergePolicy$MergeSpecification)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MergePolicy$MergeSpecification, t_MergePolicy$MergeSpecification, MergePolicy$MergeSpecification);

        void t_MergePolicy$MergeSpecification::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$MergeSpecification), &PY_TYPE_DEF(MergePolicy$MergeSpecification), module, "MergePolicy$MergeSpecification", 0);
        }

        void t_MergePolicy$MergeSpecification::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$MergeSpecification), "class_", make_descriptor(MergePolicy$MergeSpecification::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$MergeSpecification), "wrapfn_", make_descriptor(t_MergePolicy$MergeSpecification::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$MergeSpecification), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$MergeSpecification_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$MergeSpecification::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$MergeSpecification::wrap_Object(MergePolicy$MergeSpecification(((t_MergePolicy$MergeSpecification *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$MergeSpecification_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$MergeSpecification::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy$MergeSpecification_init_(t_MergePolicy$MergeSpecification *self, PyObject *args, PyObject *kwds)
        {
          MergePolicy$MergeSpecification object((jobject) NULL);

          INT_CALL(object = MergePolicy$MergeSpecification());
          self->object = object;

          return 0;
        }

        static PyObject *t_MergePolicy$MergeSpecification_add(t_MergePolicy$MergeSpecification *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy$OneMerge::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$MergeSpecification_segString(t_MergePolicy$MergeSpecification *self, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.segString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "segString", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$MergeSpecification_get__merges(t_MergePolicy$MergeSpecification *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_merges());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenCountAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenCountAnalyzer::class$ = NULL;
          jmethodID *LimitTokenCountAnalyzer::mids$ = NULL;
          bool LimitTokenCountAnalyzer::live$ = false;

          jclass LimitTokenCountAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenCountAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_2bc54f6bb204f5dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;I)V");
              mids$[mid_init$_7e63b3a982e61478] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;IZ)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_getWrappedAnalyzer_dad9f41704206408] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_wrapComponents_ad8b4daa4250cd99] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenCountAnalyzer::LimitTokenCountAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_2bc54f6bb204f5dc, a0.this$, a1)) {}

          LimitTokenCountAnalyzer::LimitTokenCountAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1, jboolean a2) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_7e63b3a982e61478, a0.this$, a1, a2)) {}

          ::java::lang::String LimitTokenCountAnalyzer::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenCountAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenCountAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenCountAnalyzer_init_(t_LimitTokenCountAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenCountAnalyzer_toString(t_LimitTokenCountAnalyzer *self, PyObject *args);

          static PyMethodDef t_LimitTokenCountAnalyzer__methods_[] = {
            DECLARE_METHOD(t_LimitTokenCountAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountAnalyzer, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LimitTokenCountAnalyzer)[] = {
            { Py_tp_methods, t_LimitTokenCountAnalyzer__methods_ },
            { Py_tp_init, (void *) t_LimitTokenCountAnalyzer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LimitTokenCountAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::AnalyzerWrapper),
            NULL
          };

          DEFINE_TYPE(LimitTokenCountAnalyzer, t_LimitTokenCountAnalyzer, LimitTokenCountAnalyzer);

          void t_LimitTokenCountAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenCountAnalyzer), &PY_TYPE_DEF(LimitTokenCountAnalyzer), module, "LimitTokenCountAnalyzer", 0);
          }

          void t_LimitTokenCountAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenCountAnalyzer), "class_", make_descriptor(LimitTokenCountAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenCountAnalyzer), "wrapfn_", make_descriptor(t_LimitTokenCountAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenCountAnalyzer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LimitTokenCountAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenCountAnalyzer::initializeClass, 1)))
              return NULL;
            return t_LimitTokenCountAnalyzer::wrap_Object(LimitTokenCountAnalyzer(((t_LimitTokenCountAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenCountAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenCountAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenCountAnalyzer_init_(t_LimitTokenCountAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                LimitTokenCountAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LimitTokenCountAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                jboolean a2;
                LimitTokenCountAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LimitTokenCountAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenCountAnalyzer_toString(t_LimitTokenCountAnalyzer *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(LimitTokenCountAnalyzer), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/CompletionScorer.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/LeafCollector.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *CompletionScorer::class$ = NULL;
            jmethodID *CompletionScorer::mids$ = NULL;
            bool CompletionScorer::live$ = false;

            jclass CompletionScorer::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/CompletionScorer");

                mids$ = new jmethodID[max_mid];
                mids$[mid_accept_206060ef8feb5ecf] = env->getMethodID(cls, "accept", "(ILorg/apache/lucene/util/Bits;)Z");
                mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
                mids$[mid_score_a9c39cecc01e4246] = env->getMethodID(cls, "score", "(FF)F");
                mids$[mid_score_aa5aa19eac27f402] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/LeafCollector;Lorg/apache/lucene/util/Bits;II)I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jboolean CompletionScorer::accept(jint a0, const ::org::apache::lucene::util::Bits & a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_accept_206060ef8feb5ecf], a0, a1.this$);
            }

            jlong CompletionScorer::cost() const
            {
              return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
            }

            jfloat CompletionScorer::score(jfloat a0, jfloat a1) const
            {
              return env->callFloatMethod(this$, mids$[mid_score_a9c39cecc01e4246], a0, a1);
            }

            jint CompletionScorer::score(const ::org::apache::lucene::search::LeafCollector & a0, const ::org::apache::lucene::util::Bits & a1, jint a2, jint a3) const
            {
              return env->callIntMethod(this$, mids$[mid_score_aa5aa19eac27f402], a0.this$, a1.this$, a2, a3);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_CompletionScorer_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CompletionScorer_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CompletionScorer_accept(t_CompletionScorer *self, PyObject *args);
            static PyObject *t_CompletionScorer_cost(t_CompletionScorer *self, PyObject *args);
            static PyObject *t_CompletionScorer_score(t_CompletionScorer *self, PyObject *args);

            static PyMethodDef t_CompletionScorer__methods_[] = {
              DECLARE_METHOD(t_CompletionScorer, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompletionScorer, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompletionScorer, accept, METH_VARARGS),
              DECLARE_METHOD(t_CompletionScorer, cost, METH_VARARGS),
              DECLARE_METHOD(t_CompletionScorer, score, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(CompletionScorer)[] = {
              { Py_tp_methods, t_CompletionScorer__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(CompletionScorer)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::BulkScorer),
              NULL
            };

            DEFINE_TYPE(CompletionScorer, t_CompletionScorer, CompletionScorer);

            void t_CompletionScorer::install(PyObject *module)
            {
              installType(&PY_TYPE(CompletionScorer), &PY_TYPE_DEF(CompletionScorer), module, "CompletionScorer", 0);
            }

            void t_CompletionScorer::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionScorer), "class_", make_descriptor(CompletionScorer::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionScorer), "wrapfn_", make_descriptor(t_CompletionScorer::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionScorer), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CompletionScorer_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CompletionScorer::initializeClass, 1)))
                return NULL;
              return t_CompletionScorer::wrap_Object(CompletionScorer(((t_CompletionScorer *) arg)->object.this$));
            }
            static PyObject *t_CompletionScorer_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CompletionScorer::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CompletionScorer_accept(t_CompletionScorer *self, PyObject *args)
            {
              jint a0;
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "Ik", ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.accept(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "accept", args);
              return NULL;
            }

            static PyObject *t_CompletionScorer_cost(t_CompletionScorer *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.cost());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(CompletionScorer), (PyObject *) self, "cost", args, 2);
            }

            static PyObject *t_CompletionScorer_score(t_CompletionScorer *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  jfloat a0;
                  jfloat a1;
                  jfloat result;

                  if (!parseArgs(args, "FF", &a0, &a1))
                  {
                    OBJ_CALL(result = self->object.score(a0, a1));
                    return PyFloat_FromDouble((double) result);
                  }
                }
                break;
               case 4:
                {
                  ::org::apache::lucene::search::LeafCollector a0((jobject) NULL);
                  ::org::apache::lucene::util::Bits a1((jobject) NULL);
                  jint a2;
                  jint a3;
                  jint result;

                  if (!parseArgs(args, "kkII", ::org::apache::lucene::search::LeafCollector::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1, &a2, &a3))
                  {
                    OBJ_CALL(result = self->object.score(a0, a1, a2, a3));
                    return PyLong_FromLong((long) result);
                  }
                }
              }

              return callSuper(PY_TYPE(CompletionScorer), (PyObject *) self, "score", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/StringReader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *StringReader::class$ = NULL;
    jmethodID *StringReader::mids$ = NULL;
    bool StringReader::live$ = false;

    jclass StringReader::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/StringReader");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
        mids$[mid_mark_040c4cd0390c5aff] = env->getMethodID(cls, "mark", "(I)V");
        mids$[mid_markSupported_8454bd5aa23fd11e] = env->getMethodID(cls, "markSupported", "()Z");
        mids$[mid_read_9972fcc56b44e79d] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_644fc0bf0aa7fb26] = env->getMethodID(cls, "read", "([CII)I");
        mids$[mid_ready_8454bd5aa23fd11e] = env->getMethodID(cls, "ready", "()Z");
        mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
        mids$[mid_skip_d711eecdc469624a] = env->getMethodID(cls, "skip", "(J)J");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    StringReader::StringReader(const ::java::lang::String & a0) : ::java::io::Reader(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

    void StringReader::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
    }

    void StringReader::mark(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_mark_040c4cd0390c5aff], a0);
    }

    jboolean StringReader::markSupported() const
    {
      return env->callBooleanMethod(this$, mids$[mid_markSupported_8454bd5aa23fd11e]);
    }

    jint StringReader::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_9972fcc56b44e79d]);
    }

    jint StringReader::read(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_644fc0bf0aa7fb26], a0.this$, a1, a2);
    }

    jboolean StringReader::ready() const
    {
      return env->callBooleanMethod(this$, mids$[mid_ready_8454bd5aa23fd11e]);
    }

    void StringReader::reset() const
    {
      env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
    }

    jlong StringReader::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_d711eecdc469624a], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_StringReader_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_StringReader_instance_(PyTypeObject *type, PyObject *arg);
    static int t_StringReader_init_(t_StringReader *self, PyObject *args, PyObject *kwds);
    static PyObject *t_StringReader_close(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_mark(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_markSupported(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_read(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_ready(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_reset(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_skip(t_StringReader *self, PyObject *args);

    static PyMethodDef t_StringReader__methods_[] = {
      DECLARE_METHOD(t_StringReader, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_StringReader, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_StringReader, close, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, mark, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, markSupported, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, read, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, ready, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, reset, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, skip, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(StringReader)[] = {
      { Py_tp_methods, t_StringReader__methods_ },
      { Py_tp_init, (void *) t_StringReader_init_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(StringReader)[] = {
      &PY_TYPE_DEF(::java::io::Reader),
      NULL
    };

    DEFINE_TYPE(StringReader, t_StringReader, StringReader);

    void t_StringReader::install(PyObject *module)
    {
      installType(&PY_TYPE(StringReader), &PY_TYPE_DEF(StringReader), module, "StringReader", 0);
    }

    void t_StringReader::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(StringReader), "class_", make_descriptor(StringReader::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(StringReader), "wrapfn_", make_descriptor(t_StringReader::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(StringReader), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_StringReader_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, StringReader::initializeClass, 1)))
        return NULL;
      return t_StringReader::wrap_Object(StringReader(((t_StringReader *) arg)->object.this$));
    }
    static PyObject *t_StringReader_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, StringReader::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_StringReader_init_(t_StringReader *self, PyObject *args, PyObject *kwds)
    {
      ::java::lang::String a0((jobject) NULL);
      StringReader object((jobject) NULL);

      if (!parseArgs(args, "s", &a0))
      {
        INT_CALL(object = StringReader(a0));
        self->object = object;
      }
      else
      {
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_StringReader_close(t_StringReader *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(StringReader), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_StringReader_mark(t_StringReader *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.mark(a0));
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(StringReader), (PyObject *) self, "mark", args, 2);
    }

    static PyObject *t_StringReader_markSupported(t_StringReader *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.markSupported());
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(StringReader), (PyObject *) self, "markSupported", args, 2);
    }

    static PyObject *t_StringReader_read(t_StringReader *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyLong_FromLong((long) result);
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyLong_FromLong((long) result);
          }
        }
      }

      return callSuper(PY_TYPE(StringReader), (PyObject *) self, "read", args, 2);
    }

    static PyObject *t_StringReader_ready(t_StringReader *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.ready());
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(StringReader), (PyObject *) self, "ready", args, 2);
    }

    static PyObject *t_StringReader_reset(t_StringReader *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.reset());
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(StringReader), (PyObject *) self, "reset", args, 2);
    }

    static PyObject *t_StringReader_skip(t_StringReader *self, PyObject *args)
    {
      jlong a0;
      jlong result;

      if (!parseArgs(args, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(PY_TYPE(StringReader), (PyObject *) self, "skip", args, 2);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianAnalyzer::class$ = NULL;
          jmethodID *GalicianAnalyzer::mids$ = NULL;
          bool GalicianAnalyzer::live$ = false;
          ::java::lang::String *GalicianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass GalicianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianAnalyzer::GalicianAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          GalicianAnalyzer::GalicianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          GalicianAnalyzer::GalicianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet GalicianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianAnalyzer_init_(t_GalicianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_GalicianAnalyzer_get__defaultStopSet(t_GalicianAnalyzer *self, void *data);
          static PyGetSetDef t_GalicianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_GalicianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GalicianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_GalicianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GalicianAnalyzer)[] = {
            { Py_tp_methods, t_GalicianAnalyzer__methods_ },
            { Py_tp_init, (void *) t_GalicianAnalyzer_init_ },
            { Py_tp_getset, t_GalicianAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GalicianAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(GalicianAnalyzer, t_GalicianAnalyzer, GalicianAnalyzer);

          void t_GalicianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianAnalyzer), &PY_TYPE_DEF(GalicianAnalyzer), module, "GalicianAnalyzer", 0);
          }

          void t_GalicianAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianAnalyzer), "class_", make_descriptor(GalicianAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianAnalyzer), "wrapfn_", make_descriptor(t_GalicianAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(GalicianAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*GalicianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_GalicianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_GalicianAnalyzer::wrap_Object(GalicianAnalyzer(((t_GalicianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_GalicianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianAnalyzer_init_(t_GalicianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                GalicianAnalyzer object((jobject) NULL);

                INT_CALL(object = GalicianAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                GalicianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GalicianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                GalicianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GalicianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::gl::GalicianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_GalicianAnalyzer_get__defaultStopSet(t_GalicianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene80/Lucene80DocValuesFormat$Mode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/lucene80/Lucene80DocValuesFormat$Mode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene80 {

          ::java::lang::Class *Lucene80DocValuesFormat$Mode::class$ = NULL;
          jmethodID *Lucene80DocValuesFormat$Mode::mids$ = NULL;
          bool Lucene80DocValuesFormat$Mode::live$ = false;
          Lucene80DocValuesFormat$Mode *Lucene80DocValuesFormat$Mode::BEST_COMPRESSION = NULL;
          Lucene80DocValuesFormat$Mode *Lucene80DocValuesFormat$Mode::BEST_SPEED = NULL;

          jclass Lucene80DocValuesFormat$Mode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene80/Lucene80DocValuesFormat$Mode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_dd4ba78c76b0000d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/lucene80/Lucene80DocValuesFormat$Mode;");
              mids$[mid_values_14519ec6208b8b5e] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/codecs/lucene80/Lucene80DocValuesFormat$Mode;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              BEST_COMPRESSION = new Lucene80DocValuesFormat$Mode(env->getStaticObjectField(cls, "BEST_COMPRESSION", "Lorg/apache/lucene/codecs/lucene80/Lucene80DocValuesFormat$Mode;"));
              BEST_SPEED = new Lucene80DocValuesFormat$Mode(env->getStaticObjectField(cls, "BEST_SPEED", "Lorg/apache/lucene/codecs/lucene80/Lucene80DocValuesFormat$Mode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene80DocValuesFormat$Mode Lucene80DocValuesFormat$Mode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Lucene80DocValuesFormat$Mode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_dd4ba78c76b0000d], a0.this$));
          }

          JArray< Lucene80DocValuesFormat$Mode > Lucene80DocValuesFormat$Mode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< Lucene80DocValuesFormat$Mode >(env->callStaticObjectMethod(cls, mids$[mid_values_14519ec6208b8b5e]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene80 {
          static PyObject *t_Lucene80DocValuesFormat$Mode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene80DocValuesFormat$Mode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene80DocValuesFormat$Mode_of_(t_Lucene80DocValuesFormat$Mode *self, PyObject *args);
          static PyObject *t_Lucene80DocValuesFormat$Mode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_Lucene80DocValuesFormat$Mode_values(PyTypeObject *type);
          static PyObject *t_Lucene80DocValuesFormat$Mode_get__parameters_(t_Lucene80DocValuesFormat$Mode *self, void *data);
          static PyGetSetDef t_Lucene80DocValuesFormat$Mode__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene80DocValuesFormat$Mode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene80DocValuesFormat$Mode__methods_[] = {
            DECLARE_METHOD(t_Lucene80DocValuesFormat$Mode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene80DocValuesFormat$Mode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene80DocValuesFormat$Mode, of_, METH_VARARGS),
            DECLARE_METHOD(t_Lucene80DocValuesFormat$Mode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Lucene80DocValuesFormat$Mode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene80DocValuesFormat$Mode)[] = {
            { Py_tp_methods, t_Lucene80DocValuesFormat$Mode__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_Lucene80DocValuesFormat$Mode__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene80DocValuesFormat$Mode)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(Lucene80DocValuesFormat$Mode, t_Lucene80DocValuesFormat$Mode, Lucene80DocValuesFormat$Mode);
          PyObject *t_Lucene80DocValuesFormat$Mode::wrap_Object(const Lucene80DocValuesFormat$Mode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lucene80DocValuesFormat$Mode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lucene80DocValuesFormat$Mode *self = (t_Lucene80DocValuesFormat$Mode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Lucene80DocValuesFormat$Mode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lucene80DocValuesFormat$Mode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lucene80DocValuesFormat$Mode *self = (t_Lucene80DocValuesFormat$Mode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Lucene80DocValuesFormat$Mode::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene80DocValuesFormat$Mode), &PY_TYPE_DEF(Lucene80DocValuesFormat$Mode), module, "Lucene80DocValuesFormat$Mode", 0);
          }

          void t_Lucene80DocValuesFormat$Mode::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene80DocValuesFormat$Mode), "class_", make_descriptor(Lucene80DocValuesFormat$Mode::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene80DocValuesFormat$Mode), "wrapfn_", make_descriptor(t_Lucene80DocValuesFormat$Mode::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene80DocValuesFormat$Mode), "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene80DocValuesFormat$Mode::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene80DocValuesFormat$Mode), "BEST_COMPRESSION", make_descriptor(t_Lucene80DocValuesFormat$Mode::wrap_Object(*Lucene80DocValuesFormat$Mode::BEST_COMPRESSION)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene80DocValuesFormat$Mode), "BEST_SPEED", make_descriptor(t_Lucene80DocValuesFormat$Mode::wrap_Object(*Lucene80DocValuesFormat$Mode::BEST_SPEED)));
          }

          static PyObject *t_Lucene80DocValuesFormat$Mode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene80DocValuesFormat$Mode::initializeClass, 1)))
              return NULL;
            return t_Lucene80DocValuesFormat$Mode::wrap_Object(Lucene80DocValuesFormat$Mode(((t_Lucene80DocValuesFormat$Mode *) arg)->object.this$));
          }
          static PyObject *t_Lucene80DocValuesFormat$Mode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene80DocValuesFormat$Mode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Lucene80DocValuesFormat$Mode_of_(t_Lucene80DocValuesFormat$Mode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_Lucene80DocValuesFormat$Mode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            Lucene80DocValuesFormat$Mode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::lucene80::Lucene80DocValuesFormat$Mode::valueOf(a0));
              return t_Lucene80DocValuesFormat$Mode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_Lucene80DocValuesFormat$Mode_values(PyTypeObject *type)
          {
            JArray< Lucene80DocValuesFormat$Mode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::codecs::lucene80::Lucene80DocValuesFormat$Mode::values());
            return JArray<jobject>(result.this$).wrap(t_Lucene80DocValuesFormat$Mode::wrap_jobject);
          }
          static PyObject *t_Lucene80DocValuesFormat$Mode_get__parameters_(t_Lucene80DocValuesFormat$Mode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonAttribute::class$ = NULL;
        jmethodID *PythonAttribute::mids$ = NULL;
        bool PythonAttribute::live$ = false;

        jclass PythonAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonAttribute");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonAttribute_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_PythonAttribute__methods_[] = {
          DECLARE_METHOD(t_PythonAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAttribute, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PythonAttribute)[] = {
          { Py_tp_methods, t_PythonAttribute__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PythonAttribute)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::Attribute),
          NULL
        };

        DEFINE_TYPE(PythonAttribute, t_PythonAttribute, PythonAttribute);

        void t_PythonAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonAttribute), &PY_TYPE_DEF(PythonAttribute), module, "PythonAttribute", 0);
        }

        void t_PythonAttribute::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonAttribute), "class_", make_descriptor(PythonAttribute::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonAttribute), "wrapfn_", make_descriptor(t_PythonAttribute::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonAttribute), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PythonAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonAttribute::initializeClass, 1)))
            return NULL;
          return t_PythonAttribute::wrap_Object(PythonAttribute(((t_PythonAttribute *) arg)->object.this$));
        }
        static PyObject *t_PythonAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoAreaFactory.h"
#include "org/apache/lucene/spatial3d/geom/GeoArea.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoAreaFactory::class$ = NULL;
          jmethodID *GeoAreaFactory::mids$ = NULL;
          bool GeoAreaFactory::live$ = false;

          jclass GeoAreaFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoAreaFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_makeGeoArea_08797024414c3a13] = env->getStaticMethodID(cls, "makeGeoArea", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DDDD)Lorg/apache/lucene/spatial3d/geom/GeoArea;");
              mids$[mid_makeGeoArea_d1e92a8e866423d8] = env->getStaticMethodID(cls, "makeGeoArea", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DDDDDD)Lorg/apache/lucene/spatial3d/geom/GeoArea;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::spatial3d::geom::GeoArea GeoAreaFactory::makeGeoArea(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::GeoArea(env->callStaticObjectMethod(cls, mids$[mid_makeGeoArea_08797024414c3a13], a0.this$, a1, a2, a3, a4));
          }

          ::org::apache::lucene::spatial3d::geom::GeoArea GeoAreaFactory::makeGeoArea(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5, jdouble a6)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::GeoArea(env->callStaticObjectMethod(cls, mids$[mid_makeGeoArea_d1e92a8e866423d8], a0.this$, a1, a2, a3, a4, a5, a6));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoAreaFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoAreaFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoAreaFactory_makeGeoArea(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_GeoAreaFactory__methods_[] = {
            DECLARE_METHOD(t_GeoAreaFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoAreaFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoAreaFactory, makeGeoArea, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoAreaFactory)[] = {
            { Py_tp_methods, t_GeoAreaFactory__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoAreaFactory)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GeoAreaFactory, t_GeoAreaFactory, GeoAreaFactory);

          void t_GeoAreaFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoAreaFactory), &PY_TYPE_DEF(GeoAreaFactory), module, "GeoAreaFactory", 0);
          }

          void t_GeoAreaFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoAreaFactory), "class_", make_descriptor(GeoAreaFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoAreaFactory), "wrapfn_", make_descriptor(t_GeoAreaFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoAreaFactory), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoAreaFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoAreaFactory::initializeClass, 1)))
              return NULL;
            return t_GeoAreaFactory::wrap_Object(GeoAreaFactory(((t_GeoAreaFactory *) arg)->object.this$));
          }
          static PyObject *t_GeoAreaFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoAreaFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoAreaFactory_makeGeoArea(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble a4;
                ::org::apache::lucene::spatial3d::geom::GeoArea result((jobject) NULL);

                if (!parseArgs(args, "kDDDD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::GeoAreaFactory::makeGeoArea(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::spatial3d::geom::t_GeoArea::wrap_Object(result);
                }
              }
              break;
             case 7:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble a4;
                jdouble a5;
                jdouble a6;
                ::org::apache::lucene::spatial3d::geom::GeoArea result((jobject) NULL);

                if (!parseArgs(args, "kDDDDDD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::GeoAreaFactory::makeGeoArea(a0, a1, a2, a3, a4, a5, a6));
                  return ::org::apache::lucene::spatial3d::geom::t_GeoArea::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "makeGeoArea", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AllGroupsCollector.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/grouping/GroupSelector.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AllGroupsCollector::class$ = NULL;
          jmethodID *AllGroupsCollector::mids$ = NULL;
          bool AllGroupsCollector::live$ = false;

          jclass AllGroupsCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AllGroupsCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_acfcf289281f56c3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/grouping/GroupSelector;)V");
              mids$[mid_collect_040c4cd0390c5aff] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_getGroupCount_9972fcc56b44e79d] = env->getMethodID(cls, "getGroupCount", "()I");
              mids$[mid_getGroups_d4dfbf7a26ff41df] = env->getMethodID(cls, "getGroups", "()Ljava/util/Collection;");
              mids$[mid_scoreMode_8a35254b82ee8276] = env->getMethodID(cls, "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;");
              mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");
              mids$[mid_doSetNextReader_8747e0e89febf88d] = env->getMethodID(cls, "doSetNextReader", "(Lorg/apache/lucene/index/LeafReaderContext;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AllGroupsCollector::AllGroupsCollector(const ::org::apache::lucene::search::grouping::GroupSelector & a0) : ::org::apache::lucene::search::SimpleCollector(env->newObject(initializeClass, &mids$, mid_init$_acfcf289281f56c3, a0.this$)) {}

          void AllGroupsCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_040c4cd0390c5aff], a0);
          }

          jint AllGroupsCollector::getGroupCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getGroupCount_9972fcc56b44e79d]);
          }

          ::java::util::Collection AllGroupsCollector::getGroups() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getGroups_d4dfbf7a26ff41df]));
          }

          ::org::apache::lucene::search::ScoreMode AllGroupsCollector::scoreMode() const
          {
            return ::org::apache::lucene::search::ScoreMode(env->callObjectMethod(this$, mids$[mid_scoreMode_8a35254b82ee8276]));
          }

          void AllGroupsCollector::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AllGroupsCollector_of_(t_AllGroupsCollector *self, PyObject *args);
          static int t_AllGroupsCollector_init_(t_AllGroupsCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AllGroupsCollector_collect(t_AllGroupsCollector *self, PyObject *args);
          static PyObject *t_AllGroupsCollector_getGroupCount(t_AllGroupsCollector *self);
          static PyObject *t_AllGroupsCollector_getGroups(t_AllGroupsCollector *self);
          static PyObject *t_AllGroupsCollector_scoreMode(t_AllGroupsCollector *self, PyObject *args);
          static PyObject *t_AllGroupsCollector_setScorer(t_AllGroupsCollector *self, PyObject *args);
          static PyObject *t_AllGroupsCollector_get__groupCount(t_AllGroupsCollector *self, void *data);
          static PyObject *t_AllGroupsCollector_get__groups(t_AllGroupsCollector *self, void *data);
          static int t_AllGroupsCollector_set__scorer(t_AllGroupsCollector *self, PyObject *arg, void *data);
          static PyObject *t_AllGroupsCollector_get__parameters_(t_AllGroupsCollector *self, void *data);
          static PyGetSetDef t_AllGroupsCollector__fields_[] = {
            DECLARE_GET_FIELD(t_AllGroupsCollector, groupCount),
            DECLARE_GET_FIELD(t_AllGroupsCollector, groups),
            DECLARE_SET_FIELD(t_AllGroupsCollector, scorer),
            DECLARE_GET_FIELD(t_AllGroupsCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AllGroupsCollector__methods_[] = {
            DECLARE_METHOD(t_AllGroupsCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AllGroupsCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AllGroupsCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AllGroupsCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_AllGroupsCollector, getGroupCount, METH_NOARGS),
            DECLARE_METHOD(t_AllGroupsCollector, getGroups, METH_NOARGS),
            DECLARE_METHOD(t_AllGroupsCollector, scoreMode, METH_VARARGS),
            DECLARE_METHOD(t_AllGroupsCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(AllGroupsCollector)[] = {
            { Py_tp_methods, t_AllGroupsCollector__methods_ },
            { Py_tp_init, (void *) t_AllGroupsCollector_init_ },
            { Py_tp_getset, t_AllGroupsCollector__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(AllGroupsCollector)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::SimpleCollector),
            NULL
          };

          DEFINE_TYPE(AllGroupsCollector, t_AllGroupsCollector, AllGroupsCollector);
          PyObject *t_AllGroupsCollector::wrap_Object(const AllGroupsCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AllGroupsCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AllGroupsCollector *self = (t_AllGroupsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AllGroupsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AllGroupsCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AllGroupsCollector *self = (t_AllGroupsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AllGroupsCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AllGroupsCollector), &PY_TYPE_DEF(AllGroupsCollector), module, "AllGroupsCollector", 0);
          }

          void t_AllGroupsCollector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(AllGroupsCollector), "class_", make_descriptor(AllGroupsCollector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AllGroupsCollector), "wrapfn_", make_descriptor(t_AllGroupsCollector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AllGroupsCollector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AllGroupsCollector::initializeClass, 1)))
              return NULL;
            return t_AllGroupsCollector::wrap_Object(AllGroupsCollector(((t_AllGroupsCollector *) arg)->object.this$));
          }
          static PyObject *t_AllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AllGroupsCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AllGroupsCollector_of_(t_AllGroupsCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AllGroupsCollector_init_(t_AllGroupsCollector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::grouping::GroupSelector a0((jobject) NULL);
            PyTypeObject **p0;
            AllGroupsCollector object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::search::grouping::GroupSelector::initializeClass, &a0, &p0, ::org::apache::lucene::search::grouping::t_GroupSelector::parameters_))
            {
              INT_CALL(object = AllGroupsCollector(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AllGroupsCollector_collect(t_AllGroupsCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(AllGroupsCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_AllGroupsCollector_getGroupCount(t_AllGroupsCollector *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getGroupCount());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_AllGroupsCollector_getGroups(t_AllGroupsCollector *self)
          {
            ::java::util::Collection result((jobject) NULL);
            OBJ_CALL(result = self->object.getGroups());
            return ::java::util::t_Collection::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_AllGroupsCollector_scoreMode(t_AllGroupsCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::ScoreMode result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.scoreMode());
              return ::org::apache::lucene::search::t_ScoreMode::wrap_Object(result);
            }

            return callSuper(PY_TYPE(AllGroupsCollector), (PyObject *) self, "scoreMode", args, 2);
          }

          static PyObject *t_AllGroupsCollector_setScorer(t_AllGroupsCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorable a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(AllGroupsCollector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_AllGroupsCollector_get__parameters_(t_AllGroupsCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AllGroupsCollector_get__groupCount(t_AllGroupsCollector *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getGroupCount());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_AllGroupsCollector_get__groups(t_AllGroupsCollector *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getGroups());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static int t_AllGroupsCollector_set__scorer(t_AllGroupsCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorable value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *CharArraySet::class$ = NULL;
        jmethodID *CharArraySet::mids$ = NULL;
        bool CharArraySet::live$ = false;
        CharArraySet *CharArraySet::EMPTY_SET = NULL;

        jclass CharArraySet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/CharArraySet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b8f283cdbda5c964] = env->getMethodID(cls, "<init>", "(IZ)V");
            mids$[mid_init$_f6beb0ccda74bc04] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;Z)V");
            mids$[mid_add_fb8687087fea5b69] = env->getMethodID(cls, "add", "([C)Z");
            mids$[mid_add_145b2d0af0c06b93] = env->getMethodID(cls, "add", "(Ljava/lang/String;)Z");
            mids$[mid_add_2cd6b83cb18fe093] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;)Z");
            mids$[mid_add_8b72f2dcdde6fd1d] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_contains_2cd6b83cb18fe093] = env->getMethodID(cls, "contains", "(Ljava/lang/CharSequence;)Z");
            mids$[mid_contains_8b72f2dcdde6fd1d] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
            mids$[mid_contains_4c2a9c7f32a6ad26] = env->getMethodID(cls, "contains", "([CII)Z");
            mids$[mid_copy_71a7a3c07a2deb95] = env->getStaticMethodID(cls, "copy", "(Ljava/util/Set;)Lorg/apache/lucene/analysis/CharArraySet;");
            mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_unmodifiableSet_ef24ea4c2af717b3] = env->getStaticMethodID(cls, "unmodifiableSet", "(Lorg/apache/lucene/analysis/CharArraySet;)Lorg/apache/lucene/analysis/CharArraySet;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            EMPTY_SET = new CharArraySet(env->getStaticObjectField(cls, "EMPTY_SET", "Lorg/apache/lucene/analysis/CharArraySet;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CharArraySet::CharArraySet(jint a0, jboolean a1) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_b8f283cdbda5c964, a0, a1)) {}

        CharArraySet::CharArraySet(const ::java::util::Collection & a0, jboolean a1) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_f6beb0ccda74bc04, a0.this$, a1)) {}

        jboolean CharArraySet::add(const JArray< jchar > & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_add_fb8687087fea5b69], a0.this$);
        }

        jboolean CharArraySet::add(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_add_145b2d0af0c06b93], a0.this$);
        }

        jboolean CharArraySet::add(const ::java::lang::CharSequence & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_add_2cd6b83cb18fe093], a0.this$);
        }

        jboolean CharArraySet::add(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_add_8b72f2dcdde6fd1d], a0.this$);
        }

        void CharArraySet::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
        }

        jboolean CharArraySet::contains(const ::java::lang::CharSequence & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_contains_2cd6b83cb18fe093], a0.this$);
        }

        jboolean CharArraySet::contains(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_contains_8b72f2dcdde6fd1d], a0.this$);
        }

        jboolean CharArraySet::contains(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          return env->callBooleanMethod(this$, mids$[mid_contains_4c2a9c7f32a6ad26], a0.this$, a1, a2);
        }

        CharArraySet CharArraySet::copy(const ::java::util::Set & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_copy_71a7a3c07a2deb95], a0.this$));
        }

        ::java::util::Iterator CharArraySet::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
        }

        jint CharArraySet::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
        }

        ::java::lang::String CharArraySet::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        CharArraySet CharArraySet::unmodifiableSet(const CharArraySet & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableSet_ef24ea4c2af717b3], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_CharArraySet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharArraySet_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharArraySet_of_(t_CharArraySet *self, PyObject *args);
        static int t_CharArraySet_init_(t_CharArraySet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CharArraySet_add(t_CharArraySet *self, PyObject *args);
        static PyObject *t_CharArraySet_clear(t_CharArraySet *self, PyObject *args);
        static PyObject *t_CharArraySet_contains(t_CharArraySet *self, PyObject *args);
        static PyObject *t_CharArraySet_copy(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharArraySet_iterator(t_CharArraySet *self, PyObject *args);
        static PyObject *t_CharArraySet_size(t_CharArraySet *self, PyObject *args);
        static PyObject *t_CharArraySet_toString(t_CharArraySet *self, PyObject *args);
        static PyObject *t_CharArraySet_unmodifiableSet(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharArraySet_get__parameters_(t_CharArraySet *self, void *data);
        static PyGetSetDef t_CharArraySet__fields_[] = {
          DECLARE_GET_FIELD(t_CharArraySet, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CharArraySet__methods_[] = {
          DECLARE_METHOD(t_CharArraySet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharArraySet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharArraySet, of_, METH_VARARGS),
          DECLARE_METHOD(t_CharArraySet, add, METH_VARARGS),
          DECLARE_METHOD(t_CharArraySet, clear, METH_VARARGS),
          DECLARE_METHOD(t_CharArraySet, contains, METH_VARARGS),
          DECLARE_METHOD(t_CharArraySet, copy, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharArraySet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_CharArraySet, size, METH_VARARGS),
          DECLARE_METHOD(t_CharArraySet, toString, METH_VARARGS),
          DECLARE_METHOD(t_CharArraySet, unmodifiableSet, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CharArraySet)[] = {
          { Py_tp_methods, t_CharArraySet__methods_ },
          { Py_tp_init, (void *) t_CharArraySet_init_ },
          { Py_tp_getset, t_CharArraySet__fields_ },
          { Py_tp_iter, (void *) ((PyObject *(*)(t_CharArraySet *)) get_generic_iterator< t_CharArraySet >) },
          { Py_tp_iternext, (void *) 0 },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CharArraySet)[] = {
          &PY_TYPE_DEF(::java::util::AbstractSet),
          NULL
        };

        DEFINE_TYPE(CharArraySet, t_CharArraySet, CharArraySet);
        PyObject *t_CharArraySet::wrap_Object(const CharArraySet& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CharArraySet::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CharArraySet *self = (t_CharArraySet *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_CharArraySet::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CharArraySet::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CharArraySet *self = (t_CharArraySet *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_CharArraySet::install(PyObject *module)
        {
          installType(&PY_TYPE(CharArraySet), &PY_TYPE_DEF(CharArraySet), module, "CharArraySet", 0);
        }

        void t_CharArraySet::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharArraySet), "class_", make_descriptor(CharArraySet::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharArraySet), "wrapfn_", make_descriptor(t_CharArraySet::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharArraySet), "boxfn_", make_descriptor(boxObject));
          env->getClass(CharArraySet::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharArraySet), "EMPTY_SET", make_descriptor(t_CharArraySet::wrap_Object(*CharArraySet::EMPTY_SET)));
        }

        static PyObject *t_CharArraySet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CharArraySet::initializeClass, 1)))
            return NULL;
          return t_CharArraySet::wrap_Object(CharArraySet(((t_CharArraySet *) arg)->object.this$));
        }
        static PyObject *t_CharArraySet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CharArraySet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CharArraySet_of_(t_CharArraySet *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_CharArraySet_init_(t_CharArraySet *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              jboolean a1;
              CharArraySet object((jobject) NULL);

              if (!parseArgs(args, "IZ", &a0, &a1))
              {
                INT_CALL(object = CharArraySet(a0, a1));
                self->object = object;
                self->parameters[0] = ::java::lang::PY_TYPE(Object);
                break;
              }
            }
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              CharArraySet object((jobject) NULL);

              if (!parseArgs(args, "KZ", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
              {
                INT_CALL(object = CharArraySet(a0, a1));
                self->object = object;
                self->parameters[0] = ::java::lang::PY_TYPE(Object);
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CharArraySet_add(t_CharArraySet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jchar > a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "[C", &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          return callSuper(PY_TYPE(CharArraySet), (PyObject *) self, "add", args, 2);
        }

        static PyObject *t_CharArraySet_clear(t_CharArraySet *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(CharArraySet), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_CharArraySet_contains(t_CharArraySet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.contains(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.contains(a0));
                Py_RETURN_BOOL(result);
              }
            }
            break;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jboolean result;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.contains(a0, a1, a2));
                Py_RETURN_BOOL(result);
              }
            }
          }

          return callSuper(PY_TYPE(CharArraySet), (PyObject *) self, "contains", args, 2);
        }

        static PyObject *t_CharArraySet_copy(PyTypeObject *type, PyObject *arg)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;
          CharArraySet result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::analysis::CharArraySet::copy(a0));
            return t_CharArraySet::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "copy", arg);
          return NULL;
        }

        static PyObject *t_CharArraySet_iterator(t_CharArraySet *self, PyObject *args)
        {
          ::java::util::Iterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::java::util::t_Iterator::wrap_Object(result, ::java::lang::PY_TYPE(Object));
          }

          return callSuper(PY_TYPE(CharArraySet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_CharArraySet_size(t_CharArraySet *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(CharArraySet), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_CharArraySet_toString(t_CharArraySet *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(CharArraySet), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CharArraySet_unmodifiableSet(PyTypeObject *type, PyObject *arg)
        {
          CharArraySet a0((jobject) NULL);
          PyTypeObject **p0;
          CharArraySet result((jobject) NULL);

          if (!parseArg(arg, "K", CharArraySet::initializeClass, &a0, &p0, t_CharArraySet::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::analysis::CharArraySet::unmodifiableSet(a0));
            return t_CharArraySet::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "unmodifiableSet", arg);
          return NULL;
        }
        static PyObject *t_CharArraySet_get__parameters_(t_CharArraySet *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishLightStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishLightStemFilterFactory::class$ = NULL;
          jmethodID *SpanishLightStemFilterFactory::mids$ = NULL;
          bool SpanishLightStemFilterFactory::live$ = false;
          ::java::lang::String *SpanishLightStemFilterFactory::NAME = NULL;

          jclass SpanishLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishLightStemFilterFactory::SpanishLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream SpanishLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishLightStemFilterFactory_init_(t_SpanishLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishLightStemFilterFactory_create(t_SpanishLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_SpanishLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SpanishLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanishLightStemFilterFactory)[] = {
            { Py_tp_methods, t_SpanishLightStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_SpanishLightStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanishLightStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(SpanishLightStemFilterFactory, t_SpanishLightStemFilterFactory, SpanishLightStemFilterFactory);

          void t_SpanishLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishLightStemFilterFactory), &PY_TYPE_DEF(SpanishLightStemFilterFactory), module, "SpanishLightStemFilterFactory", 0);
          }

          void t_SpanishLightStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishLightStemFilterFactory), "class_", make_descriptor(SpanishLightStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishLightStemFilterFactory), "wrapfn_", make_descriptor(t_SpanishLightStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishLightStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(SpanishLightStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishLightStemFilterFactory), "NAME", make_descriptor(j2p(*SpanishLightStemFilterFactory::NAME)));
          }

          static PyObject *t_SpanishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SpanishLightStemFilterFactory::wrap_Object(SpanishLightStemFilterFactory(((t_SpanishLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SpanishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishLightStemFilterFactory_init_(t_SpanishLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SpanishLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SpanishLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanishLightStemFilterFactory_create(t_SpanishLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanishLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues$DocTermsIndexException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *DocTermsIndexDocValues$DocTermsIndexException::class$ = NULL;
            jmethodID *DocTermsIndexDocValues$DocTermsIndexException::mids$ = NULL;
            bool DocTermsIndexDocValues$DocTermsIndexException::live$ = false;

            jclass DocTermsIndexDocValues$DocTermsIndexException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues$DocTermsIndexException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_3107e4c7e398731c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/RuntimeException;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DocTermsIndexDocValues$DocTermsIndexException::DocTermsIndexDocValues$DocTermsIndexException(const ::java::lang::String & a0, const ::java::lang::RuntimeException & a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_3107e4c7e398731c, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_DocTermsIndexDocValues$DocTermsIndexException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DocTermsIndexDocValues$DocTermsIndexException_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DocTermsIndexDocValues$DocTermsIndexException_init_(t_DocTermsIndexDocValues$DocTermsIndexException *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_DocTermsIndexDocValues$DocTermsIndexException__methods_[] = {
              DECLARE_METHOD(t_DocTermsIndexDocValues$DocTermsIndexException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocTermsIndexDocValues$DocTermsIndexException, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(DocTermsIndexDocValues$DocTermsIndexException)[] = {
              { Py_tp_methods, t_DocTermsIndexDocValues$DocTermsIndexException__methods_ },
              { Py_tp_init, (void *) t_DocTermsIndexDocValues$DocTermsIndexException_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(DocTermsIndexDocValues$DocTermsIndexException)[] = {
              &PY_TYPE_DEF(::java::lang::RuntimeException),
              NULL
            };

            DEFINE_TYPE(DocTermsIndexDocValues$DocTermsIndexException, t_DocTermsIndexDocValues$DocTermsIndexException, DocTermsIndexDocValues$DocTermsIndexException);

            void t_DocTermsIndexDocValues$DocTermsIndexException::install(PyObject *module)
            {
              installType(&PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException), &PY_TYPE_DEF(DocTermsIndexDocValues$DocTermsIndexException), module, "DocTermsIndexDocValues$DocTermsIndexException", 0);
            }

            void t_DocTermsIndexDocValues$DocTermsIndexException::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException), "class_", make_descriptor(DocTermsIndexDocValues$DocTermsIndexException::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException), "wrapfn_", make_descriptor(t_DocTermsIndexDocValues$DocTermsIndexException::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DocTermsIndexDocValues$DocTermsIndexException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DocTermsIndexDocValues$DocTermsIndexException::initializeClass, 1)))
                return NULL;
              return t_DocTermsIndexDocValues$DocTermsIndexException::wrap_Object(DocTermsIndexDocValues$DocTermsIndexException(((t_DocTermsIndexDocValues$DocTermsIndexException *) arg)->object.this$));
            }
            static PyObject *t_DocTermsIndexDocValues$DocTermsIndexException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DocTermsIndexDocValues$DocTermsIndexException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DocTermsIndexDocValues$DocTermsIndexException_init_(t_DocTermsIndexDocValues$DocTermsIndexException *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::RuntimeException a1((jobject) NULL);
              DocTermsIndexDocValues$DocTermsIndexException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::lang::RuntimeException::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DocTermsIndexDocValues$DocTermsIndexException(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/xml/sax/helpers/DefaultHandler.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace xml {
    namespace sax {
      namespace helpers {

        ::java::lang::Class *DefaultHandler::class$ = NULL;
        jmethodID *DefaultHandler::mids$ = NULL;
        bool DefaultHandler::live$ = false;

        jclass DefaultHandler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/xml/sax/helpers/DefaultHandler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_characters_d5128be76a214037] = env->getMethodID(cls, "characters", "([CII)V");
            mids$[mid_endDocument_f2cc1bce94666404] = env->getMethodID(cls, "endDocument", "()V");
            mids$[mid_endElement_f05031826564616f] = env->getMethodID(cls, "endElement", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_endPrefixMapping_9fd2eb66a64e6f0f] = env->getMethodID(cls, "endPrefixMapping", "(Ljava/lang/String;)V");
            mids$[mid_ignorableWhitespace_d5128be76a214037] = env->getMethodID(cls, "ignorableWhitespace", "([CII)V");
            mids$[mid_notationDecl_f05031826564616f] = env->getMethodID(cls, "notationDecl", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_processingInstruction_15b72f6a44ff93f2] = env->getMethodID(cls, "processingInstruction", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_skippedEntity_9fd2eb66a64e6f0f] = env->getMethodID(cls, "skippedEntity", "(Ljava/lang/String;)V");
            mids$[mid_startDocument_f2cc1bce94666404] = env->getMethodID(cls, "startDocument", "()V");
            mids$[mid_startPrefixMapping_15b72f6a44ff93f2] = env->getMethodID(cls, "startPrefixMapping", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_unparsedEntityDecl_df9007a979db0c48] = env->getMethodID(cls, "unparsedEntityDecl", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DefaultHandler::DefaultHandler() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void DefaultHandler::characters(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_characters_d5128be76a214037], a0.this$, a1, a2);
        }

        void DefaultHandler::endDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_endDocument_f2cc1bce94666404]);
        }

        void DefaultHandler::endElement(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_endElement_f05031826564616f], a0.this$, a1.this$, a2.this$);
        }

        void DefaultHandler::endPrefixMapping(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_endPrefixMapping_9fd2eb66a64e6f0f], a0.this$);
        }

        void DefaultHandler::ignorableWhitespace(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_ignorableWhitespace_d5128be76a214037], a0.this$, a1, a2);
        }

        void DefaultHandler::notationDecl(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_notationDecl_f05031826564616f], a0.this$, a1.this$, a2.this$);
        }

        void DefaultHandler::processingInstruction(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_processingInstruction_15b72f6a44ff93f2], a0.this$, a1.this$);
        }

        void DefaultHandler::skippedEntity(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_skippedEntity_9fd2eb66a64e6f0f], a0.this$);
        }

        void DefaultHandler::startDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_startDocument_f2cc1bce94666404]);
        }

        void DefaultHandler::startPrefixMapping(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_startPrefixMapping_15b72f6a44ff93f2], a0.this$, a1.this$);
        }

        void DefaultHandler::unparsedEntityDecl(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_unparsedEntityDecl_df9007a979db0c48], a0.this$, a1.this$, a2.this$, a3.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace xml {
    namespace sax {
      namespace helpers {
        static PyObject *t_DefaultHandler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DefaultHandler_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DefaultHandler_init_(t_DefaultHandler *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DefaultHandler_characters(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_endDocument(t_DefaultHandler *self);
        static PyObject *t_DefaultHandler_endElement(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_endPrefixMapping(t_DefaultHandler *self, PyObject *arg);
        static PyObject *t_DefaultHandler_ignorableWhitespace(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_notationDecl(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_processingInstruction(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_skippedEntity(t_DefaultHandler *self, PyObject *arg);
        static PyObject *t_DefaultHandler_startDocument(t_DefaultHandler *self);
        static PyObject *t_DefaultHandler_startPrefixMapping(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_unparsedEntityDecl(t_DefaultHandler *self, PyObject *args);

        static PyMethodDef t_DefaultHandler__methods_[] = {
          DECLARE_METHOD(t_DefaultHandler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DefaultHandler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DefaultHandler, characters, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, endDocument, METH_NOARGS),
          DECLARE_METHOD(t_DefaultHandler, endElement, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, endPrefixMapping, METH_O),
          DECLARE_METHOD(t_DefaultHandler, ignorableWhitespace, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, notationDecl, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, processingInstruction, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, skippedEntity, METH_O),
          DECLARE_METHOD(t_DefaultHandler, startDocument, METH_NOARGS),
          DECLARE_METHOD(t_DefaultHandler, startPrefixMapping, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, unparsedEntityDecl, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DefaultHandler)[] = {
          { Py_tp_methods, t_DefaultHandler__methods_ },
          { Py_tp_init, (void *) t_DefaultHandler_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DefaultHandler)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DefaultHandler, t_DefaultHandler, DefaultHandler);

        void t_DefaultHandler::install(PyObject *module)
        {
          installType(&PY_TYPE(DefaultHandler), &PY_TYPE_DEF(DefaultHandler), module, "DefaultHandler", 0);
        }

        void t_DefaultHandler::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DefaultHandler), "class_", make_descriptor(DefaultHandler::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DefaultHandler), "wrapfn_", make_descriptor(t_DefaultHandler::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DefaultHandler), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DefaultHandler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DefaultHandler::initializeClass, 1)))
            return NULL;
          return t_DefaultHandler::wrap_Object(DefaultHandler(((t_DefaultHandler *) arg)->object.this$));
        }
        static PyObject *t_DefaultHandler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DefaultHandler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DefaultHandler_init_(t_DefaultHandler *self, PyObject *args, PyObject *kwds)
        {
          DefaultHandler object((jobject) NULL);

          INT_CALL(object = DefaultHandler());
          self->object = object;

          return 0;
        }

        static PyObject *t_DefaultHandler_characters(t_DefaultHandler *self, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.characters(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "characters", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_endDocument(t_DefaultHandler *self)
        {
          OBJ_CALL(self->object.endDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_DefaultHandler_endElement(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);

          if (!parseArgs(args, "sss", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.endElement(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "endElement", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_endPrefixMapping(t_DefaultHandler *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.endPrefixMapping(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "endPrefixMapping", arg);
          return NULL;
        }

        static PyObject *t_DefaultHandler_ignorableWhitespace(t_DefaultHandler *self, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.ignorableWhitespace(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "ignorableWhitespace", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_notationDecl(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);

          if (!parseArgs(args, "sss", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.notationDecl(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "notationDecl", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_processingInstruction(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.processingInstruction(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "processingInstruction", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_skippedEntity(t_DefaultHandler *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.skippedEntity(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "skippedEntity", arg);
          return NULL;
        }

        static PyObject *t_DefaultHandler_startDocument(t_DefaultHandler *self)
        {
          OBJ_CALL(self->object.startDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_DefaultHandler_startPrefixMapping(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.startPrefixMapping(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startPrefixMapping", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_unparsedEntityDecl(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::java::lang::String a3((jobject) NULL);

          if (!parseArgs(args, "ssss", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.unparsedEntityDecl(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "unparsedEntityDecl", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/RussianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *RussianStemmer::class$ = NULL;
        jmethodID *RussianStemmer::mids$ = NULL;
        bool RussianStemmer::live$ = false;

        jclass RussianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/RussianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RussianStemmer::RussianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean RussianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint RussianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean RussianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_RussianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RussianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RussianStemmer_init_(t_RussianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RussianStemmer_equals(t_RussianStemmer *self, PyObject *args);
        static PyObject *t_RussianStemmer_hashCode(t_RussianStemmer *self, PyObject *args);
        static PyObject *t_RussianStemmer_stem(t_RussianStemmer *self, PyObject *args);

        static PyMethodDef t_RussianStemmer__methods_[] = {
          DECLARE_METHOD(t_RussianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RussianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RussianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_RussianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_RussianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RussianStemmer)[] = {
          { Py_tp_methods, t_RussianStemmer__methods_ },
          { Py_tp_init, (void *) t_RussianStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RussianStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(RussianStemmer, t_RussianStemmer, RussianStemmer);

        void t_RussianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(RussianStemmer), &PY_TYPE_DEF(RussianStemmer), module, "RussianStemmer", 0);
        }

        void t_RussianStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RussianStemmer), "class_", make_descriptor(RussianStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RussianStemmer), "wrapfn_", make_descriptor(t_RussianStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RussianStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RussianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RussianStemmer::initializeClass, 1)))
            return NULL;
          return t_RussianStemmer::wrap_Object(RussianStemmer(((t_RussianStemmer *) arg)->object.this$));
        }
        static PyObject *t_RussianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RussianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RussianStemmer_init_(t_RussianStemmer *self, PyObject *args, PyObject *kwds)
        {
          RussianStemmer object((jobject) NULL);

          INT_CALL(object = RussianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_RussianStemmer_equals(t_RussianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(RussianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_RussianStemmer_hashCode(t_RussianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(RussianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_RussianStemmer_stem(t_RussianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(RussianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/LengthGoalBreakIterator.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/uhighlight/LengthGoalBreakIterator.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *LengthGoalBreakIterator::class$ = NULL;
          jmethodID *LengthGoalBreakIterator::mids$ = NULL;
          bool LengthGoalBreakIterator::live$ = false;

          jclass LengthGoalBreakIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/LengthGoalBreakIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_clone_d6bcd06f3102c4d9] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
              mids$[mid_createClosestToLength_614ce20164853fca] = env->getStaticMethodID(cls, "createClosestToLength", "(Ljava/text/BreakIterator;I)Lorg/apache/lucene/search/uhighlight/LengthGoalBreakIterator;");
              mids$[mid_createClosestToLength_2c3f1773d854ab4a] = env->getStaticMethodID(cls, "createClosestToLength", "(Ljava/text/BreakIterator;IF)Lorg/apache/lucene/search/uhighlight/LengthGoalBreakIterator;");
              mids$[mid_createMinLength_614ce20164853fca] = env->getStaticMethodID(cls, "createMinLength", "(Ljava/text/BreakIterator;I)Lorg/apache/lucene/search/uhighlight/LengthGoalBreakIterator;");
              mids$[mid_createMinLength_2c3f1773d854ab4a] = env->getStaticMethodID(cls, "createMinLength", "(Ljava/text/BreakIterator;IF)Lorg/apache/lucene/search/uhighlight/LengthGoalBreakIterator;");
              mids$[mid_current_9972fcc56b44e79d] = env->getMethodID(cls, "current", "()I");
              mids$[mid_first_9972fcc56b44e79d] = env->getMethodID(cls, "first", "()I");
              mids$[mid_following_1e143afe1894d213] = env->getMethodID(cls, "following", "(I)I");
              mids$[mid_isBoundary_a1d30e1ee40c89a2] = env->getMethodID(cls, "isBoundary", "(I)Z");
              mids$[mid_last_9972fcc56b44e79d] = env->getMethodID(cls, "last", "()I");
              mids$[mid_next_9972fcc56b44e79d] = env->getMethodID(cls, "next", "()I");
              mids$[mid_next_1e143afe1894d213] = env->getMethodID(cls, "next", "(I)I");
              mids$[mid_preceding_1e143afe1894d213] = env->getMethodID(cls, "preceding", "(I)I");
              mids$[mid_previous_9972fcc56b44e79d] = env->getMethodID(cls, "previous", "()I");
              mids$[mid_setText_9fd2eb66a64e6f0f] = env->getMethodID(cls, "setText", "(Ljava/lang/String;)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Object LengthGoalBreakIterator::clone() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_d6bcd06f3102c4d9]));
          }

          LengthGoalBreakIterator LengthGoalBreakIterator::createClosestToLength(const ::java::text::BreakIterator & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return LengthGoalBreakIterator(env->callStaticObjectMethod(cls, mids$[mid_createClosestToLength_614ce20164853fca], a0.this$, a1));
          }

          LengthGoalBreakIterator LengthGoalBreakIterator::createClosestToLength(const ::java::text::BreakIterator & a0, jint a1, jfloat a2)
          {
            jclass cls = env->getClass(initializeClass);
            return LengthGoalBreakIterator(env->callStaticObjectMethod(cls, mids$[mid_createClosestToLength_2c3f1773d854ab4a], a0.this$, a1, a2));
          }

          LengthGoalBreakIterator LengthGoalBreakIterator::createMinLength(const ::java::text::BreakIterator & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return LengthGoalBreakIterator(env->callStaticObjectMethod(cls, mids$[mid_createMinLength_614ce20164853fca], a0.this$, a1));
          }

          LengthGoalBreakIterator LengthGoalBreakIterator::createMinLength(const ::java::text::BreakIterator & a0, jint a1, jfloat a2)
          {
            jclass cls = env->getClass(initializeClass);
            return LengthGoalBreakIterator(env->callStaticObjectMethod(cls, mids$[mid_createMinLength_2c3f1773d854ab4a], a0.this$, a1, a2));
          }

          jint LengthGoalBreakIterator::current() const
          {
            return env->callIntMethod(this$, mids$[mid_current_9972fcc56b44e79d]);
          }

          jint LengthGoalBreakIterator::first() const
          {
            return env->callIntMethod(this$, mids$[mid_first_9972fcc56b44e79d]);
          }

          jint LengthGoalBreakIterator::following(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_following_1e143afe1894d213], a0);
          }

          jboolean LengthGoalBreakIterator::isBoundary(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isBoundary_a1d30e1ee40c89a2], a0);
          }

          jint LengthGoalBreakIterator::last() const
          {
            return env->callIntMethod(this$, mids$[mid_last_9972fcc56b44e79d]);
          }

          jint LengthGoalBreakIterator::next() const
          {
            return env->callIntMethod(this$, mids$[mid_next_9972fcc56b44e79d]);
          }

          jint LengthGoalBreakIterator::next(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_next_1e143afe1894d213], a0);
          }

          jint LengthGoalBreakIterator::preceding(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_preceding_1e143afe1894d213], a0);
          }

          jint LengthGoalBreakIterator::previous() const
          {
            return env->callIntMethod(this$, mids$[mid_previous_9972fcc56b44e79d]);
          }

          void LengthGoalBreakIterator::setText(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setText_9fd2eb66a64e6f0f], a0.this$);
          }

          ::java::lang::String LengthGoalBreakIterator::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_LengthGoalBreakIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LengthGoalBreakIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LengthGoalBreakIterator_clone(t_LengthGoalBreakIterator *self, PyObject *args);
          static PyObject *t_LengthGoalBreakIterator_createClosestToLength(PyTypeObject *type, PyObject *args);
          static PyObject *t_LengthGoalBreakIterator_createMinLength(PyTypeObject *type, PyObject *args);
          static PyObject *t_LengthGoalBreakIterator_current(t_LengthGoalBreakIterator *self, PyObject *args);
          static PyObject *t_LengthGoalBreakIterator_first(t_LengthGoalBreakIterator *self, PyObject *args);
          static PyObject *t_LengthGoalBreakIterator_following(t_LengthGoalBreakIterator *self, PyObject *args);
          static PyObject *t_LengthGoalBreakIterator_isBoundary(t_LengthGoalBreakIterator *self, PyObject *args);
          static PyObject *t_LengthGoalBreakIterator_last(t_LengthGoalBreakIterator *self, PyObject *args);
          static PyObject *t_LengthGoalBreakIterator_next(t_LengthGoalBreakIterator *self, PyObject *args);
          static PyObject *t_LengthGoalBreakIterator_preceding(t_LengthGoalBreakIterator *self, PyObject *args);
          static PyObject *t_LengthGoalBreakIterator_previous(t_LengthGoalBreakIterator *self, PyObject *args);
          static PyObject *t_LengthGoalBreakIterator_setText(t_LengthGoalBreakIterator *self, PyObject *args);
          static PyObject *t_LengthGoalBreakIterator_toString(t_LengthGoalBreakIterator *self, PyObject *args);
          static int t_LengthGoalBreakIterator_set__text(t_LengthGoalBreakIterator *self, PyObject *arg, void *data);
          static PyGetSetDef t_LengthGoalBreakIterator__fields_[] = {
            DECLARE_SET_FIELD(t_LengthGoalBreakIterator, text),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LengthGoalBreakIterator__methods_[] = {
            DECLARE_METHOD(t_LengthGoalBreakIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthGoalBreakIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthGoalBreakIterator, clone, METH_VARARGS),
            DECLARE_METHOD(t_LengthGoalBreakIterator, createClosestToLength, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_LengthGoalBreakIterator, createMinLength, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_LengthGoalBreakIterator, current, METH_VARARGS),
            DECLARE_METHOD(t_LengthGoalBreakIterator, first, METH_VARARGS),
            DECLARE_METHOD(t_LengthGoalBreakIterator, following, METH_VARARGS),
            DECLARE_METHOD(t_LengthGoalBreakIterator, isBoundary, METH_VARARGS),
            DECLARE_METHOD(t_LengthGoalBreakIterator, last, METH_VARARGS),
            DECLARE_METHOD(t_LengthGoalBreakIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_LengthGoalBreakIterator, preceding, METH_VARARGS),
            DECLARE_METHOD(t_LengthGoalBreakIterator, previous, METH_VARARGS),
            DECLARE_METHOD(t_LengthGoalBreakIterator, setText, METH_VARARGS),
            DECLARE_METHOD(t_LengthGoalBreakIterator, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LengthGoalBreakIterator)[] = {
            { Py_tp_methods, t_LengthGoalBreakIterator__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_LengthGoalBreakIterator__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LengthGoalBreakIterator)[] = {
            &PY_TYPE_DEF(::java::text::BreakIterator),
            NULL
          };

          DEFINE_TYPE(LengthGoalBreakIterator, t_LengthGoalBreakIterator, LengthGoalBreakIterator);

          void t_LengthGoalBreakIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(LengthGoalBreakIterator), &PY_TYPE_DEF(LengthGoalBreakIterator), module, "LengthGoalBreakIterator", 0);
          }

          void t_LengthGoalBreakIterator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LengthGoalBreakIterator), "class_", make_descriptor(LengthGoalBreakIterator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LengthGoalBreakIterator), "wrapfn_", make_descriptor(t_LengthGoalBreakIterator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LengthGoalBreakIterator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LengthGoalBreakIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LengthGoalBreakIterator::initializeClass, 1)))
              return NULL;
            return t_LengthGoalBreakIterator::wrap_Object(LengthGoalBreakIterator(((t_LengthGoalBreakIterator *) arg)->object.this$));
          }
          static PyObject *t_LengthGoalBreakIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LengthGoalBreakIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_LengthGoalBreakIterator_clone(t_LengthGoalBreakIterator *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(LengthGoalBreakIterator), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_LengthGoalBreakIterator_createClosestToLength(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::text::BreakIterator a0((jobject) NULL);
                jint a1;
                LengthGoalBreakIterator result((jobject) NULL);

                if (!parseArgs(args, "kI", ::java::text::BreakIterator::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::uhighlight::LengthGoalBreakIterator::createClosestToLength(a0, a1));
                  return t_LengthGoalBreakIterator::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::text::BreakIterator a0((jobject) NULL);
                jint a1;
                jfloat a2;
                LengthGoalBreakIterator result((jobject) NULL);

                if (!parseArgs(args, "kIF", ::java::text::BreakIterator::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::uhighlight::LengthGoalBreakIterator::createClosestToLength(a0, a1, a2));
                  return t_LengthGoalBreakIterator::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "createClosestToLength", args);
            return NULL;
          }

          static PyObject *t_LengthGoalBreakIterator_createMinLength(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::text::BreakIterator a0((jobject) NULL);
                jint a1;
                LengthGoalBreakIterator result((jobject) NULL);

                if (!parseArgs(args, "kI", ::java::text::BreakIterator::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::uhighlight::LengthGoalBreakIterator::createMinLength(a0, a1));
                  return t_LengthGoalBreakIterator::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::text::BreakIterator a0((jobject) NULL);
                jint a1;
                jfloat a2;
                LengthGoalBreakIterator result((jobject) NULL);

                if (!parseArgs(args, "kIF", ::java::text::BreakIterator::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::uhighlight::LengthGoalBreakIterator::createMinLength(a0, a1, a2));
                  return t_LengthGoalBreakIterator::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "createMinLength", args);
            return NULL;
          }

          static PyObject *t_LengthGoalBreakIterator_current(t_LengthGoalBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.current());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(LengthGoalBreakIterator), (PyObject *) self, "current", args, 2);
          }

          static PyObject *t_LengthGoalBreakIterator_first(t_LengthGoalBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.first());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(LengthGoalBreakIterator), (PyObject *) self, "first", args, 2);
          }

          static PyObject *t_LengthGoalBreakIterator_following(t_LengthGoalBreakIterator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.following(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(LengthGoalBreakIterator), (PyObject *) self, "following", args, 2);
          }

          static PyObject *t_LengthGoalBreakIterator_isBoundary(t_LengthGoalBreakIterator *self, PyObject *args)
          {
            jint a0;
            jboolean result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.isBoundary(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(LengthGoalBreakIterator), (PyObject *) self, "isBoundary", args, 2);
          }

          static PyObject *t_LengthGoalBreakIterator_last(t_LengthGoalBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.last());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(LengthGoalBreakIterator), (PyObject *) self, "last", args, 2);
          }

          static PyObject *t_LengthGoalBreakIterator_next(t_LengthGoalBreakIterator *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.next());
                return PyLong_FromLong((long) result);
              }
              break;
             case 1:
              {
                jint a0;
                jint result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.next(a0));
                  return PyLong_FromLong((long) result);
                }
              }
            }

            return callSuper(PY_TYPE(LengthGoalBreakIterator), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_LengthGoalBreakIterator_preceding(t_LengthGoalBreakIterator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.preceding(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(LengthGoalBreakIterator), (PyObject *) self, "preceding", args, 2);
          }

          static PyObject *t_LengthGoalBreakIterator_previous(t_LengthGoalBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.previous());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(LengthGoalBreakIterator), (PyObject *) self, "previous", args, 2);
          }

          static PyObject *t_LengthGoalBreakIterator_setText(t_LengthGoalBreakIterator *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(self->object.setText(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(LengthGoalBreakIterator), (PyObject *) self, "setText", args, 2);
          }

          static PyObject *t_LengthGoalBreakIterator_toString(t_LengthGoalBreakIterator *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(LengthGoalBreakIterator), (PyObject *) self, "toString", args, 2);
          }

          static int t_LengthGoalBreakIterator_set__text(t_LengthGoalBreakIterator *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setText(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "text", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocValuesStatsCollector.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/DocValuesStats.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/LeafCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Collector.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocValuesStatsCollector::class$ = NULL;
        jmethodID *DocValuesStatsCollector::mids$ = NULL;
        bool DocValuesStatsCollector::live$ = false;

        jclass DocValuesStatsCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocValuesStatsCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_3a3bd2d6b67bb0d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DocValuesStats;)V");
            mids$[mid_getLeafCollector_d5dbc8c30b21e920] = env->getMethodID(cls, "getLeafCollector", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/LeafCollector;");
            mids$[mid_scoreMode_8a35254b82ee8276] = env->getMethodID(cls, "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocValuesStatsCollector::DocValuesStatsCollector(const ::org::apache::lucene::search::DocValuesStats & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3a3bd2d6b67bb0d3, a0.this$)) {}

        ::org::apache::lucene::search::LeafCollector DocValuesStatsCollector::getLeafCollector(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::search::LeafCollector(env->callObjectMethod(this$, mids$[mid_getLeafCollector_d5dbc8c30b21e920], a0.this$));
        }

        ::org::apache::lucene::search::ScoreMode DocValuesStatsCollector::scoreMode() const
        {
          return ::org::apache::lucene::search::ScoreMode(env->callObjectMethod(this$, mids$[mid_scoreMode_8a35254b82ee8276]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocValuesStatsCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesStatsCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocValuesStatsCollector_init_(t_DocValuesStatsCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocValuesStatsCollector_getLeafCollector(t_DocValuesStatsCollector *self, PyObject *arg);
        static PyObject *t_DocValuesStatsCollector_scoreMode(t_DocValuesStatsCollector *self);

        static PyMethodDef t_DocValuesStatsCollector__methods_[] = {
          DECLARE_METHOD(t_DocValuesStatsCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesStatsCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesStatsCollector, getLeafCollector, METH_O),
          DECLARE_METHOD(t_DocValuesStatsCollector, scoreMode, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocValuesStatsCollector)[] = {
          { Py_tp_methods, t_DocValuesStatsCollector__methods_ },
          { Py_tp_init, (void *) t_DocValuesStatsCollector_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocValuesStatsCollector)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DocValuesStatsCollector, t_DocValuesStatsCollector, DocValuesStatsCollector);

        void t_DocValuesStatsCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesStatsCollector), &PY_TYPE_DEF(DocValuesStatsCollector), module, "DocValuesStatsCollector", 0);
        }

        void t_DocValuesStatsCollector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStatsCollector), "class_", make_descriptor(DocValuesStatsCollector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStatsCollector), "wrapfn_", make_descriptor(t_DocValuesStatsCollector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStatsCollector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesStatsCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesStatsCollector::initializeClass, 1)))
            return NULL;
          return t_DocValuesStatsCollector::wrap_Object(DocValuesStatsCollector(((t_DocValuesStatsCollector *) arg)->object.this$));
        }
        static PyObject *t_DocValuesStatsCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesStatsCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocValuesStatsCollector_init_(t_DocValuesStatsCollector *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::DocValuesStats a0((jobject) NULL);
          PyTypeObject **p0;
          DocValuesStatsCollector object((jobject) NULL);

          if (!parseArgs(args, "K", ::org::apache::lucene::search::DocValuesStats::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_DocValuesStats::parameters_))
          {
            INT_CALL(object = DocValuesStatsCollector(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocValuesStatsCollector_getLeafCollector(t_DocValuesStatsCollector *self, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::LeafCollector result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getLeafCollector(a0));
            return ::org::apache::lucene::search::t_LeafCollector::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getLeafCollector", arg);
          return NULL;
        }

        static PyObject *t_DocValuesStatsCollector_scoreMode(t_DocValuesStatsCollector *self)
        {
          ::org::apache::lucene::search::ScoreMode result((jobject) NULL);
          OBJ_CALL(result = self->object.scoreMode());
          return ::org::apache::lucene::search::t_ScoreMode::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DocFreqValueSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DocFreqValueSource::class$ = NULL;
            jmethodID *DocFreqValueSource::mids$ = NULL;
            bool DocFreqValueSource::live$ = false;

            jclass DocFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DocFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1329b9cc98226e6f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_createWeight_69d322032c5ae159] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DocFreqValueSource::DocFreqValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_1329b9cc98226e6f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            void DocFreqValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_69d322032c5ae159], a0.this$, a1.this$);
            }

            ::java::lang::String DocFreqValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean DocFreqValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues DocFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint DocFreqValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }

            ::java::lang::String DocFreqValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_db9b55ba01e03e4b]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DocFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DocFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DocFreqValueSource_init_(t_DocFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DocFreqValueSource_createWeight(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_description(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_equals(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_getValues(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_hashCode(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_name(t_DocFreqValueSource *self);

            static PyMethodDef t_DocFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_DocFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocFreqValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(DocFreqValueSource)[] = {
              { Py_tp_methods, t_DocFreqValueSource__methods_ },
              { Py_tp_init, (void *) t_DocFreqValueSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(DocFreqValueSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::ValueSource),
              NULL
            };

            DEFINE_TYPE(DocFreqValueSource, t_DocFreqValueSource, DocFreqValueSource);

            void t_DocFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(DocFreqValueSource), &PY_TYPE_DEF(DocFreqValueSource), module, "DocFreqValueSource", 0);
            }

            void t_DocFreqValueSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(DocFreqValueSource), "class_", make_descriptor(DocFreqValueSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DocFreqValueSource), "wrapfn_", make_descriptor(t_DocFreqValueSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DocFreqValueSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DocFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DocFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_DocFreqValueSource::wrap_Object(DocFreqValueSource(((t_DocFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_DocFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DocFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DocFreqValueSource_init_(t_DocFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              DocFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = DocFreqValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DocFreqValueSource_createWeight(t_DocFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(DocFreqValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_DocFreqValueSource_description(t_DocFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(DocFreqValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_DocFreqValueSource_equals(t_DocFreqValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(DocFreqValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_DocFreqValueSource_getValues(t_DocFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(DocFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_DocFreqValueSource_hashCode(t_DocFreqValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(DocFreqValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_DocFreqValueSource_name(t_DocFreqValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLS.h"
#include "java/lang/String.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {

            ::java::lang::Class *NLS::class$ = NULL;
            jmethodID *NLS::mids$ = NULL;
            bool NLS::live$ = false;

            jclass NLS::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/messages/NLS");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getLocalizedMessage_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "getLocalizedMessage", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_8fd1aa183c04cdf5] = env->getStaticMethodID(cls, "getLocalizedMessage", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_19cc29e58014d959] = env->getStaticMethodID(cls, "getLocalizedMessage", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_7665e6b05f3f775d] = env->getStaticMethodID(cls, "getLocalizedMessage", "(Ljava/lang/String;Ljava/util/Locale;[Ljava/lang/Object;)Ljava/lang/String;");
                mids$[mid_initializeMessages_84ba362ad402fd09] = env->getStaticMethodID(cls, "initializeMessages", "(Ljava/lang/String;Ljava/lang/Class;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::lang::String NLS::getLocalizedMessage(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLocalizedMessage_9bfa75c9f141b67f], a0.this$));
            }

            ::java::lang::String NLS::getLocalizedMessage(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLocalizedMessage_8fd1aa183c04cdf5], a0.this$, a1.this$));
            }

            ::java::lang::String NLS::getLocalizedMessage(const ::java::lang::String & a0, const ::java::util::Locale & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLocalizedMessage_19cc29e58014d959], a0.this$, a1.this$));
            }

            ::java::lang::String NLS::getLocalizedMessage(const ::java::lang::String & a0, const ::java::util::Locale & a1, const JArray< ::java::lang::Object > & a2)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLocalizedMessage_7665e6b05f3f775d], a0.this$, a1.this$, a2.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {
            static PyObject *t_NLS_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NLS_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NLS_getLocalizedMessage(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_NLS__methods_[] = {
              DECLARE_METHOD(t_NLS, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NLS, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NLS, getLocalizedMessage, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(NLS)[] = {
              { Py_tp_methods, t_NLS__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(NLS)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(NLS, t_NLS, NLS);

            void t_NLS::install(PyObject *module)
            {
              installType(&PY_TYPE(NLS), &PY_TYPE_DEF(NLS), module, "NLS", 0);
            }

            void t_NLS::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(NLS), "class_", make_descriptor(NLS::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(NLS), "wrapfn_", make_descriptor(t_NLS::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(NLS), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NLS_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NLS::initializeClass, 1)))
                return NULL;
              return t_NLS::wrap_Object(NLS(((t_NLS *) arg)->object.this$));
            }
            static PyObject *t_NLS_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NLS::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_NLS_getLocalizedMessage(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::messages::NLS::getLocalizedMessage(a0));
                    return j2p(result);
                  }
                }
                break;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  JArray< ::java::lang::Object > a1((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "s[o", &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::messages::NLS::getLocalizedMessage(a0, a1));
                    return j2p(result);
                  }
                }
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::util::Locale a1((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "sk", ::java::util::Locale::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::messages::NLS::getLocalizedMessage(a0, a1));
                    return j2p(result);
                  }
                }
                break;
               case 3:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::util::Locale a1((jobject) NULL);
                  JArray< ::java::lang::Object > a2((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "sk[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::messages::NLS::getLocalizedMessage(a0, a1, a2));
                    return j2p(result);
                  }
                }
              }

              PyErr_SetArgsError(type, "getLocalizedMessage", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$PrecedenceContext.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/antlr/v4/runtime/Token.h"
#include "org/antlr/v4/runtime/atn/ParserATNSimulator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$PrecedenceContext::class$ = NULL;
          jmethodID *JavascriptParser$PrecedenceContext::mids$ = NULL;
          bool JavascriptParser$PrecedenceContext::live$ = false;

          jclass JavascriptParser$PrecedenceContext::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$PrecedenceContext");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5b630188893587b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;)V");
              mids$[mid_expression_c790b383f10157ae] = env->getMethodID(cls, "expression", "()Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$PrecedenceContext::JavascriptParser$PrecedenceContext(const ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext & a0) : ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->newObject(initializeClass, &mids$, mid_init$_5b630188893587b5, a0.this$)) {}

          ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext JavascriptParser$PrecedenceContext::expression() const
          {
            return ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->callObjectMethod(this$, mids$[mid_expression_c790b383f10157ae]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$PrecedenceContext_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$PrecedenceContext_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$PrecedenceContext_of_(t_JavascriptParser$PrecedenceContext *self, PyObject *args);
          static int t_JavascriptParser$PrecedenceContext_init_(t_JavascriptParser$PrecedenceContext *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JavascriptParser$PrecedenceContext_expression(t_JavascriptParser$PrecedenceContext *self);
          static PyObject *t_JavascriptParser$PrecedenceContext_get__parameters_(t_JavascriptParser$PrecedenceContext *self, void *data);
          static PyGetSetDef t_JavascriptParser$PrecedenceContext__fields_[] = {
            DECLARE_GET_FIELD(t_JavascriptParser$PrecedenceContext, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JavascriptParser$PrecedenceContext__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$PrecedenceContext, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$PrecedenceContext, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$PrecedenceContext, of_, METH_VARARGS),
            DECLARE_METHOD(t_JavascriptParser$PrecedenceContext, expression, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JavascriptParser$PrecedenceContext)[] = {
            { Py_tp_methods, t_JavascriptParser$PrecedenceContext__methods_ },
            { Py_tp_init, (void *) t_JavascriptParser$PrecedenceContext_init_ },
            { Py_tp_getset, t_JavascriptParser$PrecedenceContext__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JavascriptParser$PrecedenceContext)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext),
            NULL
          };

          DEFINE_TYPE(JavascriptParser$PrecedenceContext, t_JavascriptParser$PrecedenceContext, JavascriptParser$PrecedenceContext);
          PyObject *t_JavascriptParser$PrecedenceContext::wrap_Object(const JavascriptParser$PrecedenceContext& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$PrecedenceContext::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$PrecedenceContext *self = (t_JavascriptParser$PrecedenceContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_JavascriptParser$PrecedenceContext::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$PrecedenceContext::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$PrecedenceContext *self = (t_JavascriptParser$PrecedenceContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_JavascriptParser$PrecedenceContext::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$PrecedenceContext), &PY_TYPE_DEF(JavascriptParser$PrecedenceContext), module, "JavascriptParser$PrecedenceContext", 0);
          }

          void t_JavascriptParser$PrecedenceContext::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$PrecedenceContext), "class_", make_descriptor(JavascriptParser$PrecedenceContext::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$PrecedenceContext), "wrapfn_", make_descriptor(t_JavascriptParser$PrecedenceContext::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$PrecedenceContext), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$PrecedenceContext_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$PrecedenceContext::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$PrecedenceContext::wrap_Object(JavascriptParser$PrecedenceContext(((t_JavascriptParser$PrecedenceContext *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$PrecedenceContext_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$PrecedenceContext::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptParser$PrecedenceContext_of_(t_JavascriptParser$PrecedenceContext *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_JavascriptParser$PrecedenceContext_init_(t_JavascriptParser$PrecedenceContext *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext a0((jobject) NULL);
            PyTypeObject **p0;
            JavascriptParser$PrecedenceContext object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext::initializeClass, &a0, &p0, ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::parameters_))
            {
              INT_CALL(object = JavascriptParser$PrecedenceContext(a0));
              self->object = object;
              self->parameters[0] = ::org::antlr::v4::runtime::PY_TYPE(Token);
              self->parameters[1] = ::org::antlr::v4::runtime::atn::PY_TYPE(ParserATNSimulator);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JavascriptParser$PrecedenceContext_expression(t_JavascriptParser$PrecedenceContext *self)
          {
            ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext result((jobject) NULL);
            OBJ_CALL(result = self->object.expression());
            return ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::wrap_Object(result);
          }
          static PyObject *t_JavascriptParser$PrecedenceContext_get__parameters_(t_JavascriptParser$PrecedenceContext *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SynonymQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SynonymQuery::class$ = NULL;
        jmethodID *SynonymQuery::mids$ = NULL;
        bool SynonymQuery::live$ = false;

        jclass SynonymQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SynonymQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_370570972a1dd4b8] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/Term;)V");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getTerms_49ec78390f08338a] = env->getMethodID(cls, "getTerms", "()Ljava/util/List;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SynonymQuery::SynonymQuery(const JArray< ::org::apache::lucene::index::Term > & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_370570972a1dd4b8, a0.this$)) {}

        ::org::apache::lucene::search::Weight SynonymQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean SynonymQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::java::util::List SynonymQuery::getTerms() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTerms_49ec78390f08338a]));
        }

        jint SynonymQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::Query SynonymQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
        }

        ::java::lang::String SynonymQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void SynonymQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/SynonymQuery$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SynonymQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SynonymQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SynonymQuery_init_(t_SynonymQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SynonymQuery_createWeight(t_SynonymQuery *self, PyObject *args);
        static PyObject *t_SynonymQuery_equals(t_SynonymQuery *self, PyObject *args);
        static PyObject *t_SynonymQuery_getTerms(t_SynonymQuery *self);
        static PyObject *t_SynonymQuery_hashCode(t_SynonymQuery *self, PyObject *args);
        static PyObject *t_SynonymQuery_rewrite(t_SynonymQuery *self, PyObject *args);
        static PyObject *t_SynonymQuery_toString(t_SynonymQuery *self, PyObject *args);
        static PyObject *t_SynonymQuery_visit(t_SynonymQuery *self, PyObject *args);
        static PyObject *t_SynonymQuery_get__terms(t_SynonymQuery *self, void *data);
        static PyGetSetDef t_SynonymQuery__fields_[] = {
          DECLARE_GET_FIELD(t_SynonymQuery, terms),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SynonymQuery__methods_[] = {
          DECLARE_METHOD(t_SynonymQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SynonymQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SynonymQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_SynonymQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_SynonymQuery, getTerms, METH_NOARGS),
          DECLARE_METHOD(t_SynonymQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SynonymQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_SynonymQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_SynonymQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SynonymQuery)[] = {
          { Py_tp_methods, t_SynonymQuery__methods_ },
          { Py_tp_init, (void *) t_SynonymQuery_init_ },
          { Py_tp_getset, t_SynonymQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SynonymQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(SynonymQuery, t_SynonymQuery, SynonymQuery);

        void t_SynonymQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(SynonymQuery), &PY_TYPE_DEF(SynonymQuery), module, "SynonymQuery", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymQuery), "Builder", make_descriptor(&PY_TYPE_DEF(SynonymQuery$Builder)));
        }

        void t_SynonymQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymQuery), "class_", make_descriptor(SynonymQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymQuery), "wrapfn_", make_descriptor(t_SynonymQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SynonymQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SynonymQuery::initializeClass, 1)))
            return NULL;
          return t_SynonymQuery::wrap_Object(SynonymQuery(((t_SynonymQuery *) arg)->object.this$));
        }
        static PyObject *t_SynonymQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SynonymQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SynonymQuery_init_(t_SynonymQuery *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);
          SynonymQuery object((jobject) NULL);

          if (!parseArgs(args, "[k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            INT_CALL(object = SynonymQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SynonymQuery_createWeight(t_SynonymQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SynonymQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_SynonymQuery_equals(t_SynonymQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(SynonymQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SynonymQuery_getTerms(t_SynonymQuery *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerms());
          return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(Term));
        }

        static PyObject *t_SynonymQuery_hashCode(t_SynonymQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SynonymQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SynonymQuery_rewrite(t_SynonymQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SynonymQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_SynonymQuery_toString(t_SynonymQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(SynonymQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SynonymQuery_visit(t_SynonymQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(SynonymQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_SynonymQuery_get__terms(t_SynonymQuery *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerms());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/DateRecognizerFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/text/DateFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *DateRecognizerFilterFactory::class$ = NULL;
          jmethodID *DateRecognizerFilterFactory::mids$ = NULL;
          bool DateRecognizerFilterFactory::live$ = false;
          ::java::lang::String *DateRecognizerFilterFactory::DATE_PATTERN = NULL;
          ::java::lang::String *DateRecognizerFilterFactory::LOCALE = NULL;
          ::java::lang::String *DateRecognizerFilterFactory::NAME = NULL;

          jclass DateRecognizerFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/DateRecognizerFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getDataFormat_0d08d070ecd6dd28] = env->getMethodID(cls, "getDataFormat", "(Ljava/lang/String;)Ljava/text/DateFormat;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DATE_PATTERN = new ::java::lang::String(env->getStaticObjectField(cls, "DATE_PATTERN", "Ljava/lang/String;"));
              LOCALE = new ::java::lang::String(env->getStaticObjectField(cls, "LOCALE", "Ljava/lang/String;"));
              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DateRecognizerFilterFactory::DateRecognizerFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream DateRecognizerFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::java::text::DateFormat DateRecognizerFilterFactory::getDataFormat(const ::java::lang::String & a0) const
          {
            return ::java::text::DateFormat(env->callObjectMethod(this$, mids$[mid_getDataFormat_0d08d070ecd6dd28], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_DateRecognizerFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DateRecognizerFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DateRecognizerFilterFactory_init_(t_DateRecognizerFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DateRecognizerFilterFactory_create(t_DateRecognizerFilterFactory *self, PyObject *args);
          static PyObject *t_DateRecognizerFilterFactory_getDataFormat(t_DateRecognizerFilterFactory *self, PyObject *arg);

          static PyMethodDef t_DateRecognizerFilterFactory__methods_[] = {
            DECLARE_METHOD(t_DateRecognizerFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DateRecognizerFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DateRecognizerFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_DateRecognizerFilterFactory, getDataFormat, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DateRecognizerFilterFactory)[] = {
            { Py_tp_methods, t_DateRecognizerFilterFactory__methods_ },
            { Py_tp_init, (void *) t_DateRecognizerFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DateRecognizerFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(DateRecognizerFilterFactory, t_DateRecognizerFilterFactory, DateRecognizerFilterFactory);

          void t_DateRecognizerFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(DateRecognizerFilterFactory), &PY_TYPE_DEF(DateRecognizerFilterFactory), module, "DateRecognizerFilterFactory", 0);
          }

          void t_DateRecognizerFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DateRecognizerFilterFactory), "class_", make_descriptor(DateRecognizerFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DateRecognizerFilterFactory), "wrapfn_", make_descriptor(t_DateRecognizerFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DateRecognizerFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(DateRecognizerFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(DateRecognizerFilterFactory), "DATE_PATTERN", make_descriptor(j2p(*DateRecognizerFilterFactory::DATE_PATTERN)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DateRecognizerFilterFactory), "LOCALE", make_descriptor(j2p(*DateRecognizerFilterFactory::LOCALE)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DateRecognizerFilterFactory), "NAME", make_descriptor(j2p(*DateRecognizerFilterFactory::NAME)));
          }

          static PyObject *t_DateRecognizerFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DateRecognizerFilterFactory::initializeClass, 1)))
              return NULL;
            return t_DateRecognizerFilterFactory::wrap_Object(DateRecognizerFilterFactory(((t_DateRecognizerFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_DateRecognizerFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DateRecognizerFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DateRecognizerFilterFactory_init_(t_DateRecognizerFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            DateRecognizerFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = DateRecognizerFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DateRecognizerFilterFactory_create(t_DateRecognizerFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DateRecognizerFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_DateRecognizerFilterFactory_getDataFormat(t_DateRecognizerFilterFactory *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::text::DateFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDataFormat(a0));
              return ::java::text::t_DateFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDataFormat", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingTermVectorsWriter::class$ = NULL;
          jmethodID *CompressingTermVectorsWriter::mids$ = NULL;
          bool CompressingTermVectorsWriter::live$ = false;

          jclass CompressingTermVectorsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_addPosition_fcc26e8860ce5755] = env->getMethodID(cls, "addPosition", "(IIILorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_addProx_6f7770ea4ff78a67] = env->getMethodID(cls, "addProx", "(ILorg/apache/lucene/store/DataInput;Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_8a63e70a8b43ee48] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
              mids$[mid_finishDocument_f2cc1bce94666404] = env->getMethodID(cls, "finishDocument", "()V");
              mids$[mid_finishField_f2cc1bce94666404] = env->getMethodID(cls, "finishField", "()V");
              mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
              mids$[mid_merge_6926471512b57791] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_startDocument_040c4cd0390c5aff] = env->getMethodID(cls, "startDocument", "(I)V");
              mids$[mid_startField_5f83540baaace30d] = env->getMethodID(cls, "startField", "(Lorg/apache/lucene/index/FieldInfo;IZZZ)V");
              mids$[mid_startTerm_327a6f4e8624d9f4] = env->getMethodID(cls, "startTerm", "(Lorg/apache/lucene/util/BytesRef;I)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void CompressingTermVectorsWriter::addPosition(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addPosition_fcc26e8860ce5755], a0, a1, a2, a3.this$);
          }

          void CompressingTermVectorsWriter::addProx(jint a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::store::DataInput & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addProx_6f7770ea4ff78a67], a0, a1.this$, a2.this$);
          }

          void CompressingTermVectorsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void CompressingTermVectorsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_finish_8a63e70a8b43ee48], a0.this$, a1);
          }

          void CompressingTermVectorsWriter::finishDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDocument_f2cc1bce94666404]);
          }

          void CompressingTermVectorsWriter::finishField() const
          {
            env->callVoidMethod(this$, mids$[mid_finishField_f2cc1bce94666404]);
          }

          ::java::util::Collection CompressingTermVectorsWriter::getChildResources() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
          }

          jint CompressingTermVectorsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_merge_6926471512b57791], a0.this$);
          }

          jlong CompressingTermVectorsWriter::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          void CompressingTermVectorsWriter::startDocument(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startDocument_040c4cd0390c5aff], a0);
          }

          void CompressingTermVectorsWriter::startField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1, jboolean a2, jboolean a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_startField_5f83540baaace30d], a0.this$, a1, a2, a3, a4);
          }

          void CompressingTermVectorsWriter::startTerm(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_startTerm_327a6f4e8624d9f4], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingTermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingTermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingTermVectorsWriter_addPosition(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_addProx(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_close(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_finish(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_finishDocument(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_finishField(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_getChildResources(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_merge(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_ramBytesUsed(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_startDocument(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_startField(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_startTerm(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_get__childResources(t_CompressingTermVectorsWriter *self, void *data);
          static PyGetSetDef t_CompressingTermVectorsWriter__fields_[] = {
            DECLARE_GET_FIELD(t_CompressingTermVectorsWriter, childResources),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CompressingTermVectorsWriter__methods_[] = {
            DECLARE_METHOD(t_CompressingTermVectorsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, addPosition, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, addProx, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, finishDocument, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, finishField, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, getChildResources, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, merge, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, startDocument, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, startField, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, startTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CompressingTermVectorsWriter)[] = {
            { Py_tp_methods, t_CompressingTermVectorsWriter__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_CompressingTermVectorsWriter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CompressingTermVectorsWriter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::TermVectorsWriter),
            NULL
          };

          DEFINE_TYPE(CompressingTermVectorsWriter, t_CompressingTermVectorsWriter, CompressingTermVectorsWriter);

          void t_CompressingTermVectorsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingTermVectorsWriter), &PY_TYPE_DEF(CompressingTermVectorsWriter), module, "CompressingTermVectorsWriter", 0);
          }

          void t_CompressingTermVectorsWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingTermVectorsWriter), "class_", make_descriptor(CompressingTermVectorsWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingTermVectorsWriter), "wrapfn_", make_descriptor(t_CompressingTermVectorsWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingTermVectorsWriter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingTermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingTermVectorsWriter::initializeClass, 1)))
              return NULL;
            return t_CompressingTermVectorsWriter::wrap_Object(CompressingTermVectorsWriter(((t_CompressingTermVectorsWriter *) arg)->object.this$));
          }
          static PyObject *t_CompressingTermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingTermVectorsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompressingTermVectorsWriter_addPosition(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "addPosition", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_addProx(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::store::DataInput a1((jobject) NULL);
            ::org::apache::lucene::store::DataInput a2((jobject) NULL);

            if (!parseArgs(args, "Ikk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.addProx(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "addProx", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_close(t_CompressingTermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_finish(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.finish(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "finish", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_finishDocument(t_CompressingTermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDocument());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "finishDocument", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_finishField(t_CompressingTermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishField());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "finishField", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_getChildResources(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
            }

            return callSuper(PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "getChildResources", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_merge(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::MergeState a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.merge(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_ramBytesUsed(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_startDocument(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.startDocument(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "startDocument", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_startField(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            jint a1;
            jboolean a2;
            jboolean a3;
            jboolean a4;

            if (!parseArgs(args, "kIZZZ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.startField(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "startField", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_startTerm(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.startTerm(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "startTerm", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_get__childResources(t_CompressingTermVectorsWriter *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getChildResources());
            return ::java::util::t_Collection::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiCollectorManager$Collectors$LeafCollectors.h"
#include "org/apache/lucene/search/Scorable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/LeafCollector.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiCollectorManager$Collectors$LeafCollectors::class$ = NULL;
        jmethodID *MultiCollectorManager$Collectors$LeafCollectors::mids$ = NULL;
        bool MultiCollectorManager$Collectors$LeafCollectors::live$ = false;

        jclass MultiCollectorManager$Collectors$LeafCollectors::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiCollectorManager$Collectors$LeafCollectors");

            mids$ = new jmethodID[max_mid];
            mids$[mid_collect_040c4cd0390c5aff] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void MultiCollectorManager$Collectors$LeafCollectors::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_040c4cd0390c5aff], a0);
        }

        void MultiCollectorManager$Collectors$LeafCollectors::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiCollectorManager$Collectors$LeafCollectors_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiCollectorManager$Collectors$LeafCollectors_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiCollectorManager$Collectors$LeafCollectors_collect(t_MultiCollectorManager$Collectors$LeafCollectors *self, PyObject *arg);
        static PyObject *t_MultiCollectorManager$Collectors$LeafCollectors_setScorer(t_MultiCollectorManager$Collectors$LeafCollectors *self, PyObject *arg);
        static int t_MultiCollectorManager$Collectors$LeafCollectors_set__scorer(t_MultiCollectorManager$Collectors$LeafCollectors *self, PyObject *arg, void *data);
        static PyGetSetDef t_MultiCollectorManager$Collectors$LeafCollectors__fields_[] = {
          DECLARE_SET_FIELD(t_MultiCollectorManager$Collectors$LeafCollectors, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiCollectorManager$Collectors$LeafCollectors__methods_[] = {
          DECLARE_METHOD(t_MultiCollectorManager$Collectors$LeafCollectors, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiCollectorManager$Collectors$LeafCollectors, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiCollectorManager$Collectors$LeafCollectors, collect, METH_O),
          DECLARE_METHOD(t_MultiCollectorManager$Collectors$LeafCollectors, setScorer, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiCollectorManager$Collectors$LeafCollectors)[] = {
          { Py_tp_methods, t_MultiCollectorManager$Collectors$LeafCollectors__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_MultiCollectorManager$Collectors$LeafCollectors__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiCollectorManager$Collectors$LeafCollectors)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MultiCollectorManager$Collectors$LeafCollectors, t_MultiCollectorManager$Collectors$LeafCollectors, MultiCollectorManager$Collectors$LeafCollectors);

        void t_MultiCollectorManager$Collectors$LeafCollectors::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiCollectorManager$Collectors$LeafCollectors), &PY_TYPE_DEF(MultiCollectorManager$Collectors$LeafCollectors), module, "MultiCollectorManager$Collectors$LeafCollectors", 0);
        }

        void t_MultiCollectorManager$Collectors$LeafCollectors::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiCollectorManager$Collectors$LeafCollectors), "class_", make_descriptor(MultiCollectorManager$Collectors$LeafCollectors::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiCollectorManager$Collectors$LeafCollectors), "wrapfn_", make_descriptor(t_MultiCollectorManager$Collectors$LeafCollectors::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiCollectorManager$Collectors$LeafCollectors), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiCollectorManager$Collectors$LeafCollectors_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiCollectorManager$Collectors$LeafCollectors::initializeClass, 1)))
            return NULL;
          return t_MultiCollectorManager$Collectors$LeafCollectors::wrap_Object(MultiCollectorManager$Collectors$LeafCollectors(((t_MultiCollectorManager$Collectors$LeafCollectors *) arg)->object.this$));
        }
        static PyObject *t_MultiCollectorManager$Collectors$LeafCollectors_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiCollectorManager$Collectors$LeafCollectors::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiCollectorManager$Collectors$LeafCollectors_collect(t_MultiCollectorManager$Collectors$LeafCollectors *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "collect", arg);
          return NULL;
        }

        static PyObject *t_MultiCollectorManager$Collectors$LeafCollectors_setScorer(t_MultiCollectorManager$Collectors$LeafCollectors *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Scorable a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setScorer", arg);
          return NULL;
        }

        static int t_MultiCollectorManager$Collectors$LeafCollectors_set__scorer(t_MultiCollectorManager$Collectors$LeafCollectors *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorable value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/FileDictionary.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *FileDictionary::class$ = NULL;
          jmethodID *FileDictionary::mids$ = NULL;
          bool FileDictionary::live$ = false;
          ::java::lang::String *FileDictionary::DEFAULT_FIELD_DELIMITER = NULL;

          jclass FileDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/FileDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a227449bf251faf1] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
              mids$[mid_init$_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_b11493ea796a78d0] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Ljava/lang/String;)V");
              mids$[mid_init$_86416ec7ad7cc524] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;Ljava/lang/String;)V");
              mids$[mid_getEntryIterator_58c408dcc07c62ab] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_FIELD_DELIMITER = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_FIELD_DELIMITER", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FileDictionary::FileDictionary(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a227449bf251faf1, a0.this$)) {}

          FileDictionary::FileDictionary(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b2f3c57f5e6eb3f2, a0.this$)) {}

          FileDictionary::FileDictionary(const ::java::io::InputStream & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b11493ea796a78d0, a0.this$, a1.this$)) {}

          FileDictionary::FileDictionary(const ::java::io::Reader & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_86416ec7ad7cc524, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator FileDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_58c408dcc07c62ab]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_FileDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FileDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FileDictionary_init_(t_FileDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FileDictionary_getEntryIterator(t_FileDictionary *self);
          static PyObject *t_FileDictionary_get__entryIterator(t_FileDictionary *self, void *data);
          static PyGetSetDef t_FileDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_FileDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FileDictionary__methods_[] = {
            DECLARE_METHOD(t_FileDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FileDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FileDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FileDictionary)[] = {
            { Py_tp_methods, t_FileDictionary__methods_ },
            { Py_tp_init, (void *) t_FileDictionary_init_ },
            { Py_tp_getset, t_FileDictionary__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FileDictionary)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FileDictionary, t_FileDictionary, FileDictionary);

          void t_FileDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(FileDictionary), &PY_TYPE_DEF(FileDictionary), module, "FileDictionary", 0);
          }

          void t_FileDictionary::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FileDictionary), "class_", make_descriptor(FileDictionary::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FileDictionary), "wrapfn_", make_descriptor(t_FileDictionary::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FileDictionary), "boxfn_", make_descriptor(boxObject));
            env->getClass(FileDictionary::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FileDictionary), "DEFAULT_FIELD_DELIMITER", make_descriptor(j2p(*FileDictionary::DEFAULT_FIELD_DELIMITER)));
          }

          static PyObject *t_FileDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FileDictionary::initializeClass, 1)))
              return NULL;
            return t_FileDictionary::wrap_Object(FileDictionary(((t_FileDictionary *) arg)->object.this$));
          }
          static PyObject *t_FileDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FileDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FileDictionary_init_(t_FileDictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::InputStream a0((jobject) NULL);
                FileDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  INT_CALL(object = FileDictionary(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                FileDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = FileDictionary(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::InputStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                FileDictionary object((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::InputStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FileDictionary(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                FileDictionary object((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FileDictionary(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FileDictionary_getEntryIterator(t_FileDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_FileDictionary_get__entryIterator(t_FileDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingTermVectorsFormat::class$ = NULL;
          jmethodID *CompressingTermVectorsFormat::mids$ = NULL;
          bool CompressingTermVectorsFormat::live$ = false;

          jclass CompressingTermVectorsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1bd7087d30e64209] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;III)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_vectorsReader_e8da19a02e97f6f0] = env->getMethodID(cls, "vectorsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsReader;");
              mids$[mid_vectorsWriter_0dc3e01ac1525114] = env->getMethodID(cls, "vectorsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsWriter;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingTermVectorsFormat::CompressingTermVectorsFormat(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::codecs::compressing::CompressionMode & a2, jint a3, jint a4, jint a5) : ::org::apache::lucene::codecs::TermVectorsFormat(env->newObject(initializeClass, &mids$, mid_init$_1bd7087d30e64209, a0.this$, a1.this$, a2.this$, a3, a4, a5)) {}

          ::java::lang::String CompressingTermVectorsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::codecs::TermVectorsReader CompressingTermVectorsFormat::vectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_vectorsReader_e8da19a02e97f6f0], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::TermVectorsWriter CompressingTermVectorsFormat::vectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::TermVectorsWriter(env->callObjectMethod(this$, mids$[mid_vectorsWriter_0dc3e01ac1525114], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingTermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingTermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingTermVectorsFormat_init_(t_CompressingTermVectorsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingTermVectorsFormat_toString(t_CompressingTermVectorsFormat *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsFormat_vectorsReader(t_CompressingTermVectorsFormat *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsFormat_vectorsWriter(t_CompressingTermVectorsFormat *self, PyObject *args);

          static PyMethodDef t_CompressingTermVectorsFormat__methods_[] = {
            DECLARE_METHOD(t_CompressingTermVectorsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsFormat, toString, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsFormat, vectorsReader, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsFormat, vectorsWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CompressingTermVectorsFormat)[] = {
            { Py_tp_methods, t_CompressingTermVectorsFormat__methods_ },
            { Py_tp_init, (void *) t_CompressingTermVectorsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CompressingTermVectorsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::TermVectorsFormat),
            NULL
          };

          DEFINE_TYPE(CompressingTermVectorsFormat, t_CompressingTermVectorsFormat, CompressingTermVectorsFormat);

          void t_CompressingTermVectorsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingTermVectorsFormat), &PY_TYPE_DEF(CompressingTermVectorsFormat), module, "CompressingTermVectorsFormat", 0);
          }

          void t_CompressingTermVectorsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingTermVectorsFormat), "class_", make_descriptor(CompressingTermVectorsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingTermVectorsFormat), "wrapfn_", make_descriptor(t_CompressingTermVectorsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingTermVectorsFormat), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingTermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingTermVectorsFormat::initializeClass, 1)))
              return NULL;
            return t_CompressingTermVectorsFormat::wrap_Object(CompressingTermVectorsFormat(((t_CompressingTermVectorsFormat *) arg)->object.this$));
          }
          static PyObject *t_CompressingTermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingTermVectorsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingTermVectorsFormat_init_(t_CompressingTermVectorsFormat *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a2((jobject) NULL);
            jint a3;
            jint a4;
            jint a5;
            CompressingTermVectorsFormat object((jobject) NULL);

            if (!parseArgs(args, "sskIII", ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = CompressingTermVectorsFormat(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingTermVectorsFormat_toString(t_CompressingTermVectorsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(CompressingTermVectorsFormat), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CompressingTermVectorsFormat_vectorsReader(t_CompressingTermVectorsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.vectorsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CompressingTermVectorsFormat), (PyObject *) self, "vectorsReader", args, 2);
          }

          static PyObject *t_CompressingTermVectorsFormat_vectorsWriter(t_CompressingTermVectorsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::TermVectorsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.vectorsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_TermVectorsWriter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CompressingTermVectorsFormat), (PyObject *) self, "vectorsWriter", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pl/PolishAnalyzer.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pl {

          ::java::lang::Class *PolishAnalyzer::class$ = NULL;
          jmethodID *PolishAnalyzer::mids$ = NULL;
          bool PolishAnalyzer::live$ = false;
          ::java::lang::String *PolishAnalyzer::DEFAULT_STEMMER_FILE = NULL;
          ::java::lang::String *PolishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass PolishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pl/PolishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_getDefaultTable_fd91f61b1b1ab520] = env->getStaticMethodID(cls, "getDefaultTable", "()Lorg/egothor/stemmer/Trie;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STEMMER_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STEMMER_FILE", "Ljava/lang/String;"));
              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PolishAnalyzer::PolishAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          PolishAnalyzer::PolishAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          PolishAnalyzer::PolishAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet PolishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }

          ::org::egothor::stemmer::Trie PolishAnalyzer::getDefaultTable()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::egothor::stemmer::Trie(env->callStaticObjectMethod(cls, mids$[mid_getDefaultTable_fd91f61b1b1ab520]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pl {
          static PyObject *t_PolishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PolishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PolishAnalyzer_init_(t_PolishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PolishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_PolishAnalyzer_getDefaultTable(PyTypeObject *type);
          static PyObject *t_PolishAnalyzer_get__defaultStopSet(t_PolishAnalyzer *self, void *data);
          static PyObject *t_PolishAnalyzer_get__defaultTable(t_PolishAnalyzer *self, void *data);
          static PyGetSetDef t_PolishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_PolishAnalyzer, defaultStopSet),
            DECLARE_GET_FIELD(t_PolishAnalyzer, defaultTable),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PolishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_PolishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PolishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PolishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_PolishAnalyzer, getDefaultTable, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PolishAnalyzer)[] = {
            { Py_tp_methods, t_PolishAnalyzer__methods_ },
            { Py_tp_init, (void *) t_PolishAnalyzer_init_ },
            { Py_tp_getset, t_PolishAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PolishAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(PolishAnalyzer, t_PolishAnalyzer, PolishAnalyzer);

          void t_PolishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(PolishAnalyzer), &PY_TYPE_DEF(PolishAnalyzer), module, "PolishAnalyzer", 0);
          }

          void t_PolishAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PolishAnalyzer), "class_", make_descriptor(PolishAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PolishAnalyzer), "wrapfn_", make_descriptor(t_PolishAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PolishAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(PolishAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PolishAnalyzer), "DEFAULT_STEMMER_FILE", make_descriptor(j2p(*PolishAnalyzer::DEFAULT_STEMMER_FILE)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PolishAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*PolishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_PolishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PolishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_PolishAnalyzer::wrap_Object(PolishAnalyzer(((t_PolishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_PolishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PolishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PolishAnalyzer_init_(t_PolishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                PolishAnalyzer object((jobject) NULL);

                INT_CALL(object = PolishAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                PolishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PolishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                PolishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PolishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PolishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::pl::PolishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_PolishAnalyzer_getDefaultTable(PyTypeObject *type)
          {
            ::org::egothor::stemmer::Trie result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::pl::PolishAnalyzer::getDefaultTable());
            return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
          }

          static PyObject *t_PolishAnalyzer_get__defaultStopSet(t_PolishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }

          static PyObject *t_PolishAnalyzer_get__defaultTable(t_PolishAnalyzer *self, void *data)
          {
            ::org::egothor::stemmer::Trie value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultTable());
            return ::org::egothor::stemmer::t_Trie::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiPostingsEnum$EnumWithSlice.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiPostingsEnum$EnumWithSlice::class$ = NULL;
        jmethodID *MultiPostingsEnum$EnumWithSlice::mids$ = NULL;
        jfieldID *MultiPostingsEnum$EnumWithSlice::fids$ = NULL;
        bool MultiPostingsEnum$EnumWithSlice::live$ = false;

        jclass MultiPostingsEnum$EnumWithSlice::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiPostingsEnum$EnumWithSlice");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_postingsEnum] = env->getFieldID(cls, "postingsEnum", "Lorg/apache/lucene/index/PostingsEnum;");
            fids$[fid_slice] = env->getFieldID(cls, "slice", "Lorg/apache/lucene/index/ReaderSlice;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String MultiPostingsEnum$EnumWithSlice::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        ::org::apache::lucene::index::PostingsEnum MultiPostingsEnum$EnumWithSlice::_get_postingsEnum() const
        {
          return ::org::apache::lucene::index::PostingsEnum(env->getObjectField(this$, fids$[fid_postingsEnum]));
        }

        void MultiPostingsEnum$EnumWithSlice::_set_postingsEnum(const ::org::apache::lucene::index::PostingsEnum & a0) const
        {
          env->setObjectField(this$, fids$[fid_postingsEnum], a0.this$);
        }

        ::org::apache::lucene::index::ReaderSlice MultiPostingsEnum$EnumWithSlice::_get_slice() const
        {
          return ::org::apache::lucene::index::ReaderSlice(env->getObjectField(this$, fids$[fid_slice]));
        }

        void MultiPostingsEnum$EnumWithSlice::_set_slice(const ::org::apache::lucene::index::ReaderSlice & a0) const
        {
          env->setObjectField(this$, fids$[fid_slice], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiPostingsEnum$EnumWithSlice_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiPostingsEnum$EnumWithSlice_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiPostingsEnum$EnumWithSlice_toString(t_MultiPostingsEnum$EnumWithSlice *self, PyObject *args);
        static PyObject *t_MultiPostingsEnum$EnumWithSlice_get__postingsEnum(t_MultiPostingsEnum$EnumWithSlice *self, void *data);
        static int t_MultiPostingsEnum$EnumWithSlice_set__postingsEnum(t_MultiPostingsEnum$EnumWithSlice *self, PyObject *arg, void *data);
        static PyObject *t_MultiPostingsEnum$EnumWithSlice_get__slice(t_MultiPostingsEnum$EnumWithSlice *self, void *data);
        static int t_MultiPostingsEnum$EnumWithSlice_set__slice(t_MultiPostingsEnum$EnumWithSlice *self, PyObject *arg, void *data);

        static PyGetSetDef t_MultiPostingsEnum$EnumWithSlice__fields_[] = {
          DECLARE_GETSET_FIELD(t_MultiPostingsEnum$EnumWithSlice, postingsEnum),
          DECLARE_GETSET_FIELD(t_MultiPostingsEnum$EnumWithSlice, slice),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiPostingsEnum$EnumWithSlice__methods_[] = {
          DECLARE_METHOD(t_MultiPostingsEnum$EnumWithSlice, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiPostingsEnum$EnumWithSlice, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiPostingsEnum$EnumWithSlice, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiPostingsEnum$EnumWithSlice)[] = {
          { Py_tp_methods, t_MultiPostingsEnum$EnumWithSlice__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_MultiPostingsEnum$EnumWithSlice__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiPostingsEnum$EnumWithSlice)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MultiPostingsEnum$EnumWithSlice, t_MultiPostingsEnum$EnumWithSlice, MultiPostingsEnum$EnumWithSlice);

        void t_MultiPostingsEnum$EnumWithSlice::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiPostingsEnum$EnumWithSlice), &PY_TYPE_DEF(MultiPostingsEnum$EnumWithSlice), module, "MultiPostingsEnum$EnumWithSlice", 0);
        }

        void t_MultiPostingsEnum$EnumWithSlice::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPostingsEnum$EnumWithSlice), "class_", make_descriptor(MultiPostingsEnum$EnumWithSlice::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPostingsEnum$EnumWithSlice), "wrapfn_", make_descriptor(t_MultiPostingsEnum$EnumWithSlice::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPostingsEnum$EnumWithSlice), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiPostingsEnum$EnumWithSlice_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiPostingsEnum$EnumWithSlice::initializeClass, 1)))
            return NULL;
          return t_MultiPostingsEnum$EnumWithSlice::wrap_Object(MultiPostingsEnum$EnumWithSlice(((t_MultiPostingsEnum$EnumWithSlice *) arg)->object.this$));
        }
        static PyObject *t_MultiPostingsEnum$EnumWithSlice_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiPostingsEnum$EnumWithSlice::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiPostingsEnum$EnumWithSlice_toString(t_MultiPostingsEnum$EnumWithSlice *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(MultiPostingsEnum$EnumWithSlice), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiPostingsEnum$EnumWithSlice_get__postingsEnum(t_MultiPostingsEnum$EnumWithSlice *self, void *data)
        {
          ::org::apache::lucene::index::PostingsEnum value((jobject) NULL);
          OBJ_CALL(value = self->object._get_postingsEnum());
          return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(value);
        }
        static int t_MultiPostingsEnum$EnumWithSlice_set__postingsEnum(t_MultiPostingsEnum$EnumWithSlice *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::PostingsEnum value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::PostingsEnum::initializeClass, &value))
          {
            INT_CALL(self->object._set_postingsEnum(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "postingsEnum", arg);
          return -1;
        }

        static PyObject *t_MultiPostingsEnum$EnumWithSlice_get__slice(t_MultiPostingsEnum$EnumWithSlice *self, void *data)
        {
          ::org::apache::lucene::index::ReaderSlice value((jobject) NULL);
          OBJ_CALL(value = self->object._get_slice());
          return ::org::apache::lucene::index::t_ReaderSlice::wrap_Object(value);
        }
        static int t_MultiPostingsEnum$EnumWithSlice_set__slice(t_MultiPostingsEnum$EnumWithSlice *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::ReaderSlice value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::ReaderSlice::initializeClass, &value))
          {
            INT_CALL(self->object._set_slice(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "slice", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/tokenattributes/ReadingAttributeImpl.h"
#include "org/apache/lucene/analysis/ko/Token.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/analysis/ko/tokenattributes/ReadingAttribute.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace tokenattributes {

            ::java::lang::Class *ReadingAttributeImpl::class$ = NULL;
            jmethodID *ReadingAttributeImpl::mids$ = NULL;
            bool ReadingAttributeImpl::live$ = false;

            jclass ReadingAttributeImpl::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/tokenattributes/ReadingAttributeImpl");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
                mids$[mid_getReading_db9b55ba01e03e4b] = env->getMethodID(cls, "getReading", "()Ljava/lang/String;");
                mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
                mids$[mid_setToken_0ac49e59706c84c7] = env->getMethodID(cls, "setToken", "(Lorg/apache/lucene/analysis/ko/Token;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ReadingAttributeImpl::ReadingAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            void ReadingAttributeImpl::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
            }

            void ReadingAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_copyTo_26346c38ebc9c090], a0.this$);
            }

            ::java::lang::String ReadingAttributeImpl::getReading() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getReading_db9b55ba01e03e4b]));
            }

            void ReadingAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
            }

            void ReadingAttributeImpl::setToken(const ::org::apache::lucene::analysis::ko::Token & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setToken_0ac49e59706c84c7], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace tokenattributes {
            static PyObject *t_ReadingAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ReadingAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ReadingAttributeImpl_init_(t_ReadingAttributeImpl *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ReadingAttributeImpl_clear(t_ReadingAttributeImpl *self, PyObject *args);
            static PyObject *t_ReadingAttributeImpl_copyTo(t_ReadingAttributeImpl *self, PyObject *args);
            static PyObject *t_ReadingAttributeImpl_getReading(t_ReadingAttributeImpl *self);
            static PyObject *t_ReadingAttributeImpl_reflectWith(t_ReadingAttributeImpl *self, PyObject *args);
            static PyObject *t_ReadingAttributeImpl_setToken(t_ReadingAttributeImpl *self, PyObject *arg);
            static PyObject *t_ReadingAttributeImpl_get__reading(t_ReadingAttributeImpl *self, void *data);
            static int t_ReadingAttributeImpl_set__token(t_ReadingAttributeImpl *self, PyObject *arg, void *data);
            static PyGetSetDef t_ReadingAttributeImpl__fields_[] = {
              DECLARE_GET_FIELD(t_ReadingAttributeImpl, reading),
              DECLARE_SET_FIELD(t_ReadingAttributeImpl, token),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ReadingAttributeImpl__methods_[] = {
              DECLARE_METHOD(t_ReadingAttributeImpl, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReadingAttributeImpl, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReadingAttributeImpl, clear, METH_VARARGS),
              DECLARE_METHOD(t_ReadingAttributeImpl, copyTo, METH_VARARGS),
              DECLARE_METHOD(t_ReadingAttributeImpl, getReading, METH_NOARGS),
              DECLARE_METHOD(t_ReadingAttributeImpl, reflectWith, METH_VARARGS),
              DECLARE_METHOD(t_ReadingAttributeImpl, setToken, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(ReadingAttributeImpl)[] = {
              { Py_tp_methods, t_ReadingAttributeImpl__methods_ },
              { Py_tp_init, (void *) t_ReadingAttributeImpl_init_ },
              { Py_tp_getset, t_ReadingAttributeImpl__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(ReadingAttributeImpl)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::util::AttributeImpl),
              NULL
            };

            DEFINE_TYPE(ReadingAttributeImpl, t_ReadingAttributeImpl, ReadingAttributeImpl);

            void t_ReadingAttributeImpl::install(PyObject *module)
            {
              installType(&PY_TYPE(ReadingAttributeImpl), &PY_TYPE_DEF(ReadingAttributeImpl), module, "ReadingAttributeImpl", 0);
            }

            void t_ReadingAttributeImpl::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(ReadingAttributeImpl), "class_", make_descriptor(ReadingAttributeImpl::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ReadingAttributeImpl), "wrapfn_", make_descriptor(t_ReadingAttributeImpl::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ReadingAttributeImpl), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ReadingAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ReadingAttributeImpl::initializeClass, 1)))
                return NULL;
              return t_ReadingAttributeImpl::wrap_Object(ReadingAttributeImpl(((t_ReadingAttributeImpl *) arg)->object.this$));
            }
            static PyObject *t_ReadingAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ReadingAttributeImpl::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ReadingAttributeImpl_init_(t_ReadingAttributeImpl *self, PyObject *args, PyObject *kwds)
            {
              ReadingAttributeImpl object((jobject) NULL);

              INT_CALL(object = ReadingAttributeImpl());
              self->object = object;

              return 0;
            }

            static PyObject *t_ReadingAttributeImpl_clear(t_ReadingAttributeImpl *self, PyObject *args)
            {

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(self->object.clear());
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(ReadingAttributeImpl), (PyObject *) self, "clear", args, 2);
            }

            static PyObject *t_ReadingAttributeImpl_copyTo(t_ReadingAttributeImpl *self, PyObject *args)
            {
              ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
              {
                OBJ_CALL(self->object.copyTo(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(ReadingAttributeImpl), (PyObject *) self, "copyTo", args, 2);
            }

            static PyObject *t_ReadingAttributeImpl_getReading(t_ReadingAttributeImpl *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getReading());
              return j2p(result);
            }

            static PyObject *t_ReadingAttributeImpl_reflectWith(t_ReadingAttributeImpl *self, PyObject *args)
            {
              ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
              {
                OBJ_CALL(self->object.reflectWith(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(ReadingAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
            }

            static PyObject *t_ReadingAttributeImpl_setToken(t_ReadingAttributeImpl *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::ko::Token a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ko::Token::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setToken(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setToken", arg);
              return NULL;
            }

            static PyObject *t_ReadingAttributeImpl_get__reading(t_ReadingAttributeImpl *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getReading());
              return j2p(value);
            }

            static int t_ReadingAttributeImpl_set__token(t_ReadingAttributeImpl *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::ko::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ko::Token::initializeClass, &value))
                {
                  INT_CALL(self->object.setToken(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "token", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanMinimalStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanMinimalStemFilterFactory::class$ = NULL;
          jmethodID *GermanMinimalStemFilterFactory::mids$ = NULL;
          bool GermanMinimalStemFilterFactory::live$ = false;
          ::java::lang::String *GermanMinimalStemFilterFactory::NAME = NULL;

          jclass GermanMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanMinimalStemFilterFactory::GermanMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GermanMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanMinimalStemFilterFactory_init_(t_GermanMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanMinimalStemFilterFactory_create(t_GermanMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GermanMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GermanMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GermanMinimalStemFilterFactory)[] = {
            { Py_tp_methods, t_GermanMinimalStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_GermanMinimalStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GermanMinimalStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(GermanMinimalStemFilterFactory, t_GermanMinimalStemFilterFactory, GermanMinimalStemFilterFactory);

          void t_GermanMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanMinimalStemFilterFactory), &PY_TYPE_DEF(GermanMinimalStemFilterFactory), module, "GermanMinimalStemFilterFactory", 0);
          }

          void t_GermanMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanMinimalStemFilterFactory), "class_", make_descriptor(GermanMinimalStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanMinimalStemFilterFactory), "wrapfn_", make_descriptor(t_GermanMinimalStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanMinimalStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(GermanMinimalStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanMinimalStemFilterFactory), "NAME", make_descriptor(j2p(*GermanMinimalStemFilterFactory::NAME)));
          }

          static PyObject *t_GermanMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GermanMinimalStemFilterFactory::wrap_Object(GermanMinimalStemFilterFactory(((t_GermanMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GermanMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanMinimalStemFilterFactory_init_(t_GermanMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GermanMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GermanMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanMinimalStemFilterFactory_create(t_GermanMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(GermanMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/CollationKeyAnalyzer.h"
#include "java/text/Collator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {

        ::java::lang::Class *CollationKeyAnalyzer::class$ = NULL;
        jmethodID *CollationKeyAnalyzer::mids$ = NULL;
        bool CollationKeyAnalyzer::live$ = false;

        jclass CollationKeyAnalyzer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/collation/CollationKeyAnalyzer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5752a611d0e456db] = env->getMethodID(cls, "<init>", "(Ljava/text/Collator;)V");
            mids$[mid_attributeFactory_11e9c67770fe4372] = env->getMethodID(cls, "attributeFactory", "(Ljava/lang/String;)Lorg/apache/lucene/util/AttributeFactory;");
            mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollationKeyAnalyzer::CollationKeyAnalyzer(const ::java::text::Collator & a0) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_5752a611d0e456db, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        static PyObject *t_CollationKeyAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationKeyAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollationKeyAnalyzer_init_(t_CollationKeyAnalyzer *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_CollationKeyAnalyzer__methods_[] = {
          DECLARE_METHOD(t_CollationKeyAnalyzer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationKeyAnalyzer, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CollationKeyAnalyzer)[] = {
          { Py_tp_methods, t_CollationKeyAnalyzer__methods_ },
          { Py_tp_init, (void *) t_CollationKeyAnalyzer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CollationKeyAnalyzer)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::analysis::Analyzer),
          NULL
        };

        DEFINE_TYPE(CollationKeyAnalyzer, t_CollationKeyAnalyzer, CollationKeyAnalyzer);

        void t_CollationKeyAnalyzer::install(PyObject *module)
        {
          installType(&PY_TYPE(CollationKeyAnalyzer), &PY_TYPE_DEF(CollationKeyAnalyzer), module, "CollationKeyAnalyzer", 0);
        }

        void t_CollationKeyAnalyzer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollationKeyAnalyzer), "class_", make_descriptor(CollationKeyAnalyzer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollationKeyAnalyzer), "wrapfn_", make_descriptor(t_CollationKeyAnalyzer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollationKeyAnalyzer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollationKeyAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollationKeyAnalyzer::initializeClass, 1)))
            return NULL;
          return t_CollationKeyAnalyzer::wrap_Object(CollationKeyAnalyzer(((t_CollationKeyAnalyzer *) arg)->object.this$));
        }
        static PyObject *t_CollationKeyAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollationKeyAnalyzer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollationKeyAnalyzer_init_(t_CollationKeyAnalyzer *self, PyObject *args, PyObject *kwds)
        {
          ::java::text::Collator a0((jobject) NULL);
          CollationKeyAnalyzer object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::text::Collator::initializeClass, &a0))
          {
            INT_CALL(object = CollationKeyAnalyzer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharArrayIterator.h"
#include "org/apache/lucene/analysis/util/CharArrayIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharArrayIterator::class$ = NULL;
          jmethodID *CharArrayIterator::mids$ = NULL;
          bool CharArrayIterator::live$ = false;
          jboolean CharArrayIterator::HAS_BUGGY_BREAKITERATORS = (jboolean) 0;

          jclass CharArrayIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharArrayIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clone_3575480ce6b576fd] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/util/CharArrayIterator;");
              mids$[mid_current_8eea1dd85c3239c3] = env->getMethodID(cls, "current", "()C");
              mids$[mid_first_8eea1dd85c3239c3] = env->getMethodID(cls, "first", "()C");
              mids$[mid_getBeginIndex_9972fcc56b44e79d] = env->getMethodID(cls, "getBeginIndex", "()I");
              mids$[mid_getEndIndex_9972fcc56b44e79d] = env->getMethodID(cls, "getEndIndex", "()I");
              mids$[mid_getIndex_9972fcc56b44e79d] = env->getMethodID(cls, "getIndex", "()I");
              mids$[mid_getLength_9972fcc56b44e79d] = env->getMethodID(cls, "getLength", "()I");
              mids$[mid_getStart_9972fcc56b44e79d] = env->getMethodID(cls, "getStart", "()I");
              mids$[mid_getText_e11cf13c9a887534] = env->getMethodID(cls, "getText", "()[C");
              mids$[mid_last_8eea1dd85c3239c3] = env->getMethodID(cls, "last", "()C");
              mids$[mid_newSentenceInstance_3575480ce6b576fd] = env->getStaticMethodID(cls, "newSentenceInstance", "()Lorg/apache/lucene/analysis/util/CharArrayIterator;");
              mids$[mid_newWordInstance_3575480ce6b576fd] = env->getStaticMethodID(cls, "newWordInstance", "()Lorg/apache/lucene/analysis/util/CharArrayIterator;");
              mids$[mid_next_8eea1dd85c3239c3] = env->getMethodID(cls, "next", "()C");
              mids$[mid_previous_8eea1dd85c3239c3] = env->getMethodID(cls, "previous", "()C");
              mids$[mid_setIndex_ebc61ec1e57770d1] = env->getMethodID(cls, "setIndex", "(I)C");
              mids$[mid_setText_d5128be76a214037] = env->getMethodID(cls, "setText", "([CII)V");
              mids$[mid_jreBugWorkaround_87303ccbf3475d77] = env->getMethodID(cls, "jreBugWorkaround", "(C)C");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              HAS_BUGGY_BREAKITERATORS = env->getStaticBooleanField(cls, "HAS_BUGGY_BREAKITERATORS");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharArrayIterator::CharArrayIterator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          CharArrayIterator CharArrayIterator::clone() const
          {
            return CharArrayIterator(env->callObjectMethod(this$, mids$[mid_clone_3575480ce6b576fd]));
          }

          jchar CharArrayIterator::current() const
          {
            return env->callCharMethod(this$, mids$[mid_current_8eea1dd85c3239c3]);
          }

          jchar CharArrayIterator::first() const
          {
            return env->callCharMethod(this$, mids$[mid_first_8eea1dd85c3239c3]);
          }

          jint CharArrayIterator::getBeginIndex() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginIndex_9972fcc56b44e79d]);
          }

          jint CharArrayIterator::getEndIndex() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndIndex_9972fcc56b44e79d]);
          }

          jint CharArrayIterator::getIndex() const
          {
            return env->callIntMethod(this$, mids$[mid_getIndex_9972fcc56b44e79d]);
          }

          jint CharArrayIterator::getLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getLength_9972fcc56b44e79d]);
          }

          jint CharArrayIterator::getStart() const
          {
            return env->callIntMethod(this$, mids$[mid_getStart_9972fcc56b44e79d]);
          }

          JArray< jchar > CharArrayIterator::getText() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getText_e11cf13c9a887534]));
          }

          jchar CharArrayIterator::last() const
          {
            return env->callCharMethod(this$, mids$[mid_last_8eea1dd85c3239c3]);
          }

          CharArrayIterator CharArrayIterator::newSentenceInstance()
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayIterator(env->callStaticObjectMethod(cls, mids$[mid_newSentenceInstance_3575480ce6b576fd]));
          }

          CharArrayIterator CharArrayIterator::newWordInstance()
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayIterator(env->callStaticObjectMethod(cls, mids$[mid_newWordInstance_3575480ce6b576fd]));
          }

          jchar CharArrayIterator::next() const
          {
            return env->callCharMethod(this$, mids$[mid_next_8eea1dd85c3239c3]);
          }

          jchar CharArrayIterator::previous() const
          {
            return env->callCharMethod(this$, mids$[mid_previous_8eea1dd85c3239c3]);
          }

          jchar CharArrayIterator::setIndex(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_setIndex_ebc61ec1e57770d1], a0);
          }

          void CharArrayIterator::setText(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_setText_d5128be76a214037], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharArrayIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharArrayIterator_init_(t_CharArrayIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharArrayIterator_clone(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_current(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_first(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getBeginIndex(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getEndIndex(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getIndex(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getLength(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getStart(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getText(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_last(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_newSentenceInstance(PyTypeObject *type);
          static PyObject *t_CharArrayIterator_newWordInstance(PyTypeObject *type);
          static PyObject *t_CharArrayIterator_next(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_previous(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_setIndex(t_CharArrayIterator *self, PyObject *arg);
          static PyObject *t_CharArrayIterator_setText(t_CharArrayIterator *self, PyObject *args);
          static PyObject *t_CharArrayIterator_get__beginIndex(t_CharArrayIterator *self, void *data);
          static PyObject *t_CharArrayIterator_get__endIndex(t_CharArrayIterator *self, void *data);
          static PyObject *t_CharArrayIterator_get__index(t_CharArrayIterator *self, void *data);
          static int t_CharArrayIterator_set__index(t_CharArrayIterator *self, PyObject *arg, void *data);
          static PyObject *t_CharArrayIterator_get__length(t_CharArrayIterator *self, void *data);
          static PyObject *t_CharArrayIterator_get__start(t_CharArrayIterator *self, void *data);
          static PyObject *t_CharArrayIterator_get__text(t_CharArrayIterator *self, void *data);
          static PyGetSetDef t_CharArrayIterator__fields_[] = {
            DECLARE_GET_FIELD(t_CharArrayIterator, beginIndex),
            DECLARE_GET_FIELD(t_CharArrayIterator, endIndex),
            DECLARE_GETSET_FIELD(t_CharArrayIterator, index),
            DECLARE_GET_FIELD(t_CharArrayIterator, length),
            DECLARE_GET_FIELD(t_CharArrayIterator, start),
            DECLARE_GET_FIELD(t_CharArrayIterator, text),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharArrayIterator__methods_[] = {
            DECLARE_METHOD(t_CharArrayIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayIterator, clone, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, current, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, first, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getBeginIndex, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getEndIndex, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getIndex, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getLength, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getStart, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getText, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, last, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, newSentenceInstance, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArrayIterator, newWordInstance, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArrayIterator, next, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, previous, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, setIndex, METH_O),
            DECLARE_METHOD(t_CharArrayIterator, setText, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CharArrayIterator)[] = {
            { Py_tp_methods, t_CharArrayIterator__methods_ },
            { Py_tp_init, (void *) t_CharArrayIterator_init_ },
            { Py_tp_getset, t_CharArrayIterator__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CharArrayIterator)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(CharArrayIterator, t_CharArrayIterator, CharArrayIterator);

          void t_CharArrayIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArrayIterator), &PY_TYPE_DEF(CharArrayIterator), module, "CharArrayIterator", 0);
          }

          void t_CharArrayIterator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharArrayIterator), "class_", make_descriptor(CharArrayIterator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharArrayIterator), "wrapfn_", make_descriptor(t_CharArrayIterator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharArrayIterator), "boxfn_", make_descriptor(boxObject));
            env->getClass(CharArrayIterator::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharArrayIterator), "HAS_BUGGY_BREAKITERATORS", make_descriptor(CharArrayIterator::HAS_BUGGY_BREAKITERATORS));
          }

          static PyObject *t_CharArrayIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArrayIterator::initializeClass, 1)))
              return NULL;
            return t_CharArrayIterator::wrap_Object(CharArrayIterator(((t_CharArrayIterator *) arg)->object.this$));
          }
          static PyObject *t_CharArrayIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArrayIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharArrayIterator_init_(t_CharArrayIterator *self, PyObject *args, PyObject *kwds)
          {
            CharArrayIterator object((jobject) NULL);

            INT_CALL(object = CharArrayIterator());
            self->object = object;

            return 0;
          }

          static PyObject *t_CharArrayIterator_clone(t_CharArrayIterator *self)
          {
            CharArrayIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return t_CharArrayIterator::wrap_Object(result);
          }

          static PyObject *t_CharArrayIterator_current(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.current());
            return c2p(result);
          }

          static PyObject *t_CharArrayIterator_first(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.first());
            return c2p(result);
          }

          static PyObject *t_CharArrayIterator_getBeginIndex(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginIndex());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getEndIndex(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndIndex());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getIndex(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getIndex());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getLength(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getStart(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStart());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getText(t_CharArrayIterator *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.getText());
            return result.wrap();
          }

          static PyObject *t_CharArrayIterator_last(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.last());
            return c2p(result);
          }

          static PyObject *t_CharArrayIterator_newSentenceInstance(PyTypeObject *type)
          {
            CharArrayIterator result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayIterator::newSentenceInstance());
            return t_CharArrayIterator::wrap_Object(result);
          }

          static PyObject *t_CharArrayIterator_newWordInstance(PyTypeObject *type)
          {
            CharArrayIterator result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayIterator::newWordInstance());
            return t_CharArrayIterator::wrap_Object(result);
          }

          static PyObject *t_CharArrayIterator_next(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.next());
            return c2p(result);
          }

          static PyObject *t_CharArrayIterator_previous(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.previous());
            return c2p(result);
          }

          static PyObject *t_CharArrayIterator_setIndex(t_CharArrayIterator *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setIndex(a0));
              return c2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setIndex", arg);
            return NULL;
          }

          static PyObject *t_CharArrayIterator_setText(t_CharArrayIterator *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.setText(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setText", args);
            return NULL;
          }

          static PyObject *t_CharArrayIterator_get__beginIndex(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginIndex());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_CharArrayIterator_get__endIndex(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndIndex());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_CharArrayIterator_get__index(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getIndex());
            return PyLong_FromLong((long) value);
          }
          static int t_CharArrayIterator_set__index(t_CharArrayIterator *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setIndex(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "index", arg);
            return -1;
          }

          static PyObject *t_CharArrayIterator_get__length(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLength());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_CharArrayIterator_get__start(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStart());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_CharArrayIterator_get__text(t_CharArrayIterator *self, void *data)
          {
            JArray< jchar > value((jobject) NULL);
            OBJ_CALL(value = self->object.getText());
            return value.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianStemFilter::class$ = NULL;
          jmethodID *GalicianStemFilter::mids$ = NULL;
          bool GalicianStemFilter::live$ = false;

          jclass GalicianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianStemFilter::GalicianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean GalicianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianStemFilter_init_(t_GalicianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianStemFilter_incrementToken(t_GalicianStemFilter *self, PyObject *args);

          static PyMethodDef t_GalicianStemFilter__methods_[] = {
            DECLARE_METHOD(t_GalicianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GalicianStemFilter)[] = {
            { Py_tp_methods, t_GalicianStemFilter__methods_ },
            { Py_tp_init, (void *) t_GalicianStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GalicianStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(GalicianStemFilter, t_GalicianStemFilter, GalicianStemFilter);

          void t_GalicianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianStemFilter), &PY_TYPE_DEF(GalicianStemFilter), module, "GalicianStemFilter", 0);
          }

          void t_GalicianStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianStemFilter), "class_", make_descriptor(GalicianStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianStemFilter), "wrapfn_", make_descriptor(t_GalicianStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianStemFilter::initializeClass, 1)))
              return NULL;
            return t_GalicianStemFilter::wrap_Object(GalicianStemFilter(((t_GalicianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GalicianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianStemFilter_init_(t_GalicianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GalicianStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GalicianStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianStemFilter_incrementToken(t_GalicianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(GalicianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/MatchAllDocsQueryNodeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/MatchAllDocsQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *MatchAllDocsQueryNodeBuilder::class$ = NULL;
              jmethodID *MatchAllDocsQueryNodeBuilder::mids$ = NULL;
              bool MatchAllDocsQueryNodeBuilder::live$ = false;

              jclass MatchAllDocsQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/MatchAllDocsQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_6e1ab1fc3e09a7bf] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/MatchAllDocsQuery;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchAllDocsQueryNodeBuilder::MatchAllDocsQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::search::MatchAllDocsQuery MatchAllDocsQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::MatchAllDocsQuery(env->callObjectMethod(this$, mids$[mid_build_6e1ab1fc3e09a7bf], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_MatchAllDocsQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchAllDocsQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchAllDocsQueryNodeBuilder_init_(t_MatchAllDocsQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MatchAllDocsQueryNodeBuilder_build(t_MatchAllDocsQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_MatchAllDocsQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_MatchAllDocsQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(MatchAllDocsQueryNodeBuilder)[] = {
                { Py_tp_methods, t_MatchAllDocsQueryNodeBuilder__methods_ },
                { Py_tp_init, (void *) t_MatchAllDocsQueryNodeBuilder_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(MatchAllDocsQueryNodeBuilder)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(MatchAllDocsQueryNodeBuilder, t_MatchAllDocsQueryNodeBuilder, MatchAllDocsQueryNodeBuilder);

              void t_MatchAllDocsQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchAllDocsQueryNodeBuilder), &PY_TYPE_DEF(MatchAllDocsQueryNodeBuilder), module, "MatchAllDocsQueryNodeBuilder", 0);
              }

              void t_MatchAllDocsQueryNodeBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(MatchAllDocsQueryNodeBuilder), "class_", make_descriptor(MatchAllDocsQueryNodeBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(MatchAllDocsQueryNodeBuilder), "wrapfn_", make_descriptor(t_MatchAllDocsQueryNodeBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(MatchAllDocsQueryNodeBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchAllDocsQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchAllDocsQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_MatchAllDocsQueryNodeBuilder::wrap_Object(MatchAllDocsQueryNodeBuilder(((t_MatchAllDocsQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_MatchAllDocsQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchAllDocsQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchAllDocsQueryNodeBuilder_init_(t_MatchAllDocsQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                MatchAllDocsQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = MatchAllDocsQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_MatchAllDocsQueryNodeBuilder_build(t_MatchAllDocsQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::MatchAllDocsQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_MatchAllDocsQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *WordDelimiterGraphFilterFactory::class$ = NULL;
          jmethodID *WordDelimiterGraphFilterFactory::mids$ = NULL;
          bool WordDelimiterGraphFilterFactory::live$ = false;
          ::java::lang::String *WordDelimiterGraphFilterFactory::NAME = NULL;
          ::java::lang::String *WordDelimiterGraphFilterFactory::OFFSETS = NULL;
          ::java::lang::String *WordDelimiterGraphFilterFactory::PROTECTED_TOKENS = NULL;
          ::java::lang::String *WordDelimiterGraphFilterFactory::TYPES = NULL;

          jclass WordDelimiterGraphFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4366615ad7077dae] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              OFFSETS = new ::java::lang::String(env->getStaticObjectField(cls, "OFFSETS", "Ljava/lang/String;"));
              PROTECTED_TOKENS = new ::java::lang::String(env->getStaticObjectField(cls, "PROTECTED_TOKENS", "Ljava/lang/String;"));
              TYPES = new ::java::lang::String(env->getStaticObjectField(cls, "TYPES", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordDelimiterGraphFilterFactory::WordDelimiterGraphFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter WordDelimiterGraphFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_4366615ad7077dae], a0.this$));
          }

          void WordDelimiterGraphFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_WordDelimiterGraphFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterGraphFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordDelimiterGraphFilterFactory_init_(t_WordDelimiterGraphFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordDelimiterGraphFilterFactory_create(t_WordDelimiterGraphFilterFactory *self, PyObject *args);
          static PyObject *t_WordDelimiterGraphFilterFactory_inform(t_WordDelimiterGraphFilterFactory *self, PyObject *arg);

          static PyMethodDef t_WordDelimiterGraphFilterFactory__methods_[] = {
            DECLARE_METHOD(t_WordDelimiterGraphFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterGraphFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterGraphFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_WordDelimiterGraphFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(WordDelimiterGraphFilterFactory)[] = {
            { Py_tp_methods, t_WordDelimiterGraphFilterFactory__methods_ },
            { Py_tp_init, (void *) t_WordDelimiterGraphFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(WordDelimiterGraphFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(WordDelimiterGraphFilterFactory, t_WordDelimiterGraphFilterFactory, WordDelimiterGraphFilterFactory);

          void t_WordDelimiterGraphFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(WordDelimiterGraphFilterFactory), &PY_TYPE_DEF(WordDelimiterGraphFilterFactory), module, "WordDelimiterGraphFilterFactory", 0);
          }

          void t_WordDelimiterGraphFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterGraphFilterFactory), "class_", make_descriptor(WordDelimiterGraphFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterGraphFilterFactory), "wrapfn_", make_descriptor(t_WordDelimiterGraphFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterGraphFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(WordDelimiterGraphFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterGraphFilterFactory), "NAME", make_descriptor(j2p(*WordDelimiterGraphFilterFactory::NAME)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterGraphFilterFactory), "OFFSETS", make_descriptor(j2p(*WordDelimiterGraphFilterFactory::OFFSETS)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterGraphFilterFactory), "PROTECTED_TOKENS", make_descriptor(j2p(*WordDelimiterGraphFilterFactory::PROTECTED_TOKENS)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterGraphFilterFactory), "TYPES", make_descriptor(j2p(*WordDelimiterGraphFilterFactory::TYPES)));
          }

          static PyObject *t_WordDelimiterGraphFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordDelimiterGraphFilterFactory::initializeClass, 1)))
              return NULL;
            return t_WordDelimiterGraphFilterFactory::wrap_Object(WordDelimiterGraphFilterFactory(((t_WordDelimiterGraphFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_WordDelimiterGraphFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordDelimiterGraphFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordDelimiterGraphFilterFactory_init_(t_WordDelimiterGraphFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            WordDelimiterGraphFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = WordDelimiterGraphFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WordDelimiterGraphFilterFactory_create(t_WordDelimiterGraphFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(WordDelimiterGraphFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_WordDelimiterGraphFilterFactory_inform(t_WordDelimiterGraphFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/CharacterUtils$CharacterBuffer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *CharacterUtils$CharacterBuffer::class$ = NULL;
        jmethodID *CharacterUtils$CharacterBuffer::mids$ = NULL;
        bool CharacterUtils$CharacterBuffer::live$ = false;

        jclass CharacterUtils$CharacterBuffer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/CharacterUtils$CharacterBuffer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getBuffer_e11cf13c9a887534] = env->getMethodID(cls, "getBuffer", "()[C");
            mids$[mid_getLength_9972fcc56b44e79d] = env->getMethodID(cls, "getLength", "()I");
            mids$[mid_getOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getOffset", "()I");
            mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        JArray< jchar > CharacterUtils$CharacterBuffer::getBuffer() const
        {
          return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getBuffer_e11cf13c9a887534]));
        }

        jint CharacterUtils$CharacterBuffer::getLength() const
        {
          return env->callIntMethod(this$, mids$[mid_getLength_9972fcc56b44e79d]);
        }

        jint CharacterUtils$CharacterBuffer::getOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_getOffset_9972fcc56b44e79d]);
        }

        void CharacterUtils$CharacterBuffer::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_CharacterUtils$CharacterBuffer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharacterUtils$CharacterBuffer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharacterUtils$CharacterBuffer_getBuffer(t_CharacterUtils$CharacterBuffer *self);
        static PyObject *t_CharacterUtils$CharacterBuffer_getLength(t_CharacterUtils$CharacterBuffer *self);
        static PyObject *t_CharacterUtils$CharacterBuffer_getOffset(t_CharacterUtils$CharacterBuffer *self);
        static PyObject *t_CharacterUtils$CharacterBuffer_reset(t_CharacterUtils$CharacterBuffer *self);
        static PyObject *t_CharacterUtils$CharacterBuffer_get__buffer(t_CharacterUtils$CharacterBuffer *self, void *data);
        static PyObject *t_CharacterUtils$CharacterBuffer_get__length(t_CharacterUtils$CharacterBuffer *self, void *data);
        static PyObject *t_CharacterUtils$CharacterBuffer_get__offset(t_CharacterUtils$CharacterBuffer *self, void *data);
        static PyGetSetDef t_CharacterUtils$CharacterBuffer__fields_[] = {
          DECLARE_GET_FIELD(t_CharacterUtils$CharacterBuffer, buffer),
          DECLARE_GET_FIELD(t_CharacterUtils$CharacterBuffer, length),
          DECLARE_GET_FIELD(t_CharacterUtils$CharacterBuffer, offset),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CharacterUtils$CharacterBuffer__methods_[] = {
          DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, getBuffer, METH_NOARGS),
          DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, getLength, METH_NOARGS),
          DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, getOffset, METH_NOARGS),
          DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, reset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CharacterUtils$CharacterBuffer)[] = {
          { Py_tp_methods, t_CharacterUtils$CharacterBuffer__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_CharacterUtils$CharacterBuffer__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CharacterUtils$CharacterBuffer)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CharacterUtils$CharacterBuffer, t_CharacterUtils$CharacterBuffer, CharacterUtils$CharacterBuffer);

        void t_CharacterUtils$CharacterBuffer::install(PyObject *module)
        {
          installType(&PY_TYPE(CharacterUtils$CharacterBuffer), &PY_TYPE_DEF(CharacterUtils$CharacterBuffer), module, "CharacterUtils$CharacterBuffer", 0);
        }

        void t_CharacterUtils$CharacterBuffer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterUtils$CharacterBuffer), "class_", make_descriptor(CharacterUtils$CharacterBuffer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterUtils$CharacterBuffer), "wrapfn_", make_descriptor(t_CharacterUtils$CharacterBuffer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterUtils$CharacterBuffer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CharacterUtils$CharacterBuffer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CharacterUtils$CharacterBuffer::initializeClass, 1)))
            return NULL;
          return t_CharacterUtils$CharacterBuffer::wrap_Object(CharacterUtils$CharacterBuffer(((t_CharacterUtils$CharacterBuffer *) arg)->object.this$));
        }
        static PyObject *t_CharacterUtils$CharacterBuffer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CharacterUtils$CharacterBuffer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CharacterUtils$CharacterBuffer_getBuffer(t_CharacterUtils$CharacterBuffer *self)
        {
          JArray< jchar > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBuffer());
          return result.wrap();
        }

        static PyObject *t_CharacterUtils$CharacterBuffer_getLength(t_CharacterUtils$CharacterBuffer *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getLength());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_CharacterUtils$CharacterBuffer_getOffset(t_CharacterUtils$CharacterBuffer *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getOffset());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_CharacterUtils$CharacterBuffer_reset(t_CharacterUtils$CharacterBuffer *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }

        static PyObject *t_CharacterUtils$CharacterBuffer_get__buffer(t_CharacterUtils$CharacterBuffer *self, void *data)
        {
          JArray< jchar > value((jobject) NULL);
          OBJ_CALL(value = self->object.getBuffer());
          return value.wrap();
        }

        static PyObject *t_CharacterUtils$CharacterBuffer_get__length(t_CharacterUtils$CharacterBuffer *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getLength());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_CharacterUtils$CharacterBuffer_get__offset(t_CharacterUtils$CharacterBuffer *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getOffset());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/FileNotFoundException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *FileNotFoundException::class$ = NULL;
    jmethodID *FileNotFoundException::mids$ = NULL;
    bool FileNotFoundException::live$ = false;

    jclass FileNotFoundException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/FileNotFoundException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    FileNotFoundException::FileNotFoundException() : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

    FileNotFoundException::FileNotFoundException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_FileNotFoundException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_FileNotFoundException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_FileNotFoundException_init_(t_FileNotFoundException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_FileNotFoundException__methods_[] = {
      DECLARE_METHOD(t_FileNotFoundException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_FileNotFoundException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(FileNotFoundException)[] = {
      { Py_tp_methods, t_FileNotFoundException__methods_ },
      { Py_tp_init, (void *) t_FileNotFoundException_init_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(FileNotFoundException)[] = {
      &PY_TYPE_DEF(::java::io::IOException),
      NULL
    };

    DEFINE_TYPE(FileNotFoundException, t_FileNotFoundException, FileNotFoundException);

    void t_FileNotFoundException::install(PyObject *module)
    {
      installType(&PY_TYPE(FileNotFoundException), &PY_TYPE_DEF(FileNotFoundException), module, "FileNotFoundException", 0);
    }

    void t_FileNotFoundException::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(FileNotFoundException), "class_", make_descriptor(FileNotFoundException::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(FileNotFoundException), "wrapfn_", make_descriptor(t_FileNotFoundException::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(FileNotFoundException), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_FileNotFoundException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, FileNotFoundException::initializeClass, 1)))
        return NULL;
      return t_FileNotFoundException::wrap_Object(FileNotFoundException(((t_FileNotFoundException *) arg)->object.this$));
    }
    static PyObject *t_FileNotFoundException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, FileNotFoundException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_FileNotFoundException_init_(t_FileNotFoundException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          FileNotFoundException object((jobject) NULL);

          INT_CALL(object = FileNotFoundException());
          self->object = object;
          break;
        }
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          FileNotFoundException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = FileNotFoundException(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenPositionFilter::class$ = NULL;
          jmethodID *LimitTokenPositionFilter::mids$ = NULL;
          bool LimitTokenPositionFilter::live$ = false;

          jclass LimitTokenPositionFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ec84dcad1ccbb797] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_66cff404b0168626] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;IZ)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenPositionFilter::LimitTokenPositionFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ec84dcad1ccbb797, a0.this$, a1)) {}

          LimitTokenPositionFilter::LimitTokenPositionFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_66cff404b0168626, a0.this$, a1, a2)) {}

          jboolean LimitTokenPositionFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void LimitTokenPositionFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenPositionFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenPositionFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenPositionFilter_init_(t_LimitTokenPositionFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenPositionFilter_incrementToken(t_LimitTokenPositionFilter *self, PyObject *args);
          static PyObject *t_LimitTokenPositionFilter_reset(t_LimitTokenPositionFilter *self, PyObject *args);

          static PyMethodDef t_LimitTokenPositionFilter__methods_[] = {
            DECLARE_METHOD(t_LimitTokenPositionFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenPositionFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenPositionFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_LimitTokenPositionFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LimitTokenPositionFilter)[] = {
            { Py_tp_methods, t_LimitTokenPositionFilter__methods_ },
            { Py_tp_init, (void *) t_LimitTokenPositionFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LimitTokenPositionFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(LimitTokenPositionFilter, t_LimitTokenPositionFilter, LimitTokenPositionFilter);

          void t_LimitTokenPositionFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenPositionFilter), &PY_TYPE_DEF(LimitTokenPositionFilter), module, "LimitTokenPositionFilter", 0);
          }

          void t_LimitTokenPositionFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenPositionFilter), "class_", make_descriptor(LimitTokenPositionFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenPositionFilter), "wrapfn_", make_descriptor(t_LimitTokenPositionFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenPositionFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LimitTokenPositionFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenPositionFilter::initializeClass, 1)))
              return NULL;
            return t_LimitTokenPositionFilter::wrap_Object(LimitTokenPositionFilter(((t_LimitTokenPositionFilter *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenPositionFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenPositionFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenPositionFilter_init_(t_LimitTokenPositionFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                LimitTokenPositionFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LimitTokenPositionFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jboolean a2;
                LimitTokenPositionFilter object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LimitTokenPositionFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenPositionFilter_incrementToken(t_LimitTokenPositionFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(LimitTokenPositionFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_LimitTokenPositionFilter_reset(t_LimitTokenPositionFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(LimitTokenPositionFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoAreaShape.h"
#include "org/apache/lucene/spatial3d/geom/GeoArea.h"
#include "org/apache/lucene/spatial3d/geom/GeoShape.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoAreaShape::class$ = NULL;
          jmethodID *GeoAreaShape::mids$ = NULL;
          bool GeoAreaShape::live$ = false;

          jclass GeoAreaShape::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoAreaShape");

              mids$ = new jmethodID[max_mid];
              mids$[mid_intersects_19eac5b582956b3c] = env->getMethodID(cls, "intersects", "(Lorg/apache/lucene/spatial3d/geom/GeoShape;)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean GeoAreaShape::intersects(const ::org::apache::lucene::spatial3d::geom::GeoShape & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_intersects_19eac5b582956b3c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoAreaShape_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoAreaShape_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoAreaShape_intersects(t_GeoAreaShape *self, PyObject *args);

          static PyMethodDef t_GeoAreaShape__methods_[] = {
            DECLARE_METHOD(t_GeoAreaShape, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoAreaShape, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoAreaShape, intersects, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoAreaShape)[] = {
            { Py_tp_methods, t_GeoAreaShape__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoAreaShape)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::GeoMembershipShape),
            NULL
          };

          DEFINE_TYPE(GeoAreaShape, t_GeoAreaShape, GeoAreaShape);

          void t_GeoAreaShape::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoAreaShape), &PY_TYPE_DEF(GeoAreaShape), module, "GeoAreaShape", 0);
          }

          void t_GeoAreaShape::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoAreaShape), "class_", make_descriptor(GeoAreaShape::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoAreaShape), "wrapfn_", make_descriptor(t_GeoAreaShape::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoAreaShape), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoAreaShape_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoAreaShape::initializeClass, 1)))
              return NULL;
            return t_GeoAreaShape::wrap_Object(GeoAreaShape(((t_GeoAreaShape *) arg)->object.this$));
          }
          static PyObject *t_GeoAreaShape_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoAreaShape::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoAreaShape_intersects(t_GeoAreaShape *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::GeoShape a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::GeoShape::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.intersects(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(GeoAreaShape), (PyObject *) self, "intersects", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.h"
#include "java/util/Map$Entry.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyWriter.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyWriter::class$ = NULL;
            jmethodID *DirectoryTaxonomyWriter::mids$ = NULL;
            bool DirectoryTaxonomyWriter::live$ = false;
            ::java::lang::String *DirectoryTaxonomyWriter::INDEX_EPOCH = NULL;

            jclass DirectoryTaxonomyWriter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c51fd9fb1cf0392d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
                mids$[mid_init$_8ec2c3e31afb3944] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)V");
                mids$[mid_init$_436d8c145bae4747] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;Lorg/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache;)V");
                mids$[mid_addCategory_1e6795f28098d13d] = env->getMethodID(cls, "addCategory", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_addTaxonomy_2dc4d499be3481a9] = env->getMethodID(cls, "addTaxonomy", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap;)V");
                mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
                mids$[mid_commit_2e5ae9edcb9b072f] = env->getMethodID(cls, "commit", "()J");
                mids$[mid_defaultTaxonomyWriterCache_fd45971157017449] = env->getStaticMethodID(cls, "defaultTaxonomyWriterCache", "()Lorg/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache;");
                mids$[mid_getCache_fd45971157017449] = env->getMethodID(cls, "getCache", "()Lorg/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache;");
                mids$[mid_getDirectory_7452b086ce8219b2] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");
                mids$[mid_getLiveCommitData_7a21c115c1b038aa] = env->getMethodID(cls, "getLiveCommitData", "()Ljava/lang/Iterable;");
                mids$[mid_getParent_1e143afe1894d213] = env->getMethodID(cls, "getParent", "(I)I");
                mids$[mid_getSize_9972fcc56b44e79d] = env->getMethodID(cls, "getSize", "()I");
                mids$[mid_getTaxonomyEpoch_2e5ae9edcb9b072f] = env->getMethodID(cls, "getTaxonomyEpoch", "()J");
                mids$[mid_prepareCommit_2e5ae9edcb9b072f] = env->getMethodID(cls, "prepareCommit", "()J");
                mids$[mid_replaceTaxonomy_c51fd9fb1cf0392d] = env->getMethodID(cls, "replaceTaxonomy", "(Lorg/apache/lucene/store/Directory;)V");
                mids$[mid_rollback_f2cc1bce94666404] = env->getMethodID(cls, "rollback", "()V");
                mids$[mid_setCacheMissesUntilFill_040c4cd0390c5aff] = env->getMethodID(cls, "setCacheMissesUntilFill", "(I)V");
                mids$[mid_setLiveCommitData_870d7079aa6e0153] = env->getMethodID(cls, "setLiveCommitData", "(Ljava/lang/Iterable;)V");
                mids$[mid_openIndexWriter_a22bb78e12ee1da6] = env->getMethodID(cls, "openIndexWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig;)Lorg/apache/lucene/index/IndexWriter;");
                mids$[mid_createIndexWriterConfig_85208b7651de5894] = env->getMethodID(cls, "createIndexWriterConfig", "(Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)Lorg/apache/lucene/index/IndexWriterConfig;");
                mids$[mid_closeResources_f2cc1bce94666404] = env->getMethodID(cls, "closeResources", "()V");
                mids$[mid_findCategory_1e6795f28098d13d] = env->getMethodID(cls, "findCategory", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_ensureOpen_f2cc1bce94666404] = env->getMethodID(cls, "ensureOpen", "()V");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                INDEX_EPOCH = new ::java::lang::String(env->getStaticObjectField(cls, "INDEX_EPOCH", "Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DirectoryTaxonomyWriter::DirectoryTaxonomyWriter(const ::org::apache::lucene::store::Directory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c51fd9fb1cf0392d, a0.this$)) {}

            DirectoryTaxonomyWriter::DirectoryTaxonomyWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::IndexWriterConfig$OpenMode & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8ec2c3e31afb3944, a0.this$, a1.this$)) {}

            DirectoryTaxonomyWriter::DirectoryTaxonomyWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::IndexWriterConfig$OpenMode & a1, const ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_436d8c145bae4747, a0.this$, a1.this$, a2.this$)) {}

            jint DirectoryTaxonomyWriter::addCategory(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_addCategory_1e6795f28098d13d], a0.this$);
            }

            void DirectoryTaxonomyWriter::addTaxonomy(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter$OrdinalMap & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addTaxonomy_2dc4d499be3481a9], a0.this$, a1.this$);
            }

            void DirectoryTaxonomyWriter::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
            }

            jlong DirectoryTaxonomyWriter::commit() const
            {
              return env->callLongMethod(this$, mids$[mid_commit_2e5ae9edcb9b072f]);
            }

            ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache DirectoryTaxonomyWriter::defaultTaxonomyWriterCache()
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache(env->callStaticObjectMethod(cls, mids$[mid_defaultTaxonomyWriterCache_fd45971157017449]));
            }

            ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache DirectoryTaxonomyWriter::getCache() const
            {
              return ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache(env->callObjectMethod(this$, mids$[mid_getCache_fd45971157017449]));
            }

            ::org::apache::lucene::store::Directory DirectoryTaxonomyWriter::getDirectory() const
            {
              return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_7452b086ce8219b2]));
            }

            ::java::lang::Iterable DirectoryTaxonomyWriter::getLiveCommitData() const
            {
              return ::java::lang::Iterable(env->callObjectMethod(this$, mids$[mid_getLiveCommitData_7a21c115c1b038aa]));
            }

            jint DirectoryTaxonomyWriter::getParent(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getParent_1e143afe1894d213], a0);
            }

            jint DirectoryTaxonomyWriter::getSize() const
            {
              return env->callIntMethod(this$, mids$[mid_getSize_9972fcc56b44e79d]);
            }

            jlong DirectoryTaxonomyWriter::getTaxonomyEpoch() const
            {
              return env->callLongMethod(this$, mids$[mid_getTaxonomyEpoch_2e5ae9edcb9b072f]);
            }

            jlong DirectoryTaxonomyWriter::prepareCommit() const
            {
              return env->callLongMethod(this$, mids$[mid_prepareCommit_2e5ae9edcb9b072f]);
            }

            void DirectoryTaxonomyWriter::replaceTaxonomy(const ::org::apache::lucene::store::Directory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_replaceTaxonomy_c51fd9fb1cf0392d], a0.this$);
            }

            void DirectoryTaxonomyWriter::rollback() const
            {
              env->callVoidMethod(this$, mids$[mid_rollback_f2cc1bce94666404]);
            }

            void DirectoryTaxonomyWriter::setCacheMissesUntilFill(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setCacheMissesUntilFill_040c4cd0390c5aff], a0);
            }

            void DirectoryTaxonomyWriter::setLiveCommitData(const ::java::lang::Iterable & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setLiveCommitData_870d7079aa6e0153], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$DiskOrdinalMap.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$MemoryOrdinalMap.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyWriter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyWriter_init_(t_DirectoryTaxonomyWriter *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DirectoryTaxonomyWriter_addCategory(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_addTaxonomy(t_DirectoryTaxonomyWriter *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyWriter_close(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_commit(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_defaultTaxonomyWriterCache(PyTypeObject *type);
            static PyObject *t_DirectoryTaxonomyWriter_getCache(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_getDirectory(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_getLiveCommitData(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_getParent(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_getSize(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_getTaxonomyEpoch(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_prepareCommit(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_replaceTaxonomy(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_rollback(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_setCacheMissesUntilFill(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_setLiveCommitData(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_get__cache(t_DirectoryTaxonomyWriter *self, void *data);
            static int t_DirectoryTaxonomyWriter_set__cacheMissesUntilFill(t_DirectoryTaxonomyWriter *self, PyObject *arg, void *data);
            static PyObject *t_DirectoryTaxonomyWriter_get__directory(t_DirectoryTaxonomyWriter *self, void *data);
            static PyObject *t_DirectoryTaxonomyWriter_get__liveCommitData(t_DirectoryTaxonomyWriter *self, void *data);
            static int t_DirectoryTaxonomyWriter_set__liveCommitData(t_DirectoryTaxonomyWriter *self, PyObject *arg, void *data);
            static PyObject *t_DirectoryTaxonomyWriter_get__size(t_DirectoryTaxonomyWriter *self, void *data);
            static PyObject *t_DirectoryTaxonomyWriter_get__taxonomyEpoch(t_DirectoryTaxonomyWriter *self, void *data);
            static PyGetSetDef t_DirectoryTaxonomyWriter__fields_[] = {
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter, cache),
              DECLARE_SET_FIELD(t_DirectoryTaxonomyWriter, cacheMissesUntilFill),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter, directory),
              DECLARE_GETSET_FIELD(t_DirectoryTaxonomyWriter, liveCommitData),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter, size),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter, taxonomyEpoch),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyWriter__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, addCategory, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, addTaxonomy, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, close, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, commit, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, defaultTaxonomyWriterCache, METH_NOARGS | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getCache, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getDirectory, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getLiveCommitData, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getParent, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getSize, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getTaxonomyEpoch, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, prepareCommit, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, replaceTaxonomy, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, rollback, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, setCacheMissesUntilFill, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, setLiveCommitData, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(DirectoryTaxonomyWriter)[] = {
              { Py_tp_methods, t_DirectoryTaxonomyWriter__methods_ },
              { Py_tp_init, (void *) t_DirectoryTaxonomyWriter_init_ },
              { Py_tp_getset, t_DirectoryTaxonomyWriter__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(DirectoryTaxonomyWriter)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(DirectoryTaxonomyWriter, t_DirectoryTaxonomyWriter, DirectoryTaxonomyWriter);

            void t_DirectoryTaxonomyWriter::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyWriter), &PY_TYPE_DEF(DirectoryTaxonomyWriter), module, "DirectoryTaxonomyWriter", 0);
              PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryTaxonomyWriter), "DiskOrdinalMap", make_descriptor(&PY_TYPE_DEF(DirectoryTaxonomyWriter$DiskOrdinalMap)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryTaxonomyWriter), "MemoryOrdinalMap", make_descriptor(&PY_TYPE_DEF(DirectoryTaxonomyWriter$MemoryOrdinalMap)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryTaxonomyWriter), "OrdinalMap", make_descriptor(&PY_TYPE_DEF(DirectoryTaxonomyWriter$OrdinalMap)));
            }

            void t_DirectoryTaxonomyWriter::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryTaxonomyWriter), "class_", make_descriptor(DirectoryTaxonomyWriter::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryTaxonomyWriter), "wrapfn_", make_descriptor(t_DirectoryTaxonomyWriter::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryTaxonomyWriter), "boxfn_", make_descriptor(boxObject));
              env->getClass(DirectoryTaxonomyWriter::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryTaxonomyWriter), "INDEX_EPOCH", make_descriptor(j2p(*DirectoryTaxonomyWriter::INDEX_EPOCH)));
            }

            static PyObject *t_DirectoryTaxonomyWriter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyWriter::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyWriter::wrap_Object(DirectoryTaxonomyWriter(((t_DirectoryTaxonomyWriter *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyWriter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyWriter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DirectoryTaxonomyWriter_init_(t_DirectoryTaxonomyWriter *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  DirectoryTaxonomyWriter object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
                  {
                    INT_CALL(object = DirectoryTaxonomyWriter(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::org::apache::lucene::index::IndexWriterConfig$OpenMode a1((jobject) NULL);
                  PyTypeObject **p1;
                  DirectoryTaxonomyWriter object((jobject) NULL);

                  if (!parseArgs(args, "kK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::parameters_))
                  {
                    INT_CALL(object = DirectoryTaxonomyWriter(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::org::apache::lucene::index::IndexWriterConfig$OpenMode a1((jobject) NULL);
                  PyTypeObject **p1;
                  ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache a2((jobject) NULL);
                  DirectoryTaxonomyWriter object((jobject) NULL);

                  if (!parseArgs(args, "kKk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::parameters_, &a2))
                  {
                    INT_CALL(object = DirectoryTaxonomyWriter(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DirectoryTaxonomyWriter_addCategory(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.addCategory(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "addCategory", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_addTaxonomy(t_DirectoryTaxonomyWriter *self, PyObject *args)
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter$OrdinalMap a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter$OrdinalMap::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addTaxonomy(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addTaxonomy", args);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_close(t_DirectoryTaxonomyWriter *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter_commit(t_DirectoryTaxonomyWriter *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.commit());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_defaultTaxonomyWriterCache(PyTypeObject *type)
            {
              ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::defaultTaxonomyWriterCache());
              return ::org::apache::lucene::facet::taxonomy::writercache::t_TaxonomyWriterCache::wrap_Object(result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_getCache(t_DirectoryTaxonomyWriter *self)
            {
              ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache result((jobject) NULL);
              OBJ_CALL(result = self->object.getCache());
              return ::org::apache::lucene::facet::taxonomy::writercache::t_TaxonomyWriterCache::wrap_Object(result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_getDirectory(t_DirectoryTaxonomyWriter *self)
            {
              ::org::apache::lucene::store::Directory result((jobject) NULL);
              OBJ_CALL(result = self->object.getDirectory());
              return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_getLiveCommitData(t_DirectoryTaxonomyWriter *self)
            {
              ::java::lang::Iterable result((jobject) NULL);
              OBJ_CALL(result = self->object.getLiveCommitData());
              return ::java::lang::t_Iterable::wrap_Object(result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_getParent(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getParent(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getParent", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_getSize(t_DirectoryTaxonomyWriter *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getSize());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_getTaxonomyEpoch(t_DirectoryTaxonomyWriter *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.getTaxonomyEpoch());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_prepareCommit(t_DirectoryTaxonomyWriter *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.prepareCommit());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_replaceTaxonomy(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.replaceTaxonomy(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "replaceTaxonomy", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_rollback(t_DirectoryTaxonomyWriter *self)
            {
              OBJ_CALL(self->object.rollback());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter_setCacheMissesUntilFill(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setCacheMissesUntilFill(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setCacheMissesUntilFill", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_setLiveCommitData(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(self->object.setLiveCommitData(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setLiveCommitData", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_get__cache(t_DirectoryTaxonomyWriter *self, void *data)
            {
              ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache value((jobject) NULL);
              OBJ_CALL(value = self->object.getCache());
              return ::org::apache::lucene::facet::taxonomy::writercache::t_TaxonomyWriterCache::wrap_Object(value);
            }

            static int t_DirectoryTaxonomyWriter_set__cacheMissesUntilFill(t_DirectoryTaxonomyWriter *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setCacheMissesUntilFill(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "cacheMissesUntilFill", arg);
              return -1;
            }

            static PyObject *t_DirectoryTaxonomyWriter_get__directory(t_DirectoryTaxonomyWriter *self, void *data)
            {
              ::org::apache::lucene::store::Directory value((jobject) NULL);
              OBJ_CALL(value = self->object.getDirectory());
              return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
            }

            static PyObject *t_DirectoryTaxonomyWriter_get__liveCommitData(t_DirectoryTaxonomyWriter *self, void *data)
            {
              ::java::lang::Iterable value((jobject) NULL);
              OBJ_CALL(value = self->object.getLiveCommitData());
              return ::java::lang::t_Iterable::wrap_Object(value);
            }
            static int t_DirectoryTaxonomyWriter_set__liveCommitData(t_DirectoryTaxonomyWriter *self, PyObject *arg, void *data)
            {
              {
                ::java::lang::Iterable value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::lang::Iterable::initializeClass, &value))
                {
                  INT_CALL(self->object.setLiveCommitData(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "liveCommitData", arg);
              return -1;
            }

            static PyObject *t_DirectoryTaxonomyWriter_get__size(t_DirectoryTaxonomyWriter *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getSize());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_DirectoryTaxonomyWriter_get__taxonomyEpoch(t_DirectoryTaxonomyWriter *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getTaxonomyEpoch());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParser$Operator.h"
#include "org/apache/lucene/queryparser/classic/QueryParser$Operator.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParser$Operator::class$ = NULL;
          jmethodID *QueryParser$Operator::mids$ = NULL;
          bool QueryParser$Operator::live$ = false;
          QueryParser$Operator *QueryParser$Operator::AND = NULL;
          QueryParser$Operator *QueryParser$Operator::OR = NULL;

          jclass QueryParser$Operator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParser$Operator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_4afc43461db3e52f] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;");
              mids$[mid_values_5da7355646f2da95] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              AND = new QueryParser$Operator(env->getStaticObjectField(cls, "AND", "Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;"));
              OR = new QueryParser$Operator(env->getStaticObjectField(cls, "OR", "Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryParser$Operator QueryParser$Operator::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return QueryParser$Operator(env->callStaticObjectMethod(cls, mids$[mid_valueOf_4afc43461db3e52f], a0.this$));
          }

          JArray< QueryParser$Operator > QueryParser$Operator::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< QueryParser$Operator >(env->callStaticObjectMethod(cls, mids$[mid_values_5da7355646f2da95]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParser$Operator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParser$Operator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParser$Operator_of_(t_QueryParser$Operator *self, PyObject *args);
          static PyObject *t_QueryParser$Operator_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_QueryParser$Operator_values(PyTypeObject *type);
          static PyObject *t_QueryParser$Operator_get__parameters_(t_QueryParser$Operator *self, void *data);
          static PyGetSetDef t_QueryParser$Operator__fields_[] = {
            DECLARE_GET_FIELD(t_QueryParser$Operator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryParser$Operator__methods_[] = {
            DECLARE_METHOD(t_QueryParser$Operator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParser$Operator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParser$Operator, of_, METH_VARARGS),
            DECLARE_METHOD(t_QueryParser$Operator, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_QueryParser$Operator, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(QueryParser$Operator)[] = {
            { Py_tp_methods, t_QueryParser$Operator__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_QueryParser$Operator__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(QueryParser$Operator)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(QueryParser$Operator, t_QueryParser$Operator, QueryParser$Operator);
          PyObject *t_QueryParser$Operator::wrap_Object(const QueryParser$Operator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_QueryParser$Operator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_QueryParser$Operator *self = (t_QueryParser$Operator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_QueryParser$Operator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_QueryParser$Operator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_QueryParser$Operator *self = (t_QueryParser$Operator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_QueryParser$Operator::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParser$Operator), &PY_TYPE_DEF(QueryParser$Operator), module, "QueryParser$Operator", 0);
          }

          void t_QueryParser$Operator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParser$Operator), "class_", make_descriptor(QueryParser$Operator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParser$Operator), "wrapfn_", make_descriptor(t_QueryParser$Operator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParser$Operator), "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryParser$Operator::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParser$Operator), "AND", make_descriptor(t_QueryParser$Operator::wrap_Object(*QueryParser$Operator::AND)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParser$Operator), "OR", make_descriptor(t_QueryParser$Operator::wrap_Object(*QueryParser$Operator::OR)));
          }

          static PyObject *t_QueryParser$Operator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParser$Operator::initializeClass, 1)))
              return NULL;
            return t_QueryParser$Operator::wrap_Object(QueryParser$Operator(((t_QueryParser$Operator *) arg)->object.this$));
          }
          static PyObject *t_QueryParser$Operator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParser$Operator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_QueryParser$Operator_of_(t_QueryParser$Operator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_QueryParser$Operator_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            QueryParser$Operator result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::QueryParser$Operator::valueOf(a0));
              return t_QueryParser$Operator::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_QueryParser$Operator_values(PyTypeObject *type)
          {
            JArray< QueryParser$Operator > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::QueryParser$Operator::values());
            return JArray<jobject>(result.this$).wrap(t_QueryParser$Operator::wrap_jobject);
          }
          static PyObject *t_QueryParser$Operator_get__parameters_(t_QueryParser$Operator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *BoundaryScanner::class$ = NULL;
          jmethodID *BoundaryScanner::mids$ = NULL;
          bool BoundaryScanner::live$ = false;

          jclass BoundaryScanner::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/BoundaryScanner");

              mids$ = new jmethodID[max_mid];
              mids$[mid_findEndOffset_5c64028204964247] = env->getMethodID(cls, "findEndOffset", "(Ljava/lang/StringBuilder;I)I");
              mids$[mid_findStartOffset_5c64028204964247] = env->getMethodID(cls, "findStartOffset", "(Ljava/lang/StringBuilder;I)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint BoundaryScanner::findEndOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findEndOffset_5c64028204964247], a0.this$, a1);
          }

          jint BoundaryScanner::findStartOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findStartOffset_5c64028204964247], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_BoundaryScanner_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BoundaryScanner_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BoundaryScanner_findEndOffset(t_BoundaryScanner *self, PyObject *args);
          static PyObject *t_BoundaryScanner_findStartOffset(t_BoundaryScanner *self, PyObject *args);

          static PyMethodDef t_BoundaryScanner__methods_[] = {
            DECLARE_METHOD(t_BoundaryScanner, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BoundaryScanner, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BoundaryScanner, findEndOffset, METH_VARARGS),
            DECLARE_METHOD(t_BoundaryScanner, findStartOffset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BoundaryScanner)[] = {
            { Py_tp_methods, t_BoundaryScanner__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BoundaryScanner)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BoundaryScanner, t_BoundaryScanner, BoundaryScanner);

          void t_BoundaryScanner::install(PyObject *module)
          {
            installType(&PY_TYPE(BoundaryScanner), &PY_TYPE_DEF(BoundaryScanner), module, "BoundaryScanner", 0);
          }

          void t_BoundaryScanner::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BoundaryScanner), "class_", make_descriptor(BoundaryScanner::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BoundaryScanner), "wrapfn_", make_descriptor(t_BoundaryScanner::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BoundaryScanner), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BoundaryScanner_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BoundaryScanner::initializeClass, 1)))
              return NULL;
            return t_BoundaryScanner::wrap_Object(BoundaryScanner(((t_BoundaryScanner *) arg)->object.this$));
          }
          static PyObject *t_BoundaryScanner_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BoundaryScanner::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BoundaryScanner_findEndOffset(t_BoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findEndOffset(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findEndOffset", args);
            return NULL;
          }

          static PyObject *t_BoundaryScanner_findStartOffset(t_BoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findStartOffset(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findStartOffset", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/VariableContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/expressions/js/VariableContext.h"
#include "org/apache/lucene/expressions/js/VariableContext$Type.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *VariableContext::class$ = NULL;
          jmethodID *VariableContext::mids$ = NULL;
          jfieldID *VariableContext::fids$ = NULL;
          bool VariableContext::live$ = false;

          jclass VariableContext::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/VariableContext");

              mids$ = new jmethodID[max_mid];
              mids$[mid_parse_4cf965db31ff1d03] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/String;)[Lorg/apache/lucene/expressions/js/VariableContext;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_integer] = env->getFieldID(cls, "integer", "I");
              fids$[fid_text] = env->getFieldID(cls, "text", "Ljava/lang/String;");
              fids$[fid_type] = env->getFieldID(cls, "type", "Lorg/apache/lucene/expressions/js/VariableContext$Type;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JArray< VariableContext > VariableContext::parse(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< VariableContext >(env->callStaticObjectMethod(cls, mids$[mid_parse_4cf965db31ff1d03], a0.this$));
          }

          jint VariableContext::_get_integer() const
          {
            return env->getIntField(this$, fids$[fid_integer]);
          }

          ::java::lang::String VariableContext::_get_text() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_text]));
          }

          ::org::apache::lucene::expressions::js::VariableContext$Type VariableContext::_get_type() const
          {
            return ::org::apache::lucene::expressions::js::VariableContext$Type(env->getObjectField(this$, fids$[fid_type]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_VariableContext_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_VariableContext_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_VariableContext_parse(PyTypeObject *type, PyObject *arg);
          static PyObject *t_VariableContext_get__integer(t_VariableContext *self, void *data);
          static PyObject *t_VariableContext_get__text(t_VariableContext *self, void *data);
          static PyObject *t_VariableContext_get__type(t_VariableContext *self, void *data);

          static PyGetSetDef t_VariableContext__fields_[] = {
            DECLARE_GET_FIELD(t_VariableContext, integer),
            DECLARE_GET_FIELD(t_VariableContext, text),
            DECLARE_GET_FIELD(t_VariableContext, type),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_VariableContext__methods_[] = {
            DECLARE_METHOD(t_VariableContext, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VariableContext, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VariableContext, parse, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(VariableContext)[] = {
            { Py_tp_methods, t_VariableContext__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_VariableContext__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(VariableContext)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(VariableContext, t_VariableContext, VariableContext);

          void t_VariableContext::install(PyObject *module)
          {
            installType(&PY_TYPE(VariableContext), &PY_TYPE_DEF(VariableContext), module, "VariableContext", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableContext), "Type", make_descriptor(&PY_TYPE_DEF(VariableContext$Type)));
          }

          void t_VariableContext::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableContext), "class_", make_descriptor(VariableContext::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableContext), "wrapfn_", make_descriptor(t_VariableContext::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableContext), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_VariableContext_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, VariableContext::initializeClass, 1)))
              return NULL;
            return t_VariableContext::wrap_Object(VariableContext(((t_VariableContext *) arg)->object.this$));
          }
          static PyObject *t_VariableContext_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, VariableContext::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_VariableContext_parse(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< VariableContext > result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::expressions::js::VariableContext::parse(a0));
              return JArray<jobject>(result.this$).wrap(t_VariableContext::wrap_jobject);
            }

            PyErr_SetArgsError(type, "parse", arg);
            return NULL;
          }

          static PyObject *t_VariableContext_get__integer(t_VariableContext *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_integer());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_VariableContext_get__text(t_VariableContext *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_text());
            return j2p(value);
          }

          static PyObject *t_VariableContext_get__type(t_VariableContext *self, void *data)
          {
            ::org::apache::lucene::expressions::js::VariableContext$Type value((jobject) NULL);
            OBJ_CALL(value = self->object._get_type());
            return ::org::apache::lucene::expressions::js::t_VariableContext$Type::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/comparators/IntComparator$IntLeafComparator.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/comparators/IntComparator.h"
#include "java/lang/Class.h"
#include "java/lang/Integer.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {

          ::java::lang::Class *IntComparator$IntLeafComparator::class$ = NULL;
          jmethodID *IntComparator$IntLeafComparator::mids$ = NULL;
          bool IntComparator$IntLeafComparator::live$ = false;

          jclass IntComparator$IntLeafComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/comparators/IntComparator$IntLeafComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f549e32ce4b52f7e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/comparators/IntComparator;Lorg/apache/lucene/index/LeafReaderContext;)V");
              mids$[mid_compareBottom_1e143afe1894d213] = env->getMethodID(cls, "compareBottom", "(I)I");
              mids$[mid_compareTop_1e143afe1894d213] = env->getMethodID(cls, "compareTop", "(I)I");
              mids$[mid_copy_438c62480c481c65] = env->getMethodID(cls, "copy", "(II)V");
              mids$[mid_setBottom_040c4cd0390c5aff] = env->getMethodID(cls, "setBottom", "(I)V");
              mids$[mid_encodeTop_9ffdf271836656c4] = env->getMethodID(cls, "encodeTop", "([B)V");
              mids$[mid_encodeBottom_9ffdf271836656c4] = env->getMethodID(cls, "encodeBottom", "([B)V");
              mids$[mid_isMissingValueCompetitive_8454bd5aa23fd11e] = env->getMethodID(cls, "isMissingValueCompetitive", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntComparator$IntLeafComparator::IntComparator$IntLeafComparator(const ::org::apache::lucene::search::comparators::IntComparator & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) : ::org::apache::lucene::search::comparators::NumericComparator$NumericLeafComparator(env->newObject(initializeClass, &mids$, mid_init$_f549e32ce4b52f7e, a0.this$, a1.this$)) {}

          jint IntComparator$IntLeafComparator::compareBottom(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareBottom_1e143afe1894d213], a0);
          }

          jint IntComparator$IntLeafComparator::compareTop(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTop_1e143afe1894d213], a0);
          }

          void IntComparator$IntLeafComparator::copy(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_438c62480c481c65], a0, a1);
          }

          void IntComparator$IntLeafComparator::setBottom(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBottom_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {
          static PyObject *t_IntComparator$IntLeafComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntComparator$IntLeafComparator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntComparator$IntLeafComparator_of_(t_IntComparator$IntLeafComparator *self, PyObject *args);
          static int t_IntComparator$IntLeafComparator_init_(t_IntComparator$IntLeafComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntComparator$IntLeafComparator_compareBottom(t_IntComparator$IntLeafComparator *self, PyObject *args);
          static PyObject *t_IntComparator$IntLeafComparator_compareTop(t_IntComparator$IntLeafComparator *self, PyObject *args);
          static PyObject *t_IntComparator$IntLeafComparator_copy(t_IntComparator$IntLeafComparator *self, PyObject *args);
          static PyObject *t_IntComparator$IntLeafComparator_setBottom(t_IntComparator$IntLeafComparator *self, PyObject *args);
          static int t_IntComparator$IntLeafComparator_set__bottom(t_IntComparator$IntLeafComparator *self, PyObject *arg, void *data);
          static PyObject *t_IntComparator$IntLeafComparator_get__parameters_(t_IntComparator$IntLeafComparator *self, void *data);
          static PyGetSetDef t_IntComparator$IntLeafComparator__fields_[] = {
            DECLARE_SET_FIELD(t_IntComparator$IntLeafComparator, bottom),
            DECLARE_GET_FIELD(t_IntComparator$IntLeafComparator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IntComparator$IntLeafComparator__methods_[] = {
            DECLARE_METHOD(t_IntComparator$IntLeafComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntComparator$IntLeafComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntComparator$IntLeafComparator, of_, METH_VARARGS),
            DECLARE_METHOD(t_IntComparator$IntLeafComparator, compareBottom, METH_VARARGS),
            DECLARE_METHOD(t_IntComparator$IntLeafComparator, compareTop, METH_VARARGS),
            DECLARE_METHOD(t_IntComparator$IntLeafComparator, copy, METH_VARARGS),
            DECLARE_METHOD(t_IntComparator$IntLeafComparator, setBottom, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IntComparator$IntLeafComparator)[] = {
            { Py_tp_methods, t_IntComparator$IntLeafComparator__methods_ },
            { Py_tp_init, (void *) t_IntComparator$IntLeafComparator_init_ },
            { Py_tp_getset, t_IntComparator$IntLeafComparator__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IntComparator$IntLeafComparator)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::comparators::NumericComparator$NumericLeafComparator),
            NULL
          };

          DEFINE_TYPE(IntComparator$IntLeafComparator, t_IntComparator$IntLeafComparator, IntComparator$IntLeafComparator);
          PyObject *t_IntComparator$IntLeafComparator::wrap_Object(const IntComparator$IntLeafComparator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntComparator$IntLeafComparator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntComparator$IntLeafComparator *self = (t_IntComparator$IntLeafComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_IntComparator$IntLeafComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntComparator$IntLeafComparator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntComparator$IntLeafComparator *self = (t_IntComparator$IntLeafComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_IntComparator$IntLeafComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(IntComparator$IntLeafComparator), &PY_TYPE_DEF(IntComparator$IntLeafComparator), module, "IntComparator$IntLeafComparator", 0);
          }

          void t_IntComparator$IntLeafComparator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntComparator$IntLeafComparator), "class_", make_descriptor(IntComparator$IntLeafComparator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntComparator$IntLeafComparator), "wrapfn_", make_descriptor(t_IntComparator$IntLeafComparator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntComparator$IntLeafComparator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntComparator$IntLeafComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntComparator$IntLeafComparator::initializeClass, 1)))
              return NULL;
            return t_IntComparator$IntLeafComparator::wrap_Object(IntComparator$IntLeafComparator(((t_IntComparator$IntLeafComparator *) arg)->object.this$));
          }
          static PyObject *t_IntComparator$IntLeafComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntComparator$IntLeafComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntComparator$IntLeafComparator_of_(t_IntComparator$IntLeafComparator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_IntComparator$IntLeafComparator_init_(t_IntComparator$IntLeafComparator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::comparators::IntComparator a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
            IntComparator$IntLeafComparator object((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::search::comparators::IntComparator::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::org::apache::lucene::search::comparators::t_IntComparator::parameters_, &a1))
            {
              INT_CALL(object = IntComparator$IntLeafComparator(a0, a1));
              self->object = object;
              self->parameters[0] = ::java::lang::PY_TYPE(Integer);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IntComparator$IntLeafComparator_compareBottom(t_IntComparator$IntLeafComparator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareBottom(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(IntComparator$IntLeafComparator), (PyObject *) self, "compareBottom", args, 2);
          }

          static PyObject *t_IntComparator$IntLeafComparator_compareTop(t_IntComparator$IntLeafComparator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareTop(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(IntComparator$IntLeafComparator), (PyObject *) self, "compareTop", args, 2);
          }

          static PyObject *t_IntComparator$IntLeafComparator_copy(t_IntComparator$IntLeafComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.copy(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(IntComparator$IntLeafComparator), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_IntComparator$IntLeafComparator_setBottom(t_IntComparator$IntLeafComparator *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.setBottom(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(IntComparator$IntLeafComparator), (PyObject *) self, "setBottom", args, 2);
          }
          static PyObject *t_IntComparator$IntLeafComparator_get__parameters_(t_IntComparator$IntLeafComparator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_IntComparator$IntLeafComparator_set__bottom(t_IntComparator$IntLeafComparator *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setBottom(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "bottom", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bn/BengaliNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bn {

          ::java::lang::Class *BengaliNormalizer::class$ = NULL;
          jmethodID *BengaliNormalizer::mids$ = NULL;
          bool BengaliNormalizer::live$ = false;

          jclass BengaliNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bn/BengaliNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_d4655f2a19359017] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BengaliNormalizer::BengaliNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint BengaliNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bn {
          static PyObject *t_BengaliNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BengaliNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BengaliNormalizer_init_(t_BengaliNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BengaliNormalizer_normalize(t_BengaliNormalizer *self, PyObject *args);

          static PyMethodDef t_BengaliNormalizer__methods_[] = {
            DECLARE_METHOD(t_BengaliNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BengaliNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BengaliNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BengaliNormalizer)[] = {
            { Py_tp_methods, t_BengaliNormalizer__methods_ },
            { Py_tp_init, (void *) t_BengaliNormalizer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BengaliNormalizer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BengaliNormalizer, t_BengaliNormalizer, BengaliNormalizer);

          void t_BengaliNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(BengaliNormalizer), &PY_TYPE_DEF(BengaliNormalizer), module, "BengaliNormalizer", 0);
          }

          void t_BengaliNormalizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliNormalizer), "class_", make_descriptor(BengaliNormalizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliNormalizer), "wrapfn_", make_descriptor(t_BengaliNormalizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliNormalizer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BengaliNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BengaliNormalizer::initializeClass, 1)))
              return NULL;
            return t_BengaliNormalizer::wrap_Object(BengaliNormalizer(((t_BengaliNormalizer *) arg)->object.this$));
          }
          static PyObject *t_BengaliNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BengaliNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BengaliNormalizer_init_(t_BengaliNormalizer *self, PyObject *args, PyObject *kwds)
          {
            BengaliNormalizer object((jobject) NULL);

            INT_CALL(object = BengaliNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_BengaliNormalizer_normalize(t_BengaliNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/XYDocValuesPointInGeometryQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *XYDocValuesPointInGeometryQuery::class$ = NULL;
        jmethodID *XYDocValuesPointInGeometryQuery::mids$ = NULL;
        bool XYDocValuesPointInGeometryQuery::live$ = false;

        jclass XYDocValuesPointInGeometryQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/XYDocValuesPointInGeometryQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::Weight XYDocValuesPointInGeometryQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean XYDocValuesPointInGeometryQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint XYDocValuesPointInGeometryQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String XYDocValuesPointInGeometryQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void XYDocValuesPointInGeometryQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_XYDocValuesPointInGeometryQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_XYDocValuesPointInGeometryQuery_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_XYDocValuesPointInGeometryQuery_createWeight(t_XYDocValuesPointInGeometryQuery *self, PyObject *args);
        static PyObject *t_XYDocValuesPointInGeometryQuery_equals(t_XYDocValuesPointInGeometryQuery *self, PyObject *args);
        static PyObject *t_XYDocValuesPointInGeometryQuery_hashCode(t_XYDocValuesPointInGeometryQuery *self, PyObject *args);
        static PyObject *t_XYDocValuesPointInGeometryQuery_toString(t_XYDocValuesPointInGeometryQuery *self, PyObject *args);
        static PyObject *t_XYDocValuesPointInGeometryQuery_visit(t_XYDocValuesPointInGeometryQuery *self, PyObject *args);

        static PyMethodDef t_XYDocValuesPointInGeometryQuery__methods_[] = {
          DECLARE_METHOD(t_XYDocValuesPointInGeometryQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYDocValuesPointInGeometryQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYDocValuesPointInGeometryQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_XYDocValuesPointInGeometryQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_XYDocValuesPointInGeometryQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_XYDocValuesPointInGeometryQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_XYDocValuesPointInGeometryQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(XYDocValuesPointInGeometryQuery)[] = {
          { Py_tp_methods, t_XYDocValuesPointInGeometryQuery__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(XYDocValuesPointInGeometryQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(XYDocValuesPointInGeometryQuery, t_XYDocValuesPointInGeometryQuery, XYDocValuesPointInGeometryQuery);

        void t_XYDocValuesPointInGeometryQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(XYDocValuesPointInGeometryQuery), &PY_TYPE_DEF(XYDocValuesPointInGeometryQuery), module, "XYDocValuesPointInGeometryQuery", 0);
        }

        void t_XYDocValuesPointInGeometryQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYDocValuesPointInGeometryQuery), "class_", make_descriptor(XYDocValuesPointInGeometryQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYDocValuesPointInGeometryQuery), "wrapfn_", make_descriptor(t_XYDocValuesPointInGeometryQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYDocValuesPointInGeometryQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_XYDocValuesPointInGeometryQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, XYDocValuesPointInGeometryQuery::initializeClass, 1)))
            return NULL;
          return t_XYDocValuesPointInGeometryQuery::wrap_Object(XYDocValuesPointInGeometryQuery(((t_XYDocValuesPointInGeometryQuery *) arg)->object.this$));
        }
        static PyObject *t_XYDocValuesPointInGeometryQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, XYDocValuesPointInGeometryQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_XYDocValuesPointInGeometryQuery_createWeight(t_XYDocValuesPointInGeometryQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(XYDocValuesPointInGeometryQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_XYDocValuesPointInGeometryQuery_equals(t_XYDocValuesPointInGeometryQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(XYDocValuesPointInGeometryQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_XYDocValuesPointInGeometryQuery_hashCode(t_XYDocValuesPointInGeometryQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(XYDocValuesPointInGeometryQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_XYDocValuesPointInGeometryQuery_toString(t_XYDocValuesPointInGeometryQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(XYDocValuesPointInGeometryQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_XYDocValuesPointInGeometryQuery_visit(t_XYDocValuesPointInGeometryQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(XYDocValuesPointInGeometryQuery), (PyObject *) self, "visit", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SimpleHTMLFormatter.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SimpleHTMLFormatter::class$ = NULL;
          jmethodID *SimpleHTMLFormatter::mids$ = NULL;
          bool SimpleHTMLFormatter::live$ = false;

          jclass SimpleHTMLFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SimpleHTMLFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_15b72f6a44ff93f2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_highlightTerm_89cd75f77d741eb4] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleHTMLFormatter::SimpleHTMLFormatter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          SimpleHTMLFormatter::SimpleHTMLFormatter(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_15b72f6a44ff93f2, a0.this$, a1.this$)) {}

          ::java::lang::String SimpleHTMLFormatter::highlightTerm(const ::java::lang::String & a0, const ::org::apache::lucene::search::highlight::TokenGroup & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_highlightTerm_89cd75f77d741eb4], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SimpleHTMLFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleHTMLFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleHTMLFormatter_init_(t_SimpleHTMLFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleHTMLFormatter_highlightTerm(t_SimpleHTMLFormatter *self, PyObject *args);

          static PyMethodDef t_SimpleHTMLFormatter__methods_[] = {
            DECLARE_METHOD(t_SimpleHTMLFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleHTMLFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleHTMLFormatter, highlightTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleHTMLFormatter)[] = {
            { Py_tp_methods, t_SimpleHTMLFormatter__methods_ },
            { Py_tp_init, (void *) t_SimpleHTMLFormatter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleHTMLFormatter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SimpleHTMLFormatter, t_SimpleHTMLFormatter, SimpleHTMLFormatter);

          void t_SimpleHTMLFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleHTMLFormatter), &PY_TYPE_DEF(SimpleHTMLFormatter), module, "SimpleHTMLFormatter", 0);
          }

          void t_SimpleHTMLFormatter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleHTMLFormatter), "class_", make_descriptor(SimpleHTMLFormatter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleHTMLFormatter), "wrapfn_", make_descriptor(t_SimpleHTMLFormatter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleHTMLFormatter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleHTMLFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleHTMLFormatter::initializeClass, 1)))
              return NULL;
            return t_SimpleHTMLFormatter::wrap_Object(SimpleHTMLFormatter(((t_SimpleHTMLFormatter *) arg)->object.this$));
          }
          static PyObject *t_SimpleHTMLFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleHTMLFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleHTMLFormatter_init_(t_SimpleHTMLFormatter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleHTMLFormatter object((jobject) NULL);

                INT_CALL(object = SimpleHTMLFormatter());
                self->object = object;
                break;
              }
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                SimpleHTMLFormatter object((jobject) NULL);

                if (!parseArgs(args, "ss", &a0, &a1))
                {
                  INT_CALL(object = SimpleHTMLFormatter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleHTMLFormatter_highlightTerm(t_SimpleHTMLFormatter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::TokenGroup a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::highlight::TokenGroup::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.highlightTerm(a0, a1));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "highlightTerm", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/NormalDistance.h"
#include "org/apache/lucene/spatial3d/geom/NormalDistance.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/spatial3d/geom/DistanceStyle.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/Plane.h"
#include "org/apache/lucene/spatial3d/geom/Membership.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *NormalDistance::class$ = NULL;
          jmethodID *NormalDistance::mids$ = NULL;
          bool NormalDistance::live$ = false;
          NormalDistance *NormalDistance::INSTANCE = NULL;

          jclass NormalDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/NormalDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeDistance_5d9fe562983a5b40] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;Lorg/apache/lucene/spatial3d/geom/GeoPoint;)D");
              mids$[mid_computeDistance_1ec77ef423ee02b8] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;Lorg/apache/lucene/spatial3d/geom/GeoPoint;[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_computeDistance_9a12f42782ddf048] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;DDD)D");
              mids$[mid_computeDistance_e314394bf9f24d4d] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;DDD[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_findDistancePoints_90e364a30b4d8b55] = env->getMethodID(cls, "findDistancePoints", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DLorg/apache/lucene/spatial3d/geom/GeoPoint;Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)[Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_findMaximumArcDistance_63963df67d49d40a] = env->getMethodID(cls, "findMaximumArcDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;D)D");
              mids$[mid_findMinimumArcDistance_63963df67d49d40a] = env->getMethodID(cls, "findMinimumArcDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;D)D");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              INSTANCE = new NormalDistance(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/spatial3d/geom/NormalDistance;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalDistance::NormalDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jdouble NormalDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_5d9fe562983a5b40], a0.this$, a1.this$);
          }

          jdouble NormalDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::Plane & a1, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a2, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_1ec77ef423ee02b8], a0.this$, a1.this$, a2.this$, a3.this$);
          }

          jdouble NormalDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0, jdouble a1, jdouble a2, jdouble a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_9a12f42782ddf048], a0.this$, a1, a2, a3);
          }

          jdouble NormalDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::Plane & a1, jdouble a2, jdouble a3, jdouble a4, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a5) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_e314394bf9f24d4d], a0.this$, a1.this$, a2, a3, a4, a5.this$);
          }

          JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > NormalDistance::findDistancePoints(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a2, const ::org::apache::lucene::spatial3d::geom::Plane & a3, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a4) const
          {
            return JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint >(env->callObjectMethod(this$, mids$[mid_findDistancePoints_90e364a30b4d8b55], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          jdouble NormalDistance::findMaximumArcDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_findMaximumArcDistance_63963df67d49d40a], a0.this$, a1);
          }

          jdouble NormalDistance::findMinimumArcDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_findMinimumArcDistance_63963df67d49d40a], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_NormalDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalDistance_init_(t_NormalDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalDistance_computeDistance(t_NormalDistance *self, PyObject *args);
          static PyObject *t_NormalDistance_findDistancePoints(t_NormalDistance *self, PyObject *args);
          static PyObject *t_NormalDistance_findMaximumArcDistance(t_NormalDistance *self, PyObject *args);
          static PyObject *t_NormalDistance_findMinimumArcDistance(t_NormalDistance *self, PyObject *args);

          static PyMethodDef t_NormalDistance__methods_[] = {
            DECLARE_METHOD(t_NormalDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalDistance, computeDistance, METH_VARARGS),
            DECLARE_METHOD(t_NormalDistance, findDistancePoints, METH_VARARGS),
            DECLARE_METHOD(t_NormalDistance, findMaximumArcDistance, METH_VARARGS),
            DECLARE_METHOD(t_NormalDistance, findMinimumArcDistance, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NormalDistance)[] = {
            { Py_tp_methods, t_NormalDistance__methods_ },
            { Py_tp_init, (void *) t_NormalDistance_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NormalDistance)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(NormalDistance, t_NormalDistance, NormalDistance);

          void t_NormalDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalDistance), &PY_TYPE_DEF(NormalDistance), module, "NormalDistance", 0);
          }

          void t_NormalDistance::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalDistance), "class_", make_descriptor(NormalDistance::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalDistance), "wrapfn_", make_descriptor(t_NormalDistance::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalDistance), "boxfn_", make_descriptor(boxObject));
            env->getClass(NormalDistance::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalDistance), "INSTANCE", make_descriptor(t_NormalDistance::wrap_Object(*NormalDistance::INSTANCE)));
          }

          static PyObject *t_NormalDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalDistance::initializeClass, 1)))
              return NULL;
            return t_NormalDistance::wrap_Object(NormalDistance(((t_NormalDistance *) arg)->object.this$));
          }
          static PyObject *t_NormalDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalDistance_init_(t_NormalDistance *self, PyObject *args, PyObject *kwds)
          {
            NormalDistance object((jobject) NULL);

            INT_CALL(object = NormalDistance());
            self->object = object;

            return 0;
          }

          static PyObject *t_NormalDistance_computeDistance(t_NormalDistance *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Plane a1((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a2((jobject) NULL);
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a3((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kkk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
              {
                ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble result;

                if (!parseArgs(args, "kDDD", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 6:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Plane a1((jobject) NULL);
                jdouble a2;
                jdouble a3;
                jdouble a4;
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a5((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kkDDD[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1, a2, a3, a4, a5));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "computeDistance", args);
            return NULL;
          }

          static PyObject *t_NormalDistance_findDistancePoints(t_NormalDistance *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            ::org::apache::lucene::spatial3d::geom::GeoPoint a2((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Plane a3((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a4((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > result((jobject) NULL);

            if (!parseArgs(args, "kDkk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.findDistancePoints(a0, a1, a2, a3, a4));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_jobject);
            }

            PyErr_SetArgsError((PyObject *) self, "findDistancePoints", args);
            return NULL;
          }

          static PyObject *t_NormalDistance_findMaximumArcDistance(t_NormalDistance *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            jdouble result;

            if (!parseArgs(args, "kD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findMaximumArcDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findMaximumArcDistance", args);
            return NULL;
          }

          static PyObject *t_NormalDistance_findMinimumArcDistance(t_NormalDistance *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            jdouble result;

            if (!parseArgs(args, "kD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findMinimumArcDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findMinimumArcDistance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/GroupFacetCollector$FacetEntry.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *GroupFacetCollector$FacetEntry::class$ = NULL;
          jmethodID *GroupFacetCollector$FacetEntry::mids$ = NULL;
          bool GroupFacetCollector$FacetEntry::live$ = false;

          jclass GroupFacetCollector$FacetEntry::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/GroupFacetCollector$FacetEntry");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_327a6f4e8624d9f4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;I)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getCount_9972fcc56b44e79d] = env->getMethodID(cls, "getCount", "()I");
              mids$[mid_getValue_7af2ea2e37ce82b8] = env->getMethodID(cls, "getValue", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GroupFacetCollector$FacetEntry::GroupFacetCollector$FacetEntry(const ::org::apache::lucene::util::BytesRef & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_327a6f4e8624d9f4, a0.this$, a1)) {}

          jboolean GroupFacetCollector$FacetEntry::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint GroupFacetCollector$FacetEntry::getCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getCount_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::util::BytesRef GroupFacetCollector$FacetEntry::getValue() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getValue_7af2ea2e37ce82b8]));
          }

          jint GroupFacetCollector$FacetEntry::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::String GroupFacetCollector$FacetEntry::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_GroupFacetCollector$FacetEntry_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupFacetCollector$FacetEntry_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GroupFacetCollector$FacetEntry_init_(t_GroupFacetCollector$FacetEntry *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GroupFacetCollector$FacetEntry_equals(t_GroupFacetCollector$FacetEntry *self, PyObject *args);
          static PyObject *t_GroupFacetCollector$FacetEntry_getCount(t_GroupFacetCollector$FacetEntry *self);
          static PyObject *t_GroupFacetCollector$FacetEntry_getValue(t_GroupFacetCollector$FacetEntry *self);
          static PyObject *t_GroupFacetCollector$FacetEntry_hashCode(t_GroupFacetCollector$FacetEntry *self, PyObject *args);
          static PyObject *t_GroupFacetCollector$FacetEntry_toString(t_GroupFacetCollector$FacetEntry *self, PyObject *args);
          static PyObject *t_GroupFacetCollector$FacetEntry_get__count(t_GroupFacetCollector$FacetEntry *self, void *data);
          static PyObject *t_GroupFacetCollector$FacetEntry_get__value(t_GroupFacetCollector$FacetEntry *self, void *data);
          static PyGetSetDef t_GroupFacetCollector$FacetEntry__fields_[] = {
            DECLARE_GET_FIELD(t_GroupFacetCollector$FacetEntry, count),
            DECLARE_GET_FIELD(t_GroupFacetCollector$FacetEntry, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GroupFacetCollector$FacetEntry__methods_[] = {
            DECLARE_METHOD(t_GroupFacetCollector$FacetEntry, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupFacetCollector$FacetEntry, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupFacetCollector$FacetEntry, equals, METH_VARARGS),
            DECLARE_METHOD(t_GroupFacetCollector$FacetEntry, getCount, METH_NOARGS),
            DECLARE_METHOD(t_GroupFacetCollector$FacetEntry, getValue, METH_NOARGS),
            DECLARE_METHOD(t_GroupFacetCollector$FacetEntry, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_GroupFacetCollector$FacetEntry, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GroupFacetCollector$FacetEntry)[] = {
            { Py_tp_methods, t_GroupFacetCollector$FacetEntry__methods_ },
            { Py_tp_init, (void *) t_GroupFacetCollector$FacetEntry_init_ },
            { Py_tp_getset, t_GroupFacetCollector$FacetEntry__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GroupFacetCollector$FacetEntry)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GroupFacetCollector$FacetEntry, t_GroupFacetCollector$FacetEntry, GroupFacetCollector$FacetEntry);

          void t_GroupFacetCollector$FacetEntry::install(PyObject *module)
          {
            installType(&PY_TYPE(GroupFacetCollector$FacetEntry), &PY_TYPE_DEF(GroupFacetCollector$FacetEntry), module, "GroupFacetCollector$FacetEntry", 0);
          }

          void t_GroupFacetCollector$FacetEntry::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupFacetCollector$FacetEntry), "class_", make_descriptor(GroupFacetCollector$FacetEntry::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupFacetCollector$FacetEntry), "wrapfn_", make_descriptor(t_GroupFacetCollector$FacetEntry::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupFacetCollector$FacetEntry), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GroupFacetCollector$FacetEntry_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GroupFacetCollector$FacetEntry::initializeClass, 1)))
              return NULL;
            return t_GroupFacetCollector$FacetEntry::wrap_Object(GroupFacetCollector$FacetEntry(((t_GroupFacetCollector$FacetEntry *) arg)->object.this$));
          }
          static PyObject *t_GroupFacetCollector$FacetEntry_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GroupFacetCollector$FacetEntry::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GroupFacetCollector$FacetEntry_init_(t_GroupFacetCollector$FacetEntry *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint a1;
            GroupFacetCollector$FacetEntry object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              INT_CALL(object = GroupFacetCollector$FacetEntry(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GroupFacetCollector$FacetEntry_equals(t_GroupFacetCollector$FacetEntry *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(GroupFacetCollector$FacetEntry), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_GroupFacetCollector$FacetEntry_getCount(t_GroupFacetCollector$FacetEntry *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getCount());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_GroupFacetCollector$FacetEntry_getValue(t_GroupFacetCollector$FacetEntry *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getValue());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_GroupFacetCollector$FacetEntry_hashCode(t_GroupFacetCollector$FacetEntry *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(GroupFacetCollector$FacetEntry), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_GroupFacetCollector$FacetEntry_toString(t_GroupFacetCollector$FacetEntry *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(GroupFacetCollector$FacetEntry), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_GroupFacetCollector$FacetEntry_get__count(t_GroupFacetCollector$FacetEntry *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getCount());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_GroupFacetCollector$FacetEntry_get__value(t_GroupFacetCollector$FacetEntry *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getValue());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/OrdTermState.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *OrdTermState::class$ = NULL;
        jmethodID *OrdTermState::mids$ = NULL;
        jfieldID *OrdTermState::fids$ = NULL;
        bool OrdTermState::live$ = false;

        jclass OrdTermState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/OrdTermState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_copyFrom_4291efa1cd29ac2a] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_ord] = env->getFieldID(cls, "ord", "J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OrdTermState::OrdTermState() : ::org::apache::lucene::index::TermState(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void OrdTermState::copyFrom(const ::org::apache::lucene::index::TermState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyFrom_4291efa1cd29ac2a], a0.this$);
        }

        ::java::lang::String OrdTermState::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jlong OrdTermState::_get_ord() const
        {
          return env->getLongField(this$, fids$[fid_ord]);
        }

        void OrdTermState::_set_ord(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_ord], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_OrdTermState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OrdTermState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OrdTermState_init_(t_OrdTermState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OrdTermState_copyFrom(t_OrdTermState *self, PyObject *args);
        static PyObject *t_OrdTermState_toString(t_OrdTermState *self, PyObject *args);
        static PyObject *t_OrdTermState_get__ord(t_OrdTermState *self, void *data);
        static int t_OrdTermState_set__ord(t_OrdTermState *self, PyObject *arg, void *data);

        static PyGetSetDef t_OrdTermState__fields_[] = {
          DECLARE_GETSET_FIELD(t_OrdTermState, ord),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OrdTermState__methods_[] = {
          DECLARE_METHOD(t_OrdTermState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OrdTermState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OrdTermState, copyFrom, METH_VARARGS),
          DECLARE_METHOD(t_OrdTermState, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(OrdTermState)[] = {
          { Py_tp_methods, t_OrdTermState__methods_ },
          { Py_tp_init, (void *) t_OrdTermState_init_ },
          { Py_tp_getset, t_OrdTermState__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(OrdTermState)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::TermState),
          NULL
        };

        DEFINE_TYPE(OrdTermState, t_OrdTermState, OrdTermState);

        void t_OrdTermState::install(PyObject *module)
        {
          installType(&PY_TYPE(OrdTermState), &PY_TYPE_DEF(OrdTermState), module, "OrdTermState", 0);
        }

        void t_OrdTermState::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(OrdTermState), "class_", make_descriptor(OrdTermState::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OrdTermState), "wrapfn_", make_descriptor(t_OrdTermState::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OrdTermState), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OrdTermState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OrdTermState::initializeClass, 1)))
            return NULL;
          return t_OrdTermState::wrap_Object(OrdTermState(((t_OrdTermState *) arg)->object.this$));
        }
        static PyObject *t_OrdTermState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OrdTermState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OrdTermState_init_(t_OrdTermState *self, PyObject *args, PyObject *kwds)
        {
          OrdTermState object((jobject) NULL);

          INT_CALL(object = OrdTermState());
          self->object = object;

          return 0;
        }

        static PyObject *t_OrdTermState_copyFrom(t_OrdTermState *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyFrom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(OrdTermState), (PyObject *) self, "copyFrom", args, 2);
        }

        static PyObject *t_OrdTermState_toString(t_OrdTermState *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(OrdTermState), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_OrdTermState_get__ord(t_OrdTermState *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_ord());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OrdTermState_set__ord(t_OrdTermState *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_ord(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ord", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Mutable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Mutable::class$ = NULL;
          jmethodID *PackedInts$Mutable::mids$ = NULL;
          bool PackedInts$Mutable::live$ = false;

          jclass PackedInts$Mutable::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Mutable");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_fill_19ffe11235bb45e0] = env->getMethodID(cls, "fill", "(IIJ)V");
              mids$[mid_getBitsPerValue_9972fcc56b44e79d] = env->getMethodID(cls, "getBitsPerValue", "()I");
              mids$[mid_save_ead2c38342037c59] = env->getMethodID(cls, "save", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_set_7b2f5b9ddfcb9416] = env->getMethodID(cls, "set", "(IJ)V");
              mids$[mid_set_4c642cf3a1fd0041] = env->getMethodID(cls, "set", "(I[JII)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$Mutable::PackedInts$Mutable() : ::org::apache::lucene::util::packed::PackedInts$Reader(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void PackedInts$Mutable::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
          }

          void PackedInts$Mutable::fill(jint a0, jint a1, jlong a2) const
          {
            env->callVoidMethod(this$, mids$[mid_fill_19ffe11235bb45e0], a0, a1, a2);
          }

          jint PackedInts$Mutable::getBitsPerValue() const
          {
            return env->callIntMethod(this$, mids$[mid_getBitsPerValue_9972fcc56b44e79d]);
          }

          void PackedInts$Mutable::save(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_save_ead2c38342037c59], a0.this$);
          }

          void PackedInts$Mutable::set(jint a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_set_7b2f5b9ddfcb9416], a0, a1);
          }

          jint PackedInts$Mutable::set(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_set_4c642cf3a1fd0041], a0, a1.this$, a2, a3);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Mutable_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Mutable_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$Mutable_init_(t_PackedInts$Mutable *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts$Mutable_clear(t_PackedInts$Mutable *self);
          static PyObject *t_PackedInts$Mutable_fill(t_PackedInts$Mutable *self, PyObject *args);
          static PyObject *t_PackedInts$Mutable_getBitsPerValue(t_PackedInts$Mutable *self);
          static PyObject *t_PackedInts$Mutable_save(t_PackedInts$Mutable *self, PyObject *arg);
          static PyObject *t_PackedInts$Mutable_set(t_PackedInts$Mutable *self, PyObject *args);
          static PyObject *t_PackedInts$Mutable_get__bitsPerValue(t_PackedInts$Mutable *self, void *data);
          static PyGetSetDef t_PackedInts$Mutable__fields_[] = {
            DECLARE_GET_FIELD(t_PackedInts$Mutable, bitsPerValue),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedInts$Mutable__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Mutable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Mutable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Mutable, clear, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Mutable, fill, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Mutable, getBitsPerValue, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Mutable, save, METH_O),
            DECLARE_METHOD(t_PackedInts$Mutable, set, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PackedInts$Mutable)[] = {
            { Py_tp_methods, t_PackedInts$Mutable__methods_ },
            { Py_tp_init, (void *) t_PackedInts$Mutable_init_ },
            { Py_tp_getset, t_PackedInts$Mutable__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PackedInts$Mutable)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::packed::PackedInts$Reader),
            NULL
          };

          DEFINE_TYPE(PackedInts$Mutable, t_PackedInts$Mutable, PackedInts$Mutable);

          void t_PackedInts$Mutable::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Mutable), &PY_TYPE_DEF(PackedInts$Mutable), module, "PackedInts$Mutable", 0);
          }

          void t_PackedInts$Mutable::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$Mutable), "class_", make_descriptor(PackedInts$Mutable::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$Mutable), "wrapfn_", make_descriptor(t_PackedInts$Mutable::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$Mutable), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Mutable_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Mutable::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Mutable::wrap_Object(PackedInts$Mutable(((t_PackedInts$Mutable *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Mutable_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Mutable::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$Mutable_init_(t_PackedInts$Mutable *self, PyObject *args, PyObject *kwds)
          {
            PackedInts$Mutable object((jobject) NULL);

            INT_CALL(object = PackedInts$Mutable());
            self->object = object;

            return 0;
          }

          static PyObject *t_PackedInts$Mutable_clear(t_PackedInts$Mutable *self)
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          static PyObject *t_PackedInts$Mutable_fill(t_PackedInts$Mutable *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jlong a2;

            if (!parseArgs(args, "IIJ", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.fill(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "fill", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Mutable_getBitsPerValue(t_PackedInts$Mutable *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBitsPerValue());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Mutable_save(t_PackedInts$Mutable *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.save(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "save", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Mutable_set(t_PackedInts$Mutable *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jint a0;
                jlong a1;

                if (!parseArgs(args, "IJ", &a0, &a1))
                {
                  OBJ_CALL(self->object.set(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.set(a0, a1, a2, a3));
                  return PyLong_FromLong((long) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "set", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Mutable_get__bitsPerValue(t_PackedInts$Mutable *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBitsPerValue());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermStatistics::class$ = NULL;
        jmethodID *TermStatistics::mids$ = NULL;
        bool TermStatistics::live$ = false;

        jclass TermStatistics::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermStatistics");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_3ec8c7dd8c4e12f4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;JJ)V");
            mids$[mid_docFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "docFreq", "()J");
            mids$[mid_term_7af2ea2e37ce82b8] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_totalTermFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "totalTermFreq", "()J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermStatistics::TermStatistics(const ::org::apache::lucene::util::BytesRef & a0, jlong a1, jlong a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3ec8c7dd8c4e12f4, a0.this$, a1, a2)) {}

        jlong TermStatistics::docFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_docFreq_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::util::BytesRef TermStatistics::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_7af2ea2e37ce82b8]));
        }

        ::java::lang::String TermStatistics::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jlong TermStatistics::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermStatistics_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermStatistics_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermStatistics_init_(t_TermStatistics *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermStatistics_docFreq(t_TermStatistics *self);
        static PyObject *t_TermStatistics_term(t_TermStatistics *self);
        static PyObject *t_TermStatistics_toString(t_TermStatistics *self, PyObject *args);
        static PyObject *t_TermStatistics_totalTermFreq(t_TermStatistics *self);

        static PyMethodDef t_TermStatistics__methods_[] = {
          DECLARE_METHOD(t_TermStatistics, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermStatistics, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermStatistics, docFreq, METH_NOARGS),
          DECLARE_METHOD(t_TermStatistics, term, METH_NOARGS),
          DECLARE_METHOD(t_TermStatistics, toString, METH_VARARGS),
          DECLARE_METHOD(t_TermStatistics, totalTermFreq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TermStatistics)[] = {
          { Py_tp_methods, t_TermStatistics__methods_ },
          { Py_tp_init, (void *) t_TermStatistics_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TermStatistics)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(TermStatistics, t_TermStatistics, TermStatistics);

        void t_TermStatistics::install(PyObject *module)
        {
          installType(&PY_TYPE(TermStatistics), &PY_TYPE_DEF(TermStatistics), module, "TermStatistics", 0);
        }

        void t_TermStatistics::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermStatistics), "class_", make_descriptor(TermStatistics::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermStatistics), "wrapfn_", make_descriptor(t_TermStatistics::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermStatistics), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermStatistics_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermStatistics::initializeClass, 1)))
            return NULL;
          return t_TermStatistics::wrap_Object(TermStatistics(((t_TermStatistics *) arg)->object.this$));
        }
        static PyObject *t_TermStatistics_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermStatistics::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermStatistics_init_(t_TermStatistics *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong a1;
          jlong a2;
          TermStatistics object((jobject) NULL);

          if (!parseArgs(args, "kJJ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = TermStatistics(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermStatistics_docFreq(t_TermStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.docFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TermStatistics_term(t_TermStatistics *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.term());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermStatistics_toString(t_TermStatistics *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(TermStatistics), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TermStatistics_totalTermFreq(t_TermStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ChecksumIndexInput::class$ = NULL;
        jmethodID *ChecksumIndexInput::mids$ = NULL;
        bool ChecksumIndexInput::live$ = false;

        jclass ChecksumIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ChecksumIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getChecksum_2e5ae9edcb9b072f] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_seek_9c778c9bce6694df] = env->getMethodID(cls, "seek", "(J)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong ChecksumIndexInput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_2e5ae9edcb9b072f]);
        }

        void ChecksumIndexInput::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_9c778c9bce6694df], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ChecksumIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ChecksumIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ChecksumIndexInput_getChecksum(t_ChecksumIndexInput *self);
        static PyObject *t_ChecksumIndexInput_seek(t_ChecksumIndexInput *self, PyObject *args);
        static PyObject *t_ChecksumIndexInput_get__checksum(t_ChecksumIndexInput *self, void *data);
        static PyGetSetDef t_ChecksumIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_ChecksumIndexInput, checksum),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ChecksumIndexInput__methods_[] = {
          DECLARE_METHOD(t_ChecksumIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ChecksumIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ChecksumIndexInput, getChecksum, METH_NOARGS),
          DECLARE_METHOD(t_ChecksumIndexInput, seek, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ChecksumIndexInput)[] = {
          { Py_tp_methods, t_ChecksumIndexInput__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_ChecksumIndexInput__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ChecksumIndexInput)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::IndexInput),
          NULL
        };

        DEFINE_TYPE(ChecksumIndexInput, t_ChecksumIndexInput, ChecksumIndexInput);

        void t_ChecksumIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(ChecksumIndexInput), &PY_TYPE_DEF(ChecksumIndexInput), module, "ChecksumIndexInput", 0);
        }

        void t_ChecksumIndexInput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ChecksumIndexInput), "class_", make_descriptor(ChecksumIndexInput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ChecksumIndexInput), "wrapfn_", make_descriptor(t_ChecksumIndexInput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ChecksumIndexInput), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ChecksumIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ChecksumIndexInput::initializeClass, 1)))
            return NULL;
          return t_ChecksumIndexInput::wrap_Object(ChecksumIndexInput(((t_ChecksumIndexInput *) arg)->object.this$));
        }
        static PyObject *t_ChecksumIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ChecksumIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ChecksumIndexInput_getChecksum(t_ChecksumIndexInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_ChecksumIndexInput_seek(t_ChecksumIndexInput *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ChecksumIndexInput), (PyObject *) self, "seek", args, 2);
        }

        static PyObject *t_ChecksumIndexInput_get__checksum(t_ChecksumIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SimpleFragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SimpleFragListBuilder::class$ = NULL;
          jmethodID *SimpleFragListBuilder::mids$ = NULL;
          bool SimpleFragListBuilder::live$ = false;

          jclass SimpleFragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SimpleFragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_createFieldFragList_2f27b0bbe6847286] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleFragListBuilder::SimpleFragListBuilder() : ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          SimpleFragListBuilder::SimpleFragListBuilder(jint a0) : ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          ::org::apache::lucene::search::vectorhighlight::FieldFragList SimpleFragListBuilder::createFieldFragList(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList & a0, jint a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->callObjectMethod(this$, mids$[mid_createFieldFragList_2f27b0bbe6847286], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SimpleFragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleFragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleFragListBuilder_init_(t_SimpleFragListBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleFragListBuilder_createFieldFragList(t_SimpleFragListBuilder *self, PyObject *args);

          static PyMethodDef t_SimpleFragListBuilder__methods_[] = {
            DECLARE_METHOD(t_SimpleFragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragListBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragListBuilder, createFieldFragList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleFragListBuilder)[] = {
            { Py_tp_methods, t_SimpleFragListBuilder__methods_ },
            { Py_tp_init, (void *) t_SimpleFragListBuilder_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleFragListBuilder)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder),
            NULL
          };

          DEFINE_TYPE(SimpleFragListBuilder, t_SimpleFragListBuilder, SimpleFragListBuilder);

          void t_SimpleFragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleFragListBuilder), &PY_TYPE_DEF(SimpleFragListBuilder), module, "SimpleFragListBuilder", 0);
          }

          void t_SimpleFragListBuilder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFragListBuilder), "class_", make_descriptor(SimpleFragListBuilder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFragListBuilder), "wrapfn_", make_descriptor(t_SimpleFragListBuilder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFragListBuilder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleFragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleFragListBuilder::initializeClass, 1)))
              return NULL;
            return t_SimpleFragListBuilder::wrap_Object(SimpleFragListBuilder(((t_SimpleFragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_SimpleFragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleFragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleFragListBuilder_init_(t_SimpleFragListBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleFragListBuilder object((jobject) NULL);

                INT_CALL(object = SimpleFragListBuilder());
                self->object = object;
                break;
              }
             case 1:
              {
                jint a0;
                SimpleFragListBuilder object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = SimpleFragListBuilder(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleFragListBuilder_createFieldFragList(t_SimpleFragListBuilder *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::vectorhighlight::FieldFragList result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createFieldFragList(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldFragList::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleFragListBuilder), (PyObject *) self, "createFieldFragList", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *DocValuesProducer::class$ = NULL;
        jmethodID *DocValuesProducer::mids$ = NULL;
        bool DocValuesProducer::live$ = false;

        jclass DocValuesProducer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/DocValuesProducer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_getBinary_cc93390a800a98c7] = env->getMethodID(cls, "getBinary", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getMergeInstance_2703cdf07eabd0a4] = env->getMethodID(cls, "getMergeInstance", "()Lorg/apache/lucene/codecs/DocValuesProducer;");
            mids$[mid_getNumeric_d63b818fc8746ddc] = env->getMethodID(cls, "getNumeric", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSorted_c19eb99297e55136] = env->getMethodID(cls, "getSorted", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumeric_0c331c793dd9b6b8] = env->getMethodID(cls, "getSortedNumeric", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSet_5c6b5be0c46973db] = env->getMethodID(cls, "getSortedSet", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/SortedSetDocValues;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void DocValuesProducer::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
        }

        ::org::apache::lucene::index::BinaryDocValues DocValuesProducer::getBinary(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinary_cc93390a800a98c7], a0.this$));
        }

        DocValuesProducer DocValuesProducer::getMergeInstance() const
        {
          return DocValuesProducer(env->callObjectMethod(this$, mids$[mid_getMergeInstance_2703cdf07eabd0a4]));
        }

        ::org::apache::lucene::index::NumericDocValues DocValuesProducer::getNumeric(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumeric_d63b818fc8746ddc], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues DocValuesProducer::getSorted(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSorted_c19eb99297e55136], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues DocValuesProducer::getSortedNumeric(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumeric_0c331c793dd9b6b8], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues DocValuesProducer::getSortedSet(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSet_5c6b5be0c46973db], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_DocValuesProducer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesProducer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesProducer_checkIntegrity(t_DocValuesProducer *self);
        static PyObject *t_DocValuesProducer_getBinary(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getMergeInstance(t_DocValuesProducer *self);
        static PyObject *t_DocValuesProducer_getNumeric(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getSorted(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getSortedNumeric(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getSortedSet(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_get__mergeInstance(t_DocValuesProducer *self, void *data);
        static PyGetSetDef t_DocValuesProducer__fields_[] = {
          DECLARE_GET_FIELD(t_DocValuesProducer, mergeInstance),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocValuesProducer__methods_[] = {
          DECLARE_METHOD(t_DocValuesProducer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesProducer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesProducer, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesProducer, getBinary, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getMergeInstance, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesProducer, getNumeric, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getSorted, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getSortedNumeric, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getSortedSet, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocValuesProducer)[] = {
          { Py_tp_methods, t_DocValuesProducer__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_DocValuesProducer__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocValuesProducer)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DocValuesProducer, t_DocValuesProducer, DocValuesProducer);

        void t_DocValuesProducer::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesProducer), &PY_TYPE_DEF(DocValuesProducer), module, "DocValuesProducer", 0);
        }

        void t_DocValuesProducer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesProducer), "class_", make_descriptor(DocValuesProducer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesProducer), "wrapfn_", make_descriptor(t_DocValuesProducer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesProducer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesProducer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesProducer::initializeClass, 1)))
            return NULL;
          return t_DocValuesProducer::wrap_Object(DocValuesProducer(((t_DocValuesProducer *) arg)->object.this$));
        }
        static PyObject *t_DocValuesProducer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesProducer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesProducer_checkIntegrity(t_DocValuesProducer *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_DocValuesProducer_getBinary(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getBinary(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getBinary", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getMergeInstance(t_DocValuesProducer *self)
        {
          DocValuesProducer result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergeInstance());
          return t_DocValuesProducer::wrap_Object(result);
        }

        static PyObject *t_DocValuesProducer_getNumeric(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getNumeric(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getNumeric", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getSorted(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getSorted(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSorted", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getSortedNumeric(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumeric(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedNumeric", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getSortedSet(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getSortedSet(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedSet", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_get__mergeInstance(t_DocValuesProducer *self, void *data)
        {
          DocValuesProducer value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeInstance());
          return t_DocValuesProducer::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexFormatTooOldException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "java/lang/Integer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexFormatTooOldException::class$ = NULL;
        jmethodID *IndexFormatTooOldException::mids$ = NULL;
        bool IndexFormatTooOldException::live$ = false;

        jclass IndexFormatTooOldException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexFormatTooOldException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_15b72f6a44ff93f2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_init$_5aa4f44d6ba79c5f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;Ljava/lang/String;)V");
            mids$[mid_init$_76b561b3dd9414f1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;III)V");
            mids$[mid_init$_856da08abc13bb8d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;III)V");
            mids$[mid_getMaxVersion_44afe7bc382a8996] = env->getMethodID(cls, "getMaxVersion", "()Ljava/lang/Integer;");
            mids$[mid_getMinVersion_44afe7bc382a8996] = env->getMethodID(cls, "getMinVersion", "()Ljava/lang/Integer;");
            mids$[mid_getReason_db9b55ba01e03e4b] = env->getMethodID(cls, "getReason", "()Ljava/lang/String;");
            mids$[mid_getResourceDescription_db9b55ba01e03e4b] = env->getMethodID(cls, "getResourceDescription", "()Ljava/lang/String;");
            mids$[mid_getVersion_44afe7bc382a8996] = env->getMethodID(cls, "getVersion", "()Ljava/lang/Integer;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexFormatTooOldException::IndexFormatTooOldException(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_15b72f6a44ff93f2, a0.this$, a1.this$)) {}

        IndexFormatTooOldException::IndexFormatTooOldException(const ::org::apache::lucene::store::DataInput & a0, const ::java::lang::String & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5aa4f44d6ba79c5f, a0.this$, a1.this$)) {}

        IndexFormatTooOldException::IndexFormatTooOldException(const ::java::lang::String & a0, jint a1, jint a2, jint a3) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_76b561b3dd9414f1, a0.this$, a1, a2, a3)) {}

        IndexFormatTooOldException::IndexFormatTooOldException(const ::org::apache::lucene::store::DataInput & a0, jint a1, jint a2, jint a3) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_856da08abc13bb8d, a0.this$, a1, a2, a3)) {}

        ::java::lang::Integer IndexFormatTooOldException::getMaxVersion() const
        {
          return ::java::lang::Integer(env->callObjectMethod(this$, mids$[mid_getMaxVersion_44afe7bc382a8996]));
        }

        ::java::lang::Integer IndexFormatTooOldException::getMinVersion() const
        {
          return ::java::lang::Integer(env->callObjectMethod(this$, mids$[mid_getMinVersion_44afe7bc382a8996]));
        }

        ::java::lang::String IndexFormatTooOldException::getReason() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getReason_db9b55ba01e03e4b]));
        }

        ::java::lang::String IndexFormatTooOldException::getResourceDescription() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getResourceDescription_db9b55ba01e03e4b]));
        }

        ::java::lang::Integer IndexFormatTooOldException::getVersion() const
        {
          return ::java::lang::Integer(env->callObjectMethod(this$, mids$[mid_getVersion_44afe7bc382a8996]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexFormatTooOldException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFormatTooOldException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexFormatTooOldException_init_(t_IndexFormatTooOldException *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexFormatTooOldException_getMaxVersion(t_IndexFormatTooOldException *self);
        static PyObject *t_IndexFormatTooOldException_getMinVersion(t_IndexFormatTooOldException *self);
        static PyObject *t_IndexFormatTooOldException_getReason(t_IndexFormatTooOldException *self);
        static PyObject *t_IndexFormatTooOldException_getResourceDescription(t_IndexFormatTooOldException *self);
        static PyObject *t_IndexFormatTooOldException_getVersion(t_IndexFormatTooOldException *self);
        static PyObject *t_IndexFormatTooOldException_get__maxVersion(t_IndexFormatTooOldException *self, void *data);
        static PyObject *t_IndexFormatTooOldException_get__minVersion(t_IndexFormatTooOldException *self, void *data);
        static PyObject *t_IndexFormatTooOldException_get__reason(t_IndexFormatTooOldException *self, void *data);
        static PyObject *t_IndexFormatTooOldException_get__resourceDescription(t_IndexFormatTooOldException *self, void *data);
        static PyObject *t_IndexFormatTooOldException_get__version(t_IndexFormatTooOldException *self, void *data);
        static PyGetSetDef t_IndexFormatTooOldException__fields_[] = {
          DECLARE_GET_FIELD(t_IndexFormatTooOldException, maxVersion),
          DECLARE_GET_FIELD(t_IndexFormatTooOldException, minVersion),
          DECLARE_GET_FIELD(t_IndexFormatTooOldException, reason),
          DECLARE_GET_FIELD(t_IndexFormatTooOldException, resourceDescription),
          DECLARE_GET_FIELD(t_IndexFormatTooOldException, version),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexFormatTooOldException__methods_[] = {
          DECLARE_METHOD(t_IndexFormatTooOldException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFormatTooOldException, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFormatTooOldException, getMaxVersion, METH_NOARGS),
          DECLARE_METHOD(t_IndexFormatTooOldException, getMinVersion, METH_NOARGS),
          DECLARE_METHOD(t_IndexFormatTooOldException, getReason, METH_NOARGS),
          DECLARE_METHOD(t_IndexFormatTooOldException, getResourceDescription, METH_NOARGS),
          DECLARE_METHOD(t_IndexFormatTooOldException, getVersion, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexFormatTooOldException)[] = {
          { Py_tp_methods, t_IndexFormatTooOldException__methods_ },
          { Py_tp_init, (void *) t_IndexFormatTooOldException_init_ },
          { Py_tp_getset, t_IndexFormatTooOldException__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexFormatTooOldException)[] = {
          &PY_TYPE_DEF(::java::io::IOException),
          NULL
        };

        DEFINE_TYPE(IndexFormatTooOldException, t_IndexFormatTooOldException, IndexFormatTooOldException);

        void t_IndexFormatTooOldException::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexFormatTooOldException), &PY_TYPE_DEF(IndexFormatTooOldException), module, "IndexFormatTooOldException", 0);
        }

        void t_IndexFormatTooOldException::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexFormatTooOldException), "class_", make_descriptor(IndexFormatTooOldException::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexFormatTooOldException), "wrapfn_", make_descriptor(t_IndexFormatTooOldException::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexFormatTooOldException), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexFormatTooOldException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexFormatTooOldException::initializeClass, 1)))
            return NULL;
          return t_IndexFormatTooOldException::wrap_Object(IndexFormatTooOldException(((t_IndexFormatTooOldException *) arg)->object.this$));
        }
        static PyObject *t_IndexFormatTooOldException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexFormatTooOldException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexFormatTooOldException_init_(t_IndexFormatTooOldException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              IndexFormatTooOldException object((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                INT_CALL(object = IndexFormatTooOldException(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              IndexFormatTooOldException object((jobject) NULL);

              if (!parseArgs(args, "ks", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
              {
                INT_CALL(object = IndexFormatTooOldException(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              IndexFormatTooOldException object((jobject) NULL);

              if (!parseArgs(args, "sIII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IndexFormatTooOldException(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              IndexFormatTooOldException object((jobject) NULL);

              if (!parseArgs(args, "kIII", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IndexFormatTooOldException(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexFormatTooOldException_getMaxVersion(t_IndexFormatTooOldException *self)
        {
          ::java::lang::Integer result((jobject) NULL);
          OBJ_CALL(result = self->object.getMaxVersion());
          return ::java::lang::t_Integer::wrap_Object(result);
        }

        static PyObject *t_IndexFormatTooOldException_getMinVersion(t_IndexFormatTooOldException *self)
        {
          ::java::lang::Integer result((jobject) NULL);
          OBJ_CALL(result = self->object.getMinVersion());
          return ::java::lang::t_Integer::wrap_Object(result);
        }

        static PyObject *t_IndexFormatTooOldException_getReason(t_IndexFormatTooOldException *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getReason());
          return j2p(result);
        }

        static PyObject *t_IndexFormatTooOldException_getResourceDescription(t_IndexFormatTooOldException *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getResourceDescription());
          return j2p(result);
        }

        static PyObject *t_IndexFormatTooOldException_getVersion(t_IndexFormatTooOldException *self)
        {
          ::java::lang::Integer result((jobject) NULL);
          OBJ_CALL(result = self->object.getVersion());
          return ::java::lang::t_Integer::wrap_Object(result);
        }

        static PyObject *t_IndexFormatTooOldException_get__maxVersion(t_IndexFormatTooOldException *self, void *data)
        {
          ::java::lang::Integer value((jobject) NULL);
          OBJ_CALL(value = self->object.getMaxVersion());
          return ::java::lang::t_Integer::wrap_Object(value);
        }

        static PyObject *t_IndexFormatTooOldException_get__minVersion(t_IndexFormatTooOldException *self, void *data)
        {
          ::java::lang::Integer value((jobject) NULL);
          OBJ_CALL(value = self->object.getMinVersion());
          return ::java::lang::t_Integer::wrap_Object(value);
        }

        static PyObject *t_IndexFormatTooOldException_get__reason(t_IndexFormatTooOldException *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getReason());
          return j2p(value);
        }

        static PyObject *t_IndexFormatTooOldException_get__resourceDescription(t_IndexFormatTooOldException *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getResourceDescription());
          return j2p(value);
        }

        static PyObject *t_IndexFormatTooOldException_get__version(t_IndexFormatTooOldException *self, void *data)
        {
          ::java::lang::Integer value((jobject) NULL);
          OBJ_CALL(value = self->object.getVersion());
          return ::java::lang::t_Integer::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/SpanishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *SpanishStemmer::class$ = NULL;
        jmethodID *SpanishStemmer::mids$ = NULL;
        bool SpanishStemmer::live$ = false;

        jclass SpanishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/SpanishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SpanishStemmer::SpanishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean SpanishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint SpanishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean SpanishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_SpanishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SpanishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SpanishStemmer_init_(t_SpanishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SpanishStemmer_equals(t_SpanishStemmer *self, PyObject *args);
        static PyObject *t_SpanishStemmer_hashCode(t_SpanishStemmer *self, PyObject *args);
        static PyObject *t_SpanishStemmer_stem(t_SpanishStemmer *self, PyObject *args);

        static PyMethodDef t_SpanishStemmer__methods_[] = {
          DECLARE_METHOD(t_SpanishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SpanishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SpanishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_SpanishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SpanishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SpanishStemmer)[] = {
          { Py_tp_methods, t_SpanishStemmer__methods_ },
          { Py_tp_init, (void *) t_SpanishStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SpanishStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(SpanishStemmer, t_SpanishStemmer, SpanishStemmer);

        void t_SpanishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(SpanishStemmer), &PY_TYPE_DEF(SpanishStemmer), module, "SpanishStemmer", 0);
        }

        void t_SpanishStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishStemmer), "class_", make_descriptor(SpanishStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishStemmer), "wrapfn_", make_descriptor(t_SpanishStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SpanishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SpanishStemmer::initializeClass, 1)))
            return NULL;
          return t_SpanishStemmer::wrap_Object(SpanishStemmer(((t_SpanishStemmer *) arg)->object.this$));
        }
        static PyObject *t_SpanishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SpanishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SpanishStemmer_init_(t_SpanishStemmer *self, PyObject *args, PyObject *kwds)
        {
          SpanishStemmer object((jobject) NULL);

          INT_CALL(object = SpanishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_SpanishStemmer_equals(t_SpanishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(SpanishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SpanishStemmer_hashCode(t_SpanishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SpanishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SpanishStemmer_stem(t_SpanishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(SpanishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ProximityQueryNode::class$ = NULL;
              jmethodID *ProximityQueryNode::mids$ = NULL;
              bool ProximityQueryNode::live$ = false;

              jclass ProximityQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_51d325d819715a80] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Ljava/lang/CharSequence;Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;Z)V");
                  mids$[mid_init$_6a67167bf68f4ac6] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Ljava/lang/CharSequence;Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;IZ)V");
                  mids$[mid_cloneTree_7f4134ae4682ace0] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getDistance_9972fcc56b44e79d] = env->getMethodID(cls, "getDistance", "()I");
                  mids$[mid_getField_ba44900ab7d793b9] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getFieldAsString_db9b55ba01e03e4b] = env->getMethodID(cls, "getFieldAsString", "()Ljava/lang/String;");
                  mids$[mid_getProximityType_e6a06355744fa21c] = env->getMethodID(cls, "getProximityType", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;");
                  mids$[mid_isInOrder_8454bd5aa23fd11e] = env->getMethodID(cls, "isInOrder", "()Z");
                  mids$[mid_setField_4b7f5e38f806ae55] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ProximityQueryNode::ProximityQueryNode(const ::java::util::List & a0, const ::java::lang::CharSequence & a1, const ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type & a2, jboolean a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_51d325d819715a80, a0.this$, a1.this$, a2.this$, a3)) {}

              ProximityQueryNode::ProximityQueryNode(const ::java::util::List & a0, const ::java::lang::CharSequence & a1, const ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type & a2, jint a3, jboolean a4) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_6a67167bf68f4ac6, a0.this$, a1.this$, a2.this$, a3, a4)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode ProximityQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_7f4134ae4682ace0]));
              }

              jint ProximityQueryNode::getDistance() const
              {
                return env->callIntMethod(this$, mids$[mid_getDistance_9972fcc56b44e79d]);
              }

              ::java::lang::CharSequence ProximityQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_ba44900ab7d793b9]));
              }

              ::java::lang::String ProximityQueryNode::getFieldAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldAsString_db9b55ba01e03e4b]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type ProximityQueryNode::getProximityType() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type(env->callObjectMethod(this$, mids$[mid_getProximityType_e6a06355744fa21c]));
              }

              jboolean ProximityQueryNode::isInOrder() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isInOrder_8454bd5aa23fd11e]);
              }

              void ProximityQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_4b7f5e38f806ae55], a0.this$);
              }

              ::java::lang::CharSequence ProximityQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String ProximityQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$ProximityType.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ProximityQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ProximityQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ProximityQueryNode_init_(t_ProximityQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_ProximityQueryNode_cloneTree(t_ProximityQueryNode *self, PyObject *args);
              static PyObject *t_ProximityQueryNode_getDistance(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_getField(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_getFieldAsString(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_getProximityType(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_isInOrder(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_setField(t_ProximityQueryNode *self, PyObject *arg);
              static PyObject *t_ProximityQueryNode_toQueryString(t_ProximityQueryNode *self, PyObject *args);
              static PyObject *t_ProximityQueryNode_toString(t_ProximityQueryNode *self, PyObject *args);
              static PyObject *t_ProximityQueryNode_get__distance(t_ProximityQueryNode *self, void *data);
              static PyObject *t_ProximityQueryNode_get__field(t_ProximityQueryNode *self, void *data);
              static int t_ProximityQueryNode_set__field(t_ProximityQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_ProximityQueryNode_get__fieldAsString(t_ProximityQueryNode *self, void *data);
              static PyObject *t_ProximityQueryNode_get__inOrder(t_ProximityQueryNode *self, void *data);
              static PyObject *t_ProximityQueryNode_get__proximityType(t_ProximityQueryNode *self, void *data);
              static PyGetSetDef t_ProximityQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_ProximityQueryNode, distance),
                DECLARE_GETSET_FIELD(t_ProximityQueryNode, field),
                DECLARE_GET_FIELD(t_ProximityQueryNode, fieldAsString),
                DECLARE_GET_FIELD(t_ProximityQueryNode, inOrder),
                DECLARE_GET_FIELD(t_ProximityQueryNode, proximityType),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ProximityQueryNode__methods_[] = {
                DECLARE_METHOD(t_ProximityQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_ProximityQueryNode, getDistance, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, getFieldAsString, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, getProximityType, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, isInOrder, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, setField, METH_O),
                DECLARE_METHOD(t_ProximityQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_ProximityQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(ProximityQueryNode)[] = {
                { Py_tp_methods, t_ProximityQueryNode__methods_ },
                { Py_tp_init, (void *) t_ProximityQueryNode_init_ },
                { Py_tp_getset, t_ProximityQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(ProximityQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode),
                NULL
              };

              DEFINE_TYPE(ProximityQueryNode, t_ProximityQueryNode, ProximityQueryNode);

              void t_ProximityQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(ProximityQueryNode), &PY_TYPE_DEF(ProximityQueryNode), module, "ProximityQueryNode", 0);
                PyObject_SetAttrString((PyObject *) PY_TYPE(ProximityQueryNode), "ProximityType", make_descriptor(&PY_TYPE_DEF(ProximityQueryNode$ProximityType)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ProximityQueryNode), "Type", make_descriptor(&PY_TYPE_DEF(ProximityQueryNode$Type)));
              }

              void t_ProximityQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(ProximityQueryNode), "class_", make_descriptor(ProximityQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ProximityQueryNode), "wrapfn_", make_descriptor(t_ProximityQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ProximityQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ProximityQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ProximityQueryNode::initializeClass, 1)))
                  return NULL;
                return t_ProximityQueryNode::wrap_Object(ProximityQueryNode(((t_ProximityQueryNode *) arg)->object.this$));
              }
              static PyObject *t_ProximityQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ProximityQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ProximityQueryNode_init_(t_ProximityQueryNode *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 4:
                  {
                    ::java::util::List a0((jobject) NULL);
                    PyTypeObject **p0;
                    ::java::lang::CharSequence a1((jobject) NULL);
                    ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type a2((jobject) NULL);
                    PyTypeObject **p2;
                    jboolean a3;
                    ProximityQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "KOKZ", ::java::util::List::initializeClass, ::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &p2, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::parameters_, &a3))
                    {
                      INT_CALL(object = ProximityQueryNode(a0, a1, a2, a3));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 5:
                  {
                    ::java::util::List a0((jobject) NULL);
                    PyTypeObject **p0;
                    ::java::lang::CharSequence a1((jobject) NULL);
                    ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type a2((jobject) NULL);
                    PyTypeObject **p2;
                    jint a3;
                    jboolean a4;
                    ProximityQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "KOKIZ", ::java::util::List::initializeClass, ::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &p2, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::parameters_, &a3, &a4))
                    {
                      INT_CALL(object = ProximityQueryNode(a0, a1, a2, a3, a4));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_ProximityQueryNode_cloneTree(t_ProximityQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(ProximityQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_ProximityQueryNode_getDistance(t_ProximityQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getDistance());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_ProximityQueryNode_getField(t_ProximityQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_ProximityQueryNode_getFieldAsString(t_ProximityQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getFieldAsString());
                return j2p(result);
              }

              static PyObject *t_ProximityQueryNode_getProximityType(t_ProximityQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type result((jobject) NULL);
                OBJ_CALL(result = self->object.getProximityType());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::wrap_Object(result);
              }

              static PyObject *t_ProximityQueryNode_isInOrder(t_ProximityQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isInOrder());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_ProximityQueryNode_setField(t_ProximityQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_ProximityQueryNode_toQueryString(t_ProximityQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(ProximityQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_ProximityQueryNode_toString(t_ProximityQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(ProximityQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_ProximityQueryNode_get__distance(t_ProximityQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getDistance());
                return PyLong_FromLong((long) value);
              }

              static PyObject *t_ProximityQueryNode_get__field(t_ProximityQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_ProximityQueryNode_set__field(t_ProximityQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_ProximityQueryNode_get__fieldAsString(t_ProximityQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getFieldAsString());
                return j2p(value);
              }

              static PyObject *t_ProximityQueryNode_get__inOrder(t_ProximityQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isInOrder());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_ProximityQueryNode_get__proximityType(t_ProximityQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type value((jobject) NULL);
                OBJ_CALL(value = self->object.getProximityType());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$LiveDocStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$LiveDocStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$LiveDocStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$LiveDocStatus::fids$ = NULL;
        bool CheckIndex$Status$LiveDocStatus::live$ = false;

        jclass CheckIndex$Status$LiveDocStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$LiveDocStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_numDeleted] = env->getFieldID(cls, "numDeleted", "I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Throwable CheckIndex$Status$LiveDocStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$LiveDocStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jint CheckIndex$Status$LiveDocStatus::_get_numDeleted() const
        {
          return env->getIntField(this$, fids$[fid_numDeleted]);
        }

        void CheckIndex$Status$LiveDocStatus::_set_numDeleted(jint a0) const
        {
          env->setIntField(this$, fids$[fid_numDeleted], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$LiveDocStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$LiveDocStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$LiveDocStatus_get__error(t_CheckIndex$Status$LiveDocStatus *self, void *data);
        static int t_CheckIndex$Status$LiveDocStatus_set__error(t_CheckIndex$Status$LiveDocStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$LiveDocStatus_get__numDeleted(t_CheckIndex$Status$LiveDocStatus *self, void *data);
        static int t_CheckIndex$Status$LiveDocStatus_set__numDeleted(t_CheckIndex$Status$LiveDocStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$LiveDocStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$LiveDocStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$LiveDocStatus, numDeleted),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$LiveDocStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$LiveDocStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$LiveDocStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CheckIndex$Status$LiveDocStatus)[] = {
          { Py_tp_methods, t_CheckIndex$Status$LiveDocStatus__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_CheckIndex$Status$LiveDocStatus__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CheckIndex$Status$LiveDocStatus)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CheckIndex$Status$LiveDocStatus, t_CheckIndex$Status$LiveDocStatus, CheckIndex$Status$LiveDocStatus);

        void t_CheckIndex$Status$LiveDocStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$LiveDocStatus), &PY_TYPE_DEF(CheckIndex$Status$LiveDocStatus), module, "CheckIndex$Status$LiveDocStatus", 0);
        }

        void t_CheckIndex$Status$LiveDocStatus::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$LiveDocStatus), "class_", make_descriptor(CheckIndex$Status$LiveDocStatus::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$LiveDocStatus), "wrapfn_", make_descriptor(t_CheckIndex$Status$LiveDocStatus::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$LiveDocStatus), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$LiveDocStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$LiveDocStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$LiveDocStatus::wrap_Object(CheckIndex$Status$LiveDocStatus(((t_CheckIndex$Status$LiveDocStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$LiveDocStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$LiveDocStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$LiveDocStatus_get__error(t_CheckIndex$Status$LiveDocStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$LiveDocStatus_set__error(t_CheckIndex$Status$LiveDocStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$LiveDocStatus_get__numDeleted(t_CheckIndex$Status$LiveDocStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numDeleted());
          return PyLong_FromLong((long) value);
        }
        static int t_CheckIndex$Status$LiveDocStatus_set__numDeleted(t_CheckIndex$Status$LiveDocStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_numDeleted(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "numDeleted", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/dict/CharacterDefinition.h"
#include "org/apache/lucene/analysis/ko/dict/CharacterDefinition.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace dict {

            ::java::lang::Class *CharacterDefinition::class$ = NULL;
            jmethodID *CharacterDefinition::mids$ = NULL;
            bool CharacterDefinition::live$ = false;
            jbyte CharacterDefinition::ALPHA = (jbyte) 0;
            jint CharacterDefinition::CLASS_COUNT = (jint) 0;
            jbyte CharacterDefinition::CYRILLIC = (jbyte) 0;
            jbyte CharacterDefinition::DEFAULT = (jbyte) 0;
            ::java::lang::String *CharacterDefinition::FILENAME_SUFFIX = NULL;
            jbyte CharacterDefinition::GREEK = (jbyte) 0;
            jbyte CharacterDefinition::HANGUL = (jbyte) 0;
            jbyte CharacterDefinition::HANJA = (jbyte) 0;
            jbyte CharacterDefinition::HANJANUMERIC = (jbyte) 0;
            ::java::lang::String *CharacterDefinition::HEADER = NULL;
            jbyte CharacterDefinition::HIRAGANA = (jbyte) 0;
            jbyte CharacterDefinition::KANJI = (jbyte) 0;
            jbyte CharacterDefinition::KATAKANA = (jbyte) 0;
            jbyte CharacterDefinition::NGRAM = (jbyte) 0;
            jbyte CharacterDefinition::NUMERIC = (jbyte) 0;
            jbyte CharacterDefinition::SPACE = (jbyte) 0;
            jbyte CharacterDefinition::SYMBOL = (jbyte) 0;
            jint CharacterDefinition::VERSION = (jint) 0;

            jclass CharacterDefinition::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/dict/CharacterDefinition");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getCharacterClass_920874b8f5998fce] = env->getMethodID(cls, "getCharacterClass", "(C)B");
                mids$[mid_getInstance_d0e010fc051a8323] = env->getStaticMethodID(cls, "getInstance", "()Lorg/apache/lucene/analysis/ko/dict/CharacterDefinition;");
                mids$[mid_hasCoda_540573ecd04ffc16] = env->getMethodID(cls, "hasCoda", "(C)Z");
                mids$[mid_isGroup_540573ecd04ffc16] = env->getMethodID(cls, "isGroup", "(C)Z");
                mids$[mid_isHangul_540573ecd04ffc16] = env->getMethodID(cls, "isHangul", "(C)Z");
                mids$[mid_isHanja_540573ecd04ffc16] = env->getMethodID(cls, "isHanja", "(C)Z");
                mids$[mid_isInvoke_540573ecd04ffc16] = env->getMethodID(cls, "isInvoke", "(C)Z");
                mids$[mid_lookupCharacterClass_5cc1cc3ee6dabd77] = env->getStaticMethodID(cls, "lookupCharacterClass", "(Ljava/lang/String;)B");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                ALPHA = env->getStaticByteField(cls, "ALPHA");
                CLASS_COUNT = env->getStaticIntField(cls, "CLASS_COUNT");
                CYRILLIC = env->getStaticByteField(cls, "CYRILLIC");
                DEFAULT = env->getStaticByteField(cls, "DEFAULT");
                FILENAME_SUFFIX = new ::java::lang::String(env->getStaticObjectField(cls, "FILENAME_SUFFIX", "Ljava/lang/String;"));
                GREEK = env->getStaticByteField(cls, "GREEK");
                HANGUL = env->getStaticByteField(cls, "HANGUL");
                HANJA = env->getStaticByteField(cls, "HANJA");
                HANJANUMERIC = env->getStaticByteField(cls, "HANJANUMERIC");
                HEADER = new ::java::lang::String(env->getStaticObjectField(cls, "HEADER", "Ljava/lang/String;"));
                HIRAGANA = env->getStaticByteField(cls, "HIRAGANA");
                KANJI = env->getStaticByteField(cls, "KANJI");
                KATAKANA = env->getStaticByteField(cls, "KATAKANA");
                NGRAM = env->getStaticByteField(cls, "NGRAM");
                NUMERIC = env->getStaticByteField(cls, "NUMERIC");
                SPACE = env->getStaticByteField(cls, "SPACE");
                SYMBOL = env->getStaticByteField(cls, "SYMBOL");
                VERSION = env->getStaticIntField(cls, "VERSION");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jbyte CharacterDefinition::getCharacterClass(jchar a0) const
            {
              return env->callByteMethod(this$, mids$[mid_getCharacterClass_920874b8f5998fce], a0);
            }

            CharacterDefinition CharacterDefinition::getInstance()
            {
              jclass cls = env->getClass(initializeClass);
              return CharacterDefinition(env->callStaticObjectMethod(cls, mids$[mid_getInstance_d0e010fc051a8323]));
            }

            jboolean CharacterDefinition::hasCoda(jchar a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_hasCoda_540573ecd04ffc16], a0);
            }

            jboolean CharacterDefinition::isGroup(jchar a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_isGroup_540573ecd04ffc16], a0);
            }

            jboolean CharacterDefinition::isHangul(jchar a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_isHangul_540573ecd04ffc16], a0);
            }

            jboolean CharacterDefinition::isHanja(jchar a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_isHanja_540573ecd04ffc16], a0);
            }

            jboolean CharacterDefinition::isInvoke(jchar a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_isInvoke_540573ecd04ffc16], a0);
            }

            jbyte CharacterDefinition::lookupCharacterClass(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticByteMethod(cls, mids$[mid_lookupCharacterClass_5cc1cc3ee6dabd77], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace dict {
            static PyObject *t_CharacterDefinition_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CharacterDefinition_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CharacterDefinition_getCharacterClass(t_CharacterDefinition *self, PyObject *arg);
            static PyObject *t_CharacterDefinition_getInstance(PyTypeObject *type);
            static PyObject *t_CharacterDefinition_hasCoda(t_CharacterDefinition *self, PyObject *arg);
            static PyObject *t_CharacterDefinition_isGroup(t_CharacterDefinition *self, PyObject *arg);
            static PyObject *t_CharacterDefinition_isHangul(t_CharacterDefinition *self, PyObject *arg);
            static PyObject *t_CharacterDefinition_isHanja(t_CharacterDefinition *self, PyObject *arg);
            static PyObject *t_CharacterDefinition_isInvoke(t_CharacterDefinition *self, PyObject *arg);
            static PyObject *t_CharacterDefinition_lookupCharacterClass(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CharacterDefinition_get__instance(t_CharacterDefinition *self, void *data);
            static PyGetSetDef t_CharacterDefinition__fields_[] = {
              DECLARE_GET_FIELD(t_CharacterDefinition, instance),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CharacterDefinition__methods_[] = {
              DECLARE_METHOD(t_CharacterDefinition, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharacterDefinition, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharacterDefinition, getCharacterClass, METH_O),
              DECLARE_METHOD(t_CharacterDefinition, getInstance, METH_NOARGS | METH_CLASS),
              DECLARE_METHOD(t_CharacterDefinition, hasCoda, METH_O),
              DECLARE_METHOD(t_CharacterDefinition, isGroup, METH_O),
              DECLARE_METHOD(t_CharacterDefinition, isHangul, METH_O),
              DECLARE_METHOD(t_CharacterDefinition, isHanja, METH_O),
              DECLARE_METHOD(t_CharacterDefinition, isInvoke, METH_O),
              DECLARE_METHOD(t_CharacterDefinition, lookupCharacterClass, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(CharacterDefinition)[] = {
              { Py_tp_methods, t_CharacterDefinition__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_CharacterDefinition__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(CharacterDefinition)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(CharacterDefinition, t_CharacterDefinition, CharacterDefinition);

            void t_CharacterDefinition::install(PyObject *module)
            {
              installType(&PY_TYPE(CharacterDefinition), &PY_TYPE_DEF(CharacterDefinition), module, "CharacterDefinition", 0);
            }

            void t_CharacterDefinition::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "class_", make_descriptor(CharacterDefinition::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "wrapfn_", make_descriptor(t_CharacterDefinition::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "boxfn_", make_descriptor(boxObject));
              env->getClass(CharacterDefinition::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "ALPHA", make_descriptor(CharacterDefinition::ALPHA));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "CLASS_COUNT", make_descriptor(CharacterDefinition::CLASS_COUNT));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "CYRILLIC", make_descriptor(CharacterDefinition::CYRILLIC));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "DEFAULT", make_descriptor(CharacterDefinition::DEFAULT));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "FILENAME_SUFFIX", make_descriptor(j2p(*CharacterDefinition::FILENAME_SUFFIX)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "GREEK", make_descriptor(CharacterDefinition::GREEK));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "HANGUL", make_descriptor(CharacterDefinition::HANGUL));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "HANJA", make_descriptor(CharacterDefinition::HANJA));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "HANJANUMERIC", make_descriptor(CharacterDefinition::HANJANUMERIC));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "HEADER", make_descriptor(j2p(*CharacterDefinition::HEADER)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "HIRAGANA", make_descriptor(CharacterDefinition::HIRAGANA));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "KANJI", make_descriptor(CharacterDefinition::KANJI));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "KATAKANA", make_descriptor(CharacterDefinition::KATAKANA));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "NGRAM", make_descriptor(CharacterDefinition::NGRAM));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "NUMERIC", make_descriptor(CharacterDefinition::NUMERIC));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "SPACE", make_descriptor(CharacterDefinition::SPACE));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "SYMBOL", make_descriptor(CharacterDefinition::SYMBOL));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CharacterDefinition), "VERSION", make_descriptor(CharacterDefinition::VERSION));
            }

            static PyObject *t_CharacterDefinition_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CharacterDefinition::initializeClass, 1)))
                return NULL;
              return t_CharacterDefinition::wrap_Object(CharacterDefinition(((t_CharacterDefinition *) arg)->object.this$));
            }
            static PyObject *t_CharacterDefinition_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CharacterDefinition::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CharacterDefinition_getCharacterClass(t_CharacterDefinition *self, PyObject *arg)
            {
              jchar a0;
              jbyte result;

              if (!parseArg(arg, "C", &a0))
              {
                OBJ_CALL(result = self->object.getCharacterClass(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getCharacterClass", arg);
              return NULL;
            }

            static PyObject *t_CharacterDefinition_getInstance(PyTypeObject *type)
            {
              CharacterDefinition result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::analysis::ko::dict::CharacterDefinition::getInstance());
              return t_CharacterDefinition::wrap_Object(result);
            }

            static PyObject *t_CharacterDefinition_hasCoda(t_CharacterDefinition *self, PyObject *arg)
            {
              jchar a0;
              jboolean result;

              if (!parseArg(arg, "C", &a0))
              {
                OBJ_CALL(result = self->object.hasCoda(a0));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "hasCoda", arg);
              return NULL;
            }

            static PyObject *t_CharacterDefinition_isGroup(t_CharacterDefinition *self, PyObject *arg)
            {
              jchar a0;
              jboolean result;

              if (!parseArg(arg, "C", &a0))
              {
                OBJ_CALL(result = self->object.isGroup(a0));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "isGroup", arg);
              return NULL;
            }

            static PyObject *t_CharacterDefinition_isHangul(t_CharacterDefinition *self, PyObject *arg)
            {
              jchar a0;
              jboolean result;

              if (!parseArg(arg, "C", &a0))
              {
                OBJ_CALL(result = self->object.isHangul(a0));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "isHangul", arg);
              return NULL;
            }

            static PyObject *t_CharacterDefinition_isHanja(t_CharacterDefinition *self, PyObject *arg)
            {
              jchar a0;
              jboolean result;

              if (!parseArg(arg, "C", &a0))
              {
                OBJ_CALL(result = self->object.isHanja(a0));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "isHanja", arg);
              return NULL;
            }

            static PyObject *t_CharacterDefinition_isInvoke(t_CharacterDefinition *self, PyObject *arg)
            {
              jchar a0;
              jboolean result;

              if (!parseArg(arg, "C", &a0))
              {
                OBJ_CALL(result = self->object.isInvoke(a0));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "isInvoke", arg);
              return NULL;
            }

            static PyObject *t_CharacterDefinition_lookupCharacterClass(PyTypeObject *type, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              jbyte result;

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::ko::dict::CharacterDefinition::lookupCharacterClass(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError(type, "lookupCharacterClass", arg);
              return NULL;
            }

            static PyObject *t_CharacterDefinition_get__instance(t_CharacterDefinition *self, void *data)
            {
              CharacterDefinition value((jobject) NULL);
              OBJ_CALL(value = self->object.getInstance());
              return t_CharacterDefinition::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/WeightedFragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *WeightedFragListBuilder::class$ = NULL;
          jmethodID *WeightedFragListBuilder::mids$ = NULL;
          bool WeightedFragListBuilder::live$ = false;

          jclass WeightedFragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/WeightedFragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_createFieldFragList_2f27b0bbe6847286] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedFragListBuilder::WeightedFragListBuilder() : ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          WeightedFragListBuilder::WeightedFragListBuilder(jint a0) : ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          ::org::apache::lucene::search::vectorhighlight::FieldFragList WeightedFragListBuilder::createFieldFragList(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList & a0, jint a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->callObjectMethod(this$, mids$[mid_createFieldFragList_2f27b0bbe6847286], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_WeightedFragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedFragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedFragListBuilder_init_(t_WeightedFragListBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedFragListBuilder_createFieldFragList(t_WeightedFragListBuilder *self, PyObject *args);

          static PyMethodDef t_WeightedFragListBuilder__methods_[] = {
            DECLARE_METHOD(t_WeightedFragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedFragListBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedFragListBuilder, createFieldFragList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(WeightedFragListBuilder)[] = {
            { Py_tp_methods, t_WeightedFragListBuilder__methods_ },
            { Py_tp_init, (void *) t_WeightedFragListBuilder_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(WeightedFragListBuilder)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder),
            NULL
          };

          DEFINE_TYPE(WeightedFragListBuilder, t_WeightedFragListBuilder, WeightedFragListBuilder);

          void t_WeightedFragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedFragListBuilder), &PY_TYPE_DEF(WeightedFragListBuilder), module, "WeightedFragListBuilder", 0);
          }

          void t_WeightedFragListBuilder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(WeightedFragListBuilder), "class_", make_descriptor(WeightedFragListBuilder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WeightedFragListBuilder), "wrapfn_", make_descriptor(t_WeightedFragListBuilder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WeightedFragListBuilder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedFragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedFragListBuilder::initializeClass, 1)))
              return NULL;
            return t_WeightedFragListBuilder::wrap_Object(WeightedFragListBuilder(((t_WeightedFragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_WeightedFragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedFragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedFragListBuilder_init_(t_WeightedFragListBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                WeightedFragListBuilder object((jobject) NULL);

                INT_CALL(object = WeightedFragListBuilder());
                self->object = object;
                break;
              }
             case 1:
              {
                jint a0;
                WeightedFragListBuilder object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = WeightedFragListBuilder(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedFragListBuilder_createFieldFragList(t_WeightedFragListBuilder *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::vectorhighlight::FieldFragList result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createFieldFragList(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldFragList::wrap_Object(result);
            }

            return callSuper(PY_TYPE(WeightedFragListBuilder), (PyObject *) self, "createFieldFragList", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Counter.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Counter::class$ = NULL;
        jmethodID *Counter::mids$ = NULL;
        bool Counter::live$ = false;

        jclass Counter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Counter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_addAndGet_d711eecdc469624a] = env->getMethodID(cls, "addAndGet", "(J)J");
            mids$[mid_get_2e5ae9edcb9b072f] = env->getMethodID(cls, "get", "()J");
            mids$[mid_newCounter_9a5efba60e88cd95] = env->getStaticMethodID(cls, "newCounter", "()Lorg/apache/lucene/util/Counter;");
            mids$[mid_newCounter_04ad3bdcae264438] = env->getStaticMethodID(cls, "newCounter", "(Z)Lorg/apache/lucene/util/Counter;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Counter::Counter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jlong Counter::addAndGet(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addAndGet_d711eecdc469624a], a0);
        }

        jlong Counter::get() const
        {
          return env->callLongMethod(this$, mids$[mid_get_2e5ae9edcb9b072f]);
        }

        Counter Counter::newCounter()
        {
          jclass cls = env->getClass(initializeClass);
          return Counter(env->callStaticObjectMethod(cls, mids$[mid_newCounter_9a5efba60e88cd95]));
        }

        Counter Counter::newCounter(jboolean a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Counter(env->callStaticObjectMethod(cls, mids$[mid_newCounter_04ad3bdcae264438], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Counter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Counter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Counter_init_(t_Counter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Counter_addAndGet(t_Counter *self, PyObject *arg);
        static PyObject *t_Counter_get(t_Counter *self);
        static PyObject *t_Counter_newCounter(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_Counter__methods_[] = {
          DECLARE_METHOD(t_Counter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Counter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Counter, addAndGet, METH_O),
          DECLARE_METHOD(t_Counter, get, METH_NOARGS),
          DECLARE_METHOD(t_Counter, newCounter, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Counter)[] = {
          { Py_tp_methods, t_Counter__methods_ },
          { Py_tp_init, (void *) t_Counter_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Counter)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Counter, t_Counter, Counter);

        void t_Counter::install(PyObject *module)
        {
          installType(&PY_TYPE(Counter), &PY_TYPE_DEF(Counter), module, "Counter", 0);
        }

        void t_Counter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Counter), "class_", make_descriptor(Counter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Counter), "wrapfn_", make_descriptor(t_Counter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Counter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Counter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Counter::initializeClass, 1)))
            return NULL;
          return t_Counter::wrap_Object(Counter(((t_Counter *) arg)->object.this$));
        }
        static PyObject *t_Counter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Counter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Counter_init_(t_Counter *self, PyObject *args, PyObject *kwds)
        {
          Counter object((jobject) NULL);

          INT_CALL(object = Counter());
          self->object = object;

          return 0;
        }

        static PyObject *t_Counter_addAndGet(t_Counter *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.addAndGet(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "addAndGet", arg);
          return NULL;
        }

        static PyObject *t_Counter_get(t_Counter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.get());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Counter_newCounter(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Counter result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::util::Counter::newCounter());
              return t_Counter::wrap_Object(result);
            }
            break;
           case 1:
            {
              jboolean a0;
              Counter result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::Counter::newCounter(a0));
                return t_Counter::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newCounter", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/DFISimilarity.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/Independence.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *DFISimilarity::class$ = NULL;
          jmethodID *DFISimilarity::mids$ = NULL;
          bool DFISimilarity::live$ = false;

          jclass DFISimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/DFISimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fabe01ec74aa5e7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/Independence;)V");
              mids$[mid_getIndependence_11e5870ace20d03d] = env->getMethodID(cls, "getIndependence", "()Lorg/apache/lucene/search/similarities/Independence;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_score_761ab1c432346fd0] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_explain_a84367e35a1ef83b] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;Lorg/apache/lucene/search/Explanation;D)Lorg/apache/lucene/search/Explanation;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DFISimilarity::DFISimilarity(const ::org::apache::lucene::search::similarities::Independence & a0) : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_fabe01ec74aa5e7a, a0.this$)) {}

          ::org::apache::lucene::search::similarities::Independence DFISimilarity::getIndependence() const
          {
            return ::org::apache::lucene::search::similarities::Independence(env->callObjectMethod(this$, mids$[mid_getIndependence_11e5870ace20d03d]));
          }

          ::java::lang::String DFISimilarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_DFISimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DFISimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DFISimilarity_init_(t_DFISimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DFISimilarity_getIndependence(t_DFISimilarity *self);
          static PyObject *t_DFISimilarity_toString(t_DFISimilarity *self, PyObject *args);
          static PyObject *t_DFISimilarity_get__independence(t_DFISimilarity *self, void *data);
          static PyGetSetDef t_DFISimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_DFISimilarity, independence),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DFISimilarity__methods_[] = {
            DECLARE_METHOD(t_DFISimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DFISimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DFISimilarity, getIndependence, METH_NOARGS),
            DECLARE_METHOD(t_DFISimilarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DFISimilarity)[] = {
            { Py_tp_methods, t_DFISimilarity__methods_ },
            { Py_tp_init, (void *) t_DFISimilarity_init_ },
            { Py_tp_getset, t_DFISimilarity__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DFISimilarity)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::SimilarityBase),
            NULL
          };

          DEFINE_TYPE(DFISimilarity, t_DFISimilarity, DFISimilarity);

          void t_DFISimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(DFISimilarity), &PY_TYPE_DEF(DFISimilarity), module, "DFISimilarity", 0);
          }

          void t_DFISimilarity::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DFISimilarity), "class_", make_descriptor(DFISimilarity::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DFISimilarity), "wrapfn_", make_descriptor(t_DFISimilarity::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DFISimilarity), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DFISimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DFISimilarity::initializeClass, 1)))
              return NULL;
            return t_DFISimilarity::wrap_Object(DFISimilarity(((t_DFISimilarity *) arg)->object.this$));
          }
          static PyObject *t_DFISimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DFISimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DFISimilarity_init_(t_DFISimilarity *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::similarities::Independence a0((jobject) NULL);
            DFISimilarity object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::Independence::initializeClass, &a0))
            {
              INT_CALL(object = DFISimilarity(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DFISimilarity_getIndependence(t_DFISimilarity *self)
          {
            ::org::apache::lucene::search::similarities::Independence result((jobject) NULL);
            OBJ_CALL(result = self->object.getIndependence());
            return ::org::apache::lucene::search::similarities::t_Independence::wrap_Object(result);
          }

          static PyObject *t_DFISimilarity_toString(t_DFISimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(DFISimilarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_DFISimilarity_get__independence(t_DFISimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::Independence value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndependence());
            return ::org::apache::lucene::search::similarities::t_Independence::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter$BytesRefBuilderTermAttribute.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ConcatenateGraphFilter$BytesRefBuilderTermAttribute::class$ = NULL;
          jmethodID *ConcatenateGraphFilter$BytesRefBuilderTermAttribute::mids$ = NULL;
          bool ConcatenateGraphFilter$BytesRefBuilderTermAttribute::live$ = false;

          jclass ConcatenateGraphFilter$BytesRefBuilderTermAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter$BytesRefBuilderTermAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_builder_036a87a44059e682] = env->getMethodID(cls, "builder", "()Lorg/apache/lucene/util/BytesRefBuilder;");
              mids$[mid_toUTF16_ba44900ab7d793b9] = env->getMethodID(cls, "toUTF16", "()Ljava/lang/CharSequence;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::BytesRefBuilder ConcatenateGraphFilter$BytesRefBuilderTermAttribute::builder() const
          {
            return ::org::apache::lucene::util::BytesRefBuilder(env->callObjectMethod(this$, mids$[mid_builder_036a87a44059e682]));
          }

          ::java::lang::CharSequence ConcatenateGraphFilter$BytesRefBuilderTermAttribute::toUTF16() const
          {
            return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toUTF16_ba44900ab7d793b9]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute_builder(t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute *self);
          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute_toUTF16(t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute *self);

          static PyMethodDef t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute__methods_[] = {
            DECLARE_METHOD(t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute, builder, METH_NOARGS),
            DECLARE_METHOD(t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute, toUTF16, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ConcatenateGraphFilter$BytesRefBuilderTermAttribute)[] = {
            { Py_tp_methods, t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ConcatenateGraphFilter$BytesRefBuilderTermAttribute)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::tokenattributes::TermToBytesRefAttribute),
            NULL
          };

          DEFINE_TYPE(ConcatenateGraphFilter$BytesRefBuilderTermAttribute, t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute, ConcatenateGraphFilter$BytesRefBuilderTermAttribute);

          void t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(ConcatenateGraphFilter$BytesRefBuilderTermAttribute), &PY_TYPE_DEF(ConcatenateGraphFilter$BytesRefBuilderTermAttribute), module, "ConcatenateGraphFilter$BytesRefBuilderTermAttribute", 0);
          }

          void t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenateGraphFilter$BytesRefBuilderTermAttribute), "class_", make_descriptor(ConcatenateGraphFilter$BytesRefBuilderTermAttribute::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenateGraphFilter$BytesRefBuilderTermAttribute), "wrapfn_", make_descriptor(t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenateGraphFilter$BytesRefBuilderTermAttribute), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ConcatenateGraphFilter$BytesRefBuilderTermAttribute::initializeClass, 1)))
              return NULL;
            return t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute::wrap_Object(ConcatenateGraphFilter$BytesRefBuilderTermAttribute(((t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute *) arg)->object.this$));
          }
          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ConcatenateGraphFilter$BytesRefBuilderTermAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute_builder(t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute *self)
          {
            ::org::apache::lucene::util::BytesRefBuilder result((jobject) NULL);
            OBJ_CALL(result = self->object.builder());
            return ::org::apache::lucene::util::t_BytesRefBuilder::wrap_Object(result);
          }

          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute_toUTF16(t_ConcatenateGraphFilter$BytesRefBuilderTermAttribute *self)
          {
            ::java::lang::CharSequence result((jobject) NULL);
            OBJ_CALL(result = self->object.toUTF16());
            return ::java::lang::t_CharSequence::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortedSetSortField.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexSorter.h"
#include "org/apache/lucene/search/SortedSetSelector$Type.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortedSetSortField::class$ = NULL;
        jmethodID *SortedSetSortField::mids$ = NULL;
        bool SortedSetSortField::live$ = false;

        jclass SortedSetSortField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortedSetSortField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b1180807b87ba737] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
            mids$[mid_init$_5f20c0c9a291b599] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ZLorg/apache/lucene/search/SortedSetSelector$Type;)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getComparator_d36dcbe0af6d9ef2] = env->getMethodID(cls, "getComparator", "(II)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_getIndexSorter_ee706dd57fd4883b] = env->getMethodID(cls, "getIndexSorter", "()Lorg/apache/lucene/index/IndexSorter;");
            mids$[mid_getSelector_75cc79123881d349] = env->getMethodID(cls, "getSelector", "()Lorg/apache/lucene/search/SortedSetSelector$Type;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_setMissingValue_d20f626183f72f7d] = env->getMethodID(cls, "setMissingValue", "(Ljava/lang/Object;)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedSetSortField::SortedSetSortField(const ::java::lang::String & a0, jboolean a1) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_b1180807b87ba737, a0.this$, a1)) {}

        SortedSetSortField::SortedSetSortField(const ::java::lang::String & a0, jboolean a1, const ::org::apache::lucene::search::SortedSetSelector$Type & a2) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_5f20c0c9a291b599, a0.this$, a1, a2.this$)) {}

        jboolean SortedSetSortField::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::org::apache::lucene::search::FieldComparator SortedSetSortField::getComparator(jint a0, jint a1) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_getComparator_d36dcbe0af6d9ef2], a0, a1));
        }

        ::org::apache::lucene::index::IndexSorter SortedSetSortField::getIndexSorter() const
        {
          return ::org::apache::lucene::index::IndexSorter(env->callObjectMethod(this$, mids$[mid_getIndexSorter_ee706dd57fd4883b]));
        }

        ::org::apache::lucene::search::SortedSetSelector$Type SortedSetSortField::getSelector() const
        {
          return ::org::apache::lucene::search::SortedSetSelector$Type(env->callObjectMethod(this$, mids$[mid_getSelector_75cc79123881d349]));
        }

        jint SortedSetSortField::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        void SortedSetSortField::setMissingValue(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMissingValue_d20f626183f72f7d], a0.this$);
        }

        ::java::lang::String SortedSetSortField::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/SortedSetSortField$Provider.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortedSetSortField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedSetSortField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedSetSortField_init_(t_SortedSetSortField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortedSetSortField_equals(t_SortedSetSortField *self, PyObject *args);
        static PyObject *t_SortedSetSortField_getComparator(t_SortedSetSortField *self, PyObject *args);
        static PyObject *t_SortedSetSortField_getIndexSorter(t_SortedSetSortField *self, PyObject *args);
        static PyObject *t_SortedSetSortField_getSelector(t_SortedSetSortField *self);
        static PyObject *t_SortedSetSortField_hashCode(t_SortedSetSortField *self, PyObject *args);
        static PyObject *t_SortedSetSortField_setMissingValue(t_SortedSetSortField *self, PyObject *args);
        static PyObject *t_SortedSetSortField_toString(t_SortedSetSortField *self, PyObject *args);
        static PyObject *t_SortedSetSortField_get__indexSorter(t_SortedSetSortField *self, void *data);
        static int t_SortedSetSortField_set__missingValue(t_SortedSetSortField *self, PyObject *arg, void *data);
        static PyObject *t_SortedSetSortField_get__selector(t_SortedSetSortField *self, void *data);
        static PyGetSetDef t_SortedSetSortField__fields_[] = {
          DECLARE_GET_FIELD(t_SortedSetSortField, indexSorter),
          DECLARE_SET_FIELD(t_SortedSetSortField, missingValue),
          DECLARE_GET_FIELD(t_SortedSetSortField, selector),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedSetSortField__methods_[] = {
          DECLARE_METHOD(t_SortedSetSortField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetSortField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetSortField, equals, METH_VARARGS),
          DECLARE_METHOD(t_SortedSetSortField, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_SortedSetSortField, getIndexSorter, METH_VARARGS),
          DECLARE_METHOD(t_SortedSetSortField, getSelector, METH_NOARGS),
          DECLARE_METHOD(t_SortedSetSortField, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SortedSetSortField, setMissingValue, METH_VARARGS),
          DECLARE_METHOD(t_SortedSetSortField, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SortedSetSortField)[] = {
          { Py_tp_methods, t_SortedSetSortField__methods_ },
          { Py_tp_init, (void *) t_SortedSetSortField_init_ },
          { Py_tp_getset, t_SortedSetSortField__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SortedSetSortField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::SortField),
          NULL
        };

        DEFINE_TYPE(SortedSetSortField, t_SortedSetSortField, SortedSetSortField);

        void t_SortedSetSortField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedSetSortField), &PY_TYPE_DEF(SortedSetSortField), module, "SortedSetSortField", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetSortField), "Provider", make_descriptor(&PY_TYPE_DEF(SortedSetSortField$Provider)));
        }

        void t_SortedSetSortField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetSortField), "class_", make_descriptor(SortedSetSortField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetSortField), "wrapfn_", make_descriptor(t_SortedSetSortField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetSortField), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedSetSortField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedSetSortField::initializeClass, 1)))
            return NULL;
          return t_SortedSetSortField::wrap_Object(SortedSetSortField(((t_SortedSetSortField *) arg)->object.this$));
        }
        static PyObject *t_SortedSetSortField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedSetSortField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedSetSortField_init_(t_SortedSetSortField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean a1;
              SortedSetSortField object((jobject) NULL);

              if (!parseArgs(args, "sZ", &a0, &a1))
              {
                INT_CALL(object = SortedSetSortField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean a1;
              ::org::apache::lucene::search::SortedSetSelector$Type a2((jobject) NULL);
              PyTypeObject **p2;
              SortedSetSortField object((jobject) NULL);

              if (!parseArgs(args, "sZK", ::org::apache::lucene::search::SortedSetSelector$Type::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_SortedSetSelector$Type::parameters_))
              {
                INT_CALL(object = SortedSetSortField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SortedSetSortField_equals(t_SortedSetSortField *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(SortedSetSortField), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SortedSetSortField_getComparator(t_SortedSetSortField *self, PyObject *args)
        {
          jint a0;
          jint a1;
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getComparator(a0, a1));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SortedSetSortField), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_SortedSetSortField_getIndexSorter(t_SortedSetSortField *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexSorter result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIndexSorter());
            return ::org::apache::lucene::index::t_IndexSorter::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SortedSetSortField), (PyObject *) self, "getIndexSorter", args, 2);
        }

        static PyObject *t_SortedSetSortField_getSelector(t_SortedSetSortField *self)
        {
          ::org::apache::lucene::search::SortedSetSelector$Type result((jobject) NULL);
          OBJ_CALL(result = self->object.getSelector());
          return ::org::apache::lucene::search::t_SortedSetSelector$Type::wrap_Object(result);
        }

        static PyObject *t_SortedSetSortField_hashCode(t_SortedSetSortField *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SortedSetSortField), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SortedSetSortField_setMissingValue(t_SortedSetSortField *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(self->object.setMissingValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(SortedSetSortField), (PyObject *) self, "setMissingValue", args, 2);
        }

        static PyObject *t_SortedSetSortField_toString(t_SortedSetSortField *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(SortedSetSortField), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SortedSetSortField_get__indexSorter(t_SortedSetSortField *self, void *data)
        {
          ::org::apache::lucene::index::IndexSorter value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexSorter());
          return ::org::apache::lucene::index::t_IndexSorter::wrap_Object(value);
        }

        static int t_SortedSetSortField_set__missingValue(t_SortedSetSortField *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object.setMissingValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "missingValue", arg);
          return -1;
        }

        static PyObject *t_SortedSetSortField_get__selector(t_SortedSetSortField *self, void *data)
        {
          ::org::apache::lucene::search::SortedSetSelector$Type value((jobject) NULL);
          OBJ_CALL(value = self->object.getSelector());
          return ::org::apache::lucene::search::t_SortedSetSelector$Type::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/comparators/LongComparator$LongLeafComparator.h"
#include "java/lang/Long.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/comparators/LongComparator.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {

          ::java::lang::Class *LongComparator$LongLeafComparator::class$ = NULL;
          jmethodID *LongComparator$LongLeafComparator::mids$ = NULL;
          bool LongComparator$LongLeafComparator::live$ = false;

          jclass LongComparator$LongLeafComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/comparators/LongComparator$LongLeafComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c204cf5694611891] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/comparators/LongComparator;Lorg/apache/lucene/index/LeafReaderContext;)V");
              mids$[mid_compareBottom_1e143afe1894d213] = env->getMethodID(cls, "compareBottom", "(I)I");
              mids$[mid_compareTop_1e143afe1894d213] = env->getMethodID(cls, "compareTop", "(I)I");
              mids$[mid_copy_438c62480c481c65] = env->getMethodID(cls, "copy", "(II)V");
              mids$[mid_setBottom_040c4cd0390c5aff] = env->getMethodID(cls, "setBottom", "(I)V");
              mids$[mid_encodeTop_9ffdf271836656c4] = env->getMethodID(cls, "encodeTop", "([B)V");
              mids$[mid_encodeBottom_9ffdf271836656c4] = env->getMethodID(cls, "encodeBottom", "([B)V");
              mids$[mid_isMissingValueCompetitive_8454bd5aa23fd11e] = env->getMethodID(cls, "isMissingValueCompetitive", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LongComparator$LongLeafComparator::LongComparator$LongLeafComparator(const ::org::apache::lucene::search::comparators::LongComparator & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) : ::org::apache::lucene::search::comparators::NumericComparator$NumericLeafComparator(env->newObject(initializeClass, &mids$, mid_init$_c204cf5694611891, a0.this$, a1.this$)) {}

          jint LongComparator$LongLeafComparator::compareBottom(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareBottom_1e143afe1894d213], a0);
          }

          jint LongComparator$LongLeafComparator::compareTop(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTop_1e143afe1894d213], a0);
          }

          void LongComparator$LongLeafComparator::copy(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_438c62480c481c65], a0, a1);
          }

          void LongComparator$LongLeafComparator::setBottom(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBottom_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {
          static PyObject *t_LongComparator$LongLeafComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongComparator$LongLeafComparator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongComparator$LongLeafComparator_of_(t_LongComparator$LongLeafComparator *self, PyObject *args);
          static int t_LongComparator$LongLeafComparator_init_(t_LongComparator$LongLeafComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LongComparator$LongLeafComparator_compareBottom(t_LongComparator$LongLeafComparator *self, PyObject *args);
          static PyObject *t_LongComparator$LongLeafComparator_compareTop(t_LongComparator$LongLeafComparator *self, PyObject *args);
          static PyObject *t_LongComparator$LongLeafComparator_copy(t_LongComparator$LongLeafComparator *self, PyObject *args);
          static PyObject *t_LongComparator$LongLeafComparator_setBottom(t_LongComparator$LongLeafComparator *self, PyObject *args);
          static int t_LongComparator$LongLeafComparator_set__bottom(t_LongComparator$LongLeafComparator *self, PyObject *arg, void *data);
          static PyObject *t_LongComparator$LongLeafComparator_get__parameters_(t_LongComparator$LongLeafComparator *self, void *data);
          static PyGetSetDef t_LongComparator$LongLeafComparator__fields_[] = {
            DECLARE_SET_FIELD(t_LongComparator$LongLeafComparator, bottom),
            DECLARE_GET_FIELD(t_LongComparator$LongLeafComparator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LongComparator$LongLeafComparator__methods_[] = {
            DECLARE_METHOD(t_LongComparator$LongLeafComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongComparator$LongLeafComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongComparator$LongLeafComparator, of_, METH_VARARGS),
            DECLARE_METHOD(t_LongComparator$LongLeafComparator, compareBottom, METH_VARARGS),
            DECLARE_METHOD(t_LongComparator$LongLeafComparator, compareTop, METH_VARARGS),
            DECLARE_METHOD(t_LongComparator$LongLeafComparator, copy, METH_VARARGS),
            DECLARE_METHOD(t_LongComparator$LongLeafComparator, setBottom, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LongComparator$LongLeafComparator)[] = {
            { Py_tp_methods, t_LongComparator$LongLeafComparator__methods_ },
            { Py_tp_init, (void *) t_LongComparator$LongLeafComparator_init_ },
            { Py_tp_getset, t_LongComparator$LongLeafComparator__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LongComparator$LongLeafComparator)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::comparators::NumericComparator$NumericLeafComparator),
            NULL
          };

          DEFINE_TYPE(LongComparator$LongLeafComparator, t_LongComparator$LongLeafComparator, LongComparator$LongLeafComparator);
          PyObject *t_LongComparator$LongLeafComparator::wrap_Object(const LongComparator$LongLeafComparator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_LongComparator$LongLeafComparator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_LongComparator$LongLeafComparator *self = (t_LongComparator$LongLeafComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_LongComparator$LongLeafComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_LongComparator$LongLeafComparator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_LongComparator$LongLeafComparator *self = (t_LongComparator$LongLeafComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_LongComparator$LongLeafComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(LongComparator$LongLeafComparator), &PY_TYPE_DEF(LongComparator$LongLeafComparator), module, "LongComparator$LongLeafComparator", 0);
          }

          void t_LongComparator$LongLeafComparator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongComparator$LongLeafComparator), "class_", make_descriptor(LongComparator$LongLeafComparator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongComparator$LongLeafComparator), "wrapfn_", make_descriptor(t_LongComparator$LongLeafComparator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongComparator$LongLeafComparator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LongComparator$LongLeafComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LongComparator$LongLeafComparator::initializeClass, 1)))
              return NULL;
            return t_LongComparator$LongLeafComparator::wrap_Object(LongComparator$LongLeafComparator(((t_LongComparator$LongLeafComparator *) arg)->object.this$));
          }
          static PyObject *t_LongComparator$LongLeafComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LongComparator$LongLeafComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_LongComparator$LongLeafComparator_of_(t_LongComparator$LongLeafComparator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_LongComparator$LongLeafComparator_init_(t_LongComparator$LongLeafComparator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::comparators::LongComparator a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
            LongComparator$LongLeafComparator object((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::search::comparators::LongComparator::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::org::apache::lucene::search::comparators::t_LongComparator::parameters_, &a1))
            {
              INT_CALL(object = LongComparator$LongLeafComparator(a0, a1));
              self->object = object;
              self->parameters[0] = ::java::lang::PY_TYPE(Long);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LongComparator$LongLeafComparator_compareBottom(t_LongComparator$LongLeafComparator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareBottom(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(LongComparator$LongLeafComparator), (PyObject *) self, "compareBottom", args, 2);
          }

          static PyObject *t_LongComparator$LongLeafComparator_compareTop(t_LongComparator$LongLeafComparator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareTop(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(LongComparator$LongLeafComparator), (PyObject *) self, "compareTop", args, 2);
          }

          static PyObject *t_LongComparator$LongLeafComparator_copy(t_LongComparator$LongLeafComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.copy(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(LongComparator$LongLeafComparator), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_LongComparator$LongLeafComparator_setBottom(t_LongComparator$LongLeafComparator *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.setBottom(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(LongComparator$LongLeafComparator), (PyObject *) self, "setBottom", args, 2);
          }
          static PyObject *t_LongComparator$LongLeafComparator_get__parameters_(t_LongComparator$LongLeafComparator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_LongComparator$LongLeafComparator_set__bottom(t_LongComparator$LongLeafComparator *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setBottom(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "bottom", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {

          ::java::lang::Class *SimpleTextLiveDocsFormat::class$ = NULL;
          jmethodID *SimpleTextLiveDocsFormat::mids$ = NULL;
          bool SimpleTextLiveDocsFormat::live$ = false;

          jclass SimpleTextLiveDocsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/simpletext/SimpleTextLiveDocsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_files_b2e301d4a4757fdf] = env->getMethodID(cls, "files", "(Lorg/apache/lucene/index/SegmentCommitInfo;Ljava/util/Collection;)V");
              mids$[mid_readLiveDocs_f118005014dfdc32] = env->getMethodID(cls, "readLiveDocs", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/util/Bits;");
              mids$[mid_writeLiveDocs_d90adf8fed5738cb] = env->getMethodID(cls, "writeLiveDocs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;ILorg/apache/lucene/store/IOContext;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleTextLiveDocsFormat::SimpleTextLiveDocsFormat() : ::org::apache::lucene::codecs::LiveDocsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void SimpleTextLiveDocsFormat::files(const ::org::apache::lucene::index::SegmentCommitInfo & a0, const ::java::util::Collection & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_files_b2e301d4a4757fdf], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::Bits SimpleTextLiveDocsFormat::readLiveDocs(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_readLiveDocs_f118005014dfdc32], a0.this$, a1.this$, a2.this$));
          }

          void SimpleTextLiveDocsFormat::writeLiveDocs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::index::SegmentCommitInfo & a2, jint a3, const ::org::apache::lucene::store::IOContext & a4) const
          {
            env->callVoidMethod(this$, mids$[mid_writeLiveDocs_d90adf8fed5738cb], a0.this$, a1.this$, a2.this$, a3, a4.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {
          static PyObject *t_SimpleTextLiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleTextLiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleTextLiveDocsFormat_init_(t_SimpleTextLiveDocsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleTextLiveDocsFormat_files(t_SimpleTextLiveDocsFormat *self, PyObject *args);
          static PyObject *t_SimpleTextLiveDocsFormat_readLiveDocs(t_SimpleTextLiveDocsFormat *self, PyObject *args);
          static PyObject *t_SimpleTextLiveDocsFormat_writeLiveDocs(t_SimpleTextLiveDocsFormat *self, PyObject *args);

          static PyMethodDef t_SimpleTextLiveDocsFormat__methods_[] = {
            DECLARE_METHOD(t_SimpleTextLiveDocsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextLiveDocsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextLiveDocsFormat, files, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextLiveDocsFormat, readLiveDocs, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextLiveDocsFormat, writeLiveDocs, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleTextLiveDocsFormat)[] = {
            { Py_tp_methods, t_SimpleTextLiveDocsFormat__methods_ },
            { Py_tp_init, (void *) t_SimpleTextLiveDocsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleTextLiveDocsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::LiveDocsFormat),
            NULL
          };

          DEFINE_TYPE(SimpleTextLiveDocsFormat, t_SimpleTextLiveDocsFormat, SimpleTextLiveDocsFormat);

          void t_SimpleTextLiveDocsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleTextLiveDocsFormat), &PY_TYPE_DEF(SimpleTextLiveDocsFormat), module, "SimpleTextLiveDocsFormat", 0);
          }

          void t_SimpleTextLiveDocsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextLiveDocsFormat), "class_", make_descriptor(SimpleTextLiveDocsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextLiveDocsFormat), "wrapfn_", make_descriptor(t_SimpleTextLiveDocsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextLiveDocsFormat), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleTextLiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleTextLiveDocsFormat::initializeClass, 1)))
              return NULL;
            return t_SimpleTextLiveDocsFormat::wrap_Object(SimpleTextLiveDocsFormat(((t_SimpleTextLiveDocsFormat *) arg)->object.this$));
          }
          static PyObject *t_SimpleTextLiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleTextLiveDocsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleTextLiveDocsFormat_init_(t_SimpleTextLiveDocsFormat *self, PyObject *args, PyObject *kwds)
          {
            SimpleTextLiveDocsFormat object((jobject) NULL);

            INT_CALL(object = SimpleTextLiveDocsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_SimpleTextLiveDocsFormat_files(t_SimpleTextLiveDocsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
            ::java::util::Collection a1((jobject) NULL);
            PyTypeObject **p1;

            if (!parseArgs(args, "kK", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(self->object.files(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextLiveDocsFormat), (PyObject *) self, "files", args, 2);
          }

          static PyObject *t_SimpleTextLiveDocsFormat_readLiveDocs(t_SimpleTextLiveDocsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::util::Bits result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.readLiveDocs(a0, a1, a2));
              return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextLiveDocsFormat), (PyObject *) self, "readLiveDocs", args, 2);
          }

          static PyObject *t_SimpleTextLiveDocsFormat_writeLiveDocs(t_SimpleTextLiveDocsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::util::Bits a0((jobject) NULL);
            ::org::apache::lucene::store::Directory a1((jobject) NULL);
            ::org::apache::lucene::index::SegmentCommitInfo a2((jobject) NULL);
            jint a3;
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);

            if (!parseArgs(args, "kkkIk", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.writeLiveDocs(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextLiveDocsFormat), (PyObject *) self, "writeLiveDocs", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiValuedDoubleFieldSource.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/SortedNumericSelector$Type.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiValuedDoubleFieldSource::class$ = NULL;
            jmethodID *MultiValuedDoubleFieldSource::mids$ = NULL;
            bool MultiValuedDoubleFieldSource::live$ = false;

            jclass MultiValuedDoubleFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiValuedDoubleFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_eb65f30ff755fcc7] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortedNumericSelector$Type;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getSortField_8a713675264264ba] = env->getMethodID(cls, "getSortField", "(Z)Lorg/apache/lucene/search/SortField;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_getNumericDocValues_991afb5c8a130516] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/index/NumericDocValues;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiValuedDoubleFieldSource::MultiValuedDoubleFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortedNumericSelector$Type & a1) : ::org::apache::lucene::queries::function::valuesource::DoubleFieldSource(env->newObject(initializeClass, &mids$, mid_init$_eb65f30ff755fcc7, a0.this$, a1.this$)) {}

            ::java::lang::String MultiValuedDoubleFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean MultiValuedDoubleFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::search::SortField MultiValuedDoubleFieldSource::getSortField(jboolean a0) const
            {
              return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_getSortField_8a713675264264ba], a0));
            }

            jint MultiValuedDoubleFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiValuedDoubleFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiValuedDoubleFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiValuedDoubleFieldSource_init_(t_MultiValuedDoubleFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiValuedDoubleFieldSource_description(t_MultiValuedDoubleFieldSource *self, PyObject *args);
            static PyObject *t_MultiValuedDoubleFieldSource_equals(t_MultiValuedDoubleFieldSource *self, PyObject *args);
            static PyObject *t_MultiValuedDoubleFieldSource_getSortField(t_MultiValuedDoubleFieldSource *self, PyObject *args);
            static PyObject *t_MultiValuedDoubleFieldSource_hashCode(t_MultiValuedDoubleFieldSource *self, PyObject *args);

            static PyMethodDef t_MultiValuedDoubleFieldSource__methods_[] = {
              DECLARE_METHOD(t_MultiValuedDoubleFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiValuedDoubleFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiValuedDoubleFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_MultiValuedDoubleFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_MultiValuedDoubleFieldSource, getSortField, METH_VARARGS),
              DECLARE_METHOD(t_MultiValuedDoubleFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(MultiValuedDoubleFieldSource)[] = {
              { Py_tp_methods, t_MultiValuedDoubleFieldSource__methods_ },
              { Py_tp_init, (void *) t_MultiValuedDoubleFieldSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(MultiValuedDoubleFieldSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::DoubleFieldSource),
              NULL
            };

            DEFINE_TYPE(MultiValuedDoubleFieldSource, t_MultiValuedDoubleFieldSource, MultiValuedDoubleFieldSource);

            void t_MultiValuedDoubleFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiValuedDoubleFieldSource), &PY_TYPE_DEF(MultiValuedDoubleFieldSource), module, "MultiValuedDoubleFieldSource", 0);
            }

            void t_MultiValuedDoubleFieldSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiValuedDoubleFieldSource), "class_", make_descriptor(MultiValuedDoubleFieldSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiValuedDoubleFieldSource), "wrapfn_", make_descriptor(t_MultiValuedDoubleFieldSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiValuedDoubleFieldSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiValuedDoubleFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiValuedDoubleFieldSource::initializeClass, 1)))
                return NULL;
              return t_MultiValuedDoubleFieldSource::wrap_Object(MultiValuedDoubleFieldSource(((t_MultiValuedDoubleFieldSource *) arg)->object.this$));
            }
            static PyObject *t_MultiValuedDoubleFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiValuedDoubleFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiValuedDoubleFieldSource_init_(t_MultiValuedDoubleFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortedNumericSelector$Type a1((jobject) NULL);
              PyTypeObject **p1;
              MultiValuedDoubleFieldSource object((jobject) NULL);

              if (!parseArgs(args, "sK", ::org::apache::lucene::search::SortedNumericSelector$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortedNumericSelector$Type::parameters_))
              {
                INT_CALL(object = MultiValuedDoubleFieldSource(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiValuedDoubleFieldSource_description(t_MultiValuedDoubleFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(MultiValuedDoubleFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MultiValuedDoubleFieldSource_equals(t_MultiValuedDoubleFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(MultiValuedDoubleFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MultiValuedDoubleFieldSource_getSortField(t_MultiValuedDoubleFieldSource *self, PyObject *args)
            {
              jboolean a0;
              ::org::apache::lucene::search::SortField result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = self->object.getSortField(a0));
                return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
              }

              return callSuper(PY_TYPE(MultiValuedDoubleFieldSource), (PyObject *) self, "getSortField", args, 2);
            }

            static PyObject *t_MultiValuedDoubleFieldSource_hashCode(t_MultiValuedDoubleFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(MultiValuedDoubleFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/TernaryTree.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "java/io/PrintStream.h"
#include "org/apache/lucene/analysis/compound/hyphenation/TernaryTree.h"
#include "java/util/Enumeration.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *TernaryTree::class$ = NULL;
            jmethodID *TernaryTree::mids$ = NULL;
            bool TernaryTree::live$ = false;

            jclass TernaryTree::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/TernaryTree");

                mids$ = new jmethodID[max_mid];
                mids$[mid_balance_f2cc1bce94666404] = env->getMethodID(cls, "balance", "()V");
                mids$[mid_clone_3b3ab379291247a4] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/compound/hyphenation/TernaryTree;");
                mids$[mid_find_a5a7d1128e9e2bb7] = env->getMethodID(cls, "find", "(Ljava/lang/String;)I");
                mids$[mid_find_d4655f2a19359017] = env->getMethodID(cls, "find", "([CI)I");
                mids$[mid_insert_1a1986a14b1cc8dc] = env->getMethodID(cls, "insert", "(Ljava/lang/String;C)V");
                mids$[mid_insert_1085ca86b5f3e050] = env->getMethodID(cls, "insert", "([CIC)V");
                mids$[mid_keys_f270cc1d2d4072a8] = env->getMethodID(cls, "keys", "()Ljava/util/Enumeration;");
                mids$[mid_knows_145b2d0af0c06b93] = env->getMethodID(cls, "knows", "(Ljava/lang/String;)Z");
                mids$[mid_printStats_51d7bcb97eea24e3] = env->getMethodID(cls, "printStats", "(Ljava/io/PrintStream;)V");
                mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
                mids$[mid_strcmp_db60fde946da24c2] = env->getStaticMethodID(cls, "strcmp", "(Ljava/lang/String;[CI)I");
                mids$[mid_strcmp_c63051281e11287a] = env->getStaticMethodID(cls, "strcmp", "([CI[CI)I");
                mids$[mid_strcpy_b20100ba285655e4] = env->getStaticMethodID(cls, "strcpy", "([CI[CI)V");
                mids$[mid_strlen_946cc819d92a7347] = env->getStaticMethodID(cls, "strlen", "([C)I");
                mids$[mid_strlen_d4655f2a19359017] = env->getStaticMethodID(cls, "strlen", "([CI)I");
                mids$[mid_trimToSize_f2cc1bce94666404] = env->getMethodID(cls, "trimToSize", "()V");
                mids$[mid_insertBalanced_879e92e4774c7d41] = env->getMethodID(cls, "insertBalanced", "([Ljava/lang/String;[CII)V");
                mids$[mid_init_f2cc1bce94666404] = env->getMethodID(cls, "init", "()V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void TernaryTree::balance() const
            {
              env->callVoidMethod(this$, mids$[mid_balance_f2cc1bce94666404]);
            }

            TernaryTree TernaryTree::clone() const
            {
              return TernaryTree(env->callObjectMethod(this$, mids$[mid_clone_3b3ab379291247a4]));
            }

            jint TernaryTree::find(const ::java::lang::String & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_find_a5a7d1128e9e2bb7], a0.this$);
            }

            jint TernaryTree::find(const JArray< jchar > & a0, jint a1) const
            {
              return env->callIntMethod(this$, mids$[mid_find_d4655f2a19359017], a0.this$, a1);
            }

            void TernaryTree::insert(const ::java::lang::String & a0, jchar a1) const
            {
              env->callVoidMethod(this$, mids$[mid_insert_1a1986a14b1cc8dc], a0.this$, a1);
            }

            void TernaryTree::insert(const JArray< jchar > & a0, jint a1, jchar a2) const
            {
              env->callVoidMethod(this$, mids$[mid_insert_1085ca86b5f3e050], a0.this$, a1, a2);
            }

            ::java::util::Enumeration TernaryTree::keys() const
            {
              return ::java::util::Enumeration(env->callObjectMethod(this$, mids$[mid_keys_f270cc1d2d4072a8]));
            }

            jboolean TernaryTree::knows(const ::java::lang::String & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_knows_145b2d0af0c06b93], a0.this$);
            }

            void TernaryTree::printStats(const ::java::io::PrintStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_printStats_51d7bcb97eea24e3], a0.this$);
            }

            jint TernaryTree::size() const
            {
              return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
            }

            jint TernaryTree::strcmp(const ::java::lang::String & a0, const JArray< jchar > & a1, jint a2)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticIntMethod(cls, mids$[mid_strcmp_db60fde946da24c2], a0.this$, a1.this$, a2);
            }

            jint TernaryTree::strcmp(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2, jint a3)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticIntMethod(cls, mids$[mid_strcmp_c63051281e11287a], a0.this$, a1, a2.this$, a3);
            }

            void TernaryTree::strcpy(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2, jint a3)
            {
              jclass cls = env->getClass(initializeClass);
              env->callStaticVoidMethod(cls, mids$[mid_strcpy_b20100ba285655e4], a0.this$, a1, a2.this$, a3);
            }

            jint TernaryTree::strlen(const JArray< jchar > & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticIntMethod(cls, mids$[mid_strlen_946cc819d92a7347], a0.this$);
            }

            jint TernaryTree::strlen(const JArray< jchar > & a0, jint a1)
            {
              jclass cls = env->getClass(initializeClass);
              return env->callStaticIntMethod(cls, mids$[mid_strlen_d4655f2a19359017], a0.this$, a1);
            }

            void TernaryTree::trimToSize() const
            {
              env->callVoidMethod(this$, mids$[mid_trimToSize_f2cc1bce94666404]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_TernaryTree_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TernaryTree_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TernaryTree_balance(t_TernaryTree *self);
            static PyObject *t_TernaryTree_clone(t_TernaryTree *self);
            static PyObject *t_TernaryTree_find(t_TernaryTree *self, PyObject *args);
            static PyObject *t_TernaryTree_insert(t_TernaryTree *self, PyObject *args);
            static PyObject *t_TernaryTree_keys(t_TernaryTree *self);
            static PyObject *t_TernaryTree_knows(t_TernaryTree *self, PyObject *arg);
            static PyObject *t_TernaryTree_printStats(t_TernaryTree *self, PyObject *arg);
            static PyObject *t_TernaryTree_size(t_TernaryTree *self);
            static PyObject *t_TernaryTree_strcmp(PyTypeObject *type, PyObject *args);
            static PyObject *t_TernaryTree_strcpy(PyTypeObject *type, PyObject *args);
            static PyObject *t_TernaryTree_strlen(PyTypeObject *type, PyObject *args);
            static PyObject *t_TernaryTree_trimToSize(t_TernaryTree *self);

            static PyMethodDef t_TernaryTree__methods_[] = {
              DECLARE_METHOD(t_TernaryTree, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, balance, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree, clone, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree, find, METH_VARARGS),
              DECLARE_METHOD(t_TernaryTree, insert, METH_VARARGS),
              DECLARE_METHOD(t_TernaryTree, keys, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree, knows, METH_O),
              DECLARE_METHOD(t_TernaryTree, printStats, METH_O),
              DECLARE_METHOD(t_TernaryTree, size, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree, strcmp, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, strcpy, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, strlen, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree, trimToSize, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(TernaryTree)[] = {
              { Py_tp_methods, t_TernaryTree__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(TernaryTree)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(TernaryTree, t_TernaryTree, TernaryTree);

            void t_TernaryTree::install(PyObject *module)
            {
              installType(&PY_TYPE(TernaryTree), &PY_TYPE_DEF(TernaryTree), module, "TernaryTree", 0);
            }

            void t_TernaryTree::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(TernaryTree), "class_", make_descriptor(TernaryTree::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TernaryTree), "wrapfn_", make_descriptor(t_TernaryTree::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TernaryTree), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TernaryTree_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TernaryTree::initializeClass, 1)))
                return NULL;
              return t_TernaryTree::wrap_Object(TernaryTree(((t_TernaryTree *) arg)->object.this$));
            }
            static PyObject *t_TernaryTree_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TernaryTree::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TernaryTree_balance(t_TernaryTree *self)
            {
              OBJ_CALL(self->object.balance());
              Py_RETURN_NONE;
            }

            static PyObject *t_TernaryTree_clone(t_TernaryTree *self)
            {
              TernaryTree result((jobject) NULL);
              OBJ_CALL(result = self->object.clone());
              return t_TernaryTree::wrap_Object(result);
            }

            static PyObject *t_TernaryTree_find(t_TernaryTree *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jint result;

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(result = self->object.find(a0));
                    return PyLong_FromLong((long) result);
                  }
                }
                break;
               case 2:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  jint result;

                  if (!parseArgs(args, "[CI", &a0, &a1))
                  {
                    OBJ_CALL(result = self->object.find(a0, a1));
                    return PyLong_FromLong((long) result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "find", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_insert(t_TernaryTree *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jchar a1;

                  if (!parseArgs(args, "sC", &a0, &a1))
                  {
                    OBJ_CALL(self->object.insert(a0, a1));
                    Py_RETURN_NONE;
                  }
                }
                break;
               case 3:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  jchar a2;

                  if (!parseArgs(args, "[CIC", &a0, &a1, &a2))
                  {
                    OBJ_CALL(self->object.insert(a0, a1, a2));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "insert", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_keys(t_TernaryTree *self)
            {
              ::java::util::Enumeration result((jobject) NULL);
              OBJ_CALL(result = self->object.keys());
              return ::java::util::t_Enumeration::wrap_Object(result, ::java::lang::PY_TYPE(String));
            }

            static PyObject *t_TernaryTree_knows(t_TernaryTree *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean result;

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.knows(a0));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "knows", arg);
              return NULL;
            }

            static PyObject *t_TernaryTree_printStats(t_TernaryTree *self, PyObject *arg)
            {
              ::java::io::PrintStream a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(self->object.printStats(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "printStats", arg);
              return NULL;
            }

            static PyObject *t_TernaryTree_size(t_TernaryTree *self)
            {
              jint result;
              OBJ_CALL(result = self->object.size());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_TernaryTree_strcmp(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::java::lang::String a0((jobject) NULL);
                  JArray< jchar > a1((jobject) NULL);
                  jint a2;
                  jint result;

                  if (!parseArgs(args, "s[CI", &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strcmp(a0, a1, a2));
                    return PyLong_FromLong((long) result);
                  }
                }
                break;
               case 4:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  JArray< jchar > a2((jobject) NULL);
                  jint a3;
                  jint result;

                  if (!parseArgs(args, "[CI[CI", &a0, &a1, &a2, &a3))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strcmp(a0, a1, a2, a3));
                    return PyLong_FromLong((long) result);
                  }
                }
              }

              PyErr_SetArgsError(type, "strcmp", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_strcpy(PyTypeObject *type, PyObject *args)
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              JArray< jchar > a2((jobject) NULL);
              jint a3;

              if (!parseArgs(args, "[CI[CI", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strcpy(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError(type, "strcpy", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_strlen(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint result;

                  if (!parseArgs(args, "[C", &a0))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strlen(a0));
                    return PyLong_FromLong((long) result);
                  }
                }
                break;
               case 2:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  jint result;

                  if (!parseArgs(args, "[CI", &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::strlen(a0, a1));
                    return PyLong_FromLong((long) result);
                  }
                }
              }

              PyErr_SetArgsError(type, "strlen", args);
              return NULL;
            }

            static PyObject *t_TernaryTree_trimToSize(t_TernaryTree *self)
            {
              OBJ_CALL(self->object.trimToSize());
              Py_RETURN_NONE;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/ApostropheFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *ApostropheFilterFactory::class$ = NULL;
          jmethodID *ApostropheFilterFactory::mids$ = NULL;
          bool ApostropheFilterFactory::live$ = false;
          ::java::lang::String *ApostropheFilterFactory::NAME = NULL;

          jclass ApostropheFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/ApostropheFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ApostropheFilterFactory::ApostropheFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream ApostropheFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_ApostropheFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ApostropheFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ApostropheFilterFactory_init_(t_ApostropheFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ApostropheFilterFactory_create(t_ApostropheFilterFactory *self, PyObject *args);

          static PyMethodDef t_ApostropheFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ApostropheFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ApostropheFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ApostropheFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ApostropheFilterFactory)[] = {
            { Py_tp_methods, t_ApostropheFilterFactory__methods_ },
            { Py_tp_init, (void *) t_ApostropheFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ApostropheFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(ApostropheFilterFactory, t_ApostropheFilterFactory, ApostropheFilterFactory);

          void t_ApostropheFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ApostropheFilterFactory), &PY_TYPE_DEF(ApostropheFilterFactory), module, "ApostropheFilterFactory", 0);
          }

          void t_ApostropheFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ApostropheFilterFactory), "class_", make_descriptor(ApostropheFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ApostropheFilterFactory), "wrapfn_", make_descriptor(t_ApostropheFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ApostropheFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(ApostropheFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ApostropheFilterFactory), "NAME", make_descriptor(j2p(*ApostropheFilterFactory::NAME)));
          }

          static PyObject *t_ApostropheFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ApostropheFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ApostropheFilterFactory::wrap_Object(ApostropheFilterFactory(((t_ApostropheFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ApostropheFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ApostropheFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ApostropheFilterFactory_init_(t_ApostropheFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ApostropheFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ApostropheFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ApostropheFilterFactory_create(t_ApostropheFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ApostropheFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/ArcDistance.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/spatial3d/geom/DistanceStyle.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "org/apache/lucene/spatial3d/geom/ArcDistance.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/Plane.h"
#include "org/apache/lucene/spatial3d/geom/Membership.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *ArcDistance::class$ = NULL;
          jmethodID *ArcDistance::mids$ = NULL;
          bool ArcDistance::live$ = false;
          ArcDistance *ArcDistance::INSTANCE = NULL;

          jclass ArcDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/ArcDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeDistance_5d9fe562983a5b40] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;Lorg/apache/lucene/spatial3d/geom/GeoPoint;)D");
              mids$[mid_computeDistance_1ec77ef423ee02b8] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;Lorg/apache/lucene/spatial3d/geom/GeoPoint;[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_computeDistance_9a12f42782ddf048] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;DDD)D");
              mids$[mid_computeDistance_e314394bf9f24d4d] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;DDD[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_findDistancePoints_90e364a30b4d8b55] = env->getMethodID(cls, "findDistancePoints", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DLorg/apache/lucene/spatial3d/geom/GeoPoint;Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)[Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_findMaximumArcDistance_63963df67d49d40a] = env->getMethodID(cls, "findMaximumArcDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;D)D");
              mids$[mid_findMinimumArcDistance_63963df67d49d40a] = env->getMethodID(cls, "findMinimumArcDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;D)D");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              INSTANCE = new ArcDistance(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/spatial3d/geom/ArcDistance;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArcDistance::ArcDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jdouble ArcDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_5d9fe562983a5b40], a0.this$, a1.this$);
          }

          jdouble ArcDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::Plane & a1, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a2, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_1ec77ef423ee02b8], a0.this$, a1.this$, a2.this$, a3.this$);
          }

          jdouble ArcDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0, jdouble a1, jdouble a2, jdouble a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_9a12f42782ddf048], a0.this$, a1, a2, a3);
          }

          jdouble ArcDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::Plane & a1, jdouble a2, jdouble a3, jdouble a4, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a5) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_e314394bf9f24d4d], a0.this$, a1.this$, a2, a3, a4, a5.this$);
          }

          JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > ArcDistance::findDistancePoints(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a2, const ::org::apache::lucene::spatial3d::geom::Plane & a3, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a4) const
          {
            return JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint >(env->callObjectMethod(this$, mids$[mid_findDistancePoints_90e364a30b4d8b55], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          jdouble ArcDistance::findMaximumArcDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_findMaximumArcDistance_63963df67d49d40a], a0.this$, a1);
          }

          jdouble ArcDistance::findMinimumArcDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_findMinimumArcDistance_63963df67d49d40a], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_ArcDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArcDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArcDistance_init_(t_ArcDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArcDistance_computeDistance(t_ArcDistance *self, PyObject *args);
          static PyObject *t_ArcDistance_findDistancePoints(t_ArcDistance *self, PyObject *args);
          static PyObject *t_ArcDistance_findMaximumArcDistance(t_ArcDistance *self, PyObject *args);
          static PyObject *t_ArcDistance_findMinimumArcDistance(t_ArcDistance *self, PyObject *args);

          static PyMethodDef t_ArcDistance__methods_[] = {
            DECLARE_METHOD(t_ArcDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArcDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArcDistance, computeDistance, METH_VARARGS),
            DECLARE_METHOD(t_ArcDistance, findDistancePoints, METH_VARARGS),
            DECLARE_METHOD(t_ArcDistance, findMaximumArcDistance, METH_VARARGS),
            DECLARE_METHOD(t_ArcDistance, findMinimumArcDistance, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ArcDistance)[] = {
            { Py_tp_methods, t_ArcDistance__methods_ },
            { Py_tp_init, (void *) t_ArcDistance_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ArcDistance)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(ArcDistance, t_ArcDistance, ArcDistance);

          void t_ArcDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(ArcDistance), &PY_TYPE_DEF(ArcDistance), module, "ArcDistance", 0);
          }

          void t_ArcDistance::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArcDistance), "class_", make_descriptor(ArcDistance::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArcDistance), "wrapfn_", make_descriptor(t_ArcDistance::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArcDistance), "boxfn_", make_descriptor(boxObject));
            env->getClass(ArcDistance::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArcDistance), "INSTANCE", make_descriptor(t_ArcDistance::wrap_Object(*ArcDistance::INSTANCE)));
          }

          static PyObject *t_ArcDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArcDistance::initializeClass, 1)))
              return NULL;
            return t_ArcDistance::wrap_Object(ArcDistance(((t_ArcDistance *) arg)->object.this$));
          }
          static PyObject *t_ArcDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArcDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArcDistance_init_(t_ArcDistance *self, PyObject *args, PyObject *kwds)
          {
            ArcDistance object((jobject) NULL);

            INT_CALL(object = ArcDistance());
            self->object = object;

            return 0;
          }

          static PyObject *t_ArcDistance_computeDistance(t_ArcDistance *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Plane a1((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a2((jobject) NULL);
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a3((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kkk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
              {
                ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble result;

                if (!parseArgs(args, "kDDD", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 6:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Plane a1((jobject) NULL);
                jdouble a2;
                jdouble a3;
                jdouble a4;
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a5((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kkDDD[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1, a2, a3, a4, a5));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "computeDistance", args);
            return NULL;
          }

          static PyObject *t_ArcDistance_findDistancePoints(t_ArcDistance *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            ::org::apache::lucene::spatial3d::geom::GeoPoint a2((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Plane a3((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a4((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > result((jobject) NULL);

            if (!parseArgs(args, "kDkk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.findDistancePoints(a0, a1, a2, a3, a4));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_jobject);
            }

            PyErr_SetArgsError((PyObject *) self, "findDistancePoints", args);
            return NULL;
          }

          static PyObject *t_ArcDistance_findMaximumArcDistance(t_ArcDistance *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            jdouble result;

            if (!parseArgs(args, "kD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findMaximumArcDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findMaximumArcDistance", args);
            return NULL;
          }

          static PyObject *t_ArcDistance_findMinimumArcDistance(t_ArcDistance *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            jdouble result;

            if (!parseArgs(args, "kD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findMinimumArcDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findMinimumArcDistance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/it/ItalianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {

          ::java::lang::Class *ItalianAnalyzer::class$ = NULL;
          jmethodID *ItalianAnalyzer::mids$ = NULL;
          bool ItalianAnalyzer::live$ = false;
          ::java::lang::String *ItalianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass ItalianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/it/ItalianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ItalianAnalyzer::ItalianAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ItalianAnalyzer::ItalianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          ItalianAnalyzer::ItalianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet ItalianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {
          static PyObject *t_ItalianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ItalianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ItalianAnalyzer_init_(t_ItalianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ItalianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_ItalianAnalyzer_get__defaultStopSet(t_ItalianAnalyzer *self, void *data);
          static PyGetSetDef t_ItalianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_ItalianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ItalianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ItalianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ItalianAnalyzer)[] = {
            { Py_tp_methods, t_ItalianAnalyzer__methods_ },
            { Py_tp_init, (void *) t_ItalianAnalyzer_init_ },
            { Py_tp_getset, t_ItalianAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ItalianAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(ItalianAnalyzer, t_ItalianAnalyzer, ItalianAnalyzer);

          void t_ItalianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ItalianAnalyzer), &PY_TYPE_DEF(ItalianAnalyzer), module, "ItalianAnalyzer", 0);
          }

          void t_ItalianAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ItalianAnalyzer), "class_", make_descriptor(ItalianAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ItalianAnalyzer), "wrapfn_", make_descriptor(t_ItalianAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ItalianAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(ItalianAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ItalianAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*ItalianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_ItalianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ItalianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ItalianAnalyzer::wrap_Object(ItalianAnalyzer(((t_ItalianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ItalianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ItalianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ItalianAnalyzer_init_(t_ItalianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ItalianAnalyzer object((jobject) NULL);

                INT_CALL(object = ItalianAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ItalianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ItalianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ItalianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ItalianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ItalianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::it::ItalianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_ItalianAnalyzer_get__defaultStopSet(t_ItalianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SlowCodecReaderWrapper.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/CodecReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SlowCodecReaderWrapper::class$ = NULL;
        jmethodID *SlowCodecReaderWrapper::mids$ = NULL;
        bool SlowCodecReaderWrapper::live$ = false;

        jclass SlowCodecReaderWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SlowCodecReaderWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_wrap_d1287858ca697fcd] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/index/LeafReader;)Lorg/apache/lucene/index/CodecReader;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::CodecReader SlowCodecReaderWrapper::wrap(const ::org::apache::lucene::index::LeafReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CodecReader(env->callStaticObjectMethod(cls, mids$[mid_wrap_d1287858ca697fcd], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SlowCodecReaderWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SlowCodecReaderWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SlowCodecReaderWrapper_wrap(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_SlowCodecReaderWrapper__methods_[] = {
          DECLARE_METHOD(t_SlowCodecReaderWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SlowCodecReaderWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SlowCodecReaderWrapper, wrap, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SlowCodecReaderWrapper)[] = {
          { Py_tp_methods, t_SlowCodecReaderWrapper__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SlowCodecReaderWrapper)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SlowCodecReaderWrapper, t_SlowCodecReaderWrapper, SlowCodecReaderWrapper);

        void t_SlowCodecReaderWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(SlowCodecReaderWrapper), &PY_TYPE_DEF(SlowCodecReaderWrapper), module, "SlowCodecReaderWrapper", 0);
        }

        void t_SlowCodecReaderWrapper::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SlowCodecReaderWrapper), "class_", make_descriptor(SlowCodecReaderWrapper::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SlowCodecReaderWrapper), "wrapfn_", make_descriptor(t_SlowCodecReaderWrapper::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SlowCodecReaderWrapper), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SlowCodecReaderWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SlowCodecReaderWrapper::initializeClass, 1)))
            return NULL;
          return t_SlowCodecReaderWrapper::wrap_Object(SlowCodecReaderWrapper(((t_SlowCodecReaderWrapper *) arg)->object.this$));
        }
        static PyObject *t_SlowCodecReaderWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SlowCodecReaderWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SlowCodecReaderWrapper_wrap(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
          ::org::apache::lucene::index::CodecReader result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::SlowCodecReaderWrapper::wrap(a0));
            return ::org::apache::lucene::index::t_CodecReader::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianMinimalStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianMinimalStemFilterFactory::class$ = NULL;
          jmethodID *GalicianMinimalStemFilterFactory::mids$ = NULL;
          bool GalicianMinimalStemFilterFactory::live$ = false;
          ::java::lang::String *GalicianMinimalStemFilterFactory::NAME = NULL;

          jclass GalicianMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianMinimalStemFilterFactory::GalicianMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GalicianMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianMinimalStemFilterFactory_init_(t_GalicianMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianMinimalStemFilterFactory_create(t_GalicianMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GalicianMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GalicianMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GalicianMinimalStemFilterFactory)[] = {
            { Py_tp_methods, t_GalicianMinimalStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_GalicianMinimalStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GalicianMinimalStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(GalicianMinimalStemFilterFactory, t_GalicianMinimalStemFilterFactory, GalicianMinimalStemFilterFactory);

          void t_GalicianMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianMinimalStemFilterFactory), &PY_TYPE_DEF(GalicianMinimalStemFilterFactory), module, "GalicianMinimalStemFilterFactory", 0);
          }

          void t_GalicianMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianMinimalStemFilterFactory), "class_", make_descriptor(GalicianMinimalStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianMinimalStemFilterFactory), "wrapfn_", make_descriptor(t_GalicianMinimalStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianMinimalStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(GalicianMinimalStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianMinimalStemFilterFactory), "NAME", make_descriptor(j2p(*GalicianMinimalStemFilterFactory::NAME)));
          }

          static PyObject *t_GalicianMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GalicianMinimalStemFilterFactory::wrap_Object(GalicianMinimalStemFilterFactory(((t_GalicianMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GalicianMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianMinimalStemFilterFactory_init_(t_GalicianMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GalicianMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GalicianMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianMinimalStemFilterFactory_create(t_GalicianMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(GalicianMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/br/BrazilianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {

          ::java::lang::Class *BrazilianAnalyzer::class$ = NULL;
          jmethodID *BrazilianAnalyzer::mids$ = NULL;
          bool BrazilianAnalyzer::live$ = false;
          ::java::lang::String *BrazilianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass BrazilianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/br/BrazilianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BrazilianAnalyzer::BrazilianAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          BrazilianAnalyzer::BrazilianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          BrazilianAnalyzer::BrazilianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet BrazilianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {
          static PyObject *t_BrazilianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BrazilianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BrazilianAnalyzer_init_(t_BrazilianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BrazilianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_BrazilianAnalyzer_get__defaultStopSet(t_BrazilianAnalyzer *self, void *data);
          static PyGetSetDef t_BrazilianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_BrazilianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BrazilianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_BrazilianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BrazilianAnalyzer)[] = {
            { Py_tp_methods, t_BrazilianAnalyzer__methods_ },
            { Py_tp_init, (void *) t_BrazilianAnalyzer_init_ },
            { Py_tp_getset, t_BrazilianAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BrazilianAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(BrazilianAnalyzer, t_BrazilianAnalyzer, BrazilianAnalyzer);

          void t_BrazilianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(BrazilianAnalyzer), &PY_TYPE_DEF(BrazilianAnalyzer), module, "BrazilianAnalyzer", 0);
          }

          void t_BrazilianAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BrazilianAnalyzer), "class_", make_descriptor(BrazilianAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BrazilianAnalyzer), "wrapfn_", make_descriptor(t_BrazilianAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BrazilianAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(BrazilianAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BrazilianAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*BrazilianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_BrazilianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BrazilianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_BrazilianAnalyzer::wrap_Object(BrazilianAnalyzer(((t_BrazilianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_BrazilianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BrazilianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BrazilianAnalyzer_init_(t_BrazilianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                BrazilianAnalyzer object((jobject) NULL);

                INT_CALL(object = BrazilianAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                BrazilianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BrazilianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                BrazilianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BrazilianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BrazilianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::br::BrazilianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_BrazilianAnalyzer_get__defaultStopSet(t_BrazilianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiValuedLongFieldSource.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/SortedNumericSelector$Type.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiValuedLongFieldSource::class$ = NULL;
            jmethodID *MultiValuedLongFieldSource::mids$ = NULL;
            bool MultiValuedLongFieldSource::live$ = false;

            jclass MultiValuedLongFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiValuedLongFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_eb65f30ff755fcc7] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortedNumericSelector$Type;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getSortField_8a713675264264ba] = env->getMethodID(cls, "getSortField", "(Z)Lorg/apache/lucene/search/SortField;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_getNumericDocValues_991afb5c8a130516] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/index/NumericDocValues;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiValuedLongFieldSource::MultiValuedLongFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortedNumericSelector$Type & a1) : ::org::apache::lucene::queries::function::valuesource::LongFieldSource(env->newObject(initializeClass, &mids$, mid_init$_eb65f30ff755fcc7, a0.this$, a1.this$)) {}

            ::java::lang::String MultiValuedLongFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean MultiValuedLongFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::search::SortField MultiValuedLongFieldSource::getSortField(jboolean a0) const
            {
              return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_getSortField_8a713675264264ba], a0));
            }

            jint MultiValuedLongFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiValuedLongFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiValuedLongFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiValuedLongFieldSource_init_(t_MultiValuedLongFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiValuedLongFieldSource_description(t_MultiValuedLongFieldSource *self, PyObject *args);
            static PyObject *t_MultiValuedLongFieldSource_equals(t_MultiValuedLongFieldSource *self, PyObject *args);
            static PyObject *t_MultiValuedLongFieldSource_getSortField(t_MultiValuedLongFieldSource *self, PyObject *args);
            static PyObject *t_MultiValuedLongFieldSource_hashCode(t_MultiValuedLongFieldSource *self, PyObject *args);

            static PyMethodDef t_MultiValuedLongFieldSource__methods_[] = {
              DECLARE_METHOD(t_MultiValuedLongFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiValuedLongFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiValuedLongFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_MultiValuedLongFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_MultiValuedLongFieldSource, getSortField, METH_VARARGS),
              DECLARE_METHOD(t_MultiValuedLongFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(MultiValuedLongFieldSource)[] = {
              { Py_tp_methods, t_MultiValuedLongFieldSource__methods_ },
              { Py_tp_init, (void *) t_MultiValuedLongFieldSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(MultiValuedLongFieldSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::LongFieldSource),
              NULL
            };

            DEFINE_TYPE(MultiValuedLongFieldSource, t_MultiValuedLongFieldSource, MultiValuedLongFieldSource);

            void t_MultiValuedLongFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiValuedLongFieldSource), &PY_TYPE_DEF(MultiValuedLongFieldSource), module, "MultiValuedLongFieldSource", 0);
            }

            void t_MultiValuedLongFieldSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiValuedLongFieldSource), "class_", make_descriptor(MultiValuedLongFieldSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiValuedLongFieldSource), "wrapfn_", make_descriptor(t_MultiValuedLongFieldSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiValuedLongFieldSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiValuedLongFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiValuedLongFieldSource::initializeClass, 1)))
                return NULL;
              return t_MultiValuedLongFieldSource::wrap_Object(MultiValuedLongFieldSource(((t_MultiValuedLongFieldSource *) arg)->object.this$));
            }
            static PyObject *t_MultiValuedLongFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiValuedLongFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiValuedLongFieldSource_init_(t_MultiValuedLongFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortedNumericSelector$Type a1((jobject) NULL);
              PyTypeObject **p1;
              MultiValuedLongFieldSource object((jobject) NULL);

              if (!parseArgs(args, "sK", ::org::apache::lucene::search::SortedNumericSelector$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortedNumericSelector$Type::parameters_))
              {
                INT_CALL(object = MultiValuedLongFieldSource(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiValuedLongFieldSource_description(t_MultiValuedLongFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(MultiValuedLongFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MultiValuedLongFieldSource_equals(t_MultiValuedLongFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(MultiValuedLongFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MultiValuedLongFieldSource_getSortField(t_MultiValuedLongFieldSource *self, PyObject *args)
            {
              jboolean a0;
              ::org::apache::lucene::search::SortField result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = self->object.getSortField(a0));
                return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
              }

              return callSuper(PY_TYPE(MultiValuedLongFieldSource), (PyObject *) self, "getSortField", args, 2);
            }

            static PyObject *t_MultiValuedLongFieldSource_hashCode(t_MultiValuedLongFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(MultiValuedLongFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/QueryTimeout.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *QueryTimeout::class$ = NULL;
        jmethodID *QueryTimeout::mids$ = NULL;
        bool QueryTimeout::live$ = false;

        jclass QueryTimeout::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/QueryTimeout");

            mids$ = new jmethodID[max_mid];
            mids$[mid_isTimeoutEnabled_8454bd5aa23fd11e] = env->getMethodID(cls, "isTimeoutEnabled", "()Z");
            mids$[mid_shouldExit_8454bd5aa23fd11e] = env->getMethodID(cls, "shouldExit", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean QueryTimeout::isTimeoutEnabled() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isTimeoutEnabled_8454bd5aa23fd11e]);
        }

        jboolean QueryTimeout::shouldExit() const
        {
          return env->callBooleanMethod(this$, mids$[mid_shouldExit_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_QueryTimeout_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryTimeout_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryTimeout_isTimeoutEnabled(t_QueryTimeout *self);
        static PyObject *t_QueryTimeout_shouldExit(t_QueryTimeout *self);
        static PyObject *t_QueryTimeout_get__timeoutEnabled(t_QueryTimeout *self, void *data);
        static PyGetSetDef t_QueryTimeout__fields_[] = {
          DECLARE_GET_FIELD(t_QueryTimeout, timeoutEnabled),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_QueryTimeout__methods_[] = {
          DECLARE_METHOD(t_QueryTimeout, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryTimeout, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryTimeout, isTimeoutEnabled, METH_NOARGS),
          DECLARE_METHOD(t_QueryTimeout, shouldExit, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(QueryTimeout)[] = {
          { Py_tp_methods, t_QueryTimeout__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_QueryTimeout__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(QueryTimeout)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(QueryTimeout, t_QueryTimeout, QueryTimeout);

        void t_QueryTimeout::install(PyObject *module)
        {
          installType(&PY_TYPE(QueryTimeout), &PY_TYPE_DEF(QueryTimeout), module, "QueryTimeout", 0);
        }

        void t_QueryTimeout::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryTimeout), "class_", make_descriptor(QueryTimeout::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryTimeout), "wrapfn_", make_descriptor(t_QueryTimeout::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryTimeout), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_QueryTimeout_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, QueryTimeout::initializeClass, 1)))
            return NULL;
          return t_QueryTimeout::wrap_Object(QueryTimeout(((t_QueryTimeout *) arg)->object.this$));
        }
        static PyObject *t_QueryTimeout_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, QueryTimeout::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_QueryTimeout_isTimeoutEnabled(t_QueryTimeout *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isTimeoutEnabled());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_QueryTimeout_shouldExit(t_QueryTimeout *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.shouldExit());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_QueryTimeout_get__timeoutEnabled(t_QueryTimeout *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isTimeoutEnabled());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/IndriDirichletSimilarity.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *IndriDirichletSimilarity::class$ = NULL;
          jmethodID *IndriDirichletSimilarity::mids$ = NULL;
          bool IndriDirichletSimilarity::live$ = false;

          jclass IndriDirichletSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/IndriDirichletSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_8e1d952dd65cdc3a] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_070af2e40388d15d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;)V");
              mids$[mid_init$_f196124a35795af7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;F)V");
              mids$[mid_getMu_58aec2b64dff50c8] = env->getMethodID(cls, "getMu", "()F");
              mids$[mid_getName_db9b55ba01e03e4b] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
              mids$[mid_score_761ab1c432346fd0] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_explain_f9756f2482a92b24] = env->getMethodID(cls, "explain", "(Ljava/util/List;Lorg/apache/lucene/search/similarities/BasicStats;DD)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndriDirichletSimilarity::IndriDirichletSimilarity() : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          IndriDirichletSimilarity::IndriDirichletSimilarity(jfloat a0) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_8e1d952dd65cdc3a, a0)) {}

          IndriDirichletSimilarity::IndriDirichletSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_070af2e40388d15d, a0.this$)) {}

          IndriDirichletSimilarity::IndriDirichletSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0, jfloat a1) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_f196124a35795af7, a0.this$, a1)) {}

          jfloat IndriDirichletSimilarity::getMu() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMu_58aec2b64dff50c8]);
          }

          ::java::lang::String IndriDirichletSimilarity::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/similarities/IndriDirichletSimilarity$IndriCollectionModel.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_IndriDirichletSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndriDirichletSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndriDirichletSimilarity_init_(t_IndriDirichletSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndriDirichletSimilarity_getMu(t_IndriDirichletSimilarity *self);
          static PyObject *t_IndriDirichletSimilarity_getName(t_IndriDirichletSimilarity *self, PyObject *args);
          static PyObject *t_IndriDirichletSimilarity_get__mu(t_IndriDirichletSimilarity *self, void *data);
          static PyObject *t_IndriDirichletSimilarity_get__name(t_IndriDirichletSimilarity *self, void *data);
          static PyGetSetDef t_IndriDirichletSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_IndriDirichletSimilarity, mu),
            DECLARE_GET_FIELD(t_IndriDirichletSimilarity, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IndriDirichletSimilarity__methods_[] = {
            DECLARE_METHOD(t_IndriDirichletSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndriDirichletSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndriDirichletSimilarity, getMu, METH_NOARGS),
            DECLARE_METHOD(t_IndriDirichletSimilarity, getName, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IndriDirichletSimilarity)[] = {
            { Py_tp_methods, t_IndriDirichletSimilarity__methods_ },
            { Py_tp_init, (void *) t_IndriDirichletSimilarity_init_ },
            { Py_tp_getset, t_IndriDirichletSimilarity__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IndriDirichletSimilarity)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::LMSimilarity),
            NULL
          };

          DEFINE_TYPE(IndriDirichletSimilarity, t_IndriDirichletSimilarity, IndriDirichletSimilarity);

          void t_IndriDirichletSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(IndriDirichletSimilarity), &PY_TYPE_DEF(IndriDirichletSimilarity), module, "IndriDirichletSimilarity", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndriDirichletSimilarity), "IndriCollectionModel", make_descriptor(&PY_TYPE_DEF(IndriDirichletSimilarity$IndriCollectionModel)));
          }

          void t_IndriDirichletSimilarity::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndriDirichletSimilarity), "class_", make_descriptor(IndriDirichletSimilarity::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndriDirichletSimilarity), "wrapfn_", make_descriptor(t_IndriDirichletSimilarity::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndriDirichletSimilarity), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndriDirichletSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndriDirichletSimilarity::initializeClass, 1)))
              return NULL;
            return t_IndriDirichletSimilarity::wrap_Object(IndriDirichletSimilarity(((t_IndriDirichletSimilarity *) arg)->object.this$));
          }
          static PyObject *t_IndriDirichletSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndriDirichletSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndriDirichletSimilarity_init_(t_IndriDirichletSimilarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                IndriDirichletSimilarity object((jobject) NULL);

                INT_CALL(object = IndriDirichletSimilarity());
                self->object = object;
                break;
              }
             case 1:
              {
                jfloat a0;
                IndriDirichletSimilarity object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = IndriDirichletSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                IndriDirichletSimilarity object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0))
                {
                  INT_CALL(object = IndriDirichletSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                jfloat a1;
                IndriDirichletSimilarity object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = IndriDirichletSimilarity(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndriDirichletSimilarity_getMu(t_IndriDirichletSimilarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMu());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_IndriDirichletSimilarity_getName(t_IndriDirichletSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getName());
              return j2p(result);
            }

            return callSuper(PY_TYPE(IndriDirichletSimilarity), (PyObject *) self, "getName", args, 2);
          }

          static PyObject *t_IndriDirichletSimilarity_get__mu(t_IndriDirichletSimilarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMu());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_IndriDirichletSimilarity_get__name(t_IndriDirichletSimilarity *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/WeakIdentityMap.h"
#include "org/apache/lucene/util/WeakIdentityMap.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *WeakIdentityMap::class$ = NULL;
        jmethodID *WeakIdentityMap::mids$ = NULL;
        bool WeakIdentityMap::live$ = false;

        jclass WeakIdentityMap::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/WeakIdentityMap");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_containsKey_8b72f2dcdde6fd1d] = env->getMethodID(cls, "containsKey", "(Ljava/lang/Object;)Z");
            mids$[mid_get_e5ae0f8c04795fa9] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_isEmpty_8454bd5aa23fd11e] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_keyIterator_233a192dadb0917d] = env->getMethodID(cls, "keyIterator", "()Ljava/util/Iterator;");
            mids$[mid_newConcurrentHashMap_4063a27ff8ed601d] = env->getStaticMethodID(cls, "newConcurrentHashMap", "()Lorg/apache/lucene/util/WeakIdentityMap;");
            mids$[mid_newConcurrentHashMap_7c317946f3b46d7b] = env->getStaticMethodID(cls, "newConcurrentHashMap", "(Z)Lorg/apache/lucene/util/WeakIdentityMap;");
            mids$[mid_newHashMap_4063a27ff8ed601d] = env->getStaticMethodID(cls, "newHashMap", "()Lorg/apache/lucene/util/WeakIdentityMap;");
            mids$[mid_newHashMap_7c317946f3b46d7b] = env->getStaticMethodID(cls, "newHashMap", "(Z)Lorg/apache/lucene/util/WeakIdentityMap;");
            mids$[mid_put_128a89bbc17a8b69] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_reap_f2cc1bce94666404] = env->getMethodID(cls, "reap", "()V");
            mids$[mid_remove_e5ae0f8c04795fa9] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
            mids$[mid_valueIterator_233a192dadb0917d] = env->getMethodID(cls, "valueIterator", "()Ljava/util/Iterator;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void WeakIdentityMap::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
        }

        jboolean WeakIdentityMap::containsKey(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_containsKey_8b72f2dcdde6fd1d], a0.this$);
        }

        ::java::lang::Object WeakIdentityMap::get(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_e5ae0f8c04795fa9], a0.this$));
        }

        jboolean WeakIdentityMap::isEmpty() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEmpty_8454bd5aa23fd11e]);
        }

        ::java::util::Iterator WeakIdentityMap::keyIterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_keyIterator_233a192dadb0917d]));
        }

        WeakIdentityMap WeakIdentityMap::newConcurrentHashMap()
        {
          jclass cls = env->getClass(initializeClass);
          return WeakIdentityMap(env->callStaticObjectMethod(cls, mids$[mid_newConcurrentHashMap_4063a27ff8ed601d]));
        }

        WeakIdentityMap WeakIdentityMap::newConcurrentHashMap(jboolean a0)
        {
          jclass cls = env->getClass(initializeClass);
          return WeakIdentityMap(env->callStaticObjectMethod(cls, mids$[mid_newConcurrentHashMap_7c317946f3b46d7b], a0));
        }

        WeakIdentityMap WeakIdentityMap::newHashMap()
        {
          jclass cls = env->getClass(initializeClass);
          return WeakIdentityMap(env->callStaticObjectMethod(cls, mids$[mid_newHashMap_4063a27ff8ed601d]));
        }

        WeakIdentityMap WeakIdentityMap::newHashMap(jboolean a0)
        {
          jclass cls = env->getClass(initializeClass);
          return WeakIdentityMap(env->callStaticObjectMethod(cls, mids$[mid_newHashMap_7c317946f3b46d7b], a0));
        }

        ::java::lang::Object WeakIdentityMap::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_128a89bbc17a8b69], a0.this$, a1.this$));
        }

        void WeakIdentityMap::reap() const
        {
          env->callVoidMethod(this$, mids$[mid_reap_f2cc1bce94666404]);
        }

        ::java::lang::Object WeakIdentityMap::remove(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_e5ae0f8c04795fa9], a0.this$));
        }

        jint WeakIdentityMap::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
        }

        ::java::util::Iterator WeakIdentityMap::valueIterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_valueIterator_233a192dadb0917d]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_WeakIdentityMap_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WeakIdentityMap_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WeakIdentityMap_of_(t_WeakIdentityMap *self, PyObject *args);
        static PyObject *t_WeakIdentityMap_clear(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_containsKey(t_WeakIdentityMap *self, PyObject *arg);
        static PyObject *t_WeakIdentityMap_get(t_WeakIdentityMap *self, PyObject *arg);
        static PyObject *t_WeakIdentityMap_isEmpty(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_keyIterator(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_newConcurrentHashMap(PyTypeObject *type, PyObject *args);
        static PyObject *t_WeakIdentityMap_newHashMap(PyTypeObject *type, PyObject *args);
        static PyObject *t_WeakIdentityMap_put(t_WeakIdentityMap *self, PyObject *args);
        static PyObject *t_WeakIdentityMap_reap(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_remove(t_WeakIdentityMap *self, PyObject *arg);
        static PyObject *t_WeakIdentityMap_size(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_valueIterator(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_get__empty(t_WeakIdentityMap *self, void *data);
        static PyObject *t_WeakIdentityMap_get__parameters_(t_WeakIdentityMap *self, void *data);
        static PyGetSetDef t_WeakIdentityMap__fields_[] = {
          DECLARE_GET_FIELD(t_WeakIdentityMap, empty),
          DECLARE_GET_FIELD(t_WeakIdentityMap, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_WeakIdentityMap__methods_[] = {
          DECLARE_METHOD(t_WeakIdentityMap, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WeakIdentityMap, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WeakIdentityMap, of_, METH_VARARGS),
          DECLARE_METHOD(t_WeakIdentityMap, clear, METH_NOARGS),
          DECLARE_METHOD(t_WeakIdentityMap, containsKey, METH_O),
          DECLARE_METHOD(t_WeakIdentityMap, get, METH_O),
          DECLARE_METHOD(t_WeakIdentityMap, isEmpty, METH_NOARGS),
          DECLARE_METHOD(t_WeakIdentityMap, keyIterator, METH_NOARGS),
          DECLARE_METHOD(t_WeakIdentityMap, newConcurrentHashMap, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_WeakIdentityMap, newHashMap, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_WeakIdentityMap, put, METH_VARARGS),
          DECLARE_METHOD(t_WeakIdentityMap, reap, METH_NOARGS),
          DECLARE_METHOD(t_WeakIdentityMap, remove, METH_O),
          DECLARE_METHOD(t_WeakIdentityMap, size, METH_NOARGS),
          DECLARE_METHOD(t_WeakIdentityMap, valueIterator, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(WeakIdentityMap)[] = {
          { Py_tp_methods, t_WeakIdentityMap__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_WeakIdentityMap__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(WeakIdentityMap)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(WeakIdentityMap, t_WeakIdentityMap, WeakIdentityMap);
        PyObject *t_WeakIdentityMap::wrap_Object(const WeakIdentityMap& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_WeakIdentityMap::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_WeakIdentityMap *self = (t_WeakIdentityMap *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_WeakIdentityMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_WeakIdentityMap::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_WeakIdentityMap *self = (t_WeakIdentityMap *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_WeakIdentityMap::install(PyObject *module)
        {
          installType(&PY_TYPE(WeakIdentityMap), &PY_TYPE_DEF(WeakIdentityMap), module, "WeakIdentityMap", 0);
        }

        void t_WeakIdentityMap::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(WeakIdentityMap), "class_", make_descriptor(WeakIdentityMap::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(WeakIdentityMap), "wrapfn_", make_descriptor(t_WeakIdentityMap::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(WeakIdentityMap), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_WeakIdentityMap_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WeakIdentityMap::initializeClass, 1)))
            return NULL;
          return t_WeakIdentityMap::wrap_Object(WeakIdentityMap(((t_WeakIdentityMap *) arg)->object.this$));
        }
        static PyObject *t_WeakIdentityMap_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WeakIdentityMap::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_WeakIdentityMap_of_(t_WeakIdentityMap *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_WeakIdentityMap_clear(t_WeakIdentityMap *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_WeakIdentityMap_containsKey(t_WeakIdentityMap *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(result = self->object.containsKey(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "containsKey", arg);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_get(t_WeakIdentityMap *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_isEmpty(t_WeakIdentityMap *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isEmpty());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_WeakIdentityMap_keyIterator(t_WeakIdentityMap *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.keyIterator());
          return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
        }

        static PyObject *t_WeakIdentityMap_newConcurrentHashMap(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              WeakIdentityMap result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::util::WeakIdentityMap::newConcurrentHashMap());
              return t_WeakIdentityMap::wrap_Object(result);
            }
            break;
           case 1:
            {
              jboolean a0;
              WeakIdentityMap result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WeakIdentityMap::newConcurrentHashMap(a0));
                return t_WeakIdentityMap::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newConcurrentHashMap", args);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_newHashMap(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              WeakIdentityMap result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::util::WeakIdentityMap::newHashMap());
              return t_WeakIdentityMap::wrap_Object(result);
            }
            break;
           case 1:
            {
              jboolean a0;
              WeakIdentityMap result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WeakIdentityMap::newHashMap(a0));
                return t_WeakIdentityMap::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newHashMap", args);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_put(t_WeakIdentityMap *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
          {
            OBJ_CALL(result = self->object.put(a0, a1));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "put", args);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_reap(t_WeakIdentityMap *self)
        {
          OBJ_CALL(self->object.reap());
          Py_RETURN_NONE;
        }

        static PyObject *t_WeakIdentityMap_remove(t_WeakIdentityMap *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(result = self->object.remove(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "remove", arg);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_size(t_WeakIdentityMap *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_WeakIdentityMap_valueIterator(t_WeakIdentityMap *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.valueIterator());
          return ::java::util::t_Iterator::wrap_Object(result, self->parameters[1]);
        }
        static PyObject *t_WeakIdentityMap_get__parameters_(t_WeakIdentityMap *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_WeakIdentityMap_get__empty(t_WeakIdentityMap *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isEmpty());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat$Mode.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene87 {

          ::java::lang::Class *Lucene87StoredFieldsFormat::class$ = NULL;
          jmethodID *Lucene87StoredFieldsFormat::mids$ = NULL;
          bool Lucene87StoredFieldsFormat::live$ = false;
          ::org::apache::lucene::codecs::compressing::CompressionMode *Lucene87StoredFieldsFormat::BEST_COMPRESSION_MODE = NULL;
          ::org::apache::lucene::codecs::compressing::CompressionMode *Lucene87StoredFieldsFormat::BEST_SPEED_MODE = NULL;
          ::java::lang::String *Lucene87StoredFieldsFormat::MODE_KEY = NULL;

          jclass Lucene87StoredFieldsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_1031f2dc03090e95] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat$Mode;)V");
              mids$[mid_fieldsReader_a32861160154ecdb] = env->getMethodID(cls, "fieldsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsReader;");
              mids$[mid_fieldsWriter_e1dda5bd7531bf25] = env->getMethodID(cls, "fieldsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsWriter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              BEST_COMPRESSION_MODE = new ::org::apache::lucene::codecs::compressing::CompressionMode(env->getStaticObjectField(cls, "BEST_COMPRESSION_MODE", "Lorg/apache/lucene/codecs/compressing/CompressionMode;"));
              BEST_SPEED_MODE = new ::org::apache::lucene::codecs::compressing::CompressionMode(env->getStaticObjectField(cls, "BEST_SPEED_MODE", "Lorg/apache/lucene/codecs/compressing/CompressionMode;"));
              MODE_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MODE_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene87StoredFieldsFormat::Lucene87StoredFieldsFormat() : ::org::apache::lucene::codecs::StoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          Lucene87StoredFieldsFormat::Lucene87StoredFieldsFormat(const ::org::apache::lucene::codecs::lucene87::Lucene87StoredFieldsFormat$Mode & a0) : ::org::apache::lucene::codecs::StoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_1031f2dc03090e95, a0.this$)) {}

          ::org::apache::lucene::codecs::StoredFieldsReader Lucene87StoredFieldsFormat::fieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_fieldsReader_a32861160154ecdb], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::StoredFieldsWriter Lucene87StoredFieldsFormat::fieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsWriter(env->callObjectMethod(this$, mids$[mid_fieldsWriter_e1dda5bd7531bf25], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene87 {
          static PyObject *t_Lucene87StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene87StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene87StoredFieldsFormat_init_(t_Lucene87StoredFieldsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene87StoredFieldsFormat_fieldsReader(t_Lucene87StoredFieldsFormat *self, PyObject *args);
          static PyObject *t_Lucene87StoredFieldsFormat_fieldsWriter(t_Lucene87StoredFieldsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene87StoredFieldsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene87StoredFieldsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene87StoredFieldsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene87StoredFieldsFormat, fieldsReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene87StoredFieldsFormat, fieldsWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene87StoredFieldsFormat)[] = {
            { Py_tp_methods, t_Lucene87StoredFieldsFormat__methods_ },
            { Py_tp_init, (void *) t_Lucene87StoredFieldsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene87StoredFieldsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::StoredFieldsFormat),
            NULL
          };

          DEFINE_TYPE(Lucene87StoredFieldsFormat, t_Lucene87StoredFieldsFormat, Lucene87StoredFieldsFormat);

          void t_Lucene87StoredFieldsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene87StoredFieldsFormat), &PY_TYPE_DEF(Lucene87StoredFieldsFormat), module, "Lucene87StoredFieldsFormat", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene87StoredFieldsFormat), "Mode", make_descriptor(&PY_TYPE_DEF(Lucene87StoredFieldsFormat$Mode)));
          }

          void t_Lucene87StoredFieldsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene87StoredFieldsFormat), "class_", make_descriptor(Lucene87StoredFieldsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene87StoredFieldsFormat), "wrapfn_", make_descriptor(t_Lucene87StoredFieldsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene87StoredFieldsFormat), "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene87StoredFieldsFormat::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene87StoredFieldsFormat), "BEST_COMPRESSION_MODE", make_descriptor(::org::apache::lucene::codecs::compressing::t_CompressionMode::wrap_Object(*Lucene87StoredFieldsFormat::BEST_COMPRESSION_MODE)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene87StoredFieldsFormat), "BEST_SPEED_MODE", make_descriptor(::org::apache::lucene::codecs::compressing::t_CompressionMode::wrap_Object(*Lucene87StoredFieldsFormat::BEST_SPEED_MODE)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene87StoredFieldsFormat), "MODE_KEY", make_descriptor(j2p(*Lucene87StoredFieldsFormat::MODE_KEY)));
          }

          static PyObject *t_Lucene87StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene87StoredFieldsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene87StoredFieldsFormat::wrap_Object(Lucene87StoredFieldsFormat(((t_Lucene87StoredFieldsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene87StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene87StoredFieldsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene87StoredFieldsFormat_init_(t_Lucene87StoredFieldsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Lucene87StoredFieldsFormat object((jobject) NULL);

                INT_CALL(object = Lucene87StoredFieldsFormat());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::codecs::lucene87::Lucene87StoredFieldsFormat$Mode a0((jobject) NULL);
                PyTypeObject **p0;
                Lucene87StoredFieldsFormat object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::codecs::lucene87::Lucene87StoredFieldsFormat$Mode::initializeClass, &a0, &p0, ::org::apache::lucene::codecs::lucene87::t_Lucene87StoredFieldsFormat$Mode::parameters_))
                {
                  INT_CALL(object = Lucene87StoredFieldsFormat(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene87StoredFieldsFormat_fieldsReader(t_Lucene87StoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.fieldsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene87StoredFieldsFormat), (PyObject *) self, "fieldsReader", args, 2);
          }

          static PyObject *t_Lucene87StoredFieldsFormat_fieldsWriter(t_Lucene87StoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.fieldsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_StoredFieldsWriter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene87StoredFieldsFormat), (PyObject *) self, "fieldsWriter", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MatchesUtils.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/MatchesIterator.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/IOSupplier.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/Matches.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MatchesUtils::class$ = NULL;
        jmethodID *MatchesUtils::mids$ = NULL;
        bool MatchesUtils::live$ = false;
        ::org::apache::lucene::search::Matches *MatchesUtils::MATCH_WITH_NO_TERMS = NULL;

        jclass MatchesUtils::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MatchesUtils");

            mids$ = new jmethodID[max_mid];
            mids$[mid_disjunction_f8b56579bab6a63c] = env->getStaticMethodID(cls, "disjunction", "(Ljava/util/List;)Lorg/apache/lucene/search/MatchesIterator;");
            mids$[mid_disjunction_90c5de4858484da1] = env->getStaticMethodID(cls, "disjunction", "(Lorg/apache/lucene/index/LeafReaderContext;ILorg/apache/lucene/search/Query;Ljava/lang/String;Lorg/apache/lucene/util/BytesRefIterator;)Lorg/apache/lucene/search/MatchesIterator;");
            mids$[mid_forField_5cbeca2d6325c3dd] = env->getStaticMethodID(cls, "forField", "(Ljava/lang/String;Lorg/apache/lucene/util/IOSupplier;)Lorg/apache/lucene/search/Matches;");
            mids$[mid_fromSubMatches_3320272592407527] = env->getStaticMethodID(cls, "fromSubMatches", "(Ljava/util/List;)Lorg/apache/lucene/search/Matches;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            MATCH_WITH_NO_TERMS = new ::org::apache::lucene::search::Matches(env->getStaticObjectField(cls, "MATCH_WITH_NO_TERMS", "Lorg/apache/lucene/search/Matches;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::MatchesIterator MatchesUtils::disjunction(const ::java::util::List & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::MatchesIterator(env->callStaticObjectMethod(cls, mids$[mid_disjunction_f8b56579bab6a63c], a0.this$));
        }

        ::org::apache::lucene::search::MatchesIterator MatchesUtils::disjunction(const ::org::apache::lucene::index::LeafReaderContext & a0, jint a1, const ::org::apache::lucene::search::Query & a2, const ::java::lang::String & a3, const ::org::apache::lucene::util::BytesRefIterator & a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::MatchesIterator(env->callStaticObjectMethod(cls, mids$[mid_disjunction_90c5de4858484da1], a0.this$, a1, a2.this$, a3.this$, a4.this$));
        }

        ::org::apache::lucene::search::Matches MatchesUtils::forField(const ::java::lang::String & a0, const ::org::apache::lucene::util::IOSupplier & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Matches(env->callStaticObjectMethod(cls, mids$[mid_forField_5cbeca2d6325c3dd], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Matches MatchesUtils::fromSubMatches(const ::java::util::List & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Matches(env->callStaticObjectMethod(cls, mids$[mid_fromSubMatches_3320272592407527], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MatchesUtils_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MatchesUtils_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MatchesUtils_disjunction(PyTypeObject *type, PyObject *args);
        static PyObject *t_MatchesUtils_forField(PyTypeObject *type, PyObject *args);
        static PyObject *t_MatchesUtils_fromSubMatches(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_MatchesUtils__methods_[] = {
          DECLARE_METHOD(t_MatchesUtils, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MatchesUtils, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MatchesUtils, disjunction, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MatchesUtils, forField, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MatchesUtils, fromSubMatches, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MatchesUtils)[] = {
          { Py_tp_methods, t_MatchesUtils__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MatchesUtils)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MatchesUtils, t_MatchesUtils, MatchesUtils);

        void t_MatchesUtils::install(PyObject *module)
        {
          installType(&PY_TYPE(MatchesUtils), &PY_TYPE_DEF(MatchesUtils), module, "MatchesUtils", 0);
        }

        void t_MatchesUtils::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MatchesUtils), "class_", make_descriptor(MatchesUtils::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MatchesUtils), "wrapfn_", make_descriptor(t_MatchesUtils::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MatchesUtils), "boxfn_", make_descriptor(boxObject));
          env->getClass(MatchesUtils::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(MatchesUtils), "MATCH_WITH_NO_TERMS", make_descriptor(::org::apache::lucene::search::t_Matches::wrap_Object(*MatchesUtils::MATCH_WITH_NO_TERMS)));
        }

        static PyObject *t_MatchesUtils_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MatchesUtils::initializeClass, 1)))
            return NULL;
          return t_MatchesUtils::wrap_Object(MatchesUtils(((t_MatchesUtils *) arg)->object.this$));
        }
        static PyObject *t_MatchesUtils_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MatchesUtils::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MatchesUtils_disjunction(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::MatchesIterator result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::MatchesUtils::disjunction(a0));
                return ::org::apache::lucene::search::t_MatchesIterator::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::search::Query a2((jobject) NULL);
              ::java::lang::String a3((jobject) NULL);
              ::org::apache::lucene::util::BytesRefIterator a4((jobject) NULL);
              ::org::apache::lucene::search::MatchesIterator result((jobject) NULL);

              if (!parseArgs(args, "kIksk", ::org::apache::lucene::index::LeafReaderContext::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::util::BytesRefIterator::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::MatchesUtils::disjunction(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::search::t_MatchesIterator::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "disjunction", args);
          return NULL;
        }

        static PyObject *t_MatchesUtils_forField(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::IOSupplier a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::search::Matches result((jobject) NULL);

          if (!parseArgs(args, "sK", ::org::apache::lucene::util::IOSupplier::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::t_IOSupplier::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::MatchesUtils::forField(a0, a1));
            return ::org::apache::lucene::search::t_Matches::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "forField", args);
          return NULL;
        }

        static PyObject *t_MatchesUtils_fromSubMatches(PyTypeObject *type, PyObject *arg)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::search::Matches result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::MatchesUtils::fromSubMatches(a0));
            return ::org::apache::lucene::search::t_Matches::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "fromSubMatches", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene84/Lucene84PostingsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene84 {

          ::java::lang::Class *Lucene84PostingsFormat::class$ = NULL;
          jmethodID *Lucene84PostingsFormat::mids$ = NULL;
          bool Lucene84PostingsFormat::live$ = false;
          jint Lucene84PostingsFormat::BLOCK_SIZE = (jint) 0;
          ::java::lang::String *Lucene84PostingsFormat::DOC_EXTENSION = NULL;
          ::java::lang::String *Lucene84PostingsFormat::PAY_EXTENSION = NULL;
          ::java::lang::String *Lucene84PostingsFormat::POS_EXTENSION = NULL;

          jclass Lucene84PostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene84/Lucene84PostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_438c62480c481c65] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_fieldsConsumer_876dc181a1f61814] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c39bdf540a53fab9] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              BLOCK_SIZE = env->getStaticIntField(cls, "BLOCK_SIZE");
              DOC_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "DOC_EXTENSION", "Ljava/lang/String;"));
              PAY_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "PAY_EXTENSION", "Ljava/lang/String;"));
              POS_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "POS_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene84PostingsFormat::Lucene84PostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          Lucene84PostingsFormat::Lucene84PostingsFormat(jint a0, jint a1) : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_438c62480c481c65, a0, a1)) {}

          ::org::apache::lucene::codecs::FieldsConsumer Lucene84PostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_876dc181a1f61814], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer Lucene84PostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c39bdf540a53fab9], a0.this$));
          }

          ::java::lang::String Lucene84PostingsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/codecs/lucene84/Lucene84PostingsFormat$IntBlockTermState.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene84 {
          static PyObject *t_Lucene84PostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene84PostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene84PostingsFormat_init_(t_Lucene84PostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene84PostingsFormat_fieldsConsumer(t_Lucene84PostingsFormat *self, PyObject *args);
          static PyObject *t_Lucene84PostingsFormat_fieldsProducer(t_Lucene84PostingsFormat *self, PyObject *args);
          static PyObject *t_Lucene84PostingsFormat_toString(t_Lucene84PostingsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene84PostingsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene84PostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene84PostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene84PostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84PostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84PostingsFormat, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene84PostingsFormat)[] = {
            { Py_tp_methods, t_Lucene84PostingsFormat__methods_ },
            { Py_tp_init, (void *) t_Lucene84PostingsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene84PostingsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::PostingsFormat),
            NULL
          };

          DEFINE_TYPE(Lucene84PostingsFormat, t_Lucene84PostingsFormat, Lucene84PostingsFormat);

          void t_Lucene84PostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene84PostingsFormat), &PY_TYPE_DEF(Lucene84PostingsFormat), module, "Lucene84PostingsFormat", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene84PostingsFormat), "IntBlockTermState", make_descriptor(&PY_TYPE_DEF(Lucene84PostingsFormat$IntBlockTermState)));
          }

          void t_Lucene84PostingsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene84PostingsFormat), "class_", make_descriptor(Lucene84PostingsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene84PostingsFormat), "wrapfn_", make_descriptor(t_Lucene84PostingsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene84PostingsFormat), "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene84PostingsFormat::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene84PostingsFormat), "BLOCK_SIZE", make_descriptor(Lucene84PostingsFormat::BLOCK_SIZE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene84PostingsFormat), "DOC_EXTENSION", make_descriptor(j2p(*Lucene84PostingsFormat::DOC_EXTENSION)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene84PostingsFormat), "PAY_EXTENSION", make_descriptor(j2p(*Lucene84PostingsFormat::PAY_EXTENSION)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene84PostingsFormat), "POS_EXTENSION", make_descriptor(j2p(*Lucene84PostingsFormat::POS_EXTENSION)));
          }

          static PyObject *t_Lucene84PostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene84PostingsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene84PostingsFormat::wrap_Object(Lucene84PostingsFormat(((t_Lucene84PostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene84PostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene84PostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene84PostingsFormat_init_(t_Lucene84PostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Lucene84PostingsFormat object((jobject) NULL);

                INT_CALL(object = Lucene84PostingsFormat());
                self->object = object;
                break;
              }
             case 2:
              {
                jint a0;
                jint a1;
                Lucene84PostingsFormat object((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  INT_CALL(object = Lucene84PostingsFormat(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene84PostingsFormat_fieldsConsumer(t_Lucene84PostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene84PostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene84PostingsFormat_fieldsProducer(t_Lucene84PostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene84PostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_Lucene84PostingsFormat_toString(t_Lucene84PostingsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Lucene84PostingsFormat), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader$ChildrenIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyReader$ChildrenIterator::class$ = NULL;
          jmethodID *TaxonomyReader$ChildrenIterator::mids$ = NULL;
          bool TaxonomyReader$ChildrenIterator::live$ = false;

          jclass TaxonomyReader$ChildrenIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyReader$ChildrenIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_next_9972fcc56b44e79d] = env->getMethodID(cls, "next", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint TaxonomyReader$ChildrenIterator::next() const
          {
            return env->callIntMethod(this$, mids$[mid_next_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyReader$ChildrenIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyReader$ChildrenIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyReader$ChildrenIterator_next(t_TaxonomyReader$ChildrenIterator *self);

          static PyMethodDef t_TaxonomyReader$ChildrenIterator__methods_[] = {
            DECLARE_METHOD(t_TaxonomyReader$ChildrenIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader$ChildrenIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader$ChildrenIterator, next, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TaxonomyReader$ChildrenIterator)[] = {
            { Py_tp_methods, t_TaxonomyReader$ChildrenIterator__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TaxonomyReader$ChildrenIterator)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(TaxonomyReader$ChildrenIterator, t_TaxonomyReader$ChildrenIterator, TaxonomyReader$ChildrenIterator);

          void t_TaxonomyReader$ChildrenIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyReader$ChildrenIterator), &PY_TYPE_DEF(TaxonomyReader$ChildrenIterator), module, "TaxonomyReader$ChildrenIterator", 0);
          }

          void t_TaxonomyReader$ChildrenIterator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyReader$ChildrenIterator), "class_", make_descriptor(TaxonomyReader$ChildrenIterator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyReader$ChildrenIterator), "wrapfn_", make_descriptor(t_TaxonomyReader$ChildrenIterator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyReader$ChildrenIterator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyReader$ChildrenIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyReader$ChildrenIterator::initializeClass, 1)))
              return NULL;
            return t_TaxonomyReader$ChildrenIterator::wrap_Object(TaxonomyReader$ChildrenIterator(((t_TaxonomyReader$ChildrenIterator *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyReader$ChildrenIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyReader$ChildrenIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TaxonomyReader$ChildrenIterator_next(t_TaxonomyReader$ChildrenIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.next());
            return PyLong_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexSplitter.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Exception.h"
#include "java/io/IOException.h"
#include "java/nio/file/Path.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexSplitter::class$ = NULL;
        jmethodID *IndexSplitter::mids$ = NULL;
        jfieldID *IndexSplitter::fids$ = NULL;
        bool IndexSplitter::live$ = false;

        jclass IndexSplitter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexSplitter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_636077fee54d306c] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;)V");
            mids$[mid_listSegments_f2cc1bce94666404] = env->getMethodID(cls, "listSegments", "()V");
            mids$[mid_main_2fc318b999a7aba3] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
            mids$[mid_remove_2fc318b999a7aba3] = env->getMethodID(cls, "remove", "([Ljava/lang/String;)V");
            mids$[mid_split_4e99026f7c13f17e] = env->getMethodID(cls, "split", "(Ljava/nio/file/Path;[Ljava/lang/String;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_infos] = env->getFieldID(cls, "infos", "Lorg/apache/lucene/index/SegmentInfos;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexSplitter::IndexSplitter(const ::java::nio::file::Path & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_636077fee54d306c, a0.this$)) {}

        void IndexSplitter::listSegments() const
        {
          env->callVoidMethod(this$, mids$[mid_listSegments_f2cc1bce94666404]);
        }

        void IndexSplitter::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_2fc318b999a7aba3], a0.this$);
        }

        void IndexSplitter::remove(const JArray< ::java::lang::String > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_remove_2fc318b999a7aba3], a0.this$);
        }

        void IndexSplitter::split(const ::java::nio::file::Path & a0, const JArray< ::java::lang::String > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_split_4e99026f7c13f17e], a0.this$, a1.this$);
        }

        ::org::apache::lucene::index::SegmentInfos IndexSplitter::_get_infos() const
        {
          return ::org::apache::lucene::index::SegmentInfos(env->getObjectField(this$, fids$[fid_infos]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexSplitter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSplitter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexSplitter_init_(t_IndexSplitter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexSplitter_listSegments(t_IndexSplitter *self);
        static PyObject *t_IndexSplitter_main(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSplitter_remove(t_IndexSplitter *self, PyObject *arg);
        static PyObject *t_IndexSplitter_split(t_IndexSplitter *self, PyObject *args);
        static PyObject *t_IndexSplitter_get__infos(t_IndexSplitter *self, void *data);

        static PyGetSetDef t_IndexSplitter__fields_[] = {
          DECLARE_GET_FIELD(t_IndexSplitter, infos),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexSplitter__methods_[] = {
          DECLARE_METHOD(t_IndexSplitter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSplitter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSplitter, listSegments, METH_NOARGS),
          DECLARE_METHOD(t_IndexSplitter, main, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSplitter, remove, METH_O),
          DECLARE_METHOD(t_IndexSplitter, split, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexSplitter)[] = {
          { Py_tp_methods, t_IndexSplitter__methods_ },
          { Py_tp_init, (void *) t_IndexSplitter_init_ },
          { Py_tp_getset, t_IndexSplitter__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexSplitter)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexSplitter, t_IndexSplitter, IndexSplitter);

        void t_IndexSplitter::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSplitter), &PY_TYPE_DEF(IndexSplitter), module, "IndexSplitter", 0);
        }

        void t_IndexSplitter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSplitter), "class_", make_descriptor(IndexSplitter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSplitter), "wrapfn_", make_descriptor(t_IndexSplitter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSplitter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSplitter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSplitter::initializeClass, 1)))
            return NULL;
          return t_IndexSplitter::wrap_Object(IndexSplitter(((t_IndexSplitter *) arg)->object.this$));
        }
        static PyObject *t_IndexSplitter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSplitter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexSplitter_init_(t_IndexSplitter *self, PyObject *args, PyObject *kwds)
        {
          ::java::nio::file::Path a0((jobject) NULL);
          IndexSplitter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::nio::file::Path::initializeClass, &a0))
          {
            INT_CALL(object = IndexSplitter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexSplitter_listSegments(t_IndexSplitter *self)
        {
          OBJ_CALL(self->object.listSegments());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexSplitter_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::IndexSplitter::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }

        static PyObject *t_IndexSplitter_remove(t_IndexSplitter *self, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(self->object.remove(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "remove", arg);
          return NULL;
        }

        static PyObject *t_IndexSplitter_split(t_IndexSplitter *self, PyObject *args)
        {
          ::java::nio::file::Path a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);

          if (!parseArgs(args, "k[s", ::java::nio::file::Path::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.split(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "split", args);
          return NULL;
        }

        static PyObject *t_IndexSplitter_get__infos(t_IndexSplitter *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfos value((jobject) NULL);
          OBJ_CALL(value = self->object._get_infos());
          return ::org::apache::lucene::index::t_SegmentInfos::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsConfig$DrillDownTermsIndexing.h"
#include "org/apache/lucene/facet/FacetsConfig$DrillDownTermsIndexing.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsConfig$DrillDownTermsIndexing::class$ = NULL;
        jmethodID *FacetsConfig$DrillDownTermsIndexing::mids$ = NULL;
        bool FacetsConfig$DrillDownTermsIndexing::live$ = false;
        FacetsConfig$DrillDownTermsIndexing *FacetsConfig$DrillDownTermsIndexing::ALL = NULL;
        FacetsConfig$DrillDownTermsIndexing *FacetsConfig$DrillDownTermsIndexing::ALL_PATHS_NO_DIM = NULL;
        FacetsConfig$DrillDownTermsIndexing *FacetsConfig$DrillDownTermsIndexing::DIMENSION_AND_FULL_PATH = NULL;
        FacetsConfig$DrillDownTermsIndexing *FacetsConfig$DrillDownTermsIndexing::FULL_PATH_ONLY = NULL;
        FacetsConfig$DrillDownTermsIndexing *FacetsConfig$DrillDownTermsIndexing::NONE = NULL;

        jclass FacetsConfig$DrillDownTermsIndexing::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsConfig$DrillDownTermsIndexing");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_4b088219c7e476aa] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/facet/FacetsConfig$DrillDownTermsIndexing;");
            mids$[mid_values_73a38b3a5a717a8c] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/facet/FacetsConfig$DrillDownTermsIndexing;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            ALL = new FacetsConfig$DrillDownTermsIndexing(env->getStaticObjectField(cls, "ALL", "Lorg/apache/lucene/facet/FacetsConfig$DrillDownTermsIndexing;"));
            ALL_PATHS_NO_DIM = new FacetsConfig$DrillDownTermsIndexing(env->getStaticObjectField(cls, "ALL_PATHS_NO_DIM", "Lorg/apache/lucene/facet/FacetsConfig$DrillDownTermsIndexing;"));
            DIMENSION_AND_FULL_PATH = new FacetsConfig$DrillDownTermsIndexing(env->getStaticObjectField(cls, "DIMENSION_AND_FULL_PATH", "Lorg/apache/lucene/facet/FacetsConfig$DrillDownTermsIndexing;"));
            FULL_PATH_ONLY = new FacetsConfig$DrillDownTermsIndexing(env->getStaticObjectField(cls, "FULL_PATH_ONLY", "Lorg/apache/lucene/facet/FacetsConfig$DrillDownTermsIndexing;"));
            NONE = new FacetsConfig$DrillDownTermsIndexing(env->getStaticObjectField(cls, "NONE", "Lorg/apache/lucene/facet/FacetsConfig$DrillDownTermsIndexing;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsConfig$DrillDownTermsIndexing FacetsConfig$DrillDownTermsIndexing::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return FacetsConfig$DrillDownTermsIndexing(env->callStaticObjectMethod(cls, mids$[mid_valueOf_4b088219c7e476aa], a0.this$));
        }

        JArray< FacetsConfig$DrillDownTermsIndexing > FacetsConfig$DrillDownTermsIndexing::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< FacetsConfig$DrillDownTermsIndexing >(env->callStaticObjectMethod(cls, mids$[mid_values_73a38b3a5a717a8c]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsConfig$DrillDownTermsIndexing_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsConfig$DrillDownTermsIndexing_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsConfig$DrillDownTermsIndexing_of_(t_FacetsConfig$DrillDownTermsIndexing *self, PyObject *args);
        static PyObject *t_FacetsConfig$DrillDownTermsIndexing_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_FacetsConfig$DrillDownTermsIndexing_values(PyTypeObject *type);
        static PyObject *t_FacetsConfig$DrillDownTermsIndexing_get__parameters_(t_FacetsConfig$DrillDownTermsIndexing *self, void *data);
        static PyGetSetDef t_FacetsConfig$DrillDownTermsIndexing__fields_[] = {
          DECLARE_GET_FIELD(t_FacetsConfig$DrillDownTermsIndexing, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetsConfig$DrillDownTermsIndexing__methods_[] = {
          DECLARE_METHOD(t_FacetsConfig$DrillDownTermsIndexing, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig$DrillDownTermsIndexing, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig$DrillDownTermsIndexing, of_, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig$DrillDownTermsIndexing, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig$DrillDownTermsIndexing, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FacetsConfig$DrillDownTermsIndexing)[] = {
          { Py_tp_methods, t_FacetsConfig$DrillDownTermsIndexing__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_FacetsConfig$DrillDownTermsIndexing__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FacetsConfig$DrillDownTermsIndexing)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(FacetsConfig$DrillDownTermsIndexing, t_FacetsConfig$DrillDownTermsIndexing, FacetsConfig$DrillDownTermsIndexing);
        PyObject *t_FacetsConfig$DrillDownTermsIndexing::wrap_Object(const FacetsConfig$DrillDownTermsIndexing& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FacetsConfig$DrillDownTermsIndexing::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FacetsConfig$DrillDownTermsIndexing *self = (t_FacetsConfig$DrillDownTermsIndexing *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FacetsConfig$DrillDownTermsIndexing::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FacetsConfig$DrillDownTermsIndexing::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FacetsConfig$DrillDownTermsIndexing *self = (t_FacetsConfig$DrillDownTermsIndexing *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FacetsConfig$DrillDownTermsIndexing::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsConfig$DrillDownTermsIndexing), &PY_TYPE_DEF(FacetsConfig$DrillDownTermsIndexing), module, "FacetsConfig$DrillDownTermsIndexing", 0);
        }

        void t_FacetsConfig$DrillDownTermsIndexing::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsConfig$DrillDownTermsIndexing), "class_", make_descriptor(FacetsConfig$DrillDownTermsIndexing::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsConfig$DrillDownTermsIndexing), "wrapfn_", make_descriptor(t_FacetsConfig$DrillDownTermsIndexing::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsConfig$DrillDownTermsIndexing), "boxfn_", make_descriptor(boxObject));
          env->getClass(FacetsConfig$DrillDownTermsIndexing::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsConfig$DrillDownTermsIndexing), "ALL", make_descriptor(t_FacetsConfig$DrillDownTermsIndexing::wrap_Object(*FacetsConfig$DrillDownTermsIndexing::ALL)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsConfig$DrillDownTermsIndexing), "ALL_PATHS_NO_DIM", make_descriptor(t_FacetsConfig$DrillDownTermsIndexing::wrap_Object(*FacetsConfig$DrillDownTermsIndexing::ALL_PATHS_NO_DIM)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsConfig$DrillDownTermsIndexing), "DIMENSION_AND_FULL_PATH", make_descriptor(t_FacetsConfig$DrillDownTermsIndexing::wrap_Object(*FacetsConfig$DrillDownTermsIndexing::DIMENSION_AND_FULL_PATH)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsConfig$DrillDownTermsIndexing), "FULL_PATH_ONLY", make_descriptor(t_FacetsConfig$DrillDownTermsIndexing::wrap_Object(*FacetsConfig$DrillDownTermsIndexing::FULL_PATH_ONLY)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsConfig$DrillDownTermsIndexing), "NONE", make_descriptor(t_FacetsConfig$DrillDownTermsIndexing::wrap_Object(*FacetsConfig$DrillDownTermsIndexing::NONE)));
        }

        static PyObject *t_FacetsConfig$DrillDownTermsIndexing_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsConfig$DrillDownTermsIndexing::initializeClass, 1)))
            return NULL;
          return t_FacetsConfig$DrillDownTermsIndexing::wrap_Object(FacetsConfig$DrillDownTermsIndexing(((t_FacetsConfig$DrillDownTermsIndexing *) arg)->object.this$));
        }
        static PyObject *t_FacetsConfig$DrillDownTermsIndexing_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsConfig$DrillDownTermsIndexing::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FacetsConfig$DrillDownTermsIndexing_of_(t_FacetsConfig$DrillDownTermsIndexing *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FacetsConfig$DrillDownTermsIndexing_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          FacetsConfig$DrillDownTermsIndexing result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig$DrillDownTermsIndexing::valueOf(a0));
            return t_FacetsConfig$DrillDownTermsIndexing::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_FacetsConfig$DrillDownTermsIndexing_values(PyTypeObject *type)
        {
          JArray< FacetsConfig$DrillDownTermsIndexing > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig$DrillDownTermsIndexing::values());
          return JArray<jobject>(result.this$).wrap(t_FacetsConfig$DrillDownTermsIndexing::wrap_jobject);
        }
        static PyObject *t_FacetsConfig$DrillDownTermsIndexing_get__parameters_(t_FacetsConfig$DrillDownTermsIndexing *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/TotalHits.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/search/TopFieldDocs.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopDocs::class$ = NULL;
        jmethodID *TopDocs::mids$ = NULL;
        jfieldID *TopDocs::fids$ = NULL;
        bool TopDocs::live$ = false;

        jclass TopDocs::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopDocs");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a6f4153cadd6aa37] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/TotalHits;[Lorg/apache/lucene/search/ScoreDoc;)V");
            mids$[mid_merge_62dbf03ecc1d75d5] = env->getStaticMethodID(cls, "merge", "(I[Lorg/apache/lucene/search/TopDocs;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_merge_213943b4ee061cdd] = env->getStaticMethodID(cls, "merge", "(Lorg/apache/lucene/search/Sort;I[Lorg/apache/lucene/search/TopFieldDocs;)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_merge_9f4416664558c25b] = env->getStaticMethodID(cls, "merge", "(II[Lorg/apache/lucene/search/TopDocs;Z)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_merge_e72d44517dd1d4ce] = env->getStaticMethodID(cls, "merge", "(Lorg/apache/lucene/search/Sort;II[Lorg/apache/lucene/search/TopFieldDocs;Z)Lorg/apache/lucene/search/TopFieldDocs;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_scoreDocs] = env->getFieldID(cls, "scoreDocs", "[Lorg/apache/lucene/search/ScoreDoc;");
            fids$[fid_totalHits] = env->getFieldID(cls, "totalHits", "Lorg/apache/lucene/search/TotalHits;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopDocs::TopDocs(const ::org::apache::lucene::search::TotalHits & a0, const JArray< ::org::apache::lucene::search::ScoreDoc > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a6f4153cadd6aa37, a0.this$, a1.this$)) {}

        TopDocs TopDocs::merge(jint a0, const JArray< TopDocs > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return TopDocs(env->callStaticObjectMethod(cls, mids$[mid_merge_62dbf03ecc1d75d5], a0, a1.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs TopDocs::merge(const ::org::apache::lucene::search::Sort & a0, jint a1, const JArray< ::org::apache::lucene::search::TopFieldDocs > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopFieldDocs(env->callStaticObjectMethod(cls, mids$[mid_merge_213943b4ee061cdd], a0.this$, a1, a2.this$));
        }

        TopDocs TopDocs::merge(jint a0, jint a1, const JArray< TopDocs > & a2, jboolean a3)
        {
          jclass cls = env->getClass(initializeClass);
          return TopDocs(env->callStaticObjectMethod(cls, mids$[mid_merge_9f4416664558c25b], a0, a1, a2.this$, a3));
        }

        ::org::apache::lucene::search::TopFieldDocs TopDocs::merge(const ::org::apache::lucene::search::Sort & a0, jint a1, jint a2, const JArray< ::org::apache::lucene::search::TopFieldDocs > & a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopFieldDocs(env->callStaticObjectMethod(cls, mids$[mid_merge_e72d44517dd1d4ce], a0.this$, a1, a2, a3.this$, a4));
        }

        JArray< ::org::apache::lucene::search::ScoreDoc > TopDocs::_get_scoreDocs() const
        {
          return JArray< ::org::apache::lucene::search::ScoreDoc >(env->getObjectField(this$, fids$[fid_scoreDocs]));
        }

        void TopDocs::_set_scoreDocs(const JArray< ::org::apache::lucene::search::ScoreDoc > & a0) const
        {
          env->setObjectField(this$, fids$[fid_scoreDocs], a0.this$);
        }

        ::org::apache::lucene::search::TotalHits TopDocs::_get_totalHits() const
        {
          return ::org::apache::lucene::search::TotalHits(env->getObjectField(this$, fids$[fid_totalHits]));
        }

        void TopDocs::_set_totalHits(const ::org::apache::lucene::search::TotalHits & a0) const
        {
          env->setObjectField(this$, fids$[fid_totalHits], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopDocs_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopDocs_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TopDocs_init_(t_TopDocs *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopDocs_merge(PyTypeObject *type, PyObject *args);
        static PyObject *t_TopDocs_get__scoreDocs(t_TopDocs *self, void *data);
        static int t_TopDocs_set__scoreDocs(t_TopDocs *self, PyObject *arg, void *data);
        static PyObject *t_TopDocs_get__totalHits(t_TopDocs *self, void *data);
        static int t_TopDocs_set__totalHits(t_TopDocs *self, PyObject *arg, void *data);

        static PyGetSetDef t_TopDocs__fields_[] = {
          DECLARE_GETSET_FIELD(t_TopDocs, scoreDocs),
          DECLARE_GETSET_FIELD(t_TopDocs, totalHits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopDocs__methods_[] = {
          DECLARE_METHOD(t_TopDocs, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopDocs, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopDocs, merge, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TopDocs)[] = {
          { Py_tp_methods, t_TopDocs__methods_ },
          { Py_tp_init, (void *) t_TopDocs_init_ },
          { Py_tp_getset, t_TopDocs__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TopDocs)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(TopDocs, t_TopDocs, TopDocs);

        void t_TopDocs::install(PyObject *module)
        {
          installType(&PY_TYPE(TopDocs), &PY_TYPE_DEF(TopDocs), module, "TopDocs", 0);
        }

        void t_TopDocs::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopDocs), "class_", make_descriptor(TopDocs::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopDocs), "wrapfn_", make_descriptor(t_TopDocs::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopDocs), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopDocs_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopDocs::initializeClass, 1)))
            return NULL;
          return t_TopDocs::wrap_Object(TopDocs(((t_TopDocs *) arg)->object.this$));
        }
        static PyObject *t_TopDocs_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopDocs::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TopDocs_init_(t_TopDocs *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::TotalHits a0((jobject) NULL);
          JArray< ::org::apache::lucene::search::ScoreDoc > a1((jobject) NULL);
          TopDocs object((jobject) NULL);

          if (!parseArgs(args, "k[k", ::org::apache::lucene::search::TotalHits::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, &a0, &a1))
          {
            INT_CALL(object = TopDocs(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TopDocs_merge(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              JArray< TopDocs > a1((jobject) NULL);
              TopDocs result((jobject) NULL);

              if (!parseArgs(args, "I[k", TopDocs::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopDocs::merge(a0, a1));
                return t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::search::Sort a0((jobject) NULL);
              jint a1;
              JArray< ::org::apache::lucene::search::TopFieldDocs > a2((jobject) NULL);
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kI[k", ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::TopFieldDocs::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopDocs::merge(a0, a1, a2));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              jint a0;
              jint a1;
              JArray< TopDocs > a2((jobject) NULL);
              jboolean a3;
              TopDocs result((jobject) NULL);

              if (!parseArgs(args, "II[kZ", TopDocs::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopDocs::merge(a0, a1, a2, a3));
                return t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::search::Sort a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< ::org::apache::lucene::search::TopFieldDocs > a3((jobject) NULL);
              jboolean a4;
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kII[kZ", ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::TopFieldDocs::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopDocs::merge(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "merge", args);
          return NULL;
        }

        static PyObject *t_TopDocs_get__scoreDocs(t_TopDocs *self, void *data)
        {
          JArray< ::org::apache::lucene::search::ScoreDoc > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_scoreDocs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_ScoreDoc::wrap_jobject);
        }
        static int t_TopDocs_set__scoreDocs(t_TopDocs *self, PyObject *arg, void *data)
        {
          JArray< ::org::apache::lucene::search::ScoreDoc > value((jobject) NULL);
          if (!parseArg(arg, "[k", ::org::apache::lucene::search::ScoreDoc::initializeClass, &value))
          {
            INT_CALL(self->object._set_scoreDocs(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "scoreDocs", arg);
          return -1;
        }

        static PyObject *t_TopDocs_get__totalHits(t_TopDocs *self, void *data)
        {
          ::org::apache::lucene::search::TotalHits value((jobject) NULL);
          OBJ_CALL(value = self->object._get_totalHits());
          return ::org::apache::lucene::search::t_TotalHits::wrap_Object(value);
        }
        static int t_TopDocs_set__totalHits(t_TopDocs *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::search::TotalHits value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::search::TotalHits::initializeClass, &value))
          {
            INT_CALL(self->object._set_totalHits(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalHits", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicNormalizer::class$ = NULL;
          jmethodID *ArabicNormalizer::mids$ = NULL;
          bool ArabicNormalizer::live$ = false;
          jchar ArabicNormalizer::ALEF = (jchar) 0;
          jchar ArabicNormalizer::ALEF_HAMZA_ABOVE = (jchar) 0;
          jchar ArabicNormalizer::ALEF_HAMZA_BELOW = (jchar) 0;
          jchar ArabicNormalizer::ALEF_MADDA = (jchar) 0;
          jchar ArabicNormalizer::DAMMA = (jchar) 0;
          jchar ArabicNormalizer::DAMMATAN = (jchar) 0;
          jchar ArabicNormalizer::DOTLESS_YEH = (jchar) 0;
          jchar ArabicNormalizer::FATHA = (jchar) 0;
          jchar ArabicNormalizer::FATHATAN = (jchar) 0;
          jchar ArabicNormalizer::HEH = (jchar) 0;
          jchar ArabicNormalizer::KASRA = (jchar) 0;
          jchar ArabicNormalizer::KASRATAN = (jchar) 0;
          jchar ArabicNormalizer::SHADDA = (jchar) 0;
          jchar ArabicNormalizer::SUKUN = (jchar) 0;
          jchar ArabicNormalizer::TATWEEL = (jchar) 0;
          jchar ArabicNormalizer::TEH_MARBUTA = (jchar) 0;
          jchar ArabicNormalizer::YEH = (jchar) 0;

          jclass ArabicNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_d4655f2a19359017] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              ALEF = env->getStaticCharField(cls, "ALEF");
              ALEF_HAMZA_ABOVE = env->getStaticCharField(cls, "ALEF_HAMZA_ABOVE");
              ALEF_HAMZA_BELOW = env->getStaticCharField(cls, "ALEF_HAMZA_BELOW");
              ALEF_MADDA = env->getStaticCharField(cls, "ALEF_MADDA");
              DAMMA = env->getStaticCharField(cls, "DAMMA");
              DAMMATAN = env->getStaticCharField(cls, "DAMMATAN");
              DOTLESS_YEH = env->getStaticCharField(cls, "DOTLESS_YEH");
              FATHA = env->getStaticCharField(cls, "FATHA");
              FATHATAN = env->getStaticCharField(cls, "FATHATAN");
              HEH = env->getStaticCharField(cls, "HEH");
              KASRA = env->getStaticCharField(cls, "KASRA");
              KASRATAN = env->getStaticCharField(cls, "KASRATAN");
              SHADDA = env->getStaticCharField(cls, "SHADDA");
              SUKUN = env->getStaticCharField(cls, "SUKUN");
              TATWEEL = env->getStaticCharField(cls, "TATWEEL");
              TEH_MARBUTA = env->getStaticCharField(cls, "TEH_MARBUTA");
              YEH = env->getStaticCharField(cls, "YEH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicNormalizer::ArabicNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint ArabicNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicNormalizer_init_(t_ArabicNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicNormalizer_normalize(t_ArabicNormalizer *self, PyObject *args);

          static PyMethodDef t_ArabicNormalizer__methods_[] = {
            DECLARE_METHOD(t_ArabicNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ArabicNormalizer)[] = {
            { Py_tp_methods, t_ArabicNormalizer__methods_ },
            { Py_tp_init, (void *) t_ArabicNormalizer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ArabicNormalizer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(ArabicNormalizer, t_ArabicNormalizer, ArabicNormalizer);

          void t_ArabicNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicNormalizer), &PY_TYPE_DEF(ArabicNormalizer), module, "ArabicNormalizer", 0);
          }

          void t_ArabicNormalizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizer), "class_", make_descriptor(ArabicNormalizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizer), "wrapfn_", make_descriptor(t_ArabicNormalizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizer), "boxfn_", make_descriptor(boxObject));
            env->getClass(ArabicNormalizer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizer), "ALEF", make_descriptor(ArabicNormalizer::ALEF));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizer), "ALEF_HAMZA_ABOVE", make_descriptor(ArabicNormalizer::ALEF_HAMZA_ABOVE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizer), "ALEF_HAMZA_BELOW", make_descriptor(ArabicNormalizer::ALEF_HAMZA_BELOW));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizer), "ALEF_MADDA", make_descriptor(ArabicNormalizer::ALEF_MADDA));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizer), "DAMMA", make_descriptor(ArabicNormalizer::DAMMA));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizer), "DAMMATAN", make_descriptor(ArabicNormalizer::DAMMATAN));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizer), "DOTLESS_YEH", make_descriptor(ArabicNormalizer::DOTLESS_YEH));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizer), "FATHA", make_descriptor(ArabicNormalizer::FATHA));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizer), "FATHATAN", make_descriptor(ArabicNormalizer::FATHATAN));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizer), "HEH", make_descriptor(ArabicNormalizer::HEH));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizer), "KASRA", make_descriptor(ArabicNormalizer::KASRA));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizer), "KASRATAN", make_descriptor(ArabicNormalizer::KASRATAN));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizer), "SHADDA", make_descriptor(ArabicNormalizer::SHADDA));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizer), "SUKUN", make_descriptor(ArabicNormalizer::SUKUN));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizer), "TATWEEL", make_descriptor(ArabicNormalizer::TATWEEL));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizer), "TEH_MARBUTA", make_descriptor(ArabicNormalizer::TEH_MARBUTA));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizer), "YEH", make_descriptor(ArabicNormalizer::YEH));
          }

          static PyObject *t_ArabicNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicNormalizer::initializeClass, 1)))
              return NULL;
            return t_ArabicNormalizer::wrap_Object(ArabicNormalizer(((t_ArabicNormalizer *) arg)->object.this$));
          }
          static PyObject *t_ArabicNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicNormalizer_init_(t_ArabicNormalizer *self, PyObject *args, PyObject *kwds)
          {
            ArabicNormalizer object((jobject) NULL);

            INT_CALL(object = ArabicNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_ArabicNormalizer_normalize(t_ArabicNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/FinnishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *FinnishStemmer::class$ = NULL;
        jmethodID *FinnishStemmer::mids$ = NULL;
        bool FinnishStemmer::live$ = false;

        jclass FinnishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/FinnishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FinnishStemmer::FinnishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean FinnishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint FinnishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean FinnishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_FinnishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FinnishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FinnishStemmer_init_(t_FinnishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FinnishStemmer_equals(t_FinnishStemmer *self, PyObject *args);
        static PyObject *t_FinnishStemmer_hashCode(t_FinnishStemmer *self, PyObject *args);
        static PyObject *t_FinnishStemmer_stem(t_FinnishStemmer *self, PyObject *args);

        static PyMethodDef t_FinnishStemmer__methods_[] = {
          DECLARE_METHOD(t_FinnishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FinnishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FinnishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_FinnishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FinnishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FinnishStemmer)[] = {
          { Py_tp_methods, t_FinnishStemmer__methods_ },
          { Py_tp_init, (void *) t_FinnishStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FinnishStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(FinnishStemmer, t_FinnishStemmer, FinnishStemmer);

        void t_FinnishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(FinnishStemmer), &PY_TYPE_DEF(FinnishStemmer), module, "FinnishStemmer", 0);
        }

        void t_FinnishStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FinnishStemmer), "class_", make_descriptor(FinnishStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FinnishStemmer), "wrapfn_", make_descriptor(t_FinnishStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FinnishStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FinnishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FinnishStemmer::initializeClass, 1)))
            return NULL;
          return t_FinnishStemmer::wrap_Object(FinnishStemmer(((t_FinnishStemmer *) arg)->object.this$));
        }
        static PyObject *t_FinnishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FinnishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FinnishStemmer_init_(t_FinnishStemmer *self, PyObject *args, PyObject *kwds)
        {
          FinnishStemmer object((jobject) NULL);

          INT_CALL(object = FinnishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_FinnishStemmer_equals(t_FinnishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FinnishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FinnishStemmer_hashCode(t_FinnishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FinnishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FinnishStemmer_stem(t_FinnishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FinnishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldInfoStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$FieldInfoStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$FieldInfoStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$FieldInfoStatus::fids$ = NULL;
        bool CheckIndex$Status$FieldInfoStatus::live$ = false;

        jclass CheckIndex$Status$FieldInfoStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$FieldInfoStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totFields] = env->getFieldID(cls, "totFields", "J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Throwable CheckIndex$Status$FieldInfoStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$FieldInfoStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$FieldInfoStatus::_get_totFields() const
        {
          return env->getLongField(this$, fids$[fid_totFields]);
        }

        void CheckIndex$Status$FieldInfoStatus::_set_totFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totFields], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$FieldInfoStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$FieldInfoStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$FieldInfoStatus_get__error(t_CheckIndex$Status$FieldInfoStatus *self, void *data);
        static int t_CheckIndex$Status$FieldInfoStatus_set__error(t_CheckIndex$Status$FieldInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$FieldInfoStatus_get__totFields(t_CheckIndex$Status$FieldInfoStatus *self, void *data);
        static int t_CheckIndex$Status$FieldInfoStatus_set__totFields(t_CheckIndex$Status$FieldInfoStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$FieldInfoStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$FieldInfoStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$FieldInfoStatus, totFields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$FieldInfoStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$FieldInfoStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$FieldInfoStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CheckIndex$Status$FieldInfoStatus)[] = {
          { Py_tp_methods, t_CheckIndex$Status$FieldInfoStatus__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_CheckIndex$Status$FieldInfoStatus__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CheckIndex$Status$FieldInfoStatus)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CheckIndex$Status$FieldInfoStatus, t_CheckIndex$Status$FieldInfoStatus, CheckIndex$Status$FieldInfoStatus);

        void t_CheckIndex$Status$FieldInfoStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$FieldInfoStatus), &PY_TYPE_DEF(CheckIndex$Status$FieldInfoStatus), module, "CheckIndex$Status$FieldInfoStatus", 0);
        }

        void t_CheckIndex$Status$FieldInfoStatus::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$FieldInfoStatus), "class_", make_descriptor(CheckIndex$Status$FieldInfoStatus::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$FieldInfoStatus), "wrapfn_", make_descriptor(t_CheckIndex$Status$FieldInfoStatus::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$FieldInfoStatus), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$FieldInfoStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$FieldInfoStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$FieldInfoStatus::wrap_Object(CheckIndex$Status$FieldInfoStatus(((t_CheckIndex$Status$FieldInfoStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$FieldInfoStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$FieldInfoStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$FieldInfoStatus_get__error(t_CheckIndex$Status$FieldInfoStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$FieldInfoStatus_set__error(t_CheckIndex$Status$FieldInfoStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$FieldInfoStatus_get__totFields(t_CheckIndex$Status$FieldInfoStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$FieldInfoStatus_set__totFields(t_CheckIndex$Status$FieldInfoStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totFields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeywordRepeatFilter::class$ = NULL;
          jmethodID *KeywordRepeatFilter::mids$ = NULL;
          bool KeywordRepeatFilter::live$ = false;

          jclass KeywordRepeatFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordRepeatFilter::KeywordRepeatFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean KeywordRepeatFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void KeywordRepeatFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeywordRepeatFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordRepeatFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordRepeatFilter_init_(t_KeywordRepeatFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordRepeatFilter_incrementToken(t_KeywordRepeatFilter *self, PyObject *args);
          static PyObject *t_KeywordRepeatFilter_reset(t_KeywordRepeatFilter *self, PyObject *args);

          static PyMethodDef t_KeywordRepeatFilter__methods_[] = {
            DECLARE_METHOD(t_KeywordRepeatFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordRepeatFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordRepeatFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_KeywordRepeatFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KeywordRepeatFilter)[] = {
            { Py_tp_methods, t_KeywordRepeatFilter__methods_ },
            { Py_tp_init, (void *) t_KeywordRepeatFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KeywordRepeatFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(KeywordRepeatFilter, t_KeywordRepeatFilter, KeywordRepeatFilter);

          void t_KeywordRepeatFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordRepeatFilter), &PY_TYPE_DEF(KeywordRepeatFilter), module, "KeywordRepeatFilter", 0);
          }

          void t_KeywordRepeatFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordRepeatFilter), "class_", make_descriptor(KeywordRepeatFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordRepeatFilter), "wrapfn_", make_descriptor(t_KeywordRepeatFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordRepeatFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordRepeatFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordRepeatFilter::initializeClass, 1)))
              return NULL;
            return t_KeywordRepeatFilter::wrap_Object(KeywordRepeatFilter(((t_KeywordRepeatFilter *) arg)->object.this$));
          }
          static PyObject *t_KeywordRepeatFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordRepeatFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordRepeatFilter_init_(t_KeywordRepeatFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            KeywordRepeatFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = KeywordRepeatFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordRepeatFilter_incrementToken(t_KeywordRepeatFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(KeywordRepeatFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_KeywordRepeatFilter_reset(t_KeywordRepeatFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(KeywordRepeatFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserTokenManager.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/parser/CharStream.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserConstants.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/parser/Token.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *QueryParserTokenManager::class$ = NULL;
            jmethodID *QueryParserTokenManager::mids$ = NULL;
            bool QueryParserTokenManager::live$ = false;
            JArray< jint > *QueryParserTokenManager::jjnewLexState = NULL;
            JArray< ::java::lang::String > *QueryParserTokenManager::jjstrLiteralImages = NULL;
            JArray< ::java::lang::String > *QueryParserTokenManager::lexStateNames = NULL;

            jclass QueryParserTokenManager::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/QueryParserTokenManager");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d91dd22f8b94642a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;)V");
                mids$[mid_init$_f33bbde34bac13f2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;I)V");
                mids$[mid_ReInit_d91dd22f8b94642a] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;)V");
                mids$[mid_ReInit_f33bbde34bac13f2] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;I)V");
                mids$[mid_SwitchTo_040c4cd0390c5aff] = env->getMethodID(cls, "SwitchTo", "(I)V");
                mids$[mid_getNextToken_0cee914969d57b66] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_jjFillToken_0cee914969d57b66] = env->getMethodID(cls, "jjFillToken", "()Lorg/apache/lucene/queryparser/surround/parser/Token;");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                jjnewLexState = new JArray< jint >(env->getStaticObjectField(cls, "jjnewLexState", "[I"));
                jjstrLiteralImages = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "jjstrLiteralImages", "[Ljava/lang/String;"));
                lexStateNames = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "lexStateNames", "[Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryParserTokenManager::QueryParserTokenManager(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d91dd22f8b94642a, a0.this$)) {}

            QueryParserTokenManager::QueryParserTokenManager(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f33bbde34bac13f2, a0.this$, a1)) {}

            void QueryParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_ReInit_d91dd22f8b94642a], a0.this$);
            }

            void QueryParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_ReInit_f33bbde34bac13f2], a0.this$, a1);
            }

            void QueryParserTokenManager::SwitchTo(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_SwitchTo_040c4cd0390c5aff], a0);
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParserTokenManager::getNextToken() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_0cee914969d57b66]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_QueryParserTokenManager_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserTokenManager_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryParserTokenManager_init_(t_QueryParserTokenManager *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryParserTokenManager_ReInit(t_QueryParserTokenManager *self, PyObject *args);
            static PyObject *t_QueryParserTokenManager_SwitchTo(t_QueryParserTokenManager *self, PyObject *arg);
            static PyObject *t_QueryParserTokenManager_getNextToken(t_QueryParserTokenManager *self);
            static PyObject *t_QueryParserTokenManager_get__nextToken(t_QueryParserTokenManager *self, void *data);
            static PyGetSetDef t_QueryParserTokenManager__fields_[] = {
              DECLARE_GET_FIELD(t_QueryParserTokenManager, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryParserTokenManager__methods_[] = {
              DECLARE_METHOD(t_QueryParserTokenManager, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserTokenManager, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserTokenManager, ReInit, METH_VARARGS),
              DECLARE_METHOD(t_QueryParserTokenManager, SwitchTo, METH_O),
              DECLARE_METHOD(t_QueryParserTokenManager, getNextToken, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(QueryParserTokenManager)[] = {
              { Py_tp_methods, t_QueryParserTokenManager__methods_ },
              { Py_tp_init, (void *) t_QueryParserTokenManager_init_ },
              { Py_tp_getset, t_QueryParserTokenManager__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(QueryParserTokenManager)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(QueryParserTokenManager, t_QueryParserTokenManager, QueryParserTokenManager);

            void t_QueryParserTokenManager::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParserTokenManager), &PY_TYPE_DEF(QueryParserTokenManager), module, "QueryParserTokenManager", 0);
            }

            void t_QueryParserTokenManager::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserTokenManager), "class_", make_descriptor(QueryParserTokenManager::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserTokenManager), "wrapfn_", make_descriptor(t_QueryParserTokenManager::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserTokenManager), "boxfn_", make_descriptor(boxObject));
              env->getClass(QueryParserTokenManager::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserTokenManager), "jjnewLexState", make_descriptor(QueryParserTokenManager::jjnewLexState->wrap()));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserTokenManager), "jjstrLiteralImages", make_descriptor(JArray<jstring>(QueryParserTokenManager::jjstrLiteralImages->this$).wrap()));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserTokenManager), "lexStateNames", make_descriptor(JArray<jstring>(QueryParserTokenManager::lexStateNames->this$).wrap()));
            }

            static PyObject *t_QueryParserTokenManager_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParserTokenManager::initializeClass, 1)))
                return NULL;
              return t_QueryParserTokenManager::wrap_Object(QueryParserTokenManager(((t_QueryParserTokenManager *) arg)->object.this$));
            }
            static PyObject *t_QueryParserTokenManager_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParserTokenManager::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryParserTokenManager_init_(t_QueryParserTokenManager *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);
                  QueryParserTokenManager object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryParserTokenManager(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);
                  jint a1;
                  QueryParserTokenManager object((jobject) NULL);

                  if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = QueryParserTokenManager(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryParserTokenManager_ReInit(t_QueryParserTokenManager *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.ReInit(a0));
                    Py_RETURN_NONE;
                  }
                }
                break;
               case 2:
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);
                  jint a1;

                  if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(self->object.ReInit(a0, a1));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "ReInit", args);
              return NULL;
            }

            static PyObject *t_QueryParserTokenManager_SwitchTo(t_QueryParserTokenManager *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.SwitchTo(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "SwitchTo", arg);
              return NULL;
            }

            static PyObject *t_QueryParserTokenManager_getNextToken(t_QueryParserTokenManager *self)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token result((jobject) NULL);
              OBJ_CALL(result = self->object.getNextToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(result);
            }

            static PyObject *t_QueryParserTokenManager_get__nextToken(t_QueryParserTokenManager *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object.getNextToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/misc/CollectorMemoryTracker.h"
#include "org/apache/lucene/util/MemoryTracker.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {

        ::java::lang::Class *CollectorMemoryTracker::class$ = NULL;
        jmethodID *CollectorMemoryTracker::mids$ = NULL;
        bool CollectorMemoryTracker::live$ = false;

        jclass CollectorMemoryTracker::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/misc/CollectorMemoryTracker");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0084e2c6585d8c01] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");
            mids$[mid_getBytes_2e5ae9edcb9b072f] = env->getMethodID(cls, "getBytes", "()J");
            mids$[mid_updateBytes_9c778c9bce6694df] = env->getMethodID(cls, "updateBytes", "(J)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollectorMemoryTracker::CollectorMemoryTracker(const ::java::lang::String & a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0084e2c6585d8c01, a0.this$, a1)) {}

        jlong CollectorMemoryTracker::getBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_getBytes_2e5ae9edcb9b072f]);
        }

        void CollectorMemoryTracker::updateBytes(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_updateBytes_9c778c9bce6694df], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {
        static PyObject *t_CollectorMemoryTracker_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectorMemoryTracker_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollectorMemoryTracker_init_(t_CollectorMemoryTracker *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CollectorMemoryTracker_getBytes(t_CollectorMemoryTracker *self);
        static PyObject *t_CollectorMemoryTracker_updateBytes(t_CollectorMemoryTracker *self, PyObject *arg);
        static PyObject *t_CollectorMemoryTracker_get__bytes(t_CollectorMemoryTracker *self, void *data);
        static PyGetSetDef t_CollectorMemoryTracker__fields_[] = {
          DECLARE_GET_FIELD(t_CollectorMemoryTracker, bytes),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CollectorMemoryTracker__methods_[] = {
          DECLARE_METHOD(t_CollectorMemoryTracker, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectorMemoryTracker, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectorMemoryTracker, getBytes, METH_NOARGS),
          DECLARE_METHOD(t_CollectorMemoryTracker, updateBytes, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CollectorMemoryTracker)[] = {
          { Py_tp_methods, t_CollectorMemoryTracker__methods_ },
          { Py_tp_init, (void *) t_CollectorMemoryTracker_init_ },
          { Py_tp_getset, t_CollectorMemoryTracker__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CollectorMemoryTracker)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CollectorMemoryTracker, t_CollectorMemoryTracker, CollectorMemoryTracker);

        void t_CollectorMemoryTracker::install(PyObject *module)
        {
          installType(&PY_TYPE(CollectorMemoryTracker), &PY_TYPE_DEF(CollectorMemoryTracker), module, "CollectorMemoryTracker", 0);
        }

        void t_CollectorMemoryTracker::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollectorMemoryTracker), "class_", make_descriptor(CollectorMemoryTracker::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollectorMemoryTracker), "wrapfn_", make_descriptor(t_CollectorMemoryTracker::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollectorMemoryTracker), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollectorMemoryTracker_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollectorMemoryTracker::initializeClass, 1)))
            return NULL;
          return t_CollectorMemoryTracker::wrap_Object(CollectorMemoryTracker(((t_CollectorMemoryTracker *) arg)->object.this$));
        }
        static PyObject *t_CollectorMemoryTracker_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollectorMemoryTracker::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollectorMemoryTracker_init_(t_CollectorMemoryTracker *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          CollectorMemoryTracker object((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            INT_CALL(object = CollectorMemoryTracker(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CollectorMemoryTracker_getBytes(t_CollectorMemoryTracker *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CollectorMemoryTracker_updateBytes(t_CollectorMemoryTracker *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.updateBytes(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "updateBytes", arg);
          return NULL;
        }

        static PyObject *t_CollectorMemoryTracker_get__bytes(t_CollectorMemoryTracker *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/FlagsAttributeImpl.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/FlagsAttribute.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *FlagsAttributeImpl::class$ = NULL;
          jmethodID *FlagsAttributeImpl::mids$ = NULL;
          bool FlagsAttributeImpl::live$ = false;

          jclass FlagsAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/FlagsAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getFlags_9972fcc56b44e79d] = env->getMethodID(cls, "getFlags", "()I");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
              mids$[mid_setFlags_040c4cd0390c5aff] = env->getMethodID(cls, "setFlags", "(I)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FlagsAttributeImpl::FlagsAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void FlagsAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
          }

          void FlagsAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_26346c38ebc9c090], a0.this$);
          }

          jboolean FlagsAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint FlagsAttributeImpl::getFlags() const
          {
            return env->callIntMethod(this$, mids$[mid_getFlags_9972fcc56b44e79d]);
          }

          jint FlagsAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          void FlagsAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
          }

          void FlagsAttributeImpl::setFlags(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFlags_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_FlagsAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FlagsAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FlagsAttributeImpl_init_(t_FlagsAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FlagsAttributeImpl_clear(t_FlagsAttributeImpl *self, PyObject *args);
          static PyObject *t_FlagsAttributeImpl_copyTo(t_FlagsAttributeImpl *self, PyObject *args);
          static PyObject *t_FlagsAttributeImpl_equals(t_FlagsAttributeImpl *self, PyObject *args);
          static PyObject *t_FlagsAttributeImpl_getFlags(t_FlagsAttributeImpl *self);
          static PyObject *t_FlagsAttributeImpl_hashCode(t_FlagsAttributeImpl *self, PyObject *args);
          static PyObject *t_FlagsAttributeImpl_reflectWith(t_FlagsAttributeImpl *self, PyObject *args);
          static PyObject *t_FlagsAttributeImpl_setFlags(t_FlagsAttributeImpl *self, PyObject *arg);
          static PyObject *t_FlagsAttributeImpl_get__flags(t_FlagsAttributeImpl *self, void *data);
          static int t_FlagsAttributeImpl_set__flags(t_FlagsAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_FlagsAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_FlagsAttributeImpl, flags),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FlagsAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_FlagsAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlagsAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlagsAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, getFlags, METH_NOARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, reflectWith, METH_VARARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, setFlags, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FlagsAttributeImpl)[] = {
            { Py_tp_methods, t_FlagsAttributeImpl__methods_ },
            { Py_tp_init, (void *) t_FlagsAttributeImpl_init_ },
            { Py_tp_getset, t_FlagsAttributeImpl__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FlagsAttributeImpl)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::AttributeImpl),
            NULL
          };

          DEFINE_TYPE(FlagsAttributeImpl, t_FlagsAttributeImpl, FlagsAttributeImpl);

          void t_FlagsAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(FlagsAttributeImpl), &PY_TYPE_DEF(FlagsAttributeImpl), module, "FlagsAttributeImpl", 0);
          }

          void t_FlagsAttributeImpl::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FlagsAttributeImpl), "class_", make_descriptor(FlagsAttributeImpl::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FlagsAttributeImpl), "wrapfn_", make_descriptor(t_FlagsAttributeImpl::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FlagsAttributeImpl), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FlagsAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FlagsAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_FlagsAttributeImpl::wrap_Object(FlagsAttributeImpl(((t_FlagsAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_FlagsAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FlagsAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FlagsAttributeImpl_init_(t_FlagsAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            FlagsAttributeImpl object((jobject) NULL);

            INT_CALL(object = FlagsAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_FlagsAttributeImpl_clear(t_FlagsAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FlagsAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_FlagsAttributeImpl_copyTo(t_FlagsAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FlagsAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_FlagsAttributeImpl_equals(t_FlagsAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FlagsAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FlagsAttributeImpl_getFlags(t_FlagsAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFlags());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FlagsAttributeImpl_hashCode(t_FlagsAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FlagsAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FlagsAttributeImpl_reflectWith(t_FlagsAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reflectWith(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FlagsAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
          }

          static PyObject *t_FlagsAttributeImpl_setFlags(t_FlagsAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setFlags(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFlags", arg);
            return NULL;
          }

          static PyObject *t_FlagsAttributeImpl_get__flags(t_FlagsAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFlags());
            return PyLong_FromLong((long) value);
          }
          static int t_FlagsAttributeImpl_set__flags(t_FlagsAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setFlags(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "flags", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {

          ::java::lang::Class *CommonGramsQueryFilter::class$ = NULL;
          jmethodID *CommonGramsQueryFilter::mids$ = NULL;
          bool CommonGramsQueryFilter::live$ = false;

          jclass CommonGramsQueryFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_66c486ac2672f256] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/commongrams/CommonGramsFilter;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_isGramType_8454bd5aa23fd11e] = env->getMethodID(cls, "isGramType", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CommonGramsQueryFilter::CommonGramsQueryFilter(const ::org::apache::lucene::analysis::commongrams::CommonGramsFilter & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_66c486ac2672f256, a0.this$)) {}

          jboolean CommonGramsQueryFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          jboolean CommonGramsQueryFilter::isGramType() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isGramType_8454bd5aa23fd11e]);
          }

          void CommonGramsQueryFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {
          static PyObject *t_CommonGramsQueryFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CommonGramsQueryFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CommonGramsQueryFilter_init_(t_CommonGramsQueryFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CommonGramsQueryFilter_incrementToken(t_CommonGramsQueryFilter *self, PyObject *args);
          static PyObject *t_CommonGramsQueryFilter_isGramType(t_CommonGramsQueryFilter *self);
          static PyObject *t_CommonGramsQueryFilter_reset(t_CommonGramsQueryFilter *self, PyObject *args);
          static PyObject *t_CommonGramsQueryFilter_get__gramType(t_CommonGramsQueryFilter *self, void *data);
          static PyGetSetDef t_CommonGramsQueryFilter__fields_[] = {
            DECLARE_GET_FIELD(t_CommonGramsQueryFilter, gramType),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CommonGramsQueryFilter__methods_[] = {
            DECLARE_METHOD(t_CommonGramsQueryFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsQueryFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsQueryFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CommonGramsQueryFilter, isGramType, METH_NOARGS),
            DECLARE_METHOD(t_CommonGramsQueryFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CommonGramsQueryFilter)[] = {
            { Py_tp_methods, t_CommonGramsQueryFilter__methods_ },
            { Py_tp_init, (void *) t_CommonGramsQueryFilter_init_ },
            { Py_tp_getset, t_CommonGramsQueryFilter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CommonGramsQueryFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(CommonGramsQueryFilter, t_CommonGramsQueryFilter, CommonGramsQueryFilter);

          void t_CommonGramsQueryFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CommonGramsQueryFilter), &PY_TYPE_DEF(CommonGramsQueryFilter), module, "CommonGramsQueryFilter", 0);
          }

          void t_CommonGramsQueryFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CommonGramsQueryFilter), "class_", make_descriptor(CommonGramsQueryFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CommonGramsQueryFilter), "wrapfn_", make_descriptor(t_CommonGramsQueryFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CommonGramsQueryFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CommonGramsQueryFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CommonGramsQueryFilter::initializeClass, 1)))
              return NULL;
            return t_CommonGramsQueryFilter::wrap_Object(CommonGramsQueryFilter(((t_CommonGramsQueryFilter *) arg)->object.this$));
          }
          static PyObject *t_CommonGramsQueryFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CommonGramsQueryFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CommonGramsQueryFilter_init_(t_CommonGramsQueryFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::commongrams::CommonGramsFilter a0((jobject) NULL);
            CommonGramsQueryFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::commongrams::CommonGramsFilter::initializeClass, &a0))
            {
              INT_CALL(object = CommonGramsQueryFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CommonGramsQueryFilter_incrementToken(t_CommonGramsQueryFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(CommonGramsQueryFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CommonGramsQueryFilter_isGramType(t_CommonGramsQueryFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isGramType());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_CommonGramsQueryFilter_reset(t_CommonGramsQueryFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CommonGramsQueryFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_CommonGramsQueryFilter_get__gramType(t_CommonGramsQueryFilter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isGramType());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/SegmentCacheable.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/ScorerSupplier.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/BulkScorer.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Matches.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Weight::class$ = NULL;
        jmethodID *Weight::mids$ = NULL;
        bool Weight::live$ = false;

        jclass Weight::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Weight");

            mids$ = new jmethodID[max_mid];
            mids$[mid_bulkScorer_67bb05f0d672560c] = env->getMethodID(cls, "bulkScorer", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/BulkScorer;");
            mids$[mid_explain_4cf8bab0b7954f4a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/index/LeafReaderContext;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_extractTerms_d5a4a8d4b806f0ba] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getQuery_cbf839a480265450] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_matches_a177ac6f01316d86] = env->getMethodID(cls, "matches", "(Lorg/apache/lucene/index/LeafReaderContext;I)Lorg/apache/lucene/search/Matches;");
            mids$[mid_scorer_4046a1267922adae] = env->getMethodID(cls, "scorer", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/Scorer;");
            mids$[mid_scorerSupplier_1e186b5977f256f7] = env->getMethodID(cls, "scorerSupplier", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/ScorerSupplier;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::BulkScorer Weight::bulkScorer(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::search::BulkScorer(env->callObjectMethod(this$, mids$[mid_bulkScorer_67bb05f0d672560c], a0.this$));
        }

        ::org::apache::lucene::search::Explanation Weight::explain(const ::org::apache::lucene::index::LeafReaderContext & a0, jint a1) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_4cf8bab0b7954f4a], a0.this$, a1));
        }

        void Weight::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_d5a4a8d4b806f0ba], a0.this$);
        }

        ::org::apache::lucene::search::Query Weight::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_cbf839a480265450]));
        }

        ::org::apache::lucene::search::Matches Weight::matches(const ::org::apache::lucene::index::LeafReaderContext & a0, jint a1) const
        {
          return ::org::apache::lucene::search::Matches(env->callObjectMethod(this$, mids$[mid_matches_a177ac6f01316d86], a0.this$, a1));
        }

        ::org::apache::lucene::search::Scorer Weight::scorer(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_scorer_4046a1267922adae], a0.this$));
        }

        ::org::apache::lucene::search::ScorerSupplier Weight::scorerSupplier(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::search::ScorerSupplier(env->callObjectMethod(this$, mids$[mid_scorerSupplier_1e186b5977f256f7], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Weight_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Weight_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Weight_bulkScorer(t_Weight *self, PyObject *arg);
        static PyObject *t_Weight_explain(t_Weight *self, PyObject *args);
        static PyObject *t_Weight_extractTerms(t_Weight *self, PyObject *arg);
        static PyObject *t_Weight_getQuery(t_Weight *self);
        static PyObject *t_Weight_matches(t_Weight *self, PyObject *args);
        static PyObject *t_Weight_scorer(t_Weight *self, PyObject *arg);
        static PyObject *t_Weight_scorerSupplier(t_Weight *self, PyObject *arg);
        static PyObject *t_Weight_get__query(t_Weight *self, void *data);
        static PyGetSetDef t_Weight__fields_[] = {
          DECLARE_GET_FIELD(t_Weight, query),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Weight__methods_[] = {
          DECLARE_METHOD(t_Weight, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Weight, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Weight, bulkScorer, METH_O),
          DECLARE_METHOD(t_Weight, explain, METH_VARARGS),
          DECLARE_METHOD(t_Weight, extractTerms, METH_O),
          DECLARE_METHOD(t_Weight, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_Weight, matches, METH_VARARGS),
          DECLARE_METHOD(t_Weight, scorer, METH_O),
          DECLARE_METHOD(t_Weight, scorerSupplier, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Weight)[] = {
          { Py_tp_methods, t_Weight__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_Weight__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Weight)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Weight, t_Weight, Weight);

        void t_Weight::install(PyObject *module)
        {
          installType(&PY_TYPE(Weight), &PY_TYPE_DEF(Weight), module, "Weight", 0);
        }

        void t_Weight::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Weight), "class_", make_descriptor(Weight::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Weight), "wrapfn_", make_descriptor(t_Weight::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Weight), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Weight_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Weight::initializeClass, 1)))
            return NULL;
          return t_Weight::wrap_Object(Weight(((t_Weight *) arg)->object.this$));
        }
        static PyObject *t_Weight_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Weight::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Weight_bulkScorer(t_Weight *self, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::BulkScorer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.bulkScorer(a0));
            return ::org::apache::lucene::search::t_BulkScorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "bulkScorer", arg);
          return NULL;
        }

        static PyObject *t_Weight_explain(t_Weight *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.explain(a0, a1));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "explain", args);
          return NULL;
        }

        static PyObject *t_Weight_extractTerms(t_Weight *self, PyObject *arg)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "extractTerms", arg);
          return NULL;
        }

        static PyObject *t_Weight_getQuery(t_Weight *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_Weight_matches(t_Weight *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::search::Matches result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.matches(a0, a1));
            return ::org::apache::lucene::search::t_Matches::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "matches", args);
          return NULL;
        }

        static PyObject *t_Weight_scorer(t_Weight *self, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::Scorer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.scorer(a0));
            return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return NULL;
        }

        static PyObject *t_Weight_scorerSupplier(t_Weight *self, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::ScorerSupplier result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.scorerSupplier(a0));
            return ::org::apache::lucene::search::t_ScorerSupplier::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "scorerSupplier", arg);
          return NULL;
        }

        static PyObject *t_Weight_get__query(t_Weight *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *SortedSetDocValuesReaderState::class$ = NULL;
          jmethodID *SortedSetDocValuesReaderState::mids$ = NULL;
          bool SortedSetDocValuesReaderState::live$ = false;

          jclass SortedSetDocValuesReaderState::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getDocValues_cc5882347cd85c5c] = env->getMethodID(cls, "getDocValues", "()Lorg/apache/lucene/index/SortedSetDocValues;");
              mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getOrdRange_c1709242723c0a04] = env->getMethodID(cls, "getOrdRange", "(Ljava/lang/String;)Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange;");
              mids$[mid_getPrefixToOrdRange_1c3426541413a55d] = env->getMethodID(cls, "getPrefixToOrdRange", "()Ljava/util/Map;");
              mids$[mid_getReader_3268165ce941bf52] = env->getMethodID(cls, "getReader", "()Lorg/apache/lucene/index/IndexReader;");
              mids$[mid_getSize_9972fcc56b44e79d] = env->getMethodID(cls, "getSize", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::index::SortedSetDocValues SortedSetDocValuesReaderState::getDocValues() const
          {
            return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getDocValues_cc5882347cd85c5c]));
          }

          ::java::lang::String SortedSetDocValuesReaderState::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange SortedSetDocValuesReaderState::getOrdRange(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange(env->callObjectMethod(this$, mids$[mid_getOrdRange_c1709242723c0a04], a0.this$));
          }

          ::java::util::Map SortedSetDocValuesReaderState::getPrefixToOrdRange() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getPrefixToOrdRange_1c3426541413a55d]));
          }

          ::org::apache::lucene::index::IndexReader SortedSetDocValuesReaderState::getReader() const
          {
            return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getReader_3268165ce941bf52]));
          }

          jint SortedSetDocValuesReaderState::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_SortedSetDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesReaderState_getDocValues(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_getField(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_getOrdRange(t_SortedSetDocValuesReaderState *self, PyObject *arg);
          static PyObject *t_SortedSetDocValuesReaderState_getPrefixToOrdRange(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_getReader(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_getSize(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_get__docValues(t_SortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState_get__field(t_SortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState_get__prefixToOrdRange(t_SortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState_get__reader(t_SortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState_get__size(t_SortedSetDocValuesReaderState *self, void *data);
          static PyGetSetDef t_SortedSetDocValuesReaderState__fields_[] = {
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, docValues),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, field),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, prefixToOrdRange),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, reader),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetDocValuesReaderState__methods_[] = {
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getDocValues, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getField, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getOrdRange, METH_O),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getPrefixToOrdRange, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getReader, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getSize, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SortedSetDocValuesReaderState)[] = {
            { Py_tp_methods, t_SortedSetDocValuesReaderState__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_SortedSetDocValuesReaderState__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SortedSetDocValuesReaderState)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SortedSetDocValuesReaderState, t_SortedSetDocValuesReaderState, SortedSetDocValuesReaderState);

          void t_SortedSetDocValuesReaderState::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetDocValuesReaderState), &PY_TYPE_DEF(SortedSetDocValuesReaderState), module, "SortedSetDocValuesReaderState", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValuesReaderState), "OrdRange", make_descriptor(&PY_TYPE_DEF(SortedSetDocValuesReaderState$OrdRange)));
          }

          void t_SortedSetDocValuesReaderState::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValuesReaderState), "class_", make_descriptor(SortedSetDocValuesReaderState::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValuesReaderState), "wrapfn_", make_descriptor(t_SortedSetDocValuesReaderState::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValuesReaderState), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedSetDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetDocValuesReaderState::initializeClass, 1)))
              return NULL;
            return t_SortedSetDocValuesReaderState::wrap_Object(SortedSetDocValuesReaderState(((t_SortedSetDocValuesReaderState *) arg)->object.this$));
          }
          static PyObject *t_SortedSetDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetDocValuesReaderState::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SortedSetDocValuesReaderState_getDocValues(t_SortedSetDocValuesReaderState *self)
          {
            ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);
            OBJ_CALL(result = self->object.getDocValues());
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          static PyObject *t_SortedSetDocValuesReaderState_getField(t_SortedSetDocValuesReaderState *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_SortedSetDocValuesReaderState_getOrdRange(t_SortedSetDocValuesReaderState *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getOrdRange(a0));
              return ::org::apache::lucene::facet::sortedset::t_SortedSetDocValuesReaderState$OrdRange::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getOrdRange", arg);
            return NULL;
          }

          static PyObject *t_SortedSetDocValuesReaderState_getPrefixToOrdRange(t_SortedSetDocValuesReaderState *self)
          {
            ::java::util::Map result((jobject) NULL);
            OBJ_CALL(result = self->object.getPrefixToOrdRange());
            return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::org::apache::lucene::facet::sortedset::PY_TYPE(SortedSetDocValuesReaderState$OrdRange));
          }

          static PyObject *t_SortedSetDocValuesReaderState_getReader(t_SortedSetDocValuesReaderState *self)
          {
            ::org::apache::lucene::index::IndexReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
          }

          static PyObject *t_SortedSetDocValuesReaderState_getSize(t_SortedSetDocValuesReaderState *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__docValues(t_SortedSetDocValuesReaderState *self, void *data)
          {
            ::org::apache::lucene::index::SortedSetDocValues value((jobject) NULL);
            OBJ_CALL(value = self->object.getDocValues());
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(value);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__field(t_SortedSetDocValuesReaderState *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__prefixToOrdRange(t_SortedSetDocValuesReaderState *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getPrefixToOrdRange());
            return ::java::util::t_Map::wrap_Object(value);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__reader(t_SortedSetDocValuesReaderState *self, void *data)
          {
            ::org::apache::lucene::index::IndexReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__size(t_SortedSetDocValuesReaderState *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/IntRangeDocValuesField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *IntRangeDocValuesField::class$ = NULL;
        jmethodID *IntRangeDocValuesField::mids$ = NULL;
        bool IntRangeDocValuesField::live$ = false;

        jclass IntRangeDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/IntRangeDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8d53a6ab232efab4] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[I[I)V");
            mids$[mid_getMax_1e143afe1894d213] = env->getMethodID(cls, "getMax", "(I)I");
            mids$[mid_getMin_1e143afe1894d213] = env->getMethodID(cls, "getMin", "(I)I");
            mids$[mid_newSlowIntersectsQuery_4d014fedea4aa22e] = env->getStaticMethodID(cls, "newSlowIntersectsQuery", "(Ljava/lang/String;[I[I)Lorg/apache/lucene/search/Query;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntRangeDocValuesField::IntRangeDocValuesField(const ::java::lang::String & a0, const JArray< jint > & a1, const JArray< jint > & a2) : ::org::apache::lucene::document::BinaryRangeDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_8d53a6ab232efab4, a0.this$, a1.this$, a2.this$)) {}

        jint IntRangeDocValuesField::getMax(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getMax_1e143afe1894d213], a0);
        }

        jint IntRangeDocValuesField::getMin(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getMin_1e143afe1894d213], a0);
        }

        ::org::apache::lucene::search::Query IntRangeDocValuesField::newSlowIntersectsQuery(const ::java::lang::String & a0, const JArray< jint > & a1, const JArray< jint > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSlowIntersectsQuery_4d014fedea4aa22e], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_IntRangeDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntRangeDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntRangeDocValuesField_init_(t_IntRangeDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntRangeDocValuesField_getMax(t_IntRangeDocValuesField *self, PyObject *arg);
        static PyObject *t_IntRangeDocValuesField_getMin(t_IntRangeDocValuesField *self, PyObject *arg);
        static PyObject *t_IntRangeDocValuesField_newSlowIntersectsQuery(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_IntRangeDocValuesField__methods_[] = {
          DECLARE_METHOD(t_IntRangeDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntRangeDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntRangeDocValuesField, getMax, METH_O),
          DECLARE_METHOD(t_IntRangeDocValuesField, getMin, METH_O),
          DECLARE_METHOD(t_IntRangeDocValuesField, newSlowIntersectsQuery, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IntRangeDocValuesField)[] = {
          { Py_tp_methods, t_IntRangeDocValuesField__methods_ },
          { Py_tp_init, (void *) t_IntRangeDocValuesField_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IntRangeDocValuesField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::BinaryRangeDocValuesField),
          NULL
        };

        DEFINE_TYPE(IntRangeDocValuesField, t_IntRangeDocValuesField, IntRangeDocValuesField);

        void t_IntRangeDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(IntRangeDocValuesField), &PY_TYPE_DEF(IntRangeDocValuesField), module, "IntRangeDocValuesField", 0);
        }

        void t_IntRangeDocValuesField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntRangeDocValuesField), "class_", make_descriptor(IntRangeDocValuesField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntRangeDocValuesField), "wrapfn_", make_descriptor(t_IntRangeDocValuesField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntRangeDocValuesField), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntRangeDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntRangeDocValuesField::initializeClass, 1)))
            return NULL;
          return t_IntRangeDocValuesField::wrap_Object(IntRangeDocValuesField(((t_IntRangeDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_IntRangeDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntRangeDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntRangeDocValuesField_init_(t_IntRangeDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jint > a1((jobject) NULL);
          JArray< jint > a2((jobject) NULL);
          IntRangeDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "s[I[I", &a0, &a1, &a2))
          {
            INT_CALL(object = IntRangeDocValuesField(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntRangeDocValuesField_getMax(t_IntRangeDocValuesField *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getMax(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMax", arg);
          return NULL;
        }

        static PyObject *t_IntRangeDocValuesField_getMin(t_IntRangeDocValuesField *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getMin(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMin", arg);
          return NULL;
        }

        static PyObject *t_IntRangeDocValuesField_newSlowIntersectsQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jint > a1((jobject) NULL);
          JArray< jint > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[I[I", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::IntRangeDocValuesField::newSlowIntersectsQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSlowIntersectsQuery", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Long.h"
#include "java/lang/Long.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/NumberFormatException.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Long::class$ = NULL;
    jmethodID *Long::mids$ = NULL;
    bool Long::live$ = false;
    jint Long::BYTES = (jint) 0;
    jlong Long::MAX_VALUE = (jlong) 0;
    jlong Long::MIN_VALUE = (jlong) 0;
    jint Long::SIZE = (jint) 0;
    ::java::lang::Class *Long::TYPE = NULL;

    jclass Long::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Long");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_9c778c9bce6694df] = env->getMethodID(cls, "<init>", "(J)V");
        mids$[mid_bitCount_694afffd0eb7dc3c] = env->getStaticMethodID(cls, "bitCount", "(J)I");
        mids$[mid_byteValue_871cd52a74f26213] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_99574379560a8cbc] = env->getStaticMethodID(cls, "compare", "(JJ)I");
        mids$[mid_compareTo_40b29526fa8f635b] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Long;)I");
        mids$[mid_compareUnsigned_99574379560a8cbc] = env->getStaticMethodID(cls, "compareUnsigned", "(JJ)I");
        mids$[mid_decode_5425c887ff2030fd] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Long;");
        mids$[mid_divideUnsigned_3f3333a84e3e6855] = env->getStaticMethodID(cls, "divideUnsigned", "(JJ)J");
        mids$[mid_doubleValue_8c74b787998ce4bc] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_58aec2b64dff50c8] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_getLong_5425c887ff2030fd] = env->getStaticMethodID(cls, "getLong", "(Ljava/lang/String;)Ljava/lang/Long;");
        mids$[mid_getLong_f893aa9a5325648a] = env->getStaticMethodID(cls, "getLong", "(Ljava/lang/String;Ljava/lang/Long;)Ljava/lang/Long;");
        mids$[mid_getLong_b102935049580f07] = env->getStaticMethodID(cls, "getLong", "(Ljava/lang/String;J)Ljava/lang/Long;");
        mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_694afffd0eb7dc3c] = env->getStaticMethodID(cls, "hashCode", "(J)I");
        mids$[mid_highestOneBit_d711eecdc469624a] = env->getStaticMethodID(cls, "highestOneBit", "(J)J");
        mids$[mid_intValue_9972fcc56b44e79d] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_2e5ae9edcb9b072f] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_lowestOneBit_d711eecdc469624a] = env->getStaticMethodID(cls, "lowestOneBit", "(J)J");
        mids$[mid_max_3f3333a84e3e6855] = env->getStaticMethodID(cls, "max", "(JJ)J");
        mids$[mid_min_3f3333a84e3e6855] = env->getStaticMethodID(cls, "min", "(JJ)J");
        mids$[mid_numberOfLeadingZeros_694afffd0eb7dc3c] = env->getStaticMethodID(cls, "numberOfLeadingZeros", "(J)I");
        mids$[mid_numberOfTrailingZeros_694afffd0eb7dc3c] = env->getStaticMethodID(cls, "numberOfTrailingZeros", "(J)I");
        mids$[mid_parseLong_b1e05207ec98e246] = env->getStaticMethodID(cls, "parseLong", "(Ljava/lang/String;)J");
        mids$[mid_parseLong_4bbb7c443972920d] = env->getStaticMethodID(cls, "parseLong", "(Ljava/lang/String;I)J");
        mids$[mid_parseUnsignedLong_b1e05207ec98e246] = env->getStaticMethodID(cls, "parseUnsignedLong", "(Ljava/lang/String;)J");
        mids$[mid_parseUnsignedLong_4bbb7c443972920d] = env->getStaticMethodID(cls, "parseUnsignedLong", "(Ljava/lang/String;I)J");
        mids$[mid_remainderUnsigned_3f3333a84e3e6855] = env->getStaticMethodID(cls, "remainderUnsigned", "(JJ)J");
        mids$[mid_reverse_d711eecdc469624a] = env->getStaticMethodID(cls, "reverse", "(J)J");
        mids$[mid_reverseBytes_d711eecdc469624a] = env->getStaticMethodID(cls, "reverseBytes", "(J)J");
        mids$[mid_rotateLeft_ebe3aad9c8eac1c8] = env->getStaticMethodID(cls, "rotateLeft", "(JI)J");
        mids$[mid_rotateRight_ebe3aad9c8eac1c8] = env->getStaticMethodID(cls, "rotateRight", "(JI)J");
        mids$[mid_shortValue_ec20af88366b851e] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_signum_694afffd0eb7dc3c] = env->getStaticMethodID(cls, "signum", "(J)I");
        mids$[mid_sum_3f3333a84e3e6855] = env->getStaticMethodID(cls, "sum", "(JJ)J");
        mids$[mid_toBinaryString_55e776ffac018431] = env->getStaticMethodID(cls, "toBinaryString", "(J)Ljava/lang/String;");
        mids$[mid_toHexString_55e776ffac018431] = env->getStaticMethodID(cls, "toHexString", "(J)Ljava/lang/String;");
        mids$[mid_toOctalString_55e776ffac018431] = env->getStaticMethodID(cls, "toOctalString", "(J)Ljava/lang/String;");
        mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_55e776ffac018431] = env->getStaticMethodID(cls, "toString", "(J)Ljava/lang/String;");
        mids$[mid_toString_ca777a1f4bee0479] = env->getStaticMethodID(cls, "toString", "(JI)Ljava/lang/String;");
        mids$[mid_toUnsignedString_55e776ffac018431] = env->getStaticMethodID(cls, "toUnsignedString", "(J)Ljava/lang/String;");
        mids$[mid_toUnsignedString_ca777a1f4bee0479] = env->getStaticMethodID(cls, "toUnsignedString", "(JI)Ljava/lang/String;");
        mids$[mid_valueOf_5425c887ff2030fd] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Long;");
        mids$[mid_valueOf_cf9cb5744f7372e6] = env->getStaticMethodID(cls, "valueOf", "(J)Ljava/lang/Long;");
        mids$[mid_valueOf_b82b6847547f7afe] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Long;");

        class$ = new ::java::lang::Class(cls);
        cls = (jclass) class$->this$;

        BYTES = env->getStaticIntField(cls, "BYTES");
        MAX_VALUE = env->getStaticLongField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticLongField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Long::Long(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

    Long::Long(jlong a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_9c778c9bce6694df, a0)) {}

    jint Long::bitCount(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_bitCount_694afffd0eb7dc3c], a0);
    }

    jbyte Long::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_871cd52a74f26213]);
    }

    jint Long::compare(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_99574379560a8cbc], a0, a1);
    }

    jint Long::compareTo(const Long & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_40b29526fa8f635b], a0.this$);
    }

    jint Long::compareUnsigned(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compareUnsigned_99574379560a8cbc], a0, a1);
    }

    Long Long::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_decode_5425c887ff2030fd], a0.this$));
    }

    jlong Long::divideUnsigned(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_divideUnsigned_3f3333a84e3e6855], a0, a1);
    }

    jdouble Long::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_8c74b787998ce4bc]);
    }

    jboolean Long::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
    }

    jfloat Long::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_58aec2b64dff50c8]);
    }

    Long Long::getLong(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_getLong_5425c887ff2030fd], a0.this$));
    }

    Long Long::getLong(const ::java::lang::String & a0, const Long & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_getLong_f893aa9a5325648a], a0.this$, a1.this$));
    }

    Long Long::getLong(const ::java::lang::String & a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_getLong_b102935049580f07], a0.this$, a1));
    }

    jint Long::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
    }

    jint Long::hashCode(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_694afffd0eb7dc3c], a0);
    }

    jlong Long::highestOneBit(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_highestOneBit_d711eecdc469624a], a0);
    }

    jint Long::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_9972fcc56b44e79d]);
    }

    jlong Long::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_2e5ae9edcb9b072f]);
    }

    jlong Long::lowestOneBit(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_lowestOneBit_d711eecdc469624a], a0);
    }

    jlong Long::max$(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_max_3f3333a84e3e6855], a0, a1);
    }

    jlong Long::min$(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_min_3f3333a84e3e6855], a0, a1);
    }

    jint Long::numberOfLeadingZeros(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_numberOfLeadingZeros_694afffd0eb7dc3c], a0);
    }

    jint Long::numberOfTrailingZeros(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_numberOfTrailingZeros_694afffd0eb7dc3c], a0);
    }

    jlong Long::parseLong(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_parseLong_b1e05207ec98e246], a0.this$);
    }

    jlong Long::parseLong(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_parseLong_4bbb7c443972920d], a0.this$, a1);
    }

    jlong Long::parseUnsignedLong(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_parseUnsignedLong_b1e05207ec98e246], a0.this$);
    }

    jlong Long::parseUnsignedLong(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_parseUnsignedLong_4bbb7c443972920d], a0.this$, a1);
    }

    jlong Long::remainderUnsigned(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_remainderUnsigned_3f3333a84e3e6855], a0, a1);
    }

    jlong Long::reverse(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_reverse_d711eecdc469624a], a0);
    }

    jlong Long::reverseBytes(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_reverseBytes_d711eecdc469624a], a0);
    }

    jlong Long::rotateLeft(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_rotateLeft_ebe3aad9c8eac1c8], a0, a1);
    }

    jlong Long::rotateRight(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_rotateRight_ebe3aad9c8eac1c8], a0, a1);
    }

    jshort Long::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_ec20af88366b851e]);
    }

    jint Long::signum(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_signum_694afffd0eb7dc3c], a0);
    }

    jlong Long::sum(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_sum_3f3333a84e3e6855], a0, a1);
    }

    ::java::lang::String Long::toBinaryString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toBinaryString_55e776ffac018431], a0));
    }

    ::java::lang::String Long::toHexString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_55e776ffac018431], a0));
    }

    ::java::lang::String Long::toOctalString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toOctalString_55e776ffac018431], a0));
    }

    ::java::lang::String Long::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
    }

    ::java::lang::String Long::toString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_55e776ffac018431], a0));
    }

    ::java::lang::String Long::toString(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_ca777a1f4bee0479], a0, a1));
    }

    ::java::lang::String Long::toUnsignedString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toUnsignedString_55e776ffac018431], a0));
    }

    ::java::lang::String Long::toUnsignedString(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toUnsignedString_ca777a1f4bee0479], a0, a1));
    }

    Long Long::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5425c887ff2030fd], a0.this$));
    }

    Long Long::valueOf(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_valueOf_cf9cb5744f7372e6], a0));
    }

    Long Long::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_valueOf_b82b6847547f7afe], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Long_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Long_init_(t_Long *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Long_bitCount(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_byteValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_compareTo(t_Long *self, PyObject *arg);
    static PyObject *t_Long_compareUnsigned(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_divideUnsigned(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_doubleValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_equals(t_Long *self, PyObject *args);
    static PyObject *t_Long_floatValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_getLong(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_hashCode(t_Long *self, PyObject *args);
    static PyObject *t_Long_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_highestOneBit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_intValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_longValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_lowestOneBit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_max(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_min(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_parseLong(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_parseUnsignedLong(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_remainderUnsigned(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_reverse(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_rotateLeft(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_rotateRight(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_shortValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_signum(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_sum(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_toBinaryString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_toHexString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_toOctalString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_toString(t_Long *self, PyObject *args);
    static PyObject *t_Long_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_toUnsignedString(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Long__methods_[] = {
      DECLARE_METHOD(t_Long, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, bitCount, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, compareTo, METH_O),
      DECLARE_METHOD(t_Long, compareUnsigned, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, divideUnsigned, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, equals, METH_VARARGS),
      DECLARE_METHOD(t_Long, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, getLong, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Long, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, highestOneBit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, lowestOneBit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, max, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, min, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, numberOfLeadingZeros, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, numberOfTrailingZeros, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, parseLong, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, parseUnsignedLong, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, remainderUnsigned, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, reverse, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, rotateLeft, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, rotateRight, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, signum, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, sum, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, toBinaryString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, toHexString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, toOctalString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, toString, METH_VARARGS),
      DECLARE_METHOD(t_Long, toString_, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, toUnsignedString, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Long)[] = {
      { Py_tp_methods, t_Long__methods_ },
      { Py_tp_init, (void *) t_Long_init_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Long)[] = {
      &PY_TYPE_DEF(::java::lang::Number),
      NULL
    };

    DEFINE_TYPE(Long, t_Long, Long);

    void t_Long::install(PyObject *module)
    {
      installType(&PY_TYPE(Long), &PY_TYPE_DEF(Long), module, "Long", 0);
    }

    void t_Long::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Long), "class_", make_descriptor(Long::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Long), "wrapfn_", make_descriptor(unboxLong));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Long), "boxfn_", make_descriptor(boxLong));
      env->getClass(Long::initializeClass);
      PyObject_SetAttrString((PyObject *) PY_TYPE(Long), "BYTES", make_descriptor(Long::BYTES));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Long), "MAX_VALUE", make_descriptor(Long::MAX_VALUE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Long), "MIN_VALUE", make_descriptor(Long::MIN_VALUE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Long), "SIZE", make_descriptor(Long::SIZE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Long), "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Long::TYPE)));
    }

    static PyObject *t_Long_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Long::initializeClass, 1)))
        return NULL;
      return t_Long::wrap_Object(Long(((t_Long *) arg)->object.this$));
    }
    static PyObject *t_Long_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Long::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Long_init_(t_Long *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Long object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Long(a0));
            self->object = object;
            break;
          }
        }
        {
          jlong a0;
          Long object((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            INT_CALL(object = Long(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Long_bitCount(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jint result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::bitCount(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "bitCount", arg);
      return NULL;
    }

    static PyObject *t_Long_byteValue(t_Long *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Long), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Long_compare(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jint result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::compare(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Long_compareTo(t_Long *self, PyObject *arg)
    {
      Long a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", ::java::lang::PY_TYPE(Long), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Long_compareUnsigned(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jint result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::compareUnsigned(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compareUnsigned", args);
      return NULL;
    }

    static PyObject *t_Long_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Long result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::decode(a0));
        return t_Long::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Long_divideUnsigned(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jlong result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::divideUnsigned(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "divideUnsigned", args);
      return NULL;
    }

    static PyObject *t_Long_doubleValue(t_Long *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(PY_TYPE(Long), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Long_equals(t_Long *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(Long), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Long_floatValue(t_Long *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(PY_TYPE(Long), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Long_getLong(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Long result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::getLong(a0));
            return t_Long::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          Long a1((jobject) NULL);
          Long result((jobject) NULL);

          if (!parseArgs(args, "sO", ::java::lang::PY_TYPE(Long), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::getLong(a0, a1));
            return t_Long::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          Long result((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::getLong(a0, a1));
            return t_Long::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getLong", args);
      return NULL;
    }

    static PyObject *t_Long_hashCode(t_Long *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Long), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Long_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jint result;

      if (!parseArgs(args, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::hashCode(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Long_highestOneBit(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::highestOneBit(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "highestOneBit", arg);
      return NULL;
    }

    static PyObject *t_Long_intValue(t_Long *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Long), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Long_longValue(t_Long *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(PY_TYPE(Long), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Long_lowestOneBit(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::lowestOneBit(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "lowestOneBit", arg);
      return NULL;
    }

    static PyObject *t_Long_max(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jlong result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::max$(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "max", args);
      return NULL;
    }

    static PyObject *t_Long_min(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jlong result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::min$(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "min", args);
      return NULL;
    }

    static PyObject *t_Long_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jint result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::numberOfLeadingZeros(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "numberOfLeadingZeros", arg);
      return NULL;
    }

    static PyObject *t_Long_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jint result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::numberOfTrailingZeros(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "numberOfTrailingZeros", arg);
      return NULL;
    }

    static PyObject *t_Long_parseLong(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::parseLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jlong result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::parseLong(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseLong", args);
      return NULL;
    }

    static PyObject *t_Long_parseUnsignedLong(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::parseUnsignedLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jlong result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::parseUnsignedLong(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseUnsignedLong", args);
      return NULL;
    }

    static PyObject *t_Long_remainderUnsigned(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jlong result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::remainderUnsigned(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "remainderUnsigned", args);
      return NULL;
    }

    static PyObject *t_Long_reverse(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::reverse(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "reverse", arg);
      return NULL;
    }

    static PyObject *t_Long_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::reverseBytes(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Long_rotateLeft(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jint a1;
      jlong result;

      if (!parseArgs(args, "JI", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::rotateLeft(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "rotateLeft", args);
      return NULL;
    }

    static PyObject *t_Long_rotateRight(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jint a1;
      jlong result;

      if (!parseArgs(args, "JI", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::rotateRight(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "rotateRight", args);
      return NULL;
    }

    static PyObject *t_Long_shortValue(t_Long *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Long), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Long_signum(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jint result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::signum(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "signum", arg);
      return NULL;
    }

    static PyObject *t_Long_sum(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jlong result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::sum(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "sum", args);
      return NULL;
    }

    static PyObject *t_Long_toBinaryString(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::toBinaryString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toBinaryString", arg);
      return NULL;
    }

    static PyObject *t_Long_toHexString(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::toHexString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toHexString", arg);
      return NULL;
    }

    static PyObject *t_Long_toOctalString(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::toOctalString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toOctalString", arg);
      return NULL;
    }

    static PyObject *t_Long_toString(t_Long *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(PY_TYPE(Long), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Long_toString_(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jlong a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::toString(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::toString(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Long_toUnsignedString(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jlong a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::toUnsignedString(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::toUnsignedString(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "toUnsignedString", args);
      return NULL;
    }

    static PyObject *t_Long_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Long result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::valueOf(a0));
            return t_Long::wrap_Object(result);
          }
        }
        {
          jlong a0;
          Long result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::valueOf(a0));
            return t_Long::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Long result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::valueOf(a0, a1));
            return t_Long::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/JapaneseNumberFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {

          ::java::lang::Class *JapaneseNumberFilterFactory::class$ = NULL;
          jmethodID *JapaneseNumberFilterFactory::mids$ = NULL;
          bool JapaneseNumberFilterFactory::live$ = false;
          ::java::lang::String *JapaneseNumberFilterFactory::NAME = NULL;

          jclass JapaneseNumberFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/JapaneseNumberFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JapaneseNumberFilterFactory::JapaneseNumberFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream JapaneseNumberFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          static PyObject *t_JapaneseNumberFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JapaneseNumberFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JapaneseNumberFilterFactory_init_(t_JapaneseNumberFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JapaneseNumberFilterFactory_create(t_JapaneseNumberFilterFactory *self, PyObject *args);

          static PyMethodDef t_JapaneseNumberFilterFactory__methods_[] = {
            DECLARE_METHOD(t_JapaneseNumberFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseNumberFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseNumberFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JapaneseNumberFilterFactory)[] = {
            { Py_tp_methods, t_JapaneseNumberFilterFactory__methods_ },
            { Py_tp_init, (void *) t_JapaneseNumberFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JapaneseNumberFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(JapaneseNumberFilterFactory, t_JapaneseNumberFilterFactory, JapaneseNumberFilterFactory);

          void t_JapaneseNumberFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(JapaneseNumberFilterFactory), &PY_TYPE_DEF(JapaneseNumberFilterFactory), module, "JapaneseNumberFilterFactory", 0);
          }

          void t_JapaneseNumberFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseNumberFilterFactory), "class_", make_descriptor(JapaneseNumberFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseNumberFilterFactory), "wrapfn_", make_descriptor(t_JapaneseNumberFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseNumberFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(JapaneseNumberFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseNumberFilterFactory), "NAME", make_descriptor(j2p(*JapaneseNumberFilterFactory::NAME)));
          }

          static PyObject *t_JapaneseNumberFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JapaneseNumberFilterFactory::initializeClass, 1)))
              return NULL;
            return t_JapaneseNumberFilterFactory::wrap_Object(JapaneseNumberFilterFactory(((t_JapaneseNumberFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_JapaneseNumberFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JapaneseNumberFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JapaneseNumberFilterFactory_init_(t_JapaneseNumberFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            JapaneseNumberFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = JapaneseNumberFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JapaneseNumberFilterFactory_create(t_JapaneseNumberFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(JapaneseNumberFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *DocTermsIndexDocValues::class$ = NULL;
            jmethodID *DocTermsIndexDocValues::mids$ = NULL;
            bool DocTermsIndexDocValues::live$ = false;

            jclass DocTermsIndexDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d7341fb0d2a9badf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/index/LeafReaderContext;Ljava/lang/String;)V");
                mids$[mid_boolVal_a1d30e1ee40c89a2] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_bytesVal_81393e711d0ebc08] = env->getMethodID(cls, "bytesVal", "(ILorg/apache/lucene/util/BytesRefBuilder;)Z");
                mids$[mid_exists_a1d30e1ee40c89a2] = env->getMethodID(cls, "exists", "(I)Z");
                mids$[mid_getRangeScorer_a2e4107cfe5ff421] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/index/LeafReaderContext;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
                mids$[mid_getValueFiller_e87ccfe6e71ebd5e] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_numOrd_9972fcc56b44e79d] = env->getMethodID(cls, "numOrd", "()I");
                mids$[mid_objectVal_b15c79acb15c2870] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_ordVal_1e143afe1894d213] = env->getMethodID(cls, "ordVal", "(I)I");
                mids$[mid_strVal_d7593acad64ef635] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_d7593acad64ef635] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");
                mids$[mid_getOrdForDoc_1e143afe1894d213] = env->getMethodID(cls, "getOrdForDoc", "(I)I");
                mids$[mid_toTerm_9bfa75c9f141b67f] = env->getMethodID(cls, "toTerm", "(Ljava/lang/String;)Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DocTermsIndexDocValues::DocTermsIndexDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::index::LeafReaderContext & a1, const ::java::lang::String & a2) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_d7341fb0d2a9badf, a0.this$, a1.this$, a2.this$)) {}

            jboolean DocTermsIndexDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_a1d30e1ee40c89a2], a0);
            }

            jboolean DocTermsIndexDocValues::bytesVal(jint a0, const ::org::apache::lucene::util::BytesRefBuilder & a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_bytesVal_81393e711d0ebc08], a0, a1.this$);
            }

            jboolean DocTermsIndexDocValues::exists(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_exists_a1d30e1ee40c89a2], a0);
            }

            ::org::apache::lucene::queries::function::ValueSourceScorer DocTermsIndexDocValues::getRangeScorer(const ::org::apache::lucene::search::Weight & a0, const ::org::apache::lucene::index::LeafReaderContext & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, jboolean a4, jboolean a5) const
            {
              return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_a2e4107cfe5ff421], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller DocTermsIndexDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_e87ccfe6e71ebd5e]));
            }

            jint DocTermsIndexDocValues::numOrd() const
            {
              return env->callIntMethod(this$, mids$[mid_numOrd_9972fcc56b44e79d]);
            }

            ::java::lang::Object DocTermsIndexDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_b15c79acb15c2870], a0));
            }

            jint DocTermsIndexDocValues::ordVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_ordVal_1e143afe1894d213], a0);
            }

            ::java::lang::String DocTermsIndexDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_d7593acad64ef635], a0));
            }

            ::java::lang::String DocTermsIndexDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_d7593acad64ef635], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues$DocTermsIndexException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_DocTermsIndexDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DocTermsIndexDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DocTermsIndexDocValues_init_(t_DocTermsIndexDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DocTermsIndexDocValues_boolVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_bytesVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_exists(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_getRangeScorer(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_getValueFiller(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_numOrd(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_objectVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_ordVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_strVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_toString(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_get__valueFiller(t_DocTermsIndexDocValues *self, void *data);
            static PyGetSetDef t_DocTermsIndexDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_DocTermsIndexDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DocTermsIndexDocValues__methods_[] = {
              DECLARE_METHOD(t_DocTermsIndexDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, bytesVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, exists, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, getRangeScorer, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, numOrd, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, ordVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(DocTermsIndexDocValues)[] = {
              { Py_tp_methods, t_DocTermsIndexDocValues__methods_ },
              { Py_tp_init, (void *) t_DocTermsIndexDocValues_init_ },
              { Py_tp_getset, t_DocTermsIndexDocValues__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(DocTermsIndexDocValues)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::FunctionValues),
              NULL
            };

            DEFINE_TYPE(DocTermsIndexDocValues, t_DocTermsIndexDocValues, DocTermsIndexDocValues);

            void t_DocTermsIndexDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(DocTermsIndexDocValues), &PY_TYPE_DEF(DocTermsIndexDocValues), module, "DocTermsIndexDocValues", 0);
              PyObject_SetAttrString((PyObject *) PY_TYPE(DocTermsIndexDocValues), "DocTermsIndexException", make_descriptor(&PY_TYPE_DEF(DocTermsIndexDocValues$DocTermsIndexException)));
            }

            void t_DocTermsIndexDocValues::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(DocTermsIndexDocValues), "class_", make_descriptor(DocTermsIndexDocValues::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DocTermsIndexDocValues), "wrapfn_", make_descriptor(t_DocTermsIndexDocValues::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DocTermsIndexDocValues), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DocTermsIndexDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DocTermsIndexDocValues::initializeClass, 1)))
                return NULL;
              return t_DocTermsIndexDocValues::wrap_Object(DocTermsIndexDocValues(((t_DocTermsIndexDocValues *) arg)->object.this$));
            }
            static PyObject *t_DocTermsIndexDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DocTermsIndexDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DocTermsIndexDocValues_init_(t_DocTermsIndexDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              DocTermsIndexDocValues object((jobject) NULL);

              if (!parseArgs(args, "kks", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DocTermsIndexDocValues(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DocTermsIndexDocValues_boolVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_bytesVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              ::org::apache::lucene::util::BytesRefBuilder a1((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "Ik", ::org::apache::lucene::util::BytesRefBuilder::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.bytesVal(a0, a1));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "bytesVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_exists(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.exists(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "exists", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_getRangeScorer(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::search::Weight a0((jobject) NULL);
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::java::lang::String a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

              if (!parseArgs(args, "kkssZZ", ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4, a5));
                return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
              }

              return callSuper(PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "getRangeScorer", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_getValueFiller(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_numOrd(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.numOrd());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "numOrd", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_objectVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_ordVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.ordVal(a0));
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "ordVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_strVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_toString(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_get__valueFiller(t_DocTermsIndexDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/KoreanPartOfSpeechStopFilter.h"
#include "org/apache/lucene/analysis/ko/POS$Tag.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {

          ::java::lang::Class *KoreanPartOfSpeechStopFilter::class$ = NULL;
          jmethodID *KoreanPartOfSpeechStopFilter::mids$ = NULL;
          bool KoreanPartOfSpeechStopFilter::live$ = false;
          ::java::util::Set *KoreanPartOfSpeechStopFilter::DEFAULT_STOP_TAGS = NULL;

          jclass KoreanPartOfSpeechStopFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/KoreanPartOfSpeechStopFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_59f4cbc95aff88bf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;)V");
              mids$[mid_accept_8454bd5aa23fd11e] = env->getMethodID(cls, "accept", "()Z");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOP_TAGS = new ::java::util::Set(env->getStaticObjectField(cls, "DEFAULT_STOP_TAGS", "Ljava/util/Set;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KoreanPartOfSpeechStopFilter::KoreanPartOfSpeechStopFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          KoreanPartOfSpeechStopFilter::KoreanPartOfSpeechStopFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::util::Set & a1) : ::org::apache::lucene::analysis::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_59f4cbc95aff88bf, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          static PyObject *t_KoreanPartOfSpeechStopFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KoreanPartOfSpeechStopFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KoreanPartOfSpeechStopFilter_init_(t_KoreanPartOfSpeechStopFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_KoreanPartOfSpeechStopFilter__methods_[] = {
            DECLARE_METHOD(t_KoreanPartOfSpeechStopFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanPartOfSpeechStopFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KoreanPartOfSpeechStopFilter)[] = {
            { Py_tp_methods, t_KoreanPartOfSpeechStopFilter__methods_ },
            { Py_tp_init, (void *) t_KoreanPartOfSpeechStopFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KoreanPartOfSpeechStopFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::FilteringTokenFilter),
            NULL
          };

          DEFINE_TYPE(KoreanPartOfSpeechStopFilter, t_KoreanPartOfSpeechStopFilter, KoreanPartOfSpeechStopFilter);

          void t_KoreanPartOfSpeechStopFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KoreanPartOfSpeechStopFilter), &PY_TYPE_DEF(KoreanPartOfSpeechStopFilter), module, "KoreanPartOfSpeechStopFilter", 0);
          }

          void t_KoreanPartOfSpeechStopFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanPartOfSpeechStopFilter), "class_", make_descriptor(KoreanPartOfSpeechStopFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanPartOfSpeechStopFilter), "wrapfn_", make_descriptor(t_KoreanPartOfSpeechStopFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanPartOfSpeechStopFilter), "boxfn_", make_descriptor(boxObject));
            env->getClass(KoreanPartOfSpeechStopFilter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanPartOfSpeechStopFilter), "DEFAULT_STOP_TAGS", make_descriptor(::java::util::t_Set::wrap_Object(*KoreanPartOfSpeechStopFilter::DEFAULT_STOP_TAGS)));
          }

          static PyObject *t_KoreanPartOfSpeechStopFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KoreanPartOfSpeechStopFilter::initializeClass, 1)))
              return NULL;
            return t_KoreanPartOfSpeechStopFilter::wrap_Object(KoreanPartOfSpeechStopFilter(((t_KoreanPartOfSpeechStopFilter *) arg)->object.this$));
          }
          static PyObject *t_KoreanPartOfSpeechStopFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KoreanPartOfSpeechStopFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KoreanPartOfSpeechStopFilter_init_(t_KoreanPartOfSpeechStopFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                KoreanPartOfSpeechStopFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = KoreanPartOfSpeechStopFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                KoreanPartOfSpeechStopFilter object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = KoreanPartOfSpeechStopFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenOffsetFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenOffsetFilterFactory::class$ = NULL;
          jmethodID *LimitTokenOffsetFilterFactory::mids$ = NULL;
          bool LimitTokenOffsetFilterFactory::live$ = false;
          ::java::lang::String *LimitTokenOffsetFilterFactory::CONSUME_ALL_TOKENS_KEY = NULL;
          ::java::lang::String *LimitTokenOffsetFilterFactory::MAX_START_OFFSET = NULL;
          ::java::lang::String *LimitTokenOffsetFilterFactory::NAME = NULL;

          jclass LimitTokenOffsetFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenOffsetFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              CONSUME_ALL_TOKENS_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "CONSUME_ALL_TOKENS_KEY", "Ljava/lang/String;"));
              MAX_START_OFFSET = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_START_OFFSET", "Ljava/lang/String;"));
              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenOffsetFilterFactory::LimitTokenOffsetFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream LimitTokenOffsetFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenOffsetFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenOffsetFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenOffsetFilterFactory_init_(t_LimitTokenOffsetFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenOffsetFilterFactory_create(t_LimitTokenOffsetFilterFactory *self, PyObject *args);

          static PyMethodDef t_LimitTokenOffsetFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LimitTokenOffsetFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenOffsetFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenOffsetFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LimitTokenOffsetFilterFactory)[] = {
            { Py_tp_methods, t_LimitTokenOffsetFilterFactory__methods_ },
            { Py_tp_init, (void *) t_LimitTokenOffsetFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LimitTokenOffsetFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(LimitTokenOffsetFilterFactory, t_LimitTokenOffsetFilterFactory, LimitTokenOffsetFilterFactory);

          void t_LimitTokenOffsetFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenOffsetFilterFactory), &PY_TYPE_DEF(LimitTokenOffsetFilterFactory), module, "LimitTokenOffsetFilterFactory", 0);
          }

          void t_LimitTokenOffsetFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenOffsetFilterFactory), "class_", make_descriptor(LimitTokenOffsetFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenOffsetFilterFactory), "wrapfn_", make_descriptor(t_LimitTokenOffsetFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenOffsetFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(LimitTokenOffsetFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenOffsetFilterFactory), "CONSUME_ALL_TOKENS_KEY", make_descriptor(j2p(*LimitTokenOffsetFilterFactory::CONSUME_ALL_TOKENS_KEY)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenOffsetFilterFactory), "MAX_START_OFFSET", make_descriptor(j2p(*LimitTokenOffsetFilterFactory::MAX_START_OFFSET)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenOffsetFilterFactory), "NAME", make_descriptor(j2p(*LimitTokenOffsetFilterFactory::NAME)));
          }

          static PyObject *t_LimitTokenOffsetFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenOffsetFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LimitTokenOffsetFilterFactory::wrap_Object(LimitTokenOffsetFilterFactory(((t_LimitTokenOffsetFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenOffsetFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenOffsetFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenOffsetFilterFactory_init_(t_LimitTokenOffsetFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LimitTokenOffsetFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LimitTokenOffsetFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenOffsetFilterFactory_create(t_LimitTokenOffsetFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(LimitTokenOffsetFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianMinimalStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianMinimalStemFilterFactory::class$ = NULL;
          jmethodID *NorwegianMinimalStemFilterFactory::mids$ = NULL;
          bool NorwegianMinimalStemFilterFactory::live$ = false;
          ::java::lang::String *NorwegianMinimalStemFilterFactory::NAME = NULL;

          jclass NorwegianMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianMinimalStemFilterFactory::NorwegianMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream NorwegianMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianMinimalStemFilterFactory_init_(t_NorwegianMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianMinimalStemFilterFactory_create(t_NorwegianMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_NorwegianMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_NorwegianMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NorwegianMinimalStemFilterFactory)[] = {
            { Py_tp_methods, t_NorwegianMinimalStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_NorwegianMinimalStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NorwegianMinimalStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(NorwegianMinimalStemFilterFactory, t_NorwegianMinimalStemFilterFactory, NorwegianMinimalStemFilterFactory);

          void t_NorwegianMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianMinimalStemFilterFactory), &PY_TYPE_DEF(NorwegianMinimalStemFilterFactory), module, "NorwegianMinimalStemFilterFactory", 0);
          }

          void t_NorwegianMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianMinimalStemFilterFactory), "class_", make_descriptor(NorwegianMinimalStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianMinimalStemFilterFactory), "wrapfn_", make_descriptor(t_NorwegianMinimalStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianMinimalStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(NorwegianMinimalStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianMinimalStemFilterFactory), "NAME", make_descriptor(j2p(*NorwegianMinimalStemFilterFactory::NAME)));
          }

          static PyObject *t_NorwegianMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_NorwegianMinimalStemFilterFactory::wrap_Object(NorwegianMinimalStemFilterFactory(((t_NorwegianMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_NorwegianMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianMinimalStemFilterFactory_init_(t_NorwegianMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NorwegianMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NorwegianMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianMinimalStemFilterFactory_create(t_NorwegianMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(NorwegianMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/MatchNoDocsQueryNodeBuilder.h"
#include "org/apache/lucene/search/MatchNoDocsQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *MatchNoDocsQueryNodeBuilder::class$ = NULL;
              jmethodID *MatchNoDocsQueryNodeBuilder::mids$ = NULL;
              bool MatchNoDocsQueryNodeBuilder::live$ = false;

              jclass MatchNoDocsQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/MatchNoDocsQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_db6247cf88758943] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/MatchNoDocsQuery;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchNoDocsQueryNodeBuilder::MatchNoDocsQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::search::MatchNoDocsQuery MatchNoDocsQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::MatchNoDocsQuery(env->callObjectMethod(this$, mids$[mid_build_db6247cf88758943], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_MatchNoDocsQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchNoDocsQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchNoDocsQueryNodeBuilder_init_(t_MatchNoDocsQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MatchNoDocsQueryNodeBuilder_build(t_MatchNoDocsQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_MatchNoDocsQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_MatchNoDocsQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchNoDocsQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchNoDocsQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(MatchNoDocsQueryNodeBuilder)[] = {
                { Py_tp_methods, t_MatchNoDocsQueryNodeBuilder__methods_ },
                { Py_tp_init, (void *) t_MatchNoDocsQueryNodeBuilder_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(MatchNoDocsQueryNodeBuilder)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(MatchNoDocsQueryNodeBuilder, t_MatchNoDocsQueryNodeBuilder, MatchNoDocsQueryNodeBuilder);

              void t_MatchNoDocsQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchNoDocsQueryNodeBuilder), &PY_TYPE_DEF(MatchNoDocsQueryNodeBuilder), module, "MatchNoDocsQueryNodeBuilder", 0);
              }

              void t_MatchNoDocsQueryNodeBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(MatchNoDocsQueryNodeBuilder), "class_", make_descriptor(MatchNoDocsQueryNodeBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(MatchNoDocsQueryNodeBuilder), "wrapfn_", make_descriptor(t_MatchNoDocsQueryNodeBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(MatchNoDocsQueryNodeBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchNoDocsQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchNoDocsQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_MatchNoDocsQueryNodeBuilder::wrap_Object(MatchNoDocsQueryNodeBuilder(((t_MatchNoDocsQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_MatchNoDocsQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchNoDocsQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchNoDocsQueryNodeBuilder_init_(t_MatchNoDocsQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                MatchNoDocsQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = MatchNoDocsQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_MatchNoDocsQueryNodeBuilder_build(t_MatchNoDocsQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::MatchNoDocsQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_MatchNoDocsQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/FastTaxonomyFacetCounts.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *FastTaxonomyFacetCounts::class$ = NULL;
          jmethodID *FastTaxonomyFacetCounts::mids$ = NULL;
          bool FastTaxonomyFacetCounts::live$ = false;

          jclass FastTaxonomyFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/FastTaxonomyFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0279dbd5ca76e087] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");
              mids$[mid_init$_cf8e900354647cb2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");
              mids$[mid_init$_89f8a21edd2203ee] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FastTaxonomyFacetCounts::FastTaxonomyFacetCounts(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::FacetsCollector & a2) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_0279dbd5ca76e087, a0.this$, a1.this$, a2.this$)) {}

          FastTaxonomyFacetCounts::FastTaxonomyFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_cf8e900354647cb2, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          FastTaxonomyFacetCounts::FastTaxonomyFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a2, const ::org::apache::lucene::facet::FacetsConfig & a3) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_89f8a21edd2203ee, a0.this$, a1.this$, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_FastTaxonomyFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FastTaxonomyFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FastTaxonomyFacetCounts_init_(t_FastTaxonomyFacetCounts *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_FastTaxonomyFacetCounts__methods_[] = {
            DECLARE_METHOD(t_FastTaxonomyFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastTaxonomyFacetCounts, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FastTaxonomyFacetCounts)[] = {
            { Py_tp_methods, t_FastTaxonomyFacetCounts__methods_ },
            { Py_tp_init, (void *) t_FastTaxonomyFacetCounts_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FastTaxonomyFacetCounts)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets),
            NULL
          };

          DEFINE_TYPE(FastTaxonomyFacetCounts, t_FastTaxonomyFacetCounts, FastTaxonomyFacetCounts);

          void t_FastTaxonomyFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(FastTaxonomyFacetCounts), &PY_TYPE_DEF(FastTaxonomyFacetCounts), module, "FastTaxonomyFacetCounts", 0);
          }

          void t_FastTaxonomyFacetCounts::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FastTaxonomyFacetCounts), "class_", make_descriptor(FastTaxonomyFacetCounts::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FastTaxonomyFacetCounts), "wrapfn_", make_descriptor(t_FastTaxonomyFacetCounts::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FastTaxonomyFacetCounts), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FastTaxonomyFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FastTaxonomyFacetCounts::initializeClass, 1)))
              return NULL;
            return t_FastTaxonomyFacetCounts::wrap_Object(FastTaxonomyFacetCounts(((t_FastTaxonomyFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_FastTaxonomyFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FastTaxonomyFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FastTaxonomyFacetCounts_init_(t_FastTaxonomyFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                FastTaxonomyFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = FastTaxonomyFacetCounts(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
                FastTaxonomyFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = FastTaxonomyFacetCounts(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a2((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a3((jobject) NULL);
                FastTaxonomyFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skkk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = FastTaxonomyFacetCounts(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoPolygonFactory$PolygonDescription.h"
#include "java/util/List.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "org/apache/lucene/spatial3d/geom/GeoPolygonFactory$PolygonDescription.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoPolygonFactory$PolygonDescription::class$ = NULL;
          jmethodID *GeoPolygonFactory$PolygonDescription::mids$ = NULL;
          jfieldID *GeoPolygonFactory$PolygonDescription::fids$ = NULL;
          bool GeoPolygonFactory$PolygonDescription::live$ = false;

          jclass GeoPolygonFactory$PolygonDescription::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoPolygonFactory$PolygonDescription");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d03990be0130160d] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
              mids$[mid_init$_c734de9369b606d5] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Ljava/util/List;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_holes] = env->getFieldID(cls, "holes", "Ljava/util/List;");
              fids$[fid_points] = env->getFieldID(cls, "points", "Ljava/util/List;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GeoPolygonFactory$PolygonDescription::GeoPolygonFactory$PolygonDescription(const ::java::util::List & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d03990be0130160d, a0.this$)) {}

          GeoPolygonFactory$PolygonDescription::GeoPolygonFactory$PolygonDescription(const ::java::util::List & a0, const ::java::util::List & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c734de9369b606d5, a0.this$, a1.this$)) {}

          ::java::util::List GeoPolygonFactory$PolygonDescription::_get_holes() const
          {
            return ::java::util::List(env->getObjectField(this$, fids$[fid_holes]));
          }

          ::java::util::List GeoPolygonFactory$PolygonDescription::_get_points() const
          {
            return ::java::util::List(env->getObjectField(this$, fids$[fid_points]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoPolygonFactory$PolygonDescription_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoPolygonFactory$PolygonDescription_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GeoPolygonFactory$PolygonDescription_init_(t_GeoPolygonFactory$PolygonDescription *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GeoPolygonFactory$PolygonDescription_get__holes(t_GeoPolygonFactory$PolygonDescription *self, void *data);
          static PyObject *t_GeoPolygonFactory$PolygonDescription_get__points(t_GeoPolygonFactory$PolygonDescription *self, void *data);

          static PyGetSetDef t_GeoPolygonFactory$PolygonDescription__fields_[] = {
            DECLARE_GET_FIELD(t_GeoPolygonFactory$PolygonDescription, holes),
            DECLARE_GET_FIELD(t_GeoPolygonFactory$PolygonDescription, points),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GeoPolygonFactory$PolygonDescription__methods_[] = {
            DECLARE_METHOD(t_GeoPolygonFactory$PolygonDescription, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoPolygonFactory$PolygonDescription, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoPolygonFactory$PolygonDescription)[] = {
            { Py_tp_methods, t_GeoPolygonFactory$PolygonDescription__methods_ },
            { Py_tp_init, (void *) t_GeoPolygonFactory$PolygonDescription_init_ },
            { Py_tp_getset, t_GeoPolygonFactory$PolygonDescription__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoPolygonFactory$PolygonDescription)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GeoPolygonFactory$PolygonDescription, t_GeoPolygonFactory$PolygonDescription, GeoPolygonFactory$PolygonDescription);

          void t_GeoPolygonFactory$PolygonDescription::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoPolygonFactory$PolygonDescription), &PY_TYPE_DEF(GeoPolygonFactory$PolygonDescription), module, "GeoPolygonFactory$PolygonDescription", 0);
          }

          void t_GeoPolygonFactory$PolygonDescription::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPolygonFactory$PolygonDescription), "class_", make_descriptor(GeoPolygonFactory$PolygonDescription::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPolygonFactory$PolygonDescription), "wrapfn_", make_descriptor(t_GeoPolygonFactory$PolygonDescription::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPolygonFactory$PolygonDescription), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoPolygonFactory$PolygonDescription_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoPolygonFactory$PolygonDescription::initializeClass, 1)))
              return NULL;
            return t_GeoPolygonFactory$PolygonDescription::wrap_Object(GeoPolygonFactory$PolygonDescription(((t_GeoPolygonFactory$PolygonDescription *) arg)->object.this$));
          }
          static PyObject *t_GeoPolygonFactory$PolygonDescription_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoPolygonFactory$PolygonDescription::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GeoPolygonFactory$PolygonDescription_init_(t_GeoPolygonFactory$PolygonDescription *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                GeoPolygonFactory$PolygonDescription object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = GeoPolygonFactory$PolygonDescription(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::util::List a1((jobject) NULL);
                PyTypeObject **p1;
                GeoPolygonFactory$PolygonDescription object((jobject) NULL);

                if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = GeoPolygonFactory$PolygonDescription(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GeoPolygonFactory$PolygonDescription_get__holes(t_GeoPolygonFactory$PolygonDescription *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object._get_holes());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_GeoPolygonFactory$PolygonDescription_get__points(t_GeoPolygonFactory$PolygonDescription *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object._get_points());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/IBSimilarity.h"
#include "org/apache/lucene/search/similarities/Lambda.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/Distribution.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/Normalization.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *IBSimilarity::class$ = NULL;
          jmethodID *IBSimilarity::mids$ = NULL;
          bool IBSimilarity::live$ = false;

          jclass IBSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/IBSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_20f20e88b39d704a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/Distribution;Lorg/apache/lucene/search/similarities/Lambda;Lorg/apache/lucene/search/similarities/Normalization;)V");
              mids$[mid_getDistribution_26eb281901728b3d] = env->getMethodID(cls, "getDistribution", "()Lorg/apache/lucene/search/similarities/Distribution;");
              mids$[mid_getLambda_ee00d489addea2bb] = env->getMethodID(cls, "getLambda", "()Lorg/apache/lucene/search/similarities/Lambda;");
              mids$[mid_getNormalization_c47c4a90a93ef116] = env->getMethodID(cls, "getNormalization", "()Lorg/apache/lucene/search/similarities/Normalization;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_score_761ab1c432346fd0] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_explain_f9756f2482a92b24] = env->getMethodID(cls, "explain", "(Ljava/util/List;Lorg/apache/lucene/search/similarities/BasicStats;DD)V");
              mids$[mid_explain_a84367e35a1ef83b] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;Lorg/apache/lucene/search/Explanation;D)Lorg/apache/lucene/search/Explanation;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IBSimilarity::IBSimilarity(const ::org::apache::lucene::search::similarities::Distribution & a0, const ::org::apache::lucene::search::similarities::Lambda & a1, const ::org::apache::lucene::search::similarities::Normalization & a2) : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_20f20e88b39d704a, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::similarities::Distribution IBSimilarity::getDistribution() const
          {
            return ::org::apache::lucene::search::similarities::Distribution(env->callObjectMethod(this$, mids$[mid_getDistribution_26eb281901728b3d]));
          }

          ::org::apache::lucene::search::similarities::Lambda IBSimilarity::getLambda() const
          {
            return ::org::apache::lucene::search::similarities::Lambda(env->callObjectMethod(this$, mids$[mid_getLambda_ee00d489addea2bb]));
          }

          ::org::apache::lucene::search::similarities::Normalization IBSimilarity::getNormalization() const
          {
            return ::org::apache::lucene::search::similarities::Normalization(env->callObjectMethod(this$, mids$[mid_getNormalization_c47c4a90a93ef116]));
          }

          ::java::lang::String IBSimilarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_IBSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IBSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IBSimilarity_init_(t_IBSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IBSimilarity_getDistribution(t_IBSimilarity *self);
          static PyObject *t_IBSimilarity_getLambda(t_IBSimilarity *self);
          static PyObject *t_IBSimilarity_getNormalization(t_IBSimilarity *self);
          static PyObject *t_IBSimilarity_toString(t_IBSimilarity *self, PyObject *args);
          static PyObject *t_IBSimilarity_get__distribution(t_IBSimilarity *self, void *data);
          static PyObject *t_IBSimilarity_get__lambda(t_IBSimilarity *self, void *data);
          static PyObject *t_IBSimilarity_get__normalization(t_IBSimilarity *self, void *data);
          static PyGetSetDef t_IBSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_IBSimilarity, distribution),
            DECLARE_GET_FIELD(t_IBSimilarity, lambda),
            DECLARE_GET_FIELD(t_IBSimilarity, normalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IBSimilarity__methods_[] = {
            DECLARE_METHOD(t_IBSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IBSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IBSimilarity, getDistribution, METH_NOARGS),
            DECLARE_METHOD(t_IBSimilarity, getLambda, METH_NOARGS),
            DECLARE_METHOD(t_IBSimilarity, getNormalization, METH_NOARGS),
            DECLARE_METHOD(t_IBSimilarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IBSimilarity)[] = {
            { Py_tp_methods, t_IBSimilarity__methods_ },
            { Py_tp_init, (void *) t_IBSimilarity_init_ },
            { Py_tp_getset, t_IBSimilarity__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IBSimilarity)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::SimilarityBase),
            NULL
          };

          DEFINE_TYPE(IBSimilarity, t_IBSimilarity, IBSimilarity);

          void t_IBSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(IBSimilarity), &PY_TYPE_DEF(IBSimilarity), module, "IBSimilarity", 0);
          }

          void t_IBSimilarity::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IBSimilarity), "class_", make_descriptor(IBSimilarity::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IBSimilarity), "wrapfn_", make_descriptor(t_IBSimilarity::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IBSimilarity), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IBSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IBSimilarity::initializeClass, 1)))
              return NULL;
            return t_IBSimilarity::wrap_Object(IBSimilarity(((t_IBSimilarity *) arg)->object.this$));
          }
          static PyObject *t_IBSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IBSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IBSimilarity_init_(t_IBSimilarity *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::similarities::Distribution a0((jobject) NULL);
            ::org::apache::lucene::search::similarities::Lambda a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Normalization a2((jobject) NULL);
            IBSimilarity object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::search::similarities::Distribution::initializeClass, ::org::apache::lucene::search::similarities::Lambda::initializeClass, ::org::apache::lucene::search::similarities::Normalization::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = IBSimilarity(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IBSimilarity_getDistribution(t_IBSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::Distribution result((jobject) NULL);
            OBJ_CALL(result = self->object.getDistribution());
            return ::org::apache::lucene::search::similarities::t_Distribution::wrap_Object(result);
          }

          static PyObject *t_IBSimilarity_getLambda(t_IBSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::Lambda result((jobject) NULL);
            OBJ_CALL(result = self->object.getLambda());
            return ::org::apache::lucene::search::similarities::t_Lambda::wrap_Object(result);
          }

          static PyObject *t_IBSimilarity_getNormalization(t_IBSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::Normalization result((jobject) NULL);
            OBJ_CALL(result = self->object.getNormalization());
            return ::org::apache::lucene::search::similarities::t_Normalization::wrap_Object(result);
          }

          static PyObject *t_IBSimilarity_toString(t_IBSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(IBSimilarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_IBSimilarity_get__distribution(t_IBSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::Distribution value((jobject) NULL);
            OBJ_CALL(value = self->object.getDistribution());
            return ::org::apache::lucene::search::similarities::t_Distribution::wrap_Object(value);
          }

          static PyObject *t_IBSimilarity_get__lambda(t_IBSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::Lambda value((jobject) NULL);
            OBJ_CALL(value = self->object.getLambda());
            return ::org::apache::lucene::search::similarities::t_Lambda::wrap_Object(value);
          }

          static PyObject *t_IBSimilarity_get__normalization(t_IBSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::Normalization value((jobject) NULL);
            OBJ_CALL(value = self->object.getNormalization());
            return ::org::apache::lucene::search::similarities::t_Normalization::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CollectorManager.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Collector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CollectorManager::class$ = NULL;
        jmethodID *CollectorManager::mids$ = NULL;
        bool CollectorManager::live$ = false;

        jclass CollectorManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CollectorManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_newCollector_3c6c359421e4bebc] = env->getMethodID(cls, "newCollector", "()Lorg/apache/lucene/search/Collector;");
            mids$[mid_reduce_f186668b4e43c778] = env->getMethodID(cls, "reduce", "(Ljava/util/Collection;)Ljava/lang/Object;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::Collector CollectorManager::newCollector() const
        {
          return ::org::apache::lucene::search::Collector(env->callObjectMethod(this$, mids$[mid_newCollector_3c6c359421e4bebc]));
        }

        ::java::lang::Object CollectorManager::reduce(const ::java::util::Collection & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_reduce_f186668b4e43c778], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CollectorManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectorManager_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectorManager_of_(t_CollectorManager *self, PyObject *args);
        static PyObject *t_CollectorManager_newCollector(t_CollectorManager *self);
        static PyObject *t_CollectorManager_reduce(t_CollectorManager *self, PyObject *arg);
        static PyObject *t_CollectorManager_get__parameters_(t_CollectorManager *self, void *data);
        static PyGetSetDef t_CollectorManager__fields_[] = {
          DECLARE_GET_FIELD(t_CollectorManager, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CollectorManager__methods_[] = {
          DECLARE_METHOD(t_CollectorManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectorManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectorManager, of_, METH_VARARGS),
          DECLARE_METHOD(t_CollectorManager, newCollector, METH_NOARGS),
          DECLARE_METHOD(t_CollectorManager, reduce, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CollectorManager)[] = {
          { Py_tp_methods, t_CollectorManager__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_CollectorManager__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CollectorManager)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CollectorManager, t_CollectorManager, CollectorManager);
        PyObject *t_CollectorManager::wrap_Object(const CollectorManager& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_CollectorManager::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CollectorManager *self = (t_CollectorManager *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_CollectorManager::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_CollectorManager::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CollectorManager *self = (t_CollectorManager *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_CollectorManager::install(PyObject *module)
        {
          installType(&PY_TYPE(CollectorManager), &PY_TYPE_DEF(CollectorManager), module, "CollectorManager", 0);
        }

        void t_CollectorManager::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollectorManager), "class_", make_descriptor(CollectorManager::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollectorManager), "wrapfn_", make_descriptor(t_CollectorManager::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollectorManager), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollectorManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollectorManager::initializeClass, 1)))
            return NULL;
          return t_CollectorManager::wrap_Object(CollectorManager(((t_CollectorManager *) arg)->object.this$));
        }
        static PyObject *t_CollectorManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollectorManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CollectorManager_of_(t_CollectorManager *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_CollectorManager_newCollector(t_CollectorManager *self)
        {
          ::org::apache::lucene::search::Collector result((jobject) NULL);
          OBJ_CALL(result = self->object.newCollector());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::search::t_Collector::wrap_Object(result);
        }

        static PyObject *t_CollectorManager_reduce(t_CollectorManager *self, PyObject *arg)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = self->object.reduce(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "reduce", arg);
          return NULL;
        }
        static PyObject *t_CollectorManager_get__parameters_(t_CollectorManager *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
