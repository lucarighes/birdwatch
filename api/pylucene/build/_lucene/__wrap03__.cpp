#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TimeLimitingCollector$TimerThread.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TimeLimitingCollector$TimerThread::class$ = NULL;
        jmethodID *TimeLimitingCollector$TimerThread::mids$ = NULL;
        bool TimeLimitingCollector$TimerThread::live$ = false;
        jint TimeLimitingCollector$TimerThread::DEFAULT_RESOLUTION = (jint) 0;
        ::java::lang::String *TimeLimitingCollector$TimerThread::THREAD_NAME = NULL;

        jclass TimeLimitingCollector$TimerThread::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TimeLimitingCollector$TimerThread");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_302fe14a8fa069e1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Counter;)V");
            mids$[mid_init$_c5c6d2a1f0c3c8ad] = env->getMethodID(cls, "<init>", "(JLorg/apache/lucene/util/Counter;)V");
            mids$[mid_getMilliseconds_2e5ae9edcb9b072f] = env->getMethodID(cls, "getMilliseconds", "()J");
            mids$[mid_getResolution_2e5ae9edcb9b072f] = env->getMethodID(cls, "getResolution", "()J");
            mids$[mid_run_f2cc1bce94666404] = env->getMethodID(cls, "run", "()V");
            mids$[mid_setResolution_9c778c9bce6694df] = env->getMethodID(cls, "setResolution", "(J)V");
            mids$[mid_stopTimer_f2cc1bce94666404] = env->getMethodID(cls, "stopTimer", "()V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DEFAULT_RESOLUTION = env->getStaticIntField(cls, "DEFAULT_RESOLUTION");
            THREAD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "THREAD_NAME", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TimeLimitingCollector$TimerThread::TimeLimitingCollector$TimerThread(const ::org::apache::lucene::util::Counter & a0) : ::java::lang::Thread(env->newObject(initializeClass, &mids$, mid_init$_302fe14a8fa069e1, a0.this$)) {}

        TimeLimitingCollector$TimerThread::TimeLimitingCollector$TimerThread(jlong a0, const ::org::apache::lucene::util::Counter & a1) : ::java::lang::Thread(env->newObject(initializeClass, &mids$, mid_init$_c5c6d2a1f0c3c8ad, a0, a1.this$)) {}

        jlong TimeLimitingCollector$TimerThread::getMilliseconds() const
        {
          return env->callLongMethod(this$, mids$[mid_getMilliseconds_2e5ae9edcb9b072f]);
        }

        jlong TimeLimitingCollector$TimerThread::getResolution() const
        {
          return env->callLongMethod(this$, mids$[mid_getResolution_2e5ae9edcb9b072f]);
        }

        void TimeLimitingCollector$TimerThread::run() const
        {
          env->callVoidMethod(this$, mids$[mid_run_f2cc1bce94666404]);
        }

        void TimeLimitingCollector$TimerThread::setResolution(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setResolution_9c778c9bce6694df], a0);
        }

        void TimeLimitingCollector$TimerThread::stopTimer() const
        {
          env->callVoidMethod(this$, mids$[mid_stopTimer_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TimeLimitingCollector$TimerThread_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimeLimitingCollector$TimerThread_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TimeLimitingCollector$TimerThread_init_(t_TimeLimitingCollector$TimerThread *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TimeLimitingCollector$TimerThread_getMilliseconds(t_TimeLimitingCollector$TimerThread *self);
        static PyObject *t_TimeLimitingCollector$TimerThread_getResolution(t_TimeLimitingCollector$TimerThread *self);
        static PyObject *t_TimeLimitingCollector$TimerThread_run(t_TimeLimitingCollector$TimerThread *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector$TimerThread_setResolution(t_TimeLimitingCollector$TimerThread *self, PyObject *arg);
        static PyObject *t_TimeLimitingCollector$TimerThread_stopTimer(t_TimeLimitingCollector$TimerThread *self);
        static PyObject *t_TimeLimitingCollector$TimerThread_get__milliseconds(t_TimeLimitingCollector$TimerThread *self, void *data);
        static PyObject *t_TimeLimitingCollector$TimerThread_get__resolution(t_TimeLimitingCollector$TimerThread *self, void *data);
        static int t_TimeLimitingCollector$TimerThread_set__resolution(t_TimeLimitingCollector$TimerThread *self, PyObject *arg, void *data);
        static PyGetSetDef t_TimeLimitingCollector$TimerThread__fields_[] = {
          DECLARE_GET_FIELD(t_TimeLimitingCollector$TimerThread, milliseconds),
          DECLARE_GETSET_FIELD(t_TimeLimitingCollector$TimerThread, resolution),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TimeLimitingCollector$TimerThread__methods_[] = {
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, getMilliseconds, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, getResolution, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, run, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, setResolution, METH_O),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, stopTimer, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TimeLimitingCollector$TimerThread)[] = {
          { Py_tp_methods, t_TimeLimitingCollector$TimerThread__methods_ },
          { Py_tp_init, (void *) t_TimeLimitingCollector$TimerThread_init_ },
          { Py_tp_getset, t_TimeLimitingCollector$TimerThread__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TimeLimitingCollector$TimerThread)[] = {
          &PY_TYPE_DEF(::java::lang::Thread),
          NULL
        };

        DEFINE_TYPE(TimeLimitingCollector$TimerThread, t_TimeLimitingCollector$TimerThread, TimeLimitingCollector$TimerThread);

        void t_TimeLimitingCollector$TimerThread::install(PyObject *module)
        {
          installType(&PY_TYPE(TimeLimitingCollector$TimerThread), &PY_TYPE_DEF(TimeLimitingCollector$TimerThread), module, "TimeLimitingCollector$TimerThread", 0);
        }

        void t_TimeLimitingCollector$TimerThread::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TimeLimitingCollector$TimerThread), "class_", make_descriptor(TimeLimitingCollector$TimerThread::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TimeLimitingCollector$TimerThread), "wrapfn_", make_descriptor(t_TimeLimitingCollector$TimerThread::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TimeLimitingCollector$TimerThread), "boxfn_", make_descriptor(boxObject));
          env->getClass(TimeLimitingCollector$TimerThread::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(TimeLimitingCollector$TimerThread), "DEFAULT_RESOLUTION", make_descriptor(TimeLimitingCollector$TimerThread::DEFAULT_RESOLUTION));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TimeLimitingCollector$TimerThread), "THREAD_NAME", make_descriptor(j2p(*TimeLimitingCollector$TimerThread::THREAD_NAME)));
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TimeLimitingCollector$TimerThread::initializeClass, 1)))
            return NULL;
          return t_TimeLimitingCollector$TimerThread::wrap_Object(TimeLimitingCollector$TimerThread(((t_TimeLimitingCollector$TimerThread *) arg)->object.this$));
        }
        static PyObject *t_TimeLimitingCollector$TimerThread_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TimeLimitingCollector$TimerThread::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TimeLimitingCollector$TimerThread_init_(t_TimeLimitingCollector$TimerThread *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::Counter a0((jobject) NULL);
              TimeLimitingCollector$TimerThread object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::Counter::initializeClass, &a0))
              {
                INT_CALL(object = TimeLimitingCollector$TimerThread(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jlong a0;
              ::org::apache::lucene::util::Counter a1((jobject) NULL);
              TimeLimitingCollector$TimerThread object((jobject) NULL);

              if (!parseArgs(args, "Jk", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TimeLimitingCollector$TimerThread(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_getMilliseconds(t_TimeLimitingCollector$TimerThread *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getMilliseconds());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_getResolution(t_TimeLimitingCollector$TimerThread *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getResolution());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_run(t_TimeLimitingCollector$TimerThread *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.run());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(TimeLimitingCollector$TimerThread), (PyObject *) self, "run", args, 2);
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_setResolution(t_TimeLimitingCollector$TimerThread *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.setResolution(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setResolution", arg);
          return NULL;
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_stopTimer(t_TimeLimitingCollector$TimerThread *self)
        {
          OBJ_CALL(self->object.stopTimer());
          Py_RETURN_NONE;
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_get__milliseconds(t_TimeLimitingCollector$TimerThread *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getMilliseconds());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_get__resolution(t_TimeLimitingCollector$TimerThread *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getResolution());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_TimeLimitingCollector$TimerThread_set__resolution(t_TimeLimitingCollector$TimerThread *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setResolution(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "resolution", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/LongRange.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *LongRange::class$ = NULL;
          jmethodID *LongRange::mids$ = NULL;
          jfieldID *LongRange::fids$ = NULL;
          bool LongRange::live$ = false;

          jclass LongRange::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/LongRange");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0248b6e53dc27ea3] = env->getMethodID(cls, "<init>", "(JJ)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_max] = env->getFieldID(cls, "max", "J");
              fids$[fid_min] = env->getFieldID(cls, "min", "J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LongRange::LongRange(jlong a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0248b6e53dc27ea3, a0, a1)) {}

          jboolean LongRange::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint LongRange::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::String LongRange::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          jlong LongRange::_get_max() const
          {
            return env->getLongField(this$, fids$[fid_max]);
          }

          void LongRange::_set_max(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_max], a0);
          }

          jlong LongRange::_get_min() const
          {
            return env->getLongField(this$, fids$[fid_min]);
          }

          void LongRange::_set_min(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_min], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_LongRange_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongRange_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LongRange_init_(t_LongRange *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LongRange_equals(t_LongRange *self, PyObject *args);
          static PyObject *t_LongRange_hashCode(t_LongRange *self, PyObject *args);
          static PyObject *t_LongRange_toString(t_LongRange *self, PyObject *args);
          static PyObject *t_LongRange_get__max(t_LongRange *self, void *data);
          static int t_LongRange_set__max(t_LongRange *self, PyObject *arg, void *data);
          static PyObject *t_LongRange_get__min(t_LongRange *self, void *data);
          static int t_LongRange_set__min(t_LongRange *self, PyObject *arg, void *data);

          static PyGetSetDef t_LongRange__fields_[] = {
            DECLARE_GETSET_FIELD(t_LongRange, max),
            DECLARE_GETSET_FIELD(t_LongRange, min),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LongRange__methods_[] = {
            DECLARE_METHOD(t_LongRange, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRange, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRange, equals, METH_VARARGS),
            DECLARE_METHOD(t_LongRange, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_LongRange, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LongRange)[] = {
            { Py_tp_methods, t_LongRange__methods_ },
            { Py_tp_init, (void *) t_LongRange_init_ },
            { Py_tp_getset, t_LongRange__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LongRange)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(LongRange, t_LongRange, LongRange);

          void t_LongRange::install(PyObject *module)
          {
            installType(&PY_TYPE(LongRange), &PY_TYPE_DEF(LongRange), module, "LongRange", 0);
          }

          void t_LongRange::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongRange), "class_", make_descriptor(LongRange::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongRange), "wrapfn_", make_descriptor(t_LongRange::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongRange), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LongRange_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LongRange::initializeClass, 1)))
              return NULL;
            return t_LongRange::wrap_Object(LongRange(((t_LongRange *) arg)->object.this$));
          }
          static PyObject *t_LongRange_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LongRange::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LongRange_init_(t_LongRange *self, PyObject *args, PyObject *kwds)
          {
            jlong a0;
            jlong a1;
            LongRange object((jobject) NULL);

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              INT_CALL(object = LongRange(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LongRange_equals(t_LongRange *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(LongRange), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_LongRange_hashCode(t_LongRange *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(LongRange), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_LongRange_toString(t_LongRange *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(LongRange), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_LongRange_get__max(t_LongRange *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_max());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_LongRange_set__max(t_LongRange *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_max(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "max", arg);
            return -1;
          }

          static PyObject *t_LongRange_get__min(t_LongRange *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_min());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_LongRange_set__min(t_LongRange *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_min(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "min", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ScaleFloatFunction.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ScaleFloatFunction::class$ = NULL;
            jmethodID *ScaleFloatFunction::mids$ = NULL;
            bool ScaleFloatFunction::live$ = false;

            jclass ScaleFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ScaleFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_581bf9010c1196d6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FF)V");
                mids$[mid_createWeight_69d322032c5ae159] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ScaleFloatFunction::ScaleFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_581bf9010c1196d6, a0.this$, a1, a2)) {}

            void ScaleFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_69d322032c5ae159], a0.this$, a1.this$);
            }

            ::java::lang::String ScaleFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean ScaleFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ScaleFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint ScaleFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ScaleFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ScaleFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ScaleFloatFunction_init_(t_ScaleFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ScaleFloatFunction_createWeight(t_ScaleFloatFunction *self, PyObject *args);
            static PyObject *t_ScaleFloatFunction_description(t_ScaleFloatFunction *self, PyObject *args);
            static PyObject *t_ScaleFloatFunction_equals(t_ScaleFloatFunction *self, PyObject *args);
            static PyObject *t_ScaleFloatFunction_getValues(t_ScaleFloatFunction *self, PyObject *args);
            static PyObject *t_ScaleFloatFunction_hashCode(t_ScaleFloatFunction *self, PyObject *args);

            static PyMethodDef t_ScaleFloatFunction__methods_[] = {
              DECLARE_METHOD(t_ScaleFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ScaleFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ScaleFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_ScaleFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_ScaleFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_ScaleFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ScaleFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(ScaleFloatFunction)[] = {
              { Py_tp_methods, t_ScaleFloatFunction__methods_ },
              { Py_tp_init, (void *) t_ScaleFloatFunction_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(ScaleFloatFunction)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::ValueSource),
              NULL
            };

            DEFINE_TYPE(ScaleFloatFunction, t_ScaleFloatFunction, ScaleFloatFunction);

            void t_ScaleFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(ScaleFloatFunction), &PY_TYPE_DEF(ScaleFloatFunction), module, "ScaleFloatFunction", 0);
            }

            void t_ScaleFloatFunction::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(ScaleFloatFunction), "class_", make_descriptor(ScaleFloatFunction::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ScaleFloatFunction), "wrapfn_", make_descriptor(t_ScaleFloatFunction::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ScaleFloatFunction), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ScaleFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ScaleFloatFunction::initializeClass, 1)))
                return NULL;
              return t_ScaleFloatFunction::wrap_Object(ScaleFloatFunction(((t_ScaleFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_ScaleFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ScaleFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ScaleFloatFunction_init_(t_ScaleFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              jfloat a1;
              jfloat a2;
              ScaleFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kFF", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = ScaleFloatFunction(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ScaleFloatFunction_createWeight(t_ScaleFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(ScaleFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_ScaleFloatFunction_description(t_ScaleFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(ScaleFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ScaleFloatFunction_equals(t_ScaleFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(ScaleFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ScaleFloatFunction_getValues(t_ScaleFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(ScaleFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ScaleFloatFunction_hashCode(t_ScaleFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(ScaleFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonLockFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonLockFactory::class$ = NULL;
        jmethodID *PythonLockFactory::mids$ = NULL;
        bool PythonLockFactory::live$ = false;

        jclass PythonLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_obtainLock_6aee55f49034dd72] = env->getMethodID(cls, "obtainLock", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonLockFactory::PythonLockFactory() : ::org::apache::lucene::store::LockFactory(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void PythonLockFactory::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
        }

        jlong PythonLockFactory::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
        }

        void PythonLockFactory::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonLockFactory_init_(t_PythonLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonLockFactory_finalize(t_PythonLockFactory *self);
        static PyObject *t_PythonLockFactory_pythonExtension(t_PythonLockFactory *self, PyObject *args);
        static jobject JNICALL t_PythonLockFactory_obtainLock0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
        static void JNICALL t_PythonLockFactory_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonLockFactory_get__self(t_PythonLockFactory *self, void *data);
        static PyGetSetDef t_PythonLockFactory__fields_[] = {
          DECLARE_GET_FIELD(t_PythonLockFactory, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonLockFactory__methods_[] = {
          DECLARE_METHOD(t_PythonLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLockFactory, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonLockFactory, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PythonLockFactory)[] = {
          { Py_tp_methods, t_PythonLockFactory__methods_ },
          { Py_tp_init, (void *) t_PythonLockFactory_init_ },
          { Py_tp_getset, t_PythonLockFactory__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PythonLockFactory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::LockFactory),
          NULL
        };

        DEFINE_TYPE(PythonLockFactory, t_PythonLockFactory, PythonLockFactory);

        void t_PythonLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonLockFactory), &PY_TYPE_DEF(PythonLockFactory), module, "PythonLockFactory", 1);
        }

        void t_PythonLockFactory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonLockFactory), "class_", make_descriptor(PythonLockFactory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonLockFactory), "wrapfn_", make_descriptor(t_PythonLockFactory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonLockFactory), "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonLockFactory::initializeClass);
          JNINativeMethod methods[] = {
            { "obtainLock", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;)Lorg/apache/lucene/store/Lock;", (void *) t_PythonLockFactory_obtainLock0 },
            { "pythonDecRef", "()V", (void *) t_PythonLockFactory_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonLockFactory::initializeClass, 1)))
            return NULL;
          return t_PythonLockFactory::wrap_Object(PythonLockFactory(((t_PythonLockFactory *) arg)->object.this$));
        }
        static PyObject *t_PythonLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonLockFactory_init_(t_PythonLockFactory *self, PyObject *args, PyObject *kwds)
        {
          PythonLockFactory object((jobject) NULL);

          INT_CALL(object = PythonLockFactory());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonLockFactory_finalize(t_PythonLockFactory *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonLockFactory_pythonExtension(t_PythonLockFactory *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jobject JNICALL t_PythonLockFactory_obtainLock0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLockFactory::mids$[PythonLockFactory::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::Lock value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::store::t_Directory::wrap_Object(::org::apache::lucene::store::Directory(a0));
          PyObject *o1 = env->fromJString((jstring) a1, 0);
          PyObject *result = PyObject_CallMethod(obj, "obtainLock", "OO", o0, o1);
          Py_DECREF(o0);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::Lock::initializeClass, &value))
          {
            throwTypeError("obtainLock", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonLockFactory_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLockFactory::mids$[PythonLockFactory::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonLockFactory::mids$[PythonLockFactory::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonLockFactory_get__self(t_PythonLockFactory *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DoublePoint.h"
#include "java/util/Collection.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "java/lang/Double.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DoublePoint::class$ = NULL;
        jmethodID *DoublePoint::mids$ = NULL;
        bool DoublePoint::live$ = false;

        jclass DoublePoint::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DoublePoint");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_688af8c9c3ec673b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[D)V");
            mids$[mid_decodeDimension_bc974b36f386a0c3] = env->getStaticMethodID(cls, "decodeDimension", "([BI)D");
            mids$[mid_encodeDimension_b42706c7ed84bf45] = env->getStaticMethodID(cls, "encodeDimension", "(D[BI)V");
            mids$[mid_newExactQuery_db56a8e54f4b71bd] = env->getStaticMethodID(cls, "newExactQuery", "(Ljava/lang/String;D)Lorg/apache/lucene/search/Query;");
            mids$[mid_newRangeQuery_ac4cb7e9a584976e] = env->getStaticMethodID(cls, "newRangeQuery", "(Ljava/lang/String;[D[D)Lorg/apache/lucene/search/Query;");
            mids$[mid_newRangeQuery_0fa5d711d525fbdd] = env->getStaticMethodID(cls, "newRangeQuery", "(Ljava/lang/String;DD)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSetQuery_c2ae4346604006c8] = env->getStaticMethodID(cls, "newSetQuery", "(Ljava/lang/String;[D)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSetQuery_263cb7d6a0b161ae] = env->getStaticMethodID(cls, "newSetQuery", "(Ljava/lang/String;Ljava/util/Collection;)Lorg/apache/lucene/search/Query;");
            mids$[mid_nextDown_d089f34703408a66] = env->getStaticMethodID(cls, "nextDown", "(D)D");
            mids$[mid_nextUp_d089f34703408a66] = env->getStaticMethodID(cls, "nextUp", "(D)D");
            mids$[mid_numericValue_f5813404cc5e3a1e] = env->getMethodID(cls, "numericValue", "()Ljava/lang/Number;");
            mids$[mid_pack_105476f259b8c172] = env->getStaticMethodID(cls, "pack", "([D)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_setBytesValue_0bdfd2603b7490a8] = env->getMethodID(cls, "setBytesValue", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setDoubleValue_3c435f10a3b1e038] = env->getMethodID(cls, "setDoubleValue", "(D)V");
            mids$[mid_setDoubleValues_d5d56d9facba9bbe] = env->getMethodID(cls, "setDoubleValues", "([D)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoublePoint::DoublePoint(const ::java::lang::String & a0, const JArray< jdouble > & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_688af8c9c3ec673b, a0.this$, a1.this$)) {}

        jdouble DoublePoint::decodeDimension(const JArray< jbyte > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_decodeDimension_bc974b36f386a0c3], a0.this$, a1);
        }

        void DoublePoint::encodeDimension(jdouble a0, const JArray< jbyte > & a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_encodeDimension_b42706c7ed84bf45], a0, a1.this$, a2);
        }

        ::org::apache::lucene::search::Query DoublePoint::newExactQuery(const ::java::lang::String & a0, jdouble a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newExactQuery_db56a8e54f4b71bd], a0.this$, a1));
        }

        ::org::apache::lucene::search::Query DoublePoint::newRangeQuery(const ::java::lang::String & a0, const JArray< jdouble > & a1, const JArray< jdouble > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newRangeQuery_ac4cb7e9a584976e], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query DoublePoint::newRangeQuery(const ::java::lang::String & a0, jdouble a1, jdouble a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newRangeQuery_0fa5d711d525fbdd], a0.this$, a1, a2));
        }

        ::org::apache::lucene::search::Query DoublePoint::newSetQuery(const ::java::lang::String & a0, const JArray< jdouble > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSetQuery_c2ae4346604006c8], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query DoublePoint::newSetQuery(const ::java::lang::String & a0, const ::java::util::Collection & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSetQuery_263cb7d6a0b161ae], a0.this$, a1.this$));
        }

        jdouble DoublePoint::nextDown(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_nextDown_d089f34703408a66], a0);
        }

        jdouble DoublePoint::nextUp(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_nextUp_d089f34703408a66], a0);
        }

        ::java::lang::Number DoublePoint::numericValue() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_numericValue_f5813404cc5e3a1e]));
        }

        ::org::apache::lucene::util::BytesRef DoublePoint::pack(const JArray< jdouble > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_pack_105476f259b8c172], a0.this$));
        }

        void DoublePoint::setBytesValue(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesValue_0bdfd2603b7490a8], a0.this$);
        }

        void DoublePoint::setDoubleValue(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDoubleValue_3c435f10a3b1e038], a0);
        }

        void DoublePoint::setDoubleValues(const JArray< jdouble > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDoubleValues_d5d56d9facba9bbe], a0.this$);
        }

        ::java::lang::String DoublePoint::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DoublePoint_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoublePoint_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DoublePoint_init_(t_DoublePoint *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DoublePoint_decodeDimension(PyTypeObject *type, PyObject *args);
        static PyObject *t_DoublePoint_encodeDimension(PyTypeObject *type, PyObject *args);
        static PyObject *t_DoublePoint_newExactQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_DoublePoint_newRangeQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_DoublePoint_newSetQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_DoublePoint_nextDown(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoublePoint_nextUp(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoublePoint_numericValue(t_DoublePoint *self, PyObject *args);
        static PyObject *t_DoublePoint_pack(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoublePoint_setBytesValue(t_DoublePoint *self, PyObject *args);
        static PyObject *t_DoublePoint_setDoubleValue(t_DoublePoint *self, PyObject *args);
        static PyObject *t_DoublePoint_setDoubleValues(t_DoublePoint *self, PyObject *arg);
        static PyObject *t_DoublePoint_toString(t_DoublePoint *self, PyObject *args);
        static int t_DoublePoint_set__bytesValue(t_DoublePoint *self, PyObject *arg, void *data);
        static int t_DoublePoint_set__doubleValue(t_DoublePoint *self, PyObject *arg, void *data);
        static int t_DoublePoint_set__doubleValues(t_DoublePoint *self, PyObject *arg, void *data);
        static PyGetSetDef t_DoublePoint__fields_[] = {
          DECLARE_SET_FIELD(t_DoublePoint, bytesValue),
          DECLARE_SET_FIELD(t_DoublePoint, doubleValue),
          DECLARE_SET_FIELD(t_DoublePoint, doubleValues),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DoublePoint__methods_[] = {
          DECLARE_METHOD(t_DoublePoint, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoublePoint, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoublePoint, decodeDimension, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DoublePoint, encodeDimension, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DoublePoint, newExactQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DoublePoint, newRangeQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DoublePoint, newSetQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DoublePoint, nextDown, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoublePoint, nextUp, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoublePoint, numericValue, METH_VARARGS),
          DECLARE_METHOD(t_DoublePoint, pack, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoublePoint, setBytesValue, METH_VARARGS),
          DECLARE_METHOD(t_DoublePoint, setDoubleValue, METH_VARARGS),
          DECLARE_METHOD(t_DoublePoint, setDoubleValues, METH_O),
          DECLARE_METHOD(t_DoublePoint, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DoublePoint)[] = {
          { Py_tp_methods, t_DoublePoint__methods_ },
          { Py_tp_init, (void *) t_DoublePoint_init_ },
          { Py_tp_getset, t_DoublePoint__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DoublePoint)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(DoublePoint, t_DoublePoint, DoublePoint);

        void t_DoublePoint::install(PyObject *module)
        {
          installType(&PY_TYPE(DoublePoint), &PY_TYPE_DEF(DoublePoint), module, "DoublePoint", 0);
        }

        void t_DoublePoint::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoublePoint), "class_", make_descriptor(DoublePoint::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoublePoint), "wrapfn_", make_descriptor(t_DoublePoint::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoublePoint), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DoublePoint_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoublePoint::initializeClass, 1)))
            return NULL;
          return t_DoublePoint::wrap_Object(DoublePoint(((t_DoublePoint *) arg)->object.this$));
        }
        static PyObject *t_DoublePoint_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoublePoint::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DoublePoint_init_(t_DoublePoint *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jdouble > a1((jobject) NULL);
          DoublePoint object((jobject) NULL);

          if (!parseArgs(args, "s[D", &a0, &a1))
          {
            INT_CALL(object = DoublePoint(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DoublePoint_decodeDimension(PyTypeObject *type, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jdouble result;

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DoublePoint::decodeDimension(a0, a1));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "decodeDimension", args);
          return NULL;
        }

        static PyObject *t_DoublePoint_encodeDimension(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          JArray< jbyte > a1((jobject) NULL);
          jint a2;

          if (!parseArgs(args, "D[BI", &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::document::DoublePoint::encodeDimension(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "encodeDimension", args);
          return NULL;
        }

        static PyObject *t_DoublePoint_newExactQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jdouble a1;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sD", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DoublePoint::newExactQuery(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newExactQuery", args);
          return NULL;
        }

        static PyObject *t_DoublePoint_newRangeQuery(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jdouble > a1((jobject) NULL);
              JArray< jdouble > a2((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "s[D[D", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::DoublePoint::newRangeQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jdouble a1;
              jdouble a2;
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sDD", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::DoublePoint::newRangeQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newRangeQuery", args);
          return NULL;
        }

        static PyObject *t_DoublePoint_newSetQuery(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jdouble > a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "s[D", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::DoublePoint::newSetQuery(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::Collection a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sK", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::DoublePoint::newSetQuery(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newSetQuery", args);
          return NULL;
        }

        static PyObject *t_DoublePoint_nextDown(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DoublePoint::nextDown(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "nextDown", arg);
          return NULL;
        }

        static PyObject *t_DoublePoint_nextUp(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DoublePoint::nextUp(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "nextUp", arg);
          return NULL;
        }

        static PyObject *t_DoublePoint_numericValue(t_DoublePoint *self, PyObject *args)
        {
          ::java::lang::Number result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numericValue());
            return ::java::lang::t_Number::wrap_Object(result);
          }

          return callSuper(PY_TYPE(DoublePoint), (PyObject *) self, "numericValue", args, 2);
        }

        static PyObject *t_DoublePoint_pack(PyTypeObject *type, PyObject *arg)
        {
          JArray< jdouble > a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "[D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DoublePoint::pack(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "pack", arg);
          return NULL;
        }

        static PyObject *t_DoublePoint_setBytesValue(t_DoublePoint *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setBytesValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(DoublePoint), (PyObject *) self, "setBytesValue", args, 2);
        }

        static PyObject *t_DoublePoint_setDoubleValue(t_DoublePoint *self, PyObject *args)
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.setDoubleValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(DoublePoint), (PyObject *) self, "setDoubleValue", args, 2);
        }

        static PyObject *t_DoublePoint_setDoubleValues(t_DoublePoint *self, PyObject *arg)
        {
          JArray< jdouble > a0((jobject) NULL);

          if (!parseArg(arg, "[D", &a0))
          {
            OBJ_CALL(self->object.setDoubleValues(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDoubleValues", arg);
          return NULL;
        }

        static PyObject *t_DoublePoint_toString(t_DoublePoint *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(DoublePoint), (PyObject *) self, "toString", args, 2);
        }

        static int t_DoublePoint_set__bytesValue(t_DoublePoint *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setBytesValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bytesValue", arg);
          return -1;
        }

        static int t_DoublePoint_set__doubleValue(t_DoublePoint *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setDoubleValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "doubleValue", arg);
          return -1;
        }

        static int t_DoublePoint_set__doubleValues(t_DoublePoint *self, PyObject *arg, void *data)
        {
          {
            JArray< jdouble > value((jobject) NULL);
            if (!parseArg(arg, "[D", &value))
            {
              INT_CALL(self->object.setDoubleValues(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "doubleValues", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/IndexDictionary.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/uniformsplit/IndexDictionary$Browser.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockEncoder.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *IndexDictionary::class$ = NULL;
          jmethodID *IndexDictionary::mids$ = NULL;
          bool IndexDictionary::live$ = false;

          jclass IndexDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/IndexDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_browser_f36d038b8a827a9e] = env->getMethodID(cls, "browser", "()Lorg/apache/lucene/codecs/uniformsplit/IndexDictionary$Browser;");
              mids$[mid_write_3925b6cced37a499] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/codecs/uniformsplit/BlockEncoder;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::codecs::uniformsplit::IndexDictionary$Browser IndexDictionary::browser() const
          {
            return ::org::apache::lucene::codecs::uniformsplit::IndexDictionary$Browser(env->callObjectMethod(this$, mids$[mid_browser_f36d038b8a827a9e]));
          }

          void IndexDictionary::write(const ::org::apache::lucene::store::DataOutput & a0, const ::org::apache::lucene::codecs::uniformsplit::BlockEncoder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_3925b6cced37a499], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/codecs/uniformsplit/IndexDictionary$BrowserSupplier.h"
#include "org/apache/lucene/codecs/uniformsplit/IndexDictionary$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_IndexDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndexDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndexDictionary_browser(t_IndexDictionary *self);
          static PyObject *t_IndexDictionary_write(t_IndexDictionary *self, PyObject *args);

          static PyMethodDef t_IndexDictionary__methods_[] = {
            DECLARE_METHOD(t_IndexDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndexDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndexDictionary, browser, METH_NOARGS),
            DECLARE_METHOD(t_IndexDictionary, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IndexDictionary)[] = {
            { Py_tp_methods, t_IndexDictionary__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IndexDictionary)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::Accountable),
            NULL
          };

          DEFINE_TYPE(IndexDictionary, t_IndexDictionary, IndexDictionary);

          void t_IndexDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(IndexDictionary), &PY_TYPE_DEF(IndexDictionary), module, "IndexDictionary", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexDictionary), "BrowserSupplier", make_descriptor(&PY_TYPE_DEF(IndexDictionary$BrowserSupplier)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexDictionary), "Browser", make_descriptor(&PY_TYPE_DEF(IndexDictionary$Browser)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexDictionary), "Builder", make_descriptor(&PY_TYPE_DEF(IndexDictionary$Builder)));
          }

          void t_IndexDictionary::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexDictionary), "class_", make_descriptor(IndexDictionary::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexDictionary), "wrapfn_", make_descriptor(t_IndexDictionary::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexDictionary), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndexDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndexDictionary::initializeClass, 1)))
              return NULL;
            return t_IndexDictionary::wrap_Object(IndexDictionary(((t_IndexDictionary *) arg)->object.this$));
          }
          static PyObject *t_IndexDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndexDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IndexDictionary_browser(t_IndexDictionary *self)
          {
            ::org::apache::lucene::codecs::uniformsplit::IndexDictionary$Browser result((jobject) NULL);
            OBJ_CALL(result = self->object.browser());
            return ::org::apache::lucene::codecs::uniformsplit::t_IndexDictionary$Browser::wrap_Object(result);
          }

          static PyObject *t_IndexDictionary_write(t_IndexDictionary *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            ::org::apache::lucene::codecs::uniformsplit::BlockEncoder a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockEncoder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "write", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/FuzzyLikeThisQueryBuilder.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *FuzzyLikeThisQueryBuilder::class$ = NULL;
            jmethodID *FuzzyLikeThisQueryBuilder::mids$ = NULL;
            bool FuzzyLikeThisQueryBuilder::live$ = false;

            jclass FuzzyLikeThisQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/FuzzyLikeThisQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_651b708fb3f85e6e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FuzzyLikeThisQueryBuilder::FuzzyLikeThisQueryBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_651b708fb3f85e6e, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_FuzzyLikeThisQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FuzzyLikeThisQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FuzzyLikeThisQueryBuilder_init_(t_FuzzyLikeThisQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_FuzzyLikeThisQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_FuzzyLikeThisQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FuzzyLikeThisQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(FuzzyLikeThisQueryBuilder)[] = {
              { Py_tp_methods, t_FuzzyLikeThisQueryBuilder__methods_ },
              { Py_tp_init, (void *) t_FuzzyLikeThisQueryBuilder_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(FuzzyLikeThisQueryBuilder)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(FuzzyLikeThisQueryBuilder, t_FuzzyLikeThisQueryBuilder, FuzzyLikeThisQueryBuilder);

            void t_FuzzyLikeThisQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(FuzzyLikeThisQueryBuilder), &PY_TYPE_DEF(FuzzyLikeThisQueryBuilder), module, "FuzzyLikeThisQueryBuilder", 0);
            }

            void t_FuzzyLikeThisQueryBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyLikeThisQueryBuilder), "class_", make_descriptor(FuzzyLikeThisQueryBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyLikeThisQueryBuilder), "wrapfn_", make_descriptor(t_FuzzyLikeThisQueryBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyLikeThisQueryBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FuzzyLikeThisQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FuzzyLikeThisQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_FuzzyLikeThisQueryBuilder::wrap_Object(FuzzyLikeThisQueryBuilder(((t_FuzzyLikeThisQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_FuzzyLikeThisQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FuzzyLikeThisQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FuzzyLikeThisQueryBuilder_init_(t_FuzzyLikeThisQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              FuzzyLikeThisQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                INT_CALL(object = FuzzyLikeThisQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/PrefixCodedTerms$Builder.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/PrefixCodedTerms.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *PrefixCodedTerms$Builder::class$ = NULL;
        jmethodID *PrefixCodedTerms$Builder::mids$ = NULL;
        bool PrefixCodedTerms$Builder::live$ = false;

        jclass PrefixCodedTerms$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/PrefixCodedTerms$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_32784f9c0ee449e6] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_add_63a59e248b245c2c] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_finish_3329e7cdc497b63a] = env->getMethodID(cls, "finish", "()Lorg/apache/lucene/index/PrefixCodedTerms;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrefixCodedTerms$Builder::PrefixCodedTerms$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void PrefixCodedTerms$Builder::add(const ::org::apache::lucene::index::Term & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_32784f9c0ee449e6], a0.this$);
        }

        void PrefixCodedTerms$Builder::add(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_63a59e248b245c2c], a0.this$, a1.this$);
        }

        ::org::apache::lucene::index::PrefixCodedTerms PrefixCodedTerms$Builder::finish() const
        {
          return ::org::apache::lucene::index::PrefixCodedTerms(env->callObjectMethod(this$, mids$[mid_finish_3329e7cdc497b63a]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_PrefixCodedTerms$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixCodedTerms$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PrefixCodedTerms$Builder_init_(t_PrefixCodedTerms$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PrefixCodedTerms$Builder_add(t_PrefixCodedTerms$Builder *self, PyObject *args);
        static PyObject *t_PrefixCodedTerms$Builder_finish(t_PrefixCodedTerms$Builder *self);

        static PyMethodDef t_PrefixCodedTerms$Builder__methods_[] = {
          DECLARE_METHOD(t_PrefixCodedTerms$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixCodedTerms$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixCodedTerms$Builder, add, METH_VARARGS),
          DECLARE_METHOD(t_PrefixCodedTerms$Builder, finish, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PrefixCodedTerms$Builder)[] = {
          { Py_tp_methods, t_PrefixCodedTerms$Builder__methods_ },
          { Py_tp_init, (void *) t_PrefixCodedTerms$Builder_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PrefixCodedTerms$Builder)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PrefixCodedTerms$Builder, t_PrefixCodedTerms$Builder, PrefixCodedTerms$Builder);

        void t_PrefixCodedTerms$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(PrefixCodedTerms$Builder), &PY_TYPE_DEF(PrefixCodedTerms$Builder), module, "PrefixCodedTerms$Builder", 0);
        }

        void t_PrefixCodedTerms$Builder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixCodedTerms$Builder), "class_", make_descriptor(PrefixCodedTerms$Builder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixCodedTerms$Builder), "wrapfn_", make_descriptor(t_PrefixCodedTerms$Builder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixCodedTerms$Builder), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrefixCodedTerms$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrefixCodedTerms$Builder::initializeClass, 1)))
            return NULL;
          return t_PrefixCodedTerms$Builder::wrap_Object(PrefixCodedTerms$Builder(((t_PrefixCodedTerms$Builder *) arg)->object.this$));
        }
        static PyObject *t_PrefixCodedTerms$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrefixCodedTerms$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PrefixCodedTerms$Builder_init_(t_PrefixCodedTerms$Builder *self, PyObject *args, PyObject *kwds)
        {
          PrefixCodedTerms$Builder object((jobject) NULL);

          INT_CALL(object = PrefixCodedTerms$Builder());
          self->object = object;

          return 0;
        }

        static PyObject *t_PrefixCodedTerms$Builder_add(t_PrefixCodedTerms$Builder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_PrefixCodedTerms$Builder_finish(t_PrefixCodedTerms$Builder *self)
        {
          ::org::apache::lucene::index::PrefixCodedTerms result((jobject) NULL);
          OBJ_CALL(result = self->object.finish());
          return ::org::apache::lucene::index::t_PrefixCodedTerms::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/NullFragmenter.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *NullFragmenter::class$ = NULL;
          jmethodID *NullFragmenter::mids$ = NULL;
          bool NullFragmenter::live$ = false;

          jclass NullFragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/NullFragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_isNewFragment_8454bd5aa23fd11e] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_start_c5ab6d211d8d31bc] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NullFragmenter::NullFragmenter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jboolean NullFragmenter::isNewFragment() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNewFragment_8454bd5aa23fd11e]);
          }

          void NullFragmenter::start(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_start_c5ab6d211d8d31bc], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_NullFragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NullFragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NullFragmenter_init_(t_NullFragmenter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NullFragmenter_isNewFragment(t_NullFragmenter *self);
          static PyObject *t_NullFragmenter_start(t_NullFragmenter *self, PyObject *args);
          static PyObject *t_NullFragmenter_get__newFragment(t_NullFragmenter *self, void *data);
          static PyGetSetDef t_NullFragmenter__fields_[] = {
            DECLARE_GET_FIELD(t_NullFragmenter, newFragment),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NullFragmenter__methods_[] = {
            DECLARE_METHOD(t_NullFragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NullFragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NullFragmenter, isNewFragment, METH_NOARGS),
            DECLARE_METHOD(t_NullFragmenter, start, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NullFragmenter)[] = {
            { Py_tp_methods, t_NullFragmenter__methods_ },
            { Py_tp_init, (void *) t_NullFragmenter_init_ },
            { Py_tp_getset, t_NullFragmenter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NullFragmenter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(NullFragmenter, t_NullFragmenter, NullFragmenter);

          void t_NullFragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(NullFragmenter), &PY_TYPE_DEF(NullFragmenter), module, "NullFragmenter", 0);
          }

          void t_NullFragmenter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NullFragmenter), "class_", make_descriptor(NullFragmenter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NullFragmenter), "wrapfn_", make_descriptor(t_NullFragmenter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NullFragmenter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NullFragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NullFragmenter::initializeClass, 1)))
              return NULL;
            return t_NullFragmenter::wrap_Object(NullFragmenter(((t_NullFragmenter *) arg)->object.this$));
          }
          static PyObject *t_NullFragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NullFragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NullFragmenter_init_(t_NullFragmenter *self, PyObject *args, PyObject *kwds)
          {
            NullFragmenter object((jobject) NULL);

            INT_CALL(object = NullFragmenter());
            self->object = object;

            return 0;
          }

          static PyObject *t_NullFragmenter_isNewFragment(t_NullFragmenter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isNewFragment());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_NullFragmenter_start(t_NullFragmenter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.start(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "start", args);
            return NULL;
          }

          static PyObject *t_NullFragmenter_get__newFragment(t_NullFragmenter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isNewFragment());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/UpToTwoPositiveIntOutputs$TwoLongs.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *UpToTwoPositiveIntOutputs$TwoLongs::class$ = NULL;
          jmethodID *UpToTwoPositiveIntOutputs$TwoLongs::mids$ = NULL;
          jfieldID *UpToTwoPositiveIntOutputs$TwoLongs::fids$ = NULL;
          bool UpToTwoPositiveIntOutputs$TwoLongs::live$ = false;

          jclass UpToTwoPositiveIntOutputs$TwoLongs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/UpToTwoPositiveIntOutputs$TwoLongs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0248b6e53dc27ea3] = env->getMethodID(cls, "<init>", "(JJ)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_first] = env->getFieldID(cls, "first", "J");
              fids$[fid_second] = env->getFieldID(cls, "second", "J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UpToTwoPositiveIntOutputs$TwoLongs::UpToTwoPositiveIntOutputs$TwoLongs(jlong a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0248b6e53dc27ea3, a0, a1)) {}

          jboolean UpToTwoPositiveIntOutputs$TwoLongs::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint UpToTwoPositiveIntOutputs$TwoLongs::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::String UpToTwoPositiveIntOutputs$TwoLongs::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          jlong UpToTwoPositiveIntOutputs$TwoLongs::_get_first() const
          {
            return env->getLongField(this$, fids$[fid_first]);
          }

          jlong UpToTwoPositiveIntOutputs$TwoLongs::_get_second() const
          {
            return env->getLongField(this$, fids$[fid_second]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_UpToTwoPositiveIntOutputs$TwoLongs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UpToTwoPositiveIntOutputs$TwoLongs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UpToTwoPositiveIntOutputs$TwoLongs_of_(t_UpToTwoPositiveIntOutputs$TwoLongs *self, PyObject *args);
          static int t_UpToTwoPositiveIntOutputs$TwoLongs_init_(t_UpToTwoPositiveIntOutputs$TwoLongs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UpToTwoPositiveIntOutputs$TwoLongs_equals(t_UpToTwoPositiveIntOutputs$TwoLongs *self, PyObject *args);
          static PyObject *t_UpToTwoPositiveIntOutputs$TwoLongs_hashCode(t_UpToTwoPositiveIntOutputs$TwoLongs *self, PyObject *args);
          static PyObject *t_UpToTwoPositiveIntOutputs$TwoLongs_toString(t_UpToTwoPositiveIntOutputs$TwoLongs *self, PyObject *args);
          static PyObject *t_UpToTwoPositiveIntOutputs$TwoLongs_get__first(t_UpToTwoPositiveIntOutputs$TwoLongs *self, void *data);
          static PyObject *t_UpToTwoPositiveIntOutputs$TwoLongs_get__second(t_UpToTwoPositiveIntOutputs$TwoLongs *self, void *data);

          static PyObject *t_UpToTwoPositiveIntOutputs$TwoLongs_get__parameters_(t_UpToTwoPositiveIntOutputs$TwoLongs *self, void *data);
          static PyGetSetDef t_UpToTwoPositiveIntOutputs$TwoLongs__fields_[] = {
            DECLARE_GET_FIELD(t_UpToTwoPositiveIntOutputs$TwoLongs, first),
            DECLARE_GET_FIELD(t_UpToTwoPositiveIntOutputs$TwoLongs, second),
            DECLARE_GET_FIELD(t_UpToTwoPositiveIntOutputs$TwoLongs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UpToTwoPositiveIntOutputs$TwoLongs__methods_[] = {
            DECLARE_METHOD(t_UpToTwoPositiveIntOutputs$TwoLongs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpToTwoPositiveIntOutputs$TwoLongs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpToTwoPositiveIntOutputs$TwoLongs, of_, METH_VARARGS),
            DECLARE_METHOD(t_UpToTwoPositiveIntOutputs$TwoLongs, equals, METH_VARARGS),
            DECLARE_METHOD(t_UpToTwoPositiveIntOutputs$TwoLongs, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_UpToTwoPositiveIntOutputs$TwoLongs, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(UpToTwoPositiveIntOutputs$TwoLongs)[] = {
            { Py_tp_methods, t_UpToTwoPositiveIntOutputs$TwoLongs__methods_ },
            { Py_tp_init, (void *) t_UpToTwoPositiveIntOutputs$TwoLongs_init_ },
            { Py_tp_getset, t_UpToTwoPositiveIntOutputs$TwoLongs__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(UpToTwoPositiveIntOutputs$TwoLongs)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(UpToTwoPositiveIntOutputs$TwoLongs, t_UpToTwoPositiveIntOutputs$TwoLongs, UpToTwoPositiveIntOutputs$TwoLongs);
          PyObject *t_UpToTwoPositiveIntOutputs$TwoLongs::wrap_Object(const UpToTwoPositiveIntOutputs$TwoLongs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_UpToTwoPositiveIntOutputs$TwoLongs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_UpToTwoPositiveIntOutputs$TwoLongs *self = (t_UpToTwoPositiveIntOutputs$TwoLongs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_UpToTwoPositiveIntOutputs$TwoLongs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_UpToTwoPositiveIntOutputs$TwoLongs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_UpToTwoPositiveIntOutputs$TwoLongs *self = (t_UpToTwoPositiveIntOutputs$TwoLongs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_UpToTwoPositiveIntOutputs$TwoLongs::install(PyObject *module)
          {
            installType(&PY_TYPE(UpToTwoPositiveIntOutputs$TwoLongs), &PY_TYPE_DEF(UpToTwoPositiveIntOutputs$TwoLongs), module, "UpToTwoPositiveIntOutputs$TwoLongs", 0);
          }

          void t_UpToTwoPositiveIntOutputs$TwoLongs::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(UpToTwoPositiveIntOutputs$TwoLongs), "class_", make_descriptor(UpToTwoPositiveIntOutputs$TwoLongs::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UpToTwoPositiveIntOutputs$TwoLongs), "wrapfn_", make_descriptor(t_UpToTwoPositiveIntOutputs$TwoLongs::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UpToTwoPositiveIntOutputs$TwoLongs), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UpToTwoPositiveIntOutputs$TwoLongs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UpToTwoPositiveIntOutputs$TwoLongs::initializeClass, 1)))
              return NULL;
            return t_UpToTwoPositiveIntOutputs$TwoLongs::wrap_Object(UpToTwoPositiveIntOutputs$TwoLongs(((t_UpToTwoPositiveIntOutputs$TwoLongs *) arg)->object.this$));
          }
          static PyObject *t_UpToTwoPositiveIntOutputs$TwoLongs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UpToTwoPositiveIntOutputs$TwoLongs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_UpToTwoPositiveIntOutputs$TwoLongs_of_(t_UpToTwoPositiveIntOutputs$TwoLongs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_UpToTwoPositiveIntOutputs$TwoLongs_init_(t_UpToTwoPositiveIntOutputs$TwoLongs *self, PyObject *args, PyObject *kwds)
          {
            jlong a0;
            jlong a1;
            UpToTwoPositiveIntOutputs$TwoLongs object((jobject) NULL);

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              INT_CALL(object = UpToTwoPositiveIntOutputs$TwoLongs(a0, a1));
              self->object = object;
              self->parameters[0] = ::java::lang::PY_TYPE(Object);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UpToTwoPositiveIntOutputs$TwoLongs_equals(t_UpToTwoPositiveIntOutputs$TwoLongs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(UpToTwoPositiveIntOutputs$TwoLongs), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_UpToTwoPositiveIntOutputs$TwoLongs_hashCode(t_UpToTwoPositiveIntOutputs$TwoLongs *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(UpToTwoPositiveIntOutputs$TwoLongs), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_UpToTwoPositiveIntOutputs$TwoLongs_toString(t_UpToTwoPositiveIntOutputs$TwoLongs *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(UpToTwoPositiveIntOutputs$TwoLongs), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_UpToTwoPositiveIntOutputs$TwoLongs_get__parameters_(t_UpToTwoPositiveIntOutputs$TwoLongs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_UpToTwoPositiveIntOutputs$TwoLongs_get__first(t_UpToTwoPositiveIntOutputs$TwoLongs *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_first());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_UpToTwoPositiveIntOutputs$TwoLongs_get__second(t_UpToTwoPositiveIntOutputs$TwoLongs *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_second());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Tokenizer::class$ = NULL;
        jmethodID *Tokenizer::mids$ = NULL;
        jfieldID *Tokenizer::fids$ = NULL;
        bool Tokenizer::live$ = false;

        jclass Tokenizer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Tokenizer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_setReader_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "setReader", "(Ljava/io/Reader;)V");
            mids$[mid_correctOffset_1e143afe1894d213] = env->getMethodID(cls, "correctOffset", "(I)I");

            fids$ = new jfieldID[max_fid];
            fids$[fid_input] = env->getFieldID(cls, "input", "Ljava/io/Reader;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void Tokenizer::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        void Tokenizer::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
        }

        void Tokenizer::setReader(const ::java::io::Reader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setReader_b2f3c57f5e6eb3f2], a0.this$);
        }

        ::java::io::Reader Tokenizer::_get_input() const
        {
          return ::java::io::Reader(env->getObjectField(this$, fids$[fid_input]));
        }

        void Tokenizer::_set_input(const ::java::io::Reader & a0) const
        {
          env->setObjectField(this$, fids$[fid_input], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Tokenizer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Tokenizer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Tokenizer_close(t_Tokenizer *self, PyObject *args);
        static PyObject *t_Tokenizer_reset(t_Tokenizer *self, PyObject *args);
        static PyObject *t_Tokenizer_setReader(t_Tokenizer *self, PyObject *arg);
        static PyObject *t_Tokenizer_get__input(t_Tokenizer *self, void *data);
        static int t_Tokenizer_set__input(t_Tokenizer *self, PyObject *arg, void *data);

        static int t_Tokenizer_set__reader(t_Tokenizer *self, PyObject *arg, void *data);
        static PyGetSetDef t_Tokenizer__fields_[] = {
          DECLARE_GETSET_FIELD(t_Tokenizer, input),
          DECLARE_SET_FIELD(t_Tokenizer, reader),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Tokenizer__methods_[] = {
          DECLARE_METHOD(t_Tokenizer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Tokenizer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Tokenizer, close, METH_VARARGS),
          DECLARE_METHOD(t_Tokenizer, reset, METH_VARARGS),
          DECLARE_METHOD(t_Tokenizer, setReader, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Tokenizer)[] = {
          { Py_tp_methods, t_Tokenizer__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_Tokenizer__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Tokenizer)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenStream),
          NULL
        };

        DEFINE_TYPE(Tokenizer, t_Tokenizer, Tokenizer);

        void t_Tokenizer::install(PyObject *module)
        {
          installType(&PY_TYPE(Tokenizer), &PY_TYPE_DEF(Tokenizer), module, "Tokenizer", 0);
        }

        void t_Tokenizer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Tokenizer), "class_", make_descriptor(Tokenizer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Tokenizer), "wrapfn_", make_descriptor(t_Tokenizer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Tokenizer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Tokenizer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Tokenizer::initializeClass, 1)))
            return NULL;
          return t_Tokenizer::wrap_Object(Tokenizer(((t_Tokenizer *) arg)->object.this$));
        }
        static PyObject *t_Tokenizer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Tokenizer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Tokenizer_close(t_Tokenizer *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(Tokenizer), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_Tokenizer_reset(t_Tokenizer *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(Tokenizer), (PyObject *) self, "reset", args, 2);
        }

        static PyObject *t_Tokenizer_setReader(t_Tokenizer *self, PyObject *arg)
        {
          ::java::io::Reader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setReader(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setReader", arg);
          return NULL;
        }

        static PyObject *t_Tokenizer_get__input(t_Tokenizer *self, void *data)
        {
          ::java::io::Reader value((jobject) NULL);
          OBJ_CALL(value = self->object._get_input());
          return ::java::io::t_Reader::wrap_Object(value);
        }
        static int t_Tokenizer_set__input(t_Tokenizer *self, PyObject *arg, void *data)
        {
          ::java::io::Reader value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &value))
          {
            INT_CALL(self->object._set_input(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "input", arg);
          return -1;
        }

        static int t_Tokenizer_set__reader(t_Tokenizer *self, PyObject *arg, void *data)
        {
          {
            ::java::io::Reader value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &value))
            {
              INT_CALL(self->object.setReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "reader", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *UAX29URLEmailTokenizerImpl::class$ = NULL;
          jmethodID *UAX29URLEmailTokenizerImpl::mids$ = NULL;
          bool UAX29URLEmailTokenizerImpl::live$ = false;
          jint UAX29URLEmailTokenizerImpl::AVOID_BAD_URL = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::EMAIL_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::EMOJI_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::HANGUL_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::HIRAGANA_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::IDEOGRAPHIC_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::KATAKANA_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::NUMERIC_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::URL_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::WORD_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::YYEOF = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::YYINITIAL = (jint) 0;

          jclass UAX29URLEmailTokenizerImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_getNextToken_9972fcc56b44e79d] = env->getMethodID(cls, "getNextToken", "()I");
              mids$[mid_getText_5e9737191854bf83] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
              mids$[mid_setBufferSize_040c4cd0390c5aff] = env->getMethodID(cls, "setBufferSize", "(I)V");
              mids$[mid_yybegin_040c4cd0390c5aff] = env->getMethodID(cls, "yybegin", "(I)V");
              mids$[mid_yychar_9972fcc56b44e79d] = env->getMethodID(cls, "yychar", "()I");
              mids$[mid_yycharat_ebc61ec1e57770d1] = env->getMethodID(cls, "yycharat", "(I)C");
              mids$[mid_yyclose_f2cc1bce94666404] = env->getMethodID(cls, "yyclose", "()V");
              mids$[mid_yylength_9972fcc56b44e79d] = env->getMethodID(cls, "yylength", "()I");
              mids$[mid_yypushback_040c4cd0390c5aff] = env->getMethodID(cls, "yypushback", "(I)V");
              mids$[mid_yyreset_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
              mids$[mid_yystate_9972fcc56b44e79d] = env->getMethodID(cls, "yystate", "()I");
              mids$[mid_yytext_db9b55ba01e03e4b] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              AVOID_BAD_URL = env->getStaticIntField(cls, "AVOID_BAD_URL");
              EMAIL_TYPE = env->getStaticIntField(cls, "EMAIL_TYPE");
              EMOJI_TYPE = env->getStaticIntField(cls, "EMOJI_TYPE");
              HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
              HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
              IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
              KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
              NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
              SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
              URL_TYPE = env->getStaticIntField(cls, "URL_TYPE");
              WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
              YYEOF = env->getStaticIntField(cls, "YYEOF");
              YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UAX29URLEmailTokenizerImpl::UAX29URLEmailTokenizerImpl(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b2f3c57f5e6eb3f2, a0.this$)) {}

          jint UAX29URLEmailTokenizerImpl::getNextToken() const
          {
            return env->callIntMethod(this$, mids$[mid_getNextToken_9972fcc56b44e79d]);
          }

          void UAX29URLEmailTokenizerImpl::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getText_5e9737191854bf83], a0.this$);
          }

          void UAX29URLEmailTokenizerImpl::setBufferSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBufferSize_040c4cd0390c5aff], a0);
          }

          void UAX29URLEmailTokenizerImpl::yybegin(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yybegin_040c4cd0390c5aff], a0);
          }

          jint UAX29URLEmailTokenizerImpl::yychar() const
          {
            return env->callIntMethod(this$, mids$[mid_yychar_9972fcc56b44e79d]);
          }

          jchar UAX29URLEmailTokenizerImpl::yycharat(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_yycharat_ebc61ec1e57770d1], a0);
          }

          void UAX29URLEmailTokenizerImpl::yyclose() const
          {
            env->callVoidMethod(this$, mids$[mid_yyclose_f2cc1bce94666404]);
          }

          jint UAX29URLEmailTokenizerImpl::yylength() const
          {
            return env->callIntMethod(this$, mids$[mid_yylength_9972fcc56b44e79d]);
          }

          void UAX29URLEmailTokenizerImpl::yypushback(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yypushback_040c4cd0390c5aff], a0);
          }

          void UAX29URLEmailTokenizerImpl::yyreset(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yyreset_b2f3c57f5e6eb3f2], a0.this$);
          }

          jint UAX29URLEmailTokenizerImpl::yystate() const
          {
            return env->callIntMethod(this$, mids$[mid_yystate_9972fcc56b44e79d]);
          }

          ::java::lang::String UAX29URLEmailTokenizerImpl::yytext() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_UAX29URLEmailTokenizerImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UAX29URLEmailTokenizerImpl_init_(t_UAX29URLEmailTokenizerImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UAX29URLEmailTokenizerImpl_getNextToken(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_getText(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_setBufferSize(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yybegin(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yychar(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yycharat(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yyclose(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yylength(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yypushback(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yyreset(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yystate(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yytext(t_UAX29URLEmailTokenizerImpl *self);
          static int t_UAX29URLEmailTokenizerImpl_set__bufferSize(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg, void *data);
          static PyObject *t_UAX29URLEmailTokenizerImpl_get__nextToken(t_UAX29URLEmailTokenizerImpl *self, void *data);
          static PyGetSetDef t_UAX29URLEmailTokenizerImpl__fields_[] = {
            DECLARE_SET_FIELD(t_UAX29URLEmailTokenizerImpl, bufferSize),
            DECLARE_GET_FIELD(t_UAX29URLEmailTokenizerImpl, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UAX29URLEmailTokenizerImpl__methods_[] = {
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, getText, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, setBufferSize, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yybegin, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yychar, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yycharat, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yyclose, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yylength, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yypushback, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yyreset, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yystate, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yytext, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(UAX29URLEmailTokenizerImpl)[] = {
            { Py_tp_methods, t_UAX29URLEmailTokenizerImpl__methods_ },
            { Py_tp_init, (void *) t_UAX29URLEmailTokenizerImpl_init_ },
            { Py_tp_getset, t_UAX29URLEmailTokenizerImpl__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(UAX29URLEmailTokenizerImpl)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(UAX29URLEmailTokenizerImpl, t_UAX29URLEmailTokenizerImpl, UAX29URLEmailTokenizerImpl);

          void t_UAX29URLEmailTokenizerImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(UAX29URLEmailTokenizerImpl), &PY_TYPE_DEF(UAX29URLEmailTokenizerImpl), module, "UAX29URLEmailTokenizerImpl", 0);
          }

          void t_UAX29URLEmailTokenizerImpl::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizerImpl), "class_", make_descriptor(UAX29URLEmailTokenizerImpl::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizerImpl), "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerImpl::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizerImpl), "boxfn_", make_descriptor(boxObject));
            env->getClass(UAX29URLEmailTokenizerImpl::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizerImpl), "AVOID_BAD_URL", make_descriptor(UAX29URLEmailTokenizerImpl::AVOID_BAD_URL));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizerImpl), "EMAIL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::EMAIL_TYPE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizerImpl), "EMOJI_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::EMOJI_TYPE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizerImpl), "HANGUL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::HANGUL_TYPE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizerImpl), "HIRAGANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::HIRAGANA_TYPE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizerImpl), "IDEOGRAPHIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::IDEOGRAPHIC_TYPE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizerImpl), "KATAKANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::KATAKANA_TYPE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizerImpl), "NUMERIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::NUMERIC_TYPE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizerImpl), "SOUTH_EAST_ASIAN_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::SOUTH_EAST_ASIAN_TYPE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizerImpl), "URL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::URL_TYPE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizerImpl), "WORD_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::WORD_TYPE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizerImpl), "YYEOF", make_descriptor(UAX29URLEmailTokenizerImpl::YYEOF));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UAX29URLEmailTokenizerImpl), "YYINITIAL", make_descriptor(UAX29URLEmailTokenizerImpl::YYINITIAL));
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UAX29URLEmailTokenizerImpl::initializeClass, 1)))
              return NULL;
            return t_UAX29URLEmailTokenizerImpl::wrap_Object(UAX29URLEmailTokenizerImpl(((t_UAX29URLEmailTokenizerImpl *) arg)->object.this$));
          }
          static PyObject *t_UAX29URLEmailTokenizerImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UAX29URLEmailTokenizerImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UAX29URLEmailTokenizerImpl_init_(t_UAX29URLEmailTokenizerImpl *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            UAX29URLEmailTokenizerImpl object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = UAX29URLEmailTokenizerImpl(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_getNextToken(t_UAX29URLEmailTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNextToken());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_getText(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getText(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getText", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_setBufferSize(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setBufferSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setBufferSize", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yybegin(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.yybegin(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yychar(t_UAX29URLEmailTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yychar());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yycharat(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.yycharat(a0));
              return c2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yyclose(t_UAX29URLEmailTokenizerImpl *self)
          {
            OBJ_CALL(self->object.yyclose());
            Py_RETURN_NONE;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yylength(t_UAX29URLEmailTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yylength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yypushback(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.yypushback(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yyreset(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.yyreset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yystate(t_UAX29URLEmailTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yystate());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yytext(t_UAX29URLEmailTokenizerImpl *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.yytext());
            return j2p(result);
          }

          static int t_UAX29URLEmailTokenizerImpl_set__bufferSize(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setBufferSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "bufferSize", arg);
            return -1;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_get__nextToken(t_UAX29URLEmailTokenizerImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNextToken());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/TwoPhaseIterator.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/SpanCollector.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *Spans::class$ = NULL;
          jmethodID *Spans::mids$ = NULL;
          bool Spans::live$ = false;
          jint Spans::NO_MORE_POSITIONS = (jint) 0;

          jclass Spans::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/Spans");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_asTwoPhaseIterator_6458a12a224a1c8a] = env->getMethodID(cls, "asTwoPhaseIterator", "()Lorg/apache/lucene/search/TwoPhaseIterator;");
              mids$[mid_collect_810c6539c62abcf6] = env->getMethodID(cls, "collect", "(Lorg/apache/lucene/search/spans/SpanCollector;)V");
              mids$[mid_endPosition_9972fcc56b44e79d] = env->getMethodID(cls, "endPosition", "()I");
              mids$[mid_nextStartPosition_9972fcc56b44e79d] = env->getMethodID(cls, "nextStartPosition", "()I");
              mids$[mid_positionsCost_58aec2b64dff50c8] = env->getMethodID(cls, "positionsCost", "()F");
              mids$[mid_startPosition_9972fcc56b44e79d] = env->getMethodID(cls, "startPosition", "()I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_width_9972fcc56b44e79d] = env->getMethodID(cls, "width", "()I");
              mids$[mid_doStartCurrentDoc_f2cc1bce94666404] = env->getMethodID(cls, "doStartCurrentDoc", "()V");
              mids$[mid_doCurrentSpans_f2cc1bce94666404] = env->getMethodID(cls, "doCurrentSpans", "()V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NO_MORE_POSITIONS = env->getStaticIntField(cls, "NO_MORE_POSITIONS");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Spans::Spans() : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::search::TwoPhaseIterator Spans::asTwoPhaseIterator() const
          {
            return ::org::apache::lucene::search::TwoPhaseIterator(env->callObjectMethod(this$, mids$[mid_asTwoPhaseIterator_6458a12a224a1c8a]));
          }

          void Spans::collect(const ::org::apache::lucene::search::spans::SpanCollector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_810c6539c62abcf6], a0.this$);
          }

          jint Spans::endPosition() const
          {
            return env->callIntMethod(this$, mids$[mid_endPosition_9972fcc56b44e79d]);
          }

          jint Spans::nextStartPosition() const
          {
            return env->callIntMethod(this$, mids$[mid_nextStartPosition_9972fcc56b44e79d]);
          }

          jfloat Spans::positionsCost() const
          {
            return env->callFloatMethod(this$, mids$[mid_positionsCost_58aec2b64dff50c8]);
          }

          jint Spans::startPosition() const
          {
            return env->callIntMethod(this$, mids$[mid_startPosition_9972fcc56b44e79d]);
          }

          ::java::lang::String Spans::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          jint Spans::width() const
          {
            return env->callIntMethod(this$, mids$[mid_width_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_Spans_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Spans_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Spans_init_(t_Spans *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Spans_asTwoPhaseIterator(t_Spans *self);
          static PyObject *t_Spans_collect(t_Spans *self, PyObject *arg);
          static PyObject *t_Spans_endPosition(t_Spans *self);
          static PyObject *t_Spans_nextStartPosition(t_Spans *self);
          static PyObject *t_Spans_positionsCost(t_Spans *self);
          static PyObject *t_Spans_startPosition(t_Spans *self);
          static PyObject *t_Spans_toString(t_Spans *self, PyObject *args);
          static PyObject *t_Spans_width(t_Spans *self);

          static PyMethodDef t_Spans__methods_[] = {
            DECLARE_METHOD(t_Spans, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Spans, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Spans, asTwoPhaseIterator, METH_NOARGS),
            DECLARE_METHOD(t_Spans, collect, METH_O),
            DECLARE_METHOD(t_Spans, endPosition, METH_NOARGS),
            DECLARE_METHOD(t_Spans, nextStartPosition, METH_NOARGS),
            DECLARE_METHOD(t_Spans, positionsCost, METH_NOARGS),
            DECLARE_METHOD(t_Spans, startPosition, METH_NOARGS),
            DECLARE_METHOD(t_Spans, toString, METH_VARARGS),
            DECLARE_METHOD(t_Spans, width, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Spans)[] = {
            { Py_tp_methods, t_Spans__methods_ },
            { Py_tp_init, (void *) t_Spans_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Spans)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::DocIdSetIterator),
            NULL
          };

          DEFINE_TYPE(Spans, t_Spans, Spans);

          void t_Spans::install(PyObject *module)
          {
            installType(&PY_TYPE(Spans), &PY_TYPE_DEF(Spans), module, "Spans", 0);
          }

          void t_Spans::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Spans), "class_", make_descriptor(Spans::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Spans), "wrapfn_", make_descriptor(t_Spans::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Spans), "boxfn_", make_descriptor(boxObject));
            env->getClass(Spans::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Spans), "NO_MORE_POSITIONS", make_descriptor(Spans::NO_MORE_POSITIONS));
          }

          static PyObject *t_Spans_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Spans::initializeClass, 1)))
              return NULL;
            return t_Spans::wrap_Object(Spans(((t_Spans *) arg)->object.this$));
          }
          static PyObject *t_Spans_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Spans::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Spans_init_(t_Spans *self, PyObject *args, PyObject *kwds)
          {
            Spans object((jobject) NULL);

            INT_CALL(object = Spans());
            self->object = object;

            return 0;
          }

          static PyObject *t_Spans_asTwoPhaseIterator(t_Spans *self)
          {
            ::org::apache::lucene::search::TwoPhaseIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.asTwoPhaseIterator());
            return ::org::apache::lucene::search::t_TwoPhaseIterator::wrap_Object(result);
          }

          static PyObject *t_Spans_collect(t_Spans *self, PyObject *arg)
          {
            ::org::apache::lucene::search::spans::SpanCollector a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::spans::SpanCollector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "collect", arg);
            return NULL;
          }

          static PyObject *t_Spans_endPosition(t_Spans *self)
          {
            jint result;
            OBJ_CALL(result = self->object.endPosition());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Spans_nextStartPosition(t_Spans *self)
          {
            jint result;
            OBJ_CALL(result = self->object.nextStartPosition());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Spans_positionsCost(t_Spans *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.positionsCost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Spans_startPosition(t_Spans *self)
          {
            jint result;
            OBJ_CALL(result = self->object.startPosition());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Spans_toString(t_Spans *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Spans), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Spans_width(t_Spans *self)
          {
            jint result;
            OBJ_CALL(result = self->object.width());
            return PyLong_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/JapaneseBaseFormFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {

          ::java::lang::Class *JapaneseBaseFormFilter::class$ = NULL;
          jmethodID *JapaneseBaseFormFilter::mids$ = NULL;
          bool JapaneseBaseFormFilter::live$ = false;

          jclass JapaneseBaseFormFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/JapaneseBaseFormFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JapaneseBaseFormFilter::JapaneseBaseFormFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean JapaneseBaseFormFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          static PyObject *t_JapaneseBaseFormFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JapaneseBaseFormFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JapaneseBaseFormFilter_init_(t_JapaneseBaseFormFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JapaneseBaseFormFilter_incrementToken(t_JapaneseBaseFormFilter *self, PyObject *args);

          static PyMethodDef t_JapaneseBaseFormFilter__methods_[] = {
            DECLARE_METHOD(t_JapaneseBaseFormFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseBaseFormFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseBaseFormFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JapaneseBaseFormFilter)[] = {
            { Py_tp_methods, t_JapaneseBaseFormFilter__methods_ },
            { Py_tp_init, (void *) t_JapaneseBaseFormFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JapaneseBaseFormFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(JapaneseBaseFormFilter, t_JapaneseBaseFormFilter, JapaneseBaseFormFilter);

          void t_JapaneseBaseFormFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(JapaneseBaseFormFilter), &PY_TYPE_DEF(JapaneseBaseFormFilter), module, "JapaneseBaseFormFilter", 0);
          }

          void t_JapaneseBaseFormFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseBaseFormFilter), "class_", make_descriptor(JapaneseBaseFormFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseBaseFormFilter), "wrapfn_", make_descriptor(t_JapaneseBaseFormFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseBaseFormFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JapaneseBaseFormFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JapaneseBaseFormFilter::initializeClass, 1)))
              return NULL;
            return t_JapaneseBaseFormFilter::wrap_Object(JapaneseBaseFormFilter(((t_JapaneseBaseFormFilter *) arg)->object.this$));
          }
          static PyObject *t_JapaneseBaseFormFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JapaneseBaseFormFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JapaneseBaseFormFilter_init_(t_JapaneseBaseFormFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            JapaneseBaseFormFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = JapaneseBaseFormFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JapaneseBaseFormFilter_incrementToken(t_JapaneseBaseFormFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(JapaneseBaseFormFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/LuceneLevenshteinDistance.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *LuceneLevenshteinDistance::class$ = NULL;
          jmethodID *LuceneLevenshteinDistance::mids$ = NULL;
          bool LuceneLevenshteinDistance::live$ = false;

          jclass LuceneLevenshteinDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/LuceneLevenshteinDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDistance_31e45f475cca0d26] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LuceneLevenshteinDistance::LuceneLevenshteinDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jboolean LuceneLevenshteinDistance::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jfloat LuceneLevenshteinDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_31e45f475cca0d26], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_LuceneLevenshteinDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LuceneLevenshteinDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LuceneLevenshteinDistance_init_(t_LuceneLevenshteinDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LuceneLevenshteinDistance_equals(t_LuceneLevenshteinDistance *self, PyObject *args);
          static PyObject *t_LuceneLevenshteinDistance_getDistance(t_LuceneLevenshteinDistance *self, PyObject *args);

          static PyMethodDef t_LuceneLevenshteinDistance__methods_[] = {
            DECLARE_METHOD(t_LuceneLevenshteinDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LuceneLevenshteinDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LuceneLevenshteinDistance, equals, METH_VARARGS),
            DECLARE_METHOD(t_LuceneLevenshteinDistance, getDistance, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LuceneLevenshteinDistance)[] = {
            { Py_tp_methods, t_LuceneLevenshteinDistance__methods_ },
            { Py_tp_init, (void *) t_LuceneLevenshteinDistance_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LuceneLevenshteinDistance)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(LuceneLevenshteinDistance, t_LuceneLevenshteinDistance, LuceneLevenshteinDistance);

          void t_LuceneLevenshteinDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(LuceneLevenshteinDistance), &PY_TYPE_DEF(LuceneLevenshteinDistance), module, "LuceneLevenshteinDistance", 0);
          }

          void t_LuceneLevenshteinDistance::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LuceneLevenshteinDistance), "class_", make_descriptor(LuceneLevenshteinDistance::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LuceneLevenshteinDistance), "wrapfn_", make_descriptor(t_LuceneLevenshteinDistance::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LuceneLevenshteinDistance), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LuceneLevenshteinDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LuceneLevenshteinDistance::initializeClass, 1)))
              return NULL;
            return t_LuceneLevenshteinDistance::wrap_Object(LuceneLevenshteinDistance(((t_LuceneLevenshteinDistance *) arg)->object.this$));
          }
          static PyObject *t_LuceneLevenshteinDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LuceneLevenshteinDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LuceneLevenshteinDistance_init_(t_LuceneLevenshteinDistance *self, PyObject *args, PyObject *kwds)
          {
            LuceneLevenshteinDistance object((jobject) NULL);

            INT_CALL(object = LuceneLevenshteinDistance());
            self->object = object;

            return 0;
          }

          static PyObject *t_LuceneLevenshteinDistance_equals(t_LuceneLevenshteinDistance *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(LuceneLevenshteinDistance), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_LuceneLevenshteinDistance_getDistance(t_LuceneLevenshteinDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/precedence/processors/BooleanModifiersQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            namespace processors {

              ::java::lang::Class *BooleanModifiersQueryNodeProcessor::class$ = NULL;
              jmethodID *BooleanModifiersQueryNodeProcessor::mids$ = NULL;
              bool BooleanModifiersQueryNodeProcessor::live$ = false;

              jclass BooleanModifiersQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/precedence/processors/BooleanModifiersQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_9b07be8595532de7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_e420eeaadf0bcd20] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanModifiersQueryNodeProcessor::BooleanModifiersQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BooleanModifiersQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_9b07be8595532de7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            namespace processors {
              static PyObject *t_BooleanModifiersQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanModifiersQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanModifiersQueryNodeProcessor_init_(t_BooleanModifiersQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BooleanModifiersQueryNodeProcessor_process(t_BooleanModifiersQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_BooleanModifiersQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_BooleanModifiersQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanModifiersQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanModifiersQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(BooleanModifiersQueryNodeProcessor)[] = {
                { Py_tp_methods, t_BooleanModifiersQueryNodeProcessor__methods_ },
                { Py_tp_init, (void *) t_BooleanModifiersQueryNodeProcessor_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(BooleanModifiersQueryNodeProcessor)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl),
                NULL
              };

              DEFINE_TYPE(BooleanModifiersQueryNodeProcessor, t_BooleanModifiersQueryNodeProcessor, BooleanModifiersQueryNodeProcessor);

              void t_BooleanModifiersQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanModifiersQueryNodeProcessor), &PY_TYPE_DEF(BooleanModifiersQueryNodeProcessor), module, "BooleanModifiersQueryNodeProcessor", 0);
              }

              void t_BooleanModifiersQueryNodeProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanModifiersQueryNodeProcessor), "class_", make_descriptor(BooleanModifiersQueryNodeProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanModifiersQueryNodeProcessor), "wrapfn_", make_descriptor(t_BooleanModifiersQueryNodeProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanModifiersQueryNodeProcessor), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanModifiersQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanModifiersQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_BooleanModifiersQueryNodeProcessor::wrap_Object(BooleanModifiersQueryNodeProcessor(((t_BooleanModifiersQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_BooleanModifiersQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanModifiersQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanModifiersQueryNodeProcessor_init_(t_BooleanModifiersQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                BooleanModifiersQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = BooleanModifiersQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_BooleanModifiersQueryNodeProcessor_process(t_BooleanModifiersQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(BooleanModifiersQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Optimizer2.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Optimizer2::class$ = NULL;
      jmethodID *Optimizer2::mids$ = NULL;
      bool Optimizer2::live$ = false;

      jclass Optimizer2::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Optimizer2");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

          class$ = new ::java::lang::Class(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Optimizer2::Optimizer2() : ::org::egothor::stemmer::Optimizer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Optimizer2_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Optimizer2_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Optimizer2_init_(t_Optimizer2 *self, PyObject *args, PyObject *kwds);

      static PyMethodDef t_Optimizer2__methods_[] = {
        DECLARE_METHOD(t_Optimizer2, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Optimizer2, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      static PyType_Slot PY_TYPE_SLOTS(Optimizer2)[] = {
        { Py_tp_methods, t_Optimizer2__methods_ },
        { Py_tp_init, (void *) t_Optimizer2_init_ },
        { 0, NULL }
      };

      static PyType_Def *PY_TYPE_BASES(Optimizer2)[] = {
        &PY_TYPE_DEF(::org::egothor::stemmer::Optimizer),
        NULL
      };

      DEFINE_TYPE(Optimizer2, t_Optimizer2, Optimizer2);

      void t_Optimizer2::install(PyObject *module)
      {
        installType(&PY_TYPE(Optimizer2), &PY_TYPE_DEF(Optimizer2), module, "Optimizer2", 0);
      }

      void t_Optimizer2::initialize(PyObject *module)
      {
        PyObject_SetAttrString((PyObject *) PY_TYPE(Optimizer2), "class_", make_descriptor(Optimizer2::initializeClass, 1));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Optimizer2), "wrapfn_", make_descriptor(t_Optimizer2::wrap_jobject));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Optimizer2), "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Optimizer2_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Optimizer2::initializeClass, 1)))
          return NULL;
        return t_Optimizer2::wrap_Object(Optimizer2(((t_Optimizer2 *) arg)->object.this$));
      }
      static PyObject *t_Optimizer2_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Optimizer2::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Optimizer2_init_(t_Optimizer2 *self, PyObject *args, PyObject *kwds)
      {
        Optimizer2 object((jobject) NULL);

        INT_CALL(object = Optimizer2());
        self->object = object;

        return 0;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexWriter$DocStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexWriter$DocStats::class$ = NULL;
        jmethodID *IndexWriter$DocStats::mids$ = NULL;
        jfieldID *IndexWriter$DocStats::fids$ = NULL;
        bool IndexWriter$DocStats::live$ = false;

        jclass IndexWriter$DocStats::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexWriter$DocStats");

            fids$ = new jfieldID[max_fid];
            fids$[fid_maxDoc] = env->getFieldID(cls, "maxDoc", "I");
            fids$[fid_numDocs] = env->getFieldID(cls, "numDocs", "I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint IndexWriter$DocStats::_get_maxDoc() const
        {
          return env->getIntField(this$, fids$[fid_maxDoc]);
        }

        jint IndexWriter$DocStats::_get_numDocs() const
        {
          return env->getIntField(this$, fids$[fid_numDocs]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexWriter$DocStats_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter$DocStats_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter$DocStats_get__maxDoc(t_IndexWriter$DocStats *self, void *data);
        static PyObject *t_IndexWriter$DocStats_get__numDocs(t_IndexWriter$DocStats *self, void *data);

        static PyGetSetDef t_IndexWriter$DocStats__fields_[] = {
          DECLARE_GET_FIELD(t_IndexWriter$DocStats, maxDoc),
          DECLARE_GET_FIELD(t_IndexWriter$DocStats, numDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexWriter$DocStats__methods_[] = {
          DECLARE_METHOD(t_IndexWriter$DocStats, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter$DocStats, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexWriter$DocStats)[] = {
          { Py_tp_methods, t_IndexWriter$DocStats__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_IndexWriter$DocStats__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexWriter$DocStats)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexWriter$DocStats, t_IndexWriter$DocStats, IndexWriter$DocStats);

        void t_IndexWriter$DocStats::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexWriter$DocStats), &PY_TYPE_DEF(IndexWriter$DocStats), module, "IndexWriter$DocStats", 0);
        }

        void t_IndexWriter$DocStats::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriter$DocStats), "class_", make_descriptor(IndexWriter$DocStats::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriter$DocStats), "wrapfn_", make_descriptor(t_IndexWriter$DocStats::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriter$DocStats), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexWriter$DocStats_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexWriter$DocStats::initializeClass, 1)))
            return NULL;
          return t_IndexWriter$DocStats::wrap_Object(IndexWriter$DocStats(((t_IndexWriter$DocStats *) arg)->object.this$));
        }
        static PyObject *t_IndexWriter$DocStats_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexWriter$DocStats::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexWriter$DocStats_get__maxDoc(t_IndexWriter$DocStats *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_maxDoc());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_IndexWriter$DocStats_get__numDocs(t_IndexWriter$DocStats *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numDocs());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/AnyQueryNodeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *AnyQueryNodeBuilder::class$ = NULL;
              jmethodID *AnyQueryNodeBuilder::mids$ = NULL;
              bool AnyQueryNodeBuilder::live$ = false;

              jclass AnyQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/AnyQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_ff52d9212329b1a7] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/BooleanQuery;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AnyQueryNodeBuilder::AnyQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::search::BooleanQuery AnyQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::BooleanQuery(env->callObjectMethod(this$, mids$[mid_build_ff52d9212329b1a7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_AnyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AnyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AnyQueryNodeBuilder_init_(t_AnyQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AnyQueryNodeBuilder_build(t_AnyQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_AnyQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_AnyQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnyQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnyQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(AnyQueryNodeBuilder)[] = {
                { Py_tp_methods, t_AnyQueryNodeBuilder__methods_ },
                { Py_tp_init, (void *) t_AnyQueryNodeBuilder_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(AnyQueryNodeBuilder)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(AnyQueryNodeBuilder, t_AnyQueryNodeBuilder, AnyQueryNodeBuilder);

              void t_AnyQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(AnyQueryNodeBuilder), &PY_TYPE_DEF(AnyQueryNodeBuilder), module, "AnyQueryNodeBuilder", 0);
              }

              void t_AnyQueryNodeBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(AnyQueryNodeBuilder), "class_", make_descriptor(AnyQueryNodeBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(AnyQueryNodeBuilder), "wrapfn_", make_descriptor(t_AnyQueryNodeBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(AnyQueryNodeBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AnyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AnyQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_AnyQueryNodeBuilder::wrap_Object(AnyQueryNodeBuilder(((t_AnyQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_AnyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AnyQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AnyQueryNodeBuilder_init_(t_AnyQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                AnyQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = AnyQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_AnyQueryNodeBuilder_build(t_AnyQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::BooleanQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_BooleanQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/PostingsWithTermVectorsOffsetStrategy.h"
#include "org/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/search/uhighlight/OffsetsEnum.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/uhighlight/UHComponents.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *PostingsWithTermVectorsOffsetStrategy::class$ = NULL;
          jmethodID *PostingsWithTermVectorsOffsetStrategy::mids$ = NULL;
          bool PostingsWithTermVectorsOffsetStrategy::live$ = false;

          jclass PostingsWithTermVectorsOffsetStrategy::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/PostingsWithTermVectorsOffsetStrategy");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8858451d37bfc18c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/uhighlight/UHComponents;)V");
              mids$[mid_getOffsetSource_d592a7a3fc9567b1] = env->getMethodID(cls, "getOffsetSource", "()Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource;");
              mids$[mid_getOffsetsEnum_55596ccb3f6b81ab] = env->getMethodID(cls, "getOffsetsEnum", "(Lorg/apache/lucene/index/LeafReader;ILjava/lang/String;)Lorg/apache/lucene/search/uhighlight/OffsetsEnum;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PostingsWithTermVectorsOffsetStrategy::PostingsWithTermVectorsOffsetStrategy(const ::org::apache::lucene::search::uhighlight::UHComponents & a0) : ::org::apache::lucene::search::uhighlight::FieldOffsetStrategy(env->newObject(initializeClass, &mids$, mid_init$_8858451d37bfc18c, a0.this$)) {}

          ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource PostingsWithTermVectorsOffsetStrategy::getOffsetSource() const
          {
            return ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource(env->callObjectMethod(this$, mids$[mid_getOffsetSource_d592a7a3fc9567b1]));
          }

          ::org::apache::lucene::search::uhighlight::OffsetsEnum PostingsWithTermVectorsOffsetStrategy::getOffsetsEnum(const ::org::apache::lucene::index::LeafReader & a0, jint a1, const ::java::lang::String & a2) const
          {
            return ::org::apache::lucene::search::uhighlight::OffsetsEnum(env->callObjectMethod(this$, mids$[mid_getOffsetsEnum_55596ccb3f6b81ab], a0.this$, a1, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_PostingsWithTermVectorsOffsetStrategy_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PostingsWithTermVectorsOffsetStrategy_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PostingsWithTermVectorsOffsetStrategy_init_(t_PostingsWithTermVectorsOffsetStrategy *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PostingsWithTermVectorsOffsetStrategy_getOffsetSource(t_PostingsWithTermVectorsOffsetStrategy *self, PyObject *args);
          static PyObject *t_PostingsWithTermVectorsOffsetStrategy_getOffsetsEnum(t_PostingsWithTermVectorsOffsetStrategy *self, PyObject *args);
          static PyObject *t_PostingsWithTermVectorsOffsetStrategy_get__offsetSource(t_PostingsWithTermVectorsOffsetStrategy *self, void *data);
          static PyGetSetDef t_PostingsWithTermVectorsOffsetStrategy__fields_[] = {
            DECLARE_GET_FIELD(t_PostingsWithTermVectorsOffsetStrategy, offsetSource),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PostingsWithTermVectorsOffsetStrategy__methods_[] = {
            DECLARE_METHOD(t_PostingsWithTermVectorsOffsetStrategy, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PostingsWithTermVectorsOffsetStrategy, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PostingsWithTermVectorsOffsetStrategy, getOffsetSource, METH_VARARGS),
            DECLARE_METHOD(t_PostingsWithTermVectorsOffsetStrategy, getOffsetsEnum, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PostingsWithTermVectorsOffsetStrategy)[] = {
            { Py_tp_methods, t_PostingsWithTermVectorsOffsetStrategy__methods_ },
            { Py_tp_init, (void *) t_PostingsWithTermVectorsOffsetStrategy_init_ },
            { Py_tp_getset, t_PostingsWithTermVectorsOffsetStrategy__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PostingsWithTermVectorsOffsetStrategy)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::uhighlight::FieldOffsetStrategy),
            NULL
          };

          DEFINE_TYPE(PostingsWithTermVectorsOffsetStrategy, t_PostingsWithTermVectorsOffsetStrategy, PostingsWithTermVectorsOffsetStrategy);

          void t_PostingsWithTermVectorsOffsetStrategy::install(PyObject *module)
          {
            installType(&PY_TYPE(PostingsWithTermVectorsOffsetStrategy), &PY_TYPE_DEF(PostingsWithTermVectorsOffsetStrategy), module, "PostingsWithTermVectorsOffsetStrategy", 0);
          }

          void t_PostingsWithTermVectorsOffsetStrategy::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsWithTermVectorsOffsetStrategy), "class_", make_descriptor(PostingsWithTermVectorsOffsetStrategy::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsWithTermVectorsOffsetStrategy), "wrapfn_", make_descriptor(t_PostingsWithTermVectorsOffsetStrategy::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsWithTermVectorsOffsetStrategy), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PostingsWithTermVectorsOffsetStrategy_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PostingsWithTermVectorsOffsetStrategy::initializeClass, 1)))
              return NULL;
            return t_PostingsWithTermVectorsOffsetStrategy::wrap_Object(PostingsWithTermVectorsOffsetStrategy(((t_PostingsWithTermVectorsOffsetStrategy *) arg)->object.this$));
          }
          static PyObject *t_PostingsWithTermVectorsOffsetStrategy_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PostingsWithTermVectorsOffsetStrategy::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PostingsWithTermVectorsOffsetStrategy_init_(t_PostingsWithTermVectorsOffsetStrategy *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::uhighlight::UHComponents a0((jobject) NULL);
            PostingsWithTermVectorsOffsetStrategy object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::uhighlight::UHComponents::initializeClass, &a0))
            {
              INT_CALL(object = PostingsWithTermVectorsOffsetStrategy(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PostingsWithTermVectorsOffsetStrategy_getOffsetSource(t_PostingsWithTermVectorsOffsetStrategy *self, PyObject *args)
          {
            ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getOffsetSource());
              return ::org::apache::lucene::search::uhighlight::t_UnifiedHighlighter$OffsetSource::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PostingsWithTermVectorsOffsetStrategy), (PyObject *) self, "getOffsetSource", args, 2);
          }

          static PyObject *t_PostingsWithTermVectorsOffsetStrategy_getOffsetsEnum(t_PostingsWithTermVectorsOffsetStrategy *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::search::uhighlight::OffsetsEnum result((jobject) NULL);

            if (!parseArgs(args, "kIs", ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getOffsetsEnum(a0, a1, a2));
              return ::org::apache::lucene::search::uhighlight::t_OffsetsEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PostingsWithTermVectorsOffsetStrategy), (PyObject *) self, "getOffsetsEnum", args, 2);
          }

          static PyObject *t_PostingsWithTermVectorsOffsetStrategy_get__offsetSource(t_PostingsWithTermVectorsOffsetStrategy *self, void *data)
          {
            ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource value((jobject) NULL);
            OBJ_CALL(value = self->object.getOffsetSource());
            return ::org::apache::lucene::search::uhighlight::t_UnifiedHighlighter$OffsetSource::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SimpleBoolFunction.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/queries/function/docvalues/BoolDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SimpleBoolFunction::class$ = NULL;
            jmethodID *SimpleBoolFunction::mids$ = NULL;
            bool SimpleBoolFunction::live$ = false;

            jclass SimpleBoolFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SimpleBoolFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31c80a0040f07e19] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_69d322032c5ae159] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_0fa993d09586181d] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/docvalues/BoolDocValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_func_a07347fa6ce00438] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;)Z");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SimpleBoolFunction::SimpleBoolFunction(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::valuesource::BoolFunction(env->newObject(initializeClass, &mids$, mid_init$_31c80a0040f07e19, a0.this$)) {}

            void SimpleBoolFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_69d322032c5ae159], a0.this$, a1.this$);
            }

            ::java::lang::String SimpleBoolFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean SimpleBoolFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::queries::function::docvalues::BoolDocValues SimpleBoolFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::docvalues::BoolDocValues(env->callObjectMethod(this$, mids$[mid_getValues_0fa993d09586181d], a0.this$, a1.this$));
            }

            jint SimpleBoolFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SimpleBoolFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleBoolFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SimpleBoolFunction_init_(t_SimpleBoolFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SimpleBoolFunction_createWeight(t_SimpleBoolFunction *self, PyObject *args);
            static PyObject *t_SimpleBoolFunction_description(t_SimpleBoolFunction *self, PyObject *args);
            static PyObject *t_SimpleBoolFunction_equals(t_SimpleBoolFunction *self, PyObject *args);
            static PyObject *t_SimpleBoolFunction_getValues(t_SimpleBoolFunction *self, PyObject *args);
            static PyObject *t_SimpleBoolFunction_hashCode(t_SimpleBoolFunction *self, PyObject *args);

            static PyMethodDef t_SimpleBoolFunction__methods_[] = {
              DECLARE_METHOD(t_SimpleBoolFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleBoolFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleBoolFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_SimpleBoolFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_SimpleBoolFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_SimpleBoolFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_SimpleBoolFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SimpleBoolFunction)[] = {
              { Py_tp_methods, t_SimpleBoolFunction__methods_ },
              { Py_tp_init, (void *) t_SimpleBoolFunction_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SimpleBoolFunction)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::BoolFunction),
              NULL
            };

            DEFINE_TYPE(SimpleBoolFunction, t_SimpleBoolFunction, SimpleBoolFunction);

            void t_SimpleBoolFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(SimpleBoolFunction), &PY_TYPE_DEF(SimpleBoolFunction), module, "SimpleBoolFunction", 0);
            }

            void t_SimpleBoolFunction::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleBoolFunction), "class_", make_descriptor(SimpleBoolFunction::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleBoolFunction), "wrapfn_", make_descriptor(t_SimpleBoolFunction::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleBoolFunction), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SimpleBoolFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SimpleBoolFunction::initializeClass, 1)))
                return NULL;
              return t_SimpleBoolFunction::wrap_Object(SimpleBoolFunction(((t_SimpleBoolFunction *) arg)->object.this$));
            }
            static PyObject *t_SimpleBoolFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SimpleBoolFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SimpleBoolFunction_init_(t_SimpleBoolFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              SimpleBoolFunction object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = SimpleBoolFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SimpleBoolFunction_createWeight(t_SimpleBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(SimpleBoolFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_SimpleBoolFunction_description(t_SimpleBoolFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(SimpleBoolFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_SimpleBoolFunction_equals(t_SimpleBoolFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(SimpleBoolFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_SimpleBoolFunction_getValues(t_SimpleBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::docvalues::BoolDocValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::docvalues::t_BoolDocValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(SimpleBoolFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_SimpleBoolFunction_hashCode(t_SimpleBoolFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(SimpleBoolFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/BitSetProducer.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/util/BitSet.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *BitSetProducer::class$ = NULL;
          jmethodID *BitSetProducer::mids$ = NULL;
          bool BitSetProducer::live$ = false;

          jclass BitSetProducer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/BitSetProducer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getBitSet_bdf8e92f0f41af8b] = env->getMethodID(cls, "getBitSet", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/util/BitSet;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::BitSet BitSetProducer::getBitSet(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return ::org::apache::lucene::util::BitSet(env->callObjectMethod(this$, mids$[mid_getBitSet_bdf8e92f0f41af8b], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_BitSetProducer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BitSetProducer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BitSetProducer_getBitSet(t_BitSetProducer *self, PyObject *arg);

          static PyMethodDef t_BitSetProducer__methods_[] = {
            DECLARE_METHOD(t_BitSetProducer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BitSetProducer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BitSetProducer, getBitSet, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BitSetProducer)[] = {
            { Py_tp_methods, t_BitSetProducer__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BitSetProducer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BitSetProducer, t_BitSetProducer, BitSetProducer);

          void t_BitSetProducer::install(PyObject *module)
          {
            installType(&PY_TYPE(BitSetProducer), &PY_TYPE_DEF(BitSetProducer), module, "BitSetProducer", 0);
          }

          void t_BitSetProducer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BitSetProducer), "class_", make_descriptor(BitSetProducer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BitSetProducer), "wrapfn_", make_descriptor(t_BitSetProducer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BitSetProducer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BitSetProducer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BitSetProducer::initializeClass, 1)))
              return NULL;
            return t_BitSetProducer::wrap_Object(BitSetProducer(((t_BitSetProducer *) arg)->object.this$));
          }
          static PyObject *t_BitSetProducer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BitSetProducer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BitSetProducer_getBitSet(t_BitSetProducer *self, PyObject *arg)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::BitSet result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getBitSet(a0));
              return ::org::apache::lucene::util::t_BitSet::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getBitSet", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedDataOutput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedDataOutput::class$ = NULL;
          jmethodID *PackedDataOutput::mids$ = NULL;
          bool PackedDataOutput::live$ = false;

          jclass PackedDataOutput::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedDataOutput");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ead2c38342037c59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_flush_f2cc1bce94666404] = env->getMethodID(cls, "flush", "()V");
              mids$[mid_writeLong_7cbcb52ba5068aff] = env->getMethodID(cls, "writeLong", "(JI)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedDataOutput::PackedDataOutput(const ::org::apache::lucene::store::DataOutput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ead2c38342037c59, a0.this$)) {}

          void PackedDataOutput::flush() const
          {
            env->callVoidMethod(this$, mids$[mid_flush_f2cc1bce94666404]);
          }

          void PackedDataOutput::writeLong(jlong a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeLong_7cbcb52ba5068aff], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedDataOutput_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedDataOutput_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedDataOutput_init_(t_PackedDataOutput *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedDataOutput_flush(t_PackedDataOutput *self);
          static PyObject *t_PackedDataOutput_writeLong(t_PackedDataOutput *self, PyObject *args);

          static PyMethodDef t_PackedDataOutput__methods_[] = {
            DECLARE_METHOD(t_PackedDataOutput, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedDataOutput, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedDataOutput, flush, METH_NOARGS),
            DECLARE_METHOD(t_PackedDataOutput, writeLong, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PackedDataOutput)[] = {
            { Py_tp_methods, t_PackedDataOutput__methods_ },
            { Py_tp_init, (void *) t_PackedDataOutput_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PackedDataOutput)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PackedDataOutput, t_PackedDataOutput, PackedDataOutput);

          void t_PackedDataOutput::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedDataOutput), &PY_TYPE_DEF(PackedDataOutput), module, "PackedDataOutput", 0);
          }

          void t_PackedDataOutput::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedDataOutput), "class_", make_descriptor(PackedDataOutput::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedDataOutput), "wrapfn_", make_descriptor(t_PackedDataOutput::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedDataOutput), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedDataOutput_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedDataOutput::initializeClass, 1)))
              return NULL;
            return t_PackedDataOutput::wrap_Object(PackedDataOutput(((t_PackedDataOutput *) arg)->object.this$));
          }
          static PyObject *t_PackedDataOutput_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedDataOutput::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedDataOutput_init_(t_PackedDataOutput *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            PackedDataOutput object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              INT_CALL(object = PackedDataOutput(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PackedDataOutput_flush(t_PackedDataOutput *self)
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          static PyObject *t_PackedDataOutput_writeLong(t_PackedDataOutput *self, PyObject *args)
          {
            jlong a0;
            jint a1;

            if (!parseArgs(args, "JI", &a0, &a1))
            {
              OBJ_CALL(self->object.writeLong(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "writeLong", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *TypeAsPayloadTokenFilter::class$ = NULL;
          jmethodID *TypeAsPayloadTokenFilter::mids$ = NULL;
          bool TypeAsPayloadTokenFilter::live$ = false;

          jclass TypeAsPayloadTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeAsPayloadTokenFilter::TypeAsPayloadTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean TypeAsPayloadTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_TypeAsPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAsPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeAsPayloadTokenFilter_init_(t_TypeAsPayloadTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeAsPayloadTokenFilter_incrementToken(t_TypeAsPayloadTokenFilter *self, PyObject *args);

          static PyMethodDef t_TypeAsPayloadTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TypeAsPayloadTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsPayloadTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsPayloadTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TypeAsPayloadTokenFilter)[] = {
            { Py_tp_methods, t_TypeAsPayloadTokenFilter__methods_ },
            { Py_tp_init, (void *) t_TypeAsPayloadTokenFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TypeAsPayloadTokenFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(TypeAsPayloadTokenFilter, t_TypeAsPayloadTokenFilter, TypeAsPayloadTokenFilter);

          void t_TypeAsPayloadTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAsPayloadTokenFilter), &PY_TYPE_DEF(TypeAsPayloadTokenFilter), module, "TypeAsPayloadTokenFilter", 0);
          }

          void t_TypeAsPayloadTokenFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeAsPayloadTokenFilter), "class_", make_descriptor(TypeAsPayloadTokenFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeAsPayloadTokenFilter), "wrapfn_", make_descriptor(t_TypeAsPayloadTokenFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeAsPayloadTokenFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeAsPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAsPayloadTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TypeAsPayloadTokenFilter::wrap_Object(TypeAsPayloadTokenFilter(((t_TypeAsPayloadTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TypeAsPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAsPayloadTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeAsPayloadTokenFilter_init_(t_TypeAsPayloadTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TypeAsPayloadTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TypeAsPayloadTokenFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeAsPayloadTokenFilter_incrementToken(t_TypeAsPayloadTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(TypeAsPayloadTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter$IndexTermSelector.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/codecs/blockterms/TermsIndexWriterBase$FieldWriter.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {

          ::java::lang::Class *VariableGapTermsIndexWriter::class$ = NULL;
          jmethodID *VariableGapTermsIndexWriter::mids$ = NULL;
          bool VariableGapTermsIndexWriter::live$ = false;

          jclass VariableGapTermsIndexWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cea6e77416591f4a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;Lorg/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter$IndexTermSelector;)V");
              mids$[mid_addField_d1b1b077f554cd9d] = env->getMethodID(cls, "addField", "(Lorg/apache/lucene/index/FieldInfo;J)Lorg/apache/lucene/codecs/blockterms/TermsIndexWriterBase$FieldWriter;");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_indexedTermPrefixLength_f465493e4f3be174] = env->getMethodID(cls, "indexedTermPrefixLength", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          VariableGapTermsIndexWriter::VariableGapTermsIndexWriter(const ::org::apache::lucene::index::SegmentWriteState & a0, const ::org::apache::lucene::codecs::blockterms::VariableGapTermsIndexWriter$IndexTermSelector & a1) : ::org::apache::lucene::codecs::blockterms::TermsIndexWriterBase(env->newObject(initializeClass, &mids$, mid_init$_cea6e77416591f4a, a0.this$, a1.this$)) {}

          ::org::apache::lucene::codecs::blockterms::TermsIndexWriterBase$FieldWriter VariableGapTermsIndexWriter::addField(const ::org::apache::lucene::index::FieldInfo & a0, jlong a1) const
          {
            return ::org::apache::lucene::codecs::blockterms::TermsIndexWriterBase$FieldWriter(env->callObjectMethod(this$, mids$[mid_addField_d1b1b077f554cd9d], a0.this$, a1));
          }

          void VariableGapTermsIndexWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector.h"
#include "org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter$EveryNTermSelector.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {
          static PyObject *t_VariableGapTermsIndexWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_VariableGapTermsIndexWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_VariableGapTermsIndexWriter_init_(t_VariableGapTermsIndexWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_VariableGapTermsIndexWriter_addField(t_VariableGapTermsIndexWriter *self, PyObject *args);
          static PyObject *t_VariableGapTermsIndexWriter_close(t_VariableGapTermsIndexWriter *self, PyObject *args);

          static PyMethodDef t_VariableGapTermsIndexWriter__methods_[] = {
            DECLARE_METHOD(t_VariableGapTermsIndexWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VariableGapTermsIndexWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VariableGapTermsIndexWriter, addField, METH_VARARGS),
            DECLARE_METHOD(t_VariableGapTermsIndexWriter, close, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(VariableGapTermsIndexWriter)[] = {
            { Py_tp_methods, t_VariableGapTermsIndexWriter__methods_ },
            { Py_tp_init, (void *) t_VariableGapTermsIndexWriter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(VariableGapTermsIndexWriter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::blockterms::TermsIndexWriterBase),
            NULL
          };

          DEFINE_TYPE(VariableGapTermsIndexWriter, t_VariableGapTermsIndexWriter, VariableGapTermsIndexWriter);

          void t_VariableGapTermsIndexWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(VariableGapTermsIndexWriter), &PY_TYPE_DEF(VariableGapTermsIndexWriter), module, "VariableGapTermsIndexWriter", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableGapTermsIndexWriter), "EveryNOrDocFreqTermSelector", make_descriptor(&PY_TYPE_DEF(VariableGapTermsIndexWriter$EveryNOrDocFreqTermSelector)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableGapTermsIndexWriter), "EveryNTermSelector", make_descriptor(&PY_TYPE_DEF(VariableGapTermsIndexWriter$EveryNTermSelector)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableGapTermsIndexWriter), "IndexTermSelector", make_descriptor(&PY_TYPE_DEF(VariableGapTermsIndexWriter$IndexTermSelector)));
          }

          void t_VariableGapTermsIndexWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableGapTermsIndexWriter), "class_", make_descriptor(VariableGapTermsIndexWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableGapTermsIndexWriter), "wrapfn_", make_descriptor(t_VariableGapTermsIndexWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableGapTermsIndexWriter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_VariableGapTermsIndexWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, VariableGapTermsIndexWriter::initializeClass, 1)))
              return NULL;
            return t_VariableGapTermsIndexWriter::wrap_Object(VariableGapTermsIndexWriter(((t_VariableGapTermsIndexWriter *) arg)->object.this$));
          }
          static PyObject *t_VariableGapTermsIndexWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, VariableGapTermsIndexWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_VariableGapTermsIndexWriter_init_(t_VariableGapTermsIndexWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::blockterms::VariableGapTermsIndexWriter$IndexTermSelector a1((jobject) NULL);
            VariableGapTermsIndexWriter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentWriteState::initializeClass, ::org::apache::lucene::codecs::blockterms::VariableGapTermsIndexWriter$IndexTermSelector::initializeClass, &a0, &a1))
            {
              INT_CALL(object = VariableGapTermsIndexWriter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_VariableGapTermsIndexWriter_addField(t_VariableGapTermsIndexWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            jlong a1;
            ::org::apache::lucene::codecs::blockterms::TermsIndexWriterBase$FieldWriter result((jobject) NULL);

            if (!parseArgs(args, "kJ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.addField(a0, a1));
              return ::org::apache::lucene::codecs::blockterms::t_TermsIndexWriterBase$FieldWriter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(VariableGapTermsIndexWriter), (PyObject *) self, "addField", args, 2);
          }

          static PyObject *t_VariableGapTermsIndexWriter_close(t_VariableGapTermsIndexWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(VariableGapTermsIndexWriter), (PyObject *) self, "close", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilteredTermsEnum.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "org/apache/lucene/index/ImpactsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilteredTermsEnum::class$ = NULL;
        jmethodID *FilteredTermsEnum::mids$ = NULL;
        bool FilteredTermsEnum::live$ = false;

        jclass FilteredTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilteredTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b7231ad6ff0513b1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;)V");
            mids$[mid_init$_4ff6dd2288d2c0ae] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Z)V");
            mids$[mid_attributes_8fce18d62d0e145e] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_docFreq_9972fcc56b44e79d] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_impacts_db5ea3c87adc7c65] = env->getMethodID(cls, "impacts", "(I)Lorg/apache/lucene/index/ImpactsEnum;");
            mids$[mid_next_7af2ea2e37ce82b8] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_ord_2e5ae9edcb9b072f] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_postings_bb7f8f714d51176b] = env->getMethodID(cls, "postings", "(Lorg/apache/lucene/index/PostingsEnum;I)Lorg/apache/lucene/index/PostingsEnum;");
            mids$[mid_seekCeil_78824f53cd7bdb8a] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_553d972fe19daaec] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_9c778c9bce6694df] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_seekExact_59a5c9565dacabef] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_term_7af2ea2e37ce82b8] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_termState_774a8ebb2c222d2d] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
            mids$[mid_totalTermFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "totalTermFreq", "()J");
            mids$[mid_setInitialSeekTerm_0bdfd2603b7490a8] = env->getMethodID(cls, "setInitialSeekTerm", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_nextSeekTerm_858d77d551759ace] = env->getMethodID(cls, "nextSeekTerm", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_accept_dc5d5822c627e12a] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredTermsEnum::FilteredTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_b7231ad6ff0513b1, a0.this$)) {}

        FilteredTermsEnum::FilteredTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, jboolean a1) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_4ff6dd2288d2c0ae, a0.this$, a1)) {}

        ::org::apache::lucene::util::AttributeSource FilteredTermsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_8fce18d62d0e145e]));
        }

        jint FilteredTermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::ImpactsEnum FilteredTermsEnum::impacts(jint a0) const
        {
          return ::org::apache::lucene::index::ImpactsEnum(env->callObjectMethod(this$, mids$[mid_impacts_db5ea3c87adc7c65], a0));
        }

        ::org::apache::lucene::util::BytesRef FilteredTermsEnum::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_7af2ea2e37ce82b8]));
        }

        jlong FilteredTermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::index::PostingsEnum FilteredTermsEnum::postings(const ::org::apache::lucene::index::PostingsEnum & a0, jint a1) const
        {
          return ::org::apache::lucene::index::PostingsEnum(env->callObjectMethod(this$, mids$[mid_postings_bb7f8f714d51176b], a0.this$, a1));
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus FilteredTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_78824f53cd7bdb8a], a0.this$));
        }

        jboolean FilteredTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_553d972fe19daaec], a0.this$);
        }

        void FilteredTermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_9c778c9bce6694df], a0);
        }

        void FilteredTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_59a5c9565dacabef], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::BytesRef FilteredTermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_7af2ea2e37ce82b8]));
        }

        ::org::apache::lucene::index::TermState FilteredTermsEnum::termState() const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_774a8ebb2c222d2d]));
        }

        jlong FilteredTermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilteredTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredTermsEnum_init_(t_FilteredTermsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredTermsEnum_attributes(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_docFreq(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_impacts(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_next(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_ord(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_postings(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_seekCeil(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_seekExact(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_term(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_termState(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_totalTermFreq(t_FilteredTermsEnum *self, PyObject *args);

        static PyMethodDef t_FilteredTermsEnum__methods_[] = {
          DECLARE_METHOD(t_FilteredTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredTermsEnum, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, impacts, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, next, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, ord, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, postings, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, seekCeil, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, term, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, termState, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilteredTermsEnum)[] = {
          { Py_tp_methods, t_FilteredTermsEnum__methods_ },
          { Py_tp_init, (void *) t_FilteredTermsEnum_init_ },
          { Py_tp_iter, (void *) PyObject_SelfIter },
          { Py_tp_iternext, (void *) ((PyObject *(*)(t_FilteredTermsEnum *)) get_next< t_FilteredTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >) },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilteredTermsEnum)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::TermsEnum),
          NULL
        };

        DEFINE_TYPE(FilteredTermsEnum, t_FilteredTermsEnum, FilteredTermsEnum);

        void t_FilteredTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredTermsEnum), &PY_TYPE_DEF(FilteredTermsEnum), module, "FilteredTermsEnum", 0);
        }

        void t_FilteredTermsEnum::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilteredTermsEnum), "class_", make_descriptor(FilteredTermsEnum::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilteredTermsEnum), "wrapfn_", make_descriptor(t_FilteredTermsEnum::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilteredTermsEnum), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredTermsEnum::initializeClass, 1)))
            return NULL;
          return t_FilteredTermsEnum::wrap_Object(FilteredTermsEnum(((t_FilteredTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_FilteredTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredTermsEnum_init_(t_FilteredTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
              FilteredTermsEnum object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
              {
                INT_CALL(object = FilteredTermsEnum(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
              jboolean a1;
              FilteredTermsEnum object((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FilteredTermsEnum(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilteredTermsEnum_attributes(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilteredTermsEnum), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_docFreq(t_FilteredTermsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docFreq());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilteredTermsEnum), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_impacts(t_FilteredTermsEnum *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::ImpactsEnum result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.impacts(a0));
            return ::org::apache::lucene::index::t_ImpactsEnum::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilteredTermsEnum), (PyObject *) self, "impacts", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_next(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilteredTermsEnum), (PyObject *) self, "next", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_ord(t_FilteredTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilteredTermsEnum), (PyObject *) self, "ord", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_postings(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::index::PostingsEnum a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::index::PostingsEnum result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::PostingsEnum::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.postings(a0, a1));
            return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilteredTermsEnum), (PyObject *) self, "postings", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_seekCeil(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilteredTermsEnum), (PyObject *) self, "seekCeil", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_seekExact(t_FilteredTermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.seekExact(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.seekExact(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(PY_TYPE(FilteredTermsEnum), (PyObject *) self, "seekExact", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_term(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilteredTermsEnum), (PyObject *) self, "term", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_termState(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.termState());
            return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilteredTermsEnum), (PyObject *) self, "termState", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_totalTermFreq(t_FilteredTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.totalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilteredTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$OneMergeProgress.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/MergePolicy$OneMergeProgress$PauseReason.h"
#include "java/lang/Long.h"
#include "java/util/function/BooleanSupplier.h"
#include "java/lang/Class.h"
#include "java/lang/InterruptedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$OneMergeProgress::class$ = NULL;
        jmethodID *MergePolicy$OneMergeProgress::mids$ = NULL;
        bool MergePolicy$OneMergeProgress::live$ = false;

        jclass MergePolicy$OneMergeProgress::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$OneMergeProgress");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_abort_f2cc1bce94666404] = env->getMethodID(cls, "abort", "()V");
            mids$[mid_getPauseTimes_1c3426541413a55d] = env->getMethodID(cls, "getPauseTimes", "()Ljava/util/Map;");
            mids$[mid_isAborted_8454bd5aa23fd11e] = env->getMethodID(cls, "isAborted", "()Z");
            mids$[mid_pauseNanos_3dfa57aab57335f1] = env->getMethodID(cls, "pauseNanos", "(JLorg/apache/lucene/index/MergePolicy$OneMergeProgress$PauseReason;Ljava/util/function/BooleanSupplier;)V");
            mids$[mid_wakeup_f2cc1bce94666404] = env->getMethodID(cls, "wakeup", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$OneMergeProgress::MergePolicy$OneMergeProgress() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void MergePolicy$OneMergeProgress::abort() const
        {
          env->callVoidMethod(this$, mids$[mid_abort_f2cc1bce94666404]);
        }

        ::java::util::Map MergePolicy$OneMergeProgress::getPauseTimes() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getPauseTimes_1c3426541413a55d]));
        }

        jboolean MergePolicy$OneMergeProgress::isAborted() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isAborted_8454bd5aa23fd11e]);
        }

        void MergePolicy$OneMergeProgress::pauseNanos(jlong a0, const ::org::apache::lucene::index::MergePolicy$OneMergeProgress$PauseReason & a1, const ::java::util::function::BooleanSupplier & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_pauseNanos_3dfa57aab57335f1], a0, a1.this$, a2.this$);
        }

        void MergePolicy$OneMergeProgress::wakeup() const
        {
          env->callVoidMethod(this$, mids$[mid_wakeup_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$OneMergeProgress_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$OneMergeProgress_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy$OneMergeProgress_init_(t_MergePolicy$OneMergeProgress *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergePolicy$OneMergeProgress_abort(t_MergePolicy$OneMergeProgress *self);
        static PyObject *t_MergePolicy$OneMergeProgress_getPauseTimes(t_MergePolicy$OneMergeProgress *self);
        static PyObject *t_MergePolicy$OneMergeProgress_isAborted(t_MergePolicy$OneMergeProgress *self);
        static PyObject *t_MergePolicy$OneMergeProgress_pauseNanos(t_MergePolicy$OneMergeProgress *self, PyObject *args);
        static PyObject *t_MergePolicy$OneMergeProgress_wakeup(t_MergePolicy$OneMergeProgress *self);
        static PyObject *t_MergePolicy$OneMergeProgress_get__aborted(t_MergePolicy$OneMergeProgress *self, void *data);
        static PyObject *t_MergePolicy$OneMergeProgress_get__pauseTimes(t_MergePolicy$OneMergeProgress *self, void *data);
        static PyGetSetDef t_MergePolicy$OneMergeProgress__fields_[] = {
          DECLARE_GET_FIELD(t_MergePolicy$OneMergeProgress, aborted),
          DECLARE_GET_FIELD(t_MergePolicy$OneMergeProgress, pauseTimes),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy$OneMergeProgress__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$OneMergeProgress, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$OneMergeProgress, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$OneMergeProgress, abort, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMergeProgress, getPauseTimes, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMergeProgress, isAborted, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMergeProgress, pauseNanos, METH_VARARGS),
          DECLARE_METHOD(t_MergePolicy$OneMergeProgress, wakeup, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MergePolicy$OneMergeProgress)[] = {
          { Py_tp_methods, t_MergePolicy$OneMergeProgress__methods_ },
          { Py_tp_init, (void *) t_MergePolicy$OneMergeProgress_init_ },
          { Py_tp_getset, t_MergePolicy$OneMergeProgress__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MergePolicy$OneMergeProgress)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MergePolicy$OneMergeProgress, t_MergePolicy$OneMergeProgress, MergePolicy$OneMergeProgress);

        void t_MergePolicy$OneMergeProgress::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$OneMergeProgress), &PY_TYPE_DEF(MergePolicy$OneMergeProgress), module, "MergePolicy$OneMergeProgress", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$OneMergeProgress), "PauseReason", make_descriptor(&PY_TYPE_DEF(MergePolicy$OneMergeProgress$PauseReason)));
        }

        void t_MergePolicy$OneMergeProgress::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$OneMergeProgress), "class_", make_descriptor(MergePolicy$OneMergeProgress::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$OneMergeProgress), "wrapfn_", make_descriptor(t_MergePolicy$OneMergeProgress::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$OneMergeProgress), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$OneMergeProgress_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$OneMergeProgress::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$OneMergeProgress::wrap_Object(MergePolicy$OneMergeProgress(((t_MergePolicy$OneMergeProgress *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$OneMergeProgress_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$OneMergeProgress::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy$OneMergeProgress_init_(t_MergePolicy$OneMergeProgress *self, PyObject *args, PyObject *kwds)
        {
          MergePolicy$OneMergeProgress object((jobject) NULL);

          INT_CALL(object = MergePolicy$OneMergeProgress());
          self->object = object;

          return 0;
        }

        static PyObject *t_MergePolicy$OneMergeProgress_abort(t_MergePolicy$OneMergeProgress *self)
        {
          OBJ_CALL(self->object.abort());
          Py_RETURN_NONE;
        }

        static PyObject *t_MergePolicy$OneMergeProgress_getPauseTimes(t_MergePolicy$OneMergeProgress *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getPauseTimes());
          return ::java::util::t_Map::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(MergePolicy$OneMergeProgress$PauseReason), ::java::lang::PY_TYPE(Long));
        }

        static PyObject *t_MergePolicy$OneMergeProgress_isAborted(t_MergePolicy$OneMergeProgress *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isAborted());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MergePolicy$OneMergeProgress_pauseNanos(t_MergePolicy$OneMergeProgress *self, PyObject *args)
        {
          jlong a0;
          ::org::apache::lucene::index::MergePolicy$OneMergeProgress$PauseReason a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::util::function::BooleanSupplier a2((jobject) NULL);

          if (!parseArgs(args, "JKk", ::org::apache::lucene::index::MergePolicy$OneMergeProgress$PauseReason::initializeClass, ::java::util::function::BooleanSupplier::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_MergePolicy$OneMergeProgress$PauseReason::parameters_, &a2))
          {
            OBJ_CALL(self->object.pauseNanos(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "pauseNanos", args);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMergeProgress_wakeup(t_MergePolicy$OneMergeProgress *self)
        {
          OBJ_CALL(self->object.wakeup());
          Py_RETURN_NONE;
        }

        static PyObject *t_MergePolicy$OneMergeProgress_get__aborted(t_MergePolicy$OneMergeProgress *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isAborted());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_MergePolicy$OneMergeProgress_get__pauseTimes(t_MergePolicy$OneMergeProgress *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getPauseTimes());
          return ::java::util::t_Map::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SolrSynonymParser.h"
#include "java/io/Reader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SolrSynonymParser::class$ = NULL;
          jmethodID *SolrSynonymParser::mids$ = NULL;
          bool SolrSynonymParser::live$ = false;

          jclass SolrSynonymParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SolrSynonymParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6baf6b3ab76d877e] = env->getMethodID(cls, "<init>", "(ZZLorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_parse_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "parse", "(Ljava/io/Reader;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SolrSynonymParser::SolrSynonymParser(jboolean a0, jboolean a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::analysis::synonym::SynonymMap$Parser(env->newObject(initializeClass, &mids$, mid_init$_6baf6b3ab76d877e, a0, a1, a2.this$)) {}

          void SolrSynonymParser::parse(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_parse_b2f3c57f5e6eb3f2], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SolrSynonymParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SolrSynonymParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SolrSynonymParser_init_(t_SolrSynonymParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SolrSynonymParser_parse(t_SolrSynonymParser *self, PyObject *args);

          static PyMethodDef t_SolrSynonymParser__methods_[] = {
            DECLARE_METHOD(t_SolrSynonymParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SolrSynonymParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SolrSynonymParser, parse, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SolrSynonymParser)[] = {
            { Py_tp_methods, t_SolrSynonymParser__methods_ },
            { Py_tp_init, (void *) t_SolrSynonymParser_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SolrSynonymParser)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::synonym::SynonymMap$Parser),
            NULL
          };

          DEFINE_TYPE(SolrSynonymParser, t_SolrSynonymParser, SolrSynonymParser);

          void t_SolrSynonymParser::install(PyObject *module)
          {
            installType(&PY_TYPE(SolrSynonymParser), &PY_TYPE_DEF(SolrSynonymParser), module, "SolrSynonymParser", 0);
          }

          void t_SolrSynonymParser::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SolrSynonymParser), "class_", make_descriptor(SolrSynonymParser::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SolrSynonymParser), "wrapfn_", make_descriptor(t_SolrSynonymParser::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SolrSynonymParser), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SolrSynonymParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SolrSynonymParser::initializeClass, 1)))
              return NULL;
            return t_SolrSynonymParser::wrap_Object(SolrSynonymParser(((t_SolrSynonymParser *) arg)->object.this$));
          }
          static PyObject *t_SolrSynonymParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SolrSynonymParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SolrSynonymParser_init_(t_SolrSynonymParser *self, PyObject *args, PyObject *kwds)
          {
            jboolean a0;
            jboolean a1;
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            SolrSynonymParser object((jobject) NULL);

            if (!parseArgs(args, "ZZk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SolrSynonymParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SolrSynonymParser_parse(t_SolrSynonymParser *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.parse(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SolrSynonymParser), (PyObject *) self, "parse", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/MultiTrie.h"
#include "java/lang/Class.h"
#include "java/io/PrintStream.h"
#include "java/io/DataOutput.h"
#include "org/egothor/stemmer/Reduce.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "java/io/DataInput.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *MultiTrie::class$ = NULL;
      jmethodID *MultiTrie::mids$ = NULL;
      bool MultiTrie::live$ = false;

      jclass MultiTrie::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/MultiTrie");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_9d72768e8fdce2b7] = env->getMethodID(cls, "<init>", "(Z)V");
          mids$[mid_init$_e764c090f1e602d9] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
          mids$[mid_add_64031c067d5ae464] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V");
          mids$[mid_getFully_7239fae546f0688a] = env->getMethodID(cls, "getFully", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_getLastOnPath_7239fae546f0688a] = env->getMethodID(cls, "getLastOnPath", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_printInfo_46845747c362f3cd] = env->getMethodID(cls, "printInfo", "(Ljava/io/PrintStream;Ljava/lang/CharSequence;)V");
          mids$[mid_reduce_6c0a4cfd21a57862] = env->getMethodID(cls, "reduce", "(Lorg/egothor/stemmer/Reduce;)Lorg/egothor/stemmer/Trie;");
          mids$[mid_store_d7f8caf61d54d699] = env->getMethodID(cls, "store", "(Ljava/io/DataOutput;)V");

          class$ = new ::java::lang::Class(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      MultiTrie::MultiTrie(jboolean a0) : ::org::egothor::stemmer::Trie(env->newObject(initializeClass, &mids$, mid_init$_9d72768e8fdce2b7, a0)) {}

      MultiTrie::MultiTrie(const ::java::io::DataInput & a0) : ::org::egothor::stemmer::Trie(env->newObject(initializeClass, &mids$, mid_init$_e764c090f1e602d9, a0.this$)) {}

      void MultiTrie::add(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_add_64031c067d5ae464], a0.this$, a1.this$);
      }

      ::java::lang::CharSequence MultiTrie::getFully(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getFully_7239fae546f0688a], a0.this$));
      }

      ::java::lang::CharSequence MultiTrie::getLastOnPath(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getLastOnPath_7239fae546f0688a], a0.this$));
      }

      void MultiTrie::printInfo(const ::java::io::PrintStream & a0, const ::java::lang::CharSequence & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_printInfo_46845747c362f3cd], a0.this$, a1.this$);
      }

      ::org::egothor::stemmer::Trie MultiTrie::reduce(const ::org::egothor::stemmer::Reduce & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_reduce_6c0a4cfd21a57862], a0.this$));
      }

      void MultiTrie::store(const ::java::io::DataOutput & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_store_d7f8caf61d54d699], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_MultiTrie_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_MultiTrie_instance_(PyTypeObject *type, PyObject *arg);
      static int t_MultiTrie_init_(t_MultiTrie *self, PyObject *args, PyObject *kwds);
      static PyObject *t_MultiTrie_add(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_getFully(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_getLastOnPath(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_printInfo(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_reduce(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_store(t_MultiTrie *self, PyObject *args);

      static PyMethodDef t_MultiTrie__methods_[] = {
        DECLARE_METHOD(t_MultiTrie, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_MultiTrie, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_MultiTrie, add, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, getFully, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, getLastOnPath, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, printInfo, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, reduce, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, store, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      static PyType_Slot PY_TYPE_SLOTS(MultiTrie)[] = {
        { Py_tp_methods, t_MultiTrie__methods_ },
        { Py_tp_init, (void *) t_MultiTrie_init_ },
        { 0, NULL }
      };

      static PyType_Def *PY_TYPE_BASES(MultiTrie)[] = {
        &PY_TYPE_DEF(::org::egothor::stemmer::Trie),
        NULL
      };

      DEFINE_TYPE(MultiTrie, t_MultiTrie, MultiTrie);

      void t_MultiTrie::install(PyObject *module)
      {
        installType(&PY_TYPE(MultiTrie), &PY_TYPE_DEF(MultiTrie), module, "MultiTrie", 0);
      }

      void t_MultiTrie::initialize(PyObject *module)
      {
        PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTrie), "class_", make_descriptor(MultiTrie::initializeClass, 1));
        PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTrie), "wrapfn_", make_descriptor(t_MultiTrie::wrap_jobject));
        PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTrie), "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_MultiTrie_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, MultiTrie::initializeClass, 1)))
          return NULL;
        return t_MultiTrie::wrap_Object(MultiTrie(((t_MultiTrie *) arg)->object.this$));
      }
      static PyObject *t_MultiTrie_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, MultiTrie::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_MultiTrie_init_(t_MultiTrie *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            jboolean a0;
            MultiTrie object((jobject) NULL);

            if (!parseArgs(args, "Z", &a0))
            {
              INT_CALL(object = MultiTrie(a0));
              self->object = object;
              break;
            }
          }
          {
            ::java::io::DataInput a0((jobject) NULL);
            MultiTrie object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = MultiTrie(a0));
              self->object = object;
              break;
            }
          }
         default:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_MultiTrie_add(t_MultiTrie *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "OO", ::java::lang::PY_TYPE(CharSequence), ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(self->object.add(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "add", args);
        return NULL;
      }

      static PyObject *t_MultiTrie_getFully(t_MultiTrie *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArgs(args, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getFully(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        return callSuper(PY_TYPE(MultiTrie), (PyObject *) self, "getFully", args, 2);
      }

      static PyObject *t_MultiTrie_getLastOnPath(t_MultiTrie *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArgs(args, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getLastOnPath(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        return callSuper(PY_TYPE(MultiTrie), (PyObject *) self, "getLastOnPath", args, 2);
      }

      static PyObject *t_MultiTrie_printInfo(t_MultiTrie *self, PyObject *args)
      {
        ::java::io::PrintStream a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "kO", ::java::io::PrintStream::initializeClass, ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(self->object.printInfo(a0, a1));
          Py_RETURN_NONE;
        }

        return callSuper(PY_TYPE(MultiTrie), (PyObject *) self, "printInfo", args, 2);
      }

      static PyObject *t_MultiTrie_reduce(t_MultiTrie *self, PyObject *args)
      {
        ::org::egothor::stemmer::Reduce a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Reduce::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.reduce(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(PY_TYPE(MultiTrie), (PyObject *) self, "reduce", args, 2);
      }

      static PyObject *t_MultiTrie_store(t_MultiTrie *self, PyObject *args)
      {
        ::java::io::DataOutput a0((jobject) NULL);

        if (!parseArgs(args, "k", ::java::io::DataOutput::initializeClass, &a0))
        {
          OBJ_CALL(self->object.store(a0));
          Py_RETURN_NONE;
        }

        return callSuper(PY_TYPE(MultiTrie), (PyObject *) self, "store", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ConstantScoreWeight.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ConstantScoreWeight::class$ = NULL;
        jmethodID *ConstantScoreWeight::mids$ = NULL;
        bool ConstantScoreWeight::live$ = false;

        jclass ConstantScoreWeight::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ConstantScoreWeight");

            mids$ = new jmethodID[max_mid];
            mids$[mid_explain_4cf8bab0b7954f4a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/index/LeafReaderContext;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_extractTerms_d5a4a8d4b806f0ba] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_score_58aec2b64dff50c8] = env->getMethodID(cls, "score", "()F");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::Explanation ConstantScoreWeight::explain(const ::org::apache::lucene::index::LeafReaderContext & a0, jint a1) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_4cf8bab0b7954f4a], a0.this$, a1));
        }

        void ConstantScoreWeight::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_d5a4a8d4b806f0ba], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ConstantScoreWeight_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConstantScoreWeight_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConstantScoreWeight_explain(t_ConstantScoreWeight *self, PyObject *args);
        static PyObject *t_ConstantScoreWeight_extractTerms(t_ConstantScoreWeight *self, PyObject *args);

        static PyMethodDef t_ConstantScoreWeight__methods_[] = {
          DECLARE_METHOD(t_ConstantScoreWeight, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreWeight, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreWeight, explain, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreWeight, extractTerms, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ConstantScoreWeight)[] = {
          { Py_tp_methods, t_ConstantScoreWeight__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ConstantScoreWeight)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Weight),
          NULL
        };

        DEFINE_TYPE(ConstantScoreWeight, t_ConstantScoreWeight, ConstantScoreWeight);

        void t_ConstantScoreWeight::install(PyObject *module)
        {
          installType(&PY_TYPE(ConstantScoreWeight), &PY_TYPE_DEF(ConstantScoreWeight), module, "ConstantScoreWeight", 0);
        }

        void t_ConstantScoreWeight::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ConstantScoreWeight), "class_", make_descriptor(ConstantScoreWeight::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ConstantScoreWeight), "wrapfn_", make_descriptor(t_ConstantScoreWeight::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ConstantScoreWeight), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ConstantScoreWeight_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ConstantScoreWeight::initializeClass, 1)))
            return NULL;
          return t_ConstantScoreWeight::wrap_Object(ConstantScoreWeight(((t_ConstantScoreWeight *) arg)->object.this$));
        }
        static PyObject *t_ConstantScoreWeight_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ConstantScoreWeight::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ConstantScoreWeight_explain(t_ConstantScoreWeight *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.explain(a0, a1));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ConstantScoreWeight), (PyObject *) self, "explain", args, 2);
        }

        static PyObject *t_ConstantScoreWeight_extractTerms(t_ConstantScoreWeight *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ConstantScoreWeight), (PyObject *) self, "extractTerms", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *NormsProducer::class$ = NULL;
        jmethodID *NormsProducer::mids$ = NULL;
        bool NormsProducer::live$ = false;

        jclass NormsProducer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/NormsProducer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_getMergeInstance_0502194d89d40c22] = env->getMethodID(cls, "getMergeInstance", "()Lorg/apache/lucene/codecs/NormsProducer;");
            mids$[mid_getNorms_d63b818fc8746ddc] = env->getMethodID(cls, "getNorms", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/NumericDocValues;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void NormsProducer::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
        }

        NormsProducer NormsProducer::getMergeInstance() const
        {
          return NormsProducer(env->callObjectMethod(this$, mids$[mid_getMergeInstance_0502194d89d40c22]));
        }

        ::org::apache::lucene::index::NumericDocValues NormsProducer::getNorms(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNorms_d63b818fc8746ddc], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_NormsProducer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NormsProducer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NormsProducer_checkIntegrity(t_NormsProducer *self);
        static PyObject *t_NormsProducer_getMergeInstance(t_NormsProducer *self);
        static PyObject *t_NormsProducer_getNorms(t_NormsProducer *self, PyObject *arg);
        static PyObject *t_NormsProducer_get__mergeInstance(t_NormsProducer *self, void *data);
        static PyGetSetDef t_NormsProducer__fields_[] = {
          DECLARE_GET_FIELD(t_NormsProducer, mergeInstance),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NormsProducer__methods_[] = {
          DECLARE_METHOD(t_NormsProducer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NormsProducer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NormsProducer, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_NormsProducer, getMergeInstance, METH_NOARGS),
          DECLARE_METHOD(t_NormsProducer, getNorms, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NormsProducer)[] = {
          { Py_tp_methods, t_NormsProducer__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_NormsProducer__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NormsProducer)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(NormsProducer, t_NormsProducer, NormsProducer);

        void t_NormsProducer::install(PyObject *module)
        {
          installType(&PY_TYPE(NormsProducer), &PY_TYPE_DEF(NormsProducer), module, "NormsProducer", 0);
        }

        void t_NormsProducer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NormsProducer), "class_", make_descriptor(NormsProducer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NormsProducer), "wrapfn_", make_descriptor(t_NormsProducer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NormsProducer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NormsProducer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NormsProducer::initializeClass, 1)))
            return NULL;
          return t_NormsProducer::wrap_Object(NormsProducer(((t_NormsProducer *) arg)->object.this$));
        }
        static PyObject *t_NormsProducer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NormsProducer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NormsProducer_checkIntegrity(t_NormsProducer *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_NormsProducer_getMergeInstance(t_NormsProducer *self)
        {
          NormsProducer result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergeInstance());
          return t_NormsProducer::wrap_Object(result);
        }

        static PyObject *t_NormsProducer_getNorms(t_NormsProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getNorms(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getNorms", arg);
          return NULL;
        }

        static PyObject *t_NormsProducer_get__mergeInstance(t_NormsProducer *self, void *data)
        {
          NormsProducer value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeInstance());
          return t_NormsProducer::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SrndTermQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SrndTermQuery::class$ = NULL;
            jmethodID *SrndTermQuery::mids$ = NULL;
            bool SrndTermQuery::live$ = false;

            jclass SrndTermQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SrndTermQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b1180807b87ba737] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
                mids$[mid_getLuceneTerm_2f9dcfe885c5ffa0] = env->getMethodID(cls, "getLuceneTerm", "(Ljava/lang/String;)Lorg/apache/lucene/index/Term;");
                mids$[mid_getTermText_db9b55ba01e03e4b] = env->getMethodID(cls, "getTermText", "()Ljava/lang/String;");
                mids$[mid_toStringUnquoted_db9b55ba01e03e4b] = env->getMethodID(cls, "toStringUnquoted", "()Ljava/lang/String;");
                mids$[mid_visitMatchingTerms_dbcd50bd393e5e56] = env->getMethodID(cls, "visitMatchingTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SrndTermQuery::SrndTermQuery(const ::java::lang::String & a0, jboolean a1) : ::org::apache::lucene::queryparser::surround::query::SimpleTerm(env->newObject(initializeClass, &mids$, mid_init$_b1180807b87ba737, a0.this$, a1)) {}

            ::org::apache::lucene::index::Term SrndTermQuery::getLuceneTerm(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getLuceneTerm_2f9dcfe885c5ffa0], a0.this$));
            }

            ::java::lang::String SrndTermQuery::getTermText() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTermText_db9b55ba01e03e4b]));
            }

            ::java::lang::String SrndTermQuery::toStringUnquoted() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringUnquoted_db9b55ba01e03e4b]));
            }

            void SrndTermQuery::visitMatchingTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerms_dbcd50bd393e5e56], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SrndTermQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SrndTermQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SrndTermQuery_init_(t_SrndTermQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SrndTermQuery_getLuceneTerm(t_SrndTermQuery *self, PyObject *arg);
            static PyObject *t_SrndTermQuery_getTermText(t_SrndTermQuery *self);
            static PyObject *t_SrndTermQuery_toStringUnquoted(t_SrndTermQuery *self, PyObject *args);
            static PyObject *t_SrndTermQuery_visitMatchingTerms(t_SrndTermQuery *self, PyObject *args);
            static PyObject *t_SrndTermQuery_get__termText(t_SrndTermQuery *self, void *data);
            static PyGetSetDef t_SrndTermQuery__fields_[] = {
              DECLARE_GET_FIELD(t_SrndTermQuery, termText),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SrndTermQuery__methods_[] = {
              DECLARE_METHOD(t_SrndTermQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndTermQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndTermQuery, getLuceneTerm, METH_O),
              DECLARE_METHOD(t_SrndTermQuery, getTermText, METH_NOARGS),
              DECLARE_METHOD(t_SrndTermQuery, toStringUnquoted, METH_VARARGS),
              DECLARE_METHOD(t_SrndTermQuery, visitMatchingTerms, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SrndTermQuery)[] = {
              { Py_tp_methods, t_SrndTermQuery__methods_ },
              { Py_tp_init, (void *) t_SrndTermQuery_init_ },
              { Py_tp_getset, t_SrndTermQuery__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SrndTermQuery)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::surround::query::SimpleTerm),
              NULL
            };

            DEFINE_TYPE(SrndTermQuery, t_SrndTermQuery, SrndTermQuery);

            void t_SrndTermQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(SrndTermQuery), &PY_TYPE_DEF(SrndTermQuery), module, "SrndTermQuery", 0);
            }

            void t_SrndTermQuery::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SrndTermQuery), "class_", make_descriptor(SrndTermQuery::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SrndTermQuery), "wrapfn_", make_descriptor(t_SrndTermQuery::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SrndTermQuery), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SrndTermQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SrndTermQuery::initializeClass, 1)))
                return NULL;
              return t_SrndTermQuery::wrap_Object(SrndTermQuery(((t_SrndTermQuery *) arg)->object.this$));
            }
            static PyObject *t_SrndTermQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SrndTermQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SrndTermQuery_init_(t_SrndTermQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean a1;
              SrndTermQuery object((jobject) NULL);

              if (!parseArgs(args, "sZ", &a0, &a1))
              {
                INT_CALL(object = SrndTermQuery(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SrndTermQuery_getLuceneTerm(t_SrndTermQuery *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::index::Term result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.getLuceneTerm(a0));
                return ::org::apache::lucene::index::t_Term::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getLuceneTerm", arg);
              return NULL;
            }

            static PyObject *t_SrndTermQuery_getTermText(t_SrndTermQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getTermText());
              return j2p(result);
            }

            static PyObject *t_SrndTermQuery_toStringUnquoted(t_SrndTermQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toStringUnquoted());
                return j2p(result);
              }

              return callSuper(PY_TYPE(SrndTermQuery), (PyObject *) self, "toStringUnquoted", args, 2);
            }

            static PyObject *t_SrndTermQuery_visitMatchingTerms(t_SrndTermQuery *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor a2((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.visitMatchingTerms(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(SrndTermQuery), (PyObject *) self, "visitMatchingTerms", args, 2);
            }

            static PyObject *t_SrndTermQuery_get__termText(t_SrndTermQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getTermText());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50TermVectorsFormat.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene50 {

          ::java::lang::Class *Lucene50TermVectorsFormat::class$ = NULL;
          jmethodID *Lucene50TermVectorsFormat::mids$ = NULL;
          bool Lucene50TermVectorsFormat::live$ = false;

          jclass Lucene50TermVectorsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene50/Lucene50TermVectorsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene50TermVectorsFormat::Lucene50TermVectorsFormat() : ::org::apache::lucene::codecs::compressing::CompressingTermVectorsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene50 {
          static PyObject *t_Lucene50TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene50TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene50TermVectorsFormat_init_(t_Lucene50TermVectorsFormat *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_Lucene50TermVectorsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene50TermVectorsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene50TermVectorsFormat, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene50TermVectorsFormat)[] = {
            { Py_tp_methods, t_Lucene50TermVectorsFormat__methods_ },
            { Py_tp_init, (void *) t_Lucene50TermVectorsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene50TermVectorsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::compressing::CompressingTermVectorsFormat),
            NULL
          };

          DEFINE_TYPE(Lucene50TermVectorsFormat, t_Lucene50TermVectorsFormat, Lucene50TermVectorsFormat);

          void t_Lucene50TermVectorsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene50TermVectorsFormat), &PY_TYPE_DEF(Lucene50TermVectorsFormat), module, "Lucene50TermVectorsFormat", 0);
          }

          void t_Lucene50TermVectorsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50TermVectorsFormat), "class_", make_descriptor(Lucene50TermVectorsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50TermVectorsFormat), "wrapfn_", make_descriptor(t_Lucene50TermVectorsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50TermVectorsFormat), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene50TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene50TermVectorsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene50TermVectorsFormat::wrap_Object(Lucene50TermVectorsFormat(((t_Lucene50TermVectorsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene50TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene50TermVectorsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene50TermVectorsFormat_init_(t_Lucene50TermVectorsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene50TermVectorsFormat object((jobject) NULL);

            INT_CALL(object = Lucene50TermVectorsFormat());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blockterms/BlockTermsWriter.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "org/apache/lucene/codecs/blockterms/TermsIndexWriterBase.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {

          ::java::lang::Class *BlockTermsWriter::class$ = NULL;
          jmethodID *BlockTermsWriter::mids$ = NULL;
          bool BlockTermsWriter::live$ = false;
          jint BlockTermsWriter::VERSION_CURRENT = (jint) 0;
          jint BlockTermsWriter::VERSION_START = (jint) 0;

          jclass BlockTermsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blockterms/BlockTermsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_90ebcc8eefde05f9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/blockterms/TermsIndexWriterBase;Lorg/apache/lucene/index/SegmentWriteState;Lorg/apache/lucene/codecs/PostingsWriterBase;)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_write_a02f5612a398fd43] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/index/Fields;Lorg/apache/lucene/codecs/NormsProducer;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
              VERSION_START = env->getStaticIntField(cls, "VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockTermsWriter::BlockTermsWriter(const ::org::apache::lucene::codecs::blockterms::TermsIndexWriterBase & a0, const ::org::apache::lucene::index::SegmentWriteState & a1, const ::org::apache::lucene::codecs::PostingsWriterBase & a2) : ::org::apache::lucene::codecs::FieldsConsumer(env->newObject(initializeClass, &mids$, mid_init$_90ebcc8eefde05f9, a0.this$, a1.this$, a2.this$)) {}

          void BlockTermsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void BlockTermsWriter::write(const ::org::apache::lucene::index::Fields & a0, const ::org::apache::lucene::codecs::NormsProducer & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_a02f5612a398fd43], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {
          static PyObject *t_BlockTermsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockTermsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockTermsWriter_init_(t_BlockTermsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockTermsWriter_close(t_BlockTermsWriter *self, PyObject *args);
          static PyObject *t_BlockTermsWriter_write(t_BlockTermsWriter *self, PyObject *args);

          static PyMethodDef t_BlockTermsWriter__methods_[] = {
            DECLARE_METHOD(t_BlockTermsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTermsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTermsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_BlockTermsWriter, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BlockTermsWriter)[] = {
            { Py_tp_methods, t_BlockTermsWriter__methods_ },
            { Py_tp_init, (void *) t_BlockTermsWriter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BlockTermsWriter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::FieldsConsumer),
            NULL
          };

          DEFINE_TYPE(BlockTermsWriter, t_BlockTermsWriter, BlockTermsWriter);

          void t_BlockTermsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockTermsWriter), &PY_TYPE_DEF(BlockTermsWriter), module, "BlockTermsWriter", 0);
          }

          void t_BlockTermsWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTermsWriter), "class_", make_descriptor(BlockTermsWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTermsWriter), "wrapfn_", make_descriptor(t_BlockTermsWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTermsWriter), "boxfn_", make_descriptor(boxObject));
            env->getClass(BlockTermsWriter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTermsWriter), "VERSION_CURRENT", make_descriptor(BlockTermsWriter::VERSION_CURRENT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTermsWriter), "VERSION_START", make_descriptor(BlockTermsWriter::VERSION_START));
          }

          static PyObject *t_BlockTermsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockTermsWriter::initializeClass, 1)))
              return NULL;
            return t_BlockTermsWriter::wrap_Object(BlockTermsWriter(((t_BlockTermsWriter *) arg)->object.this$));
          }
          static PyObject *t_BlockTermsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockTermsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockTermsWriter_init_(t_BlockTermsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::codecs::blockterms::TermsIndexWriterBase a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentWriteState a1((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsWriterBase a2((jobject) NULL);
            BlockTermsWriter object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::codecs::blockterms::TermsIndexWriterBase::initializeClass, ::org::apache::lucene::index::SegmentWriteState::initializeClass, ::org::apache::lucene::codecs::PostingsWriterBase::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = BlockTermsWriter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockTermsWriter_close(t_BlockTermsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(BlockTermsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_BlockTermsWriter_write(t_BlockTermsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::Fields a0((jobject) NULL);
            ::org::apache::lucene::codecs::NormsProducer a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::Fields::initializeClass, ::org::apache::lucene::codecs::NormsProducer::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(BlockTermsWriter), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/bkd/BKDRadixSelector$PathSlice.h"
#include "org/apache/lucene/util/bkd/PointWriter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {

          ::java::lang::Class *BKDRadixSelector$PathSlice::class$ = NULL;
          jmethodID *BKDRadixSelector$PathSlice::mids$ = NULL;
          jfieldID *BKDRadixSelector$PathSlice::fids$ = NULL;
          bool BKDRadixSelector$PathSlice::live$ = false;

          jclass BKDRadixSelector$PathSlice::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/bkd/BKDRadixSelector$PathSlice");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_32caaaecee39461f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/bkd/PointWriter;JJ)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_count] = env->getFieldID(cls, "count", "J");
              fids$[fid_start] = env->getFieldID(cls, "start", "J");
              fids$[fid_writer] = env->getFieldID(cls, "writer", "Lorg/apache/lucene/util/bkd/PointWriter;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BKDRadixSelector$PathSlice::BKDRadixSelector$PathSlice(const ::org::apache::lucene::util::bkd::PointWriter & a0, jlong a1, jlong a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_32caaaecee39461f, a0.this$, a1, a2)) {}

          ::java::lang::String BKDRadixSelector$PathSlice::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          jlong BKDRadixSelector$PathSlice::_get_count() const
          {
            return env->getLongField(this$, fids$[fid_count]);
          }

          jlong BKDRadixSelector$PathSlice::_get_start() const
          {
            return env->getLongField(this$, fids$[fid_start]);
          }

          ::org::apache::lucene::util::bkd::PointWriter BKDRadixSelector$PathSlice::_get_writer() const
          {
            return ::org::apache::lucene::util::bkd::PointWriter(env->getObjectField(this$, fids$[fid_writer]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {
          static PyObject *t_BKDRadixSelector$PathSlice_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BKDRadixSelector$PathSlice_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BKDRadixSelector$PathSlice_init_(t_BKDRadixSelector$PathSlice *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BKDRadixSelector$PathSlice_toString(t_BKDRadixSelector$PathSlice *self, PyObject *args);
          static PyObject *t_BKDRadixSelector$PathSlice_get__count(t_BKDRadixSelector$PathSlice *self, void *data);
          static PyObject *t_BKDRadixSelector$PathSlice_get__start(t_BKDRadixSelector$PathSlice *self, void *data);
          static PyObject *t_BKDRadixSelector$PathSlice_get__writer(t_BKDRadixSelector$PathSlice *self, void *data);

          static PyGetSetDef t_BKDRadixSelector$PathSlice__fields_[] = {
            DECLARE_GET_FIELD(t_BKDRadixSelector$PathSlice, count),
            DECLARE_GET_FIELD(t_BKDRadixSelector$PathSlice, start),
            DECLARE_GET_FIELD(t_BKDRadixSelector$PathSlice, writer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BKDRadixSelector$PathSlice__methods_[] = {
            DECLARE_METHOD(t_BKDRadixSelector$PathSlice, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BKDRadixSelector$PathSlice, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BKDRadixSelector$PathSlice, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BKDRadixSelector$PathSlice)[] = {
            { Py_tp_methods, t_BKDRadixSelector$PathSlice__methods_ },
            { Py_tp_init, (void *) t_BKDRadixSelector$PathSlice_init_ },
            { Py_tp_getset, t_BKDRadixSelector$PathSlice__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BKDRadixSelector$PathSlice)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BKDRadixSelector$PathSlice, t_BKDRadixSelector$PathSlice, BKDRadixSelector$PathSlice);

          void t_BKDRadixSelector$PathSlice::install(PyObject *module)
          {
            installType(&PY_TYPE(BKDRadixSelector$PathSlice), &PY_TYPE_DEF(BKDRadixSelector$PathSlice), module, "BKDRadixSelector$PathSlice", 0);
          }

          void t_BKDRadixSelector$PathSlice::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDRadixSelector$PathSlice), "class_", make_descriptor(BKDRadixSelector$PathSlice::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDRadixSelector$PathSlice), "wrapfn_", make_descriptor(t_BKDRadixSelector$PathSlice::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDRadixSelector$PathSlice), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BKDRadixSelector$PathSlice_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BKDRadixSelector$PathSlice::initializeClass, 1)))
              return NULL;
            return t_BKDRadixSelector$PathSlice::wrap_Object(BKDRadixSelector$PathSlice(((t_BKDRadixSelector$PathSlice *) arg)->object.this$));
          }
          static PyObject *t_BKDRadixSelector$PathSlice_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BKDRadixSelector$PathSlice::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BKDRadixSelector$PathSlice_init_(t_BKDRadixSelector$PathSlice *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::bkd::PointWriter a0((jobject) NULL);
            jlong a1;
            jlong a2;
            BKDRadixSelector$PathSlice object((jobject) NULL);

            if (!parseArgs(args, "kJJ", ::org::apache::lucene::util::bkd::PointWriter::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = BKDRadixSelector$PathSlice(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BKDRadixSelector$PathSlice_toString(t_BKDRadixSelector$PathSlice *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(BKDRadixSelector$PathSlice), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_BKDRadixSelector$PathSlice_get__count(t_BKDRadixSelector$PathSlice *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_count());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_BKDRadixSelector$PathSlice_get__start(t_BKDRadixSelector$PathSlice *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_start());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_BKDRadixSelector$PathSlice_get__writer(t_BKDRadixSelector$PathSlice *self, void *data)
          {
            ::org::apache::lucene::util::bkd::PointWriter value((jobject) NULL);
            OBJ_CALL(value = self->object._get_writer());
            return ::org::apache::lucene::util::bkd::t_PointWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fi/FinnishLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {

          ::java::lang::Class *FinnishLightStemmer::class$ = NULL;
          jmethodID *FinnishLightStemmer::mids$ = NULL;
          bool FinnishLightStemmer::live$ = false;

          jclass FinnishLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fi/FinnishLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FinnishLightStemmer::FinnishLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint FinnishLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {
          static PyObject *t_FinnishLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FinnishLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FinnishLightStemmer_init_(t_FinnishLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FinnishLightStemmer_stem(t_FinnishLightStemmer *self, PyObject *args);

          static PyMethodDef t_FinnishLightStemmer__methods_[] = {
            DECLARE_METHOD(t_FinnishLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FinnishLightStemmer)[] = {
            { Py_tp_methods, t_FinnishLightStemmer__methods_ },
            { Py_tp_init, (void *) t_FinnishLightStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FinnishLightStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FinnishLightStemmer, t_FinnishLightStemmer, FinnishLightStemmer);

          void t_FinnishLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(FinnishLightStemmer), &PY_TYPE_DEF(FinnishLightStemmer), module, "FinnishLightStemmer", 0);
          }

          void t_FinnishLightStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FinnishLightStemmer), "class_", make_descriptor(FinnishLightStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FinnishLightStemmer), "wrapfn_", make_descriptor(t_FinnishLightStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FinnishLightStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FinnishLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FinnishLightStemmer::initializeClass, 1)))
              return NULL;
            return t_FinnishLightStemmer::wrap_Object(FinnishLightStemmer(((t_FinnishLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_FinnishLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FinnishLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FinnishLightStemmer_init_(t_FinnishLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            FinnishLightStemmer object((jobject) NULL);

            INT_CALL(object = FinnishLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_FinnishLightStemmer_stem(t_FinnishLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Builder.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/Builder.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/FST$INPUT_TYPE.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Builder::class$ = NULL;
          jmethodID *Builder::mids$ = NULL;
          bool Builder::live$ = false;

          jclass Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9b58e621b91baa4b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;Lorg/apache/lucene/util/fst/Outputs;)V");
              mids$[mid_init$_ae0f1759ff0dd1ee] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;IIZZILorg/apache/lucene/util/fst/Outputs;ZI)V");
              mids$[mid_add_172a8deac16a5c3a] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/IntsRef;Ljava/lang/Object;)V");
              mids$[mid_finish_a74bf1c7da47b631] = env->getMethodID(cls, "finish", "()Lorg/apache/lucene/util/fst/FST;");
              mids$[mid_fstRamBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "fstRamBytesUsed", "()J");
              mids$[mid_getArcCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "getArcCount", "()J");
              mids$[mid_getDirectAddressingMaxOversizingFactor_58aec2b64dff50c8] = env->getMethodID(cls, "getDirectAddressingMaxOversizingFactor", "()F");
              mids$[mid_getMappedStateCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "getMappedStateCount", "()J");
              mids$[mid_getNodeCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "getNodeCount", "()J");
              mids$[mid_getTermCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "getTermCount", "()J");
              mids$[mid_setDirectAddressingMaxOversizingFactor_14e56a5ff923d76d] = env->getMethodID(cls, "setDirectAddressingMaxOversizingFactor", "(F)Lorg/apache/lucene/util/fst/Builder;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Builder::Builder(const ::org::apache::lucene::util::fst::FST$INPUT_TYPE & a0, const ::org::apache::lucene::util::fst::Outputs & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9b58e621b91baa4b, a0.this$, a1.this$)) {}

          Builder::Builder(const ::org::apache::lucene::util::fst::FST$INPUT_TYPE & a0, jint a1, jint a2, jboolean a3, jboolean a4, jint a5, const ::org::apache::lucene::util::fst::Outputs & a6, jboolean a7, jint a8) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ae0f1759ff0dd1ee, a0.this$, a1, a2, a3, a4, a5, a6.this$, a7, a8)) {}

          void Builder::add(const ::org::apache::lucene::util::IntsRef & a0, const ::java::lang::Object & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_add_172a8deac16a5c3a], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::fst::FST Builder::finish() const
          {
            return ::org::apache::lucene::util::fst::FST(env->callObjectMethod(this$, mids$[mid_finish_a74bf1c7da47b631]));
          }

          jlong Builder::fstRamBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_fstRamBytesUsed_2e5ae9edcb9b072f]);
          }

          jlong Builder::getArcCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getArcCount_2e5ae9edcb9b072f]);
          }

          jfloat Builder::getDirectAddressingMaxOversizingFactor() const
          {
            return env->callFloatMethod(this$, mids$[mid_getDirectAddressingMaxOversizingFactor_58aec2b64dff50c8]);
          }

          jlong Builder::getMappedStateCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getMappedStateCount_2e5ae9edcb9b072f]);
          }

          jlong Builder::getNodeCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getNodeCount_2e5ae9edcb9b072f]);
          }

          jlong Builder::getTermCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getTermCount_2e5ae9edcb9b072f]);
          }

          Builder Builder::setDirectAddressingMaxOversizingFactor(jfloat a0) const
          {
            return Builder(env->callObjectMethod(this$, mids$[mid_setDirectAddressingMaxOversizingFactor_14e56a5ff923d76d], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/fst/Builder$UnCompiledNode.h"
#include "org/apache/lucene/util/fst/Builder$Arc.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder_of_(t_Builder *self, PyObject *args);
          static int t_Builder_init_(t_Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Builder_add(t_Builder *self, PyObject *args);
          static PyObject *t_Builder_finish(t_Builder *self);
          static PyObject *t_Builder_fstRamBytesUsed(t_Builder *self);
          static PyObject *t_Builder_getArcCount(t_Builder *self);
          static PyObject *t_Builder_getDirectAddressingMaxOversizingFactor(t_Builder *self);
          static PyObject *t_Builder_getMappedStateCount(t_Builder *self);
          static PyObject *t_Builder_getNodeCount(t_Builder *self);
          static PyObject *t_Builder_getTermCount(t_Builder *self);
          static PyObject *t_Builder_setDirectAddressingMaxOversizingFactor(t_Builder *self, PyObject *arg);
          static PyObject *t_Builder_get__arcCount(t_Builder *self, void *data);
          static PyObject *t_Builder_get__directAddressingMaxOversizingFactor(t_Builder *self, void *data);
          static int t_Builder_set__directAddressingMaxOversizingFactor(t_Builder *self, PyObject *arg, void *data);
          static PyObject *t_Builder_get__mappedStateCount(t_Builder *self, void *data);
          static PyObject *t_Builder_get__nodeCount(t_Builder *self, void *data);
          static PyObject *t_Builder_get__termCount(t_Builder *self, void *data);
          static PyObject *t_Builder_get__parameters_(t_Builder *self, void *data);
          static PyGetSetDef t_Builder__fields_[] = {
            DECLARE_GET_FIELD(t_Builder, arcCount),
            DECLARE_GETSET_FIELD(t_Builder, directAddressingMaxOversizingFactor),
            DECLARE_GET_FIELD(t_Builder, mappedStateCount),
            DECLARE_GET_FIELD(t_Builder, nodeCount),
            DECLARE_GET_FIELD(t_Builder, termCount),
            DECLARE_GET_FIELD(t_Builder, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Builder__methods_[] = {
            DECLARE_METHOD(t_Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder, of_, METH_VARARGS),
            DECLARE_METHOD(t_Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_Builder, finish, METH_NOARGS),
            DECLARE_METHOD(t_Builder, fstRamBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_Builder, getArcCount, METH_NOARGS),
            DECLARE_METHOD(t_Builder, getDirectAddressingMaxOversizingFactor, METH_NOARGS),
            DECLARE_METHOD(t_Builder, getMappedStateCount, METH_NOARGS),
            DECLARE_METHOD(t_Builder, getNodeCount, METH_NOARGS),
            DECLARE_METHOD(t_Builder, getTermCount, METH_NOARGS),
            DECLARE_METHOD(t_Builder, setDirectAddressingMaxOversizingFactor, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Builder)[] = {
            { Py_tp_methods, t_Builder__methods_ },
            { Py_tp_init, (void *) t_Builder_init_ },
            { Py_tp_getset, t_Builder__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Builder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Builder, t_Builder, Builder);
          PyObject *t_Builder::wrap_Object(const Builder& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder *self = (t_Builder *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Builder::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder *self = (t_Builder *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(Builder), &PY_TYPE_DEF(Builder), module, "Builder", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Builder), "UnCompiledNode", make_descriptor(&PY_TYPE_DEF(Builder$UnCompiledNode)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Builder), "Arc", make_descriptor(&PY_TYPE_DEF(Builder$Arc)));
          }

          void t_Builder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Builder), "class_", make_descriptor(Builder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Builder), "wrapfn_", make_descriptor(t_Builder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Builder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Builder::initializeClass, 1)))
              return NULL;
            return t_Builder::wrap_Object(Builder(((t_Builder *) arg)->object.this$));
          }
          static PyObject *t_Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Builder_of_(t_Builder *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Builder_init_(t_Builder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::fst::FST$INPUT_TYPE a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
                PyTypeObject **p1;
                Builder object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::FST$INPUT_TYPE::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$INPUT_TYPE::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_))
                {
                  INT_CALL(object = Builder(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 9:
              {
                ::org::apache::lucene::util::fst::FST$INPUT_TYPE a0((jobject) NULL);
                PyTypeObject **p0;
                jint a1;
                jint a2;
                jboolean a3;
                jboolean a4;
                jint a5;
                ::org::apache::lucene::util::fst::Outputs a6((jobject) NULL);
                PyTypeObject **p6;
                jboolean a7;
                jint a8;
                Builder object((jobject) NULL);

                if (!parseArgs(args, "KIIZZIKZI", ::org::apache::lucene::util::fst::FST$INPUT_TYPE::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$INPUT_TYPE::parameters_, &a1, &a2, &a3, &a4, &a5, &a6, &p6, ::org::apache::lucene::util::fst::t_Outputs::parameters_, &a7, &a8))
                {
                  INT_CALL(object = Builder(a0, a1, a2, a3, a4, a5, a6, a7, a8));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Builder_add(t_Builder *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);

            if (!parseArgs(args, "kO", ::org::apache::lucene::util::IntsRef::initializeClass, self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(self->object.add(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_Builder_finish(t_Builder *self)
          {
            ::org::apache::lucene::util::fst::FST result((jobject) NULL);
            OBJ_CALL(result = self->object.finish());
            return ::org::apache::lucene::util::fst::t_FST::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_Builder_fstRamBytesUsed(t_Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.fstRamBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Builder_getArcCount(t_Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getArcCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Builder_getDirectAddressingMaxOversizingFactor(t_Builder *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getDirectAddressingMaxOversizingFactor());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Builder_getMappedStateCount(t_Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getMappedStateCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Builder_getNodeCount(t_Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getNodeCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Builder_getTermCount(t_Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getTermCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Builder_setDirectAddressingMaxOversizingFactor(t_Builder *self, PyObject *arg)
          {
            jfloat a0;
            Builder result((jobject) NULL);

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(result = self->object.setDirectAddressingMaxOversizingFactor(a0));
              return t_Builder::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "setDirectAddressingMaxOversizingFactor", arg);
            return NULL;
          }
          static PyObject *t_Builder_get__parameters_(t_Builder *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Builder_get__arcCount(t_Builder *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getArcCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_Builder_get__directAddressingMaxOversizingFactor(t_Builder *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getDirectAddressingMaxOversizingFactor());
            return PyFloat_FromDouble((double) value);
          }
          static int t_Builder_set__directAddressingMaxOversizingFactor(t_Builder *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setDirectAddressingMaxOversizingFactor(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "directAddressingMaxOversizingFactor", arg);
            return -1;
          }

          static PyObject *t_Builder_get__mappedStateCount(t_Builder *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getMappedStateCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_Builder_get__nodeCount(t_Builder *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getNodeCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_Builder_get__termCount(t_Builder *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getTermCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktreeords/FSTOrdsOutputs$Output.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/blocktreeords/FSTOrdsOutputs$Output.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktreeords {

          ::java::lang::Class *FSTOrdsOutputs$Output::class$ = NULL;
          jmethodID *FSTOrdsOutputs$Output::mids$ = NULL;
          jfieldID *FSTOrdsOutputs$Output::fids$ = NULL;
          bool FSTOrdsOutputs$Output::live$ = false;

          jclass FSTOrdsOutputs$Output::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktreeords/FSTOrdsOutputs$Output");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3ec8c7dd8c4e12f4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;JJ)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_bytes] = env->getFieldID(cls, "bytes", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_endOrd] = env->getFieldID(cls, "endOrd", "J");
              fids$[fid_startOrd] = env->getFieldID(cls, "startOrd", "J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FSTOrdsOutputs$Output::FSTOrdsOutputs$Output(const ::org::apache::lucene::util::BytesRef & a0, jlong a1, jlong a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3ec8c7dd8c4e12f4, a0.this$, a1, a2)) {}

          jboolean FSTOrdsOutputs$Output::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint FSTOrdsOutputs$Output::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::String FSTOrdsOutputs$Output::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::util::BytesRef FSTOrdsOutputs$Output::_get_bytes() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_bytes]));
          }

          jlong FSTOrdsOutputs$Output::_get_endOrd() const
          {
            return env->getLongField(this$, fids$[fid_endOrd]);
          }

          jlong FSTOrdsOutputs$Output::_get_startOrd() const
          {
            return env->getLongField(this$, fids$[fid_startOrd]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktreeords {
          static PyObject *t_FSTOrdsOutputs$Output_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FSTOrdsOutputs$Output_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FSTOrdsOutputs$Output_of_(t_FSTOrdsOutputs$Output *self, PyObject *args);
          static int t_FSTOrdsOutputs$Output_init_(t_FSTOrdsOutputs$Output *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FSTOrdsOutputs$Output_equals(t_FSTOrdsOutputs$Output *self, PyObject *args);
          static PyObject *t_FSTOrdsOutputs$Output_hashCode(t_FSTOrdsOutputs$Output *self, PyObject *args);
          static PyObject *t_FSTOrdsOutputs$Output_toString(t_FSTOrdsOutputs$Output *self, PyObject *args);
          static PyObject *t_FSTOrdsOutputs$Output_get__bytes(t_FSTOrdsOutputs$Output *self, void *data);
          static PyObject *t_FSTOrdsOutputs$Output_get__endOrd(t_FSTOrdsOutputs$Output *self, void *data);
          static PyObject *t_FSTOrdsOutputs$Output_get__startOrd(t_FSTOrdsOutputs$Output *self, void *data);

          static PyObject *t_FSTOrdsOutputs$Output_get__parameters_(t_FSTOrdsOutputs$Output *self, void *data);
          static PyGetSetDef t_FSTOrdsOutputs$Output__fields_[] = {
            DECLARE_GET_FIELD(t_FSTOrdsOutputs$Output, bytes),
            DECLARE_GET_FIELD(t_FSTOrdsOutputs$Output, endOrd),
            DECLARE_GET_FIELD(t_FSTOrdsOutputs$Output, startOrd),
            DECLARE_GET_FIELD(t_FSTOrdsOutputs$Output, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FSTOrdsOutputs$Output__methods_[] = {
            DECLARE_METHOD(t_FSTOrdsOutputs$Output, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTOrdsOutputs$Output, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTOrdsOutputs$Output, of_, METH_VARARGS),
            DECLARE_METHOD(t_FSTOrdsOutputs$Output, equals, METH_VARARGS),
            DECLARE_METHOD(t_FSTOrdsOutputs$Output, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FSTOrdsOutputs$Output, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FSTOrdsOutputs$Output)[] = {
            { Py_tp_methods, t_FSTOrdsOutputs$Output__methods_ },
            { Py_tp_init, (void *) t_FSTOrdsOutputs$Output_init_ },
            { Py_tp_getset, t_FSTOrdsOutputs$Output__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FSTOrdsOutputs$Output)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FSTOrdsOutputs$Output, t_FSTOrdsOutputs$Output, FSTOrdsOutputs$Output);
          PyObject *t_FSTOrdsOutputs$Output::wrap_Object(const FSTOrdsOutputs$Output& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FSTOrdsOutputs$Output::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FSTOrdsOutputs$Output *self = (t_FSTOrdsOutputs$Output *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FSTOrdsOutputs$Output::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FSTOrdsOutputs$Output::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FSTOrdsOutputs$Output *self = (t_FSTOrdsOutputs$Output *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FSTOrdsOutputs$Output::install(PyObject *module)
          {
            installType(&PY_TYPE(FSTOrdsOutputs$Output), &PY_TYPE_DEF(FSTOrdsOutputs$Output), module, "FSTOrdsOutputs$Output", 0);
          }

          void t_FSTOrdsOutputs$Output::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTOrdsOutputs$Output), "class_", make_descriptor(FSTOrdsOutputs$Output::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTOrdsOutputs$Output), "wrapfn_", make_descriptor(t_FSTOrdsOutputs$Output::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTOrdsOutputs$Output), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FSTOrdsOutputs$Output_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FSTOrdsOutputs$Output::initializeClass, 1)))
              return NULL;
            return t_FSTOrdsOutputs$Output::wrap_Object(FSTOrdsOutputs$Output(((t_FSTOrdsOutputs$Output *) arg)->object.this$));
          }
          static PyObject *t_FSTOrdsOutputs$Output_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FSTOrdsOutputs$Output::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FSTOrdsOutputs$Output_of_(t_FSTOrdsOutputs$Output *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_FSTOrdsOutputs$Output_init_(t_FSTOrdsOutputs$Output *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jlong a1;
            jlong a2;
            FSTOrdsOutputs$Output object((jobject) NULL);

            if (!parseArgs(args, "kJJ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = FSTOrdsOutputs$Output(a0, a1, a2));
              self->object = object;
              self->parameters[0] = ::org::apache::lucene::codecs::blocktreeords::PY_TYPE(FSTOrdsOutputs$Output);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FSTOrdsOutputs$Output_equals(t_FSTOrdsOutputs$Output *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FSTOrdsOutputs$Output), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FSTOrdsOutputs$Output_hashCode(t_FSTOrdsOutputs$Output *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FSTOrdsOutputs$Output), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FSTOrdsOutputs$Output_toString(t_FSTOrdsOutputs$Output *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(FSTOrdsOutputs$Output), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_FSTOrdsOutputs$Output_get__parameters_(t_FSTOrdsOutputs$Output *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_FSTOrdsOutputs$Output_get__bytes(t_FSTOrdsOutputs$Output *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_bytes());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_FSTOrdsOutputs$Output_get__endOrd(t_FSTOrdsOutputs$Output *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_endOrd());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_FSTOrdsOutputs$Output_get__startOrd(t_FSTOrdsOutputs$Output *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_startOrd());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/JapaneseNumberFilter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {

          ::java::lang::Class *JapaneseNumberFilter::class$ = NULL;
          jmethodID *JapaneseNumberFilter::mids$ = NULL;
          bool JapaneseNumberFilter::live$ = false;

          jclass JapaneseNumberFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/JapaneseNumberFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_isArabicNumeral_540573ecd04ffc16] = env->getMethodID(cls, "isArabicNumeral", "(C)Z");
              mids$[mid_isNumeral_145b2d0af0c06b93] = env->getMethodID(cls, "isNumeral", "(Ljava/lang/String;)Z");
              mids$[mid_isNumeral_540573ecd04ffc16] = env->getMethodID(cls, "isNumeral", "(C)Z");
              mids$[mid_isNumeralPunctuation_145b2d0af0c06b93] = env->getMethodID(cls, "isNumeralPunctuation", "(Ljava/lang/String;)Z");
              mids$[mid_isNumeralPunctuation_540573ecd04ffc16] = env->getMethodID(cls, "isNumeralPunctuation", "(C)Z");
              mids$[mid_normalizeNumber_9bfa75c9f141b67f] = env->getMethodID(cls, "normalizeNumber", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JapaneseNumberFilter::JapaneseNumberFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean JapaneseNumberFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          jboolean JapaneseNumberFilter::isArabicNumeral(jchar a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isArabicNumeral_540573ecd04ffc16], a0);
          }

          jboolean JapaneseNumberFilter::isNumeral(const ::java::lang::String & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNumeral_145b2d0af0c06b93], a0.this$);
          }

          jboolean JapaneseNumberFilter::isNumeral(jchar a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNumeral_540573ecd04ffc16], a0);
          }

          jboolean JapaneseNumberFilter::isNumeralPunctuation(const ::java::lang::String & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNumeralPunctuation_145b2d0af0c06b93], a0.this$);
          }

          jboolean JapaneseNumberFilter::isNumeralPunctuation(jchar a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNumeralPunctuation_540573ecd04ffc16], a0);
          }

          ::java::lang::String JapaneseNumberFilter::normalizeNumber(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_normalizeNumber_9bfa75c9f141b67f], a0.this$));
          }

          void JapaneseNumberFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/ja/JapaneseNumberFilter$NumberBuffer.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          static PyObject *t_JapaneseNumberFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JapaneseNumberFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JapaneseNumberFilter_init_(t_JapaneseNumberFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JapaneseNumberFilter_incrementToken(t_JapaneseNumberFilter *self, PyObject *args);
          static PyObject *t_JapaneseNumberFilter_isArabicNumeral(t_JapaneseNumberFilter *self, PyObject *arg);
          static PyObject *t_JapaneseNumberFilter_isNumeral(t_JapaneseNumberFilter *self, PyObject *args);
          static PyObject *t_JapaneseNumberFilter_isNumeralPunctuation(t_JapaneseNumberFilter *self, PyObject *args);
          static PyObject *t_JapaneseNumberFilter_normalizeNumber(t_JapaneseNumberFilter *self, PyObject *arg);
          static PyObject *t_JapaneseNumberFilter_reset(t_JapaneseNumberFilter *self, PyObject *args);

          static PyMethodDef t_JapaneseNumberFilter__methods_[] = {
            DECLARE_METHOD(t_JapaneseNumberFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseNumberFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseNumberFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_JapaneseNumberFilter, isArabicNumeral, METH_O),
            DECLARE_METHOD(t_JapaneseNumberFilter, isNumeral, METH_VARARGS),
            DECLARE_METHOD(t_JapaneseNumberFilter, isNumeralPunctuation, METH_VARARGS),
            DECLARE_METHOD(t_JapaneseNumberFilter, normalizeNumber, METH_O),
            DECLARE_METHOD(t_JapaneseNumberFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JapaneseNumberFilter)[] = {
            { Py_tp_methods, t_JapaneseNumberFilter__methods_ },
            { Py_tp_init, (void *) t_JapaneseNumberFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JapaneseNumberFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(JapaneseNumberFilter, t_JapaneseNumberFilter, JapaneseNumberFilter);

          void t_JapaneseNumberFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(JapaneseNumberFilter), &PY_TYPE_DEF(JapaneseNumberFilter), module, "JapaneseNumberFilter", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseNumberFilter), "NumberBuffer", make_descriptor(&PY_TYPE_DEF(JapaneseNumberFilter$NumberBuffer)));
          }

          void t_JapaneseNumberFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseNumberFilter), "class_", make_descriptor(JapaneseNumberFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseNumberFilter), "wrapfn_", make_descriptor(t_JapaneseNumberFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseNumberFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JapaneseNumberFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JapaneseNumberFilter::initializeClass, 1)))
              return NULL;
            return t_JapaneseNumberFilter::wrap_Object(JapaneseNumberFilter(((t_JapaneseNumberFilter *) arg)->object.this$));
          }
          static PyObject *t_JapaneseNumberFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JapaneseNumberFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JapaneseNumberFilter_init_(t_JapaneseNumberFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            JapaneseNumberFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = JapaneseNumberFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JapaneseNumberFilter_incrementToken(t_JapaneseNumberFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(JapaneseNumberFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_JapaneseNumberFilter_isArabicNumeral(t_JapaneseNumberFilter *self, PyObject *arg)
          {
            jchar a0;
            jboolean result;

            if (!parseArg(arg, "C", &a0))
            {
              OBJ_CALL(result = self->object.isArabicNumeral(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isArabicNumeral", arg);
            return NULL;
          }

          static PyObject *t_JapaneseNumberFilter_isNumeral(t_JapaneseNumberFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.isNumeral(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                jchar a0;
                jboolean result;

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.isNumeral(a0));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "isNumeral", args);
            return NULL;
          }

          static PyObject *t_JapaneseNumberFilter_isNumeralPunctuation(t_JapaneseNumberFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.isNumeralPunctuation(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                jchar a0;
                jboolean result;

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.isNumeralPunctuation(a0));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "isNumeralPunctuation", args);
            return NULL;
          }

          static PyObject *t_JapaneseNumberFilter_normalizeNumber(t_JapaneseNumberFilter *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.normalizeNumber(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalizeNumber", arg);
            return NULL;
          }

          static PyObject *t_JapaneseNumberFilter_reset(t_JapaneseNumberFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(JapaneseNumberFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/DocIdSetBuilder$BulkAdder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *DocIdSetBuilder$BulkAdder::class$ = NULL;
        jmethodID *DocIdSetBuilder$BulkAdder::mids$ = NULL;
        bool DocIdSetBuilder$BulkAdder::live$ = false;

        jclass DocIdSetBuilder$BulkAdder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/DocIdSetBuilder$BulkAdder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_040c4cd0390c5aff] = env->getMethodID(cls, "add", "(I)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocIdSetBuilder$BulkAdder::DocIdSetBuilder$BulkAdder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void DocIdSetBuilder$BulkAdder::add(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_040c4cd0390c5aff], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_DocIdSetBuilder$BulkAdder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocIdSetBuilder$BulkAdder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocIdSetBuilder$BulkAdder_init_(t_DocIdSetBuilder$BulkAdder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocIdSetBuilder$BulkAdder_add(t_DocIdSetBuilder$BulkAdder *self, PyObject *arg);

        static PyMethodDef t_DocIdSetBuilder$BulkAdder__methods_[] = {
          DECLARE_METHOD(t_DocIdSetBuilder$BulkAdder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSetBuilder$BulkAdder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSetBuilder$BulkAdder, add, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocIdSetBuilder$BulkAdder)[] = {
          { Py_tp_methods, t_DocIdSetBuilder$BulkAdder__methods_ },
          { Py_tp_init, (void *) t_DocIdSetBuilder$BulkAdder_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocIdSetBuilder$BulkAdder)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DocIdSetBuilder$BulkAdder, t_DocIdSetBuilder$BulkAdder, DocIdSetBuilder$BulkAdder);

        void t_DocIdSetBuilder$BulkAdder::install(PyObject *module)
        {
          installType(&PY_TYPE(DocIdSetBuilder$BulkAdder), &PY_TYPE_DEF(DocIdSetBuilder$BulkAdder), module, "DocIdSetBuilder$BulkAdder", 0);
        }

        void t_DocIdSetBuilder$BulkAdder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIdSetBuilder$BulkAdder), "class_", make_descriptor(DocIdSetBuilder$BulkAdder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIdSetBuilder$BulkAdder), "wrapfn_", make_descriptor(t_DocIdSetBuilder$BulkAdder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIdSetBuilder$BulkAdder), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocIdSetBuilder$BulkAdder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocIdSetBuilder$BulkAdder::initializeClass, 1)))
            return NULL;
          return t_DocIdSetBuilder$BulkAdder::wrap_Object(DocIdSetBuilder$BulkAdder(((t_DocIdSetBuilder$BulkAdder *) arg)->object.this$));
        }
        static PyObject *t_DocIdSetBuilder$BulkAdder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocIdSetBuilder$BulkAdder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocIdSetBuilder$BulkAdder_init_(t_DocIdSetBuilder$BulkAdder *self, PyObject *args, PyObject *kwds)
        {
          DocIdSetBuilder$BulkAdder object((jobject) NULL);

          INT_CALL(object = DocIdSetBuilder$BulkAdder());
          self->object = object;

          return 0;
        }

        static PyObject *t_DocIdSetBuilder$BulkAdder_add(t_DocIdSetBuilder$BulkAdder *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/TopOrdAndIntQueue.h"
#include "org/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *TopOrdAndIntQueue::class$ = NULL;
        jmethodID *TopOrdAndIntQueue::mids$ = NULL;
        bool TopOrdAndIntQueue::live$ = false;

        jclass TopOrdAndIntQueue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/TopOrdAndIntQueue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_lessThan_731a673d7b5d3579] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue;Lorg/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue;)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopOrdAndIntQueue::TopOrdAndIntQueue(jint a0) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_TopOrdAndIntQueue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndIntQueue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndIntQueue_of_(t_TopOrdAndIntQueue *self, PyObject *args);
        static int t_TopOrdAndIntQueue_init_(t_TopOrdAndIntQueue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopOrdAndIntQueue_get__parameters_(t_TopOrdAndIntQueue *self, void *data);
        static PyGetSetDef t_TopOrdAndIntQueue__fields_[] = {
          DECLARE_GET_FIELD(t_TopOrdAndIntQueue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopOrdAndIntQueue__methods_[] = {
          DECLARE_METHOD(t_TopOrdAndIntQueue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndIntQueue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndIntQueue, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TopOrdAndIntQueue)[] = {
          { Py_tp_methods, t_TopOrdAndIntQueue__methods_ },
          { Py_tp_init, (void *) t_TopOrdAndIntQueue_init_ },
          { Py_tp_getset, t_TopOrdAndIntQueue__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TopOrdAndIntQueue)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::PriorityQueue),
          NULL
        };

        DEFINE_TYPE(TopOrdAndIntQueue, t_TopOrdAndIntQueue, TopOrdAndIntQueue);
        PyObject *t_TopOrdAndIntQueue::wrap_Object(const TopOrdAndIntQueue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndIntQueue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndIntQueue *self = (t_TopOrdAndIntQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopOrdAndIntQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndIntQueue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndIntQueue *self = (t_TopOrdAndIntQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopOrdAndIntQueue::install(PyObject *module)
        {
          installType(&PY_TYPE(TopOrdAndIntQueue), &PY_TYPE_DEF(TopOrdAndIntQueue), module, "TopOrdAndIntQueue", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopOrdAndIntQueue), "OrdAndValue", make_descriptor(&PY_TYPE_DEF(TopOrdAndIntQueue$OrdAndValue)));
        }

        void t_TopOrdAndIntQueue::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopOrdAndIntQueue), "class_", make_descriptor(TopOrdAndIntQueue::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopOrdAndIntQueue), "wrapfn_", make_descriptor(t_TopOrdAndIntQueue::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopOrdAndIntQueue), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopOrdAndIntQueue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopOrdAndIntQueue::initializeClass, 1)))
            return NULL;
          return t_TopOrdAndIntQueue::wrap_Object(TopOrdAndIntQueue(((t_TopOrdAndIntQueue *) arg)->object.this$));
        }
        static PyObject *t_TopOrdAndIntQueue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopOrdAndIntQueue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopOrdAndIntQueue_of_(t_TopOrdAndIntQueue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopOrdAndIntQueue_init_(t_TopOrdAndIntQueue *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          TopOrdAndIntQueue object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = TopOrdAndIntQueue(a0));
            self->object = object;
            self->parameters[0] = ::org::apache::lucene::facet::PY_TYPE(TopOrdAndIntQueue$OrdAndValue);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_TopOrdAndIntQueue_get__parameters_(t_TopOrdAndIntQueue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RecyclingByteBlockAllocator.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RecyclingByteBlockAllocator::class$ = NULL;
        jmethodID *RecyclingByteBlockAllocator::mids$ = NULL;
        bool RecyclingByteBlockAllocator::live$ = false;
        jint RecyclingByteBlockAllocator::DEFAULT_BUFFERED_BLOCKS = (jint) 0;

        jclass RecyclingByteBlockAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RecyclingByteBlockAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_438c62480c481c65] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_init$_d5caaeae1d724489] = env->getMethodID(cls, "<init>", "(IILorg/apache/lucene/util/Counter;)V");
            mids$[mid_bytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "bytesUsed", "()J");
            mids$[mid_freeBlocks_1e143afe1894d213] = env->getMethodID(cls, "freeBlocks", "(I)I");
            mids$[mid_getByteBlock_cf386cdb1bbd339f] = env->getMethodID(cls, "getByteBlock", "()[B");
            mids$[mid_maxBufferedBlocks_9972fcc56b44e79d] = env->getMethodID(cls, "maxBufferedBlocks", "()I");
            mids$[mid_numBufferedBlocks_9972fcc56b44e79d] = env->getMethodID(cls, "numBufferedBlocks", "()I");
            mids$[mid_recycleByteBlocks_06d20f962341558f] = env->getMethodID(cls, "recycleByteBlocks", "([[BII)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DEFAULT_BUFFERED_BLOCKS = env->getStaticIntField(cls, "DEFAULT_BUFFERED_BLOCKS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RecyclingByteBlockAllocator::RecyclingByteBlockAllocator() : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        RecyclingByteBlockAllocator::RecyclingByteBlockAllocator(jint a0, jint a1) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_438c62480c481c65, a0, a1)) {}

        RecyclingByteBlockAllocator::RecyclingByteBlockAllocator(jint a0, jint a1, const ::org::apache::lucene::util::Counter & a2) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_d5caaeae1d724489, a0, a1, a2.this$)) {}

        jlong RecyclingByteBlockAllocator::bytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_bytesUsed_2e5ae9edcb9b072f]);
        }

        jint RecyclingByteBlockAllocator::freeBlocks(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_freeBlocks_1e143afe1894d213], a0);
        }

        JArray< jbyte > RecyclingByteBlockAllocator::getByteBlock() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getByteBlock_cf386cdb1bbd339f]));
        }

        jint RecyclingByteBlockAllocator::maxBufferedBlocks() const
        {
          return env->callIntMethod(this$, mids$[mid_maxBufferedBlocks_9972fcc56b44e79d]);
        }

        jint RecyclingByteBlockAllocator::numBufferedBlocks() const
        {
          return env->callIntMethod(this$, mids$[mid_numBufferedBlocks_9972fcc56b44e79d]);
        }

        void RecyclingByteBlockAllocator::recycleByteBlocks(const JArray< JArray< jbyte > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_06d20f962341558f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RecyclingByteBlockAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RecyclingByteBlockAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RecyclingByteBlockAllocator_init_(t_RecyclingByteBlockAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RecyclingByteBlockAllocator_bytesUsed(t_RecyclingByteBlockAllocator *self);
        static PyObject *t_RecyclingByteBlockAllocator_freeBlocks(t_RecyclingByteBlockAllocator *self, PyObject *arg);
        static PyObject *t_RecyclingByteBlockAllocator_getByteBlock(t_RecyclingByteBlockAllocator *self, PyObject *args);
        static PyObject *t_RecyclingByteBlockAllocator_maxBufferedBlocks(t_RecyclingByteBlockAllocator *self);
        static PyObject *t_RecyclingByteBlockAllocator_numBufferedBlocks(t_RecyclingByteBlockAllocator *self);
        static PyObject *t_RecyclingByteBlockAllocator_recycleByteBlocks(t_RecyclingByteBlockAllocator *self, PyObject *args);
        static PyObject *t_RecyclingByteBlockAllocator_get__byteBlock(t_RecyclingByteBlockAllocator *self, void *data);
        static PyGetSetDef t_RecyclingByteBlockAllocator__fields_[] = {
          DECLARE_GET_FIELD(t_RecyclingByteBlockAllocator, byteBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RecyclingByteBlockAllocator__methods_[] = {
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, bytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, freeBlocks, METH_O),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, getByteBlock, METH_VARARGS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, maxBufferedBlocks, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, numBufferedBlocks, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, recycleByteBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RecyclingByteBlockAllocator)[] = {
          { Py_tp_methods, t_RecyclingByteBlockAllocator__methods_ },
          { Py_tp_init, (void *) t_RecyclingByteBlockAllocator_init_ },
          { Py_tp_getset, t_RecyclingByteBlockAllocator__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RecyclingByteBlockAllocator)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::ByteBlockPool$Allocator),
          NULL
        };

        DEFINE_TYPE(RecyclingByteBlockAllocator, t_RecyclingByteBlockAllocator, RecyclingByteBlockAllocator);

        void t_RecyclingByteBlockAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(RecyclingByteBlockAllocator), &PY_TYPE_DEF(RecyclingByteBlockAllocator), module, "RecyclingByteBlockAllocator", 0);
        }

        void t_RecyclingByteBlockAllocator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RecyclingByteBlockAllocator), "class_", make_descriptor(RecyclingByteBlockAllocator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RecyclingByteBlockAllocator), "wrapfn_", make_descriptor(t_RecyclingByteBlockAllocator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RecyclingByteBlockAllocator), "boxfn_", make_descriptor(boxObject));
          env->getClass(RecyclingByteBlockAllocator::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(RecyclingByteBlockAllocator), "DEFAULT_BUFFERED_BLOCKS", make_descriptor(RecyclingByteBlockAllocator::DEFAULT_BUFFERED_BLOCKS));
        }

        static PyObject *t_RecyclingByteBlockAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RecyclingByteBlockAllocator::initializeClass, 1)))
            return NULL;
          return t_RecyclingByteBlockAllocator::wrap_Object(RecyclingByteBlockAllocator(((t_RecyclingByteBlockAllocator *) arg)->object.this$));
        }
        static PyObject *t_RecyclingByteBlockAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RecyclingByteBlockAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RecyclingByteBlockAllocator_init_(t_RecyclingByteBlockAllocator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              RecyclingByteBlockAllocator object((jobject) NULL);

              INT_CALL(object = RecyclingByteBlockAllocator());
              self->object = object;
              break;
            }
           case 2:
            {
              jint a0;
              jint a1;
              RecyclingByteBlockAllocator object((jobject) NULL);

              if (!parseArgs(args, "II", &a0, &a1))
              {
                INT_CALL(object = RecyclingByteBlockAllocator(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              jint a1;
              ::org::apache::lucene::util::Counter a2((jobject) NULL);
              RecyclingByteBlockAllocator object((jobject) NULL);

              if (!parseArgs(args, "IIk", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = RecyclingByteBlockAllocator(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RecyclingByteBlockAllocator_bytesUsed(t_RecyclingByteBlockAllocator *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.bytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RecyclingByteBlockAllocator_freeBlocks(t_RecyclingByteBlockAllocator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.freeBlocks(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "freeBlocks", arg);
          return NULL;
        }

        static PyObject *t_RecyclingByteBlockAllocator_getByteBlock(t_RecyclingByteBlockAllocator *self, PyObject *args)
        {
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getByteBlock());
            return result.wrap();
          }

          return callSuper(PY_TYPE(RecyclingByteBlockAllocator), (PyObject *) self, "getByteBlock", args, 2);
        }

        static PyObject *t_RecyclingByteBlockAllocator_maxBufferedBlocks(t_RecyclingByteBlockAllocator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxBufferedBlocks());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_RecyclingByteBlockAllocator_numBufferedBlocks(t_RecyclingByteBlockAllocator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numBufferedBlocks());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_RecyclingByteBlockAllocator_recycleByteBlocks(t_RecyclingByteBlockAllocator *self, PyObject *args)
        {
          JArray< JArray< jbyte > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleByteBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(RecyclingByteBlockAllocator), (PyObject *) self, "recycleByteBlocks", args, 2);
        }

        static PyObject *t_RecyclingByteBlockAllocator_get__byteBlock(t_RecyclingByteBlockAllocator *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getByteBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/payloads/PayloadScoreQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/payloads/PayloadFunction.h"
#include "org/apache/lucene/queries/payloads/PayloadDecoder.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace payloads {

          ::java::lang::Class *PayloadScoreQuery::class$ = NULL;
          jmethodID *PayloadScoreQuery::mids$ = NULL;
          bool PayloadScoreQuery::live$ = false;

          jclass PayloadScoreQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/payloads/PayloadScoreQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_10d8bbbde42901c5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/queries/payloads/PayloadFunction;Lorg/apache/lucene/queries/payloads/PayloadDecoder;)V");
              mids$[mid_init$_88551ee3e821bef9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/queries/payloads/PayloadFunction;Lorg/apache/lucene/queries/payloads/PayloadDecoder;Z)V");
              mids$[mid_createWeight_5baab4cc5ccc46b6] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/spans/SpanWeight;");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadScoreQuery::PayloadScoreQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::queries::payloads::PayloadFunction & a1, const ::org::apache::lucene::queries::payloads::PayloadDecoder & a2) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_10d8bbbde42901c5, a0.this$, a1.this$, a2.this$)) {}

          PayloadScoreQuery::PayloadScoreQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::queries::payloads::PayloadFunction & a1, const ::org::apache::lucene::queries::payloads::PayloadDecoder & a2, jboolean a3) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_88551ee3e821bef9, a0.this$, a1.this$, a2.this$, a3)) {}

          ::org::apache::lucene::search::spans::SpanWeight PayloadScoreQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::spans::SpanWeight(env->callObjectMethod(this$, mids$[mid_createWeight_5baab4cc5ccc46b6], a0.this$, a1.this$, a2));
          }

          jboolean PayloadScoreQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::java::lang::String PayloadScoreQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
          }

          jint PayloadScoreQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::search::Query PayloadScoreQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
          }

          ::java::lang::String PayloadScoreQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }

          void PayloadScoreQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace payloads {
          static PyObject *t_PayloadScoreQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadScoreQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadScoreQuery_init_(t_PayloadScoreQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadScoreQuery_createWeight(t_PayloadScoreQuery *self, PyObject *args);
          static PyObject *t_PayloadScoreQuery_equals(t_PayloadScoreQuery *self, PyObject *args);
          static PyObject *t_PayloadScoreQuery_getField(t_PayloadScoreQuery *self, PyObject *args);
          static PyObject *t_PayloadScoreQuery_hashCode(t_PayloadScoreQuery *self, PyObject *args);
          static PyObject *t_PayloadScoreQuery_rewrite(t_PayloadScoreQuery *self, PyObject *args);
          static PyObject *t_PayloadScoreQuery_toString(t_PayloadScoreQuery *self, PyObject *args);
          static PyObject *t_PayloadScoreQuery_visit(t_PayloadScoreQuery *self, PyObject *args);
          static PyObject *t_PayloadScoreQuery_get__field(t_PayloadScoreQuery *self, void *data);
          static PyGetSetDef t_PayloadScoreQuery__fields_[] = {
            DECLARE_GET_FIELD(t_PayloadScoreQuery, field),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PayloadScoreQuery__methods_[] = {
            DECLARE_METHOD(t_PayloadScoreQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadScoreQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadScoreQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_PayloadScoreQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_PayloadScoreQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_PayloadScoreQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PayloadScoreQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_PayloadScoreQuery, toString, METH_VARARGS),
            DECLARE_METHOD(t_PayloadScoreQuery, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PayloadScoreQuery)[] = {
            { Py_tp_methods, t_PayloadScoreQuery__methods_ },
            { Py_tp_init, (void *) t_PayloadScoreQuery_init_ },
            { Py_tp_getset, t_PayloadScoreQuery__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PayloadScoreQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanQuery),
            NULL
          };

          DEFINE_TYPE(PayloadScoreQuery, t_PayloadScoreQuery, PayloadScoreQuery);

          void t_PayloadScoreQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadScoreQuery), &PY_TYPE_DEF(PayloadScoreQuery), module, "PayloadScoreQuery", 0);
          }

          void t_PayloadScoreQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadScoreQuery), "class_", make_descriptor(PayloadScoreQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadScoreQuery), "wrapfn_", make_descriptor(t_PayloadScoreQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadScoreQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadScoreQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadScoreQuery::initializeClass, 1)))
              return NULL;
            return t_PayloadScoreQuery::wrap_Object(PayloadScoreQuery(((t_PayloadScoreQuery *) arg)->object.this$));
          }
          static PyObject *t_PayloadScoreQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadScoreQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadScoreQuery_init_(t_PayloadScoreQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
                ::org::apache::lucene::queries::payloads::PayloadFunction a1((jobject) NULL);
                ::org::apache::lucene::queries::payloads::PayloadDecoder a2((jobject) NULL);
                PayloadScoreQuery object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::queries::payloads::PayloadFunction::initializeClass, ::org::apache::lucene::queries::payloads::PayloadDecoder::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PayloadScoreQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
                ::org::apache::lucene::queries::payloads::PayloadFunction a1((jobject) NULL);
                ::org::apache::lucene::queries::payloads::PayloadDecoder a2((jobject) NULL);
                jboolean a3;
                PayloadScoreQuery object((jobject) NULL);

                if (!parseArgs(args, "kkkZ", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::queries::payloads::PayloadFunction::initializeClass, ::org::apache::lucene::queries::payloads::PayloadDecoder::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = PayloadScoreQuery(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadScoreQuery_createWeight(t_PayloadScoreQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
            PyTypeObject **p1;
            jfloat a2;
            ::org::apache::lucene::search::spans::SpanWeight result((jobject) NULL);

            if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_SpanWeight::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PayloadScoreQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_PayloadScoreQuery_equals(t_PayloadScoreQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(PayloadScoreQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PayloadScoreQuery_getField(t_PayloadScoreQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(PY_TYPE(PayloadScoreQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_PayloadScoreQuery_hashCode(t_PayloadScoreQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(PayloadScoreQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PayloadScoreQuery_rewrite(t_PayloadScoreQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PayloadScoreQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_PayloadScoreQuery_toString(t_PayloadScoreQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(PayloadScoreQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_PayloadScoreQuery_visit(t_PayloadScoreQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PayloadScoreQuery), (PyObject *) self, "visit", args, 2);
          }

          static PyObject *t_PayloadScoreQuery_get__field(t_PayloadScoreQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/LongBitSet.h"
#include "org/apache/lucene/util/LongBitSet.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *LongBitSet::class$ = NULL;
        jmethodID *LongBitSet::mids$ = NULL;
        bool LongBitSet::live$ = false;
        jlong LongBitSet::MAX_NUM_BITS = (jlong) 0;

        jclass LongBitSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/LongBitSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9c778c9bce6694df] = env->getMethodID(cls, "<init>", "(J)V");
            mids$[mid_init$_6b9d54909d29b341] = env->getMethodID(cls, "<init>", "([JJ)V");
            mids$[mid_and_82cffb4685f37c88] = env->getMethodID(cls, "and", "(Lorg/apache/lucene/util/LongBitSet;)V");
            mids$[mid_andNot_82cffb4685f37c88] = env->getMethodID(cls, "andNot", "(Lorg/apache/lucene/util/LongBitSet;)V");
            mids$[mid_bits2words_694afffd0eb7dc3c] = env->getStaticMethodID(cls, "bits2words", "(J)I");
            mids$[mid_cardinality_2e5ae9edcb9b072f] = env->getMethodID(cls, "cardinality", "()J");
            mids$[mid_clear_9c778c9bce6694df] = env->getMethodID(cls, "clear", "(J)V");
            mids$[mid_clear_0248b6e53dc27ea3] = env->getMethodID(cls, "clear", "(JJ)V");
            mids$[mid_clone_905861f491b11dc8] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/LongBitSet;");
            mids$[mid_ensureCapacity_5387ebb0e9111e64] = env->getStaticMethodID(cls, "ensureCapacity", "(Lorg/apache/lucene/util/LongBitSet;J)Lorg/apache/lucene/util/LongBitSet;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_flip_9c778c9bce6694df] = env->getMethodID(cls, "flip", "(J)V");
            mids$[mid_flip_0248b6e53dc27ea3] = env->getMethodID(cls, "flip", "(JJ)V");
            mids$[mid_get_129dd81483fb5856] = env->getMethodID(cls, "get", "(J)Z");
            mids$[mid_getAndClear_129dd81483fb5856] = env->getMethodID(cls, "getAndClear", "(J)Z");
            mids$[mid_getAndSet_129dd81483fb5856] = env->getMethodID(cls, "getAndSet", "(J)Z");
            mids$[mid_getBits_d09b715a1c5ddffd] = env->getMethodID(cls, "getBits", "()[J");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_intersects_d339e41658a9ead0] = env->getMethodID(cls, "intersects", "(Lorg/apache/lucene/util/LongBitSet;)Z");
            mids$[mid_length_2e5ae9edcb9b072f] = env->getMethodID(cls, "length", "()J");
            mids$[mid_nextSetBit_d711eecdc469624a] = env->getMethodID(cls, "nextSetBit", "(J)J");
            mids$[mid_or_82cffb4685f37c88] = env->getMethodID(cls, "or", "(Lorg/apache/lucene/util/LongBitSet;)V");
            mids$[mid_prevSetBit_d711eecdc469624a] = env->getMethodID(cls, "prevSetBit", "(J)J");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_scanIsEmpty_8454bd5aa23fd11e] = env->getMethodID(cls, "scanIsEmpty", "()Z");
            mids$[mid_set_9c778c9bce6694df] = env->getMethodID(cls, "set", "(J)V");
            mids$[mid_set_0248b6e53dc27ea3] = env->getMethodID(cls, "set", "(JJ)V");
            mids$[mid_xor_82cffb4685f37c88] = env->getMethodID(cls, "xor", "(Lorg/apache/lucene/util/LongBitSet;)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            MAX_NUM_BITS = env->getStaticLongField(cls, "MAX_NUM_BITS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongBitSet::LongBitSet(jlong a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9c778c9bce6694df, a0)) {}

        LongBitSet::LongBitSet(const JArray< jlong > & a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6b9d54909d29b341, a0.this$, a1)) {}

        void LongBitSet::and$(const LongBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_and_82cffb4685f37c88], a0.this$);
        }

        void LongBitSet::andNot(const LongBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_andNot_82cffb4685f37c88], a0.this$);
        }

        jint LongBitSet::bits2words(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bits2words_694afffd0eb7dc3c], a0);
        }

        jlong LongBitSet::cardinality() const
        {
          return env->callLongMethod(this$, mids$[mid_cardinality_2e5ae9edcb9b072f]);
        }

        void LongBitSet::clear(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_9c778c9bce6694df], a0);
        }

        void LongBitSet::clear(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_0248b6e53dc27ea3], a0, a1);
        }

        LongBitSet LongBitSet::clone() const
        {
          return LongBitSet(env->callObjectMethod(this$, mids$[mid_clone_905861f491b11dc8]));
        }

        LongBitSet LongBitSet::ensureCapacity(const LongBitSet & a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return LongBitSet(env->callStaticObjectMethod(cls, mids$[mid_ensureCapacity_5387ebb0e9111e64], a0.this$, a1));
        }

        jboolean LongBitSet::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        void LongBitSet::flip(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_flip_9c778c9bce6694df], a0);
        }

        void LongBitSet::flip(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_flip_0248b6e53dc27ea3], a0, a1);
        }

        jboolean LongBitSet::get(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_129dd81483fb5856], a0);
        }

        jboolean LongBitSet::getAndClear(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndClear_129dd81483fb5856], a0);
        }

        jboolean LongBitSet::getAndSet(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndSet_129dd81483fb5856], a0);
        }

        JArray< jlong > LongBitSet::getBits() const
        {
          return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getBits_d09b715a1c5ddffd]));
        }

        jint LongBitSet::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean LongBitSet::intersects(const LongBitSet & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intersects_d339e41658a9ead0], a0.this$);
        }

        jlong LongBitSet::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_2e5ae9edcb9b072f]);
        }

        jlong LongBitSet::nextSetBit(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_nextSetBit_d711eecdc469624a], a0);
        }

        void LongBitSet::or$(const LongBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_or_82cffb4685f37c88], a0.this$);
        }

        jlong LongBitSet::prevSetBit(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_prevSetBit_d711eecdc469624a], a0);
        }

        jlong LongBitSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        jboolean LongBitSet::scanIsEmpty() const
        {
          return env->callBooleanMethod(this$, mids$[mid_scanIsEmpty_8454bd5aa23fd11e]);
        }

        void LongBitSet::set(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_9c778c9bce6694df], a0);
        }

        void LongBitSet::set(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_set_0248b6e53dc27ea3], a0, a1);
        }

        void LongBitSet::xor$(const LongBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_xor_82cffb4685f37c88], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_LongBitSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongBitSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongBitSet_init_(t_LongBitSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongBitSet_and(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_andNot(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_bits2words(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongBitSet_cardinality(t_LongBitSet *self);
        static PyObject *t_LongBitSet_clear(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_clone(t_LongBitSet *self);
        static PyObject *t_LongBitSet_ensureCapacity(PyTypeObject *type, PyObject *args);
        static PyObject *t_LongBitSet_equals(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_flip(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_get(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_getAndClear(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_getAndSet(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_getBits(t_LongBitSet *self);
        static PyObject *t_LongBitSet_hashCode(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_intersects(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_length(t_LongBitSet *self);
        static PyObject *t_LongBitSet_nextSetBit(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_or(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_prevSetBit(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_ramBytesUsed(t_LongBitSet *self);
        static PyObject *t_LongBitSet_scanIsEmpty(t_LongBitSet *self);
        static PyObject *t_LongBitSet_set(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_xor(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_get__bits(t_LongBitSet *self, void *data);
        static PyGetSetDef t_LongBitSet__fields_[] = {
          DECLARE_GET_FIELD(t_LongBitSet, bits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LongBitSet__methods_[] = {
          DECLARE_METHOD(t_LongBitSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongBitSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongBitSet, and, METH_O),
          DECLARE_METHOD(t_LongBitSet, andNot, METH_O),
          DECLARE_METHOD(t_LongBitSet, bits2words, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongBitSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, clear, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, clone, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, ensureCapacity, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LongBitSet, equals, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, flip, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, get, METH_O),
          DECLARE_METHOD(t_LongBitSet, getAndClear, METH_O),
          DECLARE_METHOD(t_LongBitSet, getAndSet, METH_O),
          DECLARE_METHOD(t_LongBitSet, getBits, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, intersects, METH_O),
          DECLARE_METHOD(t_LongBitSet, length, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, nextSetBit, METH_O),
          DECLARE_METHOD(t_LongBitSet, or, METH_O),
          DECLARE_METHOD(t_LongBitSet, prevSetBit, METH_O),
          DECLARE_METHOD(t_LongBitSet, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, scanIsEmpty, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, set, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, xor, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LongBitSet)[] = {
          { Py_tp_methods, t_LongBitSet__methods_ },
          { Py_tp_init, (void *) t_LongBitSet_init_ },
          { Py_tp_getset, t_LongBitSet__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LongBitSet)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LongBitSet, t_LongBitSet, LongBitSet);

        void t_LongBitSet::install(PyObject *module)
        {
          installType(&PY_TYPE(LongBitSet), &PY_TYPE_DEF(LongBitSet), module, "LongBitSet", 0);
        }

        void t_LongBitSet::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongBitSet), "class_", make_descriptor(LongBitSet::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongBitSet), "wrapfn_", make_descriptor(t_LongBitSet::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongBitSet), "boxfn_", make_descriptor(boxObject));
          env->getClass(LongBitSet::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongBitSet), "MAX_NUM_BITS", make_descriptor(LongBitSet::MAX_NUM_BITS));
        }

        static PyObject *t_LongBitSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongBitSet::initializeClass, 1)))
            return NULL;
          return t_LongBitSet::wrap_Object(LongBitSet(((t_LongBitSet *) arg)->object.this$));
        }
        static PyObject *t_LongBitSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongBitSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongBitSet_init_(t_LongBitSet *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              LongBitSet object((jobject) NULL);

              if (!parseArgs(args, "J", &a0))
              {
                INT_CALL(object = LongBitSet(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< jlong > a0((jobject) NULL);
              jlong a1;
              LongBitSet object((jobject) NULL);

              if (!parseArgs(args, "[JJ", &a0, &a1))
              {
                INT_CALL(object = LongBitSet(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LongBitSet_and(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.and$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "and", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_andNot(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.andNot(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "andNot", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_bits2words(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jint result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::LongBitSet::bits2words(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bits2words", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_cardinality(t_LongBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.cardinality());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LongBitSet_clear(t_LongBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.clear(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.clear(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "clear", args);
          return NULL;
        }

        static PyObject *t_LongBitSet_clone(t_LongBitSet *self)
        {
          LongBitSet result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_LongBitSet::wrap_Object(result);
        }

        static PyObject *t_LongBitSet_ensureCapacity(PyTypeObject *type, PyObject *args)
        {
          LongBitSet a0((jobject) NULL);
          jlong a1;
          LongBitSet result((jobject) NULL);

          if (!parseArgs(args, "kJ", LongBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::LongBitSet::ensureCapacity(a0, a1));
            return t_LongBitSet::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "ensureCapacity", args);
          return NULL;
        }

        static PyObject *t_LongBitSet_equals(t_LongBitSet *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(LongBitSet), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LongBitSet_flip(t_LongBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.flip(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.flip(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "flip", args);
          return NULL;
        }

        static PyObject *t_LongBitSet_get(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jboolean result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_getAndClear(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jboolean result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getAndClear(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAndClear", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_getAndSet(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jboolean result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getAndSet(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAndSet", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_getBits(t_LongBitSet *self)
        {
          JArray< jlong > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBits());
          return result.wrap();
        }

        static PyObject *t_LongBitSet_hashCode(t_LongBitSet *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(LongBitSet), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LongBitSet_intersects(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intersects(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intersects", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_length(t_LongBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LongBitSet_nextSetBit(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.nextSetBit(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "nextSetBit", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_or(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.or$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "or", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_prevSetBit(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.prevSetBit(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "prevSetBit", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_ramBytesUsed(t_LongBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LongBitSet_scanIsEmpty(t_LongBitSet *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.scanIsEmpty());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LongBitSet_set(t_LongBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.set(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.set(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "set", args);
          return NULL;
        }

        static PyObject *t_LongBitSet_xor(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.xor$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "xor", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_get__bits(t_LongBitSet *self, void *data)
        {
          JArray< jlong > value((jobject) NULL);
          OBJ_CALL(value = self->object.getBits());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsFilter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {

          ::java::lang::Class *CommonGramsFilter::class$ = NULL;
          jmethodID *CommonGramsFilter::mids$ = NULL;
          bool CommonGramsFilter::live$ = false;
          ::java::lang::String *CommonGramsFilter::GRAM_TYPE = NULL;

          jclass CommonGramsFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/commongrams/CommonGramsFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_85e689f6ceab32ee] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              GRAM_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "GRAM_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CommonGramsFilter::CommonGramsFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_85e689f6ceab32ee, a0.this$, a1.this$)) {}

          jboolean CommonGramsFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void CommonGramsFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {
          static PyObject *t_CommonGramsFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CommonGramsFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CommonGramsFilter_init_(t_CommonGramsFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CommonGramsFilter_incrementToken(t_CommonGramsFilter *self, PyObject *args);
          static PyObject *t_CommonGramsFilter_reset(t_CommonGramsFilter *self, PyObject *args);

          static PyMethodDef t_CommonGramsFilter__methods_[] = {
            DECLARE_METHOD(t_CommonGramsFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CommonGramsFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CommonGramsFilter)[] = {
            { Py_tp_methods, t_CommonGramsFilter__methods_ },
            { Py_tp_init, (void *) t_CommonGramsFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CommonGramsFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(CommonGramsFilter, t_CommonGramsFilter, CommonGramsFilter);

          void t_CommonGramsFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CommonGramsFilter), &PY_TYPE_DEF(CommonGramsFilter), module, "CommonGramsFilter", 0);
          }

          void t_CommonGramsFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CommonGramsFilter), "class_", make_descriptor(CommonGramsFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CommonGramsFilter), "wrapfn_", make_descriptor(t_CommonGramsFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CommonGramsFilter), "boxfn_", make_descriptor(boxObject));
            env->getClass(CommonGramsFilter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CommonGramsFilter), "GRAM_TYPE", make_descriptor(j2p(*CommonGramsFilter::GRAM_TYPE)));
          }

          static PyObject *t_CommonGramsFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CommonGramsFilter::initializeClass, 1)))
              return NULL;
            return t_CommonGramsFilter::wrap_Object(CommonGramsFilter(((t_CommonGramsFilter *) arg)->object.this$));
          }
          static PyObject *t_CommonGramsFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CommonGramsFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CommonGramsFilter_init_(t_CommonGramsFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
            PyTypeObject **p1;
            CommonGramsFilter object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
            {
              INT_CALL(object = CommonGramsFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CommonGramsFilter_incrementToken(t_CommonGramsFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(CommonGramsFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CommonGramsFilter_reset(t_CommonGramsFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CommonGramsFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/TwoPhaseIterator.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/LeafSimScorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanScorer::class$ = NULL;
          jmethodID *SpanScorer::mids$ = NULL;
          bool SpanScorer::live$ = false;

          jclass SpanScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9a4bce2e1839f54e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanWeight;Lorg/apache/lucene/search/spans/Spans;Lorg/apache/lucene/search/LeafSimScorer;)V");
              mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
              mids$[mid_getMaxScore_384f078ef4b8f931] = env->getMethodID(cls, "getMaxScore", "(I)F");
              mids$[mid_getSpans_849621887de963d0] = env->getMethodID(cls, "getSpans", "()Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_iterator_173d81d7b8f93882] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
              mids$[mid_score_58aec2b64dff50c8] = env->getMethodID(cls, "score", "()F");
              mids$[mid_twoPhaseIterator_6458a12a224a1c8a] = env->getMethodID(cls, "twoPhaseIterator", "()Lorg/apache/lucene/search/TwoPhaseIterator;");
              mids$[mid_scoreCurrentDoc_58aec2b64dff50c8] = env->getMethodID(cls, "scoreCurrentDoc", "()F");
              mids$[mid_setFreqCurrentDoc_f2cc1bce94666404] = env->getMethodID(cls, "setFreqCurrentDoc", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanScorer::SpanScorer(const ::org::apache::lucene::search::spans::SpanWeight & a0, const ::org::apache::lucene::search::spans::Spans & a1, const ::org::apache::lucene::search::LeafSimScorer & a2) : ::org::apache::lucene::search::Scorer(env->newObject(initializeClass, &mids$, mid_init$_9a4bce2e1839f54e, a0.this$, a1.this$, a2.this$)) {}

          jint SpanScorer::docID() const
          {
            return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
          }

          jfloat SpanScorer::getMaxScore(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_getMaxScore_384f078ef4b8f931], a0);
          }

          ::org::apache::lucene::search::spans::Spans SpanScorer::getSpans() const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_849621887de963d0]));
          }

          ::org::apache::lucene::search::DocIdSetIterator SpanScorer::iterator() const
          {
            return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_173d81d7b8f93882]));
          }

          jfloat SpanScorer::score() const
          {
            return env->callFloatMethod(this$, mids$[mid_score_58aec2b64dff50c8]);
          }

          ::org::apache::lucene::search::TwoPhaseIterator SpanScorer::twoPhaseIterator() const
          {
            return ::org::apache::lucene::search::TwoPhaseIterator(env->callObjectMethod(this$, mids$[mid_twoPhaseIterator_6458a12a224a1c8a]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanScorer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanScorer_init_(t_SpanScorer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanScorer_docID(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_getMaxScore(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_getSpans(t_SpanScorer *self);
          static PyObject *t_SpanScorer_iterator(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_score(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_twoPhaseIterator(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_get__spans(t_SpanScorer *self, void *data);
          static PyGetSetDef t_SpanScorer__fields_[] = {
            DECLARE_GET_FIELD(t_SpanScorer, spans),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanScorer__methods_[] = {
            DECLARE_METHOD(t_SpanScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanScorer, docID, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, getMaxScore, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, getSpans, METH_NOARGS),
            DECLARE_METHOD(t_SpanScorer, iterator, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, score, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, twoPhaseIterator, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanScorer)[] = {
            { Py_tp_methods, t_SpanScorer__methods_ },
            { Py_tp_init, (void *) t_SpanScorer_init_ },
            { Py_tp_getset, t_SpanScorer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanScorer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::Scorer),
            NULL
          };

          DEFINE_TYPE(SpanScorer, t_SpanScorer, SpanScorer);

          void t_SpanScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanScorer), &PY_TYPE_DEF(SpanScorer), module, "SpanScorer", 0);
          }

          void t_SpanScorer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanScorer), "class_", make_descriptor(SpanScorer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanScorer), "wrapfn_", make_descriptor(t_SpanScorer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanScorer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanScorer::initializeClass, 1)))
              return NULL;
            return t_SpanScorer::wrap_Object(SpanScorer(((t_SpanScorer *) arg)->object.this$));
          }
          static PyObject *t_SpanScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanScorer_init_(t_SpanScorer *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanWeight a0((jobject) NULL);
            ::org::apache::lucene::search::spans::Spans a1((jobject) NULL);
            ::org::apache::lucene::search::LeafSimScorer a2((jobject) NULL);
            SpanScorer object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::search::spans::SpanWeight::initializeClass, ::org::apache::lucene::search::spans::Spans::initializeClass, ::org::apache::lucene::search::LeafSimScorer::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SpanScorer(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanScorer_docID(t_SpanScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docID());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SpanScorer), (PyObject *) self, "docID", args, 2);
          }

          static PyObject *t_SpanScorer_getMaxScore(t_SpanScorer *self, PyObject *args)
          {
            jint a0;
            jfloat result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getMaxScore(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(SpanScorer), (PyObject *) self, "getMaxScore", args, 2);
          }

          static PyObject *t_SpanScorer_getSpans(t_SpanScorer *self)
          {
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);
            OBJ_CALL(result = self->object.getSpans());
            return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
          }

          static PyObject *t_SpanScorer_iterator(t_SpanScorer *self, PyObject *args)
          {
            ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanScorer), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_SpanScorer_score(t_SpanScorer *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.score());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(SpanScorer), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_SpanScorer_twoPhaseIterator(t_SpanScorer *self, PyObject *args)
          {
            ::org::apache::lucene::search::TwoPhaseIterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.twoPhaseIterator());
              return ::org::apache::lucene::search::t_TwoPhaseIterator::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanScorer), (PyObject *) self, "twoPhaseIterator", args, 2);
          }

          static PyObject *t_SpanScorer_get__spans(t_SpanScorer *self, void *data)
          {
            ::org::apache::lucene::search::spans::Spans value((jobject) NULL);
            OBJ_CALL(value = self->object.getSpans());
            return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$ConditionalContext.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/List.h"
#include "org/antlr/v4/runtime/Token.h"
#include "org/antlr/v4/runtime/atn/ParserATNSimulator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$ConditionalContext::class$ = NULL;
          jmethodID *JavascriptParser$ConditionalContext::mids$ = NULL;
          bool JavascriptParser$ConditionalContext::live$ = false;

          jclass JavascriptParser$ConditionalContext::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$ConditionalContext");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5b630188893587b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;)V");
              mids$[mid_expression_49ec78390f08338a] = env->getMethodID(cls, "expression", "()Ljava/util/List;");
              mids$[mid_expression_a4fb3fdc55d1c64a] = env->getMethodID(cls, "expression", "(I)Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$ConditionalContext::JavascriptParser$ConditionalContext(const ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext & a0) : ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->newObject(initializeClass, &mids$, mid_init$_5b630188893587b5, a0.this$)) {}

          ::java::util::List JavascriptParser$ConditionalContext::expression() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_expression_49ec78390f08338a]));
          }

          ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext JavascriptParser$ConditionalContext::expression(jint a0) const
          {
            return ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->callObjectMethod(this$, mids$[mid_expression_a4fb3fdc55d1c64a], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$ConditionalContext_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$ConditionalContext_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$ConditionalContext_of_(t_JavascriptParser$ConditionalContext *self, PyObject *args);
          static int t_JavascriptParser$ConditionalContext_init_(t_JavascriptParser$ConditionalContext *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JavascriptParser$ConditionalContext_expression(t_JavascriptParser$ConditionalContext *self, PyObject *args);
          static PyObject *t_JavascriptParser$ConditionalContext_get__parameters_(t_JavascriptParser$ConditionalContext *self, void *data);
          static PyGetSetDef t_JavascriptParser$ConditionalContext__fields_[] = {
            DECLARE_GET_FIELD(t_JavascriptParser$ConditionalContext, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JavascriptParser$ConditionalContext__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$ConditionalContext, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$ConditionalContext, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$ConditionalContext, of_, METH_VARARGS),
            DECLARE_METHOD(t_JavascriptParser$ConditionalContext, expression, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JavascriptParser$ConditionalContext)[] = {
            { Py_tp_methods, t_JavascriptParser$ConditionalContext__methods_ },
            { Py_tp_init, (void *) t_JavascriptParser$ConditionalContext_init_ },
            { Py_tp_getset, t_JavascriptParser$ConditionalContext__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JavascriptParser$ConditionalContext)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext),
            NULL
          };

          DEFINE_TYPE(JavascriptParser$ConditionalContext, t_JavascriptParser$ConditionalContext, JavascriptParser$ConditionalContext);
          PyObject *t_JavascriptParser$ConditionalContext::wrap_Object(const JavascriptParser$ConditionalContext& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$ConditionalContext::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$ConditionalContext *self = (t_JavascriptParser$ConditionalContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_JavascriptParser$ConditionalContext::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$ConditionalContext::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$ConditionalContext *self = (t_JavascriptParser$ConditionalContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_JavascriptParser$ConditionalContext::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$ConditionalContext), &PY_TYPE_DEF(JavascriptParser$ConditionalContext), module, "JavascriptParser$ConditionalContext", 0);
          }

          void t_JavascriptParser$ConditionalContext::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$ConditionalContext), "class_", make_descriptor(JavascriptParser$ConditionalContext::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$ConditionalContext), "wrapfn_", make_descriptor(t_JavascriptParser$ConditionalContext::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$ConditionalContext), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$ConditionalContext_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$ConditionalContext::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$ConditionalContext::wrap_Object(JavascriptParser$ConditionalContext(((t_JavascriptParser$ConditionalContext *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$ConditionalContext_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$ConditionalContext::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptParser$ConditionalContext_of_(t_JavascriptParser$ConditionalContext *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_JavascriptParser$ConditionalContext_init_(t_JavascriptParser$ConditionalContext *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext a0((jobject) NULL);
            PyTypeObject **p0;
            JavascriptParser$ConditionalContext object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext::initializeClass, &a0, &p0, ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::parameters_))
            {
              INT_CALL(object = JavascriptParser$ConditionalContext(a0));
              self->object = object;
              self->parameters[0] = ::org::antlr::v4::runtime::PY_TYPE(Token);
              self->parameters[1] = ::org::antlr::v4::runtime::atn::PY_TYPE(ParserATNSimulator);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JavascriptParser$ConditionalContext_expression(t_JavascriptParser$ConditionalContext *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.expression());
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::expressions::js::PY_TYPE(JavascriptParser$ExpressionContext));
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.expression(a0));
                  return ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "expression", args);
            return NULL;
          }
          static PyObject *t_JavascriptParser$ConditionalContext_get__parameters_(t_JavascriptParser$ConditionalContext *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorImpl.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *QueryNodeProcessorImpl::class$ = NULL;
              jmethodID *QueryNodeProcessorImpl::mids$ = NULL;
              bool QueryNodeProcessorImpl::live$ = false;

              jclass QueryNodeProcessorImpl::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorImpl");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_ae2484f2d8820041] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_getQueryConfigHandler_04fdb47806be47b9] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_process_9b07be8595532de7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setQueryConfigHandler_ae2484f2d8820041] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_processChildren_f80bf4f68564485e] = env->getMethodID(cls, "processChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_e420eeaadf0bcd20] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryNodeProcessorImpl::QueryNodeProcessorImpl() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              QueryNodeProcessorImpl::QueryNodeProcessorImpl(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ae2484f2d8820041, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler QueryNodeProcessorImpl::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_04fdb47806be47b9]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeProcessorImpl::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_9b07be8595532de7], a0.this$));
              }

              void QueryNodeProcessorImpl::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_ae2484f2d8820041], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_QueryNodeProcessorImpl_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeProcessorImpl_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryNodeProcessorImpl_init_(t_QueryNodeProcessorImpl *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryNodeProcessorImpl_getQueryConfigHandler(t_QueryNodeProcessorImpl *self);
              static PyObject *t_QueryNodeProcessorImpl_process(t_QueryNodeProcessorImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorImpl_setQueryConfigHandler(t_QueryNodeProcessorImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorImpl_get__queryConfigHandler(t_QueryNodeProcessorImpl *self, void *data);
              static int t_QueryNodeProcessorImpl_set__queryConfigHandler(t_QueryNodeProcessorImpl *self, PyObject *arg, void *data);
              static PyGetSetDef t_QueryNodeProcessorImpl__fields_[] = {
                DECLARE_GETSET_FIELD(t_QueryNodeProcessorImpl, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNodeProcessorImpl__methods_[] = {
                DECLARE_METHOD(t_QueryNodeProcessorImpl, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessorImpl, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessorImpl, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorImpl, process, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorImpl, setQueryConfigHandler, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(QueryNodeProcessorImpl)[] = {
                { Py_tp_methods, t_QueryNodeProcessorImpl__methods_ },
                { Py_tp_init, (void *) t_QueryNodeProcessorImpl_init_ },
                { Py_tp_getset, t_QueryNodeProcessorImpl__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(QueryNodeProcessorImpl)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(QueryNodeProcessorImpl, t_QueryNodeProcessorImpl, QueryNodeProcessorImpl);

              void t_QueryNodeProcessorImpl::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeProcessorImpl), &PY_TYPE_DEF(QueryNodeProcessorImpl), module, "QueryNodeProcessorImpl", 0);
              }

              void t_QueryNodeProcessorImpl::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeProcessorImpl), "class_", make_descriptor(QueryNodeProcessorImpl::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeProcessorImpl), "wrapfn_", make_descriptor(t_QueryNodeProcessorImpl::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeProcessorImpl), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNodeProcessorImpl_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeProcessorImpl::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeProcessorImpl::wrap_Object(QueryNodeProcessorImpl(((t_QueryNodeProcessorImpl *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeProcessorImpl_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeProcessorImpl::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryNodeProcessorImpl_init_(t_QueryNodeProcessorImpl *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    QueryNodeProcessorImpl object((jobject) NULL);

                    INT_CALL(object = QueryNodeProcessorImpl());
                    self->object = object;
                    break;
                  }
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                    QueryNodeProcessorImpl object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                    {
                      INT_CALL(object = QueryNodeProcessorImpl(a0));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_QueryNodeProcessorImpl_getQueryConfigHandler(t_QueryNodeProcessorImpl *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_QueryNodeProcessorImpl_process(t_QueryNodeProcessorImpl *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorImpl_setQueryConfigHandler(t_QueryNodeProcessorImpl *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorImpl_get__queryConfigHandler(t_QueryNodeProcessorImpl *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_QueryNodeProcessorImpl_set__queryConfigHandler(t_QueryNodeProcessorImpl *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMJelinekMercerSimilarity.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMJelinekMercerSimilarity::class$ = NULL;
          jmethodID *LMJelinekMercerSimilarity::mids$ = NULL;
          bool LMJelinekMercerSimilarity::live$ = false;

          jclass LMJelinekMercerSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMJelinekMercerSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8e1d952dd65cdc3a] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_f196124a35795af7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;F)V");
              mids$[mid_getLambda_58aec2b64dff50c8] = env->getMethodID(cls, "getLambda", "()F");
              mids$[mid_getName_db9b55ba01e03e4b] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
              mids$[mid_score_761ab1c432346fd0] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_explain_a84367e35a1ef83b] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;Lorg/apache/lucene/search/Explanation;D)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_explain_f9756f2482a92b24] = env->getMethodID(cls, "explain", "(Ljava/util/List;Lorg/apache/lucene/search/similarities/BasicStats;DD)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMJelinekMercerSimilarity::LMJelinekMercerSimilarity(jfloat a0) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_8e1d952dd65cdc3a, a0)) {}

          LMJelinekMercerSimilarity::LMJelinekMercerSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0, jfloat a1) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_f196124a35795af7, a0.this$, a1)) {}

          jfloat LMJelinekMercerSimilarity::getLambda() const
          {
            return env->callFloatMethod(this$, mids$[mid_getLambda_58aec2b64dff50c8]);
          }

          ::java::lang::String LMJelinekMercerSimilarity::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMJelinekMercerSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMJelinekMercerSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMJelinekMercerSimilarity_init_(t_LMJelinekMercerSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMJelinekMercerSimilarity_getLambda(t_LMJelinekMercerSimilarity *self);
          static PyObject *t_LMJelinekMercerSimilarity_getName(t_LMJelinekMercerSimilarity *self, PyObject *args);
          static PyObject *t_LMJelinekMercerSimilarity_get__lambda(t_LMJelinekMercerSimilarity *self, void *data);
          static PyObject *t_LMJelinekMercerSimilarity_get__name(t_LMJelinekMercerSimilarity *self, void *data);
          static PyGetSetDef t_LMJelinekMercerSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_LMJelinekMercerSimilarity, lambda),
            DECLARE_GET_FIELD(t_LMJelinekMercerSimilarity, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMJelinekMercerSimilarity__methods_[] = {
            DECLARE_METHOD(t_LMJelinekMercerSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMJelinekMercerSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMJelinekMercerSimilarity, getLambda, METH_NOARGS),
            DECLARE_METHOD(t_LMJelinekMercerSimilarity, getName, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LMJelinekMercerSimilarity)[] = {
            { Py_tp_methods, t_LMJelinekMercerSimilarity__methods_ },
            { Py_tp_init, (void *) t_LMJelinekMercerSimilarity_init_ },
            { Py_tp_getset, t_LMJelinekMercerSimilarity__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LMJelinekMercerSimilarity)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::LMSimilarity),
            NULL
          };

          DEFINE_TYPE(LMJelinekMercerSimilarity, t_LMJelinekMercerSimilarity, LMJelinekMercerSimilarity);

          void t_LMJelinekMercerSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(LMJelinekMercerSimilarity), &PY_TYPE_DEF(LMJelinekMercerSimilarity), module, "LMJelinekMercerSimilarity", 0);
          }

          void t_LMJelinekMercerSimilarity::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LMJelinekMercerSimilarity), "class_", make_descriptor(LMJelinekMercerSimilarity::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LMJelinekMercerSimilarity), "wrapfn_", make_descriptor(t_LMJelinekMercerSimilarity::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LMJelinekMercerSimilarity), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMJelinekMercerSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMJelinekMercerSimilarity::initializeClass, 1)))
              return NULL;
            return t_LMJelinekMercerSimilarity::wrap_Object(LMJelinekMercerSimilarity(((t_LMJelinekMercerSimilarity *) arg)->object.this$));
          }
          static PyObject *t_LMJelinekMercerSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMJelinekMercerSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMJelinekMercerSimilarity_init_(t_LMJelinekMercerSimilarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jfloat a0;
                LMJelinekMercerSimilarity object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = LMJelinekMercerSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                jfloat a1;
                LMJelinekMercerSimilarity object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LMJelinekMercerSimilarity(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LMJelinekMercerSimilarity_getLambda(t_LMJelinekMercerSimilarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getLambda());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_LMJelinekMercerSimilarity_getName(t_LMJelinekMercerSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getName());
              return j2p(result);
            }

            return callSuper(PY_TYPE(LMJelinekMercerSimilarity), (PyObject *) self, "getName", args, 2);
          }

          static PyObject *t_LMJelinekMercerSimilarity_get__lambda(t_LMJelinekMercerSimilarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getLambda());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_LMJelinekMercerSimilarity_get__name(t_LMJelinekMercerSimilarity *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ByteBlockPool$Allocator.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ByteBlockPool$Allocator::class$ = NULL;
        jmethodID *ByteBlockPool$Allocator::mids$ = NULL;
        bool ByteBlockPool$Allocator::live$ = false;

        jclass ByteBlockPool$Allocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ByteBlockPool$Allocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_getByteBlock_cf386cdb1bbd339f] = env->getMethodID(cls, "getByteBlock", "()[B");
            mids$[mid_recycleByteBlocks_d03990be0130160d] = env->getMethodID(cls, "recycleByteBlocks", "(Ljava/util/List;)V");
            mids$[mid_recycleByteBlocks_06d20f962341558f] = env->getMethodID(cls, "recycleByteBlocks", "([[BII)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBlockPool$Allocator::ByteBlockPool$Allocator(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        JArray< jbyte > ByteBlockPool$Allocator::getByteBlock() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getByteBlock_cf386cdb1bbd339f]));
        }

        void ByteBlockPool$Allocator::recycleByteBlocks(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_d03990be0130160d], a0.this$);
        }

        void ByteBlockPool$Allocator::recycleByteBlocks(const JArray< JArray< jbyte > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_06d20f962341558f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ByteBlockPool$Allocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBlockPool$Allocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBlockPool$Allocator_init_(t_ByteBlockPool$Allocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBlockPool$Allocator_getByteBlock(t_ByteBlockPool$Allocator *self);
        static PyObject *t_ByteBlockPool$Allocator_recycleByteBlocks(t_ByteBlockPool$Allocator *self, PyObject *args);
        static PyObject *t_ByteBlockPool$Allocator_get__byteBlock(t_ByteBlockPool$Allocator *self, void *data);
        static PyGetSetDef t_ByteBlockPool$Allocator__fields_[] = {
          DECLARE_GET_FIELD(t_ByteBlockPool$Allocator, byteBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteBlockPool$Allocator__methods_[] = {
          DECLARE_METHOD(t_ByteBlockPool$Allocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$Allocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$Allocator, getByteBlock, METH_NOARGS),
          DECLARE_METHOD(t_ByteBlockPool$Allocator, recycleByteBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ByteBlockPool$Allocator)[] = {
          { Py_tp_methods, t_ByteBlockPool$Allocator__methods_ },
          { Py_tp_init, (void *) t_ByteBlockPool$Allocator_init_ },
          { Py_tp_getset, t_ByteBlockPool$Allocator__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ByteBlockPool$Allocator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(ByteBlockPool$Allocator, t_ByteBlockPool$Allocator, ByteBlockPool$Allocator);

        void t_ByteBlockPool$Allocator::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBlockPool$Allocator), &PY_TYPE_DEF(ByteBlockPool$Allocator), module, "ByteBlockPool$Allocator", 0);
        }

        void t_ByteBlockPool$Allocator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBlockPool$Allocator), "class_", make_descriptor(ByteBlockPool$Allocator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBlockPool$Allocator), "wrapfn_", make_descriptor(t_ByteBlockPool$Allocator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBlockPool$Allocator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteBlockPool$Allocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBlockPool$Allocator::initializeClass, 1)))
            return NULL;
          return t_ByteBlockPool$Allocator::wrap_Object(ByteBlockPool$Allocator(((t_ByteBlockPool$Allocator *) arg)->object.this$));
        }
        static PyObject *t_ByteBlockPool$Allocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBlockPool$Allocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBlockPool$Allocator_init_(t_ByteBlockPool$Allocator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ByteBlockPool$Allocator object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = ByteBlockPool$Allocator(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBlockPool$Allocator_getByteBlock(t_ByteBlockPool$Allocator *self)
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.getByteBlock());
          return result.wrap();
        }

        static PyObject *t_ByteBlockPool$Allocator_recycleByteBlocks(t_ByteBlockPool$Allocator *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(self->object.recycleByteBlocks(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< JArray< jbyte > > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.recycleByteBlocks(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "recycleByteBlocks", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool$Allocator_get__byteBlock(t_ByteBlockPool$Allocator *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getByteBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiBoolFunction.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/queries/function/docvalues/BoolDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiBoolFunction::class$ = NULL;
            jmethodID *MultiBoolFunction::mids$ = NULL;
            bool MultiBoolFunction::live$ = false;

            jclass MultiBoolFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiBoolFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d03990be0130160d] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                mids$[mid_createWeight_69d322032c5ae159] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_0fa993d09586181d] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/docvalues/BoolDocValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_func_79d91b981374bcba] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)Z");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiBoolFunction::MultiBoolFunction(const ::java::util::List & a0) : ::org::apache::lucene::queries::function::valuesource::BoolFunction(env->newObject(initializeClass, &mids$, mid_init$_d03990be0130160d, a0.this$)) {}

            void MultiBoolFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_69d322032c5ae159], a0.this$, a1.this$);
            }

            ::java::lang::String MultiBoolFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean MultiBoolFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::queries::function::docvalues::BoolDocValues MultiBoolFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::docvalues::BoolDocValues(env->callObjectMethod(this$, mids$[mid_getValues_0fa993d09586181d], a0.this$, a1.this$));
            }

            jint MultiBoolFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiBoolFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiBoolFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiBoolFunction_init_(t_MultiBoolFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiBoolFunction_createWeight(t_MultiBoolFunction *self, PyObject *args);
            static PyObject *t_MultiBoolFunction_description(t_MultiBoolFunction *self, PyObject *args);
            static PyObject *t_MultiBoolFunction_equals(t_MultiBoolFunction *self, PyObject *args);
            static PyObject *t_MultiBoolFunction_getValues(t_MultiBoolFunction *self, PyObject *args);
            static PyObject *t_MultiBoolFunction_hashCode(t_MultiBoolFunction *self, PyObject *args);

            static PyMethodDef t_MultiBoolFunction__methods_[] = {
              DECLARE_METHOD(t_MultiBoolFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiBoolFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiBoolFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_MultiBoolFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_MultiBoolFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_MultiBoolFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_MultiBoolFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(MultiBoolFunction)[] = {
              { Py_tp_methods, t_MultiBoolFunction__methods_ },
              { Py_tp_init, (void *) t_MultiBoolFunction_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(MultiBoolFunction)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::BoolFunction),
              NULL
            };

            DEFINE_TYPE(MultiBoolFunction, t_MultiBoolFunction, MultiBoolFunction);

            void t_MultiBoolFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiBoolFunction), &PY_TYPE_DEF(MultiBoolFunction), module, "MultiBoolFunction", 0);
            }

            void t_MultiBoolFunction::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiBoolFunction), "class_", make_descriptor(MultiBoolFunction::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiBoolFunction), "wrapfn_", make_descriptor(t_MultiBoolFunction::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiBoolFunction), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiBoolFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiBoolFunction::initializeClass, 1)))
                return NULL;
              return t_MultiBoolFunction::wrap_Object(MultiBoolFunction(((t_MultiBoolFunction *) arg)->object.this$));
            }
            static PyObject *t_MultiBoolFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiBoolFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiBoolFunction_init_(t_MultiBoolFunction *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              MultiBoolFunction object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = MultiBoolFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiBoolFunction_createWeight(t_MultiBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(MultiBoolFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_MultiBoolFunction_description(t_MultiBoolFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(MultiBoolFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MultiBoolFunction_equals(t_MultiBoolFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(MultiBoolFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MultiBoolFunction_getValues(t_MultiBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::docvalues::BoolDocValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::docvalues::t_BoolDocValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(MultiBoolFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_MultiBoolFunction_hashCode(t_MultiBoolFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(MultiBoolFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/Bounded.h"
#include "org/apache/lucene/spatial3d/geom/Bounds.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *Bounded::class$ = NULL;
          jmethodID *Bounded::mids$ = NULL;
          bool Bounded::live$ = false;

          jclass Bounded::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/Bounded");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getBounds_bbfc0798cb5fe499] = env->getMethodID(cls, "getBounds", "(Lorg/apache/lucene/spatial3d/geom/Bounds;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void Bounded::getBounds(const ::org::apache::lucene::spatial3d::geom::Bounds & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getBounds_bbfc0798cb5fe499], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_Bounded_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Bounded_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Bounded_getBounds(t_Bounded *self, PyObject *arg);

          static PyMethodDef t_Bounded__methods_[] = {
            DECLARE_METHOD(t_Bounded, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Bounded, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Bounded, getBounds, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Bounded)[] = {
            { Py_tp_methods, t_Bounded__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Bounded)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Bounded, t_Bounded, Bounded);

          void t_Bounded::install(PyObject *module)
          {
            installType(&PY_TYPE(Bounded), &PY_TYPE_DEF(Bounded), module, "Bounded", 0);
          }

          void t_Bounded::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Bounded), "class_", make_descriptor(Bounded::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Bounded), "wrapfn_", make_descriptor(t_Bounded::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Bounded), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Bounded_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Bounded::initializeClass, 1)))
              return NULL;
            return t_Bounded::wrap_Object(Bounded(((t_Bounded *) arg)->object.this$));
          }
          static PyObject *t_Bounded_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Bounded::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Bounded_getBounds(t_Bounded *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::Bounds a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::Bounds::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getBounds(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getBounds", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/dict/UnknownDictionary.h"
#include "org/apache/lucene/analysis/ko/dict/Dictionary$Morpheme.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ko/dict/UnknownDictionary.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ko/dict/BinaryDictionary$ResourceScheme.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/ko/dict/CharacterDefinition.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace dict {

            ::java::lang::Class *UnknownDictionary::class$ = NULL;
            jmethodID *UnknownDictionary::mids$ = NULL;
            bool UnknownDictionary::live$ = false;

            jclass UnknownDictionary::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/dict/UnknownDictionary");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6cf983c700d51b23] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/ko/dict/BinaryDictionary$ResourceScheme;Ljava/lang/String;)V");
                mids$[mid_getCharacterDefinition_d0e010fc051a8323] = env->getMethodID(cls, "getCharacterDefinition", "()Lorg/apache/lucene/analysis/ko/dict/CharacterDefinition;");
                mids$[mid_getInstance_be289d0f0797b46b] = env->getStaticMethodID(cls, "getInstance", "()Lorg/apache/lucene/analysis/ko/dict/UnknownDictionary;");
                mids$[mid_getMorphemes_ec2d69830563855a] = env->getMethodID(cls, "getMorphemes", "(I[CII)[Lorg/apache/lucene/analysis/ko/dict/Dictionary$Morpheme;");
                mids$[mid_getReading_d7593acad64ef635] = env->getMethodID(cls, "getReading", "(I)Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UnknownDictionary::UnknownDictionary(const ::org::apache::lucene::analysis::ko::dict::BinaryDictionary$ResourceScheme & a0, const ::java::lang::String & a1) : ::org::apache::lucene::analysis::ko::dict::BinaryDictionary(env->newObject(initializeClass, &mids$, mid_init$_6cf983c700d51b23, a0.this$, a1.this$)) {}

            ::org::apache::lucene::analysis::ko::dict::CharacterDefinition UnknownDictionary::getCharacterDefinition() const
            {
              return ::org::apache::lucene::analysis::ko::dict::CharacterDefinition(env->callObjectMethod(this$, mids$[mid_getCharacterDefinition_d0e010fc051a8323]));
            }

            UnknownDictionary UnknownDictionary::getInstance()
            {
              jclass cls = env->getClass(initializeClass);
              return UnknownDictionary(env->callStaticObjectMethod(cls, mids$[mid_getInstance_be289d0f0797b46b]));
            }

            JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > UnknownDictionary::getMorphemes(jint a0, const JArray< jchar > & a1, jint a2, jint a3) const
            {
              return JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme >(env->callObjectMethod(this$, mids$[mid_getMorphemes_ec2d69830563855a], a0, a1.this$, a2, a3));
            }

            ::java::lang::String UnknownDictionary::getReading(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getReading_d7593acad64ef635], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace dict {
            static PyObject *t_UnknownDictionary_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UnknownDictionary_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UnknownDictionary_init_(t_UnknownDictionary *self, PyObject *args, PyObject *kwds);
            static PyObject *t_UnknownDictionary_getCharacterDefinition(t_UnknownDictionary *self);
            static PyObject *t_UnknownDictionary_getInstance(PyTypeObject *type);
            static PyObject *t_UnknownDictionary_getMorphemes(t_UnknownDictionary *self, PyObject *args);
            static PyObject *t_UnknownDictionary_getReading(t_UnknownDictionary *self, PyObject *args);
            static PyObject *t_UnknownDictionary_get__characterDefinition(t_UnknownDictionary *self, void *data);
            static PyObject *t_UnknownDictionary_get__instance(t_UnknownDictionary *self, void *data);
            static PyGetSetDef t_UnknownDictionary__fields_[] = {
              DECLARE_GET_FIELD(t_UnknownDictionary, characterDefinition),
              DECLARE_GET_FIELD(t_UnknownDictionary, instance),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_UnknownDictionary__methods_[] = {
              DECLARE_METHOD(t_UnknownDictionary, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UnknownDictionary, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UnknownDictionary, getCharacterDefinition, METH_NOARGS),
              DECLARE_METHOD(t_UnknownDictionary, getInstance, METH_NOARGS | METH_CLASS),
              DECLARE_METHOD(t_UnknownDictionary, getMorphemes, METH_VARARGS),
              DECLARE_METHOD(t_UnknownDictionary, getReading, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(UnknownDictionary)[] = {
              { Py_tp_methods, t_UnknownDictionary__methods_ },
              { Py_tp_init, (void *) t_UnknownDictionary_init_ },
              { Py_tp_getset, t_UnknownDictionary__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(UnknownDictionary)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::analysis::ko::dict::BinaryDictionary),
              NULL
            };

            DEFINE_TYPE(UnknownDictionary, t_UnknownDictionary, UnknownDictionary);

            void t_UnknownDictionary::install(PyObject *module)
            {
              installType(&PY_TYPE(UnknownDictionary), &PY_TYPE_DEF(UnknownDictionary), module, "UnknownDictionary", 0);
            }

            void t_UnknownDictionary::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(UnknownDictionary), "class_", make_descriptor(UnknownDictionary::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(UnknownDictionary), "wrapfn_", make_descriptor(t_UnknownDictionary::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(UnknownDictionary), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_UnknownDictionary_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UnknownDictionary::initializeClass, 1)))
                return NULL;
              return t_UnknownDictionary::wrap_Object(UnknownDictionary(((t_UnknownDictionary *) arg)->object.this$));
            }
            static PyObject *t_UnknownDictionary_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UnknownDictionary::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UnknownDictionary_init_(t_UnknownDictionary *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::ko::dict::BinaryDictionary$ResourceScheme a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String a1((jobject) NULL);
              UnknownDictionary object((jobject) NULL);

              if (!parseArgs(args, "Ks", ::org::apache::lucene::analysis::ko::dict::BinaryDictionary$ResourceScheme::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::ko::dict::t_BinaryDictionary$ResourceScheme::parameters_, &a1))
              {
                INT_CALL(object = UnknownDictionary(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_UnknownDictionary_getCharacterDefinition(t_UnknownDictionary *self)
            {
              ::org::apache::lucene::analysis::ko::dict::CharacterDefinition result((jobject) NULL);
              OBJ_CALL(result = self->object.getCharacterDefinition());
              return ::org::apache::lucene::analysis::ko::dict::t_CharacterDefinition::wrap_Object(result);
            }

            static PyObject *t_UnknownDictionary_getInstance(PyTypeObject *type)
            {
              UnknownDictionary result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::analysis::ko::dict::UnknownDictionary::getInstance());
              return t_UnknownDictionary::wrap_Object(result);
            }

            static PyObject *t_UnknownDictionary_getMorphemes(t_UnknownDictionary *self, PyObject *args)
            {
              jint a0;
              JArray< jchar > a1((jobject) NULL);
              jint a2;
              jint a3;
              JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > result((jobject) NULL);

              if (!parseArgs(args, "I[CII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getMorphemes(a0, a1, a2, a3));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::analysis::ko::dict::t_Dictionary$Morpheme::wrap_jobject);
              }

              return callSuper(PY_TYPE(UnknownDictionary), (PyObject *) self, "getMorphemes", args, 2);
            }

            static PyObject *t_UnknownDictionary_getReading(t_UnknownDictionary *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.getReading(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(UnknownDictionary), (PyObject *) self, "getReading", args, 2);
            }

            static PyObject *t_UnknownDictionary_get__characterDefinition(t_UnknownDictionary *self, void *data)
            {
              ::org::apache::lucene::analysis::ko::dict::CharacterDefinition value((jobject) NULL);
              OBJ_CALL(value = self->object.getCharacterDefinition());
              return ::org::apache::lucene::analysis::ko::dict::t_CharacterDefinition::wrap_Object(value);
            }

            static PyObject *t_UnknownDictionary_get__instance(t_UnknownDictionary *self, void *data)
            {
              UnknownDictionary value((jobject) NULL);
              OBJ_CALL(value = self->object.getInstance());
              return t_UnknownDictionary::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$NumericContext.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/antlr/v4/runtime/Token.h"
#include "org/antlr/v4/runtime/atn/ParserATNSimulator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$NumericContext::class$ = NULL;
          jmethodID *JavascriptParser$NumericContext::mids$ = NULL;
          bool JavascriptParser$NumericContext::live$ = false;

          jclass JavascriptParser$NumericContext::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$NumericContext");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5b630188893587b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$NumericContext::JavascriptParser$NumericContext(const ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext & a0) : ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->newObject(initializeClass, &mids$, mid_init$_5b630188893587b5, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$NumericContext_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$NumericContext_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$NumericContext_of_(t_JavascriptParser$NumericContext *self, PyObject *args);
          static int t_JavascriptParser$NumericContext_init_(t_JavascriptParser$NumericContext *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JavascriptParser$NumericContext_get__parameters_(t_JavascriptParser$NumericContext *self, void *data);
          static PyGetSetDef t_JavascriptParser$NumericContext__fields_[] = {
            DECLARE_GET_FIELD(t_JavascriptParser$NumericContext, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JavascriptParser$NumericContext__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$NumericContext, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$NumericContext, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$NumericContext, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JavascriptParser$NumericContext)[] = {
            { Py_tp_methods, t_JavascriptParser$NumericContext__methods_ },
            { Py_tp_init, (void *) t_JavascriptParser$NumericContext_init_ },
            { Py_tp_getset, t_JavascriptParser$NumericContext__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JavascriptParser$NumericContext)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext),
            NULL
          };

          DEFINE_TYPE(JavascriptParser$NumericContext, t_JavascriptParser$NumericContext, JavascriptParser$NumericContext);
          PyObject *t_JavascriptParser$NumericContext::wrap_Object(const JavascriptParser$NumericContext& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$NumericContext::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$NumericContext *self = (t_JavascriptParser$NumericContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_JavascriptParser$NumericContext::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$NumericContext::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$NumericContext *self = (t_JavascriptParser$NumericContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_JavascriptParser$NumericContext::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$NumericContext), &PY_TYPE_DEF(JavascriptParser$NumericContext), module, "JavascriptParser$NumericContext", 0);
          }

          void t_JavascriptParser$NumericContext::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$NumericContext), "class_", make_descriptor(JavascriptParser$NumericContext::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$NumericContext), "wrapfn_", make_descriptor(t_JavascriptParser$NumericContext::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$NumericContext), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$NumericContext_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$NumericContext::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$NumericContext::wrap_Object(JavascriptParser$NumericContext(((t_JavascriptParser$NumericContext *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$NumericContext_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$NumericContext::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptParser$NumericContext_of_(t_JavascriptParser$NumericContext *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_JavascriptParser$NumericContext_init_(t_JavascriptParser$NumericContext *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext a0((jobject) NULL);
            PyTypeObject **p0;
            JavascriptParser$NumericContext object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext::initializeClass, &a0, &p0, ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::parameters_))
            {
              INT_CALL(object = JavascriptParser$NumericContext(a0));
              self->object = object;
              self->parameters[0] = ::org::antlr::v4::runtime::PY_TYPE(Token);
              self->parameters[1] = ::org::antlr::v4::runtime::atn::PY_TYPE(ParserATNSimulator);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_JavascriptParser$NumericContext_get__parameters_(t_JavascriptParser$NumericContext *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *NumericPayloadTokenFilter::class$ = NULL;
          jmethodID *NumericPayloadTokenFilter::mids$ = NULL;
          bool NumericPayloadTokenFilter::live$ = false;

          jclass NumericPayloadTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f8979586babbf9ac] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;FLjava/lang/String;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NumericPayloadTokenFilter::NumericPayloadTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jfloat a1, const ::java::lang::String & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_f8979586babbf9ac, a0.this$, a1, a2.this$)) {}

          jboolean NumericPayloadTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_NumericPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NumericPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NumericPayloadTokenFilter_init_(t_NumericPayloadTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NumericPayloadTokenFilter_incrementToken(t_NumericPayloadTokenFilter *self, PyObject *args);

          static PyMethodDef t_NumericPayloadTokenFilter__methods_[] = {
            DECLARE_METHOD(t_NumericPayloadTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericPayloadTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericPayloadTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NumericPayloadTokenFilter)[] = {
            { Py_tp_methods, t_NumericPayloadTokenFilter__methods_ },
            { Py_tp_init, (void *) t_NumericPayloadTokenFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NumericPayloadTokenFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(NumericPayloadTokenFilter, t_NumericPayloadTokenFilter, NumericPayloadTokenFilter);

          void t_NumericPayloadTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(NumericPayloadTokenFilter), &PY_TYPE_DEF(NumericPayloadTokenFilter), module, "NumericPayloadTokenFilter", 0);
          }

          void t_NumericPayloadTokenFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NumericPayloadTokenFilter), "class_", make_descriptor(NumericPayloadTokenFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NumericPayloadTokenFilter), "wrapfn_", make_descriptor(t_NumericPayloadTokenFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NumericPayloadTokenFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NumericPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NumericPayloadTokenFilter::initializeClass, 1)))
              return NULL;
            return t_NumericPayloadTokenFilter::wrap_Object(NumericPayloadTokenFilter(((t_NumericPayloadTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_NumericPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NumericPayloadTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NumericPayloadTokenFilter_init_(t_NumericPayloadTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jfloat a1;
            ::java::lang::String a2((jobject) NULL);
            NumericPayloadTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kFs", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = NumericPayloadTokenFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NumericPayloadTokenFilter_incrementToken(t_NumericPayloadTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(NumericPayloadTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/it/ItalianLightStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {

          ::java::lang::Class *ItalianLightStemFilterFactory::class$ = NULL;
          jmethodID *ItalianLightStemFilterFactory::mids$ = NULL;
          bool ItalianLightStemFilterFactory::live$ = false;
          ::java::lang::String *ItalianLightStemFilterFactory::NAME = NULL;

          jclass ItalianLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/it/ItalianLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ItalianLightStemFilterFactory::ItalianLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream ItalianLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {
          static PyObject *t_ItalianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ItalianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ItalianLightStemFilterFactory_init_(t_ItalianLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ItalianLightStemFilterFactory_create(t_ItalianLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_ItalianLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ItalianLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ItalianLightStemFilterFactory)[] = {
            { Py_tp_methods, t_ItalianLightStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_ItalianLightStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ItalianLightStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(ItalianLightStemFilterFactory, t_ItalianLightStemFilterFactory, ItalianLightStemFilterFactory);

          void t_ItalianLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ItalianLightStemFilterFactory), &PY_TYPE_DEF(ItalianLightStemFilterFactory), module, "ItalianLightStemFilterFactory", 0);
          }

          void t_ItalianLightStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ItalianLightStemFilterFactory), "class_", make_descriptor(ItalianLightStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ItalianLightStemFilterFactory), "wrapfn_", make_descriptor(t_ItalianLightStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ItalianLightStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(ItalianLightStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ItalianLightStemFilterFactory), "NAME", make_descriptor(j2p(*ItalianLightStemFilterFactory::NAME)));
          }

          static PyObject *t_ItalianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ItalianLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ItalianLightStemFilterFactory::wrap_Object(ItalianLightStemFilterFactory(((t_ItalianLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ItalianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ItalianLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ItalianLightStemFilterFactory_init_(t_ItalianLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ItalianLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ItalianLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ItalianLightStemFilterFactory_create(t_ItalianLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ItalianLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonDirectory.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonDirectory::class$ = NULL;
        jmethodID *PythonDirectory::mids$ = NULL;
        bool PythonDirectory::live$ = false;

        jclass PythonDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_40e6d6dcc3f676b9] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_createTempOutput_918504249dfbe513] = env->getMethodID(cls, "createTempOutput", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_9fd2eb66a64e6f0f] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileLength_b1e05207ec98e246] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_getPendingDeletions_7dcf4034c6d1a92a] = env->getMethodID(cls, "getPendingDeletions", "()Ljava/util/Set;");
            mids$[mid_listAll_9865da0b5ee490bc] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_obtainLock_f265149b22017c5b] = env->getMethodID(cls, "obtainLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openInput_cc9a9aabe8db93df] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_rename_15b72f6a44ff93f2] = env->getMethodID(cls, "rename", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_sync_9fd2eb66a64e6f0f] = env->getMethodID(cls, "sync", "(Ljava/lang/String;)V");
            mids$[mid_sync_50bc3ddc62a19f2d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_syncMetaData_f2cc1bce94666404] = env->getMethodID(cls, "syncMetaData", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonDirectory::PythonDirectory() : ::org::apache::lucene::store::Directory(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void PythonDirectory::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
        }

        jlong PythonDirectory::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
        }

        void PythonDirectory::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
        }

        void PythonDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_50bc3ddc62a19f2d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonDirectory_init_(t_PythonDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonDirectory_finalize(t_PythonDirectory *self);
        static PyObject *t_PythonDirectory_pythonExtension(t_PythonDirectory *self, PyObject *args);
        static PyObject *t_PythonDirectory_sync(t_PythonDirectory *self, PyObject *args);
        static void JNICALL t_PythonDirectory_close0(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonDirectory_createOutput1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
        static jobject JNICALL t_PythonDirectory_createTempOutput2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2);
        static void JNICALL t_PythonDirectory_deleteFile3(JNIEnv *jenv, jobject jobj, jobject a0);
        static jlong JNICALL t_PythonDirectory_fileLength4(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonDirectory_getPendingDeletions5(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonDirectory_listAll6(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonDirectory_obtainLock7(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonDirectory_openInput8(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
        static void JNICALL t_PythonDirectory_pythonDecRef9(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonDirectory_rename10(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
        static void JNICALL t_PythonDirectory_sync11(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonDirectory_syncMetaData12(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonDirectory_get__self(t_PythonDirectory *self, void *data);
        static PyGetSetDef t_PythonDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_PythonDirectory, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonDirectory__methods_[] = {
          DECLARE_METHOD(t_PythonDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonDirectory, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonDirectory, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonDirectory, sync, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PythonDirectory)[] = {
          { Py_tp_methods, t_PythonDirectory__methods_ },
          { Py_tp_init, (void *) t_PythonDirectory_init_ },
          { Py_tp_getset, t_PythonDirectory__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PythonDirectory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::Directory),
          NULL
        };

        DEFINE_TYPE(PythonDirectory, t_PythonDirectory, PythonDirectory);

        void t_PythonDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonDirectory), &PY_TYPE_DEF(PythonDirectory), module, "PythonDirectory", 1);
        }

        void t_PythonDirectory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonDirectory), "class_", make_descriptor(PythonDirectory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonDirectory), "wrapfn_", make_descriptor(t_PythonDirectory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonDirectory), "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonDirectory::initializeClass);
          JNINativeMethod methods[] = {
            { "close", "()V", (void *) t_PythonDirectory_close0 },
            { "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;", (void *) t_PythonDirectory_createOutput1 },
            { "createTempOutput", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;", (void *) t_PythonDirectory_createTempOutput2 },
            { "deleteFile", "(Ljava/lang/String;)V", (void *) t_PythonDirectory_deleteFile3 },
            { "fileLength", "(Ljava/lang/String;)J", (void *) t_PythonDirectory_fileLength4 },
            { "getPendingDeletions", "()Ljava/util/Set;", (void *) t_PythonDirectory_getPendingDeletions5 },
            { "listAll", "()[Ljava/lang/String;", (void *) t_PythonDirectory_listAll6 },
            { "obtainLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;", (void *) t_PythonDirectory_obtainLock7 },
            { "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;", (void *) t_PythonDirectory_openInput8 },
            { "pythonDecRef", "()V", (void *) t_PythonDirectory_pythonDecRef9 },
            { "rename", "(Ljava/lang/String;Ljava/lang/String;)V", (void *) t_PythonDirectory_rename10 },
            { "sync", "(Ljava/lang/String;)V", (void *) t_PythonDirectory_sync11 },
            { "syncMetaData", "()V", (void *) t_PythonDirectory_syncMetaData12 },
          };
          env->registerNatives(cls, methods, 13);
        }

        static PyObject *t_PythonDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonDirectory::initializeClass, 1)))
            return NULL;
          return t_PythonDirectory::wrap_Object(PythonDirectory(((t_PythonDirectory *) arg)->object.this$));
        }
        static PyObject *t_PythonDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonDirectory_init_(t_PythonDirectory *self, PyObject *args, PyObject *kwds)
        {
          PythonDirectory object((jobject) NULL);

          INT_CALL(object = PythonDirectory());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonDirectory_finalize(t_PythonDirectory *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonDirectory_pythonExtension(t_PythonDirectory *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonDirectory_sync(t_PythonDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(PythonDirectory), (PyObject *) self, "sync", args, 2);
        }

        static void JNICALL t_PythonDirectory_close0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jobject JNICALL t_PythonDirectory_createOutput1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::IndexOutput value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *o1 = ::org::apache::lucene::store::t_IOContext::wrap_Object(::org::apache::lucene::store::IOContext(a1));
          PyObject *result = PyObject_CallMethod(obj, "createOutput", "OO", o0, o1);
          Py_DECREF(o0);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &value))
          {
            throwTypeError("createOutput", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jobject JNICALL t_PythonDirectory_createTempOutput2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::IndexOutput value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *o1 = env->fromJString((jstring) a1, 0);
          PyObject *o2 = ::org::apache::lucene::store::t_IOContext::wrap_Object(::org::apache::lucene::store::IOContext(a2));
          PyObject *result = PyObject_CallMethod(obj, "createTempOutput", "OOO", o0, o1, o2);
          Py_DECREF(o0);
          Py_DECREF(o1);
          Py_DECREF(o2);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &value))
          {
            throwTypeError("createTempOutput", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonDirectory_deleteFile3(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "deleteFile", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jlong JNICALL t_PythonDirectory_fileLength4(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "fileLength", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("fileLength", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static jobject JNICALL t_PythonDirectory_getPendingDeletions5(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::util::Set value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "getPendingDeletions", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::java::util::Set::initializeClass, &value))
          {
            throwTypeError("getPendingDeletions", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jobject JNICALL t_PythonDirectory_listAll6(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          JArray< ::java::lang::String > value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "listAll", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "[s", &value))
          {
            throwTypeError("listAll", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jobject JNICALL t_PythonDirectory_obtainLock7(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::Lock value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "obtainLock", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::Lock::initializeClass, &value))
          {
            throwTypeError("obtainLock", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jobject JNICALL t_PythonDirectory_openInput8(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::IndexInput value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *o1 = ::org::apache::lucene::store::t_IOContext::wrap_Object(::org::apache::lucene::store::IOContext(a1));
          PyObject *result = PyObject_CallMethod(obj, "openInput", "OO", o0, o1);
          Py_DECREF(o0);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &value))
          {
            throwTypeError("openInput", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonDirectory_pythonDecRef9(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonDirectory_rename10(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *o1 = env->fromJString((jstring) a1, 0);
          PyObject *result = PyObject_CallMethod(obj, "rename", "OO", o0, o1);
          Py_DECREF(o0);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonDirectory_sync11(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "sync", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonDirectory_syncMetaData12(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "syncMetaData", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonDirectory_get__self(t_PythonDirectory *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CharsRefBuilder.h"
#include "org/apache/lucene/util/CharsRefBuilder.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/Appendable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CharsRefBuilder::class$ = NULL;
        jmethodID *CharsRefBuilder::mids$ = NULL;
        bool CharsRefBuilder::live$ = false;

        jclass CharsRefBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CharsRefBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_append_b1f0ec27c1b422ee] = env->getMethodID(cls, "append", "(C)Lorg/apache/lucene/util/CharsRefBuilder;");
            mids$[mid_append_549cf66196cb2cc4] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/util/CharsRefBuilder;");
            mids$[mid_append_d5128be76a214037] = env->getMethodID(cls, "append", "([CII)V");
            mids$[mid_append_df6a4f432c26a02d] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Lorg/apache/lucene/util/CharsRefBuilder;");
            mids$[mid_charAt_ebc61ec1e57770d1] = env->getMethodID(cls, "charAt", "(I)C");
            mids$[mid_chars_e11cf13c9a887534] = env->getMethodID(cls, "chars", "()[C");
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyChars_099159949b7e02ee] = env->getMethodID(cls, "copyChars", "(Lorg/apache/lucene/util/CharsRef;)V");
            mids$[mid_copyChars_d5128be76a214037] = env->getMethodID(cls, "copyChars", "([CII)V");
            mids$[mid_copyUTF8Bytes_0bdfd2603b7490a8] = env->getMethodID(cls, "copyUTF8Bytes", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_copyUTF8Bytes_43fdd39c09bb2fad] = env->getMethodID(cls, "copyUTF8Bytes", "([BII)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_get_2361d75e15cf20de] = env->getMethodID(cls, "get", "()Lorg/apache/lucene/util/CharsRef;");
            mids$[mid_grow_040c4cd0390c5aff] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_length_9972fcc56b44e79d] = env->getMethodID(cls, "length", "()I");
            mids$[mid_setCharAt_49eec491b83160ef] = env->getMethodID(cls, "setCharAt", "(IC)V");
            mids$[mid_setLength_040c4cd0390c5aff] = env->getMethodID(cls, "setLength", "(I)V");
            mids$[mid_toCharsRef_2361d75e15cf20de] = env->getMethodID(cls, "toCharsRef", "()Lorg/apache/lucene/util/CharsRef;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CharsRefBuilder::CharsRefBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        CharsRefBuilder CharsRefBuilder::append(jchar a0) const
        {
          return CharsRefBuilder(env->callObjectMethod(this$, mids$[mid_append_b1f0ec27c1b422ee], a0));
        }

        CharsRefBuilder CharsRefBuilder::append(const ::java::lang::CharSequence & a0) const
        {
          return CharsRefBuilder(env->callObjectMethod(this$, mids$[mid_append_549cf66196cb2cc4], a0.this$));
        }

        void CharsRefBuilder::append(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_append_d5128be76a214037], a0.this$, a1, a2);
        }

        CharsRefBuilder CharsRefBuilder::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
        {
          return CharsRefBuilder(env->callObjectMethod(this$, mids$[mid_append_df6a4f432c26a02d], a0.this$, a1, a2));
        }

        jchar CharsRefBuilder::charAt(jint a0) const
        {
          return env->callCharMethod(this$, mids$[mid_charAt_ebc61ec1e57770d1], a0);
        }

        JArray< jchar > CharsRefBuilder::chars() const
        {
          return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_chars_e11cf13c9a887534]));
        }

        void CharsRefBuilder::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
        }

        void CharsRefBuilder::copyChars(const ::org::apache::lucene::util::CharsRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_099159949b7e02ee], a0.this$);
        }

        void CharsRefBuilder::copyChars(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_d5128be76a214037], a0.this$, a1, a2);
        }

        void CharsRefBuilder::copyUTF8Bytes(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyUTF8Bytes_0bdfd2603b7490a8], a0.this$);
        }

        void CharsRefBuilder::copyUTF8Bytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_copyUTF8Bytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }

        jboolean CharsRefBuilder::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::org::apache::lucene::util::CharsRef CharsRefBuilder::get() const
        {
          return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_get_2361d75e15cf20de]));
        }

        void CharsRefBuilder::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_040c4cd0390c5aff], a0);
        }

        jint CharsRefBuilder::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jint CharsRefBuilder::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_9972fcc56b44e79d]);
        }

        void CharsRefBuilder::setCharAt(jint a0, jchar a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setCharAt_49eec491b83160ef], a0, a1);
        }

        void CharsRefBuilder::setLength(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLength_040c4cd0390c5aff], a0);
        }

        ::org::apache::lucene::util::CharsRef CharsRefBuilder::toCharsRef() const
        {
          return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_toCharsRef_2361d75e15cf20de]));
        }

        ::java::lang::String CharsRefBuilder::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CharsRefBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharsRefBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CharsRefBuilder_init_(t_CharsRefBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CharsRefBuilder_append(t_CharsRefBuilder *self, PyObject *args);
        static PyObject *t_CharsRefBuilder_charAt(t_CharsRefBuilder *self, PyObject *arg);
        static PyObject *t_CharsRefBuilder_chars(t_CharsRefBuilder *self);
        static PyObject *t_CharsRefBuilder_clear(t_CharsRefBuilder *self);
        static PyObject *t_CharsRefBuilder_copyChars(t_CharsRefBuilder *self, PyObject *args);
        static PyObject *t_CharsRefBuilder_copyUTF8Bytes(t_CharsRefBuilder *self, PyObject *args);
        static PyObject *t_CharsRefBuilder_equals(t_CharsRefBuilder *self, PyObject *args);
        static PyObject *t_CharsRefBuilder_get(t_CharsRefBuilder *self);
        static PyObject *t_CharsRefBuilder_grow(t_CharsRefBuilder *self, PyObject *arg);
        static PyObject *t_CharsRefBuilder_hashCode(t_CharsRefBuilder *self, PyObject *args);
        static PyObject *t_CharsRefBuilder_length(t_CharsRefBuilder *self);
        static PyObject *t_CharsRefBuilder_setCharAt(t_CharsRefBuilder *self, PyObject *args);
        static PyObject *t_CharsRefBuilder_setLength(t_CharsRefBuilder *self, PyObject *arg);
        static PyObject *t_CharsRefBuilder_toCharsRef(t_CharsRefBuilder *self);
        static PyObject *t_CharsRefBuilder_toString(t_CharsRefBuilder *self, PyObject *args);

        static PyMethodDef t_CharsRefBuilder__methods_[] = {
          DECLARE_METHOD(t_CharsRefBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharsRefBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharsRefBuilder, append, METH_VARARGS),
          DECLARE_METHOD(t_CharsRefBuilder, charAt, METH_O),
          DECLARE_METHOD(t_CharsRefBuilder, chars, METH_NOARGS),
          DECLARE_METHOD(t_CharsRefBuilder, clear, METH_NOARGS),
          DECLARE_METHOD(t_CharsRefBuilder, copyChars, METH_VARARGS),
          DECLARE_METHOD(t_CharsRefBuilder, copyUTF8Bytes, METH_VARARGS),
          DECLARE_METHOD(t_CharsRefBuilder, equals, METH_VARARGS),
          DECLARE_METHOD(t_CharsRefBuilder, get, METH_NOARGS),
          DECLARE_METHOD(t_CharsRefBuilder, grow, METH_O),
          DECLARE_METHOD(t_CharsRefBuilder, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CharsRefBuilder, length, METH_NOARGS),
          DECLARE_METHOD(t_CharsRefBuilder, setCharAt, METH_VARARGS),
          DECLARE_METHOD(t_CharsRefBuilder, setLength, METH_O),
          DECLARE_METHOD(t_CharsRefBuilder, toCharsRef, METH_NOARGS),
          DECLARE_METHOD(t_CharsRefBuilder, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CharsRefBuilder)[] = {
          { Py_tp_methods, t_CharsRefBuilder__methods_ },
          { Py_tp_init, (void *) t_CharsRefBuilder_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CharsRefBuilder)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CharsRefBuilder, t_CharsRefBuilder, CharsRefBuilder);

        void t_CharsRefBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(CharsRefBuilder), &PY_TYPE_DEF(CharsRefBuilder), module, "CharsRefBuilder", 0);
        }

        void t_CharsRefBuilder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharsRefBuilder), "class_", make_descriptor(CharsRefBuilder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharsRefBuilder), "wrapfn_", make_descriptor(t_CharsRefBuilder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharsRefBuilder), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CharsRefBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CharsRefBuilder::initializeClass, 1)))
            return NULL;
          return t_CharsRefBuilder::wrap_Object(CharsRefBuilder(((t_CharsRefBuilder *) arg)->object.this$));
        }
        static PyObject *t_CharsRefBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CharsRefBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CharsRefBuilder_init_(t_CharsRefBuilder *self, PyObject *args, PyObject *kwds)
        {
          CharsRefBuilder object((jobject) NULL);

          INT_CALL(object = CharsRefBuilder());
          self->object = object;

          return 0;
        }

        static PyObject *t_CharsRefBuilder_append(t_CharsRefBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jchar a0;
              CharsRefBuilder result((jobject) NULL);

              if (!parseArgs(args, "C", &a0))
              {
                OBJ_CALL(result = self->object.append(a0));
                return t_CharsRefBuilder::wrap_Object(result);
              }
            }
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              CharsRefBuilder result((jobject) NULL);

              if (!parseArgs(args, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.append(a0));
                return t_CharsRefBuilder::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.append(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint a1;
              jint a2;
              CharsRefBuilder result((jobject) NULL);

              if (!parseArgs(args, "OII", ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.append(a0, a1, a2));
                return t_CharsRefBuilder::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "append", args);
          return NULL;
        }

        static PyObject *t_CharsRefBuilder_charAt(t_CharsRefBuilder *self, PyObject *arg)
        {
          jint a0;
          jchar result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.charAt(a0));
            return c2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "charAt", arg);
          return NULL;
        }

        static PyObject *t_CharsRefBuilder_chars(t_CharsRefBuilder *self)
        {
          JArray< jchar > result((jobject) NULL);
          OBJ_CALL(result = self->object.chars());
          return result.wrap();
        }

        static PyObject *t_CharsRefBuilder_clear(t_CharsRefBuilder *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_CharsRefBuilder_copyChars(t_CharsRefBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::CharsRef a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::CharsRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.copyChars(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.copyChars(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "copyChars", args);
          return NULL;
        }

        static PyObject *t_CharsRefBuilder_copyUTF8Bytes(t_CharsRefBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.copyUTF8Bytes(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.copyUTF8Bytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "copyUTF8Bytes", args);
          return NULL;
        }

        static PyObject *t_CharsRefBuilder_equals(t_CharsRefBuilder *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(CharsRefBuilder), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CharsRefBuilder_get(t_CharsRefBuilder *self)
        {
          ::org::apache::lucene::util::CharsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
        }

        static PyObject *t_CharsRefBuilder_grow(t_CharsRefBuilder *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_CharsRefBuilder_hashCode(t_CharsRefBuilder *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(CharsRefBuilder), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CharsRefBuilder_length(t_CharsRefBuilder *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_CharsRefBuilder_setCharAt(t_CharsRefBuilder *self, PyObject *args)
        {
          jint a0;
          jchar a1;

          if (!parseArgs(args, "IC", &a0, &a1))
          {
            OBJ_CALL(self->object.setCharAt(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCharAt", args);
          return NULL;
        }

        static PyObject *t_CharsRefBuilder_setLength(t_CharsRefBuilder *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setLength(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLength", arg);
          return NULL;
        }

        static PyObject *t_CharsRefBuilder_toCharsRef(t_CharsRefBuilder *self)
        {
          ::org::apache::lucene::util::CharsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.toCharsRef());
          return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
        }

        static PyObject *t_CharsRefBuilder_toString(t_CharsRefBuilder *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(CharsRefBuilder), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/intervals/IntervalFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace intervals {

          ::java::lang::Class *IntervalFilter::class$ = NULL;
          jmethodID *IntervalFilter::mids$ = NULL;
          bool IntervalFilter::live$ = false;

          jclass IntervalFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/intervals/IntervalFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_269ccceecfbfdd07] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/intervals/IntervalIterator;)V");
              mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
              mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
              mids$[mid_end_9972fcc56b44e79d] = env->getMethodID(cls, "end", "()I");
              mids$[mid_gaps_9972fcc56b44e79d] = env->getMethodID(cls, "gaps", "()I");
              mids$[mid_matchCost_58aec2b64dff50c8] = env->getMethodID(cls, "matchCost", "()F");
              mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");
              mids$[mid_nextInterval_9972fcc56b44e79d] = env->getMethodID(cls, "nextInterval", "()I");
              mids$[mid_start_9972fcc56b44e79d] = env->getMethodID(cls, "start", "()I");
              mids$[mid_accept_8454bd5aa23fd11e] = env->getMethodID(cls, "accept", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntervalFilter::IntervalFilter(const ::org::apache::lucene::queries::intervals::IntervalIterator & a0) : ::org::apache::lucene::queries::intervals::IntervalIterator(env->newObject(initializeClass, &mids$, mid_init$_269ccceecfbfdd07, a0.this$)) {}

          jint IntervalFilter::advance(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
          }

          jlong IntervalFilter::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
          }

          jint IntervalFilter::docID() const
          {
            return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
          }

          jint IntervalFilter::end() const
          {
            return env->callIntMethod(this$, mids$[mid_end_9972fcc56b44e79d]);
          }

          jint IntervalFilter::gaps() const
          {
            return env->callIntMethod(this$, mids$[mid_gaps_9972fcc56b44e79d]);
          }

          jfloat IntervalFilter::matchCost() const
          {
            return env->callFloatMethod(this$, mids$[mid_matchCost_58aec2b64dff50c8]);
          }

          jint IntervalFilter::nextDoc() const
          {
            return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
          }

          jint IntervalFilter::nextInterval() const
          {
            return env->callIntMethod(this$, mids$[mid_nextInterval_9972fcc56b44e79d]);
          }

          jint IntervalFilter::start() const
          {
            return env->callIntMethod(this$, mids$[mid_start_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace intervals {
          static PyObject *t_IntervalFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntervalFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IntervalFilter_init_(t_IntervalFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntervalFilter_advance(t_IntervalFilter *self, PyObject *args);
          static PyObject *t_IntervalFilter_cost(t_IntervalFilter *self, PyObject *args);
          static PyObject *t_IntervalFilter_docID(t_IntervalFilter *self, PyObject *args);
          static PyObject *t_IntervalFilter_end(t_IntervalFilter *self, PyObject *args);
          static PyObject *t_IntervalFilter_gaps(t_IntervalFilter *self, PyObject *args);
          static PyObject *t_IntervalFilter_matchCost(t_IntervalFilter *self, PyObject *args);
          static PyObject *t_IntervalFilter_nextDoc(t_IntervalFilter *self, PyObject *args);
          static PyObject *t_IntervalFilter_nextInterval(t_IntervalFilter *self, PyObject *args);
          static PyObject *t_IntervalFilter_start(t_IntervalFilter *self, PyObject *args);

          static PyMethodDef t_IntervalFilter__methods_[] = {
            DECLARE_METHOD(t_IntervalFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntervalFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntervalFilter, advance, METH_VARARGS),
            DECLARE_METHOD(t_IntervalFilter, cost, METH_VARARGS),
            DECLARE_METHOD(t_IntervalFilter, docID, METH_VARARGS),
            DECLARE_METHOD(t_IntervalFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_IntervalFilter, gaps, METH_VARARGS),
            DECLARE_METHOD(t_IntervalFilter, matchCost, METH_VARARGS),
            DECLARE_METHOD(t_IntervalFilter, nextDoc, METH_VARARGS),
            DECLARE_METHOD(t_IntervalFilter, nextInterval, METH_VARARGS),
            DECLARE_METHOD(t_IntervalFilter, start, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IntervalFilter)[] = {
            { Py_tp_methods, t_IntervalFilter__methods_ },
            { Py_tp_init, (void *) t_IntervalFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IntervalFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::queries::intervals::IntervalIterator),
            NULL
          };

          DEFINE_TYPE(IntervalFilter, t_IntervalFilter, IntervalFilter);

          void t_IntervalFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(IntervalFilter), &PY_TYPE_DEF(IntervalFilter), module, "IntervalFilter", 0);
          }

          void t_IntervalFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntervalFilter), "class_", make_descriptor(IntervalFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntervalFilter), "wrapfn_", make_descriptor(t_IntervalFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntervalFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntervalFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntervalFilter::initializeClass, 1)))
              return NULL;
            return t_IntervalFilter::wrap_Object(IntervalFilter(((t_IntervalFilter *) arg)->object.this$));
          }
          static PyObject *t_IntervalFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntervalFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IntervalFilter_init_(t_IntervalFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::queries::intervals::IntervalIterator a0((jobject) NULL);
            IntervalFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::queries::intervals::IntervalIterator::initializeClass, &a0))
            {
              INT_CALL(object = IntervalFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IntervalFilter_advance(t_IntervalFilter *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.advance(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(IntervalFilter), (PyObject *) self, "advance", args, 2);
          }

          static PyObject *t_IntervalFilter_cost(t_IntervalFilter *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(IntervalFilter), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_IntervalFilter_docID(t_IntervalFilter *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docID());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(IntervalFilter), (PyObject *) self, "docID", args, 2);
          }

          static PyObject *t_IntervalFilter_end(t_IntervalFilter *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.end());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(IntervalFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_IntervalFilter_gaps(t_IntervalFilter *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.gaps());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(IntervalFilter), (PyObject *) self, "gaps", args, 2);
          }

          static PyObject *t_IntervalFilter_matchCost(t_IntervalFilter *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.matchCost());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(IntervalFilter), (PyObject *) self, "matchCost", args, 2);
          }

          static PyObject *t_IntervalFilter_nextDoc(t_IntervalFilter *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextDoc());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(IntervalFilter), (PyObject *) self, "nextDoc", args, 2);
          }

          static PyObject *t_IntervalFilter_nextInterval(t_IntervalFilter *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextInterval());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(IntervalFilter), (PyObject *) self, "nextInterval", args, 2);
          }

          static PyObject *t_IntervalFilter_start(t_IntervalFilter *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.start());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(IntervalFilter), (PyObject *) self, "start", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/LinearSquaredDistance.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/spatial3d/geom/DistanceStyle.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "org/apache/lucene/spatial3d/geom/LinearSquaredDistance.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/Plane.h"
#include "org/apache/lucene/spatial3d/geom/Membership.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *LinearSquaredDistance::class$ = NULL;
          jmethodID *LinearSquaredDistance::mids$ = NULL;
          bool LinearSquaredDistance::live$ = false;
          LinearSquaredDistance *LinearSquaredDistance::INSTANCE = NULL;

          jclass LinearSquaredDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/LinearSquaredDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeDistance_5d9fe562983a5b40] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;Lorg/apache/lucene/spatial3d/geom/GeoPoint;)D");
              mids$[mid_computeDistance_1ec77ef423ee02b8] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;Lorg/apache/lucene/spatial3d/geom/GeoPoint;[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_computeDistance_9a12f42782ddf048] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;DDD)D");
              mids$[mid_computeDistance_e314394bf9f24d4d] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;DDD[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_findDistancePoints_90e364a30b4d8b55] = env->getMethodID(cls, "findDistancePoints", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DLorg/apache/lucene/spatial3d/geom/GeoPoint;Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)[Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_findMaximumArcDistance_63963df67d49d40a] = env->getMethodID(cls, "findMaximumArcDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;D)D");
              mids$[mid_findMinimumArcDistance_63963df67d49d40a] = env->getMethodID(cls, "findMinimumArcDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;D)D");
              mids$[mid_fromAggregationForm_d089f34703408a66] = env->getMethodID(cls, "fromAggregationForm", "(D)D");
              mids$[mid_toAggregationForm_d089f34703408a66] = env->getMethodID(cls, "toAggregationForm", "(D)D");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              INSTANCE = new LinearSquaredDistance(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/spatial3d/geom/LinearSquaredDistance;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LinearSquaredDistance::LinearSquaredDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jdouble LinearSquaredDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_5d9fe562983a5b40], a0.this$, a1.this$);
          }

          jdouble LinearSquaredDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::Plane & a1, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a2, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_1ec77ef423ee02b8], a0.this$, a1.this$, a2.this$, a3.this$);
          }

          jdouble LinearSquaredDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0, jdouble a1, jdouble a2, jdouble a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_9a12f42782ddf048], a0.this$, a1, a2, a3);
          }

          jdouble LinearSquaredDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::Plane & a1, jdouble a2, jdouble a3, jdouble a4, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a5) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_e314394bf9f24d4d], a0.this$, a1.this$, a2, a3, a4, a5.this$);
          }

          JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > LinearSquaredDistance::findDistancePoints(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a2, const ::org::apache::lucene::spatial3d::geom::Plane & a3, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a4) const
          {
            return JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint >(env->callObjectMethod(this$, mids$[mid_findDistancePoints_90e364a30b4d8b55], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          jdouble LinearSquaredDistance::findMaximumArcDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_findMaximumArcDistance_63963df67d49d40a], a0.this$, a1);
          }

          jdouble LinearSquaredDistance::findMinimumArcDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_findMinimumArcDistance_63963df67d49d40a], a0.this$, a1);
          }

          jdouble LinearSquaredDistance::fromAggregationForm(jdouble a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_fromAggregationForm_d089f34703408a66], a0);
          }

          jdouble LinearSquaredDistance::toAggregationForm(jdouble a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_toAggregationForm_d089f34703408a66], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_LinearSquaredDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LinearSquaredDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LinearSquaredDistance_init_(t_LinearSquaredDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LinearSquaredDistance_computeDistance(t_LinearSquaredDistance *self, PyObject *args);
          static PyObject *t_LinearSquaredDistance_findDistancePoints(t_LinearSquaredDistance *self, PyObject *args);
          static PyObject *t_LinearSquaredDistance_findMaximumArcDistance(t_LinearSquaredDistance *self, PyObject *args);
          static PyObject *t_LinearSquaredDistance_findMinimumArcDistance(t_LinearSquaredDistance *self, PyObject *args);
          static PyObject *t_LinearSquaredDistance_fromAggregationForm(t_LinearSquaredDistance *self, PyObject *arg);
          static PyObject *t_LinearSquaredDistance_toAggregationForm(t_LinearSquaredDistance *self, PyObject *arg);

          static PyMethodDef t_LinearSquaredDistance__methods_[] = {
            DECLARE_METHOD(t_LinearSquaredDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LinearSquaredDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LinearSquaredDistance, computeDistance, METH_VARARGS),
            DECLARE_METHOD(t_LinearSquaredDistance, findDistancePoints, METH_VARARGS),
            DECLARE_METHOD(t_LinearSquaredDistance, findMaximumArcDistance, METH_VARARGS),
            DECLARE_METHOD(t_LinearSquaredDistance, findMinimumArcDistance, METH_VARARGS),
            DECLARE_METHOD(t_LinearSquaredDistance, fromAggregationForm, METH_O),
            DECLARE_METHOD(t_LinearSquaredDistance, toAggregationForm, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LinearSquaredDistance)[] = {
            { Py_tp_methods, t_LinearSquaredDistance__methods_ },
            { Py_tp_init, (void *) t_LinearSquaredDistance_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LinearSquaredDistance)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(LinearSquaredDistance, t_LinearSquaredDistance, LinearSquaredDistance);

          void t_LinearSquaredDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(LinearSquaredDistance), &PY_TYPE_DEF(LinearSquaredDistance), module, "LinearSquaredDistance", 0);
          }

          void t_LinearSquaredDistance::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LinearSquaredDistance), "class_", make_descriptor(LinearSquaredDistance::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LinearSquaredDistance), "wrapfn_", make_descriptor(t_LinearSquaredDistance::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LinearSquaredDistance), "boxfn_", make_descriptor(boxObject));
            env->getClass(LinearSquaredDistance::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(LinearSquaredDistance), "INSTANCE", make_descriptor(t_LinearSquaredDistance::wrap_Object(*LinearSquaredDistance::INSTANCE)));
          }

          static PyObject *t_LinearSquaredDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LinearSquaredDistance::initializeClass, 1)))
              return NULL;
            return t_LinearSquaredDistance::wrap_Object(LinearSquaredDistance(((t_LinearSquaredDistance *) arg)->object.this$));
          }
          static PyObject *t_LinearSquaredDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LinearSquaredDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LinearSquaredDistance_init_(t_LinearSquaredDistance *self, PyObject *args, PyObject *kwds)
          {
            LinearSquaredDistance object((jobject) NULL);

            INT_CALL(object = LinearSquaredDistance());
            self->object = object;

            return 0;
          }

          static PyObject *t_LinearSquaredDistance_computeDistance(t_LinearSquaredDistance *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Plane a1((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a2((jobject) NULL);
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a3((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kkk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
              {
                ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble result;

                if (!parseArgs(args, "kDDD", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 6:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Plane a1((jobject) NULL);
                jdouble a2;
                jdouble a3;
                jdouble a4;
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a5((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kkDDD[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1, a2, a3, a4, a5));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "computeDistance", args);
            return NULL;
          }

          static PyObject *t_LinearSquaredDistance_findDistancePoints(t_LinearSquaredDistance *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            ::org::apache::lucene::spatial3d::geom::GeoPoint a2((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Plane a3((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a4((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > result((jobject) NULL);

            if (!parseArgs(args, "kDkk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.findDistancePoints(a0, a1, a2, a3, a4));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_jobject);
            }

            PyErr_SetArgsError((PyObject *) self, "findDistancePoints", args);
            return NULL;
          }

          static PyObject *t_LinearSquaredDistance_findMaximumArcDistance(t_LinearSquaredDistance *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            jdouble result;

            if (!parseArgs(args, "kD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findMaximumArcDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findMaximumArcDistance", args);
            return NULL;
          }

          static PyObject *t_LinearSquaredDistance_findMinimumArcDistance(t_LinearSquaredDistance *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            jdouble result;

            if (!parseArgs(args, "kD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findMinimumArcDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findMinimumArcDistance", args);
            return NULL;
          }

          static PyObject *t_LinearSquaredDistance_fromAggregationForm(t_LinearSquaredDistance *self, PyObject *arg)
          {
            jdouble a0;
            jdouble result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = self->object.fromAggregationForm(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "fromAggregationForm", arg);
            return NULL;
          }

          static PyObject *t_LinearSquaredDistance_toAggregationForm(t_LinearSquaredDistance *self, PyObject *arg)
          {
            jdouble a0;
            jdouble result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = self->object.toAggregationForm(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "toAggregationForm", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$ConfigurationKeys.h"
#include "java/util/Map.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig.h"
#include "java/lang/Float.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator.h"
#include "org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/PointsConfig.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Integer.h"
#include "java/util/TimeZone.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "java/lang/Boolean.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *StandardQueryConfigHandler$ConfigurationKeys::class$ = NULL;
              jmethodID *StandardQueryConfigHandler$ConfigurationKeys::mids$ = NULL;
              bool StandardQueryConfigHandler$ConfigurationKeys::live$ = false;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::ALLOW_LEADING_WILDCARD = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::ANALYZER = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::BOOST = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::DATE_RESOLUTION = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::DEFAULT_OPERATOR = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::ENABLE_POSITION_INCREMENTS = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::FIELD_BOOST_MAP = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::FIELD_DATE_RESOLUTION_MAP = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::FUZZY_CONFIG = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::LOCALE = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::MULTI_FIELDS = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::MULTI_TERM_REWRITE_METHOD = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::PHRASE_SLOP = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::POINTS_CONFIG = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::POINTS_CONFIG_MAP = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::TIMEZONE = NULL;

              jclass StandardQueryConfigHandler$ConfigurationKeys::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$ConfigurationKeys");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

                  class$ = new ::java::lang::Class(cls);
                  cls = (jclass) class$->this$;

                  ALLOW_LEADING_WILDCARD = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "ALLOW_LEADING_WILDCARD", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  ANALYZER = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "ANALYZER", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  BOOST = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "BOOST", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  DATE_RESOLUTION = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "DATE_RESOLUTION", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  DEFAULT_OPERATOR = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "DEFAULT_OPERATOR", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  ENABLE_POSITION_INCREMENTS = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "ENABLE_POSITION_INCREMENTS", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  FIELD_BOOST_MAP = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "FIELD_BOOST_MAP", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  FIELD_DATE_RESOLUTION_MAP = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "FIELD_DATE_RESOLUTION_MAP", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  FUZZY_CONFIG = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "FUZZY_CONFIG", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  LOCALE = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "LOCALE", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  MULTI_FIELDS = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "MULTI_FIELDS", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  MULTI_TERM_REWRITE_METHOD = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "MULTI_TERM_REWRITE_METHOD", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  PHRASE_SLOP = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "PHRASE_SLOP", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  POINTS_CONFIG = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "POINTS_CONFIG", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  POINTS_CONFIG_MAP = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "POINTS_CONFIG_MAP", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  TIMEZONE = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "TIMEZONE", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryConfigHandler$ConfigurationKeys::StandardQueryConfigHandler$ConfigurationKeys() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_StandardQueryConfigHandler$ConfigurationKeys_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryConfigHandler$ConfigurationKeys_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardQueryConfigHandler$ConfigurationKeys_init_(t_StandardQueryConfigHandler$ConfigurationKeys *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_StandardQueryConfigHandler$ConfigurationKeys__methods_[] = {
                DECLARE_METHOD(t_StandardQueryConfigHandler$ConfigurationKeys, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$ConfigurationKeys, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(StandardQueryConfigHandler$ConfigurationKeys)[] = {
                { Py_tp_methods, t_StandardQueryConfigHandler$ConfigurationKeys__methods_ },
                { Py_tp_init, (void *) t_StandardQueryConfigHandler$ConfigurationKeys_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(StandardQueryConfigHandler$ConfigurationKeys)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(StandardQueryConfigHandler$ConfigurationKeys, t_StandardQueryConfigHandler$ConfigurationKeys, StandardQueryConfigHandler$ConfigurationKeys);

              void t_StandardQueryConfigHandler$ConfigurationKeys::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), &PY_TYPE_DEF(StandardQueryConfigHandler$ConfigurationKeys), module, "StandardQueryConfigHandler$ConfigurationKeys", 0);
              }

              void t_StandardQueryConfigHandler$ConfigurationKeys::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), "class_", make_descriptor(StandardQueryConfigHandler$ConfigurationKeys::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), "wrapfn_", make_descriptor(t_StandardQueryConfigHandler$ConfigurationKeys::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), "boxfn_", make_descriptor(boxObject));
                env->getClass(StandardQueryConfigHandler$ConfigurationKeys::initializeClass);
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), "ALLOW_LEADING_WILDCARD", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::ALLOW_LEADING_WILDCARD)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), "ANALYZER", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::ANALYZER)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), "BOOST", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::BOOST)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), "DATE_RESOLUTION", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::DATE_RESOLUTION)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), "DEFAULT_OPERATOR", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::DEFAULT_OPERATOR)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), "ENABLE_POSITION_INCREMENTS", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::ENABLE_POSITION_INCREMENTS)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), "FIELD_BOOST_MAP", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::FIELD_BOOST_MAP)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), "FIELD_DATE_RESOLUTION_MAP", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::FIELD_DATE_RESOLUTION_MAP)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), "FUZZY_CONFIG", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::FUZZY_CONFIG)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), "LOCALE", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::LOCALE)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), "MULTI_FIELDS", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::MULTI_FIELDS)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), "MULTI_TERM_REWRITE_METHOD", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::MULTI_TERM_REWRITE_METHOD)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), "PHRASE_SLOP", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::PHRASE_SLOP)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), "POINTS_CONFIG", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::POINTS_CONFIG)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), "POINTS_CONFIG_MAP", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::POINTS_CONFIG_MAP)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), "TIMEZONE", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::TIMEZONE)));
              }

              static PyObject *t_StandardQueryConfigHandler$ConfigurationKeys_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryConfigHandler$ConfigurationKeys::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryConfigHandler$ConfigurationKeys::wrap_Object(StandardQueryConfigHandler$ConfigurationKeys(((t_StandardQueryConfigHandler$ConfigurationKeys *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryConfigHandler$ConfigurationKeys_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryConfigHandler$ConfigurationKeys::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardQueryConfigHandler$ConfigurationKeys_init_(t_StandardQueryConfigHandler$ConfigurationKeys *self, PyObject *args, PyObject *kwds)
              {
                StandardQueryConfigHandler$ConfigurationKeys object((jobject) NULL);

                INT_CALL(object = StandardQueryConfigHandler$ConfigurationKeys());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl.h"
#include "org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter$BytesRefBuilderTermAttribute.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl::class$ = NULL;
          jmethodID *ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl::mids$ = NULL;
          bool ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl::live$ = false;

          jclass ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_builder_036a87a44059e682] = env->getMethodID(cls, "builder", "()Lorg/apache/lucene/util/BytesRefBuilder;");
              mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_clone_3e3d10fb1bca89d9] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/AttributeImpl;");
              mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_getBytesRef_7af2ea2e37ce82b8] = env->getMethodID(cls, "getBytesRef", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
              mids$[mid_toUTF16_ba44900ab7d793b9] = env->getMethodID(cls, "toUTF16", "()Ljava/lang/CharSequence;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl::ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::util::BytesRefBuilder ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl::builder() const
          {
            return ::org::apache::lucene::util::BytesRefBuilder(env->callObjectMethod(this$, mids$[mid_builder_036a87a44059e682]));
          }

          void ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
          }

          ::org::apache::lucene::util::AttributeImpl ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl::clone() const
          {
            return ::org::apache::lucene::util::AttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_3e3d10fb1bca89d9]));
          }

          void ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_26346c38ebc9c090], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl::getBytesRef() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBytesRef_7af2ea2e37ce82b8]));
          }

          void ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
          }

          ::java::lang::CharSequence ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl::toUTF16() const
          {
            return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toUTF16_ba44900ab7d793b9]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_init_(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_builder(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl *self);
          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_clear(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl *self, PyObject *args);
          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_clone(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl *self, PyObject *args);
          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_copyTo(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl *self, PyObject *args);
          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_getBytesRef(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl *self);
          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_reflectWith(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl *self, PyObject *args);
          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_toUTF16(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl *self);
          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_get__bytesRef(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl *self, void *data);
          static PyGetSetDef t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl__fields_[] = {
            DECLARE_GET_FIELD(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl, bytesRef),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl, builder, METH_NOARGS),
            DECLARE_METHOD(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl, clone, METH_VARARGS),
            DECLARE_METHOD(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl, getBytesRef, METH_NOARGS),
            DECLARE_METHOD(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl, reflectWith, METH_VARARGS),
            DECLARE_METHOD(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl, toUTF16, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl)[] = {
            { Py_tp_methods, t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl__methods_ },
            { Py_tp_init, (void *) t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_init_ },
            { Py_tp_getset, t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::AttributeImpl),
            NULL
          };

          DEFINE_TYPE(ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl, t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl, ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl);

          void t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl), &PY_TYPE_DEF(ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl), module, "ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl", 0);
          }

          void t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl), "class_", make_descriptor(ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl), "wrapfn_", make_descriptor(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl::wrap_Object(ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl(((t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_init_(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl object((jobject) NULL);

            INT_CALL(object = ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_builder(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl *self)
          {
            ::org::apache::lucene::util::BytesRefBuilder result((jobject) NULL);
            OBJ_CALL(result = self->object.builder());
            return ::org::apache::lucene::util::t_BytesRefBuilder::wrap_Object(result);
          }

          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_clear(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_clone(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return ::org::apache::lucene::util::t_AttributeImpl::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_copyTo(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_getBytesRef(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_reflectWith(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reflectWith(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
          }

          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_toUTF16(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl *self)
          {
            ::java::lang::CharSequence result((jobject) NULL);
            OBJ_CALL(result = self->object.toUTF16());
            return ::java::lang::t_CharSequence::wrap_Object(result);
          }

          static PyObject *t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl_get__bytesRef(t_ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/TokenStreamFromTermVector.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *TokenStreamFromTermVector::class$ = NULL;
          jmethodID *TokenStreamFromTermVector::mids$ = NULL;
          bool TokenStreamFromTermVector::live$ = false;

          jclass TokenStreamFromTermVector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/TokenStreamFromTermVector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6e48f938e517c8d6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Terms;I)V");
              mids$[mid_getTermVectorTerms_3a66bb2f11d28264] = env->getMethodID(cls, "getTermVectorTerms", "()Lorg/apache/lucene/index/Terms;");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenStreamFromTermVector::TokenStreamFromTermVector(const ::org::apache::lucene::index::Terms & a0, jint a1) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_6e48f938e517c8d6, a0.this$, a1)) {}

          ::org::apache::lucene::index::Terms TokenStreamFromTermVector::getTermVectorTerms() const
          {
            return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_getTermVectorTerms_3a66bb2f11d28264]));
          }

          jboolean TokenStreamFromTermVector::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void TokenStreamFromTermVector::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_TokenStreamFromTermVector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenStreamFromTermVector_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenStreamFromTermVector_init_(t_TokenStreamFromTermVector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenStreamFromTermVector_getTermVectorTerms(t_TokenStreamFromTermVector *self);
          static PyObject *t_TokenStreamFromTermVector_incrementToken(t_TokenStreamFromTermVector *self, PyObject *args);
          static PyObject *t_TokenStreamFromTermVector_reset(t_TokenStreamFromTermVector *self, PyObject *args);
          static PyObject *t_TokenStreamFromTermVector_get__termVectorTerms(t_TokenStreamFromTermVector *self, void *data);
          static PyGetSetDef t_TokenStreamFromTermVector__fields_[] = {
            DECLARE_GET_FIELD(t_TokenStreamFromTermVector, termVectorTerms),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TokenStreamFromTermVector__methods_[] = {
            DECLARE_METHOD(t_TokenStreamFromTermVector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenStreamFromTermVector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenStreamFromTermVector, getTermVectorTerms, METH_NOARGS),
            DECLARE_METHOD(t_TokenStreamFromTermVector, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_TokenStreamFromTermVector, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TokenStreamFromTermVector)[] = {
            { Py_tp_methods, t_TokenStreamFromTermVector__methods_ },
            { Py_tp_init, (void *) t_TokenStreamFromTermVector_init_ },
            { Py_tp_getset, t_TokenStreamFromTermVector__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TokenStreamFromTermVector)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenStream),
            NULL
          };

          DEFINE_TYPE(TokenStreamFromTermVector, t_TokenStreamFromTermVector, TokenStreamFromTermVector);

          void t_TokenStreamFromTermVector::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenStreamFromTermVector), &PY_TYPE_DEF(TokenStreamFromTermVector), module, "TokenStreamFromTermVector", 0);
          }

          void t_TokenStreamFromTermVector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenStreamFromTermVector), "class_", make_descriptor(TokenStreamFromTermVector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenStreamFromTermVector), "wrapfn_", make_descriptor(t_TokenStreamFromTermVector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenStreamFromTermVector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenStreamFromTermVector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenStreamFromTermVector::initializeClass, 1)))
              return NULL;
            return t_TokenStreamFromTermVector::wrap_Object(TokenStreamFromTermVector(((t_TokenStreamFromTermVector *) arg)->object.this$));
          }
          static PyObject *t_TokenStreamFromTermVector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenStreamFromTermVector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenStreamFromTermVector_init_(t_TokenStreamFromTermVector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::Terms a0((jobject) NULL);
            jint a1;
            TokenStreamFromTermVector object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::Terms::initializeClass, &a0, &a1))
            {
              INT_CALL(object = TokenStreamFromTermVector(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenStreamFromTermVector_getTermVectorTerms(t_TokenStreamFromTermVector *self)
          {
            ::org::apache::lucene::index::Terms result((jobject) NULL);
            OBJ_CALL(result = self->object.getTermVectorTerms());
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          static PyObject *t_TokenStreamFromTermVector_incrementToken(t_TokenStreamFromTermVector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(TokenStreamFromTermVector), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_TokenStreamFromTermVector_reset(t_TokenStreamFromTermVector *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(TokenStreamFromTermVector), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_TokenStreamFromTermVector_get__termVectorTerms(t_TokenStreamFromTermVector *self, void *data)
          {
            ::org::apache::lucene::index::Terms value((jobject) NULL);
            OBJ_CALL(value = self->object.getTermVectorTerms());
            return ::org::apache::lucene::index::t_Terms::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/UnifiedHighlighter$HighlightFlag.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/uhighlight/UnifiedHighlighter$HighlightFlag.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *UnifiedHighlighter$HighlightFlag::class$ = NULL;
          jmethodID *UnifiedHighlighter$HighlightFlag::mids$ = NULL;
          bool UnifiedHighlighter$HighlightFlag::live$ = false;
          UnifiedHighlighter$HighlightFlag *UnifiedHighlighter$HighlightFlag::MULTI_TERM_QUERY = NULL;
          UnifiedHighlighter$HighlightFlag *UnifiedHighlighter$HighlightFlag::PASSAGE_RELEVANCY_OVER_SPEED = NULL;
          UnifiedHighlighter$HighlightFlag *UnifiedHighlighter$HighlightFlag::PHRASES = NULL;
          UnifiedHighlighter$HighlightFlag *UnifiedHighlighter$HighlightFlag::WEIGHT_MATCHES = NULL;

          jclass UnifiedHighlighter$HighlightFlag::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/UnifiedHighlighter$HighlightFlag");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_993ff5ab1d3ad093] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$HighlightFlag;");
              mids$[mid_values_bf05145965707a13] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$HighlightFlag;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              MULTI_TERM_QUERY = new UnifiedHighlighter$HighlightFlag(env->getStaticObjectField(cls, "MULTI_TERM_QUERY", "Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$HighlightFlag;"));
              PASSAGE_RELEVANCY_OVER_SPEED = new UnifiedHighlighter$HighlightFlag(env->getStaticObjectField(cls, "PASSAGE_RELEVANCY_OVER_SPEED", "Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$HighlightFlag;"));
              PHRASES = new UnifiedHighlighter$HighlightFlag(env->getStaticObjectField(cls, "PHRASES", "Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$HighlightFlag;"));
              WEIGHT_MATCHES = new UnifiedHighlighter$HighlightFlag(env->getStaticObjectField(cls, "WEIGHT_MATCHES", "Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$HighlightFlag;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UnifiedHighlighter$HighlightFlag UnifiedHighlighter$HighlightFlag::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return UnifiedHighlighter$HighlightFlag(env->callStaticObjectMethod(cls, mids$[mid_valueOf_993ff5ab1d3ad093], a0.this$));
          }

          JArray< UnifiedHighlighter$HighlightFlag > UnifiedHighlighter$HighlightFlag::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< UnifiedHighlighter$HighlightFlag >(env->callStaticObjectMethod(cls, mids$[mid_values_bf05145965707a13]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_UnifiedHighlighter$HighlightFlag_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UnifiedHighlighter$HighlightFlag_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UnifiedHighlighter$HighlightFlag_of_(t_UnifiedHighlighter$HighlightFlag *self, PyObject *args);
          static PyObject *t_UnifiedHighlighter$HighlightFlag_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_UnifiedHighlighter$HighlightFlag_values(PyTypeObject *type);
          static PyObject *t_UnifiedHighlighter$HighlightFlag_get__parameters_(t_UnifiedHighlighter$HighlightFlag *self, void *data);
          static PyGetSetDef t_UnifiedHighlighter$HighlightFlag__fields_[] = {
            DECLARE_GET_FIELD(t_UnifiedHighlighter$HighlightFlag, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UnifiedHighlighter$HighlightFlag__methods_[] = {
            DECLARE_METHOD(t_UnifiedHighlighter$HighlightFlag, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UnifiedHighlighter$HighlightFlag, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UnifiedHighlighter$HighlightFlag, of_, METH_VARARGS),
            DECLARE_METHOD(t_UnifiedHighlighter$HighlightFlag, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_UnifiedHighlighter$HighlightFlag, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(UnifiedHighlighter$HighlightFlag)[] = {
            { Py_tp_methods, t_UnifiedHighlighter$HighlightFlag__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_UnifiedHighlighter$HighlightFlag__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(UnifiedHighlighter$HighlightFlag)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(UnifiedHighlighter$HighlightFlag, t_UnifiedHighlighter$HighlightFlag, UnifiedHighlighter$HighlightFlag);
          PyObject *t_UnifiedHighlighter$HighlightFlag::wrap_Object(const UnifiedHighlighter$HighlightFlag& object, PyTypeObject *p0)
          {
            PyObject *obj = t_UnifiedHighlighter$HighlightFlag::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_UnifiedHighlighter$HighlightFlag *self = (t_UnifiedHighlighter$HighlightFlag *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_UnifiedHighlighter$HighlightFlag::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_UnifiedHighlighter$HighlightFlag::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_UnifiedHighlighter$HighlightFlag *self = (t_UnifiedHighlighter$HighlightFlag *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_UnifiedHighlighter$HighlightFlag::install(PyObject *module)
          {
            installType(&PY_TYPE(UnifiedHighlighter$HighlightFlag), &PY_TYPE_DEF(UnifiedHighlighter$HighlightFlag), module, "UnifiedHighlighter$HighlightFlag", 0);
          }

          void t_UnifiedHighlighter$HighlightFlag::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter$HighlightFlag), "class_", make_descriptor(UnifiedHighlighter$HighlightFlag::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter$HighlightFlag), "wrapfn_", make_descriptor(t_UnifiedHighlighter$HighlightFlag::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter$HighlightFlag), "boxfn_", make_descriptor(boxObject));
            env->getClass(UnifiedHighlighter$HighlightFlag::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter$HighlightFlag), "MULTI_TERM_QUERY", make_descriptor(t_UnifiedHighlighter$HighlightFlag::wrap_Object(*UnifiedHighlighter$HighlightFlag::MULTI_TERM_QUERY)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter$HighlightFlag), "PASSAGE_RELEVANCY_OVER_SPEED", make_descriptor(t_UnifiedHighlighter$HighlightFlag::wrap_Object(*UnifiedHighlighter$HighlightFlag::PASSAGE_RELEVANCY_OVER_SPEED)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter$HighlightFlag), "PHRASES", make_descriptor(t_UnifiedHighlighter$HighlightFlag::wrap_Object(*UnifiedHighlighter$HighlightFlag::PHRASES)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnifiedHighlighter$HighlightFlag), "WEIGHT_MATCHES", make_descriptor(t_UnifiedHighlighter$HighlightFlag::wrap_Object(*UnifiedHighlighter$HighlightFlag::WEIGHT_MATCHES)));
          }

          static PyObject *t_UnifiedHighlighter$HighlightFlag_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UnifiedHighlighter$HighlightFlag::initializeClass, 1)))
              return NULL;
            return t_UnifiedHighlighter$HighlightFlag::wrap_Object(UnifiedHighlighter$HighlightFlag(((t_UnifiedHighlighter$HighlightFlag *) arg)->object.this$));
          }
          static PyObject *t_UnifiedHighlighter$HighlightFlag_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UnifiedHighlighter$HighlightFlag::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_UnifiedHighlighter$HighlightFlag_of_(t_UnifiedHighlighter$HighlightFlag *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_UnifiedHighlighter$HighlightFlag_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            UnifiedHighlighter$HighlightFlag result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$HighlightFlag::valueOf(a0));
              return t_UnifiedHighlighter$HighlightFlag::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_UnifiedHighlighter$HighlightFlag_values(PyTypeObject *type)
          {
            JArray< UnifiedHighlighter$HighlightFlag > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$HighlightFlag::values());
            return JArray<jobject>(result.this$).wrap(t_UnifiedHighlighter$HighlightFlag::wrap_jobject);
          }
          static PyObject *t_UnifiedHighlighter$HighlightFlag_get__parameters_(t_UnifiedHighlighter$HighlightFlag *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/TermVectorOffsetStrategy.h"
#include "org/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/search/uhighlight/OffsetsEnum.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/uhighlight/UHComponents.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *TermVectorOffsetStrategy::class$ = NULL;
          jmethodID *TermVectorOffsetStrategy::mids$ = NULL;
          bool TermVectorOffsetStrategy::live$ = false;

          jclass TermVectorOffsetStrategy::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/TermVectorOffsetStrategy");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8858451d37bfc18c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/uhighlight/UHComponents;)V");
              mids$[mid_getOffsetSource_d592a7a3fc9567b1] = env->getMethodID(cls, "getOffsetSource", "()Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource;");
              mids$[mid_getOffsetsEnum_55596ccb3f6b81ab] = env->getMethodID(cls, "getOffsetsEnum", "(Lorg/apache/lucene/index/LeafReader;ILjava/lang/String;)Lorg/apache/lucene/search/uhighlight/OffsetsEnum;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TermVectorOffsetStrategy::TermVectorOffsetStrategy(const ::org::apache::lucene::search::uhighlight::UHComponents & a0) : ::org::apache::lucene::search::uhighlight::FieldOffsetStrategy(env->newObject(initializeClass, &mids$, mid_init$_8858451d37bfc18c, a0.this$)) {}

          ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource TermVectorOffsetStrategy::getOffsetSource() const
          {
            return ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource(env->callObjectMethod(this$, mids$[mid_getOffsetSource_d592a7a3fc9567b1]));
          }

          ::org::apache::lucene::search::uhighlight::OffsetsEnum TermVectorOffsetStrategy::getOffsetsEnum(const ::org::apache::lucene::index::LeafReader & a0, jint a1, const ::java::lang::String & a2) const
          {
            return ::org::apache::lucene::search::uhighlight::OffsetsEnum(env->callObjectMethod(this$, mids$[mid_getOffsetsEnum_55596ccb3f6b81ab], a0.this$, a1, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_TermVectorOffsetStrategy_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermVectorOffsetStrategy_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TermVectorOffsetStrategy_init_(t_TermVectorOffsetStrategy *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TermVectorOffsetStrategy_getOffsetSource(t_TermVectorOffsetStrategy *self, PyObject *args);
          static PyObject *t_TermVectorOffsetStrategy_getOffsetsEnum(t_TermVectorOffsetStrategy *self, PyObject *args);
          static PyObject *t_TermVectorOffsetStrategy_get__offsetSource(t_TermVectorOffsetStrategy *self, void *data);
          static PyGetSetDef t_TermVectorOffsetStrategy__fields_[] = {
            DECLARE_GET_FIELD(t_TermVectorOffsetStrategy, offsetSource),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TermVectorOffsetStrategy__methods_[] = {
            DECLARE_METHOD(t_TermVectorOffsetStrategy, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermVectorOffsetStrategy, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermVectorOffsetStrategy, getOffsetSource, METH_VARARGS),
            DECLARE_METHOD(t_TermVectorOffsetStrategy, getOffsetsEnum, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TermVectorOffsetStrategy)[] = {
            { Py_tp_methods, t_TermVectorOffsetStrategy__methods_ },
            { Py_tp_init, (void *) t_TermVectorOffsetStrategy_init_ },
            { Py_tp_getset, t_TermVectorOffsetStrategy__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TermVectorOffsetStrategy)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::uhighlight::FieldOffsetStrategy),
            NULL
          };

          DEFINE_TYPE(TermVectorOffsetStrategy, t_TermVectorOffsetStrategy, TermVectorOffsetStrategy);

          void t_TermVectorOffsetStrategy::install(PyObject *module)
          {
            installType(&PY_TYPE(TermVectorOffsetStrategy), &PY_TYPE_DEF(TermVectorOffsetStrategy), module, "TermVectorOffsetStrategy", 0);
          }

          void t_TermVectorOffsetStrategy::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermVectorOffsetStrategy), "class_", make_descriptor(TermVectorOffsetStrategy::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermVectorOffsetStrategy), "wrapfn_", make_descriptor(t_TermVectorOffsetStrategy::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermVectorOffsetStrategy), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermVectorOffsetStrategy_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermVectorOffsetStrategy::initializeClass, 1)))
              return NULL;
            return t_TermVectorOffsetStrategy::wrap_Object(TermVectorOffsetStrategy(((t_TermVectorOffsetStrategy *) arg)->object.this$));
          }
          static PyObject *t_TermVectorOffsetStrategy_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermVectorOffsetStrategy::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TermVectorOffsetStrategy_init_(t_TermVectorOffsetStrategy *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::uhighlight::UHComponents a0((jobject) NULL);
            TermVectorOffsetStrategy object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::uhighlight::UHComponents::initializeClass, &a0))
            {
              INT_CALL(object = TermVectorOffsetStrategy(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TermVectorOffsetStrategy_getOffsetSource(t_TermVectorOffsetStrategy *self, PyObject *args)
          {
            ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getOffsetSource());
              return ::org::apache::lucene::search::uhighlight::t_UnifiedHighlighter$OffsetSource::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TermVectorOffsetStrategy), (PyObject *) self, "getOffsetSource", args, 2);
          }

          static PyObject *t_TermVectorOffsetStrategy_getOffsetsEnum(t_TermVectorOffsetStrategy *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::search::uhighlight::OffsetsEnum result((jobject) NULL);

            if (!parseArgs(args, "kIs", ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getOffsetsEnum(a0, a1, a2));
              return ::org::apache::lucene::search::uhighlight::t_OffsetsEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TermVectorOffsetStrategy), (PyObject *) self, "getOffsetsEnum", args, 2);
          }

          static PyObject *t_TermVectorOffsetStrategy_get__offsetSource(t_TermVectorOffsetStrategy *self, void *data)
          {
            ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource value((jobject) NULL);
            OBJ_CALL(value = self->object.getOffsetSource());
            return ::org::apache::lucene::search::uhighlight::t_UnifiedHighlighter$OffsetSource::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/OrQuery.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceSubQuery.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *OrQuery::class$ = NULL;
            jmethodID *OrQuery::mids$ = NULL;
            bool OrQuery::live$ = false;

            jclass OrQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/OrQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f3e5aa525cb56d41] = env->getMethodID(cls, "<init>", "(Ljava/util/List;ZLjava/lang/String;)V");
                mids$[mid_addSpanQueries_121a707f1abd1a95] = env->getMethodID(cls, "addSpanQueries", "(Lorg/apache/lucene/queryparser/surround/query/SpanNearClauseFactory;)V");
                mids$[mid_distanceSubQueryNotAllowed_db9b55ba01e03e4b] = env->getMethodID(cls, "distanceSubQueryNotAllowed", "()Ljava/lang/String;");
                mids$[mid_makeLuceneQueryFieldNoBoost_464e180a5423633e] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            OrQuery::OrQuery(const ::java::util::List & a0, jboolean a1, const ::java::lang::String & a2) : ::org::apache::lucene::queryparser::surround::query::ComposedQuery(env->newObject(initializeClass, &mids$, mid_init$_f3e5aa525cb56d41, a0.this$, a1, a2.this$)) {}

            void OrQuery::addSpanQueries(const ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQueries_121a707f1abd1a95], a0.this$);
            }

            ::java::lang::String OrQuery::distanceSubQueryNotAllowed() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_distanceSubQueryNotAllowed_db9b55ba01e03e4b]));
            }

            ::org::apache::lucene::search::Query OrQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_464e180a5423633e], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_OrQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_OrQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_OrQuery_init_(t_OrQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_OrQuery_addSpanQueries(t_OrQuery *self, PyObject *arg);
            static PyObject *t_OrQuery_distanceSubQueryNotAllowed(t_OrQuery *self);
            static PyObject *t_OrQuery_makeLuceneQueryFieldNoBoost(t_OrQuery *self, PyObject *args);

            static PyMethodDef t_OrQuery__methods_[] = {
              DECLARE_METHOD(t_OrQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_OrQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_OrQuery, addSpanQueries, METH_O),
              DECLARE_METHOD(t_OrQuery, distanceSubQueryNotAllowed, METH_NOARGS),
              DECLARE_METHOD(t_OrQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(OrQuery)[] = {
              { Py_tp_methods, t_OrQuery__methods_ },
              { Py_tp_init, (void *) t_OrQuery_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(OrQuery)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::surround::query::ComposedQuery),
              NULL
            };

            DEFINE_TYPE(OrQuery, t_OrQuery, OrQuery);

            void t_OrQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(OrQuery), &PY_TYPE_DEF(OrQuery), module, "OrQuery", 0);
            }

            void t_OrQuery::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(OrQuery), "class_", make_descriptor(OrQuery::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(OrQuery), "wrapfn_", make_descriptor(t_OrQuery::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(OrQuery), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_OrQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, OrQuery::initializeClass, 1)))
                return NULL;
              return t_OrQuery::wrap_Object(OrQuery(((t_OrQuery *) arg)->object.this$));
            }
            static PyObject *t_OrQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, OrQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_OrQuery_init_(t_OrQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              ::java::lang::String a2((jobject) NULL);
              OrQuery object((jobject) NULL);

              if (!parseArgs(args, "KZs", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
              {
                INT_CALL(object = OrQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_OrQuery_addSpanQueries(t_OrQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQueries(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQueries", arg);
              return NULL;
            }

            static PyObject *t_OrQuery_distanceSubQueryNotAllowed(t_OrQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.distanceSubQueryNotAllowed());
              return j2p(result);
            }

            static PyObject *t_OrQuery_makeLuceneQueryFieldNoBoost(t_OrQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(PY_TYPE(OrQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/LazyDocument.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *LazyDocument::class$ = NULL;
        jmethodID *LazyDocument::mids$ = NULL;
        bool LazyDocument::live$ = false;

        jclass LazyDocument::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/LazyDocument");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b7844aa3ca05a721] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;I)V");
            mids$[mid_getField_79a4e4a78a8faedf] = env->getMethodID(cls, "getField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/IndexableField;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LazyDocument::LazyDocument(const ::org::apache::lucene::index::IndexReader & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b7844aa3ca05a721, a0.this$, a1)) {}

        ::org::apache::lucene::index::IndexableField LazyDocument::getField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::IndexableField(env->callObjectMethod(this$, mids$[mid_getField_79a4e4a78a8faedf], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_LazyDocument_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LazyDocument_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LazyDocument_init_(t_LazyDocument *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LazyDocument_getField(t_LazyDocument *self, PyObject *arg);

        static PyMethodDef t_LazyDocument__methods_[] = {
          DECLARE_METHOD(t_LazyDocument, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LazyDocument, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LazyDocument, getField, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LazyDocument)[] = {
          { Py_tp_methods, t_LazyDocument__methods_ },
          { Py_tp_init, (void *) t_LazyDocument_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LazyDocument)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LazyDocument, t_LazyDocument, LazyDocument);

        void t_LazyDocument::install(PyObject *module)
        {
          installType(&PY_TYPE(LazyDocument), &PY_TYPE_DEF(LazyDocument), module, "LazyDocument", 0);
        }

        void t_LazyDocument::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LazyDocument), "class_", make_descriptor(LazyDocument::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LazyDocument), "wrapfn_", make_descriptor(t_LazyDocument::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LazyDocument), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LazyDocument_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LazyDocument::initializeClass, 1)))
            return NULL;
          return t_LazyDocument::wrap_Object(LazyDocument(((t_LazyDocument *) arg)->object.this$));
        }
        static PyObject *t_LazyDocument_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LazyDocument::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LazyDocument_init_(t_LazyDocument *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          jint a1;
          LazyDocument object((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            INT_CALL(object = LazyDocument(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LazyDocument_getField(t_LazyDocument *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::IndexableField result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getField(a0));
            return ::org::apache::lucene::index::t_IndexableField::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getField", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "java/util/Map.h"
#include "java/lang/Long.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/lang/Integer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/text/DecimalFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RamUsageEstimator::class$ = NULL;
        jmethodID *RamUsageEstimator::mids$ = NULL;
        bool RamUsageEstimator::live$ = false;
        jboolean RamUsageEstimator::COMPRESSED_REFS_ENABLED = (jboolean) 0;
        jlong RamUsageEstimator::HASHTABLE_RAM_BYTES_PER_ENTRY = (jlong) 0;
        jlong RamUsageEstimator::LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY = (jlong) 0;
        jint RamUsageEstimator::MAX_DEPTH = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_ARRAY_HEADER = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_OBJECT_ALIGNMENT = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_OBJECT_HEADER = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_OBJECT_REF = (jint) 0;
        jlong RamUsageEstimator::ONE_GB = (jlong) 0;
        jlong RamUsageEstimator::ONE_KB = (jlong) 0;
        jlong RamUsageEstimator::ONE_MB = (jlong) 0;
        jint RamUsageEstimator::QUERY_DEFAULT_RAM_BYTES_USED = (jint) 0;
        jint RamUsageEstimator::UNKNOWN_DEFAULT_RAM_BYTES_USED = (jint) 0;
        ::java::util::Map *RamUsageEstimator::primitiveSizes = NULL;

        jclass RamUsageEstimator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RamUsageEstimator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_alignObjectSize_d711eecdc469624a] = env->getStaticMethodID(cls, "alignObjectSize", "(J)J");
            mids$[mid_humanReadableUnits_55e776ffac018431] = env->getStaticMethodID(cls, "humanReadableUnits", "(J)Ljava/lang/String;");
            mids$[mid_humanReadableUnits_3954aad118db45ad] = env->getStaticMethodID(cls, "humanReadableUnits", "(JLjava/text/DecimalFormat;)Ljava/lang/String;");
            mids$[mid_shallowSizeOf_a6ba6de4dd4ed492] = env->getStaticMethodID(cls, "shallowSizeOf", "([Ljava/lang/Object;)J");
            mids$[mid_shallowSizeOf_c602cc71de3e942a] = env->getStaticMethodID(cls, "shallowSizeOf", "(Ljava/lang/Object;)J");
            mids$[mid_shallowSizeOfInstance_8ea87e9cb0ca4dd0] = env->getStaticMethodID(cls, "shallowSizeOfInstance", "(Ljava/lang/Class;)J");
            mids$[mid_sizeOf_d203c0dc0f144d1b] = env->getStaticMethodID(cls, "sizeOf", "(Ljava/lang/Long;)J");
            mids$[mid_sizeOf_95a0ff0710929aaf] = env->getStaticMethodID(cls, "sizeOf", "([B)J");
            mids$[mid_sizeOf_61d19defddc48587] = env->getStaticMethodID(cls, "sizeOf", "([C)J");
            mids$[mid_sizeOf_087bbda4bb73a252] = env->getStaticMethodID(cls, "sizeOf", "([D)J");
            mids$[mid_sizeOf_d4f01cd72bae9c25] = env->getStaticMethodID(cls, "sizeOf", "([F)J");
            mids$[mid_sizeOf_7b5853970f788289] = env->getStaticMethodID(cls, "sizeOf", "([I)J");
            mids$[mid_sizeOf_2ce8100461530515] = env->getStaticMethodID(cls, "sizeOf", "([J)J");
            mids$[mid_sizeOf_2645a42e82b64cfd] = env->getStaticMethodID(cls, "sizeOf", "([Ljava/lang/String;)J");
            mids$[mid_sizeOf_472afd0f39ac25a3] = env->getStaticMethodID(cls, "sizeOf", "([Lorg/apache/lucene/util/Accountable;)J");
            mids$[mid_sizeOf_715ac035d1e80e91] = env->getStaticMethodID(cls, "sizeOf", "([S)J");
            mids$[mid_sizeOf_4d935f3548941b9c] = env->getStaticMethodID(cls, "sizeOf", "([Z)J");
            mids$[mid_sizeOf_b1e05207ec98e246] = env->getStaticMethodID(cls, "sizeOf", "(Ljava/lang/String;)J");
            mids$[mid_sizeOf_da8f2794548cf6c9] = env->getStaticMethodID(cls, "sizeOf", "(Lorg/apache/lucene/search/Query;)J");
            mids$[mid_sizeOf_f094425123f64432] = env->getStaticMethodID(cls, "sizeOf", "(Lorg/apache/lucene/util/Accountable;)J");
            mids$[mid_sizeOf_062992559495b392] = env->getStaticMethodID(cls, "sizeOf", "(Lorg/apache/lucene/search/Query;J)J");
            mids$[mid_sizeOfCollection_1c819c4404584e86] = env->getStaticMethodID(cls, "sizeOfCollection", "(Ljava/util/Collection;)J");
            mids$[mid_sizeOfCollection_8e7bdc802abdd675] = env->getStaticMethodID(cls, "sizeOfCollection", "(Ljava/util/Collection;J)J");
            mids$[mid_sizeOfMap_06de9bf8e68fd109] = env->getStaticMethodID(cls, "sizeOfMap", "(Ljava/util/Map;)J");
            mids$[mid_sizeOfMap_d201e8889b794056] = env->getStaticMethodID(cls, "sizeOfMap", "(Ljava/util/Map;J)J");
            mids$[mid_sizeOfObject_c602cc71de3e942a] = env->getStaticMethodID(cls, "sizeOfObject", "(Ljava/lang/Object;)J");
            mids$[mid_sizeOfObject_257414bc2345c0f4] = env->getStaticMethodID(cls, "sizeOfObject", "(Ljava/lang/Object;J)J");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            COMPRESSED_REFS_ENABLED = env->getStaticBooleanField(cls, "COMPRESSED_REFS_ENABLED");
            HASHTABLE_RAM_BYTES_PER_ENTRY = env->getStaticLongField(cls, "HASHTABLE_RAM_BYTES_PER_ENTRY");
            LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY = env->getStaticLongField(cls, "LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY");
            MAX_DEPTH = env->getStaticIntField(cls, "MAX_DEPTH");
            NUM_BYTES_ARRAY_HEADER = env->getStaticIntField(cls, "NUM_BYTES_ARRAY_HEADER");
            NUM_BYTES_OBJECT_ALIGNMENT = env->getStaticIntField(cls, "NUM_BYTES_OBJECT_ALIGNMENT");
            NUM_BYTES_OBJECT_HEADER = env->getStaticIntField(cls, "NUM_BYTES_OBJECT_HEADER");
            NUM_BYTES_OBJECT_REF = env->getStaticIntField(cls, "NUM_BYTES_OBJECT_REF");
            ONE_GB = env->getStaticLongField(cls, "ONE_GB");
            ONE_KB = env->getStaticLongField(cls, "ONE_KB");
            ONE_MB = env->getStaticLongField(cls, "ONE_MB");
            QUERY_DEFAULT_RAM_BYTES_USED = env->getStaticIntField(cls, "QUERY_DEFAULT_RAM_BYTES_USED");
            UNKNOWN_DEFAULT_RAM_BYTES_USED = env->getStaticIntField(cls, "UNKNOWN_DEFAULT_RAM_BYTES_USED");
            primitiveSizes = new ::java::util::Map(env->getStaticObjectField(cls, "primitiveSizes", "Ljava/util/Map;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong RamUsageEstimator::alignObjectSize(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_alignObjectSize_d711eecdc469624a], a0);
        }

        ::java::lang::String RamUsageEstimator::humanReadableUnits(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_humanReadableUnits_55e776ffac018431], a0));
        }

        ::java::lang::String RamUsageEstimator::humanReadableUnits(jlong a0, const ::java::text::DecimalFormat & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_humanReadableUnits_3954aad118db45ad], a0, a1.this$));
        }

        jlong RamUsageEstimator::shallowSizeOf(const JArray< ::java::lang::Object > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_shallowSizeOf_a6ba6de4dd4ed492], a0.this$);
        }

        jlong RamUsageEstimator::shallowSizeOf(const ::java::lang::Object & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_shallowSizeOf_c602cc71de3e942a], a0.this$);
        }

        jlong RamUsageEstimator::shallowSizeOfInstance(const ::java::lang::Class & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_shallowSizeOfInstance_8ea87e9cb0ca4dd0], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const ::java::lang::Long & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_d203c0dc0f144d1b], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_95a0ff0710929aaf], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jchar > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_61d19defddc48587], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jdouble > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_087bbda4bb73a252], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jfloat > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_d4f01cd72bae9c25], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jint > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_7b5853970f788289], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jlong > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_2ce8100461530515], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_2645a42e82b64cfd], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< ::org::apache::lucene::util::Accountable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_472afd0f39ac25a3], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jshort > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_715ac035d1e80e91], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jboolean > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_4d935f3548941b9c], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_b1e05207ec98e246], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const ::org::apache::lucene::search::Query & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_da8f2794548cf6c9], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const ::org::apache::lucene::util::Accountable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_f094425123f64432], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const ::org::apache::lucene::search::Query & a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_062992559495b392], a0.this$, a1);
        }

        jlong RamUsageEstimator::sizeOfCollection(const ::java::util::Collection & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOfCollection_1c819c4404584e86], a0.this$);
        }

        jlong RamUsageEstimator::sizeOfCollection(const ::java::util::Collection & a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOfCollection_8e7bdc802abdd675], a0.this$, a1);
        }

        jlong RamUsageEstimator::sizeOfMap(const ::java::util::Map & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOfMap_06de9bf8e68fd109], a0.this$);
        }

        jlong RamUsageEstimator::sizeOfMap(const ::java::util::Map & a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOfMap_d201e8889b794056], a0.this$, a1);
        }

        jlong RamUsageEstimator::sizeOfObject(const ::java::lang::Object & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOfObject_c602cc71de3e942a], a0.this$);
        }

        jlong RamUsageEstimator::sizeOfObject(const ::java::lang::Object & a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOfObject_257414bc2345c0f4], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RamUsageEstimator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator_alignObjectSize(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator_humanReadableUnits(PyTypeObject *type, PyObject *args);
        static PyObject *t_RamUsageEstimator_shallowSizeOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_RamUsageEstimator_shallowSizeOfInstance(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator_sizeOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_RamUsageEstimator_sizeOfCollection(PyTypeObject *type, PyObject *args);
        static PyObject *t_RamUsageEstimator_sizeOfMap(PyTypeObject *type, PyObject *args);
        static PyObject *t_RamUsageEstimator_sizeOfObject(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_RamUsageEstimator__methods_[] = {
          DECLARE_METHOD(t_RamUsageEstimator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, alignObjectSize, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, humanReadableUnits, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, shallowSizeOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, shallowSizeOfInstance, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, sizeOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, sizeOfCollection, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, sizeOfMap, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, sizeOfObject, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RamUsageEstimator)[] = {
          { Py_tp_methods, t_RamUsageEstimator__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RamUsageEstimator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(RamUsageEstimator, t_RamUsageEstimator, RamUsageEstimator);

        void t_RamUsageEstimator::install(PyObject *module)
        {
          installType(&PY_TYPE(RamUsageEstimator), &PY_TYPE_DEF(RamUsageEstimator), module, "RamUsageEstimator", 0);
        }

        void t_RamUsageEstimator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RamUsageEstimator), "class_", make_descriptor(RamUsageEstimator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RamUsageEstimator), "wrapfn_", make_descriptor(t_RamUsageEstimator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RamUsageEstimator), "boxfn_", make_descriptor(boxObject));
          env->getClass(RamUsageEstimator::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(RamUsageEstimator), "COMPRESSED_REFS_ENABLED", make_descriptor(RamUsageEstimator::COMPRESSED_REFS_ENABLED));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RamUsageEstimator), "HASHTABLE_RAM_BYTES_PER_ENTRY", make_descriptor(RamUsageEstimator::HASHTABLE_RAM_BYTES_PER_ENTRY));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RamUsageEstimator), "LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY", make_descriptor(RamUsageEstimator::LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RamUsageEstimator), "MAX_DEPTH", make_descriptor(RamUsageEstimator::MAX_DEPTH));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RamUsageEstimator), "NUM_BYTES_ARRAY_HEADER", make_descriptor(RamUsageEstimator::NUM_BYTES_ARRAY_HEADER));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RamUsageEstimator), "NUM_BYTES_OBJECT_ALIGNMENT", make_descriptor(RamUsageEstimator::NUM_BYTES_OBJECT_ALIGNMENT));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RamUsageEstimator), "NUM_BYTES_OBJECT_HEADER", make_descriptor(RamUsageEstimator::NUM_BYTES_OBJECT_HEADER));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RamUsageEstimator), "NUM_BYTES_OBJECT_REF", make_descriptor(RamUsageEstimator::NUM_BYTES_OBJECT_REF));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RamUsageEstimator), "ONE_GB", make_descriptor(RamUsageEstimator::ONE_GB));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RamUsageEstimator), "ONE_KB", make_descriptor(RamUsageEstimator::ONE_KB));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RamUsageEstimator), "ONE_MB", make_descriptor(RamUsageEstimator::ONE_MB));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RamUsageEstimator), "QUERY_DEFAULT_RAM_BYTES_USED", make_descriptor(RamUsageEstimator::QUERY_DEFAULT_RAM_BYTES_USED));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RamUsageEstimator), "UNKNOWN_DEFAULT_RAM_BYTES_USED", make_descriptor(RamUsageEstimator::UNKNOWN_DEFAULT_RAM_BYTES_USED));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RamUsageEstimator), "primitiveSizes", make_descriptor(::java::util::t_Map::wrap_Object(*RamUsageEstimator::primitiveSizes)));
        }

        static PyObject *t_RamUsageEstimator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RamUsageEstimator::initializeClass, 1)))
            return NULL;
          return t_RamUsageEstimator::wrap_Object(RamUsageEstimator(((t_RamUsageEstimator *) arg)->object.this$));
        }
        static PyObject *t_RamUsageEstimator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RamUsageEstimator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RamUsageEstimator_alignObjectSize(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::alignObjectSize(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "alignObjectSize", arg);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_humanReadableUnits(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::humanReadableUnits(a0));
                return j2p(result);
              }
            }
            break;
           case 2:
            {
              jlong a0;
              ::java::text::DecimalFormat a1((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "Jk", ::java::text::DecimalFormat::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::humanReadableUnits(a0, a1));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError(type, "humanReadableUnits", args);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_shallowSizeOf(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[o", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::shallowSizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              ::java::lang::Object a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::shallowSizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "shallowSizeOf", args);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_shallowSizeOfInstance(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          jlong result;

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::shallowSizeOfInstance(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "shallowSizeOfInstance", arg);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_sizeOf(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Long a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "O", ::java::lang::PY_TYPE(Long), &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[C", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jdouble > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[D", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jfloat > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[F", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< ::org::apache::lucene::util::Accountable > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::util::Accountable::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jshort > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[S", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jboolean > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              ::org::apache::lucene::util::Accountable a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::Accountable::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jlong a1;
              jlong result;

              if (!parseArgs(args, "kJ", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "sizeOf", args);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_sizeOfCollection(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              jlong result;

              if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOfCollection(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 2:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              jlong a1;
              jlong result;

              if (!parseArgs(args, "KJ", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOfCollection(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "sizeOfCollection", args);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_sizeOfMap(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              jlong result;

              if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOfMap(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 2:
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              jlong a1;
              jlong result;

              if (!parseArgs(args, "KJ", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOfMap(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "sizeOfMap", args);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_sizeOfObject(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Object a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOfObject(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::Object a0((jobject) NULL);
              jlong a1;
              jlong result;

              if (!parseArgs(args, "oJ", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOfObject(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "sizeOfObject", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortedNumericSelector.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/search/SortedNumericSelector$Type.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortedNumericSelector::class$ = NULL;
        jmethodID *SortedNumericSelector::mids$ = NULL;
        bool SortedNumericSelector::live$ = false;

        jclass SortedNumericSelector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortedNumericSelector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_wrap_00dadb0e0a1988eb] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/index/SortedNumericDocValues;Lorg/apache/lucene/search/SortedNumericSelector$Type;Lorg/apache/lucene/search/SortField$Type;)Lorg/apache/lucene/index/NumericDocValues;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedNumericSelector::SortedNumericSelector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::index::NumericDocValues SortedNumericSelector::wrap(const ::org::apache::lucene::index::SortedNumericDocValues & a0, const ::org::apache::lucene::search::SortedNumericSelector$Type & a1, const ::org::apache::lucene::search::SortField$Type & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_wrap_00dadb0e0a1988eb], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortedNumericSelector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericSelector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedNumericSelector_init_(t_SortedNumericSelector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortedNumericSelector_wrap(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_SortedNumericSelector__methods_[] = {
          DECLARE_METHOD(t_SortedNumericSelector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector, wrap, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SortedNumericSelector)[] = {
          { Py_tp_methods, t_SortedNumericSelector__methods_ },
          { Py_tp_init, (void *) t_SortedNumericSelector_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SortedNumericSelector)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SortedNumericSelector, t_SortedNumericSelector, SortedNumericSelector);

        void t_SortedNumericSelector::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericSelector), &PY_TYPE_DEF(SortedNumericSelector), module, "SortedNumericSelector", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericSelector), "Type", make_descriptor(&PY_TYPE_DEF(SortedNumericSelector$Type)));
        }

        void t_SortedNumericSelector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericSelector), "class_", make_descriptor(SortedNumericSelector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericSelector), "wrapfn_", make_descriptor(t_SortedNumericSelector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericSelector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedNumericSelector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericSelector::initializeClass, 1)))
            return NULL;
          return t_SortedNumericSelector::wrap_Object(SortedNumericSelector(((t_SortedNumericSelector *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericSelector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericSelector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedNumericSelector_init_(t_SortedNumericSelector *self, PyObject *args, PyObject *kwds)
        {
          SortedNumericSelector object((jobject) NULL);

          INT_CALL(object = SortedNumericSelector());
          self->object = object;

          return 0;
        }

        static PyObject *t_SortedNumericSelector_wrap(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::SortedNumericDocValues a0((jobject) NULL);
          ::org::apache::lucene::search::SortedNumericSelector$Type a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::search::SortField$Type a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "kKK", ::org::apache::lucene::index::SortedNumericDocValues::initializeClass, ::org::apache::lucene::search::SortedNumericSelector$Type::initializeClass, ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortedNumericSelector$Type::parameters_, &a2, &p2, ::org::apache::lucene::search::t_SortField$Type::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SortedNumericSelector::wrap(a0, a1, a2));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniAnalyzer::class$ = NULL;
          jmethodID *SoraniAnalyzer::mids$ = NULL;
          bool SoraniAnalyzer::live$ = false;
          ::java::lang::String *SoraniAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass SoraniAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniAnalyzer::SoraniAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          SoraniAnalyzer::SoraniAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          SoraniAnalyzer::SoraniAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet SoraniAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniAnalyzer_init_(t_SoraniAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_SoraniAnalyzer_get__defaultStopSet(t_SoraniAnalyzer *self, void *data);
          static PyGetSetDef t_SoraniAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_SoraniAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SoraniAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SoraniAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SoraniAnalyzer)[] = {
            { Py_tp_methods, t_SoraniAnalyzer__methods_ },
            { Py_tp_init, (void *) t_SoraniAnalyzer_init_ },
            { Py_tp_getset, t_SoraniAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SoraniAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(SoraniAnalyzer, t_SoraniAnalyzer, SoraniAnalyzer);

          void t_SoraniAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniAnalyzer), &PY_TYPE_DEF(SoraniAnalyzer), module, "SoraniAnalyzer", 0);
          }

          void t_SoraniAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniAnalyzer), "class_", make_descriptor(SoraniAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniAnalyzer), "wrapfn_", make_descriptor(t_SoraniAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(SoraniAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*SoraniAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_SoraniAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SoraniAnalyzer::wrap_Object(SoraniAnalyzer(((t_SoraniAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SoraniAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniAnalyzer_init_(t_SoraniAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SoraniAnalyzer object((jobject) NULL);

                INT_CALL(object = SoraniAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                SoraniAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SoraniAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                SoraniAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SoraniAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ckb::SoraniAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_SoraniAnalyzer_get__defaultStopSet(t_SoraniAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/LucenePackage.h"
#include "java/lang/Package.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {

      ::java::lang::Class *LucenePackage::class$ = NULL;
      jmethodID *LucenePackage::mids$ = NULL;
      bool LucenePackage::live$ = false;

      jclass LucenePackage::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/apache/lucene/LucenePackage");

          mids$ = new jmethodID[max_mid];
          mids$[mid_get_e23660d0b401e60d] = env->getStaticMethodID(cls, "get", "()Ljava/lang/Package;");

          class$ = new ::java::lang::Class(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::java::lang::Package LucenePackage::get()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::lang::Package(env->callStaticObjectMethod(cls, mids$[mid_get_e23660d0b401e60d]));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      static PyObject *t_LucenePackage_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_LucenePackage_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_LucenePackage_get(PyTypeObject *type);

      static PyMethodDef t_LucenePackage__methods_[] = {
        DECLARE_METHOD(t_LucenePackage, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_LucenePackage, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_LucenePackage, get, METH_NOARGS | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      static PyType_Slot PY_TYPE_SLOTS(LucenePackage)[] = {
        { Py_tp_methods, t_LucenePackage__methods_ },
        { Py_tp_init, (void *) abstract_init },
        { 0, NULL }
      };

      static PyType_Def *PY_TYPE_BASES(LucenePackage)[] = {
        &PY_TYPE_DEF(::java::lang::Object),
        NULL
      };

      DEFINE_TYPE(LucenePackage, t_LucenePackage, LucenePackage);

      void t_LucenePackage::install(PyObject *module)
      {
        installType(&PY_TYPE(LucenePackage), &PY_TYPE_DEF(LucenePackage), module, "LucenePackage", 0);
      }

      void t_LucenePackage::initialize(PyObject *module)
      {
        PyObject_SetAttrString((PyObject *) PY_TYPE(LucenePackage), "class_", make_descriptor(LucenePackage::initializeClass, 1));
        PyObject_SetAttrString((PyObject *) PY_TYPE(LucenePackage), "wrapfn_", make_descriptor(t_LucenePackage::wrap_jobject));
        PyObject_SetAttrString((PyObject *) PY_TYPE(LucenePackage), "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_LucenePackage_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, LucenePackage::initializeClass, 1)))
          return NULL;
        return t_LucenePackage::wrap_Object(LucenePackage(((t_LucenePackage *) arg)->object.this$));
      }
      static PyObject *t_LucenePackage_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, LucenePackage::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_LucenePackage_get(PyTypeObject *type)
      {
        ::java::lang::Package result((jobject) NULL);
        OBJ_CALL(result = ::org::apache::lucene::LucenePackage::get());
        return ::java::lang::t_Package::wrap_Object(result);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DoublePointMultiRangeBuilder.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/MultiRangeQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DoublePointMultiRangeBuilder::class$ = NULL;
        jmethodID *DoublePointMultiRangeBuilder::mids$ = NULL;
        bool DoublePointMultiRangeBuilder::live$ = false;

        jclass DoublePointMultiRangeBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DoublePointMultiRangeBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_3fb1dae8d4037984] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_add_1d56dd1258093787] = env->getMethodID(cls, "add", "([D[D)V");
            mids$[mid_build_03a96fdd31aca883] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/search/MultiRangeQuery;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoublePointMultiRangeBuilder::DoublePointMultiRangeBuilder(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::search::MultiRangeQuery$Builder(env->newObject(initializeClass, &mids$, mid_init$_3fb1dae8d4037984, a0.this$, a1)) {}

        void DoublePointMultiRangeBuilder::add(const JArray< jdouble > & a0, const JArray< jdouble > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_1d56dd1258093787], a0.this$, a1.this$);
        }

        ::org::apache::lucene::search::MultiRangeQuery DoublePointMultiRangeBuilder::build() const
        {
          return ::org::apache::lucene::search::MultiRangeQuery(env->callObjectMethod(this$, mids$[mid_build_03a96fdd31aca883]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DoublePointMultiRangeBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoublePointMultiRangeBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DoublePointMultiRangeBuilder_init_(t_DoublePointMultiRangeBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DoublePointMultiRangeBuilder_add(t_DoublePointMultiRangeBuilder *self, PyObject *args);
        static PyObject *t_DoublePointMultiRangeBuilder_build(t_DoublePointMultiRangeBuilder *self, PyObject *args);

        static PyMethodDef t_DoublePointMultiRangeBuilder__methods_[] = {
          DECLARE_METHOD(t_DoublePointMultiRangeBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoublePointMultiRangeBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoublePointMultiRangeBuilder, add, METH_VARARGS),
          DECLARE_METHOD(t_DoublePointMultiRangeBuilder, build, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DoublePointMultiRangeBuilder)[] = {
          { Py_tp_methods, t_DoublePointMultiRangeBuilder__methods_ },
          { Py_tp_init, (void *) t_DoublePointMultiRangeBuilder_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DoublePointMultiRangeBuilder)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::MultiRangeQuery$Builder),
          NULL
        };

        DEFINE_TYPE(DoublePointMultiRangeBuilder, t_DoublePointMultiRangeBuilder, DoublePointMultiRangeBuilder);

        void t_DoublePointMultiRangeBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(DoublePointMultiRangeBuilder), &PY_TYPE_DEF(DoublePointMultiRangeBuilder), module, "DoublePointMultiRangeBuilder", 0);
        }

        void t_DoublePointMultiRangeBuilder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoublePointMultiRangeBuilder), "class_", make_descriptor(DoublePointMultiRangeBuilder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoublePointMultiRangeBuilder), "wrapfn_", make_descriptor(t_DoublePointMultiRangeBuilder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoublePointMultiRangeBuilder), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DoublePointMultiRangeBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoublePointMultiRangeBuilder::initializeClass, 1)))
            return NULL;
          return t_DoublePointMultiRangeBuilder::wrap_Object(DoublePointMultiRangeBuilder(((t_DoublePointMultiRangeBuilder *) arg)->object.this$));
        }
        static PyObject *t_DoublePointMultiRangeBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoublePointMultiRangeBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DoublePointMultiRangeBuilder_init_(t_DoublePointMultiRangeBuilder *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          DoublePointMultiRangeBuilder object((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            INT_CALL(object = DoublePointMultiRangeBuilder(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DoublePointMultiRangeBuilder_add(t_DoublePointMultiRangeBuilder *self, PyObject *args)
        {
          JArray< jdouble > a0((jobject) NULL);
          JArray< jdouble > a1((jobject) NULL);

          if (!parseArgs(args, "[D[D", &a0, &a1))
          {
            OBJ_CALL(self->object.add(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(DoublePointMultiRangeBuilder), (PyObject *) self, "add", args, 2);
        }

        static PyObject *t_DoublePointMultiRangeBuilder_build(t_DoublePointMultiRangeBuilder *self, PyObject *args)
        {
          ::org::apache::lucene::search::MultiRangeQuery result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::search::t_MultiRangeQuery::wrap_Object(result);
          }

          return callSuper(PY_TYPE(DoublePointMultiRangeBuilder), (PyObject *) self, "build", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymFilterFactory::class$ = NULL;
          jmethodID *SynonymFilterFactory::mids$ = NULL;
          bool SynonymFilterFactory::live$ = false;
          ::java::lang::String *SynonymFilterFactory::NAME = NULL;

          jclass SynonymFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_loadSynonyms_ba672952b9f6ef60] = env->getMethodID(cls, "loadSynonyms", "(Lorg/apache/lucene/analysis/util/ResourceLoader;Ljava/lang/String;ZLorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/synonym/SynonymMap;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymFilterFactory::SynonymFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream SynonymFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          void SynonymFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymFilterFactory_init_(t_SynonymFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymFilterFactory_create(t_SynonymFilterFactory *self, PyObject *args);
          static PyObject *t_SynonymFilterFactory_inform(t_SynonymFilterFactory *self, PyObject *arg);

          static PyMethodDef t_SynonymFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SynonymFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_SynonymFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SynonymFilterFactory)[] = {
            { Py_tp_methods, t_SynonymFilterFactory__methods_ },
            { Py_tp_init, (void *) t_SynonymFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SynonymFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(SynonymFilterFactory, t_SynonymFilterFactory, SynonymFilterFactory);

          void t_SynonymFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymFilterFactory), &PY_TYPE_DEF(SynonymFilterFactory), module, "SynonymFilterFactory", 0);
          }

          void t_SynonymFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymFilterFactory), "class_", make_descriptor(SynonymFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymFilterFactory), "wrapfn_", make_descriptor(t_SynonymFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(SynonymFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymFilterFactory), "NAME", make_descriptor(j2p(*SynonymFilterFactory::NAME)));
          }

          static PyObject *t_SynonymFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SynonymFilterFactory::wrap_Object(SynonymFilterFactory(((t_SynonymFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SynonymFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymFilterFactory_init_(t_SynonymFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SynonymFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SynonymFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymFilterFactory_create(t_SynonymFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SynonymFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_SynonymFilterFactory_inform(t_SynonymFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseLightStemFilter::class$ = NULL;
          jmethodID *PortugueseLightStemFilter::mids$ = NULL;
          bool PortugueseLightStemFilter::live$ = false;

          jclass PortugueseLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseLightStemFilter::PortugueseLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean PortugueseLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseLightStemFilter_init_(t_PortugueseLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseLightStemFilter_incrementToken(t_PortugueseLightStemFilter *self, PyObject *args);

          static PyMethodDef t_PortugueseLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_PortugueseLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PortugueseLightStemFilter)[] = {
            { Py_tp_methods, t_PortugueseLightStemFilter__methods_ },
            { Py_tp_init, (void *) t_PortugueseLightStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PortugueseLightStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(PortugueseLightStemFilter, t_PortugueseLightStemFilter, PortugueseLightStemFilter);

          void t_PortugueseLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseLightStemFilter), &PY_TYPE_DEF(PortugueseLightStemFilter), module, "PortugueseLightStemFilter", 0);
          }

          void t_PortugueseLightStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseLightStemFilter), "class_", make_descriptor(PortugueseLightStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseLightStemFilter), "wrapfn_", make_descriptor(t_PortugueseLightStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseLightStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_PortugueseLightStemFilter::wrap_Object(PortugueseLightStemFilter(((t_PortugueseLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_PortugueseLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseLightStemFilter_init_(t_PortugueseLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PortugueseLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PortugueseLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseLightStemFilter_incrementToken(t_PortugueseLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(PortugueseLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/shingle/ShingleFilterFactory.h"
#include "org/apache/lucene/analysis/shingle/ShingleFilter.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {

          ::java::lang::Class *ShingleFilterFactory::class$ = NULL;
          jmethodID *ShingleFilterFactory::mids$ = NULL;
          bool ShingleFilterFactory::live$ = false;
          ::java::lang::String *ShingleFilterFactory::NAME = NULL;

          jclass ShingleFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/shingle/ShingleFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a89fb339fee584b7] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/shingle/ShingleFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ShingleFilterFactory::ShingleFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::shingle::ShingleFilter ShingleFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::shingle::ShingleFilter(env->callObjectMethod(this$, mids$[mid_create_a89fb339fee584b7], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {
          static PyObject *t_ShingleFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ShingleFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ShingleFilterFactory_init_(t_ShingleFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ShingleFilterFactory_create(t_ShingleFilterFactory *self, PyObject *args);

          static PyMethodDef t_ShingleFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ShingleFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ShingleFilterFactory)[] = {
            { Py_tp_methods, t_ShingleFilterFactory__methods_ },
            { Py_tp_init, (void *) t_ShingleFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ShingleFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(ShingleFilterFactory, t_ShingleFilterFactory, ShingleFilterFactory);

          void t_ShingleFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ShingleFilterFactory), &PY_TYPE_DEF(ShingleFilterFactory), module, "ShingleFilterFactory", 0);
          }

          void t_ShingleFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ShingleFilterFactory), "class_", make_descriptor(ShingleFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ShingleFilterFactory), "wrapfn_", make_descriptor(t_ShingleFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ShingleFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(ShingleFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ShingleFilterFactory), "NAME", make_descriptor(j2p(*ShingleFilterFactory::NAME)));
          }

          static PyObject *t_ShingleFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ShingleFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ShingleFilterFactory::wrap_Object(ShingleFilterFactory(((t_ShingleFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ShingleFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ShingleFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ShingleFilterFactory_init_(t_ShingleFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ShingleFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ShingleFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ShingleFilterFactory_create(t_ShingleFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::shingle::ShingleFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::shingle::t_ShingleFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ShingleFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SortedNumericDocValues::class$ = NULL;
        jmethodID *SortedNumericDocValues::mids$ = NULL;
        bool SortedNumericDocValues::live$ = false;

        jclass SortedNumericDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SortedNumericDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_docValueCount_9972fcc56b44e79d] = env->getMethodID(cls, "docValueCount", "()I");
            mids$[mid_nextValue_2e5ae9edcb9b072f] = env->getMethodID(cls, "nextValue", "()J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint SortedNumericDocValues::docValueCount() const
        {
          return env->callIntMethod(this$, mids$[mid_docValueCount_9972fcc56b44e79d]);
        }

        jlong SortedNumericDocValues::nextValue() const
        {
          return env->callLongMethod(this$, mids$[mid_nextValue_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SortedNumericDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericDocValues_docValueCount(t_SortedNumericDocValues *self);
        static PyObject *t_SortedNumericDocValues_nextValue(t_SortedNumericDocValues *self);

        static PyMethodDef t_SortedNumericDocValues__methods_[] = {
          DECLARE_METHOD(t_SortedNumericDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericDocValues, docValueCount, METH_NOARGS),
          DECLARE_METHOD(t_SortedNumericDocValues, nextValue, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SortedNumericDocValues)[] = {
          { Py_tp_methods, t_SortedNumericDocValues__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SortedNumericDocValues)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::DocValuesIterator),
          NULL
        };

        DEFINE_TYPE(SortedNumericDocValues, t_SortedNumericDocValues, SortedNumericDocValues);

        void t_SortedNumericDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericDocValues), &PY_TYPE_DEF(SortedNumericDocValues), module, "SortedNumericDocValues", 0);
        }

        void t_SortedNumericDocValues::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericDocValues), "class_", make_descriptor(SortedNumericDocValues::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericDocValues), "wrapfn_", make_descriptor(t_SortedNumericDocValues::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericDocValues), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedNumericDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericDocValues::initializeClass, 1)))
            return NULL;
          return t_SortedNumericDocValues::wrap_Object(SortedNumericDocValues(((t_SortedNumericDocValues *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortedNumericDocValues_docValueCount(t_SortedNumericDocValues *self)
        {
          jint result;
          OBJ_CALL(result = self->object.docValueCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_SortedNumericDocValues_nextValue(t_SortedNumericDocValues *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.nextValue());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {

          ::java::lang::Class *SimpleTextTermVectorsWriter::class$ = NULL;
          jmethodID *SimpleTextTermVectorsWriter::mids$ = NULL;
          bool SimpleTextTermVectorsWriter::live$ = false;

          jclass SimpleTextTermVectorsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_2bb5442de459a81e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
              mids$[mid_addPosition_fcc26e8860ce5755] = env->getMethodID(cls, "addPosition", "(IIILorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_8a63e70a8b43ee48] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_startDocument_040c4cd0390c5aff] = env->getMethodID(cls, "startDocument", "(I)V");
              mids$[mid_startField_5f83540baaace30d] = env->getMethodID(cls, "startField", "(Lorg/apache/lucene/index/FieldInfo;IZZZ)V");
              mids$[mid_startTerm_327a6f4e8624d9f4] = env->getMethodID(cls, "startTerm", "(Lorg/apache/lucene/util/BytesRef;I)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleTextTermVectorsWriter::SimpleTextTermVectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) : ::org::apache::lucene::codecs::TermVectorsWriter(env->newObject(initializeClass, &mids$, mid_init$_2bb5442de459a81e, a0.this$, a1.this$, a2.this$)) {}

          void SimpleTextTermVectorsWriter::addPosition(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addPosition_fcc26e8860ce5755], a0, a1, a2, a3.this$);
          }

          void SimpleTextTermVectorsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void SimpleTextTermVectorsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_finish_8a63e70a8b43ee48], a0.this$, a1);
          }

          jlong SimpleTextTermVectorsWriter::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          void SimpleTextTermVectorsWriter::startDocument(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startDocument_040c4cd0390c5aff], a0);
          }

          void SimpleTextTermVectorsWriter::startField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1, jboolean a2, jboolean a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_startField_5f83540baaace30d], a0.this$, a1, a2, a3, a4);
          }

          void SimpleTextTermVectorsWriter::startTerm(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_startTerm_327a6f4e8624d9f4], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {
          static PyObject *t_SimpleTextTermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleTextTermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleTextTermVectorsWriter_init_(t_SimpleTextTermVectorsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleTextTermVectorsWriter_addPosition(t_SimpleTextTermVectorsWriter *self, PyObject *args);
          static PyObject *t_SimpleTextTermVectorsWriter_close(t_SimpleTextTermVectorsWriter *self, PyObject *args);
          static PyObject *t_SimpleTextTermVectorsWriter_finish(t_SimpleTextTermVectorsWriter *self, PyObject *args);
          static PyObject *t_SimpleTextTermVectorsWriter_ramBytesUsed(t_SimpleTextTermVectorsWriter *self, PyObject *args);
          static PyObject *t_SimpleTextTermVectorsWriter_startDocument(t_SimpleTextTermVectorsWriter *self, PyObject *args);
          static PyObject *t_SimpleTextTermVectorsWriter_startField(t_SimpleTextTermVectorsWriter *self, PyObject *args);
          static PyObject *t_SimpleTextTermVectorsWriter_startTerm(t_SimpleTextTermVectorsWriter *self, PyObject *args);

          static PyMethodDef t_SimpleTextTermVectorsWriter__methods_[] = {
            DECLARE_METHOD(t_SimpleTextTermVectorsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextTermVectorsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextTermVectorsWriter, addPosition, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextTermVectorsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextTermVectorsWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextTermVectorsWriter, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextTermVectorsWriter, startDocument, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextTermVectorsWriter, startField, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextTermVectorsWriter, startTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleTextTermVectorsWriter)[] = {
            { Py_tp_methods, t_SimpleTextTermVectorsWriter__methods_ },
            { Py_tp_init, (void *) t_SimpleTextTermVectorsWriter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleTextTermVectorsWriter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::TermVectorsWriter),
            NULL
          };

          DEFINE_TYPE(SimpleTextTermVectorsWriter, t_SimpleTextTermVectorsWriter, SimpleTextTermVectorsWriter);

          void t_SimpleTextTermVectorsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleTextTermVectorsWriter), &PY_TYPE_DEF(SimpleTextTermVectorsWriter), module, "SimpleTextTermVectorsWriter", 0);
          }

          void t_SimpleTextTermVectorsWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextTermVectorsWriter), "class_", make_descriptor(SimpleTextTermVectorsWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextTermVectorsWriter), "wrapfn_", make_descriptor(t_SimpleTextTermVectorsWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextTermVectorsWriter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleTextTermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleTextTermVectorsWriter::initializeClass, 1)))
              return NULL;
            return t_SimpleTextTermVectorsWriter::wrap_Object(SimpleTextTermVectorsWriter(((t_SimpleTextTermVectorsWriter *) arg)->object.this$));
          }
          static PyObject *t_SimpleTextTermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleTextTermVectorsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleTextTermVectorsWriter_init_(t_SimpleTextTermVectorsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            SimpleTextTermVectorsWriter object((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SimpleTextTermVectorsWriter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleTextTermVectorsWriter_addPosition(t_SimpleTextTermVectorsWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextTermVectorsWriter), (PyObject *) self, "addPosition", args, 2);
          }

          static PyObject *t_SimpleTextTermVectorsWriter_close(t_SimpleTextTermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextTermVectorsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_SimpleTextTermVectorsWriter_finish(t_SimpleTextTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.finish(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextTermVectorsWriter), (PyObject *) self, "finish", args, 2);
          }

          static PyObject *t_SimpleTextTermVectorsWriter_ramBytesUsed(t_SimpleTextTermVectorsWriter *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(SimpleTextTermVectorsWriter), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_SimpleTextTermVectorsWriter_startDocument(t_SimpleTextTermVectorsWriter *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.startDocument(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextTermVectorsWriter), (PyObject *) self, "startDocument", args, 2);
          }

          static PyObject *t_SimpleTextTermVectorsWriter_startField(t_SimpleTextTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            jint a1;
            jboolean a2;
            jboolean a3;
            jboolean a4;

            if (!parseArgs(args, "kIZZZ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.startField(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextTermVectorsWriter), (PyObject *) self, "startField", args, 2);
          }

          static PyObject *t_SimpleTextTermVectorsWriter_startTerm(t_SimpleTextTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.startTerm(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextTermVectorsWriter), (PyObject *) self, "startTerm", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NRTCachingDirectory.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NRTCachingDirectory::class$ = NULL;
        jmethodID *NRTCachingDirectory::mids$ = NULL;
        bool NRTCachingDirectory::live$ = false;

        jclass NRTCachingDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NRTCachingDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_89dbb35cc117b30f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;DD)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_40e6d6dcc3f676b9] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_createTempOutput_918504249dfbe513] = env->getMethodID(cls, "createTempOutput", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_9fd2eb66a64e6f0f] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileLength_b1e05207ec98e246] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
            mids$[mid_listAll_9865da0b5ee490bc] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_listCachedFiles_9865da0b5ee490bc] = env->getMethodID(cls, "listCachedFiles", "()[Ljava/lang/String;");
            mids$[mid_openInput_cc9a9aabe8db93df] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_rename_15b72f6a44ff93f2] = env->getMethodID(cls, "rename", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_sync_50bc3ddc62a19f2d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_doCacheWrite_14ea2b9ddd64ff45] = env->getMethodID(cls, "doCacheWrite", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NRTCachingDirectory::NRTCachingDirectory(const ::org::apache::lucene::store::Directory & a0, jdouble a1, jdouble a2) : ::org::apache::lucene::store::FilterDirectory(env->newObject(initializeClass, &mids$, mid_init$_89dbb35cc117b30f, a0.this$, a1, a2)) {}

        void NRTCachingDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        ::org::apache::lucene::store::IndexOutput NRTCachingDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_40e6d6dcc3f676b9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::store::IndexOutput NRTCachingDirectory::createTempOutput(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createTempOutput_918504249dfbe513], a0.this$, a1.this$, a2.this$));
        }

        void NRTCachingDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_9fd2eb66a64e6f0f], a0.this$);
        }

        jlong NRTCachingDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_b1e05207ec98e246], a0.this$);
        }

        ::java::util::Collection NRTCachingDirectory::getChildResources() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
        }

        JArray< ::java::lang::String > NRTCachingDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_9865da0b5ee490bc]));
        }

        JArray< ::java::lang::String > NRTCachingDirectory::listCachedFiles() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listCachedFiles_9865da0b5ee490bc]));
        }

        ::org::apache::lucene::store::IndexInput NRTCachingDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_cc9a9aabe8db93df], a0.this$, a1.this$));
        }

        jlong NRTCachingDirectory::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        void NRTCachingDirectory::rename(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_rename_15b72f6a44ff93f2], a0.this$, a1.this$);
        }

        void NRTCachingDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_50bc3ddc62a19f2d], a0.this$);
        }

        ::java::lang::String NRTCachingDirectory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NRTCachingDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NRTCachingDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NRTCachingDirectory_init_(t_NRTCachingDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NRTCachingDirectory_close(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_createOutput(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_createTempOutput(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_deleteFile(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_fileLength(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_getChildResources(t_NRTCachingDirectory *self);
        static PyObject *t_NRTCachingDirectory_listAll(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_listCachedFiles(t_NRTCachingDirectory *self);
        static PyObject *t_NRTCachingDirectory_openInput(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_ramBytesUsed(t_NRTCachingDirectory *self);
        static PyObject *t_NRTCachingDirectory_rename(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_sync(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_toString(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_get__childResources(t_NRTCachingDirectory *self, void *data);
        static PyGetSetDef t_NRTCachingDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_NRTCachingDirectory, childResources),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NRTCachingDirectory__methods_[] = {
          DECLARE_METHOD(t_NRTCachingDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NRTCachingDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NRTCachingDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, createTempOutput, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, getChildResources, METH_NOARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, listCachedFiles, METH_NOARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, rename, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NRTCachingDirectory)[] = {
          { Py_tp_methods, t_NRTCachingDirectory__methods_ },
          { Py_tp_init, (void *) t_NRTCachingDirectory_init_ },
          { Py_tp_getset, t_NRTCachingDirectory__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NRTCachingDirectory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::FilterDirectory),
          NULL
        };

        DEFINE_TYPE(NRTCachingDirectory, t_NRTCachingDirectory, NRTCachingDirectory);

        void t_NRTCachingDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(NRTCachingDirectory), &PY_TYPE_DEF(NRTCachingDirectory), module, "NRTCachingDirectory", 0);
        }

        void t_NRTCachingDirectory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NRTCachingDirectory), "class_", make_descriptor(NRTCachingDirectory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NRTCachingDirectory), "wrapfn_", make_descriptor(t_NRTCachingDirectory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NRTCachingDirectory), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NRTCachingDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NRTCachingDirectory::initializeClass, 1)))
            return NULL;
          return t_NRTCachingDirectory::wrap_Object(NRTCachingDirectory(((t_NRTCachingDirectory *) arg)->object.this$));
        }
        static PyObject *t_NRTCachingDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NRTCachingDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NRTCachingDirectory_init_(t_NRTCachingDirectory *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jdouble a1;
          jdouble a2;
          NRTCachingDirectory object((jobject) NULL);

          if (!parseArgs(args, "kDD", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = NRTCachingDirectory(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NRTCachingDirectory_close(t_NRTCachingDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(NRTCachingDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_createOutput(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(NRTCachingDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_createTempOutput(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "ssk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.createTempOutput(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(NRTCachingDirectory), (PyObject *) self, "createTempOutput", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_deleteFile(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(NRTCachingDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_fileLength(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(NRTCachingDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_getChildResources(t_NRTCachingDirectory *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getChildResources());
          return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
        }

        static PyObject *t_NRTCachingDirectory_listAll(t_NRTCachingDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(PY_TYPE(NRTCachingDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_listCachedFiles(t_NRTCachingDirectory *self)
        {
          JArray< ::java::lang::String > result((jobject) NULL);
          OBJ_CALL(result = self->object.listCachedFiles());
          return JArray<jstring>(result.this$).wrap();
        }

        static PyObject *t_NRTCachingDirectory_openInput(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(NRTCachingDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_ramBytesUsed(t_NRTCachingDirectory *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_NRTCachingDirectory_rename(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.rename(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(NRTCachingDirectory), (PyObject *) self, "rename", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_sync(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(NRTCachingDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_toString(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(NRTCachingDirectory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_get__childResources(t_NRTCachingDirectory *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildResources());
          return ::java::util::t_Collection::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelIne.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelIne::class$ = NULL;
          jmethodID *BasicModelIne::mids$ = NULL;
          bool BasicModelIne::live$ = false;

          jclass BasicModelIne::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelIne");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_77a68ba236144920] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_761ab1c432346fd0] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelIne::BasicModelIne() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::search::Explanation BasicModelIne::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_77a68ba236144920], a0.this$, a1, a2));
          }

          jdouble BasicModelIne::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_score_761ab1c432346fd0], a0.this$, a1, a2);
          }

          ::java::lang::String BasicModelIne::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelIne_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelIne_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelIne_init_(t_BasicModelIne *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelIne_explain(t_BasicModelIne *self, PyObject *args);
          static PyObject *t_BasicModelIne_score(t_BasicModelIne *self, PyObject *args);
          static PyObject *t_BasicModelIne_toString(t_BasicModelIne *self, PyObject *args);

          static PyMethodDef t_BasicModelIne__methods_[] = {
            DECLARE_METHOD(t_BasicModelIne, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIne, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIne, explain, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIne, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIne, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BasicModelIne)[] = {
            { Py_tp_methods, t_BasicModelIne__methods_ },
            { Py_tp_init, (void *) t_BasicModelIne_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BasicModelIne)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::BasicModel),
            NULL
          };

          DEFINE_TYPE(BasicModelIne, t_BasicModelIne, BasicModelIne);

          void t_BasicModelIne::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelIne), &PY_TYPE_DEF(BasicModelIne), module, "BasicModelIne", 0);
          }

          void t_BasicModelIne::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasicModelIne), "class_", make_descriptor(BasicModelIne::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasicModelIne), "wrapfn_", make_descriptor(t_BasicModelIne::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasicModelIne), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelIne_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelIne::initializeClass, 1)))
              return NULL;
            return t_BasicModelIne::wrap_Object(BasicModelIne(((t_BasicModelIne *) arg)->object.this$));
          }
          static PyObject *t_BasicModelIne_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelIne::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelIne_init_(t_BasicModelIne *self, PyObject *args, PyObject *kwds)
          {
            BasicModelIne object((jobject) NULL);

            INT_CALL(object = BasicModelIne());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelIne_explain(t_BasicModelIne *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BasicModelIne), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_BasicModelIne_score(t_BasicModelIne *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            jdouble result;

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.score(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(BasicModelIne), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelIne_toString(t_BasicModelIne *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(BasicModelIne), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/Tools.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *Tools::class$ = NULL;
          jmethodID *Tools::mids$ = NULL;
          bool Tools::live$ = false;

          jclass Tools::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/Tools");

              mids$ = new jmethodID[max_mid];
              mids$[mid_safeAcos_d089f34703408a66] = env->getStaticMethodID(cls, "safeAcos", "(D)D");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jdouble Tools::safeAcos(jdouble a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticDoubleMethod(cls, mids$[mid_safeAcos_d089f34703408a66], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_Tools_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Tools_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Tools_safeAcos(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_Tools__methods_[] = {
            DECLARE_METHOD(t_Tools, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Tools, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Tools, safeAcos, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Tools)[] = {
            { Py_tp_methods, t_Tools__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Tools)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Tools, t_Tools, Tools);

          void t_Tools::install(PyObject *module)
          {
            installType(&PY_TYPE(Tools), &PY_TYPE_DEF(Tools), module, "Tools", 0);
          }

          void t_Tools::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Tools), "class_", make_descriptor(Tools::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Tools), "wrapfn_", make_descriptor(t_Tools::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Tools), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Tools_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Tools::initializeClass, 1)))
              return NULL;
            return t_Tools::wrap_Object(Tools(((t_Tools *) arg)->object.this$));
          }
          static PyObject *t_Tools_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Tools::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Tools_safeAcos(PyTypeObject *type, PyObject *arg)
          {
            jdouble a0;
            jdouble result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::Tools::safeAcos(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError(type, "safeAcos", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoArea.h"
#include "org/apache/lucene/spatial3d/geom/GeoShape.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoArea::class$ = NULL;
          jmethodID *GeoArea::mids$ = NULL;
          bool GeoArea::live$ = false;
          jint GeoArea::CONTAINS = (jint) 0;
          jint GeoArea::DISJOINT = (jint) 0;
          jint GeoArea::OVERLAPS = (jint) 0;
          jint GeoArea::WITHIN = (jint) 0;

          jclass GeoArea::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoArea");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getRelationship_2e0040c09ede6a59] = env->getMethodID(cls, "getRelationship", "(Lorg/apache/lucene/spatial3d/geom/GeoShape;)I");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              CONTAINS = env->getStaticIntField(cls, "CONTAINS");
              DISJOINT = env->getStaticIntField(cls, "DISJOINT");
              OVERLAPS = env->getStaticIntField(cls, "OVERLAPS");
              WITHIN = env->getStaticIntField(cls, "WITHIN");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint GeoArea::getRelationship(const ::org::apache::lucene::spatial3d::geom::GeoShape & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_getRelationship_2e0040c09ede6a59], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoArea_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoArea_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoArea_getRelationship(t_GeoArea *self, PyObject *arg);

          static PyMethodDef t_GeoArea__methods_[] = {
            DECLARE_METHOD(t_GeoArea, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoArea, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoArea, getRelationship, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoArea)[] = {
            { Py_tp_methods, t_GeoArea__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoArea)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::Membership),
            NULL
          };

          DEFINE_TYPE(GeoArea, t_GeoArea, GeoArea);

          void t_GeoArea::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoArea), &PY_TYPE_DEF(GeoArea), module, "GeoArea", 0);
          }

          void t_GeoArea::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoArea), "class_", make_descriptor(GeoArea::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoArea), "wrapfn_", make_descriptor(t_GeoArea::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoArea), "boxfn_", make_descriptor(boxObject));
            env->getClass(GeoArea::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoArea), "CONTAINS", make_descriptor(GeoArea::CONTAINS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoArea), "DISJOINT", make_descriptor(GeoArea::DISJOINT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoArea), "OVERLAPS", make_descriptor(GeoArea::OVERLAPS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoArea), "WITHIN", make_descriptor(GeoArea::WITHIN));
          }

          static PyObject *t_GeoArea_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoArea::initializeClass, 1)))
              return NULL;
            return t_GeoArea::wrap_Object(GeoArea(((t_GeoArea *) arg)->object.this$));
          }
          static PyObject *t_GeoArea_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoArea::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoArea_getRelationship(t_GeoArea *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::GeoShape a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::GeoShape::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getRelationship(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getRelationship", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/XYGeometry.h"
#include "org/apache/lucene/geo/XYGeometry.h"
#include "org/apache/lucene/geo/Component2D.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *XYGeometry::class$ = NULL;
        jmethodID *XYGeometry::mids$ = NULL;
        bool XYGeometry::live$ = false;

        jclass XYGeometry::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/XYGeometry");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_create_4a870eefc5e60720] = env->getStaticMethodID(cls, "create", "([Lorg/apache/lucene/geo/XYGeometry;)Lorg/apache/lucene/geo/Component2D;");
            mids$[mid_toComponent2D_6fe8ae19c34b6817] = env->getMethodID(cls, "toComponent2D", "()Lorg/apache/lucene/geo/Component2D;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        XYGeometry::XYGeometry() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::geo::Component2D XYGeometry::create(const JArray< XYGeometry > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::geo::Component2D(env->callStaticObjectMethod(cls, mids$[mid_create_4a870eefc5e60720], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_XYGeometry_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_XYGeometry_instance_(PyTypeObject *type, PyObject *arg);
        static int t_XYGeometry_init_(t_XYGeometry *self, PyObject *args, PyObject *kwds);
        static PyObject *t_XYGeometry_create(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_XYGeometry__methods_[] = {
          DECLARE_METHOD(t_XYGeometry, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYGeometry, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYGeometry, create, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(XYGeometry)[] = {
          { Py_tp_methods, t_XYGeometry__methods_ },
          { Py_tp_init, (void *) t_XYGeometry_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(XYGeometry)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(XYGeometry, t_XYGeometry, XYGeometry);

        void t_XYGeometry::install(PyObject *module)
        {
          installType(&PY_TYPE(XYGeometry), &PY_TYPE_DEF(XYGeometry), module, "XYGeometry", 0);
        }

        void t_XYGeometry::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYGeometry), "class_", make_descriptor(XYGeometry::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYGeometry), "wrapfn_", make_descriptor(t_XYGeometry::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYGeometry), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_XYGeometry_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, XYGeometry::initializeClass, 1)))
            return NULL;
          return t_XYGeometry::wrap_Object(XYGeometry(((t_XYGeometry *) arg)->object.this$));
        }
        static PyObject *t_XYGeometry_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, XYGeometry::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_XYGeometry_init_(t_XYGeometry *self, PyObject *args, PyObject *kwds)
        {
          XYGeometry object((jobject) NULL);

          INT_CALL(object = XYGeometry());
          self->object = object;

          return 0;
        }

        static PyObject *t_XYGeometry_create(PyTypeObject *type, PyObject *arg)
        {
          JArray< XYGeometry > a0((jobject) NULL);
          ::org::apache::lucene::geo::Component2D result((jobject) NULL);

          if (!parseArg(arg, "[k", XYGeometry::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::XYGeometry::create(a0));
            return ::org::apache::lucene::geo::t_Component2D::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "create", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentReader.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/LeafMetaData.h"
#include "org/apache/lucene/codecs/PointsReader.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexReader$CacheHelper.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentReader::class$ = NULL;
        jmethodID *SegmentReader::mids$ = NULL;
        bool SegmentReader::live$ = false;

        jclass SegmentReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_directory_7452b086ce8219b2] = env->getMethodID(cls, "directory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getCoreCacheHelper_a64c414fea9a8cf6] = env->getMethodID(cls, "getCoreCacheHelper", "()Lorg/apache/lucene/index/IndexReader$CacheHelper;");
            mids$[mid_getDocValuesReader_2703cdf07eabd0a4] = env->getMethodID(cls, "getDocValuesReader", "()Lorg/apache/lucene/codecs/DocValuesProducer;");
            mids$[mid_getFieldInfos_f76601004b1c139b] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getFieldsReader_ba629b83d3686969] = env->getMethodID(cls, "getFieldsReader", "()Lorg/apache/lucene/codecs/StoredFieldsReader;");
            mids$[mid_getHardLiveDocs_ad87da2b626b21cf] = env->getMethodID(cls, "getHardLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getLiveDocs_ad87da2b626b21cf] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getMetaData_07168aa94cc70619] = env->getMethodID(cls, "getMetaData", "()Lorg/apache/lucene/index/LeafMetaData;");
            mids$[mid_getNormsReader_0502194d89d40c22] = env->getMethodID(cls, "getNormsReader", "()Lorg/apache/lucene/codecs/NormsProducer;");
            mids$[mid_getPointsReader_0a5d82ff6781f22b] = env->getMethodID(cls, "getPointsReader", "()Lorg/apache/lucene/codecs/PointsReader;");
            mids$[mid_getPostingsReader_573c1a94549f7937] = env->getMethodID(cls, "getPostingsReader", "()Lorg/apache/lucene/codecs/FieldsProducer;");
            mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6] = env->getMethodID(cls, "getReaderCacheHelper", "()Lorg/apache/lucene/index/IndexReader$CacheHelper;");
            mids$[mid_getSegmentInfo_88665de6b57af2eb] = env->getMethodID(cls, "getSegmentInfo", "()Lorg/apache/lucene/index/SegmentCommitInfo;");
            mids$[mid_getSegmentName_db9b55ba01e03e4b] = env->getMethodID(cls, "getSegmentName", "()Ljava/lang/String;");
            mids$[mid_getTermVectorsReader_f69eb90f55592154] = env->getMethodID(cls, "getTermVectorsReader", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
            mids$[mid_maxDoc_9972fcc56b44e79d] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_9972fcc56b44e79d] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_doClose_f2cc1bce94666404] = env->getMethodID(cls, "doClose", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void SegmentReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
        }

        ::org::apache::lucene::store::Directory SegmentReader::directory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_directory_7452b086ce8219b2]));
        }

        ::org::apache::lucene::index::IndexReader$CacheHelper SegmentReader::getCoreCacheHelper() const
        {
          return ::org::apache::lucene::index::IndexReader$CacheHelper(env->callObjectMethod(this$, mids$[mid_getCoreCacheHelper_a64c414fea9a8cf6]));
        }

        ::org::apache::lucene::codecs::DocValuesProducer SegmentReader::getDocValuesReader() const
        {
          return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_getDocValuesReader_2703cdf07eabd0a4]));
        }

        ::org::apache::lucene::index::FieldInfos SegmentReader::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_f76601004b1c139b]));
        }

        ::org::apache::lucene::codecs::StoredFieldsReader SegmentReader::getFieldsReader() const
        {
          return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_getFieldsReader_ba629b83d3686969]));
        }

        ::org::apache::lucene::util::Bits SegmentReader::getHardLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getHardLiveDocs_ad87da2b626b21cf]));
        }

        ::org::apache::lucene::util::Bits SegmentReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_ad87da2b626b21cf]));
        }

        ::org::apache::lucene::index::LeafMetaData SegmentReader::getMetaData() const
        {
          return ::org::apache::lucene::index::LeafMetaData(env->callObjectMethod(this$, mids$[mid_getMetaData_07168aa94cc70619]));
        }

        ::org::apache::lucene::codecs::NormsProducer SegmentReader::getNormsReader() const
        {
          return ::org::apache::lucene::codecs::NormsProducer(env->callObjectMethod(this$, mids$[mid_getNormsReader_0502194d89d40c22]));
        }

        ::org::apache::lucene::codecs::PointsReader SegmentReader::getPointsReader() const
        {
          return ::org::apache::lucene::codecs::PointsReader(env->callObjectMethod(this$, mids$[mid_getPointsReader_0a5d82ff6781f22b]));
        }

        ::org::apache::lucene::codecs::FieldsProducer SegmentReader::getPostingsReader() const
        {
          return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_getPostingsReader_573c1a94549f7937]));
        }

        ::org::apache::lucene::index::IndexReader$CacheHelper SegmentReader::getReaderCacheHelper() const
        {
          return ::org::apache::lucene::index::IndexReader$CacheHelper(env->callObjectMethod(this$, mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6]));
        }

        ::org::apache::lucene::index::SegmentCommitInfo SegmentReader::getSegmentInfo() const
        {
          return ::org::apache::lucene::index::SegmentCommitInfo(env->callObjectMethod(this$, mids$[mid_getSegmentInfo_88665de6b57af2eb]));
        }

        ::java::lang::String SegmentReader::getSegmentName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSegmentName_db9b55ba01e03e4b]));
        }

        ::org::apache::lucene::codecs::TermVectorsReader SegmentReader::getTermVectorsReader() const
        {
          return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_getTermVectorsReader_f69eb90f55592154]));
        }

        jint SegmentReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_9972fcc56b44e79d]);
        }

        jint SegmentReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_9972fcc56b44e79d]);
        }

        ::java::lang::String SegmentReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentReader_checkIntegrity(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_directory(t_SegmentReader *self);
        static PyObject *t_SegmentReader_getCoreCacheHelper(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getDocValuesReader(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getFieldInfos(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getFieldsReader(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getHardLiveDocs(t_SegmentReader *self);
        static PyObject *t_SegmentReader_getLiveDocs(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getMetaData(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getNormsReader(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getPointsReader(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getPostingsReader(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getReaderCacheHelper(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getSegmentInfo(t_SegmentReader *self);
        static PyObject *t_SegmentReader_getSegmentName(t_SegmentReader *self);
        static PyObject *t_SegmentReader_getTermVectorsReader(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_maxDoc(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_numDocs(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_toString(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_get__coreCacheHelper(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__docValuesReader(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__fieldInfos(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__fieldsReader(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__hardLiveDocs(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__liveDocs(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__metaData(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__normsReader(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__pointsReader(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__postingsReader(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__readerCacheHelper(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__segmentInfo(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__segmentName(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__termVectorsReader(t_SegmentReader *self, void *data);
        static PyGetSetDef t_SegmentReader__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentReader, coreCacheHelper),
          DECLARE_GET_FIELD(t_SegmentReader, docValuesReader),
          DECLARE_GET_FIELD(t_SegmentReader, fieldInfos),
          DECLARE_GET_FIELD(t_SegmentReader, fieldsReader),
          DECLARE_GET_FIELD(t_SegmentReader, hardLiveDocs),
          DECLARE_GET_FIELD(t_SegmentReader, liveDocs),
          DECLARE_GET_FIELD(t_SegmentReader, metaData),
          DECLARE_GET_FIELD(t_SegmentReader, normsReader),
          DECLARE_GET_FIELD(t_SegmentReader, pointsReader),
          DECLARE_GET_FIELD(t_SegmentReader, postingsReader),
          DECLARE_GET_FIELD(t_SegmentReader, readerCacheHelper),
          DECLARE_GET_FIELD(t_SegmentReader, segmentInfo),
          DECLARE_GET_FIELD(t_SegmentReader, segmentName),
          DECLARE_GET_FIELD(t_SegmentReader, termVectorsReader),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentReader__methods_[] = {
          DECLARE_METHOD(t_SegmentReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentReader, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, directory, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, getCoreCacheHelper, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getDocValuesReader, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getFieldInfos, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getFieldsReader, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getHardLiveDocs, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, getLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getMetaData, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getNormsReader, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getPointsReader, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getPostingsReader, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getReaderCacheHelper, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getSegmentInfo, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, getSegmentName, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, getTermVectorsReader, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SegmentReader)[] = {
          { Py_tp_methods, t_SegmentReader__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_SegmentReader__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SegmentReader)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::CodecReader),
          NULL
        };

        DEFINE_TYPE(SegmentReader, t_SegmentReader, SegmentReader);

        void t_SegmentReader::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentReader), &PY_TYPE_DEF(SegmentReader), module, "SegmentReader", 0);
        }

        void t_SegmentReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentReader), "class_", make_descriptor(SegmentReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentReader), "wrapfn_", make_descriptor(t_SegmentReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentReader::initializeClass, 1)))
            return NULL;
          return t_SegmentReader::wrap_Object(SegmentReader(((t_SegmentReader *) arg)->object.this$));
        }
        static PyObject *t_SegmentReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SegmentReader_checkIntegrity(t_SegmentReader *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(SegmentReader), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_SegmentReader_directory(t_SegmentReader *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.directory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_SegmentReader_getCoreCacheHelper(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCoreCacheHelper());
            return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SegmentReader), (PyObject *) self, "getCoreCacheHelper", args, 2);
        }

        static PyObject *t_SegmentReader_getDocValuesReader(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getDocValuesReader());
            return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SegmentReader), (PyObject *) self, "getDocValuesReader", args, 2);
        }

        static PyObject *t_SegmentReader_getFieldInfos(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldInfos());
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SegmentReader), (PyObject *) self, "getFieldInfos", args, 2);
        }

        static PyObject *t_SegmentReader_getFieldsReader(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldsReader());
            return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SegmentReader), (PyObject *) self, "getFieldsReader", args, 2);
        }

        static PyObject *t_SegmentReader_getHardLiveDocs(t_SegmentReader *self)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);
          OBJ_CALL(result = self->object.getHardLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
        }

        static PyObject *t_SegmentReader_getLiveDocs(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SegmentReader), (PyObject *) self, "getLiveDocs", args, 2);
        }

        static PyObject *t_SegmentReader_getMetaData(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafMetaData result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMetaData());
            return ::org::apache::lucene::index::t_LeafMetaData::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SegmentReader), (PyObject *) self, "getMetaData", args, 2);
        }

        static PyObject *t_SegmentReader_getNormsReader(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::NormsProducer result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getNormsReader());
            return ::org::apache::lucene::codecs::t_NormsProducer::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SegmentReader), (PyObject *) self, "getNormsReader", args, 2);
        }

        static PyObject *t_SegmentReader_getPointsReader(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::PointsReader result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPointsReader());
            return ::org::apache::lucene::codecs::t_PointsReader::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SegmentReader), (PyObject *) self, "getPointsReader", args, 2);
        }

        static PyObject *t_SegmentReader_getPostingsReader(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPostingsReader());
            return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SegmentReader), (PyObject *) self, "getPostingsReader", args, 2);
        }

        static PyObject *t_SegmentReader_getReaderCacheHelper(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getReaderCacheHelper());
            return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SegmentReader), (PyObject *) self, "getReaderCacheHelper", args, 2);
        }

        static PyObject *t_SegmentReader_getSegmentInfo(t_SegmentReader *self)
        {
          ::org::apache::lucene::index::SegmentCommitInfo result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentInfo());
          return ::org::apache::lucene::index::t_SegmentCommitInfo::wrap_Object(result);
        }

        static PyObject *t_SegmentReader_getSegmentName(t_SegmentReader *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentName());
          return j2p(result);
        }

        static PyObject *t_SegmentReader_getTermVectorsReader(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getTermVectorsReader());
            return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SegmentReader), (PyObject *) self, "getTermVectorsReader", args, 2);
        }

        static PyObject *t_SegmentReader_maxDoc(t_SegmentReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SegmentReader), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_SegmentReader_numDocs(t_SegmentReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SegmentReader), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_SegmentReader_toString(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(SegmentReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SegmentReader_get__coreCacheHelper(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper value((jobject) NULL);
          OBJ_CALL(value = self->object.getCoreCacheHelper());
          return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__docValuesReader(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::codecs::DocValuesProducer value((jobject) NULL);
          OBJ_CALL(value = self->object.getDocValuesReader());
          return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__fieldInfos(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__fieldsReader(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::codecs::StoredFieldsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldsReader());
          return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__hardLiveDocs(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getHardLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__liveDocs(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__metaData(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::index::LeafMetaData value((jobject) NULL);
          OBJ_CALL(value = self->object.getMetaData());
          return ::org::apache::lucene::index::t_LeafMetaData::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__normsReader(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::codecs::NormsProducer value((jobject) NULL);
          OBJ_CALL(value = self->object.getNormsReader());
          return ::org::apache::lucene::codecs::t_NormsProducer::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__pointsReader(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::codecs::PointsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getPointsReader());
          return ::org::apache::lucene::codecs::t_PointsReader::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__postingsReader(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::codecs::FieldsProducer value((jobject) NULL);
          OBJ_CALL(value = self->object.getPostingsReader());
          return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__readerCacheHelper(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper value((jobject) NULL);
          OBJ_CALL(value = self->object.getReaderCacheHelper());
          return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__segmentInfo(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::index::SegmentCommitInfo value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentInfo());
          return ::org::apache::lucene::index::t_SegmentCommitInfo::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__segmentName(t_SegmentReader *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentName());
          return j2p(value);
        }

        static PyObject *t_SegmentReader_get__termVectorsReader(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::codecs::TermVectorsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getTermVectorsReader());
          return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/dict/BinaryDictionary$ResourceScheme.h"
#include "org/apache/lucene/analysis/ja/dict/BinaryDictionary$ResourceScheme.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace dict {

            ::java::lang::Class *BinaryDictionary$ResourceScheme::class$ = NULL;
            jmethodID *BinaryDictionary$ResourceScheme::mids$ = NULL;
            bool BinaryDictionary$ResourceScheme::live$ = false;
            BinaryDictionary$ResourceScheme *BinaryDictionary$ResourceScheme::CLASSPATH = NULL;
            BinaryDictionary$ResourceScheme *BinaryDictionary$ResourceScheme::FILE = NULL;

            jclass BinaryDictionary$ResourceScheme::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/dict/BinaryDictionary$ResourceScheme");

                mids$ = new jmethodID[max_mid];
                mids$[mid_valueOf_83f0345862a43d4c] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ja/dict/BinaryDictionary$ResourceScheme;");
                mids$[mid_values_ba91aa84f0d6f2c5] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/analysis/ja/dict/BinaryDictionary$ResourceScheme;");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                CLASSPATH = new BinaryDictionary$ResourceScheme(env->getStaticObjectField(cls, "CLASSPATH", "Lorg/apache/lucene/analysis/ja/dict/BinaryDictionary$ResourceScheme;"));
                FILE = new BinaryDictionary$ResourceScheme(env->getStaticObjectField(cls, "FILE", "Lorg/apache/lucene/analysis/ja/dict/BinaryDictionary$ResourceScheme;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BinaryDictionary$ResourceScheme BinaryDictionary$ResourceScheme::valueOf(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return BinaryDictionary$ResourceScheme(env->callStaticObjectMethod(cls, mids$[mid_valueOf_83f0345862a43d4c], a0.this$));
            }

            JArray< BinaryDictionary$ResourceScheme > BinaryDictionary$ResourceScheme::values()
            {
              jclass cls = env->getClass(initializeClass);
              return JArray< BinaryDictionary$ResourceScheme >(env->callStaticObjectMethod(cls, mids$[mid_values_ba91aa84f0d6f2c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace dict {
            static PyObject *t_BinaryDictionary$ResourceScheme_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BinaryDictionary$ResourceScheme_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BinaryDictionary$ResourceScheme_of_(t_BinaryDictionary$ResourceScheme *self, PyObject *args);
            static PyObject *t_BinaryDictionary$ResourceScheme_valueOf(PyTypeObject *type, PyObject *args);
            static PyObject *t_BinaryDictionary$ResourceScheme_values(PyTypeObject *type);
            static PyObject *t_BinaryDictionary$ResourceScheme_get__parameters_(t_BinaryDictionary$ResourceScheme *self, void *data);
            static PyGetSetDef t_BinaryDictionary$ResourceScheme__fields_[] = {
              DECLARE_GET_FIELD(t_BinaryDictionary$ResourceScheme, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BinaryDictionary$ResourceScheme__methods_[] = {
              DECLARE_METHOD(t_BinaryDictionary$ResourceScheme, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BinaryDictionary$ResourceScheme, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BinaryDictionary$ResourceScheme, of_, METH_VARARGS),
              DECLARE_METHOD(t_BinaryDictionary$ResourceScheme, valueOf, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_BinaryDictionary$ResourceScheme, values, METH_NOARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(BinaryDictionary$ResourceScheme)[] = {
              { Py_tp_methods, t_BinaryDictionary$ResourceScheme__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_BinaryDictionary$ResourceScheme__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(BinaryDictionary$ResourceScheme)[] = {
              &PY_TYPE_DEF(::java::lang::Enum),
              NULL
            };

            DEFINE_TYPE(BinaryDictionary$ResourceScheme, t_BinaryDictionary$ResourceScheme, BinaryDictionary$ResourceScheme);
            PyObject *t_BinaryDictionary$ResourceScheme::wrap_Object(const BinaryDictionary$ResourceScheme& object, PyTypeObject *p0)
            {
              PyObject *obj = t_BinaryDictionary$ResourceScheme::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_BinaryDictionary$ResourceScheme *self = (t_BinaryDictionary$ResourceScheme *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_BinaryDictionary$ResourceScheme::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_BinaryDictionary$ResourceScheme::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_BinaryDictionary$ResourceScheme *self = (t_BinaryDictionary$ResourceScheme *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_BinaryDictionary$ResourceScheme::install(PyObject *module)
            {
              installType(&PY_TYPE(BinaryDictionary$ResourceScheme), &PY_TYPE_DEF(BinaryDictionary$ResourceScheme), module, "BinaryDictionary$ResourceScheme", 0);
            }

            void t_BinaryDictionary$ResourceScheme::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary$ResourceScheme), "class_", make_descriptor(BinaryDictionary$ResourceScheme::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary$ResourceScheme), "wrapfn_", make_descriptor(t_BinaryDictionary$ResourceScheme::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary$ResourceScheme), "boxfn_", make_descriptor(boxObject));
              env->getClass(BinaryDictionary$ResourceScheme::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary$ResourceScheme), "CLASSPATH", make_descriptor(t_BinaryDictionary$ResourceScheme::wrap_Object(*BinaryDictionary$ResourceScheme::CLASSPATH)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary$ResourceScheme), "FILE", make_descriptor(t_BinaryDictionary$ResourceScheme::wrap_Object(*BinaryDictionary$ResourceScheme::FILE)));
            }

            static PyObject *t_BinaryDictionary$ResourceScheme_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BinaryDictionary$ResourceScheme::initializeClass, 1)))
                return NULL;
              return t_BinaryDictionary$ResourceScheme::wrap_Object(BinaryDictionary$ResourceScheme(((t_BinaryDictionary$ResourceScheme *) arg)->object.this$));
            }
            static PyObject *t_BinaryDictionary$ResourceScheme_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BinaryDictionary$ResourceScheme::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_BinaryDictionary$ResourceScheme_of_(t_BinaryDictionary$ResourceScheme *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_BinaryDictionary$ResourceScheme_valueOf(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              BinaryDictionary$ResourceScheme result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::ja::dict::BinaryDictionary$ResourceScheme::valueOf(a0));
                return t_BinaryDictionary$ResourceScheme::wrap_Object(result);
              }

              return callSuper(type, "valueOf", args, 2);
            }

            static PyObject *t_BinaryDictionary$ResourceScheme_values(PyTypeObject *type)
            {
              JArray< BinaryDictionary$ResourceScheme > result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::analysis::ja::dict::BinaryDictionary$ResourceScheme::values());
              return JArray<jobject>(result.this$).wrap(t_BinaryDictionary$ResourceScheme::wrap_jobject);
            }
            static PyObject *t_BinaryDictionary$ResourceScheme_get__parameters_(t_BinaryDictionary$ResourceScheme *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FloatDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FloatDocValuesField::class$ = NULL;
        jmethodID *FloatDocValuesField::mids$ = NULL;
        bool FloatDocValuesField::live$ = false;

        jclass FloatDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FloatDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2cd52353fae0bd4a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;F)V");
            mids$[mid_setFloatValue_8e1d952dd65cdc3a] = env->getMethodID(cls, "setFloatValue", "(F)V");
            mids$[mid_setLongValue_9c778c9bce6694df] = env->getMethodID(cls, "setLongValue", "(J)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FloatDocValuesField::FloatDocValuesField(const ::java::lang::String & a0, jfloat a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_2cd52353fae0bd4a, a0.this$, a1)) {}

        void FloatDocValuesField::setFloatValue(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFloatValue_8e1d952dd65cdc3a], a0);
        }

        void FloatDocValuesField::setLongValue(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLongValue_9c778c9bce6694df], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FloatDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FloatDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FloatDocValuesField_init_(t_FloatDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FloatDocValuesField_setFloatValue(t_FloatDocValuesField *self, PyObject *args);
        static PyObject *t_FloatDocValuesField_setLongValue(t_FloatDocValuesField *self, PyObject *args);
        static int t_FloatDocValuesField_set__floatValue(t_FloatDocValuesField *self, PyObject *arg, void *data);
        static int t_FloatDocValuesField_set__longValue(t_FloatDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_FloatDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_FloatDocValuesField, floatValue),
          DECLARE_SET_FIELD(t_FloatDocValuesField, longValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FloatDocValuesField__methods_[] = {
          DECLARE_METHOD(t_FloatDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatDocValuesField, setFloatValue, METH_VARARGS),
          DECLARE_METHOD(t_FloatDocValuesField, setLongValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FloatDocValuesField)[] = {
          { Py_tp_methods, t_FloatDocValuesField__methods_ },
          { Py_tp_init, (void *) t_FloatDocValuesField_init_ },
          { Py_tp_getset, t_FloatDocValuesField__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FloatDocValuesField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::NumericDocValuesField),
          NULL
        };

        DEFINE_TYPE(FloatDocValuesField, t_FloatDocValuesField, FloatDocValuesField);

        void t_FloatDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(FloatDocValuesField), &PY_TYPE_DEF(FloatDocValuesField), module, "FloatDocValuesField", 0);
        }

        void t_FloatDocValuesField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FloatDocValuesField), "class_", make_descriptor(FloatDocValuesField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FloatDocValuesField), "wrapfn_", make_descriptor(t_FloatDocValuesField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FloatDocValuesField), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FloatDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FloatDocValuesField::initializeClass, 1)))
            return NULL;
          return t_FloatDocValuesField::wrap_Object(FloatDocValuesField(((t_FloatDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_FloatDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FloatDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FloatDocValuesField_init_(t_FloatDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jfloat a1;
          FloatDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sF", &a0, &a1))
          {
            INT_CALL(object = FloatDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FloatDocValuesField_setFloatValue(t_FloatDocValuesField *self, PyObject *args)
        {
          jfloat a0;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(self->object.setFloatValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FloatDocValuesField), (PyObject *) self, "setFloatValue", args, 2);
        }

        static PyObject *t_FloatDocValuesField_setLongValue(t_FloatDocValuesField *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.setLongValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FloatDocValuesField), (PyObject *) self, "setLongValue", args, 2);
        }

        static int t_FloatDocValuesField_set__floatValue(t_FloatDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setFloatValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floatValue", arg);
          return -1;
        }

        static int t_FloatDocValuesField_set__longValue(t_FloatDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setLongValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "longValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/Collator.h"
#include "java/util/Comparator.h"
#include "java/lang/Cloneable.h"
#include "java/text/Collator.h"
#include "java/lang/Class.h"
#include "java/util/Locale.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *Collator::class$ = NULL;
    jmethodID *Collator::mids$ = NULL;
    bool Collator::live$ = false;
    jint Collator::CANONICAL_DECOMPOSITION = (jint) 0;
    jint Collator::FULL_DECOMPOSITION = (jint) 0;
    jint Collator::IDENTICAL = (jint) 0;
    jint Collator::NO_DECOMPOSITION = (jint) 0;
    jint Collator::PRIMARY = (jint) 0;
    jint Collator::SECONDARY = (jint) 0;
    jint Collator::TERTIARY = (jint) 0;

    jclass Collator::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/Collator");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_d6bcd06f3102c4d9] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_compare_b842b27f8e76eceb] = env->getMethodID(cls, "compare", "(Ljava/lang/String;Ljava/lang/String;)I");
        mids$[mid_compare_9dae63203ae747af] = env->getMethodID(cls, "compare", "(Ljava/lang/Object;Ljava/lang/Object;)I");
        mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_equals_11e80e7a1d57e4b9] = env->getMethodID(cls, "equals", "(Ljava/lang/String;Ljava/lang/String;)Z");
        mids$[mid_getAvailableLocales_9de0c9f607235a40] = env->getStaticMethodID(cls, "getAvailableLocales", "()[Ljava/util/Locale;");
        mids$[mid_getDecomposition_9972fcc56b44e79d] = env->getMethodID(cls, "getDecomposition", "()I");
        mids$[mid_getInstance_624164693b6a332e] = env->getStaticMethodID(cls, "getInstance", "()Ljava/text/Collator;");
        mids$[mid_getInstance_97ffd55b551df05f] = env->getStaticMethodID(cls, "getInstance", "(Ljava/util/Locale;)Ljava/text/Collator;");
        mids$[mid_getStrength_9972fcc56b44e79d] = env->getMethodID(cls, "getStrength", "()I");
        mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_setDecomposition_040c4cd0390c5aff] = env->getMethodID(cls, "setDecomposition", "(I)V");
        mids$[mid_setStrength_040c4cd0390c5aff] = env->getMethodID(cls, "setStrength", "(I)V");

        class$ = new ::java::lang::Class(cls);
        cls = (jclass) class$->this$;

        CANONICAL_DECOMPOSITION = env->getStaticIntField(cls, "CANONICAL_DECOMPOSITION");
        FULL_DECOMPOSITION = env->getStaticIntField(cls, "FULL_DECOMPOSITION");
        IDENTICAL = env->getStaticIntField(cls, "IDENTICAL");
        NO_DECOMPOSITION = env->getStaticIntField(cls, "NO_DECOMPOSITION");
        PRIMARY = env->getStaticIntField(cls, "PRIMARY");
        SECONDARY = env->getStaticIntField(cls, "SECONDARY");
        TERTIARY = env->getStaticIntField(cls, "TERTIARY");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object Collator::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_d6bcd06f3102c4d9]));
    }

    jint Collator::compare(const ::java::lang::String & a0, const ::java::lang::String & a1) const
    {
      return env->callIntMethod(this$, mids$[mid_compare_b842b27f8e76eceb], a0.this$, a1.this$);
    }

    jint Collator::compare(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return env->callIntMethod(this$, mids$[mid_compare_9dae63203ae747af], a0.this$, a1.this$);
    }

    jboolean Collator::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
    }

    jboolean Collator::equals(const ::java::lang::String & a0, const ::java::lang::String & a1) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_11e80e7a1d57e4b9], a0.this$, a1.this$);
    }

    JArray< ::java::util::Locale > Collator::getAvailableLocales()
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::util::Locale >(env->callStaticObjectMethod(cls, mids$[mid_getAvailableLocales_9de0c9f607235a40]));
    }

    jint Collator::getDecomposition() const
    {
      return env->callIntMethod(this$, mids$[mid_getDecomposition_9972fcc56b44e79d]);
    }

    Collator Collator::getInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return Collator(env->callStaticObjectMethod(cls, mids$[mid_getInstance_624164693b6a332e]));
    }

    Collator Collator::getInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Collator(env->callStaticObjectMethod(cls, mids$[mid_getInstance_97ffd55b551df05f], a0.this$));
    }

    jint Collator::getStrength() const
    {
      return env->callIntMethod(this$, mids$[mid_getStrength_9972fcc56b44e79d]);
    }

    jint Collator::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
    }

    void Collator::setDecomposition(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setDecomposition_040c4cd0390c5aff], a0);
    }

    void Collator::setStrength(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setStrength_040c4cd0390c5aff], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_Collator_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collator_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collator_clone(t_Collator *self);
    static PyObject *t_Collator_compare(t_Collator *self, PyObject *args);
    static PyObject *t_Collator_equals(t_Collator *self, PyObject *args);
    static PyObject *t_Collator_getAvailableLocales(PyTypeObject *type);
    static PyObject *t_Collator_getDecomposition(t_Collator *self);
    static PyObject *t_Collator_getInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collator_getStrength(t_Collator *self);
    static PyObject *t_Collator_hashCode(t_Collator *self, PyObject *args);
    static PyObject *t_Collator_setDecomposition(t_Collator *self, PyObject *arg);
    static PyObject *t_Collator_setStrength(t_Collator *self, PyObject *arg);
    static PyObject *t_Collator_get__availableLocales(t_Collator *self, void *data);
    static PyObject *t_Collator_get__decomposition(t_Collator *self, void *data);
    static int t_Collator_set__decomposition(t_Collator *self, PyObject *arg, void *data);
    static PyObject *t_Collator_get__instance(t_Collator *self, void *data);
    static PyObject *t_Collator_get__strength(t_Collator *self, void *data);
    static int t_Collator_set__strength(t_Collator *self, PyObject *arg, void *data);
    static PyGetSetDef t_Collator__fields_[] = {
      DECLARE_GET_FIELD(t_Collator, availableLocales),
      DECLARE_GETSET_FIELD(t_Collator, decomposition),
      DECLARE_GET_FIELD(t_Collator, instance),
      DECLARE_GETSET_FIELD(t_Collator, strength),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Collator__methods_[] = {
      DECLARE_METHOD(t_Collator, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collator, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collator, clone, METH_NOARGS),
      DECLARE_METHOD(t_Collator, compare, METH_VARARGS),
      DECLARE_METHOD(t_Collator, equals, METH_VARARGS),
      DECLARE_METHOD(t_Collator, getAvailableLocales, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collator, getDecomposition, METH_NOARGS),
      DECLARE_METHOD(t_Collator, getInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collator, getStrength, METH_NOARGS),
      DECLARE_METHOD(t_Collator, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Collator, setDecomposition, METH_O),
      DECLARE_METHOD(t_Collator, setStrength, METH_O),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Collator)[] = {
      { Py_tp_methods, t_Collator__methods_ },
      { Py_tp_init, (void *) abstract_init },
      { Py_tp_getset, t_Collator__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Collator)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(Collator, t_Collator, Collator);

    void t_Collator::install(PyObject *module)
    {
      installType(&PY_TYPE(Collator), &PY_TYPE_DEF(Collator), module, "Collator", 0);
    }

    void t_Collator::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Collator), "class_", make_descriptor(Collator::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Collator), "wrapfn_", make_descriptor(t_Collator::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Collator), "boxfn_", make_descriptor(boxObject));
      env->getClass(Collator::initializeClass);
      PyObject_SetAttrString((PyObject *) PY_TYPE(Collator), "CANONICAL_DECOMPOSITION", make_descriptor(Collator::CANONICAL_DECOMPOSITION));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Collator), "FULL_DECOMPOSITION", make_descriptor(Collator::FULL_DECOMPOSITION));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Collator), "IDENTICAL", make_descriptor(Collator::IDENTICAL));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Collator), "NO_DECOMPOSITION", make_descriptor(Collator::NO_DECOMPOSITION));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Collator), "PRIMARY", make_descriptor(Collator::PRIMARY));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Collator), "SECONDARY", make_descriptor(Collator::SECONDARY));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Collator), "TERTIARY", make_descriptor(Collator::TERTIARY));
    }

    static PyObject *t_Collator_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Collator::initializeClass, 1)))
        return NULL;
      return t_Collator::wrap_Object(Collator(((t_Collator *) arg)->object.this$));
    }
    static PyObject *t_Collator_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Collator::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Collator_clone(t_Collator *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Collator_compare(t_Collator *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "oo", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "compare", args);
      return NULL;
    }

    static PyObject *t_Collator_equals(t_Collator *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
      }

      return callSuper(PY_TYPE(Collator), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Collator_getAvailableLocales(PyTypeObject *type)
    {
      JArray< ::java::util::Locale > result((jobject) NULL);
      OBJ_CALL(result = ::java::text::Collator::getAvailableLocales());
      return JArray<jobject>(result.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_Collator_getDecomposition(t_Collator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getDecomposition());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_Collator_getInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Collator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::Collator::getInstance());
          return t_Collator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          Collator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::Collator::getInstance(a0));
            return t_Collator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getInstance", args);
      return NULL;
    }

    static PyObject *t_Collator_getStrength(t_Collator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getStrength());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_Collator_hashCode(t_Collator *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Collator), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Collator_setDecomposition(t_Collator *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setDecomposition(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setDecomposition", arg);
      return NULL;
    }

    static PyObject *t_Collator_setStrength(t_Collator *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setStrength(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setStrength", arg);
      return NULL;
    }

    static PyObject *t_Collator_get__availableLocales(t_Collator *self, void *data)
    {
      JArray< ::java::util::Locale > value((jobject) NULL);
      OBJ_CALL(value = self->object.getAvailableLocales());
      return JArray<jobject>(value.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_Collator_get__decomposition(t_Collator *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getDecomposition());
      return PyLong_FromLong((long) value);
    }
    static int t_Collator_set__decomposition(t_Collator *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setDecomposition(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "decomposition", arg);
      return -1;
    }

    static PyObject *t_Collator_get__instance(t_Collator *self, void *data)
    {
      Collator value((jobject) NULL);
      OBJ_CALL(value = self->object.getInstance());
      return t_Collator::wrap_Object(value);
    }

    static PyObject *t_Collator_get__strength(t_Collator *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getStrength());
      return PyLong_FromLong((long) value);
    }
    static int t_Collator_set__strength(t_Collator *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setStrength(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "strength", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexableFieldType.h"
#include "java/io/Reader.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexableField::class$ = NULL;
        jmethodID *IndexableField::mids$ = NULL;
        bool IndexableField::live$ = false;

        jclass IndexableField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexableField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_binaryValue_7af2ea2e37ce82b8] = env->getMethodID(cls, "binaryValue", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_fieldType_d8965a563fa0c725] = env->getMethodID(cls, "fieldType", "()Lorg/apache/lucene/index/IndexableFieldType;");
            mids$[mid_getCharSequenceValue_ba44900ab7d793b9] = env->getMethodID(cls, "getCharSequenceValue", "()Ljava/lang/CharSequence;");
            mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
            mids$[mid_numericValue_f5813404cc5e3a1e] = env->getMethodID(cls, "numericValue", "()Ljava/lang/Number;");
            mids$[mid_readerValue_cad8e490f39649d8] = env->getMethodID(cls, "readerValue", "()Ljava/io/Reader;");
            mids$[mid_stringValue_db9b55ba01e03e4b] = env->getMethodID(cls, "stringValue", "()Ljava/lang/String;");
            mids$[mid_tokenStream_c1cd9ee6ce43641f] = env->getMethodID(cls, "tokenStream", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef IndexableField::binaryValue() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_binaryValue_7af2ea2e37ce82b8]));
        }

        ::org::apache::lucene::index::IndexableFieldType IndexableField::fieldType() const
        {
          return ::org::apache::lucene::index::IndexableFieldType(env->callObjectMethod(this$, mids$[mid_fieldType_d8965a563fa0c725]));
        }

        ::java::lang::CharSequence IndexableField::getCharSequenceValue() const
        {
          return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getCharSequenceValue_ba44900ab7d793b9]));
        }

        ::java::lang::String IndexableField::name() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_db9b55ba01e03e4b]));
        }

        ::java::lang::Number IndexableField::numericValue() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_numericValue_f5813404cc5e3a1e]));
        }

        ::java::io::Reader IndexableField::readerValue() const
        {
          return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_readerValue_cad8e490f39649d8]));
        }

        ::java::lang::String IndexableField::stringValue() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_stringValue_db9b55ba01e03e4b]));
        }

        ::org::apache::lucene::analysis::TokenStream IndexableField::tokenStream(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_c1cd9ee6ce43641f], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexableField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableField_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableField_binaryValue(t_IndexableField *self);
        static PyObject *t_IndexableField_fieldType(t_IndexableField *self);
        static PyObject *t_IndexableField_getCharSequenceValue(t_IndexableField *self);
        static PyObject *t_IndexableField_name(t_IndexableField *self);
        static PyObject *t_IndexableField_numericValue(t_IndexableField *self);
        static PyObject *t_IndexableField_readerValue(t_IndexableField *self);
        static PyObject *t_IndexableField_stringValue(t_IndexableField *self);
        static PyObject *t_IndexableField_tokenStream(t_IndexableField *self, PyObject *args);
        static PyObject *t_IndexableField_get__charSequenceValue(t_IndexableField *self, void *data);
        static PyGetSetDef t_IndexableField__fields_[] = {
          DECLARE_GET_FIELD(t_IndexableField, charSequenceValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexableField__methods_[] = {
          DECLARE_METHOD(t_IndexableField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableField, binaryValue, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, fieldType, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, getCharSequenceValue, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, name, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, numericValue, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, readerValue, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, stringValue, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, tokenStream, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexableField)[] = {
          { Py_tp_methods, t_IndexableField__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_IndexableField__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexableField)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexableField, t_IndexableField, IndexableField);

        void t_IndexableField::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexableField), &PY_TYPE_DEF(IndexableField), module, "IndexableField", 0);
        }

        void t_IndexableField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexableField), "class_", make_descriptor(IndexableField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexableField), "wrapfn_", make_descriptor(t_IndexableField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexableField), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexableField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexableField::initializeClass, 1)))
            return NULL;
          return t_IndexableField::wrap_Object(IndexableField(((t_IndexableField *) arg)->object.this$));
        }
        static PyObject *t_IndexableField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexableField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexableField_binaryValue(t_IndexableField *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.binaryValue());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_IndexableField_fieldType(t_IndexableField *self)
        {
          ::org::apache::lucene::index::IndexableFieldType result((jobject) NULL);
          OBJ_CALL(result = self->object.fieldType());
          return ::org::apache::lucene::index::t_IndexableFieldType::wrap_Object(result);
        }

        static PyObject *t_IndexableField_getCharSequenceValue(t_IndexableField *self)
        {
          ::java::lang::CharSequence result((jobject) NULL);
          OBJ_CALL(result = self->object.getCharSequenceValue());
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        static PyObject *t_IndexableField_name(t_IndexableField *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.name());
          return j2p(result);
        }

        static PyObject *t_IndexableField_numericValue(t_IndexableField *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.numericValue());
          return ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_IndexableField_readerValue(t_IndexableField *self)
        {
          ::java::io::Reader result((jobject) NULL);
          OBJ_CALL(result = self->object.readerValue());
          return ::java::io::t_Reader::wrap_Object(result);
        }

        static PyObject *t_IndexableField_stringValue(t_IndexableField *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.stringValue());
          return j2p(result);
        }

        static PyObject *t_IndexableField_tokenStream(t_IndexableField *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.tokenStream(a0, a1));
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "tokenStream", args);
          return NULL;
        }

        static PyObject *t_IndexableField_get__charSequenceValue(t_IndexableField *self, void *data)
        {
          ::java::lang::CharSequence value((jobject) NULL);
          OBJ_CALL(value = self->object.getCharSequenceValue());
          return ::java::lang::t_CharSequence::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/LazyDocument$LazyField.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexableFieldType.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *LazyDocument$LazyField::class$ = NULL;
        jmethodID *LazyDocument$LazyField::mids$ = NULL;
        bool LazyDocument$LazyField::live$ = false;

        jclass LazyDocument$LazyField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/LazyDocument$LazyField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_binaryValue_7af2ea2e37ce82b8] = env->getMethodID(cls, "binaryValue", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_fieldType_d8965a563fa0c725] = env->getMethodID(cls, "fieldType", "()Lorg/apache/lucene/index/IndexableFieldType;");
            mids$[mid_hasBeenLoaded_8454bd5aa23fd11e] = env->getMethodID(cls, "hasBeenLoaded", "()Z");
            mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
            mids$[mid_numericValue_f5813404cc5e3a1e] = env->getMethodID(cls, "numericValue", "()Ljava/lang/Number;");
            mids$[mid_readerValue_cad8e490f39649d8] = env->getMethodID(cls, "readerValue", "()Ljava/io/Reader;");
            mids$[mid_stringValue_db9b55ba01e03e4b] = env->getMethodID(cls, "stringValue", "()Ljava/lang/String;");
            mids$[mid_tokenStream_c1cd9ee6ce43641f] = env->getMethodID(cls, "tokenStream", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef LazyDocument$LazyField::binaryValue() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_binaryValue_7af2ea2e37ce82b8]));
        }

        ::org::apache::lucene::index::IndexableFieldType LazyDocument$LazyField::fieldType() const
        {
          return ::org::apache::lucene::index::IndexableFieldType(env->callObjectMethod(this$, mids$[mid_fieldType_d8965a563fa0c725]));
        }

        jboolean LazyDocument$LazyField::hasBeenLoaded() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasBeenLoaded_8454bd5aa23fd11e]);
        }

        ::java::lang::String LazyDocument$LazyField::name() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_db9b55ba01e03e4b]));
        }

        ::java::lang::Number LazyDocument$LazyField::numericValue() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_numericValue_f5813404cc5e3a1e]));
        }

        ::java::io::Reader LazyDocument$LazyField::readerValue() const
        {
          return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_readerValue_cad8e490f39649d8]));
        }

        ::java::lang::String LazyDocument$LazyField::stringValue() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_stringValue_db9b55ba01e03e4b]));
        }

        ::org::apache::lucene::analysis::TokenStream LazyDocument$LazyField::tokenStream(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_c1cd9ee6ce43641f], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_LazyDocument$LazyField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LazyDocument$LazyField_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LazyDocument$LazyField_binaryValue(t_LazyDocument$LazyField *self);
        static PyObject *t_LazyDocument$LazyField_fieldType(t_LazyDocument$LazyField *self);
        static PyObject *t_LazyDocument$LazyField_hasBeenLoaded(t_LazyDocument$LazyField *self);
        static PyObject *t_LazyDocument$LazyField_name(t_LazyDocument$LazyField *self);
        static PyObject *t_LazyDocument$LazyField_numericValue(t_LazyDocument$LazyField *self);
        static PyObject *t_LazyDocument$LazyField_readerValue(t_LazyDocument$LazyField *self);
        static PyObject *t_LazyDocument$LazyField_stringValue(t_LazyDocument$LazyField *self);
        static PyObject *t_LazyDocument$LazyField_tokenStream(t_LazyDocument$LazyField *self, PyObject *args);

        static PyMethodDef t_LazyDocument$LazyField__methods_[] = {
          DECLARE_METHOD(t_LazyDocument$LazyField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LazyDocument$LazyField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LazyDocument$LazyField, binaryValue, METH_NOARGS),
          DECLARE_METHOD(t_LazyDocument$LazyField, fieldType, METH_NOARGS),
          DECLARE_METHOD(t_LazyDocument$LazyField, hasBeenLoaded, METH_NOARGS),
          DECLARE_METHOD(t_LazyDocument$LazyField, name, METH_NOARGS),
          DECLARE_METHOD(t_LazyDocument$LazyField, numericValue, METH_NOARGS),
          DECLARE_METHOD(t_LazyDocument$LazyField, readerValue, METH_NOARGS),
          DECLARE_METHOD(t_LazyDocument$LazyField, stringValue, METH_NOARGS),
          DECLARE_METHOD(t_LazyDocument$LazyField, tokenStream, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LazyDocument$LazyField)[] = {
          { Py_tp_methods, t_LazyDocument$LazyField__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LazyDocument$LazyField)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LazyDocument$LazyField, t_LazyDocument$LazyField, LazyDocument$LazyField);

        void t_LazyDocument$LazyField::install(PyObject *module)
        {
          installType(&PY_TYPE(LazyDocument$LazyField), &PY_TYPE_DEF(LazyDocument$LazyField), module, "LazyDocument$LazyField", 0);
        }

        void t_LazyDocument$LazyField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LazyDocument$LazyField), "class_", make_descriptor(LazyDocument$LazyField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LazyDocument$LazyField), "wrapfn_", make_descriptor(t_LazyDocument$LazyField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LazyDocument$LazyField), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LazyDocument$LazyField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LazyDocument$LazyField::initializeClass, 1)))
            return NULL;
          return t_LazyDocument$LazyField::wrap_Object(LazyDocument$LazyField(((t_LazyDocument$LazyField *) arg)->object.this$));
        }
        static PyObject *t_LazyDocument$LazyField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LazyDocument$LazyField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LazyDocument$LazyField_binaryValue(t_LazyDocument$LazyField *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.binaryValue());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_LazyDocument$LazyField_fieldType(t_LazyDocument$LazyField *self)
        {
          ::org::apache::lucene::index::IndexableFieldType result((jobject) NULL);
          OBJ_CALL(result = self->object.fieldType());
          return ::org::apache::lucene::index::t_IndexableFieldType::wrap_Object(result);
        }

        static PyObject *t_LazyDocument$LazyField_hasBeenLoaded(t_LazyDocument$LazyField *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasBeenLoaded());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LazyDocument$LazyField_name(t_LazyDocument$LazyField *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.name());
          return j2p(result);
        }

        static PyObject *t_LazyDocument$LazyField_numericValue(t_LazyDocument$LazyField *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.numericValue());
          return ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_LazyDocument$LazyField_readerValue(t_LazyDocument$LazyField *self)
        {
          ::java::io::Reader result((jobject) NULL);
          OBJ_CALL(result = self->object.readerValue());
          return ::java::io::t_Reader::wrap_Object(result);
        }

        static PyObject *t_LazyDocument$LazyField_stringValue(t_LazyDocument$LazyField *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.stringValue());
          return j2p(result);
        }

        static PyObject *t_LazyDocument$LazyField_tokenStream(t_LazyDocument$LazyField *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.tokenStream(a0, a1));
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "tokenStream", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType.h"
#include "org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *BlendedInfixSuggester$BlenderType::class$ = NULL;
            jmethodID *BlendedInfixSuggester$BlenderType::mids$ = NULL;
            bool BlendedInfixSuggester$BlenderType::live$ = false;
            BlendedInfixSuggester$BlenderType *BlendedInfixSuggester$BlenderType::CUSTOM = NULL;
            BlendedInfixSuggester$BlenderType *BlendedInfixSuggester$BlenderType::POSITION_EXPONENTIAL_RECIPROCAL = NULL;
            BlendedInfixSuggester$BlenderType *BlendedInfixSuggester$BlenderType::POSITION_LINEAR = NULL;
            BlendedInfixSuggester$BlenderType *BlendedInfixSuggester$BlenderType::POSITION_RECIPROCAL = NULL;

            jclass BlendedInfixSuggester$BlenderType::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType");

                mids$ = new jmethodID[max_mid];
                mids$[mid_valueOf_60909a07aefbb22f] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;");
                mids$[mid_values_0e1a62aca647cc90] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                CUSTOM = new BlendedInfixSuggester$BlenderType(env->getStaticObjectField(cls, "CUSTOM", "Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;"));
                POSITION_EXPONENTIAL_RECIPROCAL = new BlendedInfixSuggester$BlenderType(env->getStaticObjectField(cls, "POSITION_EXPONENTIAL_RECIPROCAL", "Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;"));
                POSITION_LINEAR = new BlendedInfixSuggester$BlenderType(env->getStaticObjectField(cls, "POSITION_LINEAR", "Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;"));
                POSITION_RECIPROCAL = new BlendedInfixSuggester$BlenderType(env->getStaticObjectField(cls, "POSITION_RECIPROCAL", "Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BlendedInfixSuggester$BlenderType BlendedInfixSuggester$BlenderType::valueOf(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return BlendedInfixSuggester$BlenderType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_60909a07aefbb22f], a0.this$));
            }

            JArray< BlendedInfixSuggester$BlenderType > BlendedInfixSuggester$BlenderType::values()
            {
              jclass cls = env->getClass(initializeClass);
              return JArray< BlendedInfixSuggester$BlenderType >(env->callStaticObjectMethod(cls, mids$[mid_values_0e1a62aca647cc90]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_BlendedInfixSuggester$BlenderType_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BlendedInfixSuggester$BlenderType_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BlendedInfixSuggester$BlenderType_of_(t_BlendedInfixSuggester$BlenderType *self, PyObject *args);
            static PyObject *t_BlendedInfixSuggester$BlenderType_valueOf(PyTypeObject *type, PyObject *args);
            static PyObject *t_BlendedInfixSuggester$BlenderType_values(PyTypeObject *type);
            static PyObject *t_BlendedInfixSuggester$BlenderType_get__parameters_(t_BlendedInfixSuggester$BlenderType *self, void *data);
            static PyGetSetDef t_BlendedInfixSuggester$BlenderType__fields_[] = {
              DECLARE_GET_FIELD(t_BlendedInfixSuggester$BlenderType, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BlendedInfixSuggester$BlenderType__methods_[] = {
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, of_, METH_VARARGS),
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, valueOf, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, values, METH_NOARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(BlendedInfixSuggester$BlenderType)[] = {
              { Py_tp_methods, t_BlendedInfixSuggester$BlenderType__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_BlendedInfixSuggester$BlenderType__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(BlendedInfixSuggester$BlenderType)[] = {
              &PY_TYPE_DEF(::java::lang::Enum),
              NULL
            };

            DEFINE_TYPE(BlendedInfixSuggester$BlenderType, t_BlendedInfixSuggester$BlenderType, BlendedInfixSuggester$BlenderType);
            PyObject *t_BlendedInfixSuggester$BlenderType::wrap_Object(const BlendedInfixSuggester$BlenderType& object, PyTypeObject *p0)
            {
              PyObject *obj = t_BlendedInfixSuggester$BlenderType::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_BlendedInfixSuggester$BlenderType *self = (t_BlendedInfixSuggester$BlenderType *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_BlendedInfixSuggester$BlenderType::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_BlendedInfixSuggester$BlenderType::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_BlendedInfixSuggester$BlenderType *self = (t_BlendedInfixSuggester$BlenderType *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_BlendedInfixSuggester$BlenderType::install(PyObject *module)
            {
              installType(&PY_TYPE(BlendedInfixSuggester$BlenderType), &PY_TYPE_DEF(BlendedInfixSuggester$BlenderType), module, "BlendedInfixSuggester$BlenderType", 0);
            }

            void t_BlendedInfixSuggester$BlenderType::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedInfixSuggester$BlenderType), "class_", make_descriptor(BlendedInfixSuggester$BlenderType::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedInfixSuggester$BlenderType), "wrapfn_", make_descriptor(t_BlendedInfixSuggester$BlenderType::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedInfixSuggester$BlenderType), "boxfn_", make_descriptor(boxObject));
              env->getClass(BlendedInfixSuggester$BlenderType::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedInfixSuggester$BlenderType), "CUSTOM", make_descriptor(t_BlendedInfixSuggester$BlenderType::wrap_Object(*BlendedInfixSuggester$BlenderType::CUSTOM)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedInfixSuggester$BlenderType), "POSITION_EXPONENTIAL_RECIPROCAL", make_descriptor(t_BlendedInfixSuggester$BlenderType::wrap_Object(*BlendedInfixSuggester$BlenderType::POSITION_EXPONENTIAL_RECIPROCAL)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedInfixSuggester$BlenderType), "POSITION_LINEAR", make_descriptor(t_BlendedInfixSuggester$BlenderType::wrap_Object(*BlendedInfixSuggester$BlenderType::POSITION_LINEAR)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedInfixSuggester$BlenderType), "POSITION_RECIPROCAL", make_descriptor(t_BlendedInfixSuggester$BlenderType::wrap_Object(*BlendedInfixSuggester$BlenderType::POSITION_RECIPROCAL)));
            }

            static PyObject *t_BlendedInfixSuggester$BlenderType_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BlendedInfixSuggester$BlenderType::initializeClass, 1)))
                return NULL;
              return t_BlendedInfixSuggester$BlenderType::wrap_Object(BlendedInfixSuggester$BlenderType(((t_BlendedInfixSuggester$BlenderType *) arg)->object.this$));
            }
            static PyObject *t_BlendedInfixSuggester$BlenderType_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BlendedInfixSuggester$BlenderType::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_BlendedInfixSuggester$BlenderType_of_(t_BlendedInfixSuggester$BlenderType *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_BlendedInfixSuggester$BlenderType_valueOf(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              BlendedInfixSuggester$BlenderType result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType::valueOf(a0));
                return t_BlendedInfixSuggester$BlenderType::wrap_Object(result);
              }

              return callSuper(type, "valueOf", args, 2);
            }

            static PyObject *t_BlendedInfixSuggester$BlenderType_values(PyTypeObject *type)
            {
              JArray< BlendedInfixSuggester$BlenderType > result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType::values());
              return JArray<jobject>(result.this$).wrap(t_BlendedInfixSuggester$BlenderType::wrap_jobject);
            }
            static PyObject *t_BlendedInfixSuggester$BlenderType_get__parameters_(t_BlendedInfixSuggester$BlenderType *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/compress/LZ4$HighCompressionHashTable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace compress {

          ::java::lang::Class *LZ4$HighCompressionHashTable::class$ = NULL;
          jmethodID *LZ4$HighCompressionHashTable::mids$ = NULL;
          bool LZ4$HighCompressionHashTable::live$ = false;

          jclass LZ4$HighCompressionHashTable::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/compress/LZ4$HighCompressionHashTable");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LZ4$HighCompressionHashTable::LZ4$HighCompressionHashTable() : ::org::apache::lucene::util::compress::LZ4$HashTable(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace compress {
          static PyObject *t_LZ4$HighCompressionHashTable_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LZ4$HighCompressionHashTable_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LZ4$HighCompressionHashTable_init_(t_LZ4$HighCompressionHashTable *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_LZ4$HighCompressionHashTable__methods_[] = {
            DECLARE_METHOD(t_LZ4$HighCompressionHashTable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LZ4$HighCompressionHashTable, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LZ4$HighCompressionHashTable)[] = {
            { Py_tp_methods, t_LZ4$HighCompressionHashTable__methods_ },
            { Py_tp_init, (void *) t_LZ4$HighCompressionHashTable_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LZ4$HighCompressionHashTable)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::compress::LZ4$HashTable),
            NULL
          };

          DEFINE_TYPE(LZ4$HighCompressionHashTable, t_LZ4$HighCompressionHashTable, LZ4$HighCompressionHashTable);

          void t_LZ4$HighCompressionHashTable::install(PyObject *module)
          {
            installType(&PY_TYPE(LZ4$HighCompressionHashTable), &PY_TYPE_DEF(LZ4$HighCompressionHashTable), module, "LZ4$HighCompressionHashTable", 0);
          }

          void t_LZ4$HighCompressionHashTable::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LZ4$HighCompressionHashTable), "class_", make_descriptor(LZ4$HighCompressionHashTable::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LZ4$HighCompressionHashTable), "wrapfn_", make_descriptor(t_LZ4$HighCompressionHashTable::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LZ4$HighCompressionHashTable), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LZ4$HighCompressionHashTable_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LZ4$HighCompressionHashTable::initializeClass, 1)))
              return NULL;
            return t_LZ4$HighCompressionHashTable::wrap_Object(LZ4$HighCompressionHashTable(((t_LZ4$HighCompressionHashTable *) arg)->object.this$));
          }
          static PyObject *t_LZ4$HighCompressionHashTable_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LZ4$HighCompressionHashTable::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LZ4$HighCompressionHashTable_init_(t_LZ4$HighCompressionHashTable *self, PyObject *args, PyObject *kwds)
          {
            LZ4$HighCompressionHashTable object((jobject) NULL);

            INT_CALL(object = LZ4$HighCompressionHashTable());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceSubQuery.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *DistanceSubQuery::class$ = NULL;
            jmethodID *DistanceSubQuery::mids$ = NULL;
            bool DistanceSubQuery::live$ = false;

            jclass DistanceSubQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/DistanceSubQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_addSpanQueries_121a707f1abd1a95] = env->getMethodID(cls, "addSpanQueries", "(Lorg/apache/lucene/queryparser/surround/query/SpanNearClauseFactory;)V");
                mids$[mid_distanceSubQueryNotAllowed_db9b55ba01e03e4b] = env->getMethodID(cls, "distanceSubQueryNotAllowed", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void DistanceSubQuery::addSpanQueries(const ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQueries_121a707f1abd1a95], a0.this$);
            }

            ::java::lang::String DistanceSubQuery::distanceSubQueryNotAllowed() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_distanceSubQueryNotAllowed_db9b55ba01e03e4b]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_DistanceSubQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DistanceSubQuery_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DistanceSubQuery_addSpanQueries(t_DistanceSubQuery *self, PyObject *arg);
            static PyObject *t_DistanceSubQuery_distanceSubQueryNotAllowed(t_DistanceSubQuery *self);

            static PyMethodDef t_DistanceSubQuery__methods_[] = {
              DECLARE_METHOD(t_DistanceSubQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DistanceSubQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DistanceSubQuery, addSpanQueries, METH_O),
              DECLARE_METHOD(t_DistanceSubQuery, distanceSubQueryNotAllowed, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(DistanceSubQuery)[] = {
              { Py_tp_methods, t_DistanceSubQuery__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(DistanceSubQuery)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(DistanceSubQuery, t_DistanceSubQuery, DistanceSubQuery);

            void t_DistanceSubQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(DistanceSubQuery), &PY_TYPE_DEF(DistanceSubQuery), module, "DistanceSubQuery", 0);
            }

            void t_DistanceSubQuery::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(DistanceSubQuery), "class_", make_descriptor(DistanceSubQuery::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DistanceSubQuery), "wrapfn_", make_descriptor(t_DistanceSubQuery::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DistanceSubQuery), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DistanceSubQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DistanceSubQuery::initializeClass, 1)))
                return NULL;
              return t_DistanceSubQuery::wrap_Object(DistanceSubQuery(((t_DistanceSubQuery *) arg)->object.this$));
            }
            static PyObject *t_DistanceSubQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DistanceSubQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_DistanceSubQuery_addSpanQueries(t_DistanceSubQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQueries(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQueries", arg);
              return NULL;
            }

            static PyObject *t_DistanceSubQuery_distanceSubQueryNotAllowed(t_DistanceSubQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.distanceSubQueryNotAllowed());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherLifetimeManager.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$Pruner.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherLifetimeManager::class$ = NULL;
        jmethodID *SearcherLifetimeManager::mids$ = NULL;
        bool SearcherLifetimeManager::live$ = false;

        jclass SearcherLifetimeManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherLifetimeManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acquire_4ddd1cd0f21664bc] = env->getMethodID(cls, "acquire", "(J)Lorg/apache/lucene/search/IndexSearcher;");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_prune_5df8a41a9dfffe39] = env->getMethodID(cls, "prune", "(Lorg/apache/lucene/search/SearcherLifetimeManager$Pruner;)V");
            mids$[mid_record_60b76aab9334af7a] = env->getMethodID(cls, "record", "(Lorg/apache/lucene/search/IndexSearcher;)J");
            mids$[mid_release_9541dcc7c968ac14] = env->getMethodID(cls, "release", "(Lorg/apache/lucene/search/IndexSearcher;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SearcherLifetimeManager::SearcherLifetimeManager() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::search::IndexSearcher SearcherLifetimeManager::acquire(jlong a0) const
        {
          return ::org::apache::lucene::search::IndexSearcher(env->callObjectMethod(this$, mids$[mid_acquire_4ddd1cd0f21664bc], a0));
        }

        void SearcherLifetimeManager::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        void SearcherLifetimeManager::prune(const ::org::apache::lucene::search::SearcherLifetimeManager$Pruner & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_prune_5df8a41a9dfffe39], a0.this$);
        }

        jlong SearcherLifetimeManager::record(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_record_60b76aab9334af7a], a0.this$);
        }

        void SearcherLifetimeManager::release(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_9541dcc7c968ac14], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$PruneByAge.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherLifetimeManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SearcherLifetimeManager_init_(t_SearcherLifetimeManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SearcherLifetimeManager_acquire(t_SearcherLifetimeManager *self, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager_close(t_SearcherLifetimeManager *self);
        static PyObject *t_SearcherLifetimeManager_prune(t_SearcherLifetimeManager *self, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager_record(t_SearcherLifetimeManager *self, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager_release(t_SearcherLifetimeManager *self, PyObject *arg);

        static PyMethodDef t_SearcherLifetimeManager__methods_[] = {
          DECLARE_METHOD(t_SearcherLifetimeManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager, acquire, METH_O),
          DECLARE_METHOD(t_SearcherLifetimeManager, close, METH_NOARGS),
          DECLARE_METHOD(t_SearcherLifetimeManager, prune, METH_O),
          DECLARE_METHOD(t_SearcherLifetimeManager, record, METH_O),
          DECLARE_METHOD(t_SearcherLifetimeManager, release, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SearcherLifetimeManager)[] = {
          { Py_tp_methods, t_SearcherLifetimeManager__methods_ },
          { Py_tp_init, (void *) t_SearcherLifetimeManager_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SearcherLifetimeManager)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SearcherLifetimeManager, t_SearcherLifetimeManager, SearcherLifetimeManager);

        void t_SearcherLifetimeManager::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherLifetimeManager), &PY_TYPE_DEF(SearcherLifetimeManager), module, "SearcherLifetimeManager", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherLifetimeManager), "PruneByAge", make_descriptor(&PY_TYPE_DEF(SearcherLifetimeManager$PruneByAge)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherLifetimeManager), "Pruner", make_descriptor(&PY_TYPE_DEF(SearcherLifetimeManager$Pruner)));
        }

        void t_SearcherLifetimeManager::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherLifetimeManager), "class_", make_descriptor(SearcherLifetimeManager::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherLifetimeManager), "wrapfn_", make_descriptor(t_SearcherLifetimeManager::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherLifetimeManager), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherLifetimeManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherLifetimeManager::initializeClass, 1)))
            return NULL;
          return t_SearcherLifetimeManager::wrap_Object(SearcherLifetimeManager(((t_SearcherLifetimeManager *) arg)->object.this$));
        }
        static PyObject *t_SearcherLifetimeManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherLifetimeManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SearcherLifetimeManager_init_(t_SearcherLifetimeManager *self, PyObject *args, PyObject *kwds)
        {
          SearcherLifetimeManager object((jobject) NULL);

          INT_CALL(object = SearcherLifetimeManager());
          self->object = object;

          return 0;
        }

        static PyObject *t_SearcherLifetimeManager_acquire(t_SearcherLifetimeManager *self, PyObject *arg)
        {
          jlong a0;
          ::org::apache::lucene::search::IndexSearcher result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.acquire(a0));
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "acquire", arg);
          return NULL;
        }

        static PyObject *t_SearcherLifetimeManager_close(t_SearcherLifetimeManager *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_SearcherLifetimeManager_prune(t_SearcherLifetimeManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::SearcherLifetimeManager$Pruner a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::SearcherLifetimeManager$Pruner::initializeClass, &a0))
          {
            OBJ_CALL(self->object.prune(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "prune", arg);
          return NULL;
        }

        static PyObject *t_SearcherLifetimeManager_record(t_SearcherLifetimeManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.record(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "record", arg);
          return NULL;
        }

        static PyObject *t_SearcherLifetimeManager_release(t_SearcherLifetimeManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(self->object.release(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "release", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchAnalyzer::class$ = NULL;
          jmethodID *FrenchAnalyzer::mids$ = NULL;
          bool FrenchAnalyzer::live$ = false;
          ::org::apache::lucene::analysis::CharArraySet *FrenchAnalyzer::DEFAULT_ARTICLES = NULL;
          ::java::lang::String *FrenchAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass FrenchAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_ARTICLES = new ::org::apache::lucene::analysis::CharArraySet(env->getStaticObjectField(cls, "DEFAULT_ARTICLES", "Lorg/apache/lucene/analysis/CharArraySet;"));
              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchAnalyzer::FrenchAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          FrenchAnalyzer::FrenchAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          FrenchAnalyzer::FrenchAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet FrenchAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchAnalyzer_init_(t_FrenchAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_FrenchAnalyzer_get__defaultStopSet(t_FrenchAnalyzer *self, void *data);
          static PyGetSetDef t_FrenchAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_FrenchAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FrenchAnalyzer__methods_[] = {
            DECLARE_METHOD(t_FrenchAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FrenchAnalyzer)[] = {
            { Py_tp_methods, t_FrenchAnalyzer__methods_ },
            { Py_tp_init, (void *) t_FrenchAnalyzer_init_ },
            { Py_tp_getset, t_FrenchAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FrenchAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(FrenchAnalyzer, t_FrenchAnalyzer, FrenchAnalyzer);

          void t_FrenchAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchAnalyzer), &PY_TYPE_DEF(FrenchAnalyzer), module, "FrenchAnalyzer", 0);
          }

          void t_FrenchAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchAnalyzer), "class_", make_descriptor(FrenchAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchAnalyzer), "wrapfn_", make_descriptor(t_FrenchAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(FrenchAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchAnalyzer), "DEFAULT_ARTICLES", make_descriptor(::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(*FrenchAnalyzer::DEFAULT_ARTICLES)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*FrenchAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_FrenchAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchAnalyzer::initializeClass, 1)))
              return NULL;
            return t_FrenchAnalyzer::wrap_Object(FrenchAnalyzer(((t_FrenchAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_FrenchAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchAnalyzer_init_(t_FrenchAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                FrenchAnalyzer object((jobject) NULL);

                INT_CALL(object = FrenchAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                FrenchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FrenchAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                FrenchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FrenchAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::fr::FrenchAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_FrenchAnalyzer_get__defaultStopSet(t_FrenchAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/LiveFieldValues.h"
#include "org/apache/lucene/search/ReferenceManager.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ReferenceManager$RefreshListener.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *LiveFieldValues::class$ = NULL;
        jmethodID *LiveFieldValues::mids$ = NULL;
        bool LiveFieldValues::live$ = false;

        jclass LiveFieldValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/LiveFieldValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_34f8794a84182b97] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/ReferenceManager;Ljava/lang/Object;)V");
            mids$[mid_add_a814174df0bbb9ee] = env->getMethodID(cls, "add", "(Ljava/lang/String;Ljava/lang/Object;)V");
            mids$[mid_afterRefresh_9d72768e8fdce2b7] = env->getMethodID(cls, "afterRefresh", "(Z)V");
            mids$[mid_beforeRefresh_f2cc1bce94666404] = env->getMethodID(cls, "beforeRefresh", "()V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_delete_9fd2eb66a64e6f0f] = env->getMethodID(cls, "delete", "(Ljava/lang/String;)V");
            mids$[mid_get_c0a3c3394484d296] = env->getMethodID(cls, "get", "(Ljava/lang/String;)Ljava/lang/Object;");
            mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
            mids$[mid_lookupFromSearcher_dff1704659391eef] = env->getMethodID(cls, "lookupFromSearcher", "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LiveFieldValues::LiveFieldValues(const ::org::apache::lucene::search::ReferenceManager & a0, const ::java::lang::Object & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_34f8794a84182b97, a0.this$, a1.this$)) {}

        void LiveFieldValues::add(const ::java::lang::String & a0, const ::java::lang::Object & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_a814174df0bbb9ee], a0.this$, a1.this$);
        }

        void LiveFieldValues::afterRefresh(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_afterRefresh_9d72768e8fdce2b7], a0);
        }

        void LiveFieldValues::beforeRefresh() const
        {
          env->callVoidMethod(this$, mids$[mid_beforeRefresh_f2cc1bce94666404]);
        }

        void LiveFieldValues::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        void LiveFieldValues::delete$(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_delete_9fd2eb66a64e6f0f], a0.this$);
        }

        ::java::lang::Object LiveFieldValues::get(const ::java::lang::String & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_c0a3c3394484d296], a0.this$));
        }

        jint LiveFieldValues::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_LiveFieldValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveFieldValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveFieldValues_of_(t_LiveFieldValues *self, PyObject *args);
        static int t_LiveFieldValues_init_(t_LiveFieldValues *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LiveFieldValues_add(t_LiveFieldValues *self, PyObject *args);
        static PyObject *t_LiveFieldValues_afterRefresh(t_LiveFieldValues *self, PyObject *arg);
        static PyObject *t_LiveFieldValues_beforeRefresh(t_LiveFieldValues *self);
        static PyObject *t_LiveFieldValues_close(t_LiveFieldValues *self);
        static PyObject *t_LiveFieldValues_delete(t_LiveFieldValues *self, PyObject *arg);
        static PyObject *t_LiveFieldValues_get(t_LiveFieldValues *self, PyObject *arg);
        static PyObject *t_LiveFieldValues_size(t_LiveFieldValues *self);
        static PyObject *t_LiveFieldValues_get__parameters_(t_LiveFieldValues *self, void *data);
        static PyGetSetDef t_LiveFieldValues__fields_[] = {
          DECLARE_GET_FIELD(t_LiveFieldValues, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LiveFieldValues__methods_[] = {
          DECLARE_METHOD(t_LiveFieldValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveFieldValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveFieldValues, of_, METH_VARARGS),
          DECLARE_METHOD(t_LiveFieldValues, add, METH_VARARGS),
          DECLARE_METHOD(t_LiveFieldValues, afterRefresh, METH_O),
          DECLARE_METHOD(t_LiveFieldValues, beforeRefresh, METH_NOARGS),
          DECLARE_METHOD(t_LiveFieldValues, close, METH_NOARGS),
          DECLARE_METHOD(t_LiveFieldValues, delete, METH_O),
          DECLARE_METHOD(t_LiveFieldValues, get, METH_O),
          DECLARE_METHOD(t_LiveFieldValues, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LiveFieldValues)[] = {
          { Py_tp_methods, t_LiveFieldValues__methods_ },
          { Py_tp_init, (void *) t_LiveFieldValues_init_ },
          { Py_tp_getset, t_LiveFieldValues__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LiveFieldValues)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LiveFieldValues, t_LiveFieldValues, LiveFieldValues);
        PyObject *t_LiveFieldValues::wrap_Object(const LiveFieldValues& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_LiveFieldValues::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_LiveFieldValues *self = (t_LiveFieldValues *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_LiveFieldValues::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_LiveFieldValues::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_LiveFieldValues *self = (t_LiveFieldValues *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_LiveFieldValues::install(PyObject *module)
        {
          installType(&PY_TYPE(LiveFieldValues), &PY_TYPE_DEF(LiveFieldValues), module, "LiveFieldValues", 0);
        }

        void t_LiveFieldValues::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LiveFieldValues), "class_", make_descriptor(LiveFieldValues::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LiveFieldValues), "wrapfn_", make_descriptor(t_LiveFieldValues::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LiveFieldValues), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LiveFieldValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LiveFieldValues::initializeClass, 1)))
            return NULL;
          return t_LiveFieldValues::wrap_Object(LiveFieldValues(((t_LiveFieldValues *) arg)->object.this$));
        }
        static PyObject *t_LiveFieldValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LiveFieldValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LiveFieldValues_of_(t_LiveFieldValues *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_LiveFieldValues_init_(t_LiveFieldValues *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::ReferenceManager a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object a1((jobject) NULL);
          LiveFieldValues object((jobject) NULL);

          if (!parseArgs(args, "Ko", ::org::apache::lucene::search::ReferenceManager::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_ReferenceManager::parameters_, &a1))
          {
            INT_CALL(object = LiveFieldValues(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LiveFieldValues_add(t_LiveFieldValues *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);

          if (!parseArgs(args, "sO", self->parameters[1], &a0, &a1))
          {
            OBJ_CALL(self->object.add(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_LiveFieldValues_afterRefresh(t_LiveFieldValues *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.afterRefresh(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "afterRefresh", arg);
          return NULL;
        }

        static PyObject *t_LiveFieldValues_beforeRefresh(t_LiveFieldValues *self)
        {
          OBJ_CALL(self->object.beforeRefresh());
          Py_RETURN_NONE;
        }

        static PyObject *t_LiveFieldValues_close(t_LiveFieldValues *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_LiveFieldValues_delete(t_LiveFieldValues *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.delete$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "delete", arg);
          return NULL;
        }

        static PyObject *t_LiveFieldValues_get(t_LiveFieldValues *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_LiveFieldValues_size(t_LiveFieldValues *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLong((long) result);
        }
        static PyObject *t_LiveFieldValues_get__parameters_(t_LiveFieldValues *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoBaseAreaShape.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/GeoAreaShape.h"
#include "org/apache/lucene/spatial3d/geom/GeoShape.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoBaseAreaShape::class$ = NULL;
          jmethodID *GeoBaseAreaShape::mids$ = NULL;
          bool GeoBaseAreaShape::live$ = false;

          jclass GeoBaseAreaShape::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoBaseAreaShape");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fd580b4e02411290] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;)V");
              mids$[mid_getRelationship_2e0040c09ede6a59] = env->getMethodID(cls, "getRelationship", "(Lorg/apache/lucene/spatial3d/geom/GeoShape;)I");
              mids$[mid_isShapeInsideGeoAreaShape_2e0040c09ede6a59] = env->getMethodID(cls, "isShapeInsideGeoAreaShape", "(Lorg/apache/lucene/spatial3d/geom/GeoShape;)I");
              mids$[mid_isGeoAreaShapeInsideShape_2e0040c09ede6a59] = env->getMethodID(cls, "isGeoAreaShapeInsideShape", "(Lorg/apache/lucene/spatial3d/geom/GeoShape;)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GeoBaseAreaShape::GeoBaseAreaShape(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0) : ::org::apache::lucene::spatial3d::geom::GeoBaseMembershipShape(env->newObject(initializeClass, &mids$, mid_init$_fd580b4e02411290, a0.this$)) {}

          jint GeoBaseAreaShape::getRelationship(const ::org::apache::lucene::spatial3d::geom::GeoShape & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_getRelationship_2e0040c09ede6a59], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoBaseAreaShape_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoBaseAreaShape_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GeoBaseAreaShape_init_(t_GeoBaseAreaShape *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GeoBaseAreaShape_getRelationship(t_GeoBaseAreaShape *self, PyObject *arg);

          static PyMethodDef t_GeoBaseAreaShape__methods_[] = {
            DECLARE_METHOD(t_GeoBaseAreaShape, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoBaseAreaShape, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoBaseAreaShape, getRelationship, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoBaseAreaShape)[] = {
            { Py_tp_methods, t_GeoBaseAreaShape__methods_ },
            { Py_tp_init, (void *) t_GeoBaseAreaShape_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoBaseAreaShape)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::GeoBaseMembershipShape),
            NULL
          };

          DEFINE_TYPE(GeoBaseAreaShape, t_GeoBaseAreaShape, GeoBaseAreaShape);

          void t_GeoBaseAreaShape::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoBaseAreaShape), &PY_TYPE_DEF(GeoBaseAreaShape), module, "GeoBaseAreaShape", 0);
          }

          void t_GeoBaseAreaShape::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseAreaShape), "class_", make_descriptor(GeoBaseAreaShape::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseAreaShape), "wrapfn_", make_descriptor(t_GeoBaseAreaShape::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseAreaShape), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoBaseAreaShape_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoBaseAreaShape::initializeClass, 1)))
              return NULL;
            return t_GeoBaseAreaShape::wrap_Object(GeoBaseAreaShape(((t_GeoBaseAreaShape *) arg)->object.this$));
          }
          static PyObject *t_GeoBaseAreaShape_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoBaseAreaShape::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GeoBaseAreaShape_init_(t_GeoBaseAreaShape *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            GeoBaseAreaShape object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0))
            {
              INT_CALL(object = GeoBaseAreaShape(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GeoBaseAreaShape_getRelationship(t_GeoBaseAreaShape *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::GeoShape a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::GeoShape::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getRelationship(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getRelationship", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonComparable.h"
#include "java/lang/Throwable.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonComparable::class$ = NULL;
        jmethodID *PythonComparable::mids$ = NULL;
        bool PythonComparable::live$ = false;

        jclass PythonComparable::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonComparable");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_compareTo_5a4805a36cf611e7] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Object;)I");
            mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonComparable::PythonComparable() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void PythonComparable::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
        }

        jlong PythonComparable::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
        }

        void PythonComparable::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonComparable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonComparable_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonComparable_init_(t_PythonComparable *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonComparable_finalize(t_PythonComparable *self);
        static PyObject *t_PythonComparable_pythonExtension(t_PythonComparable *self, PyObject *args);
        static jint JNICALL t_PythonComparable_compareTo0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonComparable_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonComparable_get__self(t_PythonComparable *self, void *data);
        static PyGetSetDef t_PythonComparable__fields_[] = {
          DECLARE_GET_FIELD(t_PythonComparable, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonComparable__methods_[] = {
          DECLARE_METHOD(t_PythonComparable, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonComparable, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonComparable, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonComparable, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PythonComparable)[] = {
          { Py_tp_methods, t_PythonComparable__methods_ },
          { Py_tp_init, (void *) t_PythonComparable_init_ },
          { Py_tp_getset, t_PythonComparable__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PythonComparable)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PythonComparable, t_PythonComparable, PythonComparable);

        void t_PythonComparable::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonComparable), &PY_TYPE_DEF(PythonComparable), module, "PythonComparable", 1);
        }

        void t_PythonComparable::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonComparable), "class_", make_descriptor(PythonComparable::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonComparable), "wrapfn_", make_descriptor(t_PythonComparable::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonComparable), "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonComparable::initializeClass);
          JNINativeMethod methods[] = {
            { "compareTo", "(Ljava/lang/Object;)I", (void *) t_PythonComparable_compareTo0 },
            { "pythonDecRef", "()V", (void *) t_PythonComparable_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonComparable_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonComparable::initializeClass, 1)))
            return NULL;
          return t_PythonComparable::wrap_Object(PythonComparable(((t_PythonComparable *) arg)->object.this$));
        }
        static PyObject *t_PythonComparable_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonComparable::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonComparable_init_(t_PythonComparable *self, PyObject *args, PyObject *kwds)
        {
          PythonComparable object((jobject) NULL);

          INT_CALL(object = PythonComparable());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonComparable_finalize(t_PythonComparable *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonComparable_pythonExtension(t_PythonComparable *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jint JNICALL t_PythonComparable_compareTo0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonComparable::mids$[PythonComparable::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "compareTo", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("compareTo", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonComparable_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonComparable::mids$[PythonComparable::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonComparable::mids$[PythonComparable::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonComparable_get__self(t_PythonComparable *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/CompoundFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/PointsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/ClassLoader.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *Codec::class$ = NULL;
        jmethodID *Codec::mids$ = NULL;
        bool Codec::live$ = false;

        jclass Codec::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/Codec");

            mids$ = new jmethodID[max_mid];
            mids$[mid_availableCodecs_7dcf4034c6d1a92a] = env->getStaticMethodID(cls, "availableCodecs", "()Ljava/util/Set;");
            mids$[mid_compoundFormat_1641e3035b5e7063] = env->getMethodID(cls, "compoundFormat", "()Lorg/apache/lucene/codecs/CompoundFormat;");
            mids$[mid_docValuesFormat_a9c08d7c2b76eed3] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
            mids$[mid_fieldInfosFormat_48c0c59677397219] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
            mids$[mid_forName_83c6f80543ee756e] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getDefault_a302ebac25c26553] = env->getStaticMethodID(cls, "getDefault", "()Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getName_db9b55ba01e03e4b] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_liveDocsFormat_3c23f7d462a4a754] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
            mids$[mid_normsFormat_913a021834acbf93] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
            mids$[mid_pointsFormat_b24443532b28970b] = env->getMethodID(cls, "pointsFormat", "()Lorg/apache/lucene/codecs/PointsFormat;");
            mids$[mid_postingsFormat_1a5e16ceada7aa64] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
            mids$[mid_reloadCodecs_98a876e82795b112] = env->getStaticMethodID(cls, "reloadCodecs", "(Ljava/lang/ClassLoader;)V");
            mids$[mid_segmentInfoFormat_579fd0b88c210118] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
            mids$[mid_setDefault_945acc7dbd39be07] = env->getStaticMethodID(cls, "setDefault", "(Lorg/apache/lucene/codecs/Codec;)V");
            mids$[mid_storedFieldsFormat_a6cbef21a6c483b7] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
            mids$[mid_termVectorsFormat_ae08b71ce8366567] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Set Codec::availableCodecs()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableCodecs_7dcf4034c6d1a92a]));
        }

        ::org::apache::lucene::codecs::CompoundFormat Codec::compoundFormat() const
        {
          return ::org::apache::lucene::codecs::CompoundFormat(env->callObjectMethod(this$, mids$[mid_compoundFormat_1641e3035b5e7063]));
        }

        ::org::apache::lucene::codecs::DocValuesFormat Codec::docValuesFormat() const
        {
          return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_a9c08d7c2b76eed3]));
        }

        ::org::apache::lucene::codecs::FieldInfosFormat Codec::fieldInfosFormat() const
        {
          return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_48c0c59677397219]));
        }

        Codec Codec::forName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Codec(env->callStaticObjectMethod(cls, mids$[mid_forName_83c6f80543ee756e], a0.this$));
        }

        Codec Codec::getDefault()
        {
          jclass cls = env->getClass(initializeClass);
          return Codec(env->callStaticObjectMethod(cls, mids$[mid_getDefault_a302ebac25c26553]));
        }

        ::java::lang::String Codec::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_db9b55ba01e03e4b]));
        }

        ::org::apache::lucene::codecs::LiveDocsFormat Codec::liveDocsFormat() const
        {
          return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_3c23f7d462a4a754]));
        }

        ::org::apache::lucene::codecs::NormsFormat Codec::normsFormat() const
        {
          return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_913a021834acbf93]));
        }

        ::org::apache::lucene::codecs::PointsFormat Codec::pointsFormat() const
        {
          return ::org::apache::lucene::codecs::PointsFormat(env->callObjectMethod(this$, mids$[mid_pointsFormat_b24443532b28970b]));
        }

        ::org::apache::lucene::codecs::PostingsFormat Codec::postingsFormat() const
        {
          return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_1a5e16ceada7aa64]));
        }

        void Codec::reloadCodecs(const ::java::lang::ClassLoader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reloadCodecs_98a876e82795b112], a0.this$);
        }

        ::org::apache::lucene::codecs::SegmentInfoFormat Codec::segmentInfoFormat() const
        {
          return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_579fd0b88c210118]));
        }

        void Codec::setDefault(const Codec & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setDefault_945acc7dbd39be07], a0.this$);
        }

        ::org::apache::lucene::codecs::StoredFieldsFormat Codec::storedFieldsFormat() const
        {
          return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_a6cbef21a6c483b7]));
        }

        ::org::apache::lucene::codecs::TermVectorsFormat Codec::termVectorsFormat() const
        {
          return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_ae08b71ce8366567]));
        }

        ::java::lang::String Codec::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_Codec_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_availableCodecs(PyTypeObject *type);
        static PyObject *t_Codec_compoundFormat(t_Codec *self);
        static PyObject *t_Codec_docValuesFormat(t_Codec *self);
        static PyObject *t_Codec_fieldInfosFormat(t_Codec *self);
        static PyObject *t_Codec_forName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_getDefault(PyTypeObject *type);
        static PyObject *t_Codec_getName(t_Codec *self);
        static PyObject *t_Codec_liveDocsFormat(t_Codec *self);
        static PyObject *t_Codec_normsFormat(t_Codec *self);
        static PyObject *t_Codec_pointsFormat(t_Codec *self);
        static PyObject *t_Codec_postingsFormat(t_Codec *self);
        static PyObject *t_Codec_reloadCodecs(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_segmentInfoFormat(t_Codec *self);
        static PyObject *t_Codec_setDefault(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_storedFieldsFormat(t_Codec *self);
        static PyObject *t_Codec_termVectorsFormat(t_Codec *self);
        static PyObject *t_Codec_toString(t_Codec *self, PyObject *args);
        static PyObject *t_Codec_get__default(t_Codec *self, void *data);
        static int t_Codec_set__default(t_Codec *self, PyObject *arg, void *data);
        static PyObject *t_Codec_get__name(t_Codec *self, void *data);
        static PyGetSetDef t_Codec__fields_[] = {
          DECLARE_GETSET_FIELD(t_Codec, default),
          DECLARE_GET_FIELD(t_Codec, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Codec__methods_[] = {
          DECLARE_METHOD(t_Codec, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, availableCodecs, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_Codec, compoundFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, docValuesFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, fieldInfosFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, forName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, getDefault, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_Codec, getName, METH_NOARGS),
          DECLARE_METHOD(t_Codec, liveDocsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, normsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, pointsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, postingsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, reloadCodecs, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, segmentInfoFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, setDefault, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, storedFieldsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, termVectorsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Codec)[] = {
          { Py_tp_methods, t_Codec__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_Codec__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Codec)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Codec, t_Codec, Codec);

        void t_Codec::install(PyObject *module)
        {
          installType(&PY_TYPE(Codec), &PY_TYPE_DEF(Codec), module, "Codec", 0);
        }

        void t_Codec::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Codec), "class_", make_descriptor(Codec::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Codec), "wrapfn_", make_descriptor(t_Codec::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Codec), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Codec_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Codec::initializeClass, 1)))
            return NULL;
          return t_Codec::wrap_Object(Codec(((t_Codec *) arg)->object.this$));
        }
        static PyObject *t_Codec_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Codec::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Codec_availableCodecs(PyTypeObject *type)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::codecs::Codec::availableCodecs());
          return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_Codec_compoundFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::CompoundFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.compoundFormat());
          return ::org::apache::lucene::codecs::t_CompoundFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_docValuesFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.docValuesFormat());
          return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_fieldInfosFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.fieldInfosFormat());
          return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_forName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          Codec result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::Codec::forName(a0));
            return t_Codec::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "forName", arg);
          return NULL;
        }

        static PyObject *t_Codec_getDefault(PyTypeObject *type)
        {
          Codec result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::codecs::Codec::getDefault());
          return t_Codec::wrap_Object(result);
        }

        static PyObject *t_Codec_getName(t_Codec *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_Codec_liveDocsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.liveDocsFormat());
          return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_normsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.normsFormat());
          return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_pointsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::PointsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.pointsFormat());
          return ::org::apache::lucene::codecs::t_PointsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_postingsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.postingsFormat());
          return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_reloadCodecs(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::Codec::reloadCodecs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reloadCodecs", arg);
          return NULL;
        }

        static PyObject *t_Codec_segmentInfoFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.segmentInfoFormat());
          return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_setDefault(PyTypeObject *type, PyObject *arg)
        {
          Codec a0((jobject) NULL);

          if (!parseArg(arg, "k", Codec::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::Codec::setDefault(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setDefault", arg);
          return NULL;
        }

        static PyObject *t_Codec_storedFieldsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.storedFieldsFormat());
          return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_termVectorsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.termVectorsFormat());
          return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_toString(t_Codec *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(Codec), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Codec_get__default(t_Codec *self, void *data)
        {
          Codec value((jobject) NULL);
          OBJ_CALL(value = self->object.getDefault());
          return t_Codec::wrap_Object(value);
        }
        static int t_Codec_set__default(t_Codec *self, PyObject *arg, void *data)
        {
          {
            Codec value((jobject) NULL);
            if (!parseArg(arg, "k", Codec::initializeClass, &value))
            {
              INT_CALL(self->object.setDefault(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "default", arg);
          return -1;
        }

        static PyObject *t_Codec_get__name(t_Codec *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicNormalizationFilter::class$ = NULL;
          jmethodID *ArabicNormalizationFilter::mids$ = NULL;
          bool ArabicNormalizationFilter::live$ = false;

          jclass ArabicNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicNormalizationFilter::ArabicNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean ArabicNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicNormalizationFilter_init_(t_ArabicNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicNormalizationFilter_incrementToken(t_ArabicNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_ArabicNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_ArabicNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ArabicNormalizationFilter)[] = {
            { Py_tp_methods, t_ArabicNormalizationFilter__methods_ },
            { Py_tp_init, (void *) t_ArabicNormalizationFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ArabicNormalizationFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(ArabicNormalizationFilter, t_ArabicNormalizationFilter, ArabicNormalizationFilter);

          void t_ArabicNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicNormalizationFilter), &PY_TYPE_DEF(ArabicNormalizationFilter), module, "ArabicNormalizationFilter", 0);
          }

          void t_ArabicNormalizationFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizationFilter), "class_", make_descriptor(ArabicNormalizationFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizationFilter), "wrapfn_", make_descriptor(t_ArabicNormalizationFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicNormalizationFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_ArabicNormalizationFilter::wrap_Object(ArabicNormalizationFilter(((t_ArabicNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_ArabicNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicNormalizationFilter_init_(t_ArabicNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ArabicNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ArabicNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicNormalizationFilter_incrementToken(t_ArabicNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(ArabicNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *OpenRangeQueryNodeProcessor::class$ = NULL;
              jmethodID *OpenRangeQueryNodeProcessor::mids$ = NULL;
              bool OpenRangeQueryNodeProcessor::live$ = false;
              ::java::lang::String *OpenRangeQueryNodeProcessor::OPEN_RANGE_TOKEN = NULL;

              jclass OpenRangeQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_e420eeaadf0bcd20] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = new ::java::lang::Class(cls);
                  cls = (jclass) class$->this$;

                  OPEN_RANGE_TOKEN = new ::java::lang::String(env->getStaticObjectField(cls, "OPEN_RANGE_TOKEN", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              OpenRangeQueryNodeProcessor::OpenRangeQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_OpenRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_OpenRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_OpenRangeQueryNodeProcessor_init_(t_OpenRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_OpenRangeQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_OpenRangeQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OpenRangeQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(OpenRangeQueryNodeProcessor)[] = {
                { Py_tp_methods, t_OpenRangeQueryNodeProcessor__methods_ },
                { Py_tp_init, (void *) t_OpenRangeQueryNodeProcessor_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(OpenRangeQueryNodeProcessor)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl),
                NULL
              };

              DEFINE_TYPE(OpenRangeQueryNodeProcessor, t_OpenRangeQueryNodeProcessor, OpenRangeQueryNodeProcessor);

              void t_OpenRangeQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(OpenRangeQueryNodeProcessor), &PY_TYPE_DEF(OpenRangeQueryNodeProcessor), module, "OpenRangeQueryNodeProcessor", 0);
              }

              void t_OpenRangeQueryNodeProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(OpenRangeQueryNodeProcessor), "class_", make_descriptor(OpenRangeQueryNodeProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(OpenRangeQueryNodeProcessor), "wrapfn_", make_descriptor(t_OpenRangeQueryNodeProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(OpenRangeQueryNodeProcessor), "boxfn_", make_descriptor(boxObject));
                env->getClass(OpenRangeQueryNodeProcessor::initializeClass);
                PyObject_SetAttrString((PyObject *) PY_TYPE(OpenRangeQueryNodeProcessor), "OPEN_RANGE_TOKEN", make_descriptor(j2p(*OpenRangeQueryNodeProcessor::OPEN_RANGE_TOKEN)));
              }

              static PyObject *t_OpenRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, OpenRangeQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_OpenRangeQueryNodeProcessor::wrap_Object(OpenRangeQueryNodeProcessor(((t_OpenRangeQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_OpenRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, OpenRangeQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_OpenRangeQueryNodeProcessor_init_(t_OpenRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                OpenRangeQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = OpenRangeQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLightStemFilter::class$ = NULL;
          jmethodID *RussianLightStemFilter::mids$ = NULL;
          bool RussianLightStemFilter::live$ = false;

          jclass RussianLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLightStemFilter::RussianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean RussianLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLightStemFilter_init_(t_RussianLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianLightStemFilter_incrementToken(t_RussianLightStemFilter *self, PyObject *args);

          static PyMethodDef t_RussianLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_RussianLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(RussianLightStemFilter)[] = {
            { Py_tp_methods, t_RussianLightStemFilter__methods_ },
            { Py_tp_init, (void *) t_RussianLightStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(RussianLightStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(RussianLightStemFilter, t_RussianLightStemFilter, RussianLightStemFilter);

          void t_RussianLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLightStemFilter), &PY_TYPE_DEF(RussianLightStemFilter), module, "RussianLightStemFilter", 0);
          }

          void t_RussianLightStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(RussianLightStemFilter), "class_", make_descriptor(RussianLightStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RussianLightStemFilter), "wrapfn_", make_descriptor(t_RussianLightStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RussianLightStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_RussianLightStemFilter::wrap_Object(RussianLightStemFilter(((t_RussianLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_RussianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLightStemFilter_init_(t_RussianLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            RussianLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = RussianLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RussianLightStemFilter_incrementToken(t_RussianLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(RussianLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/RollingCharBuffer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *RollingCharBuffer::class$ = NULL;
          jmethodID *RollingCharBuffer::mids$ = NULL;
          bool RollingCharBuffer::live$ = false;

          jclass RollingCharBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/RollingCharBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_freeBefore_040c4cd0390c5aff] = env->getMethodID(cls, "freeBefore", "(I)V");
              mids$[mid_get_1e143afe1894d213] = env->getMethodID(cls, "get", "(I)I");
              mids$[mid_get_a06225f5be59d337] = env->getMethodID(cls, "get", "(II)[C");
              mids$[mid_reset_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "reset", "(Ljava/io/Reader;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RollingCharBuffer::RollingCharBuffer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void RollingCharBuffer::freeBefore(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_freeBefore_040c4cd0390c5aff], a0);
          }

          jint RollingCharBuffer::get(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_get_1e143afe1894d213], a0);
          }

          JArray< jchar > RollingCharBuffer::get(jint a0, jint a1) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_get_a06225f5be59d337], a0, a1));
          }

          void RollingCharBuffer::reset(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reset_b2f3c57f5e6eb3f2], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_RollingCharBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RollingCharBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RollingCharBuffer_init_(t_RollingCharBuffer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RollingCharBuffer_freeBefore(t_RollingCharBuffer *self, PyObject *arg);
          static PyObject *t_RollingCharBuffer_get(t_RollingCharBuffer *self, PyObject *args);
          static PyObject *t_RollingCharBuffer_reset(t_RollingCharBuffer *self, PyObject *arg);

          static PyMethodDef t_RollingCharBuffer__methods_[] = {
            DECLARE_METHOD(t_RollingCharBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RollingCharBuffer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RollingCharBuffer, freeBefore, METH_O),
            DECLARE_METHOD(t_RollingCharBuffer, get, METH_VARARGS),
            DECLARE_METHOD(t_RollingCharBuffer, reset, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(RollingCharBuffer)[] = {
            { Py_tp_methods, t_RollingCharBuffer__methods_ },
            { Py_tp_init, (void *) t_RollingCharBuffer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(RollingCharBuffer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(RollingCharBuffer, t_RollingCharBuffer, RollingCharBuffer);

          void t_RollingCharBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(RollingCharBuffer), &PY_TYPE_DEF(RollingCharBuffer), module, "RollingCharBuffer", 0);
          }

          void t_RollingCharBuffer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(RollingCharBuffer), "class_", make_descriptor(RollingCharBuffer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RollingCharBuffer), "wrapfn_", make_descriptor(t_RollingCharBuffer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RollingCharBuffer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RollingCharBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RollingCharBuffer::initializeClass, 1)))
              return NULL;
            return t_RollingCharBuffer::wrap_Object(RollingCharBuffer(((t_RollingCharBuffer *) arg)->object.this$));
          }
          static PyObject *t_RollingCharBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RollingCharBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RollingCharBuffer_init_(t_RollingCharBuffer *self, PyObject *args, PyObject *kwds)
          {
            RollingCharBuffer object((jobject) NULL);

            INT_CALL(object = RollingCharBuffer());
            self->object = object;

            return 0;
          }

          static PyObject *t_RollingCharBuffer_freeBefore(t_RollingCharBuffer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.freeBefore(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "freeBefore", arg);
            return NULL;
          }

          static PyObject *t_RollingCharBuffer_get(t_RollingCharBuffer *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jint result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return PyLong_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                jint a1;
                JArray< jchar > result((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.get(a0, a1));
                  return result.wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }

          static PyObject *t_RollingCharBuffer_reset(t_RollingCharBuffer *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "reset", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/RomanianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *RomanianStemmer::class$ = NULL;
        jmethodID *RomanianStemmer::mids$ = NULL;
        bool RomanianStemmer::live$ = false;

        jclass RomanianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/RomanianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RomanianStemmer::RomanianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean RomanianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint RomanianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean RomanianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_RomanianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RomanianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RomanianStemmer_init_(t_RomanianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RomanianStemmer_equals(t_RomanianStemmer *self, PyObject *args);
        static PyObject *t_RomanianStemmer_hashCode(t_RomanianStemmer *self, PyObject *args);
        static PyObject *t_RomanianStemmer_stem(t_RomanianStemmer *self, PyObject *args);

        static PyMethodDef t_RomanianStemmer__methods_[] = {
          DECLARE_METHOD(t_RomanianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RomanianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RomanianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_RomanianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_RomanianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RomanianStemmer)[] = {
          { Py_tp_methods, t_RomanianStemmer__methods_ },
          { Py_tp_init, (void *) t_RomanianStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RomanianStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(RomanianStemmer, t_RomanianStemmer, RomanianStemmer);

        void t_RomanianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(RomanianStemmer), &PY_TYPE_DEF(RomanianStemmer), module, "RomanianStemmer", 0);
        }

        void t_RomanianStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RomanianStemmer), "class_", make_descriptor(RomanianStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RomanianStemmer), "wrapfn_", make_descriptor(t_RomanianStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RomanianStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RomanianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RomanianStemmer::initializeClass, 1)))
            return NULL;
          return t_RomanianStemmer::wrap_Object(RomanianStemmer(((t_RomanianStemmer *) arg)->object.this$));
        }
        static PyObject *t_RomanianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RomanianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RomanianStemmer_init_(t_RomanianStemmer *self, PyObject *args, PyObject *kwds)
        {
          RomanianStemmer object((jobject) NULL);

          INT_CALL(object = RomanianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_RomanianStemmer_equals(t_RomanianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(RomanianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_RomanianStemmer_hashCode(t_RomanianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(RomanianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_RomanianStemmer_stem(t_RomanianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(RomanianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/FuzzyQueryNodeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/search/FuzzyQuery.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *FuzzyQueryNodeBuilder::class$ = NULL;
              jmethodID *FuzzyQueryNodeBuilder::mids$ = NULL;
              bool FuzzyQueryNodeBuilder::live$ = false;

              jclass FuzzyQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/FuzzyQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_ac9d0204ceba3a7a] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/FuzzyQuery;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FuzzyQueryNodeBuilder::FuzzyQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::search::FuzzyQuery FuzzyQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::FuzzyQuery(env->callObjectMethod(this$, mids$[mid_build_ac9d0204ceba3a7a], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_FuzzyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FuzzyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FuzzyQueryNodeBuilder_init_(t_FuzzyQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FuzzyQueryNodeBuilder_build(t_FuzzyQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_FuzzyQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_FuzzyQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(FuzzyQueryNodeBuilder)[] = {
                { Py_tp_methods, t_FuzzyQueryNodeBuilder__methods_ },
                { Py_tp_init, (void *) t_FuzzyQueryNodeBuilder_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(FuzzyQueryNodeBuilder)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(FuzzyQueryNodeBuilder, t_FuzzyQueryNodeBuilder, FuzzyQueryNodeBuilder);

              void t_FuzzyQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(FuzzyQueryNodeBuilder), &PY_TYPE_DEF(FuzzyQueryNodeBuilder), module, "FuzzyQueryNodeBuilder", 0);
              }

              void t_FuzzyQueryNodeBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyQueryNodeBuilder), "class_", make_descriptor(FuzzyQueryNodeBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyQueryNodeBuilder), "wrapfn_", make_descriptor(t_FuzzyQueryNodeBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyQueryNodeBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FuzzyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FuzzyQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_FuzzyQueryNodeBuilder::wrap_Object(FuzzyQueryNodeBuilder(((t_FuzzyQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_FuzzyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FuzzyQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FuzzyQueryNodeBuilder_init_(t_FuzzyQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                FuzzyQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = FuzzyQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_FuzzyQueryNodeBuilder_build(t_FuzzyQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::FuzzyQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_FuzzyQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexReader$CacheHelper.h"
#include "org/apache/lucene/index/IndexReader$CacheKey.h"
#include "org/apache/lucene/index/IndexReader$ClosedListener.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexReader$CacheHelper::class$ = NULL;
        jmethodID *IndexReader$CacheHelper::mids$ = NULL;
        bool IndexReader$CacheHelper::live$ = false;

        jclass IndexReader$CacheHelper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexReader$CacheHelper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addClosedListener_8501aee196309a7f] = env->getMethodID(cls, "addClosedListener", "(Lorg/apache/lucene/index/IndexReader$ClosedListener;)V");
            mids$[mid_getKey_07ab55c6dfa127c2] = env->getMethodID(cls, "getKey", "()Lorg/apache/lucene/index/IndexReader$CacheKey;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexReader$CacheHelper::addClosedListener(const ::org::apache::lucene::index::IndexReader$ClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addClosedListener_8501aee196309a7f], a0.this$);
        }

        ::org::apache::lucene::index::IndexReader$CacheKey IndexReader$CacheHelper::getKey() const
        {
          return ::org::apache::lucene::index::IndexReader$CacheKey(env->callObjectMethod(this$, mids$[mid_getKey_07ab55c6dfa127c2]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexReader$CacheHelper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader$CacheHelper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader$CacheHelper_addClosedListener(t_IndexReader$CacheHelper *self, PyObject *arg);
        static PyObject *t_IndexReader$CacheHelper_getKey(t_IndexReader$CacheHelper *self);
        static PyObject *t_IndexReader$CacheHelper_get__key(t_IndexReader$CacheHelper *self, void *data);
        static PyGetSetDef t_IndexReader$CacheHelper__fields_[] = {
          DECLARE_GET_FIELD(t_IndexReader$CacheHelper, key),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexReader$CacheHelper__methods_[] = {
          DECLARE_METHOD(t_IndexReader$CacheHelper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader$CacheHelper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader$CacheHelper, addClosedListener, METH_O),
          DECLARE_METHOD(t_IndexReader$CacheHelper, getKey, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexReader$CacheHelper)[] = {
          { Py_tp_methods, t_IndexReader$CacheHelper__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_IndexReader$CacheHelper__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexReader$CacheHelper)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexReader$CacheHelper, t_IndexReader$CacheHelper, IndexReader$CacheHelper);

        void t_IndexReader$CacheHelper::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexReader$CacheHelper), &PY_TYPE_DEF(IndexReader$CacheHelper), module, "IndexReader$CacheHelper", 0);
        }

        void t_IndexReader$CacheHelper::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexReader$CacheHelper), "class_", make_descriptor(IndexReader$CacheHelper::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexReader$CacheHelper), "wrapfn_", make_descriptor(t_IndexReader$CacheHelper::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexReader$CacheHelper), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexReader$CacheHelper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexReader$CacheHelper::initializeClass, 1)))
            return NULL;
          return t_IndexReader$CacheHelper::wrap_Object(IndexReader$CacheHelper(((t_IndexReader$CacheHelper *) arg)->object.this$));
        }
        static PyObject *t_IndexReader$CacheHelper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexReader$CacheHelper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexReader$CacheHelper_addClosedListener(t_IndexReader$CacheHelper *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader$ClosedListener a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader$ClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addClosedListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addClosedListener", arg);
          return NULL;
        }

        static PyObject *t_IndexReader$CacheHelper_getKey(t_IndexReader$CacheHelper *self)
        {
          ::org::apache::lucene::index::IndexReader$CacheKey result((jobject) NULL);
          OBJ_CALL(result = self->object.getKey());
          return ::org::apache::lucene::index::t_IndexReader$CacheKey::wrap_Object(result);
        }

        static PyObject *t_IndexReader$CacheHelper_get__key(t_IndexReader$CacheHelper *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader$CacheKey value((jobject) NULL);
          OBJ_CALL(value = self->object.getKey());
          return ::org::apache::lucene::index::t_IndexReader$CacheKey::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/GroupSelector$State.h"
#include "org/apache/lucene/search/grouping/GroupSelector$State.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *GroupSelector$State::class$ = NULL;
          jmethodID *GroupSelector$State::mids$ = NULL;
          bool GroupSelector$State::live$ = false;
          GroupSelector$State *GroupSelector$State::ACCEPT = NULL;
          GroupSelector$State *GroupSelector$State::SKIP = NULL;

          jclass GroupSelector$State::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/GroupSelector$State");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_cf8839c13fb24fd6] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/grouping/GroupSelector$State;");
              mids$[mid_values_d6364c6b73db0bf6] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/grouping/GroupSelector$State;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              ACCEPT = new GroupSelector$State(env->getStaticObjectField(cls, "ACCEPT", "Lorg/apache/lucene/search/grouping/GroupSelector$State;"));
              SKIP = new GroupSelector$State(env->getStaticObjectField(cls, "SKIP", "Lorg/apache/lucene/search/grouping/GroupSelector$State;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GroupSelector$State GroupSelector$State::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return GroupSelector$State(env->callStaticObjectMethod(cls, mids$[mid_valueOf_cf8839c13fb24fd6], a0.this$));
          }

          JArray< GroupSelector$State > GroupSelector$State::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< GroupSelector$State >(env->callStaticObjectMethod(cls, mids$[mid_values_d6364c6b73db0bf6]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_GroupSelector$State_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupSelector$State_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupSelector$State_of_(t_GroupSelector$State *self, PyObject *args);
          static PyObject *t_GroupSelector$State_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_GroupSelector$State_values(PyTypeObject *type);
          static PyObject *t_GroupSelector$State_get__parameters_(t_GroupSelector$State *self, void *data);
          static PyGetSetDef t_GroupSelector$State__fields_[] = {
            DECLARE_GET_FIELD(t_GroupSelector$State, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GroupSelector$State__methods_[] = {
            DECLARE_METHOD(t_GroupSelector$State, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupSelector$State, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupSelector$State, of_, METH_VARARGS),
            DECLARE_METHOD(t_GroupSelector$State, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_GroupSelector$State, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GroupSelector$State)[] = {
            { Py_tp_methods, t_GroupSelector$State__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_GroupSelector$State__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GroupSelector$State)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(GroupSelector$State, t_GroupSelector$State, GroupSelector$State);
          PyObject *t_GroupSelector$State::wrap_Object(const GroupSelector$State& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GroupSelector$State::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GroupSelector$State *self = (t_GroupSelector$State *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_GroupSelector$State::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GroupSelector$State::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GroupSelector$State *self = (t_GroupSelector$State *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_GroupSelector$State::install(PyObject *module)
          {
            installType(&PY_TYPE(GroupSelector$State), &PY_TYPE_DEF(GroupSelector$State), module, "GroupSelector$State", 0);
          }

          void t_GroupSelector$State::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupSelector$State), "class_", make_descriptor(GroupSelector$State::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupSelector$State), "wrapfn_", make_descriptor(t_GroupSelector$State::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupSelector$State), "boxfn_", make_descriptor(boxObject));
            env->getClass(GroupSelector$State::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupSelector$State), "ACCEPT", make_descriptor(t_GroupSelector$State::wrap_Object(*GroupSelector$State::ACCEPT)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupSelector$State), "SKIP", make_descriptor(t_GroupSelector$State::wrap_Object(*GroupSelector$State::SKIP)));
          }

          static PyObject *t_GroupSelector$State_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GroupSelector$State::initializeClass, 1)))
              return NULL;
            return t_GroupSelector$State::wrap_Object(GroupSelector$State(((t_GroupSelector$State *) arg)->object.this$));
          }
          static PyObject *t_GroupSelector$State_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GroupSelector$State::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GroupSelector$State_of_(t_GroupSelector$State *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_GroupSelector$State_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            GroupSelector$State result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::grouping::GroupSelector$State::valueOf(a0));
              return t_GroupSelector$State::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_GroupSelector$State_values(PyTypeObject *type)
          {
            JArray< GroupSelector$State > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::grouping::GroupSelector$State::values());
            return JArray<jobject>(result.this$).wrap(t_GroupSelector$State::wrap_jobject);
          }
          static PyObject *t_GroupSelector$State_get__parameters_(t_GroupSelector$State *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktree/Stats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          ::java::lang::Class *Stats::class$ = NULL;
          jmethodID *Stats::mids$ = NULL;
          jfieldID *Stats::fids$ = NULL;
          bool Stats::live$ = false;

          jclass Stats::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktree/Stats");

              mids$ = new jmethodID[max_mid];
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_blockCountByPrefixLen] = env->getFieldID(cls, "blockCountByPrefixLen", "[I");
              fids$[fid_compressionAlgorithms] = env->getFieldID(cls, "compressionAlgorithms", "[J");
              fids$[fid_field] = env->getFieldID(cls, "field", "Ljava/lang/String;");
              fids$[fid_floorBlockCount] = env->getFieldID(cls, "floorBlockCount", "I");
              fids$[fid_floorSubBlockCount] = env->getFieldID(cls, "floorSubBlockCount", "I");
              fids$[fid_indexNumBytes] = env->getFieldID(cls, "indexNumBytes", "J");
              fids$[fid_mixedBlockCount] = env->getFieldID(cls, "mixedBlockCount", "I");
              fids$[fid_nonFloorBlockCount] = env->getFieldID(cls, "nonFloorBlockCount", "I");
              fids$[fid_segment] = env->getFieldID(cls, "segment", "Ljava/lang/String;");
              fids$[fid_subBlocksOnlyBlockCount] = env->getFieldID(cls, "subBlocksOnlyBlockCount", "I");
              fids$[fid_termsOnlyBlockCount] = env->getFieldID(cls, "termsOnlyBlockCount", "I");
              fids$[fid_totalBlockCount] = env->getFieldID(cls, "totalBlockCount", "I");
              fids$[fid_totalBlockOtherBytes] = env->getFieldID(cls, "totalBlockOtherBytes", "J");
              fids$[fid_totalBlockStatsBytes] = env->getFieldID(cls, "totalBlockStatsBytes", "J");
              fids$[fid_totalBlockSuffixBytes] = env->getFieldID(cls, "totalBlockSuffixBytes", "J");
              fids$[fid_totalTermBytes] = env->getFieldID(cls, "totalTermBytes", "J");
              fids$[fid_totalTermCount] = env->getFieldID(cls, "totalTermCount", "J");
              fids$[fid_totalUncompressedBlockSuffixBytes] = env->getFieldID(cls, "totalUncompressedBlockSuffixBytes", "J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String Stats::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          JArray< jint > Stats::_get_blockCountByPrefixLen() const
          {
            return JArray< jint >(env->getObjectField(this$, fids$[fid_blockCountByPrefixLen]));
          }

          void Stats::_set_blockCountByPrefixLen(const JArray< jint > & a0) const
          {
            env->setObjectField(this$, fids$[fid_blockCountByPrefixLen], a0.this$);
          }

          JArray< jlong > Stats::_get_compressionAlgorithms() const
          {
            return JArray< jlong >(env->getObjectField(this$, fids$[fid_compressionAlgorithms]));
          }

          ::java::lang::String Stats::_get_field() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_field]));
          }

          jint Stats::_get_floorBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_floorBlockCount]);
          }

          void Stats::_set_floorBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_floorBlockCount], a0);
          }

          jint Stats::_get_floorSubBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_floorSubBlockCount]);
          }

          void Stats::_set_floorSubBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_floorSubBlockCount], a0);
          }

          jlong Stats::_get_indexNumBytes() const
          {
            return env->getLongField(this$, fids$[fid_indexNumBytes]);
          }

          void Stats::_set_indexNumBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_indexNumBytes], a0);
          }

          jint Stats::_get_mixedBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_mixedBlockCount]);
          }

          void Stats::_set_mixedBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_mixedBlockCount], a0);
          }

          jint Stats::_get_nonFloorBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_nonFloorBlockCount]);
          }

          void Stats::_set_nonFloorBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_nonFloorBlockCount], a0);
          }

          ::java::lang::String Stats::_get_segment() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_segment]));
          }

          jint Stats::_get_subBlocksOnlyBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_subBlocksOnlyBlockCount]);
          }

          void Stats::_set_subBlocksOnlyBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_subBlocksOnlyBlockCount], a0);
          }

          jint Stats::_get_termsOnlyBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_termsOnlyBlockCount]);
          }

          void Stats::_set_termsOnlyBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_termsOnlyBlockCount], a0);
          }

          jint Stats::_get_totalBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_totalBlockCount]);
          }

          void Stats::_set_totalBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_totalBlockCount], a0);
          }

          jlong Stats::_get_totalBlockOtherBytes() const
          {
            return env->getLongField(this$, fids$[fid_totalBlockOtherBytes]);
          }

          void Stats::_set_totalBlockOtherBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalBlockOtherBytes], a0);
          }

          jlong Stats::_get_totalBlockStatsBytes() const
          {
            return env->getLongField(this$, fids$[fid_totalBlockStatsBytes]);
          }

          void Stats::_set_totalBlockStatsBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalBlockStatsBytes], a0);
          }

          jlong Stats::_get_totalBlockSuffixBytes() const
          {
            return env->getLongField(this$, fids$[fid_totalBlockSuffixBytes]);
          }

          void Stats::_set_totalBlockSuffixBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalBlockSuffixBytes], a0);
          }

          jlong Stats::_get_totalTermBytes() const
          {
            return env->getLongField(this$, fids$[fid_totalTermBytes]);
          }

          void Stats::_set_totalTermBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalTermBytes], a0);
          }

          jlong Stats::_get_totalTermCount() const
          {
            return env->getLongField(this$, fids$[fid_totalTermCount]);
          }

          void Stats::_set_totalTermCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalTermCount], a0);
          }

          jlong Stats::_get_totalUncompressedBlockSuffixBytes() const
          {
            return env->getLongField(this$, fids$[fid_totalUncompressedBlockSuffixBytes]);
          }

          void Stats::_set_totalUncompressedBlockSuffixBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalUncompressedBlockSuffixBytes], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          static PyObject *t_Stats_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Stats_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Stats_toString(t_Stats *self, PyObject *args);
          static PyObject *t_Stats_get__blockCountByPrefixLen(t_Stats *self, void *data);
          static int t_Stats_set__blockCountByPrefixLen(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__compressionAlgorithms(t_Stats *self, void *data);
          static PyObject *t_Stats_get__field(t_Stats *self, void *data);
          static PyObject *t_Stats_get__floorBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__floorBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__floorSubBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__floorSubBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__indexNumBytes(t_Stats *self, void *data);
          static int t_Stats_set__indexNumBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__mixedBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__mixedBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__nonFloorBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__nonFloorBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__segment(t_Stats *self, void *data);
          static PyObject *t_Stats_get__subBlocksOnlyBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__subBlocksOnlyBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__termsOnlyBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__termsOnlyBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__totalBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalBlockOtherBytes(t_Stats *self, void *data);
          static int t_Stats_set__totalBlockOtherBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalBlockStatsBytes(t_Stats *self, void *data);
          static int t_Stats_set__totalBlockStatsBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalBlockSuffixBytes(t_Stats *self, void *data);
          static int t_Stats_set__totalBlockSuffixBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalTermBytes(t_Stats *self, void *data);
          static int t_Stats_set__totalTermBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalTermCount(t_Stats *self, void *data);
          static int t_Stats_set__totalTermCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalUncompressedBlockSuffixBytes(t_Stats *self, void *data);
          static int t_Stats_set__totalUncompressedBlockSuffixBytes(t_Stats *self, PyObject *arg, void *data);

          static PyGetSetDef t_Stats__fields_[] = {
            DECLARE_GETSET_FIELD(t_Stats, blockCountByPrefixLen),
            DECLARE_GET_FIELD(t_Stats, compressionAlgorithms),
            DECLARE_GET_FIELD(t_Stats, field),
            DECLARE_GETSET_FIELD(t_Stats, floorBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, floorSubBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, indexNumBytes),
            DECLARE_GETSET_FIELD(t_Stats, mixedBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, nonFloorBlockCount),
            DECLARE_GET_FIELD(t_Stats, segment),
            DECLARE_GETSET_FIELD(t_Stats, subBlocksOnlyBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, termsOnlyBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, totalBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, totalBlockOtherBytes),
            DECLARE_GETSET_FIELD(t_Stats, totalBlockStatsBytes),
            DECLARE_GETSET_FIELD(t_Stats, totalBlockSuffixBytes),
            DECLARE_GETSET_FIELD(t_Stats, totalTermBytes),
            DECLARE_GETSET_FIELD(t_Stats, totalTermCount),
            DECLARE_GETSET_FIELD(t_Stats, totalUncompressedBlockSuffixBytes),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Stats__methods_[] = {
            DECLARE_METHOD(t_Stats, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Stats, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Stats, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Stats)[] = {
            { Py_tp_methods, t_Stats__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_Stats__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Stats)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Stats, t_Stats, Stats);

          void t_Stats::install(PyObject *module)
          {
            installType(&PY_TYPE(Stats), &PY_TYPE_DEF(Stats), module, "Stats", 0);
          }

          void t_Stats::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Stats), "class_", make_descriptor(Stats::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Stats), "wrapfn_", make_descriptor(t_Stats::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Stats), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Stats_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Stats::initializeClass, 1)))
              return NULL;
            return t_Stats::wrap_Object(Stats(((t_Stats *) arg)->object.this$));
          }
          static PyObject *t_Stats_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Stats::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Stats_toString(t_Stats *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Stats), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Stats_get__blockCountByPrefixLen(t_Stats *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_blockCountByPrefixLen());
            return value.wrap();
          }
          static int t_Stats_set__blockCountByPrefixLen(t_Stats *self, PyObject *arg, void *data)
          {
            JArray< jint > value((jobject) NULL);
            if (!parseArg(arg, "[I", &value))
            {
              INT_CALL(self->object._set_blockCountByPrefixLen(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "blockCountByPrefixLen", arg);
            return -1;
          }

          static PyObject *t_Stats_get__compressionAlgorithms(t_Stats *self, void *data)
          {
            JArray< jlong > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_compressionAlgorithms());
            return value.wrap();
          }

          static PyObject *t_Stats_get__field(t_Stats *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_field());
            return j2p(value);
          }

          static PyObject *t_Stats_get__floorBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_floorBlockCount());
            return PyLong_FromLong((long) value);
          }
          static int t_Stats_set__floorBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_floorBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "floorBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__floorSubBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_floorSubBlockCount());
            return PyLong_FromLong((long) value);
          }
          static int t_Stats_set__floorSubBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_floorSubBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "floorSubBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__indexNumBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_indexNumBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__indexNumBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_indexNumBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "indexNumBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__mixedBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_mixedBlockCount());
            return PyLong_FromLong((long) value);
          }
          static int t_Stats_set__mixedBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_mixedBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "mixedBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__nonFloorBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_nonFloorBlockCount());
            return PyLong_FromLong((long) value);
          }
          static int t_Stats_set__nonFloorBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_nonFloorBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "nonFloorBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__segment(t_Stats *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_segment());
            return j2p(value);
          }

          static PyObject *t_Stats_get__subBlocksOnlyBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_subBlocksOnlyBlockCount());
            return PyLong_FromLong((long) value);
          }
          static int t_Stats_set__subBlocksOnlyBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_subBlocksOnlyBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "subBlocksOnlyBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__termsOnlyBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_termsOnlyBlockCount());
            return PyLong_FromLong((long) value);
          }
          static int t_Stats_set__termsOnlyBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_termsOnlyBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "termsOnlyBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_totalBlockCount());
            return PyLong_FromLong((long) value);
          }
          static int t_Stats_set__totalBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_totalBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalBlockOtherBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalBlockOtherBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalBlockOtherBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalBlockOtherBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalBlockOtherBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalBlockStatsBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalBlockStatsBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalBlockStatsBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalBlockStatsBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalBlockStatsBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalBlockSuffixBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalBlockSuffixBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalBlockSuffixBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalBlockSuffixBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalBlockSuffixBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalTermBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalTermBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalTermBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalTermBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalTermBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalTermCount(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalTermCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalTermCount(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalTermCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalTermCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalUncompressedBlockSuffixBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalUncompressedBlockSuffixBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalUncompressedBlockSuffixBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalUncompressedBlockSuffixBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalUncompressedBlockSuffixBytes", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/classification/Classifier.h"
#include "org/apache/lucene/classification/ClassificationResult.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {

        ::java::lang::Class *Classifier::class$ = NULL;
        jmethodID *Classifier::mids$ = NULL;
        bool Classifier::live$ = false;

        jclass Classifier::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/classification/Classifier");

            mids$ = new jmethodID[max_mid];
            mids$[mid_assignClass_5edc036bda71a93d] = env->getMethodID(cls, "assignClass", "(Ljava/lang/String;)Lorg/apache/lucene/classification/ClassificationResult;");
            mids$[mid_getClasses_25278b4b3ab80e37] = env->getMethodID(cls, "getClasses", "(Ljava/lang/String;)Ljava/util/List;");
            mids$[mid_getClasses_a5d57c41d0cd0867] = env->getMethodID(cls, "getClasses", "(Ljava/lang/String;I)Ljava/util/List;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::classification::ClassificationResult Classifier::assignClass(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::classification::ClassificationResult(env->callObjectMethod(this$, mids$[mid_assignClass_5edc036bda71a93d], a0.this$));
        }

        ::java::util::List Classifier::getClasses(const ::java::lang::String & a0) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getClasses_25278b4b3ab80e37], a0.this$));
        }

        ::java::util::List Classifier::getClasses(const ::java::lang::String & a0, jint a1) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getClasses_a5d57c41d0cd0867], a0.this$, a1));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        static PyObject *t_Classifier_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Classifier_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Classifier_of_(t_Classifier *self, PyObject *args);
        static PyObject *t_Classifier_assignClass(t_Classifier *self, PyObject *arg);
        static PyObject *t_Classifier_getClasses(t_Classifier *self, PyObject *args);
        static PyObject *t_Classifier_get__parameters_(t_Classifier *self, void *data);
        static PyGetSetDef t_Classifier__fields_[] = {
          DECLARE_GET_FIELD(t_Classifier, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Classifier__methods_[] = {
          DECLARE_METHOD(t_Classifier, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Classifier, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Classifier, of_, METH_VARARGS),
          DECLARE_METHOD(t_Classifier, assignClass, METH_O),
          DECLARE_METHOD(t_Classifier, getClasses, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Classifier)[] = {
          { Py_tp_methods, t_Classifier__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_Classifier__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Classifier)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Classifier, t_Classifier, Classifier);
        PyObject *t_Classifier::wrap_Object(const Classifier& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Classifier::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Classifier *self = (t_Classifier *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_Classifier::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Classifier::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Classifier *self = (t_Classifier *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_Classifier::install(PyObject *module)
        {
          installType(&PY_TYPE(Classifier), &PY_TYPE_DEF(Classifier), module, "Classifier", 0);
        }

        void t_Classifier::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Classifier), "class_", make_descriptor(Classifier::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Classifier), "wrapfn_", make_descriptor(t_Classifier::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Classifier), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Classifier_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Classifier::initializeClass, 1)))
            return NULL;
          return t_Classifier::wrap_Object(Classifier(((t_Classifier *) arg)->object.this$));
        }
        static PyObject *t_Classifier_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Classifier::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Classifier_of_(t_Classifier *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Classifier_assignClass(t_Classifier *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::classification::ClassificationResult result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.assignClass(a0));
            return ::org::apache::lucene::classification::t_ClassificationResult::wrap_Object(result, self->parameters[0]);
          }

          PyErr_SetArgsError((PyObject *) self, "assignClass", arg);
          return NULL;
        }

        static PyObject *t_Classifier_getClasses(t_Classifier *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.getClasses(a0));
                return ::java::util::t_List::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                OBJ_CALL(result = self->object.getClasses(a0, a1));
                return ::java::util::t_List::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getClasses", args);
          return NULL;
        }
        static PyObject *t_Classifier_get__parameters_(t_Classifier *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanWithinQuery$SpanWithinWeight.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/SpanWeight$Postings.h"
#include "org/apache/lucene/index/TermStates.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spans/SpanWithinQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanWithinQuery$SpanWithinWeight::class$ = NULL;
          jmethodID *SpanWithinQuery$SpanWithinWeight::mids$ = NULL;
          bool SpanWithinQuery$SpanWithinWeight::live$ = false;

          jclass SpanWithinQuery$SpanWithinWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanWithinQuery$SpanWithinWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_47bcfeddb52a354d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanWithinQuery;Lorg/apache/lucene/search/IndexSearcher;Ljava/util/Map;Lorg/apache/lucene/search/spans/SpanWeight;Lorg/apache/lucene/search/spans/SpanWeight;F)V");
              mids$[mid_getSpans_219c078c64a446fd] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/LeafReaderContext;Lorg/apache/lucene/search/spans/SpanWeight$Postings;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_isCacheable_07cae694a8cf1c6d] = env->getMethodID(cls, "isCacheable", "(Lorg/apache/lucene/index/LeafReaderContext;)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanWithinQuery$SpanWithinWeight::SpanWithinQuery$SpanWithinWeight(const ::org::apache::lucene::search::spans::SpanWithinQuery & a0, const ::org::apache::lucene::search::IndexSearcher & a1, const ::java::util::Map & a2, const ::org::apache::lucene::search::spans::SpanWeight & a3, const ::org::apache::lucene::search::spans::SpanWeight & a4, jfloat a5) : ::org::apache::lucene::search::spans::SpanContainQuery$SpanContainWeight(env->newObject(initializeClass, &mids$, mid_init$_47bcfeddb52a354d, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5)) {}

          ::org::apache::lucene::search::spans::Spans SpanWithinQuery$SpanWithinWeight::getSpans(const ::org::apache::lucene::index::LeafReaderContext & a0, const ::org::apache::lucene::search::spans::SpanWeight$Postings & a1) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_219c078c64a446fd], a0.this$, a1.this$));
          }

          jboolean SpanWithinQuery$SpanWithinWeight::isCacheable(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCacheable_07cae694a8cf1c6d], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanWithinQuery$SpanWithinWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanWithinQuery$SpanWithinWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanWithinQuery$SpanWithinWeight_init_(t_SpanWithinQuery$SpanWithinWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanWithinQuery$SpanWithinWeight_getSpans(t_SpanWithinQuery$SpanWithinWeight *self, PyObject *args);
          static PyObject *t_SpanWithinQuery$SpanWithinWeight_isCacheable(t_SpanWithinQuery$SpanWithinWeight *self, PyObject *args);

          static PyMethodDef t_SpanWithinQuery$SpanWithinWeight__methods_[] = {
            DECLARE_METHOD(t_SpanWithinQuery$SpanWithinWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanWithinQuery$SpanWithinWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanWithinQuery$SpanWithinWeight, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanWithinQuery$SpanWithinWeight, isCacheable, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanWithinQuery$SpanWithinWeight)[] = {
            { Py_tp_methods, t_SpanWithinQuery$SpanWithinWeight__methods_ },
            { Py_tp_init, (void *) t_SpanWithinQuery$SpanWithinWeight_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanWithinQuery$SpanWithinWeight)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanContainQuery$SpanContainWeight),
            NULL
          };

          DEFINE_TYPE(SpanWithinQuery$SpanWithinWeight, t_SpanWithinQuery$SpanWithinWeight, SpanWithinQuery$SpanWithinWeight);

          void t_SpanWithinQuery$SpanWithinWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanWithinQuery$SpanWithinWeight), &PY_TYPE_DEF(SpanWithinQuery$SpanWithinWeight), module, "SpanWithinQuery$SpanWithinWeight", 0);
          }

          void t_SpanWithinQuery$SpanWithinWeight::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanWithinQuery$SpanWithinWeight), "class_", make_descriptor(SpanWithinQuery$SpanWithinWeight::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanWithinQuery$SpanWithinWeight), "wrapfn_", make_descriptor(t_SpanWithinQuery$SpanWithinWeight::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanWithinQuery$SpanWithinWeight), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanWithinQuery$SpanWithinWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanWithinQuery$SpanWithinWeight::initializeClass, 1)))
              return NULL;
            return t_SpanWithinQuery$SpanWithinWeight::wrap_Object(SpanWithinQuery$SpanWithinWeight(((t_SpanWithinQuery$SpanWithinWeight *) arg)->object.this$));
          }
          static PyObject *t_SpanWithinQuery$SpanWithinWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanWithinQuery$SpanWithinWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanWithinQuery$SpanWithinWeight_init_(t_SpanWithinQuery$SpanWithinWeight *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanWithinQuery a0((jobject) NULL);
            ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::SpanWeight a3((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanWeight a4((jobject) NULL);
            jfloat a5;
            SpanWithinQuery$SpanWithinWeight object((jobject) NULL);

            if (!parseArgs(args, "kkKkkF", ::org::apache::lucene::search::spans::SpanWithinQuery::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::search::spans::SpanWeight::initializeClass, ::org::apache::lucene::search::spans::SpanWeight::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3, &a4, &a5))
            {
              INT_CALL(object = SpanWithinQuery$SpanWithinWeight(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanWithinQuery$SpanWithinWeight_getSpans(t_SpanWithinQuery$SpanWithinWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanWeight$Postings a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::index::LeafReaderContext::initializeClass, ::org::apache::lucene::search::spans::SpanWeight$Postings::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::spans::t_SpanWeight$Postings::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanWithinQuery$SpanWithinWeight), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanWithinQuery$SpanWithinWeight_isCacheable(t_SpanWithinQuery$SpanWithinWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isCacheable(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SpanWithinQuery$SpanWithinWeight), (PyObject *) self, "isCacheable", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockHeader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *BlockHeader::class$ = NULL;
          jmethodID *BlockHeader::mids$ = NULL;
          bool BlockHeader::live$ = false;

          jclass BlockHeader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/BlockHeader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getBaseDocsFP_2e5ae9edcb9b072f] = env->getMethodID(cls, "getBaseDocsFP", "()J");
              mids$[mid_getBasePayloadsFP_2e5ae9edcb9b072f] = env->getMethodID(cls, "getBasePayloadsFP", "()J");
              mids$[mid_getBasePositionsFP_2e5ae9edcb9b072f] = env->getMethodID(cls, "getBasePositionsFP", "()J");
              mids$[mid_getLinesCount_9972fcc56b44e79d] = env->getMethodID(cls, "getLinesCount", "()I");
              mids$[mid_getMiddleLineIndex_9972fcc56b44e79d] = env->getMethodID(cls, "getMiddleLineIndex", "()I");
              mids$[mid_getMiddleLineOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getMiddleLineOffset", "()I");
              mids$[mid_getTermStatesBaseOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getTermStatesBaseOffset", "()I");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_reset_7b87c25498d2cfd2] = env->getMethodID(cls, "reset", "(IJJJII)Lorg/apache/lucene/codecs/uniformsplit/BlockHeader;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jlong BlockHeader::getBaseDocsFP() const
          {
            return env->callLongMethod(this$, mids$[mid_getBaseDocsFP_2e5ae9edcb9b072f]);
          }

          jlong BlockHeader::getBasePayloadsFP() const
          {
            return env->callLongMethod(this$, mids$[mid_getBasePayloadsFP_2e5ae9edcb9b072f]);
          }

          jlong BlockHeader::getBasePositionsFP() const
          {
            return env->callLongMethod(this$, mids$[mid_getBasePositionsFP_2e5ae9edcb9b072f]);
          }

          jint BlockHeader::getLinesCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getLinesCount_9972fcc56b44e79d]);
          }

          jint BlockHeader::getMiddleLineIndex() const
          {
            return env->callIntMethod(this$, mids$[mid_getMiddleLineIndex_9972fcc56b44e79d]);
          }

          jint BlockHeader::getMiddleLineOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getMiddleLineOffset_9972fcc56b44e79d]);
          }

          jint BlockHeader::getTermStatesBaseOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getTermStatesBaseOffset_9972fcc56b44e79d]);
          }

          jlong BlockHeader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockHeader$Serializer.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_BlockHeader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockHeader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockHeader_getBaseDocsFP(t_BlockHeader *self);
          static PyObject *t_BlockHeader_getBasePayloadsFP(t_BlockHeader *self);
          static PyObject *t_BlockHeader_getBasePositionsFP(t_BlockHeader *self);
          static PyObject *t_BlockHeader_getLinesCount(t_BlockHeader *self);
          static PyObject *t_BlockHeader_getMiddleLineIndex(t_BlockHeader *self);
          static PyObject *t_BlockHeader_getMiddleLineOffset(t_BlockHeader *self);
          static PyObject *t_BlockHeader_getTermStatesBaseOffset(t_BlockHeader *self);
          static PyObject *t_BlockHeader_ramBytesUsed(t_BlockHeader *self);
          static PyObject *t_BlockHeader_get__baseDocsFP(t_BlockHeader *self, void *data);
          static PyObject *t_BlockHeader_get__basePayloadsFP(t_BlockHeader *self, void *data);
          static PyObject *t_BlockHeader_get__basePositionsFP(t_BlockHeader *self, void *data);
          static PyObject *t_BlockHeader_get__linesCount(t_BlockHeader *self, void *data);
          static PyObject *t_BlockHeader_get__middleLineIndex(t_BlockHeader *self, void *data);
          static PyObject *t_BlockHeader_get__middleLineOffset(t_BlockHeader *self, void *data);
          static PyObject *t_BlockHeader_get__termStatesBaseOffset(t_BlockHeader *self, void *data);
          static PyGetSetDef t_BlockHeader__fields_[] = {
            DECLARE_GET_FIELD(t_BlockHeader, baseDocsFP),
            DECLARE_GET_FIELD(t_BlockHeader, basePayloadsFP),
            DECLARE_GET_FIELD(t_BlockHeader, basePositionsFP),
            DECLARE_GET_FIELD(t_BlockHeader, linesCount),
            DECLARE_GET_FIELD(t_BlockHeader, middleLineIndex),
            DECLARE_GET_FIELD(t_BlockHeader, middleLineOffset),
            DECLARE_GET_FIELD(t_BlockHeader, termStatesBaseOffset),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BlockHeader__methods_[] = {
            DECLARE_METHOD(t_BlockHeader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockHeader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockHeader, getBaseDocsFP, METH_NOARGS),
            DECLARE_METHOD(t_BlockHeader, getBasePayloadsFP, METH_NOARGS),
            DECLARE_METHOD(t_BlockHeader, getBasePositionsFP, METH_NOARGS),
            DECLARE_METHOD(t_BlockHeader, getLinesCount, METH_NOARGS),
            DECLARE_METHOD(t_BlockHeader, getMiddleLineIndex, METH_NOARGS),
            DECLARE_METHOD(t_BlockHeader, getMiddleLineOffset, METH_NOARGS),
            DECLARE_METHOD(t_BlockHeader, getTermStatesBaseOffset, METH_NOARGS),
            DECLARE_METHOD(t_BlockHeader, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BlockHeader)[] = {
            { Py_tp_methods, t_BlockHeader__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_BlockHeader__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BlockHeader)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BlockHeader, t_BlockHeader, BlockHeader);

          void t_BlockHeader::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockHeader), &PY_TYPE_DEF(BlockHeader), module, "BlockHeader", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockHeader), "Serializer", make_descriptor(&PY_TYPE_DEF(BlockHeader$Serializer)));
          }

          void t_BlockHeader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockHeader), "class_", make_descriptor(BlockHeader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockHeader), "wrapfn_", make_descriptor(t_BlockHeader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockHeader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockHeader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockHeader::initializeClass, 1)))
              return NULL;
            return t_BlockHeader::wrap_Object(BlockHeader(((t_BlockHeader *) arg)->object.this$));
          }
          static PyObject *t_BlockHeader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockHeader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BlockHeader_getBaseDocsFP(t_BlockHeader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getBaseDocsFP());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BlockHeader_getBasePayloadsFP(t_BlockHeader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getBasePayloadsFP());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BlockHeader_getBasePositionsFP(t_BlockHeader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getBasePositionsFP());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BlockHeader_getLinesCount(t_BlockHeader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLinesCount());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_BlockHeader_getMiddleLineIndex(t_BlockHeader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMiddleLineIndex());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_BlockHeader_getMiddleLineOffset(t_BlockHeader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMiddleLineOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_BlockHeader_getTermStatesBaseOffset(t_BlockHeader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getTermStatesBaseOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_BlockHeader_ramBytesUsed(t_BlockHeader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BlockHeader_get__baseDocsFP(t_BlockHeader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getBaseDocsFP());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_BlockHeader_get__basePayloadsFP(t_BlockHeader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getBasePayloadsFP());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_BlockHeader_get__basePositionsFP(t_BlockHeader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getBasePositionsFP());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_BlockHeader_get__linesCount(t_BlockHeader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLinesCount());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_BlockHeader_get__middleLineIndex(t_BlockHeader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMiddleLineIndex());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_BlockHeader_get__middleLineOffset(t_BlockHeader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMiddleLineOffset());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_BlockHeader_get__termStatesBaseOffset(t_BlockHeader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getTermStatesBaseOffset());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene80/Lucene80DocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/lucene80/Lucene80DocValuesFormat$Mode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene80 {

          ::java::lang::Class *Lucene80DocValuesFormat::class$ = NULL;
          jmethodID *Lucene80DocValuesFormat::mids$ = NULL;
          bool Lucene80DocValuesFormat::live$ = false;
          ::java::lang::String *Lucene80DocValuesFormat::MODE_KEY = NULL;

          jclass Lucene80DocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene80/Lucene80DocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_a23983d1eb198b6b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/lucene80/Lucene80DocValuesFormat$Mode;)V");
              mids$[mid_fieldsConsumer_4d0d89459a33e411] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_4fca71c324f605dc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              MODE_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MODE_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene80DocValuesFormat::Lucene80DocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          Lucene80DocValuesFormat::Lucene80DocValuesFormat(const ::org::apache::lucene::codecs::lucene80::Lucene80DocValuesFormat$Mode & a0) : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_a23983d1eb198b6b, a0.this$)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene80DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_4d0d89459a33e411], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene80DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_4fca71c324f605dc], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene80 {
          static PyObject *t_Lucene80DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene80DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene80DocValuesFormat_init_(t_Lucene80DocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene80DocValuesFormat_fieldsConsumer(t_Lucene80DocValuesFormat *self, PyObject *args);
          static PyObject *t_Lucene80DocValuesFormat_fieldsProducer(t_Lucene80DocValuesFormat *self, PyObject *args);

          static PyMethodDef t_Lucene80DocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene80DocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene80DocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene80DocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene80DocValuesFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene80DocValuesFormat)[] = {
            { Py_tp_methods, t_Lucene80DocValuesFormat__methods_ },
            { Py_tp_init, (void *) t_Lucene80DocValuesFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene80DocValuesFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::DocValuesFormat),
            NULL
          };

          DEFINE_TYPE(Lucene80DocValuesFormat, t_Lucene80DocValuesFormat, Lucene80DocValuesFormat);

          void t_Lucene80DocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene80DocValuesFormat), &PY_TYPE_DEF(Lucene80DocValuesFormat), module, "Lucene80DocValuesFormat", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene80DocValuesFormat), "Mode", make_descriptor(&PY_TYPE_DEF(Lucene80DocValuesFormat$Mode)));
          }

          void t_Lucene80DocValuesFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene80DocValuesFormat), "class_", make_descriptor(Lucene80DocValuesFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene80DocValuesFormat), "wrapfn_", make_descriptor(t_Lucene80DocValuesFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene80DocValuesFormat), "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene80DocValuesFormat::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene80DocValuesFormat), "MODE_KEY", make_descriptor(j2p(*Lucene80DocValuesFormat::MODE_KEY)));
          }

          static PyObject *t_Lucene80DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene80DocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene80DocValuesFormat::wrap_Object(Lucene80DocValuesFormat(((t_Lucene80DocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene80DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene80DocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene80DocValuesFormat_init_(t_Lucene80DocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Lucene80DocValuesFormat object((jobject) NULL);

                INT_CALL(object = Lucene80DocValuesFormat());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::codecs::lucene80::Lucene80DocValuesFormat$Mode a0((jobject) NULL);
                PyTypeObject **p0;
                Lucene80DocValuesFormat object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::codecs::lucene80::Lucene80DocValuesFormat$Mode::initializeClass, &a0, &p0, ::org::apache::lucene::codecs::lucene80::t_Lucene80DocValuesFormat$Mode::parameters_))
                {
                  INT_CALL(object = Lucene80DocValuesFormat(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene80DocValuesFormat_fieldsConsumer(t_Lucene80DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene80DocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene80DocValuesFormat_fieldsProducer(t_Lucene80DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene80DocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/sharedterms/UnionFieldMetadataBuilder.h"
#include "org/apache/lucene/codecs/uniformsplit/FieldMetadata.h"
#include "org/apache/lucene/codecs/uniformsplit/sharedterms/UnionFieldMetadataBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {

            ::java::lang::Class *UnionFieldMetadataBuilder::class$ = NULL;
            jmethodID *UnionFieldMetadataBuilder::mids$ = NULL;
            bool UnionFieldMetadataBuilder::live$ = false;

            jclass UnionFieldMetadataBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/sharedterms/UnionFieldMetadataBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_addFieldMetadata_b74c72371f8cf92d] = env->getMethodID(cls, "addFieldMetadata", "(Lorg/apache/lucene/codecs/uniformsplit/FieldMetadata;)Lorg/apache/lucene/codecs/uniformsplit/sharedterms/UnionFieldMetadataBuilder;");
                mids$[mid_build_9622e9ea265c0aba] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/codecs/uniformsplit/FieldMetadata;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UnionFieldMetadataBuilder::UnionFieldMetadataBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            UnionFieldMetadataBuilder UnionFieldMetadataBuilder::addFieldMetadata(const ::org::apache::lucene::codecs::uniformsplit::FieldMetadata & a0) const
            {
              return UnionFieldMetadataBuilder(env->callObjectMethod(this$, mids$[mid_addFieldMetadata_b74c72371f8cf92d], a0.this$));
            }

            ::org::apache::lucene::codecs::uniformsplit::FieldMetadata UnionFieldMetadataBuilder::build() const
            {
              return ::org::apache::lucene::codecs::uniformsplit::FieldMetadata(env->callObjectMethod(this$, mids$[mid_build_9622e9ea265c0aba]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {
            static PyObject *t_UnionFieldMetadataBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UnionFieldMetadataBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UnionFieldMetadataBuilder_init_(t_UnionFieldMetadataBuilder *self, PyObject *args, PyObject *kwds);
            static PyObject *t_UnionFieldMetadataBuilder_addFieldMetadata(t_UnionFieldMetadataBuilder *self, PyObject *arg);
            static PyObject *t_UnionFieldMetadataBuilder_build(t_UnionFieldMetadataBuilder *self);

            static PyMethodDef t_UnionFieldMetadataBuilder__methods_[] = {
              DECLARE_METHOD(t_UnionFieldMetadataBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UnionFieldMetadataBuilder, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UnionFieldMetadataBuilder, addFieldMetadata, METH_O),
              DECLARE_METHOD(t_UnionFieldMetadataBuilder, build, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(UnionFieldMetadataBuilder)[] = {
              { Py_tp_methods, t_UnionFieldMetadataBuilder__methods_ },
              { Py_tp_init, (void *) t_UnionFieldMetadataBuilder_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(UnionFieldMetadataBuilder)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(UnionFieldMetadataBuilder, t_UnionFieldMetadataBuilder, UnionFieldMetadataBuilder);

            void t_UnionFieldMetadataBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(UnionFieldMetadataBuilder), &PY_TYPE_DEF(UnionFieldMetadataBuilder), module, "UnionFieldMetadataBuilder", 0);
            }

            void t_UnionFieldMetadataBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(UnionFieldMetadataBuilder), "class_", make_descriptor(UnionFieldMetadataBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(UnionFieldMetadataBuilder), "wrapfn_", make_descriptor(t_UnionFieldMetadataBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(UnionFieldMetadataBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_UnionFieldMetadataBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UnionFieldMetadataBuilder::initializeClass, 1)))
                return NULL;
              return t_UnionFieldMetadataBuilder::wrap_Object(UnionFieldMetadataBuilder(((t_UnionFieldMetadataBuilder *) arg)->object.this$));
            }
            static PyObject *t_UnionFieldMetadataBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UnionFieldMetadataBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UnionFieldMetadataBuilder_init_(t_UnionFieldMetadataBuilder *self, PyObject *args, PyObject *kwds)
            {
              UnionFieldMetadataBuilder object((jobject) NULL);

              INT_CALL(object = UnionFieldMetadataBuilder());
              self->object = object;

              return 0;
            }

            static PyObject *t_UnionFieldMetadataBuilder_addFieldMetadata(t_UnionFieldMetadataBuilder *self, PyObject *arg)
            {
              ::org::apache::lucene::codecs::uniformsplit::FieldMetadata a0((jobject) NULL);
              UnionFieldMetadataBuilder result((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::codecs::uniformsplit::FieldMetadata::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.addFieldMetadata(a0));
                return t_UnionFieldMetadataBuilder::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "addFieldMetadata", arg);
              return NULL;
            }

            static PyObject *t_UnionFieldMetadataBuilder_build(t_UnionFieldMetadataBuilder *self)
            {
              ::org::apache::lucene::codecs::uniformsplit::FieldMetadata result((jobject) NULL);
              OBJ_CALL(result = self->object.build());
              return ::org::apache::lucene::codecs::uniformsplit::t_FieldMetadata::wrap_Object(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefArray$SortState.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefArray$SortState::class$ = NULL;
        jmethodID *BytesRefArray$SortState::mids$ = NULL;
        bool BytesRefArray$SortState::live$ = false;

        jclass BytesRefArray$SortState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefArray$SortState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong BytesRefArray$SortState::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefArray$SortState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefArray$SortState_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefArray$SortState_ramBytesUsed(t_BytesRefArray$SortState *self);

        static PyMethodDef t_BytesRefArray$SortState__methods_[] = {
          DECLARE_METHOD(t_BytesRefArray$SortState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefArray$SortState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefArray$SortState, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BytesRefArray$SortState)[] = {
          { Py_tp_methods, t_BytesRefArray$SortState__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BytesRefArray$SortState)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(BytesRefArray$SortState, t_BytesRefArray$SortState, BytesRefArray$SortState);

        void t_BytesRefArray$SortState::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefArray$SortState), &PY_TYPE_DEF(BytesRefArray$SortState), module, "BytesRefArray$SortState", 0);
        }

        void t_BytesRefArray$SortState::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefArray$SortState), "class_", make_descriptor(BytesRefArray$SortState::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefArray$SortState), "wrapfn_", make_descriptor(t_BytesRefArray$SortState::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefArray$SortState), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefArray$SortState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefArray$SortState::initializeClass, 1)))
            return NULL;
          return t_BytesRefArray$SortState::wrap_Object(BytesRefArray$SortState(((t_BytesRefArray$SortState *) arg)->object.this$));
        }
        static PyObject *t_BytesRefArray$SortState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefArray$SortState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BytesRefArray$SortState_ramBytesUsed(t_BytesRefArray$SortState *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortedSetSortField$Provider.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortedSetSortField$Provider::class$ = NULL;
        jmethodID *SortedSetSortField$Provider::mids$ = NULL;
        bool SortedSetSortField$Provider::live$ = false;
        ::java::lang::String *SortedSetSortField$Provider::NAME = NULL;

        jclass SortedSetSortField$Provider::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortedSetSortField$Provider");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_readSortField_f5c813112fa668ab] = env->getMethodID(cls, "readSortField", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/search/SortField;");
            mids$[mid_writeSortField_d394f16dc9680504] = env->getMethodID(cls, "writeSortField", "(Lorg/apache/lucene/search/SortField;Lorg/apache/lucene/store/DataOutput;)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedSetSortField$Provider::SortedSetSortField$Provider() : ::org::apache::lucene::index::SortFieldProvider(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::search::SortField SortedSetSortField$Provider::readSortField(const ::org::apache::lucene::store::DataInput & a0) const
        {
          return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_readSortField_f5c813112fa668ab], a0.this$));
        }

        void SortedSetSortField$Provider::writeSortField(const ::org::apache::lucene::search::SortField & a0, const ::org::apache::lucene::store::DataOutput & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeSortField_d394f16dc9680504], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortedSetSortField$Provider_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedSetSortField$Provider_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedSetSortField$Provider_init_(t_SortedSetSortField$Provider *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortedSetSortField$Provider_readSortField(t_SortedSetSortField$Provider *self, PyObject *args);
        static PyObject *t_SortedSetSortField$Provider_writeSortField(t_SortedSetSortField$Provider *self, PyObject *args);

        static PyMethodDef t_SortedSetSortField$Provider__methods_[] = {
          DECLARE_METHOD(t_SortedSetSortField$Provider, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetSortField$Provider, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetSortField$Provider, readSortField, METH_VARARGS),
          DECLARE_METHOD(t_SortedSetSortField$Provider, writeSortField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SortedSetSortField$Provider)[] = {
          { Py_tp_methods, t_SortedSetSortField$Provider__methods_ },
          { Py_tp_init, (void *) t_SortedSetSortField$Provider_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SortedSetSortField$Provider)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::SortFieldProvider),
          NULL
        };

        DEFINE_TYPE(SortedSetSortField$Provider, t_SortedSetSortField$Provider, SortedSetSortField$Provider);

        void t_SortedSetSortField$Provider::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedSetSortField$Provider), &PY_TYPE_DEF(SortedSetSortField$Provider), module, "SortedSetSortField$Provider", 0);
        }

        void t_SortedSetSortField$Provider::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetSortField$Provider), "class_", make_descriptor(SortedSetSortField$Provider::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetSortField$Provider), "wrapfn_", make_descriptor(t_SortedSetSortField$Provider::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetSortField$Provider), "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedSetSortField$Provider::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetSortField$Provider), "NAME", make_descriptor(j2p(*SortedSetSortField$Provider::NAME)));
        }

        static PyObject *t_SortedSetSortField$Provider_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedSetSortField$Provider::initializeClass, 1)))
            return NULL;
          return t_SortedSetSortField$Provider::wrap_Object(SortedSetSortField$Provider(((t_SortedSetSortField$Provider *) arg)->object.this$));
        }
        static PyObject *t_SortedSetSortField$Provider_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedSetSortField$Provider::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedSetSortField$Provider_init_(t_SortedSetSortField$Provider *self, PyObject *args, PyObject *kwds)
        {
          SortedSetSortField$Provider object((jobject) NULL);

          INT_CALL(object = SortedSetSortField$Provider());
          self->object = object;

          return 0;
        }

        static PyObject *t_SortedSetSortField$Provider_readSortField(t_SortedSetSortField$Provider *self, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          ::org::apache::lucene::search::SortField result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.readSortField(a0));
            return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SortedSetSortField$Provider), (PyObject *) self, "readSortField", args, 2);
        }

        static PyObject *t_SortedSetSortField$Provider_writeSortField(t_SortedSetSortField$Provider *self, PyObject *args)
        {
          ::org::apache::lucene::search::SortField a0((jobject) NULL);
          ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::search::SortField::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.writeSortField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(SortedSetSortField$Provider), (PyObject *) self, "writeSortField", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/AbstractSet.h"
#include "java/lang/Object.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *AbstractSet::class$ = NULL;
    jmethodID *AbstractSet::mids$ = NULL;
    bool AbstractSet::live$ = false;

    jclass AbstractSet::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/AbstractSet");

        mids$ = new jmethodID[max_mid];
        mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_removeAll_15d9cc2398c22637] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean AbstractSet::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
    }

    jint AbstractSet::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
    }

    jboolean AbstractSet::removeAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_removeAll_15d9cc2398c22637], a0.this$);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_AbstractSet_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractSet_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractSet_of_(t_AbstractSet *self, PyObject *args);
    static PyObject *t_AbstractSet_equals(t_AbstractSet *self, PyObject *args);
    static PyObject *t_AbstractSet_hashCode(t_AbstractSet *self, PyObject *args);
    static PyObject *t_AbstractSet_removeAll(t_AbstractSet *self, PyObject *args);
    static PyObject *t_AbstractSet_get__parameters_(t_AbstractSet *self, void *data);
    static PyGetSetDef t_AbstractSet__fields_[] = {
      DECLARE_GET_FIELD(t_AbstractSet, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_AbstractSet__methods_[] = {
      DECLARE_METHOD(t_AbstractSet, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractSet, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractSet, of_, METH_VARARGS),
      DECLARE_METHOD(t_AbstractSet, equals, METH_VARARGS),
      DECLARE_METHOD(t_AbstractSet, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_AbstractSet, removeAll, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(AbstractSet)[] = {
      { Py_tp_methods, t_AbstractSet__methods_ },
      { Py_tp_init, (void *) abstract_init },
      { Py_tp_getset, t_AbstractSet__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(AbstractSet)[] = {
      &PY_TYPE_DEF(::java::util::AbstractCollection),
      NULL
    };

    DEFINE_TYPE(AbstractSet, t_AbstractSet, AbstractSet);
    PyObject *t_AbstractSet::wrap_Object(const AbstractSet& object, PyTypeObject *p0)
    {
      PyObject *obj = t_AbstractSet::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractSet *self = (t_AbstractSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_AbstractSet::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_AbstractSet::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractSet *self = (t_AbstractSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_AbstractSet::install(PyObject *module)
    {
      installType(&PY_TYPE(AbstractSet), &PY_TYPE_DEF(AbstractSet), module, "AbstractSet", 0);
    }

    void t_AbstractSet::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractSet), "class_", make_descriptor(AbstractSet::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractSet), "wrapfn_", make_descriptor(t_AbstractSet::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractSet), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_AbstractSet_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, AbstractSet::initializeClass, 1)))
        return NULL;
      return t_AbstractSet::wrap_Object(AbstractSet(((t_AbstractSet *) arg)->object.this$));
    }
    static PyObject *t_AbstractSet_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, AbstractSet::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_AbstractSet_of_(t_AbstractSet *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_AbstractSet_equals(t_AbstractSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(AbstractSet), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_AbstractSet_hashCode(t_AbstractSet *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(AbstractSet), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_AbstractSet_removeAll(t_AbstractSet *self, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.removeAll(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(AbstractSet), (PyObject *) self, "removeAll", args, 2);
    }
    static PyObject *t_AbstractSet_get__parameters_(t_AbstractSet *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/id/IndonesianStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {

          ::java::lang::Class *IndonesianStemFilter::class$ = NULL;
          jmethodID *IndonesianStemFilter::mids$ = NULL;
          bool IndonesianStemFilter::live$ = false;

          jclass IndonesianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/id/IndonesianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_2ffd64a9e6352a93] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Z)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndonesianStemFilter::IndonesianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          IndonesianStemFilter::IndonesianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_2ffd64a9e6352a93, a0.this$, a1)) {}

          jboolean IndonesianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {
          static PyObject *t_IndonesianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndonesianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndonesianStemFilter_init_(t_IndonesianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndonesianStemFilter_incrementToken(t_IndonesianStemFilter *self, PyObject *args);

          static PyMethodDef t_IndonesianStemFilter__methods_[] = {
            DECLARE_METHOD(t_IndonesianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IndonesianStemFilter)[] = {
            { Py_tp_methods, t_IndonesianStemFilter__methods_ },
            { Py_tp_init, (void *) t_IndonesianStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IndonesianStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(IndonesianStemFilter, t_IndonesianStemFilter, IndonesianStemFilter);

          void t_IndonesianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(IndonesianStemFilter), &PY_TYPE_DEF(IndonesianStemFilter), module, "IndonesianStemFilter", 0);
          }

          void t_IndonesianStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndonesianStemFilter), "class_", make_descriptor(IndonesianStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndonesianStemFilter), "wrapfn_", make_descriptor(t_IndonesianStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndonesianStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndonesianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndonesianStemFilter::initializeClass, 1)))
              return NULL;
            return t_IndonesianStemFilter::wrap_Object(IndonesianStemFilter(((t_IndonesianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_IndonesianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndonesianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndonesianStemFilter_init_(t_IndonesianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                IndonesianStemFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = IndonesianStemFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jboolean a1;
                IndonesianStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = IndonesianStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndonesianStemFilter_incrementToken(t_IndonesianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(IndonesianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/GraphvizFormatter.h"
#include "org/apache/lucene/analysis/ko/dict/ConnectionCosts.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {

          ::java::lang::Class *GraphvizFormatter::class$ = NULL;
          jmethodID *GraphvizFormatter::mids$ = NULL;
          bool GraphvizFormatter::live$ = false;

          jclass GraphvizFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/GraphvizFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_67f306a73697951a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/ko/dict/ConnectionCosts;)V");
              mids$[mid_finish_db9b55ba01e03e4b] = env->getMethodID(cls, "finish", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GraphvizFormatter::GraphvizFormatter(const ::org::apache::lucene::analysis::ko::dict::ConnectionCosts & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_67f306a73697951a, a0.this$)) {}

          ::java::lang::String GraphvizFormatter::finish() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_finish_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          static PyObject *t_GraphvizFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GraphvizFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GraphvizFormatter_init_(t_GraphvizFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GraphvizFormatter_finish(t_GraphvizFormatter *self);

          static PyMethodDef t_GraphvizFormatter__methods_[] = {
            DECLARE_METHOD(t_GraphvizFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GraphvizFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GraphvizFormatter, finish, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GraphvizFormatter)[] = {
            { Py_tp_methods, t_GraphvizFormatter__methods_ },
            { Py_tp_init, (void *) t_GraphvizFormatter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GraphvizFormatter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GraphvizFormatter, t_GraphvizFormatter, GraphvizFormatter);

          void t_GraphvizFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(GraphvizFormatter), &PY_TYPE_DEF(GraphvizFormatter), module, "GraphvizFormatter", 0);
          }

          void t_GraphvizFormatter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GraphvizFormatter), "class_", make_descriptor(GraphvizFormatter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GraphvizFormatter), "wrapfn_", make_descriptor(t_GraphvizFormatter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GraphvizFormatter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GraphvizFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GraphvizFormatter::initializeClass, 1)))
              return NULL;
            return t_GraphvizFormatter::wrap_Object(GraphvizFormatter(((t_GraphvizFormatter *) arg)->object.this$));
          }
          static PyObject *t_GraphvizFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GraphvizFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GraphvizFormatter_init_(t_GraphvizFormatter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::ko::dict::ConnectionCosts a0((jobject) NULL);
            GraphvizFormatter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::ko::dict::ConnectionCosts::initializeClass, &a0))
            {
              INT_CALL(object = GraphvizFormatter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GraphvizFormatter_finish(t_GraphvizFormatter *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.finish());
            return j2p(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/util/Map.h"
#include "java/util/Collection.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/io/PrintStream.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentInfos::class$ = NULL;
        jmethodID *SegmentInfos::mids$ = NULL;
        jfieldID *SegmentInfos::fids$ = NULL;
        bool SegmentInfos::live$ = false;
        jint SegmentInfos::VERSION_70 = (jint) 0;
        jint SegmentInfos::VERSION_72 = (jint) 0;
        jint SegmentInfos::VERSION_74 = (jint) 0;
        jint SegmentInfos::VERSION_86 = (jint) 0;

        jclass SegmentInfos::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentInfos");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_add_7d313206bbb3a99e] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/SegmentCommitInfo;)V");
            mids$[mid_addAll_870d7079aa6e0153] = env->getMethodID(cls, "addAll", "(Ljava/lang/Iterable;)V");
            mids$[mid_asList_49ec78390f08338a] = env->getMethodID(cls, "asList", "()Ljava/util/List;");
            mids$[mid_changed_f2cc1bce94666404] = env->getMethodID(cls, "changed", "()V");
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_clone_ecb6478d4be6f78b] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/SegmentInfos;");
            mids$[mid_commit_c51fd9fb1cf0392d] = env->getMethodID(cls, "commit", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_files_1e58293f3e39a94d] = env->getMethodID(cls, "files", "(Z)Ljava/util/Collection;");
            mids$[mid_generationFromSegmentsFileName_b1e05207ec98e246] = env->getStaticMethodID(cls, "generationFromSegmentsFileName", "(Ljava/lang/String;)J");
            mids$[mid_getCommitLuceneVersion_6b68647131bbda98] = env->getMethodID(cls, "getCommitLuceneVersion", "()Lorg/apache/lucene/util/Version;");
            mids$[mid_getGeneration_2e5ae9edcb9b072f] = env->getMethodID(cls, "getGeneration", "()J");
            mids$[mid_getId_cf386cdb1bbd339f] = env->getMethodID(cls, "getId", "()[B");
            mids$[mid_getIndexCreatedVersionMajor_9972fcc56b44e79d] = env->getMethodID(cls, "getIndexCreatedVersionMajor", "()I");
            mids$[mid_getInfoStream_ca93edb3fa5e382a] = env->getStaticMethodID(cls, "getInfoStream", "()Ljava/io/PrintStream;");
            mids$[mid_getLastCommitGeneration_2645a42e82b64cfd] = env->getStaticMethodID(cls, "getLastCommitGeneration", "([Ljava/lang/String;)J");
            mids$[mid_getLastCommitGeneration_1c7024a1b916813b] = env->getStaticMethodID(cls, "getLastCommitGeneration", "(Lorg/apache/lucene/store/Directory;)J");
            mids$[mid_getLastCommitSegmentsFileName_03dae215009b5a7f] = env->getStaticMethodID(cls, "getLastCommitSegmentsFileName", "([Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getLastCommitSegmentsFileName_903f3c17c153fcea] = env->getStaticMethodID(cls, "getLastCommitSegmentsFileName", "(Lorg/apache/lucene/store/Directory;)Ljava/lang/String;");
            mids$[mid_getLastGeneration_2e5ae9edcb9b072f] = env->getMethodID(cls, "getLastGeneration", "()J");
            mids$[mid_getMinSegmentLuceneVersion_6b68647131bbda98] = env->getMethodID(cls, "getMinSegmentLuceneVersion", "()Lorg/apache/lucene/util/Version;");
            mids$[mid_getSegmentsFileName_db9b55ba01e03e4b] = env->getMethodID(cls, "getSegmentsFileName", "()Ljava/lang/String;");
            mids$[mid_getUserData_1c3426541413a55d] = env->getMethodID(cls, "getUserData", "()Ljava/util/Map;");
            mids$[mid_getVersion_2e5ae9edcb9b072f] = env->getMethodID(cls, "getVersion", "()J");
            mids$[mid_info_17ae6f750dbaeb23] = env->getMethodID(cls, "info", "(I)Lorg/apache/lucene/index/SegmentCommitInfo;");
            mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_readCommit_dc2ddc5fb1272828] = env->getStaticMethodID(cls, "readCommit", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;)Lorg/apache/lucene/index/SegmentInfos;");
            mids$[mid_readCommit_178e290a82003bdc] = env->getStaticMethodID(cls, "readCommit", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/ChecksumIndexInput;J)Lorg/apache/lucene/index/SegmentInfos;");
            mids$[mid_readLatestCommit_8e40a1439832b534] = env->getStaticMethodID(cls, "readLatestCommit", "(Lorg/apache/lucene/store/Directory;)Lorg/apache/lucene/index/SegmentInfos;");
            mids$[mid_remove_1cbd6355ff4ad765] = env->getMethodID(cls, "remove", "(Lorg/apache/lucene/index/SegmentCommitInfo;)Z");
            mids$[mid_setInfoStream_51d7bcb97eea24e3] = env->getStaticMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;)V");
            mids$[mid_setNextWriteGeneration_9c778c9bce6694df] = env->getMethodID(cls, "setNextWriteGeneration", "(J)V");
            mids$[mid_setUserData_f2949932cebbb77f] = env->getMethodID(cls, "setUserData", "(Ljava/util/Map;Z)V");
            mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_totalMaxDoc_9972fcc56b44e79d] = env->getMethodID(cls, "totalMaxDoc", "()I");
            mids$[mid_updateGeneration_3f9b7fbda4d2a096] = env->getMethodID(cls, "updateGeneration", "(Lorg/apache/lucene/index/SegmentInfos;)V");
            mids$[mid_write_c832dc158b3caad3] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/IndexOutput;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_counter] = env->getFieldID(cls, "counter", "J");
            fids$[fid_userData] = env->getFieldID(cls, "userData", "Ljava/util/Map;");
            fids$[fid_version] = env->getFieldID(cls, "version", "J");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            VERSION_70 = env->getStaticIntField(cls, "VERSION_70");
            VERSION_72 = env->getStaticIntField(cls, "VERSION_72");
            VERSION_74 = env->getStaticIntField(cls, "VERSION_74");
            VERSION_86 = env->getStaticIntField(cls, "VERSION_86");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentInfos::SegmentInfos(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        void SegmentInfos::add(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7d313206bbb3a99e], a0.this$);
        }

        void SegmentInfos::addAll(const ::java::lang::Iterable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addAll_870d7079aa6e0153], a0.this$);
        }

        ::java::util::List SegmentInfos::asList() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_asList_49ec78390f08338a]));
        }

        void SegmentInfos::changed() const
        {
          env->callVoidMethod(this$, mids$[mid_changed_f2cc1bce94666404]);
        }

        void SegmentInfos::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
        }

        SegmentInfos SegmentInfos::clone() const
        {
          return SegmentInfos(env->callObjectMethod(this$, mids$[mid_clone_ecb6478d4be6f78b]));
        }

        void SegmentInfos::commit(const ::org::apache::lucene::store::Directory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_commit_c51fd9fb1cf0392d], a0.this$);
        }

        ::java::util::Collection SegmentInfos::files(jboolean a0) const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_files_1e58293f3e39a94d], a0));
        }

        jlong SegmentInfos::generationFromSegmentsFileName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_generationFromSegmentsFileName_b1e05207ec98e246], a0.this$);
        }

        ::org::apache::lucene::util::Version SegmentInfos::getCommitLuceneVersion() const
        {
          return ::org::apache::lucene::util::Version(env->callObjectMethod(this$, mids$[mid_getCommitLuceneVersion_6b68647131bbda98]));
        }

        jlong SegmentInfos::getGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getGeneration_2e5ae9edcb9b072f]);
        }

        JArray< jbyte > SegmentInfos::getId() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getId_cf386cdb1bbd339f]));
        }

        jint SegmentInfos::getIndexCreatedVersionMajor() const
        {
          return env->callIntMethod(this$, mids$[mid_getIndexCreatedVersionMajor_9972fcc56b44e79d]);
        }

        ::java::io::PrintStream SegmentInfos::getInfoStream()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::io::PrintStream(env->callStaticObjectMethod(cls, mids$[mid_getInfoStream_ca93edb3fa5e382a]));
        }

        jlong SegmentInfos::getLastCommitGeneration(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getLastCommitGeneration_2645a42e82b64cfd], a0.this$);
        }

        jlong SegmentInfos::getLastCommitGeneration(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getLastCommitGeneration_1c7024a1b916813b], a0.this$);
        }

        ::java::lang::String SegmentInfos::getLastCommitSegmentsFileName(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLastCommitSegmentsFileName_03dae215009b5a7f], a0.this$));
        }

        ::java::lang::String SegmentInfos::getLastCommitSegmentsFileName(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLastCommitSegmentsFileName_903f3c17c153fcea], a0.this$));
        }

        jlong SegmentInfos::getLastGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getLastGeneration_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::util::Version SegmentInfos::getMinSegmentLuceneVersion() const
        {
          return ::org::apache::lucene::util::Version(env->callObjectMethod(this$, mids$[mid_getMinSegmentLuceneVersion_6b68647131bbda98]));
        }

        ::java::lang::String SegmentInfos::getSegmentsFileName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSegmentsFileName_db9b55ba01e03e4b]));
        }

        ::java::util::Map SegmentInfos::getUserData() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getUserData_1c3426541413a55d]));
        }

        jlong SegmentInfos::getVersion() const
        {
          return env->callLongMethod(this$, mids$[mid_getVersion_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::index::SegmentCommitInfo SegmentInfos::info(jint a0) const
        {
          return ::org::apache::lucene::index::SegmentCommitInfo(env->callObjectMethod(this$, mids$[mid_info_17ae6f750dbaeb23], a0));
        }

        ::java::util::Iterator SegmentInfos::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
        }

        SegmentInfos SegmentInfos::readCommit(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return SegmentInfos(env->callStaticObjectMethod(cls, mids$[mid_readCommit_dc2ddc5fb1272828], a0.this$, a1.this$));
        }

        SegmentInfos SegmentInfos::readCommit(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::store::ChecksumIndexInput & a1, jlong a2)
        {
          jclass cls = env->getClass(initializeClass);
          return SegmentInfos(env->callStaticObjectMethod(cls, mids$[mid_readCommit_178e290a82003bdc], a0.this$, a1.this$, a2));
        }

        SegmentInfos SegmentInfos::readLatestCommit(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return SegmentInfos(env->callStaticObjectMethod(cls, mids$[mid_readLatestCommit_8e40a1439832b534], a0.this$));
        }

        jboolean SegmentInfos::remove(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_remove_1cbd6355ff4ad765], a0.this$);
        }

        void SegmentInfos::setInfoStream(const ::java::io::PrintStream & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setInfoStream_51d7bcb97eea24e3], a0.this$);
        }

        void SegmentInfos::setNextWriteGeneration(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextWriteGeneration_9c778c9bce6694df], a0);
        }

        void SegmentInfos::setUserData(const ::java::util::Map & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setUserData_f2949932cebbb77f], a0.this$, a1);
        }

        jint SegmentInfos::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
        }

        ::java::lang::String SegmentInfos::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jint SegmentInfos::totalMaxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_totalMaxDoc_9972fcc56b44e79d]);
        }

        void SegmentInfos::updateGeneration(const SegmentInfos & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_updateGeneration_3f9b7fbda4d2a096], a0.this$);
        }

        void SegmentInfos::write(const ::org::apache::lucene::store::IndexOutput & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_write_c832dc158b3caad3], a0.this$);
        }

        jlong SegmentInfos::_get_counter() const
        {
          return env->getLongField(this$, fids$[fid_counter]);
        }

        void SegmentInfos::_set_counter(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_counter], a0);
        }

        ::java::util::Map SegmentInfos::_get_userData() const
        {
          return ::java::util::Map(env->getObjectField(this$, fids$[fid_userData]));
        }

        void SegmentInfos::_set_userData(const ::java::util::Map & a0) const
        {
          env->setObjectField(this$, fids$[fid_userData], a0.this$);
        }

        jlong SegmentInfos::_get_version() const
        {
          return env->getLongField(this$, fids$[fid_version]);
        }

        void SegmentInfos::_set_version(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_version], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/SegmentInfos$FindSegmentsFile.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentInfos_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentInfos_init_(t_SegmentInfos *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentInfos_add(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_addAll(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_asList(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_changed(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_clear(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_clone(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_commit(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_files(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_generationFromSegmentsFileName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos_getCommitLuceneVersion(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getGeneration(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getId(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getIndexCreatedVersionMajor(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getInfoStream(PyTypeObject *type);
        static PyObject *t_SegmentInfos_getLastCommitGeneration(PyTypeObject *type, PyObject *args);
        static PyObject *t_SegmentInfos_getLastCommitSegmentsFileName(PyTypeObject *type, PyObject *args);
        static PyObject *t_SegmentInfos_getLastGeneration(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getMinSegmentLuceneVersion(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getSegmentsFileName(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getUserData(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getVersion(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_info(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_iterator(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_readCommit(PyTypeObject *type, PyObject *args);
        static PyObject *t_SegmentInfos_readLatestCommit(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos_remove(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_setInfoStream(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos_setNextWriteGeneration(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_setUserData(t_SegmentInfos *self, PyObject *args);
        static PyObject *t_SegmentInfos_size(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_toString(t_SegmentInfos *self, PyObject *args);
        static PyObject *t_SegmentInfos_totalMaxDoc(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_updateGeneration(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_write(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_get__counter(t_SegmentInfos *self, void *data);
        static int t_SegmentInfos_set__counter(t_SegmentInfos *self, PyObject *arg, void *data);

        static PyObject *t_SegmentInfos_get__commitLuceneVersion(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__generation(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__id(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__indexCreatedVersionMajor(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__infoStream(t_SegmentInfos *self, void *data);
        static int t_SegmentInfos_set__infoStream(t_SegmentInfos *self, PyObject *arg, void *data);
        static PyObject *t_SegmentInfos_get__lastGeneration(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__minSegmentLuceneVersion(t_SegmentInfos *self, void *data);
        static int t_SegmentInfos_set__nextWriteGeneration(t_SegmentInfos *self, PyObject *arg, void *data);
        static PyObject *t_SegmentInfos_get__segmentsFileName(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__userData(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__version(t_SegmentInfos *self, void *data);
        static PyGetSetDef t_SegmentInfos__fields_[] = {
          DECLARE_GETSET_FIELD(t_SegmentInfos, counter),
          DECLARE_GET_FIELD(t_SegmentInfos, commitLuceneVersion),
          DECLARE_GET_FIELD(t_SegmentInfos, generation),
          DECLARE_GET_FIELD(t_SegmentInfos, id),
          DECLARE_GET_FIELD(t_SegmentInfos, indexCreatedVersionMajor),
          DECLARE_GETSET_FIELD(t_SegmentInfos, infoStream),
          DECLARE_GET_FIELD(t_SegmentInfos, lastGeneration),
          DECLARE_GET_FIELD(t_SegmentInfos, minSegmentLuceneVersion),
          DECLARE_SET_FIELD(t_SegmentInfos, nextWriteGeneration),
          DECLARE_GET_FIELD(t_SegmentInfos, segmentsFileName),
          DECLARE_GET_FIELD(t_SegmentInfos, userData),
          DECLARE_GET_FIELD(t_SegmentInfos, version),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentInfos__methods_[] = {
          DECLARE_METHOD(t_SegmentInfos, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, add, METH_O),
          DECLARE_METHOD(t_SegmentInfos, addAll, METH_O),
          DECLARE_METHOD(t_SegmentInfos, asList, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, changed, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, clear, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, clone, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, commit, METH_O),
          DECLARE_METHOD(t_SegmentInfos, files, METH_O),
          DECLARE_METHOD(t_SegmentInfos, generationFromSegmentsFileName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getCommitLuceneVersion, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getGeneration, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getId, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getIndexCreatedVersionMajor, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getInfoStream, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getLastCommitGeneration, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getLastCommitSegmentsFileName, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getLastGeneration, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getMinSegmentLuceneVersion, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getSegmentsFileName, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getUserData, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getVersion, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, info, METH_O),
          DECLARE_METHOD(t_SegmentInfos, iterator, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, readCommit, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, readLatestCommit, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, remove, METH_O),
          DECLARE_METHOD(t_SegmentInfos, setInfoStream, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, setNextWriteGeneration, METH_O),
          DECLARE_METHOD(t_SegmentInfos, setUserData, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfos, size, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, toString, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfos, totalMaxDoc, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, updateGeneration, METH_O),
          DECLARE_METHOD(t_SegmentInfos, write, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SegmentInfos)[] = {
          { Py_tp_methods, t_SegmentInfos__methods_ },
          { Py_tp_init, (void *) t_SegmentInfos_init_ },
          { Py_tp_getset, t_SegmentInfos__fields_ },
          { Py_tp_iter, (void *) ((PyObject *(*)(t_SegmentInfos *)) get_iterator< t_SegmentInfos >) },
          { Py_tp_iternext, (void *) 0 },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SegmentInfos)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SegmentInfos, t_SegmentInfos, SegmentInfos);

        void t_SegmentInfos::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfos), &PY_TYPE_DEF(SegmentInfos), module, "SegmentInfos", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentInfos), "FindSegmentsFile", make_descriptor(&PY_TYPE_DEF(SegmentInfos$FindSegmentsFile)));
        }

        void t_SegmentInfos::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentInfos), "class_", make_descriptor(SegmentInfos::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentInfos), "wrapfn_", make_descriptor(t_SegmentInfos::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentInfos), "boxfn_", make_descriptor(boxObject));
          env->getClass(SegmentInfos::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentInfos), "VERSION_70", make_descriptor(SegmentInfos::VERSION_70));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentInfos), "VERSION_72", make_descriptor(SegmentInfos::VERSION_72));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentInfos), "VERSION_74", make_descriptor(SegmentInfos::VERSION_74));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentInfos), "VERSION_86", make_descriptor(SegmentInfos::VERSION_86));
        }

        static PyObject *t_SegmentInfos_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfos::initializeClass, 1)))
            return NULL;
          return t_SegmentInfos::wrap_Object(SegmentInfos(((t_SegmentInfos *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfos_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfos::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentInfos_init_(t_SegmentInfos *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          SegmentInfos object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = SegmentInfos(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentInfos_add(t_SegmentInfos *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_addAll(t_SegmentInfos *self, PyObject *arg)
        {
          ::java::lang::Iterable a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addAll(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addAll", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_asList(t_SegmentInfos *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.asList());
          return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(SegmentCommitInfo));
        }

        static PyObject *t_SegmentInfos_changed(t_SegmentInfos *self)
        {
          OBJ_CALL(self->object.changed());
          Py_RETURN_NONE;
        }

        static PyObject *t_SegmentInfos_clear(t_SegmentInfos *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_SegmentInfos_clone(t_SegmentInfos *self)
        {
          SegmentInfos result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_SegmentInfos::wrap_Object(result);
        }

        static PyObject *t_SegmentInfos_commit(t_SegmentInfos *self, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.commit(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "commit", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_files(t_SegmentInfos *self, PyObject *arg)
        {
          jboolean a0;
          ::java::util::Collection result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.files(a0));
            return ::java::util::t_Collection::wrap_Object(result, ::java::lang::PY_TYPE(String));
          }

          PyErr_SetArgsError((PyObject *) self, "files", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_generationFromSegmentsFileName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::generationFromSegmentsFileName(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "generationFromSegmentsFileName", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_getCommitLuceneVersion(t_SegmentInfos *self)
        {
          ::org::apache::lucene::util::Version result((jobject) NULL);
          OBJ_CALL(result = self->object.getCommitLuceneVersion());
          return ::org::apache::lucene::util::t_Version::wrap_Object(result);
        }

        static PyObject *t_SegmentInfos_getGeneration(t_SegmentInfos *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentInfos_getId(t_SegmentInfos *self)
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.getId());
          return result.wrap();
        }

        static PyObject *t_SegmentInfos_getIndexCreatedVersionMajor(t_SegmentInfos *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getIndexCreatedVersionMajor());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_SegmentInfos_getInfoStream(PyTypeObject *type)
        {
          ::java::io::PrintStream result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getInfoStream());
          return ::java::io::t_PrintStream::wrap_Object(result);
        }

        static PyObject *t_SegmentInfos_getLastCommitGeneration(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getLastCommitGeneration(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getLastCommitGeneration(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "getLastCommitGeneration", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_getLastCommitSegmentsFileName(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getLastCommitSegmentsFileName(a0));
                return j2p(result);
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getLastCommitSegmentsFileName(a0));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError(type, "getLastCommitSegmentsFileName", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_getLastGeneration(t_SegmentInfos *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getLastGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentInfos_getMinSegmentLuceneVersion(t_SegmentInfos *self)
        {
          ::org::apache::lucene::util::Version result((jobject) NULL);
          OBJ_CALL(result = self->object.getMinSegmentLuceneVersion());
          return ::org::apache::lucene::util::t_Version::wrap_Object(result);
        }

        static PyObject *t_SegmentInfos_getSegmentsFileName(t_SegmentInfos *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentsFileName());
          return j2p(result);
        }

        static PyObject *t_SegmentInfos_getUserData(t_SegmentInfos *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getUserData());
          return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentInfos_getVersion(t_SegmentInfos *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentInfos_info(t_SegmentInfos *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::index::SegmentCommitInfo result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.info(a0));
            return ::org::apache::lucene::index::t_SegmentCommitInfo::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "info", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_iterator(t_SegmentInfos *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(SegmentCommitInfo));
        }

        static PyObject *t_SegmentInfos_readCommit(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              SegmentInfos result((jobject) NULL);

              if (!parseArgs(args, "ks", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::readCommit(a0, a1));
                return t_SegmentInfos::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::store::ChecksumIndexInput a1((jobject) NULL);
              jlong a2;
              SegmentInfos result((jobject) NULL);

              if (!parseArgs(args, "kkJ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::ChecksumIndexInput::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::readCommit(a0, a1, a2));
                return t_SegmentInfos::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "readCommit", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_readLatestCommit(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          SegmentInfos result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::readLatestCommit(a0));
            return t_SegmentInfos::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "readLatestCommit", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_remove(t_SegmentInfos *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.remove(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "remove", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_setInfoStream(PyTypeObject *type, PyObject *arg)
        {
          ::java::io::PrintStream a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::SegmentInfos::setInfoStream(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setInfoStream", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_setNextWriteGeneration(t_SegmentInfos *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.setNextWriteGeneration(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNextWriteGeneration", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_setUserData(t_SegmentInfos *self, PyObject *args)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean a1;

          if (!parseArgs(args, "KZ", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
          {
            OBJ_CALL(self->object.setUserData(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setUserData", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_size(t_SegmentInfos *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_SegmentInfos_toString(t_SegmentInfos *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(SegmentInfos), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SegmentInfos_totalMaxDoc(t_SegmentInfos *self)
        {
          jint result;
          OBJ_CALL(result = self->object.totalMaxDoc());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_SegmentInfos_updateGeneration(t_SegmentInfos *self, PyObject *arg)
        {
          SegmentInfos a0((jobject) NULL);

          if (!parseArg(arg, "k", SegmentInfos::initializeClass, &a0))
          {
            OBJ_CALL(self->object.updateGeneration(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "updateGeneration", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_write(t_SegmentInfos *self, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "write", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_get__counter(t_SegmentInfos *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_counter());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_SegmentInfos_set__counter(t_SegmentInfos *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_counter(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "counter", arg);
          return -1;
        }

        static PyObject *t_SegmentInfos_get__commitLuceneVersion(t_SegmentInfos *self, void *data)
        {
          ::org::apache::lucene::util::Version value((jobject) NULL);
          OBJ_CALL(value = self->object.getCommitLuceneVersion());
          return ::org::apache::lucene::util::t_Version::wrap_Object(value);
        }

        static PyObject *t_SegmentInfos_get__generation(t_SegmentInfos *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentInfos_get__id(t_SegmentInfos *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getId());
          return value.wrap();
        }

        static PyObject *t_SegmentInfos_get__indexCreatedVersionMajor(t_SegmentInfos *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getIndexCreatedVersionMajor());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_SegmentInfos_get__infoStream(t_SegmentInfos *self, void *data)
        {
          ::java::io::PrintStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getInfoStream());
          return ::java::io::t_PrintStream::wrap_Object(value);
        }
        static int t_SegmentInfos_set__infoStream(t_SegmentInfos *self, PyObject *arg, void *data)
        {
          {
            ::java::io::PrintStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "infoStream", arg);
          return -1;
        }

        static PyObject *t_SegmentInfos_get__lastGeneration(t_SegmentInfos *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getLastGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentInfos_get__minSegmentLuceneVersion(t_SegmentInfos *self, void *data)
        {
          ::org::apache::lucene::util::Version value((jobject) NULL);
          OBJ_CALL(value = self->object.getMinSegmentLuceneVersion());
          return ::org::apache::lucene::util::t_Version::wrap_Object(value);
        }

        static int t_SegmentInfos_set__nextWriteGeneration(t_SegmentInfos *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setNextWriteGeneration(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextWriteGeneration", arg);
          return -1;
        }

        static PyObject *t_SegmentInfos_get__segmentsFileName(t_SegmentInfos *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentsFileName());
          return j2p(value);
        }

        static PyObject *t_SegmentInfos_get__userData(t_SegmentInfos *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getUserData());
          return ::java::util::t_Map::wrap_Object(value);
        }

        static PyObject *t_SegmentInfos_get__version(t_SegmentInfos *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexNotFoundException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexNotFoundException::class$ = NULL;
        jmethodID *IndexNotFoundException::mids$ = NULL;
        bool IndexNotFoundException::live$ = false;

        jclass IndexNotFoundException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexNotFoundException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexNotFoundException::IndexNotFoundException(const ::java::lang::String & a0) : ::java::io::FileNotFoundException(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexNotFoundException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexNotFoundException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexNotFoundException_init_(t_IndexNotFoundException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IndexNotFoundException__methods_[] = {
          DECLARE_METHOD(t_IndexNotFoundException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexNotFoundException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexNotFoundException)[] = {
          { Py_tp_methods, t_IndexNotFoundException__methods_ },
          { Py_tp_init, (void *) t_IndexNotFoundException_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexNotFoundException)[] = {
          &PY_TYPE_DEF(::java::io::FileNotFoundException),
          NULL
        };

        DEFINE_TYPE(IndexNotFoundException, t_IndexNotFoundException, IndexNotFoundException);

        void t_IndexNotFoundException::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexNotFoundException), &PY_TYPE_DEF(IndexNotFoundException), module, "IndexNotFoundException", 0);
        }

        void t_IndexNotFoundException::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexNotFoundException), "class_", make_descriptor(IndexNotFoundException::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexNotFoundException), "wrapfn_", make_descriptor(t_IndexNotFoundException::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexNotFoundException), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexNotFoundException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexNotFoundException::initializeClass, 1)))
            return NULL;
          return t_IndexNotFoundException::wrap_Object(IndexNotFoundException(((t_IndexNotFoundException *) arg)->object.this$));
        }
        static PyObject *t_IndexNotFoundException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexNotFoundException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexNotFoundException_init_(t_IndexNotFoundException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          IndexNotFoundException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = IndexNotFoundException(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/DrillSideways$DrillSidewaysResult.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/facet/Facets.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *DrillSideways$DrillSidewaysResult::class$ = NULL;
        jmethodID *DrillSideways$DrillSidewaysResult::mids$ = NULL;
        jfieldID *DrillSideways$DrillSidewaysResult::fids$ = NULL;
        bool DrillSideways$DrillSidewaysResult::live$ = false;

        jclass DrillSideways$DrillSidewaysResult::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/DrillSideways$DrillSidewaysResult");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_eaaf3267148bf8ab] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/Facets;Lorg/apache/lucene/search/TopDocs;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_facets] = env->getFieldID(cls, "facets", "Lorg/apache/lucene/facet/Facets;");
            fids$[fid_hits] = env->getFieldID(cls, "hits", "Lorg/apache/lucene/search/TopDocs;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DrillSideways$DrillSidewaysResult::DrillSideways$DrillSidewaysResult(const ::org::apache::lucene::facet::Facets & a0, const ::org::apache::lucene::search::TopDocs & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_eaaf3267148bf8ab, a0.this$, a1.this$)) {}

        ::org::apache::lucene::facet::Facets DrillSideways$DrillSidewaysResult::_get_facets() const
        {
          return ::org::apache::lucene::facet::Facets(env->getObjectField(this$, fids$[fid_facets]));
        }

        ::org::apache::lucene::search::TopDocs DrillSideways$DrillSidewaysResult::_get_hits() const
        {
          return ::org::apache::lucene::search::TopDocs(env->getObjectField(this$, fids$[fid_hits]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_DrillSideways$DrillSidewaysResult_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DrillSideways$DrillSidewaysResult_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DrillSideways$DrillSidewaysResult_init_(t_DrillSideways$DrillSidewaysResult *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DrillSideways$DrillSidewaysResult_get__facets(t_DrillSideways$DrillSidewaysResult *self, void *data);
        static PyObject *t_DrillSideways$DrillSidewaysResult_get__hits(t_DrillSideways$DrillSidewaysResult *self, void *data);

        static PyGetSetDef t_DrillSideways$DrillSidewaysResult__fields_[] = {
          DECLARE_GET_FIELD(t_DrillSideways$DrillSidewaysResult, facets),
          DECLARE_GET_FIELD(t_DrillSideways$DrillSidewaysResult, hits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DrillSideways$DrillSidewaysResult__methods_[] = {
          DECLARE_METHOD(t_DrillSideways$DrillSidewaysResult, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillSideways$DrillSidewaysResult, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DrillSideways$DrillSidewaysResult)[] = {
          { Py_tp_methods, t_DrillSideways$DrillSidewaysResult__methods_ },
          { Py_tp_init, (void *) t_DrillSideways$DrillSidewaysResult_init_ },
          { Py_tp_getset, t_DrillSideways$DrillSidewaysResult__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DrillSideways$DrillSidewaysResult)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DrillSideways$DrillSidewaysResult, t_DrillSideways$DrillSidewaysResult, DrillSideways$DrillSidewaysResult);

        void t_DrillSideways$DrillSidewaysResult::install(PyObject *module)
        {
          installType(&PY_TYPE(DrillSideways$DrillSidewaysResult), &PY_TYPE_DEF(DrillSideways$DrillSidewaysResult), module, "DrillSideways$DrillSidewaysResult", 0);
        }

        void t_DrillSideways$DrillSidewaysResult::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DrillSideways$DrillSidewaysResult), "class_", make_descriptor(DrillSideways$DrillSidewaysResult::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DrillSideways$DrillSidewaysResult), "wrapfn_", make_descriptor(t_DrillSideways$DrillSidewaysResult::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DrillSideways$DrillSidewaysResult), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DrillSideways$DrillSidewaysResult_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DrillSideways$DrillSidewaysResult::initializeClass, 1)))
            return NULL;
          return t_DrillSideways$DrillSidewaysResult::wrap_Object(DrillSideways$DrillSidewaysResult(((t_DrillSideways$DrillSidewaysResult *) arg)->object.this$));
        }
        static PyObject *t_DrillSideways$DrillSidewaysResult_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DrillSideways$DrillSidewaysResult::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DrillSideways$DrillSidewaysResult_init_(t_DrillSideways$DrillSidewaysResult *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::facet::Facets a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          DrillSideways$DrillSidewaysResult object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::facet::Facets::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1))
          {
            INT_CALL(object = DrillSideways$DrillSidewaysResult(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DrillSideways$DrillSidewaysResult_get__facets(t_DrillSideways$DrillSidewaysResult *self, void *data)
        {
          ::org::apache::lucene::facet::Facets value((jobject) NULL);
          OBJ_CALL(value = self->object._get_facets());
          return ::org::apache::lucene::facet::t_Facets::wrap_Object(value);
        }

        static PyObject *t_DrillSideways$DrillSidewaysResult_get__hits(t_DrillSideways$DrillSidewaysResult *self, void *data)
        {
          ::org::apache::lucene::search::TopDocs value((jobject) NULL);
          OBJ_CALL(value = self->object._get_hits());
          return ::org::apache::lucene::search::t_TopDocs::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/similarities/PythonSimilarity.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *PythonSimilarity::class$ = NULL;
          jmethodID *PythonSimilarity::mids$ = NULL;
          bool PythonSimilarity::live$ = false;

          jclass PythonSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/similarities/PythonSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ec3269102920d7a] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");
              mids$[mid_scorer_a010a2835e08a10c] = env->getMethodID(cls, "scorer", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonSimilarity::PythonSimilarity() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void PythonSimilarity::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
          }

          jlong PythonSimilarity::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
          }

          void PythonSimilarity::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/pylucene/search/similarities/PythonSimilarity$PythonSimScorer.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace similarities {
          static PyObject *t_PythonSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonSimilarity_init_(t_PythonSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonSimilarity_finalize(t_PythonSimilarity *self);
          static PyObject *t_PythonSimilarity_pythonExtension(t_PythonSimilarity *self, PyObject *args);
          static jlong JNICALL t_PythonSimilarity_computeNorm0(JNIEnv *jenv, jobject jobj, jobject a0);
          static void JNICALL t_PythonSimilarity_pythonDecRef1(JNIEnv *jenv, jobject jobj);
          static jobject JNICALL t_PythonSimilarity_scorer2(JNIEnv *jenv, jobject jobj, jfloat a0, jobject a1, jobject a2);
          static PyObject *t_PythonSimilarity_get__self(t_PythonSimilarity *self, void *data);
          static PyGetSetDef t_PythonSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_PythonSimilarity, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonSimilarity__methods_[] = {
            DECLARE_METHOD(t_PythonSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonSimilarity, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonSimilarity, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PythonSimilarity)[] = {
            { Py_tp_methods, t_PythonSimilarity__methods_ },
            { Py_tp_init, (void *) t_PythonSimilarity_init_ },
            { Py_tp_getset, t_PythonSimilarity__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PythonSimilarity)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Similarity),
            NULL
          };

          DEFINE_TYPE(PythonSimilarity, t_PythonSimilarity, PythonSimilarity);

          void t_PythonSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonSimilarity), &PY_TYPE_DEF(PythonSimilarity), module, "PythonSimilarity", 1);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonSimilarity), "PythonSimScorer", make_descriptor(&PY_TYPE_DEF(PythonSimilarity$PythonSimScorer)));
          }

          void t_PythonSimilarity::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonSimilarity), "class_", make_descriptor(PythonSimilarity::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonSimilarity), "wrapfn_", make_descriptor(t_PythonSimilarity::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonSimilarity), "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonSimilarity::initializeClass);
            JNINativeMethod methods[] = {
              { "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J", (void *) t_PythonSimilarity_computeNorm0 },
              { "pythonDecRef", "()V", (void *) t_PythonSimilarity_pythonDecRef1 },
              { "scorer", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;", (void *) t_PythonSimilarity_scorer2 },
            };
            env->registerNatives(cls, methods, 3);
          }

          static PyObject *t_PythonSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonSimilarity::initializeClass, 1)))
              return NULL;
            return t_PythonSimilarity::wrap_Object(PythonSimilarity(((t_PythonSimilarity *) arg)->object.this$));
          }
          static PyObject *t_PythonSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonSimilarity_init_(t_PythonSimilarity *self, PyObject *args, PyObject *kwds)
          {
            PythonSimilarity object((jobject) NULL);

            INT_CALL(object = PythonSimilarity());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonSimilarity_finalize(t_PythonSimilarity *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonSimilarity_pythonExtension(t_PythonSimilarity *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jlong JNICALL t_PythonSimilarity_computeNorm0(JNIEnv *jenv, jobject jobj, jobject a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSimilarity::mids$[PythonSimilarity::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jlong value;
            PyObject *o0 = ::org::apache::lucene::index::t_FieldInvertState::wrap_Object(::org::apache::lucene::index::FieldInvertState(a0));
            PyObject *result = PyObject_CallMethod(obj, "computeNorm", "O", o0);
            Py_DECREF(o0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "J", &value))
            {
              throwTypeError("computeNorm", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jlong) 0;
          }

          static void JNICALL t_PythonSimilarity_pythonDecRef1(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSimilarity::mids$[PythonSimilarity::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonSimilarity::mids$[PythonSimilarity::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static jobject JNICALL t_PythonSimilarity_scorer2(JNIEnv *jenv, jobject jobj, jfloat a0, jobject a1, jobject a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSimilarity::mids$[PythonSimilarity::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer value((jobject) NULL);
            PyObject *o1 = ::org::apache::lucene::search::t_CollectionStatistics::wrap_Object(::org::apache::lucene::search::CollectionStatistics(a1));
            PyObject *o2 = JArray<jobject>(a2).wrap(::org::apache::lucene::search::t_TermStatistics::wrap_jobject);
            PyObject *result = PyObject_CallMethod(obj, "scorer", "fOO", (float) a0, o1, o2);
            Py_DECREF(o1);
            Py_DECREF(o2);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::similarities::Similarity$SimScorer::initializeClass, &value))
            {
              throwTypeError("scorer", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static PyObject *t_PythonSimilarity_get__self(t_PythonSimilarity *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/TermVectorLeafReader.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/PointValues.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafMetaData.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/IndexReader$CacheHelper.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *TermVectorLeafReader::class$ = NULL;
          jmethodID *TermVectorLeafReader::mids$ = NULL;
          bool TermVectorLeafReader::live$ = false;

          jclass TermVectorLeafReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/TermVectorLeafReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ba8cc55c7bf534a9] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/index/Terms;)V");
              mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_document_8f45e7464506ed2f] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
              mids$[mid_getBinaryDocValues_6cf59c3533d4df22] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
              mids$[mid_getCoreCacheHelper_a64c414fea9a8cf6] = env->getMethodID(cls, "getCoreCacheHelper", "()Lorg/apache/lucene/index/IndexReader$CacheHelper;");
              mids$[mid_getFieldInfos_f76601004b1c139b] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
              mids$[mid_getLiveDocs_ad87da2b626b21cf] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
              mids$[mid_getMetaData_07168aa94cc70619] = env->getMethodID(cls, "getMetaData", "()Lorg/apache/lucene/index/LeafMetaData;");
              mids$[mid_getNormValues_2b2c87c24a70ef49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
              mids$[mid_getNumericDocValues_2b2c87c24a70ef49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
              mids$[mid_getPointValues_72b990dbae0eea09] = env->getMethodID(cls, "getPointValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/PointValues;");
              mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6] = env->getMethodID(cls, "getReaderCacheHelper", "()Lorg/apache/lucene/index/IndexReader$CacheHelper;");
              mids$[mid_getSortedDocValues_adb16e9c5e3d9604] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
              mids$[mid_getSortedNumericDocValues_25e77b19828c4dfa] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
              mids$[mid_getSortedSetDocValues_379820f082b251eb] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
              mids$[mid_getTermVectors_9997c94b783ad8be] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
              mids$[mid_maxDoc_9972fcc56b44e79d] = env->getMethodID(cls, "maxDoc", "()I");
              mids$[mid_numDocs_9972fcc56b44e79d] = env->getMethodID(cls, "numDocs", "()I");
              mids$[mid_terms_3976802ad88273cd] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
              mids$[mid_doClose_f2cc1bce94666404] = env->getMethodID(cls, "doClose", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TermVectorLeafReader::TermVectorLeafReader(const ::java::lang::String & a0, const ::org::apache::lucene::index::Terms & a1) : ::org::apache::lucene::index::LeafReader(env->newObject(initializeClass, &mids$, mid_init$_ba8cc55c7bf534a9, a0.this$, a1.this$)) {}

          void TermVectorLeafReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
          }

          void TermVectorLeafReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_document_8f45e7464506ed2f], a0, a1.this$);
          }

          ::org::apache::lucene::index::BinaryDocValues TermVectorLeafReader::getBinaryDocValues(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_6cf59c3533d4df22], a0.this$));
          }

          ::org::apache::lucene::index::IndexReader$CacheHelper TermVectorLeafReader::getCoreCacheHelper() const
          {
            return ::org::apache::lucene::index::IndexReader$CacheHelper(env->callObjectMethod(this$, mids$[mid_getCoreCacheHelper_a64c414fea9a8cf6]));
          }

          ::org::apache::lucene::index::FieldInfos TermVectorLeafReader::getFieldInfos() const
          {
            return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_f76601004b1c139b]));
          }

          ::org::apache::lucene::util::Bits TermVectorLeafReader::getLiveDocs() const
          {
            return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_ad87da2b626b21cf]));
          }

          ::org::apache::lucene::index::LeafMetaData TermVectorLeafReader::getMetaData() const
          {
            return ::org::apache::lucene::index::LeafMetaData(env->callObjectMethod(this$, mids$[mid_getMetaData_07168aa94cc70619]));
          }

          ::org::apache::lucene::index::NumericDocValues TermVectorLeafReader::getNormValues(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_2b2c87c24a70ef49], a0.this$));
          }

          ::org::apache::lucene::index::NumericDocValues TermVectorLeafReader::getNumericDocValues(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_2b2c87c24a70ef49], a0.this$));
          }

          ::org::apache::lucene::index::PointValues TermVectorLeafReader::getPointValues(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::PointValues(env->callObjectMethod(this$, mids$[mid_getPointValues_72b990dbae0eea09], a0.this$));
          }

          ::org::apache::lucene::index::IndexReader$CacheHelper TermVectorLeafReader::getReaderCacheHelper() const
          {
            return ::org::apache::lucene::index::IndexReader$CacheHelper(env->callObjectMethod(this$, mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6]));
          }

          ::org::apache::lucene::index::SortedDocValues TermVectorLeafReader::getSortedDocValues(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_adb16e9c5e3d9604], a0.this$));
          }

          ::org::apache::lucene::index::SortedNumericDocValues TermVectorLeafReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_25e77b19828c4dfa], a0.this$));
          }

          ::org::apache::lucene::index::SortedSetDocValues TermVectorLeafReader::getSortedSetDocValues(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_379820f082b251eb], a0.this$));
          }

          ::org::apache::lucene::index::Fields TermVectorLeafReader::getTermVectors(jint a0) const
          {
            return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_9997c94b783ad8be], a0));
          }

          jint TermVectorLeafReader::maxDoc() const
          {
            return env->callIntMethod(this$, mids$[mid_maxDoc_9972fcc56b44e79d]);
          }

          jint TermVectorLeafReader::numDocs() const
          {
            return env->callIntMethod(this$, mids$[mid_numDocs_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::index::Terms TermVectorLeafReader::terms(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_3976802ad88273cd], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_TermVectorLeafReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermVectorLeafReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TermVectorLeafReader_init_(t_TermVectorLeafReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TermVectorLeafReader_checkIntegrity(t_TermVectorLeafReader *self, PyObject *args);
          static PyObject *t_TermVectorLeafReader_document(t_TermVectorLeafReader *self, PyObject *args);
          static PyObject *t_TermVectorLeafReader_getBinaryDocValues(t_TermVectorLeafReader *self, PyObject *args);
          static PyObject *t_TermVectorLeafReader_getCoreCacheHelper(t_TermVectorLeafReader *self, PyObject *args);
          static PyObject *t_TermVectorLeafReader_getFieldInfos(t_TermVectorLeafReader *self, PyObject *args);
          static PyObject *t_TermVectorLeafReader_getLiveDocs(t_TermVectorLeafReader *self, PyObject *args);
          static PyObject *t_TermVectorLeafReader_getMetaData(t_TermVectorLeafReader *self, PyObject *args);
          static PyObject *t_TermVectorLeafReader_getNormValues(t_TermVectorLeafReader *self, PyObject *args);
          static PyObject *t_TermVectorLeafReader_getNumericDocValues(t_TermVectorLeafReader *self, PyObject *args);
          static PyObject *t_TermVectorLeafReader_getPointValues(t_TermVectorLeafReader *self, PyObject *args);
          static PyObject *t_TermVectorLeafReader_getReaderCacheHelper(t_TermVectorLeafReader *self, PyObject *args);
          static PyObject *t_TermVectorLeafReader_getSortedDocValues(t_TermVectorLeafReader *self, PyObject *args);
          static PyObject *t_TermVectorLeafReader_getSortedNumericDocValues(t_TermVectorLeafReader *self, PyObject *args);
          static PyObject *t_TermVectorLeafReader_getSortedSetDocValues(t_TermVectorLeafReader *self, PyObject *args);
          static PyObject *t_TermVectorLeafReader_getTermVectors(t_TermVectorLeafReader *self, PyObject *args);
          static PyObject *t_TermVectorLeafReader_maxDoc(t_TermVectorLeafReader *self, PyObject *args);
          static PyObject *t_TermVectorLeafReader_numDocs(t_TermVectorLeafReader *self, PyObject *args);
          static PyObject *t_TermVectorLeafReader_terms(t_TermVectorLeafReader *self, PyObject *args);
          static PyObject *t_TermVectorLeafReader_get__coreCacheHelper(t_TermVectorLeafReader *self, void *data);
          static PyObject *t_TermVectorLeafReader_get__fieldInfos(t_TermVectorLeafReader *self, void *data);
          static PyObject *t_TermVectorLeafReader_get__liveDocs(t_TermVectorLeafReader *self, void *data);
          static PyObject *t_TermVectorLeafReader_get__metaData(t_TermVectorLeafReader *self, void *data);
          static PyObject *t_TermVectorLeafReader_get__readerCacheHelper(t_TermVectorLeafReader *self, void *data);
          static PyGetSetDef t_TermVectorLeafReader__fields_[] = {
            DECLARE_GET_FIELD(t_TermVectorLeafReader, coreCacheHelper),
            DECLARE_GET_FIELD(t_TermVectorLeafReader, fieldInfos),
            DECLARE_GET_FIELD(t_TermVectorLeafReader, liveDocs),
            DECLARE_GET_FIELD(t_TermVectorLeafReader, metaData),
            DECLARE_GET_FIELD(t_TermVectorLeafReader, readerCacheHelper),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TermVectorLeafReader__methods_[] = {
            DECLARE_METHOD(t_TermVectorLeafReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermVectorLeafReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermVectorLeafReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_TermVectorLeafReader, document, METH_VARARGS),
            DECLARE_METHOD(t_TermVectorLeafReader, getBinaryDocValues, METH_VARARGS),
            DECLARE_METHOD(t_TermVectorLeafReader, getCoreCacheHelper, METH_VARARGS),
            DECLARE_METHOD(t_TermVectorLeafReader, getFieldInfos, METH_VARARGS),
            DECLARE_METHOD(t_TermVectorLeafReader, getLiveDocs, METH_VARARGS),
            DECLARE_METHOD(t_TermVectorLeafReader, getMetaData, METH_VARARGS),
            DECLARE_METHOD(t_TermVectorLeafReader, getNormValues, METH_VARARGS),
            DECLARE_METHOD(t_TermVectorLeafReader, getNumericDocValues, METH_VARARGS),
            DECLARE_METHOD(t_TermVectorLeafReader, getPointValues, METH_VARARGS),
            DECLARE_METHOD(t_TermVectorLeafReader, getReaderCacheHelper, METH_VARARGS),
            DECLARE_METHOD(t_TermVectorLeafReader, getSortedDocValues, METH_VARARGS),
            DECLARE_METHOD(t_TermVectorLeafReader, getSortedNumericDocValues, METH_VARARGS),
            DECLARE_METHOD(t_TermVectorLeafReader, getSortedSetDocValues, METH_VARARGS),
            DECLARE_METHOD(t_TermVectorLeafReader, getTermVectors, METH_VARARGS),
            DECLARE_METHOD(t_TermVectorLeafReader, maxDoc, METH_VARARGS),
            DECLARE_METHOD(t_TermVectorLeafReader, numDocs, METH_VARARGS),
            DECLARE_METHOD(t_TermVectorLeafReader, terms, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TermVectorLeafReader)[] = {
            { Py_tp_methods, t_TermVectorLeafReader__methods_ },
            { Py_tp_init, (void *) t_TermVectorLeafReader_init_ },
            { Py_tp_getset, t_TermVectorLeafReader__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TermVectorLeafReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::index::LeafReader),
            NULL
          };

          DEFINE_TYPE(TermVectorLeafReader, t_TermVectorLeafReader, TermVectorLeafReader);

          void t_TermVectorLeafReader::install(PyObject *module)
          {
            installType(&PY_TYPE(TermVectorLeafReader), &PY_TYPE_DEF(TermVectorLeafReader), module, "TermVectorLeafReader", 0);
          }

          void t_TermVectorLeafReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermVectorLeafReader), "class_", make_descriptor(TermVectorLeafReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermVectorLeafReader), "wrapfn_", make_descriptor(t_TermVectorLeafReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermVectorLeafReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermVectorLeafReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermVectorLeafReader::initializeClass, 1)))
              return NULL;
            return t_TermVectorLeafReader::wrap_Object(TermVectorLeafReader(((t_TermVectorLeafReader *) arg)->object.this$));
          }
          static PyObject *t_TermVectorLeafReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermVectorLeafReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TermVectorLeafReader_init_(t_TermVectorLeafReader *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::Terms a1((jobject) NULL);
            TermVectorLeafReader object((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::index::Terms::initializeClass, &a0, &a1))
            {
              INT_CALL(object = TermVectorLeafReader(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TermVectorLeafReader_checkIntegrity(t_TermVectorLeafReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(TermVectorLeafReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_TermVectorLeafReader_document(t_TermVectorLeafReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.document(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(TermVectorLeafReader), (PyObject *) self, "document", args, 2);
          }

          static PyObject *t_TermVectorLeafReader_getBinaryDocValues(t_TermVectorLeafReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.getBinaryDocValues(a0));
              return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TermVectorLeafReader), (PyObject *) self, "getBinaryDocValues", args, 2);
          }

          static PyObject *t_TermVectorLeafReader_getCoreCacheHelper(t_TermVectorLeafReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader$CacheHelper result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getCoreCacheHelper());
              return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TermVectorLeafReader), (PyObject *) self, "getCoreCacheHelper", args, 2);
          }

          static PyObject *t_TermVectorLeafReader_getFieldInfos(t_TermVectorLeafReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfos());
              return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TermVectorLeafReader), (PyObject *) self, "getFieldInfos", args, 2);
          }

          static PyObject *t_TermVectorLeafReader_getLiveDocs(t_TermVectorLeafReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::Bits result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getLiveDocs());
              return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TermVectorLeafReader), (PyObject *) self, "getLiveDocs", args, 2);
          }

          static PyObject *t_TermVectorLeafReader_getMetaData(t_TermVectorLeafReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafMetaData result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMetaData());
              return ::org::apache::lucene::index::t_LeafMetaData::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TermVectorLeafReader), (PyObject *) self, "getMetaData", args, 2);
          }

          static PyObject *t_TermVectorLeafReader_getNormValues(t_TermVectorLeafReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.getNormValues(a0));
              return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TermVectorLeafReader), (PyObject *) self, "getNormValues", args, 2);
          }

          static PyObject *t_TermVectorLeafReader_getNumericDocValues(t_TermVectorLeafReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.getNumericDocValues(a0));
              return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TermVectorLeafReader), (PyObject *) self, "getNumericDocValues", args, 2);
          }

          static PyObject *t_TermVectorLeafReader_getPointValues(t_TermVectorLeafReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::PointValues result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPointValues(a0));
              return ::org::apache::lucene::index::t_PointValues::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TermVectorLeafReader), (PyObject *) self, "getPointValues", args, 2);
          }

          static PyObject *t_TermVectorLeafReader_getReaderCacheHelper(t_TermVectorLeafReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader$CacheHelper result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getReaderCacheHelper());
              return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TermVectorLeafReader), (PyObject *) self, "getReaderCacheHelper", args, 2);
          }

          static PyObject *t_TermVectorLeafReader_getSortedDocValues(t_TermVectorLeafReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.getSortedDocValues(a0));
              return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TermVectorLeafReader), (PyObject *) self, "getSortedDocValues", args, 2);
          }

          static PyObject *t_TermVectorLeafReader_getSortedNumericDocValues(t_TermVectorLeafReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
              return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TermVectorLeafReader), (PyObject *) self, "getSortedNumericDocValues", args, 2);
          }

          static PyObject *t_TermVectorLeafReader_getSortedSetDocValues(t_TermVectorLeafReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
              return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TermVectorLeafReader), (PyObject *) self, "getSortedSetDocValues", args, 2);
          }

          static PyObject *t_TermVectorLeafReader_getTermVectors(t_TermVectorLeafReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::Fields result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getTermVectors(a0));
              return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TermVectorLeafReader), (PyObject *) self, "getTermVectors", args, 2);
          }

          static PyObject *t_TermVectorLeafReader_maxDoc(t_TermVectorLeafReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.maxDoc());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(TermVectorLeafReader), (PyObject *) self, "maxDoc", args, 2);
          }

          static PyObject *t_TermVectorLeafReader_numDocs(t_TermVectorLeafReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.numDocs());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(TermVectorLeafReader), (PyObject *) self, "numDocs", args, 2);
          }

          static PyObject *t_TermVectorLeafReader_terms(t_TermVectorLeafReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::Terms result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.terms(a0));
              return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TermVectorLeafReader), (PyObject *) self, "terms", args, 2);
          }

          static PyObject *t_TermVectorLeafReader_get__coreCacheHelper(t_TermVectorLeafReader *self, void *data)
          {
            ::org::apache::lucene::index::IndexReader$CacheHelper value((jobject) NULL);
            OBJ_CALL(value = self->object.getCoreCacheHelper());
            return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(value);
          }

          static PyObject *t_TermVectorLeafReader_get__fieldInfos(t_TermVectorLeafReader *self, void *data)
          {
            ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfos());
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
          }

          static PyObject *t_TermVectorLeafReader_get__liveDocs(t_TermVectorLeafReader *self, void *data)
          {
            ::org::apache::lucene::util::Bits value((jobject) NULL);
            OBJ_CALL(value = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
          }

          static PyObject *t_TermVectorLeafReader_get__metaData(t_TermVectorLeafReader *self, void *data)
          {
            ::org::apache::lucene::index::LeafMetaData value((jobject) NULL);
            OBJ_CALL(value = self->object.getMetaData());
            return ::org::apache::lucene::index::t_LeafMetaData::wrap_Object(value);
          }

          static PyObject *t_TermVectorLeafReader_get__readerCacheHelper(t_TermVectorLeafReader *self, void *data)
          {
            ::org::apache::lucene::index::IndexReader$CacheHelper value((jobject) NULL);
            OBJ_CALL(value = self->object.getReaderCacheHelper());
            return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/NGramPhraseQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *NGramPhraseQuery::class$ = NULL;
        jmethodID *NGramPhraseQuery::mids$ = NULL;
        bool NGramPhraseQuery::live$ = false;

        jclass NGramPhraseQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/NGramPhraseQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_020fb847f2a0877d] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/search/PhraseQuery;)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getN_9972fcc56b44e79d] = env->getMethodID(cls, "getN", "()I");
            mids$[mid_getPositions_d2c45ef07a322466] = env->getMethodID(cls, "getPositions", "()[I");
            mids$[mid_getTerms_6715d5a0d228688a] = env->getMethodID(cls, "getTerms", "()[Lorg/apache/lucene/index/Term;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NGramPhraseQuery::NGramPhraseQuery(jint a0, const ::org::apache::lucene::search::PhraseQuery & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_020fb847f2a0877d, a0, a1.this$)) {}

        jboolean NGramPhraseQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint NGramPhraseQuery::getN() const
        {
          return env->callIntMethod(this$, mids$[mid_getN_9972fcc56b44e79d]);
        }

        JArray< jint > NGramPhraseQuery::getPositions() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getPositions_d2c45ef07a322466]));
        }

        JArray< ::org::apache::lucene::index::Term > NGramPhraseQuery::getTerms() const
        {
          return JArray< ::org::apache::lucene::index::Term >(env->callObjectMethod(this$, mids$[mid_getTerms_6715d5a0d228688a]));
        }

        jint NGramPhraseQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::Query NGramPhraseQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
        }

        ::java::lang::String NGramPhraseQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void NGramPhraseQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_NGramPhraseQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NGramPhraseQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NGramPhraseQuery_init_(t_NGramPhraseQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NGramPhraseQuery_equals(t_NGramPhraseQuery *self, PyObject *args);
        static PyObject *t_NGramPhraseQuery_getN(t_NGramPhraseQuery *self);
        static PyObject *t_NGramPhraseQuery_getPositions(t_NGramPhraseQuery *self);
        static PyObject *t_NGramPhraseQuery_getTerms(t_NGramPhraseQuery *self);
        static PyObject *t_NGramPhraseQuery_hashCode(t_NGramPhraseQuery *self, PyObject *args);
        static PyObject *t_NGramPhraseQuery_rewrite(t_NGramPhraseQuery *self, PyObject *args);
        static PyObject *t_NGramPhraseQuery_toString(t_NGramPhraseQuery *self, PyObject *args);
        static PyObject *t_NGramPhraseQuery_visit(t_NGramPhraseQuery *self, PyObject *args);
        static PyObject *t_NGramPhraseQuery_get__n(t_NGramPhraseQuery *self, void *data);
        static PyObject *t_NGramPhraseQuery_get__positions(t_NGramPhraseQuery *self, void *data);
        static PyObject *t_NGramPhraseQuery_get__terms(t_NGramPhraseQuery *self, void *data);
        static PyGetSetDef t_NGramPhraseQuery__fields_[] = {
          DECLARE_GET_FIELD(t_NGramPhraseQuery, n),
          DECLARE_GET_FIELD(t_NGramPhraseQuery, positions),
          DECLARE_GET_FIELD(t_NGramPhraseQuery, terms),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NGramPhraseQuery__methods_[] = {
          DECLARE_METHOD(t_NGramPhraseQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NGramPhraseQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NGramPhraseQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_NGramPhraseQuery, getN, METH_NOARGS),
          DECLARE_METHOD(t_NGramPhraseQuery, getPositions, METH_NOARGS),
          DECLARE_METHOD(t_NGramPhraseQuery, getTerms, METH_NOARGS),
          DECLARE_METHOD(t_NGramPhraseQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_NGramPhraseQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_NGramPhraseQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_NGramPhraseQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NGramPhraseQuery)[] = {
          { Py_tp_methods, t_NGramPhraseQuery__methods_ },
          { Py_tp_init, (void *) t_NGramPhraseQuery_init_ },
          { Py_tp_getset, t_NGramPhraseQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NGramPhraseQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(NGramPhraseQuery, t_NGramPhraseQuery, NGramPhraseQuery);

        void t_NGramPhraseQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(NGramPhraseQuery), &PY_TYPE_DEF(NGramPhraseQuery), module, "NGramPhraseQuery", 0);
        }

        void t_NGramPhraseQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NGramPhraseQuery), "class_", make_descriptor(NGramPhraseQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NGramPhraseQuery), "wrapfn_", make_descriptor(t_NGramPhraseQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NGramPhraseQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NGramPhraseQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NGramPhraseQuery::initializeClass, 1)))
            return NULL;
          return t_NGramPhraseQuery::wrap_Object(NGramPhraseQuery(((t_NGramPhraseQuery *) arg)->object.this$));
        }
        static PyObject *t_NGramPhraseQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NGramPhraseQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NGramPhraseQuery_init_(t_NGramPhraseQuery *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::org::apache::lucene::search::PhraseQuery a1((jobject) NULL);
          NGramPhraseQuery object((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::search::PhraseQuery::initializeClass, &a0, &a1))
          {
            INT_CALL(object = NGramPhraseQuery(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NGramPhraseQuery_equals(t_NGramPhraseQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(NGramPhraseQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_NGramPhraseQuery_getN(t_NGramPhraseQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getN());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_NGramPhraseQuery_getPositions(t_NGramPhraseQuery *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.getPositions());
          return result.wrap();
        }

        static PyObject *t_NGramPhraseQuery_getTerms(t_NGramPhraseQuery *self)
        {
          JArray< ::org::apache::lucene::index::Term > result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerms());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
        }

        static PyObject *t_NGramPhraseQuery_hashCode(t_NGramPhraseQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(NGramPhraseQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_NGramPhraseQuery_rewrite(t_NGramPhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(NGramPhraseQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_NGramPhraseQuery_toString(t_NGramPhraseQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(NGramPhraseQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_NGramPhraseQuery_visit(t_NGramPhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(NGramPhraseQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_NGramPhraseQuery_get__n(t_NGramPhraseQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getN());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_NGramPhraseQuery_get__positions(t_NGramPhraseQuery *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getPositions());
          return value.wrap();
        }

        static PyObject *t_NGramPhraseQuery_get__terms(t_NGramPhraseQuery *self, void *data)
        {
          JArray< ::org::apache::lucene::index::Term > value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerms());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldValueHitQueue$Entry.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldValueHitQueue$Entry::class$ = NULL;
        jmethodID *FieldValueHitQueue$Entry::mids$ = NULL;
        jfieldID *FieldValueHitQueue$Entry::fids$ = NULL;
        bool FieldValueHitQueue$Entry::live$ = false;

        jclass FieldValueHitQueue$Entry::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldValueHitQueue$Entry");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_438c62480c481c65] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_slot] = env->getFieldID(cls, "slot", "I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldValueHitQueue$Entry::FieldValueHitQueue$Entry(jint a0, jint a1) : ::org::apache::lucene::search::ScoreDoc(env->newObject(initializeClass, &mids$, mid_init$_438c62480c481c65, a0, a1)) {}

        ::java::lang::String FieldValueHitQueue$Entry::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jint FieldValueHitQueue$Entry::_get_slot() const
        {
          return env->getIntField(this$, fids$[fid_slot]);
        }

        void FieldValueHitQueue$Entry::_set_slot(jint a0) const
        {
          env->setIntField(this$, fids$[fid_slot], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldValueHitQueue$Entry_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueHitQueue$Entry_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueHitQueue$Entry_of_(t_FieldValueHitQueue$Entry *self, PyObject *args);
        static int t_FieldValueHitQueue$Entry_init_(t_FieldValueHitQueue$Entry *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldValueHitQueue$Entry_toString(t_FieldValueHitQueue$Entry *self, PyObject *args);
        static PyObject *t_FieldValueHitQueue$Entry_get__slot(t_FieldValueHitQueue$Entry *self, void *data);
        static int t_FieldValueHitQueue$Entry_set__slot(t_FieldValueHitQueue$Entry *self, PyObject *arg, void *data);

        static PyObject *t_FieldValueHitQueue$Entry_get__parameters_(t_FieldValueHitQueue$Entry *self, void *data);
        static PyGetSetDef t_FieldValueHitQueue$Entry__fields_[] = {
          DECLARE_GETSET_FIELD(t_FieldValueHitQueue$Entry, slot),
          DECLARE_GET_FIELD(t_FieldValueHitQueue$Entry, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldValueHitQueue$Entry__methods_[] = {
          DECLARE_METHOD(t_FieldValueHitQueue$Entry, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue$Entry, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue$Entry, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueHitQueue$Entry, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FieldValueHitQueue$Entry)[] = {
          { Py_tp_methods, t_FieldValueHitQueue$Entry__methods_ },
          { Py_tp_init, (void *) t_FieldValueHitQueue$Entry_init_ },
          { Py_tp_getset, t_FieldValueHitQueue$Entry__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FieldValueHitQueue$Entry)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::ScoreDoc),
          NULL
        };

        DEFINE_TYPE(FieldValueHitQueue$Entry, t_FieldValueHitQueue$Entry, FieldValueHitQueue$Entry);
        PyObject *t_FieldValueHitQueue$Entry::wrap_Object(const FieldValueHitQueue$Entry& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldValueHitQueue$Entry::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldValueHitQueue$Entry *self = (t_FieldValueHitQueue$Entry *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldValueHitQueue$Entry::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldValueHitQueue$Entry::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldValueHitQueue$Entry *self = (t_FieldValueHitQueue$Entry *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldValueHitQueue$Entry::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldValueHitQueue$Entry), &PY_TYPE_DEF(FieldValueHitQueue$Entry), module, "FieldValueHitQueue$Entry", 0);
        }

        void t_FieldValueHitQueue$Entry::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldValueHitQueue$Entry), "class_", make_descriptor(FieldValueHitQueue$Entry::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldValueHitQueue$Entry), "wrapfn_", make_descriptor(t_FieldValueHitQueue$Entry::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldValueHitQueue$Entry), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldValueHitQueue$Entry_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldValueHitQueue$Entry::initializeClass, 1)))
            return NULL;
          return t_FieldValueHitQueue$Entry::wrap_Object(FieldValueHitQueue$Entry(((t_FieldValueHitQueue$Entry *) arg)->object.this$));
        }
        static PyObject *t_FieldValueHitQueue$Entry_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldValueHitQueue$Entry::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldValueHitQueue$Entry_of_(t_FieldValueHitQueue$Entry *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldValueHitQueue$Entry_init_(t_FieldValueHitQueue$Entry *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jint a1;
          FieldValueHitQueue$Entry object((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            INT_CALL(object = FieldValueHitQueue$Entry(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldValueHitQueue$Entry_toString(t_FieldValueHitQueue$Entry *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(FieldValueHitQueue$Entry), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_FieldValueHitQueue$Entry_get__parameters_(t_FieldValueHitQueue$Entry *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_FieldValueHitQueue$Entry_get__slot(t_FieldValueHitQueue$Entry *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_slot());
          return PyLong_FromLong((long) value);
        }
        static int t_FieldValueHitQueue$Entry_set__slot(t_FieldValueHitQueue$Entry *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_slot(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "slot", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$OneMergeProgress$PauseReason.h"
#include "org/apache/lucene/index/MergePolicy$OneMergeProgress$PauseReason.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$OneMergeProgress$PauseReason::class$ = NULL;
        jmethodID *MergePolicy$OneMergeProgress$PauseReason::mids$ = NULL;
        bool MergePolicy$OneMergeProgress$PauseReason::live$ = false;
        MergePolicy$OneMergeProgress$PauseReason *MergePolicy$OneMergeProgress$PauseReason::OTHER = NULL;
        MergePolicy$OneMergeProgress$PauseReason *MergePolicy$OneMergeProgress$PauseReason::PAUSED = NULL;
        MergePolicy$OneMergeProgress$PauseReason *MergePolicy$OneMergeProgress$PauseReason::STOPPED = NULL;

        jclass MergePolicy$OneMergeProgress$PauseReason::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$OneMergeProgress$PauseReason");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_18f4d3bab3200287] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/MergePolicy$OneMergeProgress$PauseReason;");
            mids$[mid_values_99dbecc26013b843] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/MergePolicy$OneMergeProgress$PauseReason;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            OTHER = new MergePolicy$OneMergeProgress$PauseReason(env->getStaticObjectField(cls, "OTHER", "Lorg/apache/lucene/index/MergePolicy$OneMergeProgress$PauseReason;"));
            PAUSED = new MergePolicy$OneMergeProgress$PauseReason(env->getStaticObjectField(cls, "PAUSED", "Lorg/apache/lucene/index/MergePolicy$OneMergeProgress$PauseReason;"));
            STOPPED = new MergePolicy$OneMergeProgress$PauseReason(env->getStaticObjectField(cls, "STOPPED", "Lorg/apache/lucene/index/MergePolicy$OneMergeProgress$PauseReason;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$OneMergeProgress$PauseReason MergePolicy$OneMergeProgress$PauseReason::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return MergePolicy$OneMergeProgress$PauseReason(env->callStaticObjectMethod(cls, mids$[mid_valueOf_18f4d3bab3200287], a0.this$));
        }

        JArray< MergePolicy$OneMergeProgress$PauseReason > MergePolicy$OneMergeProgress$PauseReason::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< MergePolicy$OneMergeProgress$PauseReason >(env->callStaticObjectMethod(cls, mids$[mid_values_99dbecc26013b843]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$OneMergeProgress$PauseReason_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$OneMergeProgress$PauseReason_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$OneMergeProgress$PauseReason_of_(t_MergePolicy$OneMergeProgress$PauseReason *self, PyObject *args);
        static PyObject *t_MergePolicy$OneMergeProgress$PauseReason_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_MergePolicy$OneMergeProgress$PauseReason_values(PyTypeObject *type);
        static PyObject *t_MergePolicy$OneMergeProgress$PauseReason_get__parameters_(t_MergePolicy$OneMergeProgress$PauseReason *self, void *data);
        static PyGetSetDef t_MergePolicy$OneMergeProgress$PauseReason__fields_[] = {
          DECLARE_GET_FIELD(t_MergePolicy$OneMergeProgress$PauseReason, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy$OneMergeProgress$PauseReason__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$OneMergeProgress$PauseReason, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$OneMergeProgress$PauseReason, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$OneMergeProgress$PauseReason, of_, METH_VARARGS),
          DECLARE_METHOD(t_MergePolicy$OneMergeProgress$PauseReason, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$OneMergeProgress$PauseReason, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MergePolicy$OneMergeProgress$PauseReason)[] = {
          { Py_tp_methods, t_MergePolicy$OneMergeProgress$PauseReason__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_MergePolicy$OneMergeProgress$PauseReason__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MergePolicy$OneMergeProgress$PauseReason)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(MergePolicy$OneMergeProgress$PauseReason, t_MergePolicy$OneMergeProgress$PauseReason, MergePolicy$OneMergeProgress$PauseReason);
        PyObject *t_MergePolicy$OneMergeProgress$PauseReason::wrap_Object(const MergePolicy$OneMergeProgress$PauseReason& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergePolicy$OneMergeProgress$PauseReason::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergePolicy$OneMergeProgress$PauseReason *self = (t_MergePolicy$OneMergeProgress$PauseReason *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MergePolicy$OneMergeProgress$PauseReason::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergePolicy$OneMergeProgress$PauseReason::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergePolicy$OneMergeProgress$PauseReason *self = (t_MergePolicy$OneMergeProgress$PauseReason *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MergePolicy$OneMergeProgress$PauseReason::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$OneMergeProgress$PauseReason), &PY_TYPE_DEF(MergePolicy$OneMergeProgress$PauseReason), module, "MergePolicy$OneMergeProgress$PauseReason", 0);
        }

        void t_MergePolicy$OneMergeProgress$PauseReason::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$OneMergeProgress$PauseReason), "class_", make_descriptor(MergePolicy$OneMergeProgress$PauseReason::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$OneMergeProgress$PauseReason), "wrapfn_", make_descriptor(t_MergePolicy$OneMergeProgress$PauseReason::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$OneMergeProgress$PauseReason), "boxfn_", make_descriptor(boxObject));
          env->getClass(MergePolicy$OneMergeProgress$PauseReason::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$OneMergeProgress$PauseReason), "OTHER", make_descriptor(t_MergePolicy$OneMergeProgress$PauseReason::wrap_Object(*MergePolicy$OneMergeProgress$PauseReason::OTHER)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$OneMergeProgress$PauseReason), "PAUSED", make_descriptor(t_MergePolicy$OneMergeProgress$PauseReason::wrap_Object(*MergePolicy$OneMergeProgress$PauseReason::PAUSED)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$OneMergeProgress$PauseReason), "STOPPED", make_descriptor(t_MergePolicy$OneMergeProgress$PauseReason::wrap_Object(*MergePolicy$OneMergeProgress$PauseReason::STOPPED)));
        }

        static PyObject *t_MergePolicy$OneMergeProgress$PauseReason_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$OneMergeProgress$PauseReason::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$OneMergeProgress$PauseReason::wrap_Object(MergePolicy$OneMergeProgress$PauseReason(((t_MergePolicy$OneMergeProgress$PauseReason *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$OneMergeProgress$PauseReason_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$OneMergeProgress$PauseReason::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergePolicy$OneMergeProgress$PauseReason_of_(t_MergePolicy$OneMergeProgress$PauseReason *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_MergePolicy$OneMergeProgress$PauseReason_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          MergePolicy$OneMergeProgress$PauseReason result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MergePolicy$OneMergeProgress$PauseReason::valueOf(a0));
            return t_MergePolicy$OneMergeProgress$PauseReason::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_MergePolicy$OneMergeProgress$PauseReason_values(PyTypeObject *type)
        {
          JArray< MergePolicy$OneMergeProgress$PauseReason > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::MergePolicy$OneMergeProgress$PauseReason::values());
          return JArray<jobject>(result.this$).wrap(t_MergePolicy$OneMergeProgress$PauseReason::wrap_jobject);
        }
        static PyObject *t_MergePolicy$OneMergeProgress$PauseReason_get__parameters_(t_MergePolicy$OneMergeProgress$PauseReason *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PushPostingsWriterBase.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PushPostingsWriterBase::class$ = NULL;
        jmethodID *PushPostingsWriterBase::mids$ = NULL;
        bool PushPostingsWriterBase::live$ = false;

        jclass PushPostingsWriterBase::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PushPostingsWriterBase");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addPosition_4abb6de9b756bb6a] = env->getMethodID(cls, "addPosition", "(ILorg/apache/lucene/util/BytesRef;II)V");
            mids$[mid_finishDoc_f2cc1bce94666404] = env->getMethodID(cls, "finishDoc", "()V");
            mids$[mid_finishTerm_e796bc0c61819518] = env->getMethodID(cls, "finishTerm", "(Lorg/apache/lucene/codecs/BlockTermState;)V");
            mids$[mid_newTermState_ec21239f6d5a0c5b] = env->getMethodID(cls, "newTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");
            mids$[mid_setField_747195a1c5ce5890] = env->getMethodID(cls, "setField", "(Lorg/apache/lucene/index/FieldInfo;)V");
            mids$[mid_startDoc_438c62480c481c65] = env->getMethodID(cls, "startDoc", "(II)V");
            mids$[mid_startTerm_9dac957b1f5708ab] = env->getMethodID(cls, "startTerm", "(Lorg/apache/lucene/index/NumericDocValues;)V");
            mids$[mid_writeTerm_41dc9e7b1a45a8ed] = env->getMethodID(cls, "writeTerm", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/util/FixedBitSet;Lorg/apache/lucene/codecs/NormsProducer;)Lorg/apache/lucene/codecs/BlockTermState;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PushPostingsWriterBase::addPosition(jint a0, const ::org::apache::lucene::util::BytesRef & a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_addPosition_4abb6de9b756bb6a], a0, a1.this$, a2, a3);
        }

        void PushPostingsWriterBase::finishDoc() const
        {
          env->callVoidMethod(this$, mids$[mid_finishDoc_f2cc1bce94666404]);
        }

        void PushPostingsWriterBase::finishTerm(const ::org::apache::lucene::codecs::BlockTermState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_finishTerm_e796bc0c61819518], a0.this$);
        }

        ::org::apache::lucene::codecs::BlockTermState PushPostingsWriterBase::newTermState() const
        {
          return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_newTermState_ec21239f6d5a0c5b]));
        }

        void PushPostingsWriterBase::setField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setField_747195a1c5ce5890], a0.this$);
        }

        void PushPostingsWriterBase::startDoc(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_startDoc_438c62480c481c65], a0, a1);
        }

        void PushPostingsWriterBase::startTerm(const ::org::apache::lucene::index::NumericDocValues & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_startTerm_9dac957b1f5708ab], a0.this$);
        }

        ::org::apache::lucene::codecs::BlockTermState PushPostingsWriterBase::writeTerm(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermsEnum & a1, const ::org::apache::lucene::util::FixedBitSet & a2, const ::org::apache::lucene::codecs::NormsProducer & a3) const
        {
          return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_writeTerm_41dc9e7b1a45a8ed], a0.this$, a1.this$, a2.this$, a3.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PushPostingsWriterBase_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PushPostingsWriterBase_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PushPostingsWriterBase_addPosition(t_PushPostingsWriterBase *self, PyObject *args);
        static PyObject *t_PushPostingsWriterBase_finishDoc(t_PushPostingsWriterBase *self);
        static PyObject *t_PushPostingsWriterBase_finishTerm(t_PushPostingsWriterBase *self, PyObject *arg);
        static PyObject *t_PushPostingsWriterBase_newTermState(t_PushPostingsWriterBase *self);
        static PyObject *t_PushPostingsWriterBase_setField(t_PushPostingsWriterBase *self, PyObject *args);
        static PyObject *t_PushPostingsWriterBase_startDoc(t_PushPostingsWriterBase *self, PyObject *args);
        static PyObject *t_PushPostingsWriterBase_startTerm(t_PushPostingsWriterBase *self, PyObject *arg);
        static PyObject *t_PushPostingsWriterBase_writeTerm(t_PushPostingsWriterBase *self, PyObject *args);
        static int t_PushPostingsWriterBase_set__field(t_PushPostingsWriterBase *self, PyObject *arg, void *data);
        static PyGetSetDef t_PushPostingsWriterBase__fields_[] = {
          DECLARE_SET_FIELD(t_PushPostingsWriterBase, field),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PushPostingsWriterBase__methods_[] = {
          DECLARE_METHOD(t_PushPostingsWriterBase, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PushPostingsWriterBase, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PushPostingsWriterBase, addPosition, METH_VARARGS),
          DECLARE_METHOD(t_PushPostingsWriterBase, finishDoc, METH_NOARGS),
          DECLARE_METHOD(t_PushPostingsWriterBase, finishTerm, METH_O),
          DECLARE_METHOD(t_PushPostingsWriterBase, newTermState, METH_NOARGS),
          DECLARE_METHOD(t_PushPostingsWriterBase, setField, METH_VARARGS),
          DECLARE_METHOD(t_PushPostingsWriterBase, startDoc, METH_VARARGS),
          DECLARE_METHOD(t_PushPostingsWriterBase, startTerm, METH_O),
          DECLARE_METHOD(t_PushPostingsWriterBase, writeTerm, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PushPostingsWriterBase)[] = {
          { Py_tp_methods, t_PushPostingsWriterBase__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_PushPostingsWriterBase__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PushPostingsWriterBase)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::codecs::PostingsWriterBase),
          NULL
        };

        DEFINE_TYPE(PushPostingsWriterBase, t_PushPostingsWriterBase, PushPostingsWriterBase);

        void t_PushPostingsWriterBase::install(PyObject *module)
        {
          installType(&PY_TYPE(PushPostingsWriterBase), &PY_TYPE_DEF(PushPostingsWriterBase), module, "PushPostingsWriterBase", 0);
        }

        void t_PushPostingsWriterBase::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PushPostingsWriterBase), "class_", make_descriptor(PushPostingsWriterBase::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PushPostingsWriterBase), "wrapfn_", make_descriptor(t_PushPostingsWriterBase::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PushPostingsWriterBase), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PushPostingsWriterBase_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PushPostingsWriterBase::initializeClass, 1)))
            return NULL;
          return t_PushPostingsWriterBase::wrap_Object(PushPostingsWriterBase(((t_PushPostingsWriterBase *) arg)->object.this$));
        }
        static PyObject *t_PushPostingsWriterBase_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PushPostingsWriterBase::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PushPostingsWriterBase_addPosition(t_PushPostingsWriterBase *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint a2;
          jint a3;

          if (!parseArgs(args, "IkII", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addPosition", args);
          return NULL;
        }

        static PyObject *t_PushPostingsWriterBase_finishDoc(t_PushPostingsWriterBase *self)
        {
          OBJ_CALL(self->object.finishDoc());
          Py_RETURN_NONE;
        }

        static PyObject *t_PushPostingsWriterBase_finishTerm(t_PushPostingsWriterBase *self, PyObject *arg)
        {
          ::org::apache::lucene::codecs::BlockTermState a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.finishTerm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finishTerm", arg);
          return NULL;
        }

        static PyObject *t_PushPostingsWriterBase_newTermState(t_PushPostingsWriterBase *self)
        {
          ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);
          OBJ_CALL(result = self->object.newTermState());
          return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
        }

        static PyObject *t_PushPostingsWriterBase_setField(t_PushPostingsWriterBase *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setField(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(PushPostingsWriterBase), (PyObject *) self, "setField", args, 2);
        }

        static PyObject *t_PushPostingsWriterBase_startDoc(t_PushPostingsWriterBase *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.startDoc(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startDoc", args);
          return NULL;
        }

        static PyObject *t_PushPostingsWriterBase_startTerm(t_PushPostingsWriterBase *self, PyObject *arg)
        {
          ::org::apache::lucene::index::NumericDocValues a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::NumericDocValues::initializeClass, &a0))
          {
            OBJ_CALL(self->object.startTerm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startTerm", arg);
          return NULL;
        }

        static PyObject *t_PushPostingsWriterBase_writeTerm(t_PushPostingsWriterBase *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum a1((jobject) NULL);
          ::org::apache::lucene::util::FixedBitSet a2((jobject) NULL);
          ::org::apache::lucene::codecs::NormsProducer a3((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);

          if (!parseArgs(args, "kkkk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::util::FixedBitSet::initializeClass, ::org::apache::lucene::codecs::NormsProducer::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.writeTerm(a0, a1, a2, a3));
            return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
          }

          return callSuper(PY_TYPE(PushPostingsWriterBase), (PyObject *) self, "writeTerm", args, 2);
        }

        static int t_PushPostingsWriterBase_set__field(t_PushPostingsWriterBase *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::FieldInfo value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &value))
            {
              INT_CALL(self->object.setField(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "field", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/comparators/LongComparator.h"
#include "java/lang/Long.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/LeafFieldComparator.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {

          ::java::lang::Class *LongComparator::class$ = NULL;
          jmethodID *LongComparator::mids$ = NULL;
          bool LongComparator::live$ = false;

          jclass LongComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/comparators/LongComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f39bf95fea472aed] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Ljava/lang/Long;ZI)V");
              mids$[mid_compare_57a58545eba514db] = env->getMethodID(cls, "compare", "(II)I");
              mids$[mid_getLeafComparator_6183906b7058c4b5] = env->getMethodID(cls, "getLeafComparator", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/LeafFieldComparator;");
              mids$[mid_setTopValue_91282122c8cbfc1e] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Long;)V");
              mids$[mid_value_f8d64faee012ea0c] = env->getMethodID(cls, "value", "(I)Ljava/lang/Long;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LongComparator::LongComparator(jint a0, const ::java::lang::String & a1, const ::java::lang::Long & a2, jboolean a3, jint a4) : ::org::apache::lucene::search::comparators::NumericComparator(env->newObject(initializeClass, &mids$, mid_init$_f39bf95fea472aed, a0, a1.this$, a2.this$, a3, a4)) {}

          jint LongComparator::compare(jint a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_57a58545eba514db], a0, a1);
          }

          ::org::apache::lucene::search::LeafFieldComparator LongComparator::getLeafComparator(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return ::org::apache::lucene::search::LeafFieldComparator(env->callObjectMethod(this$, mids$[mid_getLeafComparator_6183906b7058c4b5], a0.this$));
          }

          void LongComparator::setTopValue(const ::java::lang::Long & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTopValue_91282122c8cbfc1e], a0.this$);
          }

          ::java::lang::Long LongComparator::value(jint a0) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_value_f8d64faee012ea0c], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {
          static PyObject *t_LongComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongComparator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongComparator_of_(t_LongComparator *self, PyObject *args);
          static int t_LongComparator_init_(t_LongComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LongComparator_compare(t_LongComparator *self, PyObject *args);
          static PyObject *t_LongComparator_getLeafComparator(t_LongComparator *self, PyObject *args);
          static PyObject *t_LongComparator_setTopValue(t_LongComparator *self, PyObject *args);
          static PyObject *t_LongComparator_value(t_LongComparator *self, PyObject *args);
          static int t_LongComparator_set__topValue(t_LongComparator *self, PyObject *arg, void *data);
          static PyObject *t_LongComparator_get__parameters_(t_LongComparator *self, void *data);
          static PyGetSetDef t_LongComparator__fields_[] = {
            DECLARE_SET_FIELD(t_LongComparator, topValue),
            DECLARE_GET_FIELD(t_LongComparator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LongComparator__methods_[] = {
            DECLARE_METHOD(t_LongComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongComparator, of_, METH_VARARGS),
            DECLARE_METHOD(t_LongComparator, compare, METH_VARARGS),
            DECLARE_METHOD(t_LongComparator, getLeafComparator, METH_VARARGS),
            DECLARE_METHOD(t_LongComparator, setTopValue, METH_VARARGS),
            DECLARE_METHOD(t_LongComparator, value, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LongComparator)[] = {
            { Py_tp_methods, t_LongComparator__methods_ },
            { Py_tp_init, (void *) t_LongComparator_init_ },
            { Py_tp_getset, t_LongComparator__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LongComparator)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::comparators::NumericComparator),
            NULL
          };

          DEFINE_TYPE(LongComparator, t_LongComparator, LongComparator);
          PyObject *t_LongComparator::wrap_Object(const LongComparator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_LongComparator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_LongComparator *self = (t_LongComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_LongComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_LongComparator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_LongComparator *self = (t_LongComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_LongComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(LongComparator), &PY_TYPE_DEF(LongComparator), module, "LongComparator", 0);
          }

          void t_LongComparator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongComparator), "class_", make_descriptor(LongComparator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongComparator), "wrapfn_", make_descriptor(t_LongComparator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongComparator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LongComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LongComparator::initializeClass, 1)))
              return NULL;
            return t_LongComparator::wrap_Object(LongComparator(((t_LongComparator *) arg)->object.this$));
          }
          static PyObject *t_LongComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LongComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_LongComparator_of_(t_LongComparator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_LongComparator_init_(t_LongComparator *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::Long a2((jobject) NULL);
            jboolean a3;
            jint a4;
            LongComparator object((jobject) NULL);

            if (!parseArgs(args, "IsOZI", ::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = LongComparator(a0, a1, a2, a3, a4));
              self->object = object;
              self->parameters[0] = ::java::lang::PY_TYPE(Long);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LongComparator_compare(t_LongComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(LongComparator), (PyObject *) self, "compare", args, 2);
          }

          static PyObject *t_LongComparator_getLeafComparator(t_LongComparator *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::LeafFieldComparator result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getLeafComparator(a0));
              return ::org::apache::lucene::search::t_LeafFieldComparator::wrap_Object(result);
            }

            return callSuper(PY_TYPE(LongComparator), (PyObject *) self, "getLeafComparator", args, 2);
          }

          static PyObject *t_LongComparator_setTopValue(t_LongComparator *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);

            if (!parseArgs(args, "O", ::java::lang::PY_TYPE(Long), &a0))
            {
              OBJ_CALL(self->object.setTopValue(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(LongComparator), (PyObject *) self, "setTopValue", args, 2);
          }

          static PyObject *t_LongComparator_value(t_LongComparator *self, PyObject *args)
          {
            jint a0;
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.value(a0));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(PY_TYPE(LongComparator), (PyObject *) self, "value", args, 2);
          }
          static PyObject *t_LongComparator_get__parameters_(t_LongComparator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_LongComparator_set__topValue(t_LongComparator *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Long value((jobject) NULL);
              if (!parseArg(arg, "O", ::java::lang::PY_TYPE(Long), &value))
              {
                INT_CALL(self->object.setTopValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "topValue", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternConsumer.h"
#include "java/lang/String.h"
#include "java/util/ArrayList.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *PatternConsumer::class$ = NULL;
            jmethodID *PatternConsumer::mids$ = NULL;
            bool PatternConsumer::live$ = false;

            jclass PatternConsumer::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/PatternConsumer");

                mids$ = new jmethodID[max_mid];
                mids$[mid_addClass_9fd2eb66a64e6f0f] = env->getMethodID(cls, "addClass", "(Ljava/lang/String;)V");
                mids$[mid_addException_3a761aed8fa9a715] = env->getMethodID(cls, "addException", "(Ljava/lang/String;Ljava/util/ArrayList;)V");
                mids$[mid_addPattern_15b72f6a44ff93f2] = env->getMethodID(cls, "addPattern", "(Ljava/lang/String;Ljava/lang/String;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void PatternConsumer::addClass(const ::java::lang::String & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addClass_9fd2eb66a64e6f0f], a0.this$);
            }

            void PatternConsumer::addException(const ::java::lang::String & a0, const ::java::util::ArrayList & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addException_3a761aed8fa9a715], a0.this$, a1.this$);
            }

            void PatternConsumer::addPattern(const ::java::lang::String & a0, const ::java::lang::String & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addPattern_15b72f6a44ff93f2], a0.this$, a1.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_PatternConsumer_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PatternConsumer_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PatternConsumer_addClass(t_PatternConsumer *self, PyObject *arg);
            static PyObject *t_PatternConsumer_addException(t_PatternConsumer *self, PyObject *args);
            static PyObject *t_PatternConsumer_addPattern(t_PatternConsumer *self, PyObject *args);

            static PyMethodDef t_PatternConsumer__methods_[] = {
              DECLARE_METHOD(t_PatternConsumer, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PatternConsumer, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PatternConsumer, addClass, METH_O),
              DECLARE_METHOD(t_PatternConsumer, addException, METH_VARARGS),
              DECLARE_METHOD(t_PatternConsumer, addPattern, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(PatternConsumer)[] = {
              { Py_tp_methods, t_PatternConsumer__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(PatternConsumer)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(PatternConsumer, t_PatternConsumer, PatternConsumer);

            void t_PatternConsumer::install(PyObject *module)
            {
              installType(&PY_TYPE(PatternConsumer), &PY_TYPE_DEF(PatternConsumer), module, "PatternConsumer", 0);
            }

            void t_PatternConsumer::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(PatternConsumer), "class_", make_descriptor(PatternConsumer::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(PatternConsumer), "wrapfn_", make_descriptor(t_PatternConsumer::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(PatternConsumer), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PatternConsumer_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PatternConsumer::initializeClass, 1)))
                return NULL;
              return t_PatternConsumer::wrap_Object(PatternConsumer(((t_PatternConsumer *) arg)->object.this$));
            }
            static PyObject *t_PatternConsumer_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PatternConsumer::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_PatternConsumer_addClass(t_PatternConsumer *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(self->object.addClass(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addClass", arg);
              return NULL;
            }

            static PyObject *t_PatternConsumer_addException(t_PatternConsumer *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::ArrayList a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "sK", ::java::util::ArrayList::initializeClass, &a0, &a1, &p1, ::java::util::t_ArrayList::parameters_))
              {
                OBJ_CALL(self->object.addException(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addException", args);
              return NULL;
            }

            static PyObject *t_PatternConsumer_addPattern(t_PatternConsumer *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(self->object.addPattern(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addPattern", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/NumDocsValueSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *NumDocsValueSource::class$ = NULL;
            jmethodID *NumDocsValueSource::mids$ = NULL;
            bool NumDocsValueSource::live$ = false;

            jclass NumDocsValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/NumDocsValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NumDocsValueSource::NumDocsValueSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            ::java::lang::String NumDocsValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean NumDocsValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues NumDocsValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint NumDocsValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }

            ::java::lang::String NumDocsValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_db9b55ba01e03e4b]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_NumDocsValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NumDocsValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NumDocsValueSource_init_(t_NumDocsValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_NumDocsValueSource_description(t_NumDocsValueSource *self, PyObject *args);
            static PyObject *t_NumDocsValueSource_equals(t_NumDocsValueSource *self, PyObject *args);
            static PyObject *t_NumDocsValueSource_getValues(t_NumDocsValueSource *self, PyObject *args);
            static PyObject *t_NumDocsValueSource_hashCode(t_NumDocsValueSource *self, PyObject *args);
            static PyObject *t_NumDocsValueSource_name(t_NumDocsValueSource *self);

            static PyMethodDef t_NumDocsValueSource__methods_[] = {
              DECLARE_METHOD(t_NumDocsValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumDocsValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumDocsValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_NumDocsValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_NumDocsValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_NumDocsValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_NumDocsValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(NumDocsValueSource)[] = {
              { Py_tp_methods, t_NumDocsValueSource__methods_ },
              { Py_tp_init, (void *) t_NumDocsValueSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(NumDocsValueSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::ValueSource),
              NULL
            };

            DEFINE_TYPE(NumDocsValueSource, t_NumDocsValueSource, NumDocsValueSource);

            void t_NumDocsValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(NumDocsValueSource), &PY_TYPE_DEF(NumDocsValueSource), module, "NumDocsValueSource", 0);
            }

            void t_NumDocsValueSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(NumDocsValueSource), "class_", make_descriptor(NumDocsValueSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(NumDocsValueSource), "wrapfn_", make_descriptor(t_NumDocsValueSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(NumDocsValueSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NumDocsValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NumDocsValueSource::initializeClass, 1)))
                return NULL;
              return t_NumDocsValueSource::wrap_Object(NumDocsValueSource(((t_NumDocsValueSource *) arg)->object.this$));
            }
            static PyObject *t_NumDocsValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NumDocsValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NumDocsValueSource_init_(t_NumDocsValueSource *self, PyObject *args, PyObject *kwds)
            {
              NumDocsValueSource object((jobject) NULL);

              INT_CALL(object = NumDocsValueSource());
              self->object = object;

              return 0;
            }

            static PyObject *t_NumDocsValueSource_description(t_NumDocsValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(NumDocsValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_NumDocsValueSource_equals(t_NumDocsValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(NumDocsValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_NumDocsValueSource_getValues(t_NumDocsValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(NumDocsValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_NumDocsValueSource_hashCode(t_NumDocsValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(NumDocsValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_NumDocsValueSource_name(t_NumDocsValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/TFIDFSimilarity.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *TFIDFSimilarity::class$ = NULL;
          jmethodID *TFIDFSimilarity::mids$ = NULL;
          bool TFIDFSimilarity::live$ = false;

          jclass TFIDFSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/TFIDFSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ec3269102920d7a] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_getDiscountOverlaps_8454bd5aa23fd11e] = env->getMethodID(cls, "getDiscountOverlaps", "()Z");
              mids$[mid_idf_f850d9cfe8a8e47f] = env->getMethodID(cls, "idf", "(JJ)F");
              mids$[mid_idfExplain_a65c9ef6c8dde9e4] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_idfExplain_d7ff9aaf392c6db9] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lengthNorm_384f078ef4b8f931] = env->getMethodID(cls, "lengthNorm", "(I)F");
              mids$[mid_scorer_a010a2835e08a10c] = env->getMethodID(cls, "scorer", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");
              mids$[mid_setDiscountOverlaps_9d72768e8fdce2b7] = env->getMethodID(cls, "setDiscountOverlaps", "(Z)V");
              mids$[mid_tf_8c8518d25218b9c5] = env->getMethodID(cls, "tf", "(F)F");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TFIDFSimilarity::TFIDFSimilarity() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jlong TFIDFSimilarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ec3269102920d7a], a0.this$);
          }

          jboolean TFIDFSimilarity::getDiscountOverlaps() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getDiscountOverlaps_8454bd5aa23fd11e]);
          }

          jfloat TFIDFSimilarity::idf(jlong a0, jlong a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_idf_f850d9cfe8a8e47f], a0, a1);
          }

          ::org::apache::lucene::search::Explanation TFIDFSimilarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const JArray< ::org::apache::lucene::search::TermStatistics > & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_idfExplain_a65c9ef6c8dde9e4], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Explanation TFIDFSimilarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const ::org::apache::lucene::search::TermStatistics & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_idfExplain_d7ff9aaf392c6db9], a0.this$, a1.this$));
          }

          jfloat TFIDFSimilarity::lengthNorm(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lengthNorm_384f078ef4b8f931], a0);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer TFIDFSimilarity::scorer(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_scorer_a010a2835e08a10c], a0, a1.this$, a2.this$));
          }

          void TFIDFSimilarity::setDiscountOverlaps(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDiscountOverlaps_9d72768e8fdce2b7], a0);
          }

          jfloat TFIDFSimilarity::tf(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_tf_8c8518d25218b9c5], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_TFIDFSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TFIDFSimilarity_init_(t_TFIDFSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TFIDFSimilarity_computeNorm(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_getDiscountOverlaps(t_TFIDFSimilarity *self);
          static PyObject *t_TFIDFSimilarity_idf(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_idfExplain(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_lengthNorm(t_TFIDFSimilarity *self, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_scorer(t_TFIDFSimilarity *self, PyObject *args);
          static PyObject *t_TFIDFSimilarity_setDiscountOverlaps(t_TFIDFSimilarity *self, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_tf(t_TFIDFSimilarity *self, PyObject *arg);
          static PyObject *t_TFIDFSimilarity_get__discountOverlaps(t_TFIDFSimilarity *self, void *data);
          static int t_TFIDFSimilarity_set__discountOverlaps(t_TFIDFSimilarity *self, PyObject *arg, void *data);
          static PyGetSetDef t_TFIDFSimilarity__fields_[] = {
            DECLARE_GETSET_FIELD(t_TFIDFSimilarity, discountOverlaps),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TFIDFSimilarity__methods_[] = {
            DECLARE_METHOD(t_TFIDFSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TFIDFSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TFIDFSimilarity, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, getDiscountOverlaps, METH_NOARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, idf, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, idfExplain, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, lengthNorm, METH_O),
            DECLARE_METHOD(t_TFIDFSimilarity, scorer, METH_VARARGS),
            DECLARE_METHOD(t_TFIDFSimilarity, setDiscountOverlaps, METH_O),
            DECLARE_METHOD(t_TFIDFSimilarity, tf, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TFIDFSimilarity)[] = {
            { Py_tp_methods, t_TFIDFSimilarity__methods_ },
            { Py_tp_init, (void *) t_TFIDFSimilarity_init_ },
            { Py_tp_getset, t_TFIDFSimilarity__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TFIDFSimilarity)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Similarity),
            NULL
          };

          DEFINE_TYPE(TFIDFSimilarity, t_TFIDFSimilarity, TFIDFSimilarity);

          void t_TFIDFSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(TFIDFSimilarity), &PY_TYPE_DEF(TFIDFSimilarity), module, "TFIDFSimilarity", 0);
          }

          void t_TFIDFSimilarity::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TFIDFSimilarity), "class_", make_descriptor(TFIDFSimilarity::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TFIDFSimilarity), "wrapfn_", make_descriptor(t_TFIDFSimilarity::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TFIDFSimilarity), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TFIDFSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TFIDFSimilarity::initializeClass, 1)))
              return NULL;
            return t_TFIDFSimilarity::wrap_Object(TFIDFSimilarity(((t_TFIDFSimilarity *) arg)->object.this$));
          }
          static PyObject *t_TFIDFSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TFIDFSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TFIDFSimilarity_init_(t_TFIDFSimilarity *self, PyObject *args, PyObject *kwds)
          {
            TFIDFSimilarity object((jobject) NULL);

            INT_CALL(object = TFIDFSimilarity());
            self->object = object;

            return 0;
          }

          static PyObject *t_TFIDFSimilarity_computeNorm(t_TFIDFSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(TFIDFSimilarity), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_getDiscountOverlaps(t_TFIDFSimilarity *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_TFIDFSimilarity_idf(t_TFIDFSimilarity *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jfloat result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.idf(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "idf", args);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_idfExplain(t_TFIDFSimilarity *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
                JArray< ::org::apache::lucene::search::TermStatistics > a1((jobject) NULL);
                ::org::apache::lucene::search::Explanation result((jobject) NULL);

                if (!parseArgs(args, "k[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.idfExplain(a0, a1));
                  return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
                ::org::apache::lucene::search::TermStatistics a1((jobject) NULL);
                ::org::apache::lucene::search::Explanation result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.idfExplain(a0, a1));
                  return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "idfExplain", args);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_lengthNorm(t_TFIDFSimilarity *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.lengthNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "lengthNorm", arg);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_scorer(t_TFIDFSimilarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.scorer(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TFIDFSimilarity), (PyObject *) self, "scorer", args, 2);
          }

          static PyObject *t_TFIDFSimilarity_setDiscountOverlaps(t_TFIDFSimilarity *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDiscountOverlaps(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDiscountOverlaps", arg);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_tf(t_TFIDFSimilarity *self, PyObject *arg)
          {
            jfloat a0;
            jfloat result;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(result = self->object.tf(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "tf", arg);
            return NULL;
          }

          static PyObject *t_TFIDFSimilarity_get__discountOverlaps(t_TFIDFSimilarity *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(value);
          }
          static int t_TFIDFSimilarity_set__discountOverlaps(t_TFIDFSimilarity *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDiscountOverlaps(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "discountOverlaps", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ClasspathResourceLoader.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/ClassLoader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ClasspathResourceLoader::class$ = NULL;
          jmethodID *ClasspathResourceLoader::mids$ = NULL;
          bool ClasspathResourceLoader::live$ = false;

          jclass ClasspathResourceLoader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ClasspathResourceLoader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_67ec072891501dcc] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;)V");
              mids$[mid_init$_98a876e82795b112] = env->getMethodID(cls, "<init>", "(Ljava/lang/ClassLoader;)V");
              mids$[mid_findClass_bc8a5b553c7b1ff7] = env->getMethodID(cls, "findClass", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;");
              mids$[mid_newInstance_72d9f700c083286f] = env->getMethodID(cls, "newInstance", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;");
              mids$[mid_openResource_f9a3577e7bead470] = env->getMethodID(cls, "openResource", "(Ljava/lang/String;)Ljava/io/InputStream;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClasspathResourceLoader::ClasspathResourceLoader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ClasspathResourceLoader::ClasspathResourceLoader(const ::java::lang::Class & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_67ec072891501dcc, a0.this$)) {}

          ClasspathResourceLoader::ClasspathResourceLoader(const ::java::lang::ClassLoader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_98a876e82795b112, a0.this$)) {}

          ::java::lang::Class ClasspathResourceLoader::findClass(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_findClass_bc8a5b553c7b1ff7], a0.this$, a1.this$));
          }

          ::java::lang::Object ClasspathResourceLoader::newInstance(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_newInstance_72d9f700c083286f], a0.this$, a1.this$));
          }

          ::java::io::InputStream ClasspathResourceLoader::openResource(const ::java::lang::String & a0) const
          {
            return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_openResource_f9a3577e7bead470], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ClasspathResourceLoader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClasspathResourceLoader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClasspathResourceLoader_init_(t_ClasspathResourceLoader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClasspathResourceLoader_findClass(t_ClasspathResourceLoader *self, PyObject *args);
          static PyObject *t_ClasspathResourceLoader_newInstance(t_ClasspathResourceLoader *self, PyObject *args);
          static PyObject *t_ClasspathResourceLoader_openResource(t_ClasspathResourceLoader *self, PyObject *arg);

          static PyMethodDef t_ClasspathResourceLoader__methods_[] = {
            DECLARE_METHOD(t_ClasspathResourceLoader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClasspathResourceLoader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClasspathResourceLoader, findClass, METH_VARARGS),
            DECLARE_METHOD(t_ClasspathResourceLoader, newInstance, METH_VARARGS),
            DECLARE_METHOD(t_ClasspathResourceLoader, openResource, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ClasspathResourceLoader)[] = {
            { Py_tp_methods, t_ClasspathResourceLoader__methods_ },
            { Py_tp_init, (void *) t_ClasspathResourceLoader_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ClasspathResourceLoader)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(ClasspathResourceLoader, t_ClasspathResourceLoader, ClasspathResourceLoader);

          void t_ClasspathResourceLoader::install(PyObject *module)
          {
            installType(&PY_TYPE(ClasspathResourceLoader), &PY_TYPE_DEF(ClasspathResourceLoader), module, "ClasspathResourceLoader", 0);
          }

          void t_ClasspathResourceLoader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClasspathResourceLoader), "class_", make_descriptor(ClasspathResourceLoader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClasspathResourceLoader), "wrapfn_", make_descriptor(t_ClasspathResourceLoader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClasspathResourceLoader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ClasspathResourceLoader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClasspathResourceLoader::initializeClass, 1)))
              return NULL;
            return t_ClasspathResourceLoader::wrap_Object(ClasspathResourceLoader(((t_ClasspathResourceLoader *) arg)->object.this$));
          }
          static PyObject *t_ClasspathResourceLoader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClasspathResourceLoader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClasspathResourceLoader_init_(t_ClasspathResourceLoader *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ClasspathResourceLoader object((jobject) NULL);

                INT_CALL(object = ClasspathResourceLoader());
                self->object = object;
                break;
              }
             case 1:
              {
                ::java::lang::Class a0((jobject) NULL);
                PyTypeObject **p0;
                ClasspathResourceLoader object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
                {
                  INT_CALL(object = ClasspathResourceLoader(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::ClassLoader a0((jobject) NULL);
                ClasspathResourceLoader object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::lang::ClassLoader::initializeClass, &a0))
                {
                  INT_CALL(object = ClasspathResourceLoader(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClasspathResourceLoader_findClass(t_ClasspathResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Class result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.findClass(a0, a1));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "findClass", args);
            return NULL;
          }

          static PyObject *t_ClasspathResourceLoader_newInstance(t_ClasspathResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.newInstance(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "newInstance", args);
            return NULL;
          }

          static PyObject *t_ClasspathResourceLoader_openResource(t_ClasspathResourceLoader *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.openResource(a0));
              return ::java::io::t_InputStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "openResource", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Query::class$ = NULL;
        jmethodID *Query::mids$ = NULL;
        bool Query::live$ = false;

        jclass Query::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Query");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");
            mids$[mid_sameClassAs_8b72f2dcdde6fd1d] = env->getMethodID(cls, "sameClassAs", "(Ljava/lang/Object;)Z");
            mids$[mid_classHash_9972fcc56b44e79d] = env->getMethodID(cls, "classHash", "()I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Query::Query() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::search::Weight Query::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean Query::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint Query::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        Query Query::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
        }

        ::java::lang::String Query::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        ::java::lang::String Query::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void Query::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Query_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Query_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Query_init_(t_Query *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Query_createWeight(t_Query *self, PyObject *args);
        static PyObject *t_Query_equals(t_Query *self, PyObject *args);
        static PyObject *t_Query_hashCode(t_Query *self, PyObject *args);
        static PyObject *t_Query_rewrite(t_Query *self, PyObject *arg);
        static PyObject *t_Query_toString(t_Query *self, PyObject *args);
        static PyObject *t_Query_visit(t_Query *self, PyObject *arg);

        static PyMethodDef t_Query__methods_[] = {
          DECLARE_METHOD(t_Query, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Query, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Query, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_Query, equals, METH_VARARGS),
          DECLARE_METHOD(t_Query, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Query, rewrite, METH_O),
          DECLARE_METHOD(t_Query, toString, METH_VARARGS),
          DECLARE_METHOD(t_Query, visit, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Query)[] = {
          { Py_tp_methods, t_Query__methods_ },
          { Py_tp_init, (void *) t_Query_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Query)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Query, t_Query, Query);

        void t_Query::install(PyObject *module)
        {
          installType(&PY_TYPE(Query), &PY_TYPE_DEF(Query), module, "Query", 0);
        }

        void t_Query::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Query), "class_", make_descriptor(Query::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Query), "wrapfn_", make_descriptor(t_Query::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Query), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Query_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Query::initializeClass, 1)))
            return NULL;
          return t_Query::wrap_Object(Query(((t_Query *) arg)->object.this$));
        }
        static PyObject *t_Query_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Query::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Query_init_(t_Query *self, PyObject *args, PyObject *kwds)
        {
          Query object((jobject) NULL);

          INT_CALL(object = Query());
          self->object = object;

          return 0;
        }

        static PyObject *t_Query_createWeight(t_Query *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createWeight", args);
          return NULL;
        }

        static PyObject *t_Query_equals(t_Query *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(Query), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Query_hashCode(t_Query *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(Query), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Query_rewrite(t_Query *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          Query result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_Query_toString(t_Query *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }
            break;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }
            }
          }

          return callSuper(PY_TYPE(Query), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Query_visit(t_Query *self, PyObject *arg)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "visit", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLightStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLightStemFilterFactory::class$ = NULL;
          jmethodID *RussianLightStemFilterFactory::mids$ = NULL;
          bool RussianLightStemFilterFactory::live$ = false;
          ::java::lang::String *RussianLightStemFilterFactory::NAME = NULL;

          jclass RussianLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLightStemFilterFactory::RussianLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream RussianLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLightStemFilterFactory_init_(t_RussianLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianLightStemFilterFactory_create(t_RussianLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_RussianLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_RussianLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(RussianLightStemFilterFactory)[] = {
            { Py_tp_methods, t_RussianLightStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_RussianLightStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(RussianLightStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(RussianLightStemFilterFactory, t_RussianLightStemFilterFactory, RussianLightStemFilterFactory);

          void t_RussianLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLightStemFilterFactory), &PY_TYPE_DEF(RussianLightStemFilterFactory), module, "RussianLightStemFilterFactory", 0);
          }

          void t_RussianLightStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(RussianLightStemFilterFactory), "class_", make_descriptor(RussianLightStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RussianLightStemFilterFactory), "wrapfn_", make_descriptor(t_RussianLightStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RussianLightStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(RussianLightStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(RussianLightStemFilterFactory), "NAME", make_descriptor(j2p(*RussianLightStemFilterFactory::NAME)));
          }

          static PyObject *t_RussianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_RussianLightStemFilterFactory::wrap_Object(RussianLightStemFilterFactory(((t_RussianLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_RussianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLightStemFilterFactory_init_(t_RussianLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            RussianLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = RussianLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RussianLightStemFilterFactory_create(t_RussianLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(RussianLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/OrQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *OrQueryNode::class$ = NULL;
              jmethodID *OrQueryNode::mids$ = NULL;
              bool OrQueryNode::live$ = false;

              jclass OrQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/OrQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_d03990be0130160d] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              OrQueryNode::OrQueryNode(const ::java::util::List & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_d03990be0130160d, a0.this$)) {}

              ::java::lang::CharSequence OrQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String OrQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_OrQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_OrQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_OrQueryNode_init_(t_OrQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_OrQueryNode_toQueryString(t_OrQueryNode *self, PyObject *args);
              static PyObject *t_OrQueryNode_toString(t_OrQueryNode *self, PyObject *args);

              static PyMethodDef t_OrQueryNode__methods_[] = {
                DECLARE_METHOD(t_OrQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OrQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OrQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_OrQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(OrQueryNode)[] = {
                { Py_tp_methods, t_OrQueryNode__methods_ },
                { Py_tp_init, (void *) t_OrQueryNode_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(OrQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode),
                NULL
              };

              DEFINE_TYPE(OrQueryNode, t_OrQueryNode, OrQueryNode);

              void t_OrQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(OrQueryNode), &PY_TYPE_DEF(OrQueryNode), module, "OrQueryNode", 0);
              }

              void t_OrQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(OrQueryNode), "class_", make_descriptor(OrQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(OrQueryNode), "wrapfn_", make_descriptor(t_OrQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(OrQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_OrQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, OrQueryNode::initializeClass, 1)))
                  return NULL;
                return t_OrQueryNode::wrap_Object(OrQueryNode(((t_OrQueryNode *) arg)->object.this$));
              }
              static PyObject *t_OrQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, OrQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_OrQueryNode_init_(t_OrQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                OrQueryNode object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = OrQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_OrQueryNode_toQueryString(t_OrQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(OrQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_OrQueryNode_toString(t_OrQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(OrQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SmallFloat.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SmallFloat::class$ = NULL;
        jmethodID *SmallFloat::mids$ = NULL;
        bool SmallFloat::live$ = false;

        jclass SmallFloat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SmallFloat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_byte315ToFloat_3e9eb8c933c400f5] = env->getStaticMethodID(cls, "byte315ToFloat", "(B)F");
            mids$[mid_byte4ToInt_5312fc6ae11d52d9] = env->getStaticMethodID(cls, "byte4ToInt", "(B)I");
            mids$[mid_byteToFloat_350b00a7fafcbe97] = env->getStaticMethodID(cls, "byteToFloat", "(BII)F");
            mids$[mid_floatToByte_819465fb8889a567] = env->getStaticMethodID(cls, "floatToByte", "(FII)B");
            mids$[mid_floatToByte315_b597a4a888cbc95d] = env->getStaticMethodID(cls, "floatToByte315", "(F)B");
            mids$[mid_int4ToLong_0f1d64a641e8af53] = env->getStaticMethodID(cls, "int4ToLong", "(I)J");
            mids$[mid_intToByte4_4d5233a30cda5878] = env->getStaticMethodID(cls, "intToByte4", "(I)B");
            mids$[mid_longToInt4_694afffd0eb7dc3c] = env->getStaticMethodID(cls, "longToInt4", "(J)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jfloat SmallFloat::byte315ToFloat(jbyte a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_byte315ToFloat_3e9eb8c933c400f5], a0);
        }

        jint SmallFloat::byte4ToInt(jbyte a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_byte4ToInt_5312fc6ae11d52d9], a0);
        }

        jfloat SmallFloat::byteToFloat(jbyte a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_byteToFloat_350b00a7fafcbe97], a0, a1, a2);
        }

        jbyte SmallFloat::floatToByte(jfloat a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticByteMethod(cls, mids$[mid_floatToByte_819465fb8889a567], a0, a1, a2);
        }

        jbyte SmallFloat::floatToByte315(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticByteMethod(cls, mids$[mid_floatToByte315_b597a4a888cbc95d], a0);
        }

        jlong SmallFloat::int4ToLong(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_int4ToLong_0f1d64a641e8af53], a0);
        }

        jbyte SmallFloat::intToByte4(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticByteMethod(cls, mids$[mid_intToByte4_4d5233a30cda5878], a0);
        }

        jint SmallFloat::longToInt4(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_longToInt4_694afffd0eb7dc3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SmallFloat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_byte315ToFloat(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_byte4ToInt(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_byteToFloat(PyTypeObject *type, PyObject *args);
        static PyObject *t_SmallFloat_floatToByte(PyTypeObject *type, PyObject *args);
        static PyObject *t_SmallFloat_floatToByte315(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_int4ToLong(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_intToByte4(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_longToInt4(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_SmallFloat__methods_[] = {
          DECLARE_METHOD(t_SmallFloat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, byte315ToFloat, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, byte4ToInt, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, byteToFloat, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, floatToByte, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, floatToByte315, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, int4ToLong, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, intToByte4, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, longToInt4, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SmallFloat)[] = {
          { Py_tp_methods, t_SmallFloat__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SmallFloat)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SmallFloat, t_SmallFloat, SmallFloat);

        void t_SmallFloat::install(PyObject *module)
        {
          installType(&PY_TYPE(SmallFloat), &PY_TYPE_DEF(SmallFloat), module, "SmallFloat", 0);
        }

        void t_SmallFloat::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SmallFloat), "class_", make_descriptor(SmallFloat::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SmallFloat), "wrapfn_", make_descriptor(t_SmallFloat::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SmallFloat), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SmallFloat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SmallFloat::initializeClass, 1)))
            return NULL;
          return t_SmallFloat::wrap_Object(SmallFloat(((t_SmallFloat *) arg)->object.this$));
        }
        static PyObject *t_SmallFloat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SmallFloat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SmallFloat_byte315ToFloat(PyTypeObject *type, PyObject *arg)
        {
          jbyte a0;
          jfloat result;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::byte315ToFloat(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "byte315ToFloat", arg);
          return NULL;
        }

        static PyObject *t_SmallFloat_byte4ToInt(PyTypeObject *type, PyObject *arg)
        {
          jbyte a0;
          jint result;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::byte4ToInt(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "byte4ToInt", arg);
          return NULL;
        }

        static PyObject *t_SmallFloat_byteToFloat(PyTypeObject *type, PyObject *args)
        {
          jbyte a0;
          jint a1;
          jint a2;
          jfloat result;

          if (!parseArgs(args, "BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::byteToFloat(a0, a1, a2));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "byteToFloat", args);
          return NULL;
        }

        static PyObject *t_SmallFloat_floatToByte(PyTypeObject *type, PyObject *args)
        {
          jfloat a0;
          jint a1;
          jint a2;
          jbyte result;

          if (!parseArgs(args, "FII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::floatToByte(a0, a1, a2));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToByte", args);
          return NULL;
        }

        static PyObject *t_SmallFloat_floatToByte315(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          jbyte result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::floatToByte315(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToByte315", arg);
          return NULL;
        }

        static PyObject *t_SmallFloat_int4ToLong(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::int4ToLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "int4ToLong", arg);
          return NULL;
        }

        static PyObject *t_SmallFloat_intToByte4(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          jbyte result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::intToByte4(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "intToByte4", arg);
          return NULL;
        }

        static PyObject *t_SmallFloat_longToInt4(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jint result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::longToInt4(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "longToInt4", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/similarities/PythonSimilarity$PythonSimScorer.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *PythonSimilarity$PythonSimScorer::class$ = NULL;
          jmethodID *PythonSimilarity$PythonSimScorer::mids$ = NULL;
          bool PythonSimilarity$PythonSimScorer::live$ = false;

          jclass PythonSimilarity$PythonSimScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/similarities/PythonSimilarity$PythonSimScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");
              mids$[mid_score_701951821ffd5c0c] = env->getMethodID(cls, "score", "(FJ)F");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonSimilarity$PythonSimScorer::PythonSimilarity$PythonSimScorer() : ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void PythonSimilarity$PythonSimScorer::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
          }

          jlong PythonSimilarity$PythonSimScorer::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
          }

          void PythonSimilarity$PythonSimScorer::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace similarities {
          static PyObject *t_PythonSimilarity$PythonSimScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonSimilarity$PythonSimScorer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonSimilarity$PythonSimScorer_init_(t_PythonSimilarity$PythonSimScorer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonSimilarity$PythonSimScorer_finalize(t_PythonSimilarity$PythonSimScorer *self);
          static PyObject *t_PythonSimilarity$PythonSimScorer_pythonExtension(t_PythonSimilarity$PythonSimScorer *self, PyObject *args);
          static void JNICALL t_PythonSimilarity$PythonSimScorer_pythonDecRef0(JNIEnv *jenv, jobject jobj);
          static jfloat JNICALL t_PythonSimilarity$PythonSimScorer_score1(JNIEnv *jenv, jobject jobj, jfloat a0, jlong a1);
          static PyObject *t_PythonSimilarity$PythonSimScorer_get__self(t_PythonSimilarity$PythonSimScorer *self, void *data);
          static PyGetSetDef t_PythonSimilarity$PythonSimScorer__fields_[] = {
            DECLARE_GET_FIELD(t_PythonSimilarity$PythonSimScorer, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonSimilarity$PythonSimScorer__methods_[] = {
            DECLARE_METHOD(t_PythonSimilarity$PythonSimScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonSimilarity$PythonSimScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonSimilarity$PythonSimScorer, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonSimilarity$PythonSimScorer, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PythonSimilarity$PythonSimScorer)[] = {
            { Py_tp_methods, t_PythonSimilarity$PythonSimScorer__methods_ },
            { Py_tp_init, (void *) t_PythonSimilarity$PythonSimScorer_init_ },
            { Py_tp_getset, t_PythonSimilarity$PythonSimScorer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PythonSimilarity$PythonSimScorer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Similarity$SimScorer),
            NULL
          };

          DEFINE_TYPE(PythonSimilarity$PythonSimScorer, t_PythonSimilarity$PythonSimScorer, PythonSimilarity$PythonSimScorer);

          void t_PythonSimilarity$PythonSimScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonSimilarity$PythonSimScorer), &PY_TYPE_DEF(PythonSimilarity$PythonSimScorer), module, "PythonSimilarity$PythonSimScorer", 1);
          }

          void t_PythonSimilarity$PythonSimScorer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonSimilarity$PythonSimScorer), "class_", make_descriptor(PythonSimilarity$PythonSimScorer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonSimilarity$PythonSimScorer), "wrapfn_", make_descriptor(t_PythonSimilarity$PythonSimScorer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonSimilarity$PythonSimScorer), "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonSimilarity$PythonSimScorer::initializeClass);
            JNINativeMethod methods[] = {
              { "pythonDecRef", "()V", (void *) t_PythonSimilarity$PythonSimScorer_pythonDecRef0 },
              { "score", "(FJ)F", (void *) t_PythonSimilarity$PythonSimScorer_score1 },
            };
            env->registerNatives(cls, methods, 2);
          }

          static PyObject *t_PythonSimilarity$PythonSimScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonSimilarity$PythonSimScorer::initializeClass, 1)))
              return NULL;
            return t_PythonSimilarity$PythonSimScorer::wrap_Object(PythonSimilarity$PythonSimScorer(((t_PythonSimilarity$PythonSimScorer *) arg)->object.this$));
          }
          static PyObject *t_PythonSimilarity$PythonSimScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonSimilarity$PythonSimScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonSimilarity$PythonSimScorer_init_(t_PythonSimilarity$PythonSimScorer *self, PyObject *args, PyObject *kwds)
          {
            PythonSimilarity$PythonSimScorer object((jobject) NULL);

            INT_CALL(object = PythonSimilarity$PythonSimScorer());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonSimilarity$PythonSimScorer_finalize(t_PythonSimilarity$PythonSimScorer *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonSimilarity$PythonSimScorer_pythonExtension(t_PythonSimilarity$PythonSimScorer *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static void JNICALL t_PythonSimilarity$PythonSimScorer_pythonDecRef0(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSimilarity$PythonSimScorer::mids$[PythonSimilarity$PythonSimScorer::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonSimilarity$PythonSimScorer::mids$[PythonSimilarity$PythonSimScorer::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static jfloat JNICALL t_PythonSimilarity$PythonSimScorer_score1(JNIEnv *jenv, jobject jobj, jfloat a0, jlong a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSimilarity$PythonSimScorer::mids$[PythonSimilarity$PythonSimScorer::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "score", "fL", (float) a0, (long long) a1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("score", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static PyObject *t_PythonSimilarity$PythonSimScorer_get__self(t_PythonSimilarity$PythonSimScorer *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/CheckIndex$Status$SegmentInfoStatus.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status::class$ = NULL;
        jmethodID *CheckIndex$Status::mids$ = NULL;
        jfieldID *CheckIndex$Status::fids$ = NULL;
        bool CheckIndex$Status::live$ = false;

        jclass CheckIndex$Status::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status");

            fids$ = new jfieldID[max_fid];
            fids$[fid_clean] = env->getFieldID(cls, "clean", "Z");
            fids$[fid_dir] = env->getFieldID(cls, "dir", "Lorg/apache/lucene/store/Directory;");
            fids$[fid_maxSegmentName] = env->getFieldID(cls, "maxSegmentName", "J");
            fids$[fid_missingSegments] = env->getFieldID(cls, "missingSegments", "Z");
            fids$[fid_numBadSegments] = env->getFieldID(cls, "numBadSegments", "I");
            fids$[fid_numSegments] = env->getFieldID(cls, "numSegments", "I");
            fids$[fid_partial] = env->getFieldID(cls, "partial", "Z");
            fids$[fid_segmentInfos] = env->getFieldID(cls, "segmentInfos", "Ljava/util/List;");
            fids$[fid_segmentsChecked] = env->getFieldID(cls, "segmentsChecked", "Ljava/util/List;");
            fids$[fid_segmentsFileName] = env->getFieldID(cls, "segmentsFileName", "Ljava/lang/String;");
            fids$[fid_toolOutOfDate] = env->getFieldID(cls, "toolOutOfDate", "Z");
            fids$[fid_totLoseDocCount] = env->getFieldID(cls, "totLoseDocCount", "I");
            fids$[fid_userData] = env->getFieldID(cls, "userData", "Ljava/util/Map;");
            fids$[fid_validCounter] = env->getFieldID(cls, "validCounter", "Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean CheckIndex$Status::_get_clean() const
        {
          return env->getBooleanField(this$, fids$[fid_clean]);
        }

        void CheckIndex$Status::_set_clean(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_clean], a0);
        }

        ::org::apache::lucene::store::Directory CheckIndex$Status::_get_dir() const
        {
          return ::org::apache::lucene::store::Directory(env->getObjectField(this$, fids$[fid_dir]));
        }

        void CheckIndex$Status::_set_dir(const ::org::apache::lucene::store::Directory & a0) const
        {
          env->setObjectField(this$, fids$[fid_dir], a0.this$);
        }

        jlong CheckIndex$Status::_get_maxSegmentName() const
        {
          return env->getLongField(this$, fids$[fid_maxSegmentName]);
        }

        void CheckIndex$Status::_set_maxSegmentName(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_maxSegmentName], a0);
        }

        jboolean CheckIndex$Status::_get_missingSegments() const
        {
          return env->getBooleanField(this$, fids$[fid_missingSegments]);
        }

        void CheckIndex$Status::_set_missingSegments(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_missingSegments], a0);
        }

        jint CheckIndex$Status::_get_numBadSegments() const
        {
          return env->getIntField(this$, fids$[fid_numBadSegments]);
        }

        void CheckIndex$Status::_set_numBadSegments(jint a0) const
        {
          env->setIntField(this$, fids$[fid_numBadSegments], a0);
        }

        jint CheckIndex$Status::_get_numSegments() const
        {
          return env->getIntField(this$, fids$[fid_numSegments]);
        }

        void CheckIndex$Status::_set_numSegments(jint a0) const
        {
          env->setIntField(this$, fids$[fid_numSegments], a0);
        }

        jboolean CheckIndex$Status::_get_partial() const
        {
          return env->getBooleanField(this$, fids$[fid_partial]);
        }

        void CheckIndex$Status::_set_partial(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_partial], a0);
        }

        ::java::util::List CheckIndex$Status::_get_segmentInfos() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_segmentInfos]));
        }

        void CheckIndex$Status::_set_segmentInfos(const ::java::util::List & a0) const
        {
          env->setObjectField(this$, fids$[fid_segmentInfos], a0.this$);
        }

        ::java::util::List CheckIndex$Status::_get_segmentsChecked() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_segmentsChecked]));
        }

        void CheckIndex$Status::_set_segmentsChecked(const ::java::util::List & a0) const
        {
          env->setObjectField(this$, fids$[fid_segmentsChecked], a0.this$);
        }

        ::java::lang::String CheckIndex$Status::_get_segmentsFileName() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_segmentsFileName]));
        }

        void CheckIndex$Status::_set_segmentsFileName(const ::java::lang::String & a0) const
        {
          env->setObjectField(this$, fids$[fid_segmentsFileName], a0.this$);
        }

        jboolean CheckIndex$Status::_get_toolOutOfDate() const
        {
          return env->getBooleanField(this$, fids$[fid_toolOutOfDate]);
        }

        void CheckIndex$Status::_set_toolOutOfDate(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_toolOutOfDate], a0);
        }

        jint CheckIndex$Status::_get_totLoseDocCount() const
        {
          return env->getIntField(this$, fids$[fid_totLoseDocCount]);
        }

        void CheckIndex$Status::_set_totLoseDocCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_totLoseDocCount], a0);
        }

        ::java::util::Map CheckIndex$Status::_get_userData() const
        {
          return ::java::util::Map(env->getObjectField(this$, fids$[fid_userData]));
        }

        void CheckIndex$Status::_set_userData(const ::java::util::Map & a0) const
        {
          env->setObjectField(this$, fids$[fid_userData], a0.this$);
        }

        jboolean CheckIndex$Status::_get_validCounter() const
        {
          return env->getBooleanField(this$, fids$[fid_validCounter]);
        }

        void CheckIndex$Status::_set_validCounter(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_validCounter], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/CheckIndex$Status$IndexSortStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$PointsStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$DocValuesStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermVectorStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermIndexStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldNormStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldInfoStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$LiveDocStatus.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status_get__clean(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__clean(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__dir(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__dir(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__maxSegmentName(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__maxSegmentName(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__missingSegments(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__missingSegments(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__numBadSegments(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__numBadSegments(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__numSegments(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__numSegments(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__partial(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__partial(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__segmentInfos(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__segmentInfos(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__segmentsChecked(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__segmentsChecked(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__segmentsFileName(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__segmentsFileName(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__toolOutOfDate(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__toolOutOfDate(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__totLoseDocCount(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__totLoseDocCount(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__userData(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__userData(t_CheckIndex$Status *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status_get__validCounter(t_CheckIndex$Status *self, void *data);
        static int t_CheckIndex$Status_set__validCounter(t_CheckIndex$Status *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, clean),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, dir),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, maxSegmentName),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, missingSegments),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, numBadSegments),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, numSegments),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, partial),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, segmentInfos),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, segmentsChecked),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, segmentsFileName),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, toolOutOfDate),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, totLoseDocCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, userData),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status, validCounter),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CheckIndex$Status)[] = {
          { Py_tp_methods, t_CheckIndex$Status__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_CheckIndex$Status__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CheckIndex$Status)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CheckIndex$Status, t_CheckIndex$Status, CheckIndex$Status);

        void t_CheckIndex$Status::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status), &PY_TYPE_DEF(CheckIndex$Status), module, "CheckIndex$Status", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status), "IndexSortStatus", make_descriptor(&PY_TYPE_DEF(CheckIndex$Status$IndexSortStatus)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status), "PointsStatus", make_descriptor(&PY_TYPE_DEF(CheckIndex$Status$PointsStatus)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status), "DocValuesStatus", make_descriptor(&PY_TYPE_DEF(CheckIndex$Status$DocValuesStatus)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status), "TermVectorStatus", make_descriptor(&PY_TYPE_DEF(CheckIndex$Status$TermVectorStatus)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status), "StoredFieldStatus", make_descriptor(&PY_TYPE_DEF(CheckIndex$Status$StoredFieldStatus)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status), "TermIndexStatus", make_descriptor(&PY_TYPE_DEF(CheckIndex$Status$TermIndexStatus)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status), "FieldNormStatus", make_descriptor(&PY_TYPE_DEF(CheckIndex$Status$FieldNormStatus)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status), "FieldInfoStatus", make_descriptor(&PY_TYPE_DEF(CheckIndex$Status$FieldInfoStatus)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status), "LiveDocStatus", make_descriptor(&PY_TYPE_DEF(CheckIndex$Status$LiveDocStatus)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status), "SegmentInfoStatus", make_descriptor(&PY_TYPE_DEF(CheckIndex$Status$SegmentInfoStatus)));
        }

        void t_CheckIndex$Status::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status), "class_", make_descriptor(CheckIndex$Status::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status), "wrapfn_", make_descriptor(t_CheckIndex$Status::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status::wrap_Object(CheckIndex$Status(((t_CheckIndex$Status *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status_get__clean(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_clean());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__clean(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_clean(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "clean", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__dir(t_CheckIndex$Status *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object._get_dir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }
        static int t_CheckIndex$Status_set__dir(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &value))
          {
            INT_CALL(self->object._set_dir(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "dir", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__maxSegmentName(t_CheckIndex$Status *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_maxSegmentName());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status_set__maxSegmentName(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_maxSegmentName(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "maxSegmentName", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__missingSegments(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_missingSegments());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__missingSegments(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_missingSegments(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "missingSegments", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__numBadSegments(t_CheckIndex$Status *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numBadSegments());
          return PyLong_FromLong((long) value);
        }
        static int t_CheckIndex$Status_set__numBadSegments(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_numBadSegments(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "numBadSegments", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__numSegments(t_CheckIndex$Status *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numSegments());
          return PyLong_FromLong((long) value);
        }
        static int t_CheckIndex$Status_set__numSegments(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_numSegments(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "numSegments", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__partial(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_partial());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__partial(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_partial(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "partial", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__segmentInfos(t_CheckIndex$Status *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentInfos());
          return ::java::util::t_List::wrap_Object(value);
        }
        static int t_CheckIndex$Status_set__segmentInfos(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::java::util::List value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::List::initializeClass, &value))
          {
            INT_CALL(self->object._set_segmentInfos(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "segmentInfos", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__segmentsChecked(t_CheckIndex$Status *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentsChecked());
          return ::java::util::t_List::wrap_Object(value);
        }
        static int t_CheckIndex$Status_set__segmentsChecked(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::java::util::List value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::List::initializeClass, &value))
          {
            INT_CALL(self->object._set_segmentsChecked(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "segmentsChecked", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__segmentsFileName(t_CheckIndex$Status *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentsFileName());
          return j2p(value);
        }
        static int t_CheckIndex$Status_set__segmentsFileName(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object._set_segmentsFileName(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "segmentsFileName", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__toolOutOfDate(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_toolOutOfDate());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__toolOutOfDate(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_toolOutOfDate(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "toolOutOfDate", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__totLoseDocCount(t_CheckIndex$Status *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totLoseDocCount());
          return PyLong_FromLong((long) value);
        }
        static int t_CheckIndex$Status_set__totLoseDocCount(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_totLoseDocCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totLoseDocCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__userData(t_CheckIndex$Status *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object._get_userData());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_CheckIndex$Status_set__userData(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
          {
            INT_CALL(self->object._set_userData(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "userData", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status_get__validCounter(t_CheckIndex$Status *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_validCounter());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status_set__validCounter(t_CheckIndex$Status *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_validCounter(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "validCounter", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekAnalyzer::class$ = NULL;
          jmethodID *GreekAnalyzer::mids$ = NULL;
          bool GreekAnalyzer::live$ = false;
          ::java::lang::String *GreekAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass GreekAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekAnalyzer::GreekAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          GreekAnalyzer::GreekAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet GreekAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekAnalyzer_init_(t_GreekAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_GreekAnalyzer_get__defaultStopSet(t_GreekAnalyzer *self, void *data);
          static PyGetSetDef t_GreekAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_GreekAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GreekAnalyzer__methods_[] = {
            DECLARE_METHOD(t_GreekAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GreekAnalyzer)[] = {
            { Py_tp_methods, t_GreekAnalyzer__methods_ },
            { Py_tp_init, (void *) t_GreekAnalyzer_init_ },
            { Py_tp_getset, t_GreekAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GreekAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(GreekAnalyzer, t_GreekAnalyzer, GreekAnalyzer);

          void t_GreekAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekAnalyzer), &PY_TYPE_DEF(GreekAnalyzer), module, "GreekAnalyzer", 0);
          }

          void t_GreekAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GreekAnalyzer), "class_", make_descriptor(GreekAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GreekAnalyzer), "wrapfn_", make_descriptor(t_GreekAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GreekAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(GreekAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(GreekAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*GreekAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_GreekAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekAnalyzer::initializeClass, 1)))
              return NULL;
            return t_GreekAnalyzer::wrap_Object(GreekAnalyzer(((t_GreekAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_GreekAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekAnalyzer_init_(t_GreekAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                GreekAnalyzer object((jobject) NULL);

                INT_CALL(object = GreekAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                GreekAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GreekAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::el::GreekAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_GreekAnalyzer_get__defaultStopSet(t_GreekAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/BinaryPoint.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexableFieldType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *BinaryPoint::class$ = NULL;
        jmethodID *BinaryPoint::mids$ = NULL;
        bool BinaryPoint::live$ = false;

        jclass BinaryPoint::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/BinaryPoint");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_57773e472f0c3c94] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[[B)V");
            mids$[mid_init$_46c2686701f65efb] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[BLorg/apache/lucene/index/IndexableFieldType;)V");
            mids$[mid_newExactQuery_3bb1e280885a793f] = env->getStaticMethodID(cls, "newExactQuery", "(Ljava/lang/String;[B)Lorg/apache/lucene/search/Query;");
            mids$[mid_newRangeQuery_40492150c8117881] = env->getStaticMethodID(cls, "newRangeQuery", "(Ljava/lang/String;[B[B)Lorg/apache/lucene/search/Query;");
            mids$[mid_newRangeQuery_aa26657657afd00e] = env->getStaticMethodID(cls, "newRangeQuery", "(Ljava/lang/String;[[B[[B)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSetQuery_6c28ac0bb8758da5] = env->getStaticMethodID(cls, "newSetQuery", "(Ljava/lang/String;[[B)Lorg/apache/lucene/search/Query;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BinaryPoint::BinaryPoint(const ::java::lang::String & a0, const JArray< JArray< jbyte > > & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_57773e472f0c3c94, a0.this$, a1.this$)) {}

        BinaryPoint::BinaryPoint(const ::java::lang::String & a0, const JArray< jbyte > & a1, const ::org::apache::lucene::index::IndexableFieldType & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_46c2686701f65efb, a0.this$, a1.this$, a2.this$)) {}

        ::org::apache::lucene::search::Query BinaryPoint::newExactQuery(const ::java::lang::String & a0, const JArray< jbyte > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newExactQuery_3bb1e280885a793f], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query BinaryPoint::newRangeQuery(const ::java::lang::String & a0, const JArray< jbyte > & a1, const JArray< jbyte > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newRangeQuery_40492150c8117881], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query BinaryPoint::newRangeQuery(const ::java::lang::String & a0, const JArray< JArray< jbyte > > & a1, const JArray< JArray< jbyte > > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newRangeQuery_aa26657657afd00e], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query BinaryPoint::newSetQuery(const ::java::lang::String & a0, const JArray< JArray< jbyte > > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSetQuery_6c28ac0bb8758da5], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_BinaryPoint_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BinaryPoint_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BinaryPoint_init_(t_BinaryPoint *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BinaryPoint_newExactQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_BinaryPoint_newRangeQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_BinaryPoint_newSetQuery(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_BinaryPoint__methods_[] = {
          DECLARE_METHOD(t_BinaryPoint, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BinaryPoint, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BinaryPoint, newExactQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BinaryPoint, newRangeQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BinaryPoint, newSetQuery, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BinaryPoint)[] = {
          { Py_tp_methods, t_BinaryPoint__methods_ },
          { Py_tp_init, (void *) t_BinaryPoint_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BinaryPoint)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(BinaryPoint, t_BinaryPoint, BinaryPoint);

        void t_BinaryPoint::install(PyObject *module)
        {
          installType(&PY_TYPE(BinaryPoint), &PY_TYPE_DEF(BinaryPoint), module, "BinaryPoint", 0);
        }

        void t_BinaryPoint::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryPoint), "class_", make_descriptor(BinaryPoint::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryPoint), "wrapfn_", make_descriptor(t_BinaryPoint::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryPoint), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BinaryPoint_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BinaryPoint::initializeClass, 1)))
            return NULL;
          return t_BinaryPoint::wrap_Object(BinaryPoint(((t_BinaryPoint *) arg)->object.this$));
        }
        static PyObject *t_BinaryPoint_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BinaryPoint::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BinaryPoint_init_(t_BinaryPoint *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< JArray< jbyte > > a1((jobject) NULL);
              BinaryPoint object((jobject) NULL);

              if (!parseArgs(args, "s[[B", &a0, &a1))
              {
                INT_CALL(object = BinaryPoint(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              ::org::apache::lucene::index::IndexableFieldType a2((jobject) NULL);
              BinaryPoint object((jobject) NULL);

              if (!parseArgs(args, "s[Bk", ::org::apache::lucene::index::IndexableFieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = BinaryPoint(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BinaryPoint_newExactQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[B", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::BinaryPoint::newExactQuery(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newExactQuery", args);
          return NULL;
        }

        static PyObject *t_BinaryPoint_newRangeQuery(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              JArray< jbyte > a2((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "s[B[B", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::BinaryPoint::newRangeQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< JArray< jbyte > > a1((jobject) NULL);
              JArray< JArray< jbyte > > a2((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "s[[B[[B", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::BinaryPoint::newRangeQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newRangeQuery", args);
          return NULL;
        }

        static PyObject *t_BinaryPoint_newSetQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< JArray< jbyte > > a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[[B", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::BinaryPoint::newSetQuery(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSetQuery", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianNormalizationFilter::class$ = NULL;
          jmethodID *PersianNormalizationFilter::mids$ = NULL;
          bool PersianNormalizationFilter::live$ = false;

          jclass PersianNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianNormalizationFilter::PersianNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean PersianNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianNormalizationFilter_init_(t_PersianNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianNormalizationFilter_incrementToken(t_PersianNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_PersianNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_PersianNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PersianNormalizationFilter)[] = {
            { Py_tp_methods, t_PersianNormalizationFilter__methods_ },
            { Py_tp_init, (void *) t_PersianNormalizationFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PersianNormalizationFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(PersianNormalizationFilter, t_PersianNormalizationFilter, PersianNormalizationFilter);

          void t_PersianNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianNormalizationFilter), &PY_TYPE_DEF(PersianNormalizationFilter), module, "PersianNormalizationFilter", 0);
          }

          void t_PersianNormalizationFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianNormalizationFilter), "class_", make_descriptor(PersianNormalizationFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianNormalizationFilter), "wrapfn_", make_descriptor(t_PersianNormalizationFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianNormalizationFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PersianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_PersianNormalizationFilter::wrap_Object(PersianNormalizationFilter(((t_PersianNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_PersianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianNormalizationFilter_init_(t_PersianNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PersianNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PersianNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianNormalizationFilter_incrementToken(t_PersianNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(PersianNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/custom/CustomAnalyzer$ConditionBuilder.h"
#include "org/apache/lucene/analysis/custom/CustomAnalyzer$ConditionBuilder.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/custom/CustomAnalyzer$Builder.h"
#include "org/apache/lucene/analysis/util/TokenFilterFactory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace custom {

          ::java::lang::Class *CustomAnalyzer$ConditionBuilder::class$ = NULL;
          jmethodID *CustomAnalyzer$ConditionBuilder::mids$ = NULL;
          bool CustomAnalyzer$ConditionBuilder::live$ = false;

          jclass CustomAnalyzer$ConditionBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/custom/CustomAnalyzer$ConditionBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_addTokenFilter_b5659315bc690c84] = env->getMethodID(cls, "addTokenFilter", "(Ljava/lang/Class;[Ljava/lang/String;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$ConditionBuilder;");
              mids$[mid_addTokenFilter_e2f75fcc1afd6e92] = env->getMethodID(cls, "addTokenFilter", "(Ljava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$ConditionBuilder;");
              mids$[mid_addTokenFilter_eec22e805046d7ff] = env->getMethodID(cls, "addTokenFilter", "(Ljava/lang/Class;Ljava/util/Map;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$ConditionBuilder;");
              mids$[mid_addTokenFilter_f0669183a51fd5f6] = env->getMethodID(cls, "addTokenFilter", "(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$ConditionBuilder;");
              mids$[mid_endwhen_ebbca44065426767] = env->getMethodID(cls, "endwhen", "()Lorg/apache/lucene/analysis/custom/CustomAnalyzer$Builder;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CustomAnalyzer$ConditionBuilder CustomAnalyzer$ConditionBuilder::addTokenFilter(const ::java::lang::Class & a0, const JArray< ::java::lang::String > & a1) const
          {
            return CustomAnalyzer$ConditionBuilder(env->callObjectMethod(this$, mids$[mid_addTokenFilter_b5659315bc690c84], a0.this$, a1.this$));
          }

          CustomAnalyzer$ConditionBuilder CustomAnalyzer$ConditionBuilder::addTokenFilter(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return CustomAnalyzer$ConditionBuilder(env->callObjectMethod(this$, mids$[mid_addTokenFilter_e2f75fcc1afd6e92], a0.this$, a1.this$));
          }

          CustomAnalyzer$ConditionBuilder CustomAnalyzer$ConditionBuilder::addTokenFilter(const ::java::lang::Class & a0, const ::java::util::Map & a1) const
          {
            return CustomAnalyzer$ConditionBuilder(env->callObjectMethod(this$, mids$[mid_addTokenFilter_eec22e805046d7ff], a0.this$, a1.this$));
          }

          CustomAnalyzer$ConditionBuilder CustomAnalyzer$ConditionBuilder::addTokenFilter(const ::java::lang::String & a0, const ::java::util::Map & a1) const
          {
            return CustomAnalyzer$ConditionBuilder(env->callObjectMethod(this$, mids$[mid_addTokenFilter_f0669183a51fd5f6], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::custom::CustomAnalyzer$Builder CustomAnalyzer$ConditionBuilder::endwhen() const
          {
            return ::org::apache::lucene::analysis::custom::CustomAnalyzer$Builder(env->callObjectMethod(this$, mids$[mid_endwhen_ebbca44065426767]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace custom {
          static PyObject *t_CustomAnalyzer$ConditionBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CustomAnalyzer$ConditionBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CustomAnalyzer$ConditionBuilder_addTokenFilter(t_CustomAnalyzer$ConditionBuilder *self, PyObject *args);
          static PyObject *t_CustomAnalyzer$ConditionBuilder_endwhen(t_CustomAnalyzer$ConditionBuilder *self);

          static PyMethodDef t_CustomAnalyzer$ConditionBuilder__methods_[] = {
            DECLARE_METHOD(t_CustomAnalyzer$ConditionBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CustomAnalyzer$ConditionBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CustomAnalyzer$ConditionBuilder, addTokenFilter, METH_VARARGS),
            DECLARE_METHOD(t_CustomAnalyzer$ConditionBuilder, endwhen, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CustomAnalyzer$ConditionBuilder)[] = {
            { Py_tp_methods, t_CustomAnalyzer$ConditionBuilder__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CustomAnalyzer$ConditionBuilder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(CustomAnalyzer$ConditionBuilder, t_CustomAnalyzer$ConditionBuilder, CustomAnalyzer$ConditionBuilder);

          void t_CustomAnalyzer$ConditionBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(CustomAnalyzer$ConditionBuilder), &PY_TYPE_DEF(CustomAnalyzer$ConditionBuilder), module, "CustomAnalyzer$ConditionBuilder", 0);
          }

          void t_CustomAnalyzer$ConditionBuilder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CustomAnalyzer$ConditionBuilder), "class_", make_descriptor(CustomAnalyzer$ConditionBuilder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CustomAnalyzer$ConditionBuilder), "wrapfn_", make_descriptor(t_CustomAnalyzer$ConditionBuilder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CustomAnalyzer$ConditionBuilder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CustomAnalyzer$ConditionBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CustomAnalyzer$ConditionBuilder::initializeClass, 1)))
              return NULL;
            return t_CustomAnalyzer$ConditionBuilder::wrap_Object(CustomAnalyzer$ConditionBuilder(((t_CustomAnalyzer$ConditionBuilder *) arg)->object.this$));
          }
          static PyObject *t_CustomAnalyzer$ConditionBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CustomAnalyzer$ConditionBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CustomAnalyzer$ConditionBuilder_addTokenFilter(t_CustomAnalyzer$ConditionBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::Class a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                CustomAnalyzer$ConditionBuilder result((jobject) NULL);

                if (!parseArgs(args, "K[s", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
                {
                  OBJ_CALL(result = self->object.addTokenFilter(a0, a1));
                  return t_CustomAnalyzer$ConditionBuilder::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                CustomAnalyzer$ConditionBuilder result((jobject) NULL);

                if (!parseArgs(args, "s[s", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.addTokenFilter(a0, a1));
                  return t_CustomAnalyzer$ConditionBuilder::wrap_Object(result);
                }
              }
              {
                ::java::lang::Class a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                CustomAnalyzer$ConditionBuilder result((jobject) NULL);

                if (!parseArgs(args, "KK", ::java::lang::Class::initializeClass, ::java::util::Map::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  OBJ_CALL(result = self->object.addTokenFilter(a0, a1));
                  return t_CustomAnalyzer$ConditionBuilder::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                CustomAnalyzer$ConditionBuilder result((jobject) NULL);

                if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  OBJ_CALL(result = self->object.addTokenFilter(a0, a1));
                  return t_CustomAnalyzer$ConditionBuilder::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "addTokenFilter", args);
            return NULL;
          }

          static PyObject *t_CustomAnalyzer$ConditionBuilder_endwhen(t_CustomAnalyzer$ConditionBuilder *self)
          {
            ::org::apache::lucene::analysis::custom::CustomAnalyzer$Builder result((jobject) NULL);
            OBJ_CALL(result = self->object.endwhen());
            return ::org::apache::lucene::analysis::custom::t_CustomAnalyzer$Builder::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$UnaryContext.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/antlr/v4/runtime/Token.h"
#include "org/antlr/v4/runtime/atn/ParserATNSimulator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$UnaryContext::class$ = NULL;
          jmethodID *JavascriptParser$UnaryContext::mids$ = NULL;
          bool JavascriptParser$UnaryContext::live$ = false;

          jclass JavascriptParser$UnaryContext::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$UnaryContext");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5b630188893587b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;)V");
              mids$[mid_expression_c790b383f10157ae] = env->getMethodID(cls, "expression", "()Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$UnaryContext::JavascriptParser$UnaryContext(const ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext & a0) : ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->newObject(initializeClass, &mids$, mid_init$_5b630188893587b5, a0.this$)) {}

          ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext JavascriptParser$UnaryContext::expression() const
          {
            return ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->callObjectMethod(this$, mids$[mid_expression_c790b383f10157ae]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$UnaryContext_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$UnaryContext_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$UnaryContext_of_(t_JavascriptParser$UnaryContext *self, PyObject *args);
          static int t_JavascriptParser$UnaryContext_init_(t_JavascriptParser$UnaryContext *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JavascriptParser$UnaryContext_expression(t_JavascriptParser$UnaryContext *self);
          static PyObject *t_JavascriptParser$UnaryContext_get__parameters_(t_JavascriptParser$UnaryContext *self, void *data);
          static PyGetSetDef t_JavascriptParser$UnaryContext__fields_[] = {
            DECLARE_GET_FIELD(t_JavascriptParser$UnaryContext, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JavascriptParser$UnaryContext__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$UnaryContext, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$UnaryContext, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$UnaryContext, of_, METH_VARARGS),
            DECLARE_METHOD(t_JavascriptParser$UnaryContext, expression, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JavascriptParser$UnaryContext)[] = {
            { Py_tp_methods, t_JavascriptParser$UnaryContext__methods_ },
            { Py_tp_init, (void *) t_JavascriptParser$UnaryContext_init_ },
            { Py_tp_getset, t_JavascriptParser$UnaryContext__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JavascriptParser$UnaryContext)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext),
            NULL
          };

          DEFINE_TYPE(JavascriptParser$UnaryContext, t_JavascriptParser$UnaryContext, JavascriptParser$UnaryContext);
          PyObject *t_JavascriptParser$UnaryContext::wrap_Object(const JavascriptParser$UnaryContext& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$UnaryContext::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$UnaryContext *self = (t_JavascriptParser$UnaryContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_JavascriptParser$UnaryContext::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$UnaryContext::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$UnaryContext *self = (t_JavascriptParser$UnaryContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_JavascriptParser$UnaryContext::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$UnaryContext), &PY_TYPE_DEF(JavascriptParser$UnaryContext), module, "JavascriptParser$UnaryContext", 0);
          }

          void t_JavascriptParser$UnaryContext::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$UnaryContext), "class_", make_descriptor(JavascriptParser$UnaryContext::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$UnaryContext), "wrapfn_", make_descriptor(t_JavascriptParser$UnaryContext::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$UnaryContext), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$UnaryContext_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$UnaryContext::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$UnaryContext::wrap_Object(JavascriptParser$UnaryContext(((t_JavascriptParser$UnaryContext *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$UnaryContext_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$UnaryContext::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptParser$UnaryContext_of_(t_JavascriptParser$UnaryContext *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_JavascriptParser$UnaryContext_init_(t_JavascriptParser$UnaryContext *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext a0((jobject) NULL);
            PyTypeObject **p0;
            JavascriptParser$UnaryContext object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext::initializeClass, &a0, &p0, ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::parameters_))
            {
              INT_CALL(object = JavascriptParser$UnaryContext(a0));
              self->object = object;
              self->parameters[0] = ::org::antlr::v4::runtime::PY_TYPE(Token);
              self->parameters[1] = ::org::antlr::v4::runtime::atn::PY_TYPE(ParserATNSimulator);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JavascriptParser$UnaryContext_expression(t_JavascriptParser$UnaryContext *self)
          {
            ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext result((jobject) NULL);
            OBJ_CALL(result = self->object.expression());
            return ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::wrap_Object(result);
          }
          static PyObject *t_JavascriptParser$UnaryContext_get__parameters_(t_JavascriptParser$UnaryContext *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/DelimitedTermFrequencyTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *DelimitedTermFrequencyTokenFilter::class$ = NULL;
          jmethodID *DelimitedTermFrequencyTokenFilter::mids$ = NULL;
          bool DelimitedTermFrequencyTokenFilter::live$ = false;
          jchar DelimitedTermFrequencyTokenFilter::DEFAULT_DELIMITER = (jchar) 0;

          jclass DelimitedTermFrequencyTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/DelimitedTermFrequencyTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_ab485f7fd2eaf684] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;C)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_DELIMITER = env->getStaticCharField(cls, "DEFAULT_DELIMITER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DelimitedTermFrequencyTokenFilter::DelimitedTermFrequencyTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          DelimitedTermFrequencyTokenFilter::DelimitedTermFrequencyTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jchar a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ab485f7fd2eaf684, a0.this$, a1)) {}

          jboolean DelimitedTermFrequencyTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_DelimitedTermFrequencyTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DelimitedTermFrequencyTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DelimitedTermFrequencyTokenFilter_init_(t_DelimitedTermFrequencyTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DelimitedTermFrequencyTokenFilter_incrementToken(t_DelimitedTermFrequencyTokenFilter *self, PyObject *args);

          static PyMethodDef t_DelimitedTermFrequencyTokenFilter__methods_[] = {
            DECLARE_METHOD(t_DelimitedTermFrequencyTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedTermFrequencyTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedTermFrequencyTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DelimitedTermFrequencyTokenFilter)[] = {
            { Py_tp_methods, t_DelimitedTermFrequencyTokenFilter__methods_ },
            { Py_tp_init, (void *) t_DelimitedTermFrequencyTokenFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DelimitedTermFrequencyTokenFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(DelimitedTermFrequencyTokenFilter, t_DelimitedTermFrequencyTokenFilter, DelimitedTermFrequencyTokenFilter);

          void t_DelimitedTermFrequencyTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DelimitedTermFrequencyTokenFilter), &PY_TYPE_DEF(DelimitedTermFrequencyTokenFilter), module, "DelimitedTermFrequencyTokenFilter", 0);
          }

          void t_DelimitedTermFrequencyTokenFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedTermFrequencyTokenFilter), "class_", make_descriptor(DelimitedTermFrequencyTokenFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedTermFrequencyTokenFilter), "wrapfn_", make_descriptor(t_DelimitedTermFrequencyTokenFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedTermFrequencyTokenFilter), "boxfn_", make_descriptor(boxObject));
            env->getClass(DelimitedTermFrequencyTokenFilter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedTermFrequencyTokenFilter), "DEFAULT_DELIMITER", make_descriptor(DelimitedTermFrequencyTokenFilter::DEFAULT_DELIMITER));
          }

          static PyObject *t_DelimitedTermFrequencyTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DelimitedTermFrequencyTokenFilter::initializeClass, 1)))
              return NULL;
            return t_DelimitedTermFrequencyTokenFilter::wrap_Object(DelimitedTermFrequencyTokenFilter(((t_DelimitedTermFrequencyTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_DelimitedTermFrequencyTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DelimitedTermFrequencyTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DelimitedTermFrequencyTokenFilter_init_(t_DelimitedTermFrequencyTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                DelimitedTermFrequencyTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = DelimitedTermFrequencyTokenFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jchar a1;
                DelimitedTermFrequencyTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kC", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = DelimitedTermFrequencyTokenFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DelimitedTermFrequencyTokenFilter_incrementToken(t_DelimitedTermFrequencyTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(DelimitedTermFrequencyTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DateTools$Resolution::class$ = NULL;
        jmethodID *DateTools$Resolution::mids$ = NULL;
        bool DateTools$Resolution::live$ = false;
        DateTools$Resolution *DateTools$Resolution::DAY = NULL;
        DateTools$Resolution *DateTools$Resolution::HOUR = NULL;
        DateTools$Resolution *DateTools$Resolution::MILLISECOND = NULL;
        DateTools$Resolution *DateTools$Resolution::MINUTE = NULL;
        DateTools$Resolution *DateTools$Resolution::MONTH = NULL;
        DateTools$Resolution *DateTools$Resolution::SECOND = NULL;
        DateTools$Resolution *DateTools$Resolution::YEAR = NULL;

        jclass DateTools$Resolution::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DateTools$Resolution");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_valueOf_29edadd05c3fc82d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/DateTools$Resolution;");
            mids$[mid_values_4c09a11c3398f818] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/DateTools$Resolution;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DAY = new DateTools$Resolution(env->getStaticObjectField(cls, "DAY", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            HOUR = new DateTools$Resolution(env->getStaticObjectField(cls, "HOUR", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            MILLISECOND = new DateTools$Resolution(env->getStaticObjectField(cls, "MILLISECOND", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            MINUTE = new DateTools$Resolution(env->getStaticObjectField(cls, "MINUTE", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            MONTH = new DateTools$Resolution(env->getStaticObjectField(cls, "MONTH", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            SECOND = new DateTools$Resolution(env->getStaticObjectField(cls, "SECOND", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            YEAR = new DateTools$Resolution(env->getStaticObjectField(cls, "YEAR", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String DateTools$Resolution::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        DateTools$Resolution DateTools$Resolution::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DateTools$Resolution(env->callStaticObjectMethod(cls, mids$[mid_valueOf_29edadd05c3fc82d], a0.this$));
        }

        JArray< DateTools$Resolution > DateTools$Resolution::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< DateTools$Resolution >(env->callStaticObjectMethod(cls, mids$[mid_values_4c09a11c3398f818]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DateTools$Resolution_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools$Resolution_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools$Resolution_of_(t_DateTools$Resolution *self, PyObject *args);
        static PyObject *t_DateTools$Resolution_toString(t_DateTools$Resolution *self, PyObject *args);
        static PyObject *t_DateTools$Resolution_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_DateTools$Resolution_values(PyTypeObject *type);
        static PyObject *t_DateTools$Resolution_get__parameters_(t_DateTools$Resolution *self, void *data);
        static PyGetSetDef t_DateTools$Resolution__fields_[] = {
          DECLARE_GET_FIELD(t_DateTools$Resolution, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DateTools$Resolution__methods_[] = {
          DECLARE_METHOD(t_DateTools$Resolution, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools$Resolution, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools$Resolution, of_, METH_VARARGS),
          DECLARE_METHOD(t_DateTools$Resolution, toString, METH_VARARGS),
          DECLARE_METHOD(t_DateTools$Resolution, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DateTools$Resolution, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DateTools$Resolution)[] = {
          { Py_tp_methods, t_DateTools$Resolution__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_DateTools$Resolution__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DateTools$Resolution)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(DateTools$Resolution, t_DateTools$Resolution, DateTools$Resolution);
        PyObject *t_DateTools$Resolution::wrap_Object(const DateTools$Resolution& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DateTools$Resolution::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DateTools$Resolution *self = (t_DateTools$Resolution *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DateTools$Resolution::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DateTools$Resolution::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DateTools$Resolution *self = (t_DateTools$Resolution *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DateTools$Resolution::install(PyObject *module)
        {
          installType(&PY_TYPE(DateTools$Resolution), &PY_TYPE_DEF(DateTools$Resolution), module, "DateTools$Resolution", 0);
        }

        void t_DateTools$Resolution::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DateTools$Resolution), "class_", make_descriptor(DateTools$Resolution::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DateTools$Resolution), "wrapfn_", make_descriptor(t_DateTools$Resolution::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DateTools$Resolution), "boxfn_", make_descriptor(boxObject));
          env->getClass(DateTools$Resolution::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(DateTools$Resolution), "DAY", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::DAY)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DateTools$Resolution), "HOUR", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::HOUR)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DateTools$Resolution), "MILLISECOND", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::MILLISECOND)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DateTools$Resolution), "MINUTE", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::MINUTE)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DateTools$Resolution), "MONTH", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::MONTH)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DateTools$Resolution), "SECOND", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::SECOND)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DateTools$Resolution), "YEAR", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::YEAR)));
        }

        static PyObject *t_DateTools$Resolution_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DateTools$Resolution::initializeClass, 1)))
            return NULL;
          return t_DateTools$Resolution::wrap_Object(DateTools$Resolution(((t_DateTools$Resolution *) arg)->object.this$));
        }
        static PyObject *t_DateTools$Resolution_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DateTools$Resolution::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DateTools$Resolution_of_(t_DateTools$Resolution *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_DateTools$Resolution_toString(t_DateTools$Resolution *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(DateTools$Resolution), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DateTools$Resolution_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          DateTools$Resolution result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools$Resolution::valueOf(a0));
            return t_DateTools$Resolution::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_DateTools$Resolution_values(PyTypeObject *type)
        {
          JArray< DateTools$Resolution > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::DateTools$Resolution::values());
          return JArray<jobject>(result.this$).wrap(t_DateTools$Resolution::wrap_jobject);
        }
        static PyObject *t_DateTools$Resolution_get__parameters_(t_DateTools$Resolution *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/OpenStringBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/OpenStringBuilder.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/lang/Appendable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *OpenStringBuilder::class$ = NULL;
          jmethodID *OpenStringBuilder::mids$ = NULL;
          bool OpenStringBuilder::live$ = false;

          jclass OpenStringBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/OpenStringBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_d7b537fea0247190] = env->getMethodID(cls, "<init>", "([CI)V");
              mids$[mid_append_eba659ea75d7ed5a] = env->getMethodID(cls, "append", "(C)Ljava/lang/Appendable;");
              mids$[mid_append_aaf0e49ea847d591] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/lang/Appendable;");
              mids$[mid_append_b7e44439517a620d] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;");
              mids$[mid_capacity_9972fcc56b44e79d] = env->getMethodID(cls, "capacity", "()I");
              mids$[mid_charAt_ebc61ec1e57770d1] = env->getMethodID(cls, "charAt", "(I)C");
              mids$[mid_flush_f2cc1bce94666404] = env->getMethodID(cls, "flush", "()V");
              mids$[mid_getArray_e11cf13c9a887534] = env->getMethodID(cls, "getArray", "()[C");
              mids$[mid_length_9972fcc56b44e79d] = env->getMethodID(cls, "length", "()I");
              mids$[mid_reserve_040c4cd0390c5aff] = env->getMethodID(cls, "reserve", "(I)V");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_set_d7b537fea0247190] = env->getMethodID(cls, "set", "([CI)V");
              mids$[mid_setCharAt_49eec491b83160ef] = env->getMethodID(cls, "setCharAt", "(IC)V");
              mids$[mid_setLength_040c4cd0390c5aff] = env->getMethodID(cls, "setLength", "(I)V");
              mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
              mids$[mid_subSequence_26d6f5be97bcdc38] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
              mids$[mid_toCharArray_e11cf13c9a887534] = env->getMethodID(cls, "toCharArray", "()[C");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_unsafeWrite_b227b2c08d18d29e] = env->getMethodID(cls, "unsafeWrite", "(C)V");
              mids$[mid_unsafeWrite_040c4cd0390c5aff] = env->getMethodID(cls, "unsafeWrite", "(I)V");
              mids$[mid_unsafeWrite_d5128be76a214037] = env->getMethodID(cls, "unsafeWrite", "([CII)V");
              mids$[mid_write_82dffe1ba55ed767] = env->getMethodID(cls, "write", "([C)V");
              mids$[mid_write_9fd2eb66a64e6f0f] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
              mids$[mid_write_3dcbae012727a44f] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/analysis/util/OpenStringBuilder;)V");
              mids$[mid_write_b227b2c08d18d29e] = env->getMethodID(cls, "write", "(C)V");
              mids$[mid_write_040c4cd0390c5aff] = env->getMethodID(cls, "write", "(I)V");
              mids$[mid_write_d5128be76a214037] = env->getMethodID(cls, "write", "([CII)V");
              mids$[mid_resize_040c4cd0390c5aff] = env->getMethodID(cls, "resize", "(I)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OpenStringBuilder::OpenStringBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          OpenStringBuilder::OpenStringBuilder(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          OpenStringBuilder::OpenStringBuilder(const JArray< jchar > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d7b537fea0247190, a0.this$, a1)) {}

          ::java::lang::Appendable OpenStringBuilder::append(jchar a0) const
          {
            return ::java::lang::Appendable(env->callObjectMethod(this$, mids$[mid_append_eba659ea75d7ed5a], a0));
          }

          ::java::lang::Appendable OpenStringBuilder::append(const ::java::lang::CharSequence & a0) const
          {
            return ::java::lang::Appendable(env->callObjectMethod(this$, mids$[mid_append_aaf0e49ea847d591], a0.this$));
          }

          ::java::lang::Appendable OpenStringBuilder::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
          {
            return ::java::lang::Appendable(env->callObjectMethod(this$, mids$[mid_append_b7e44439517a620d], a0.this$, a1, a2));
          }

          jint OpenStringBuilder::capacity() const
          {
            return env->callIntMethod(this$, mids$[mid_capacity_9972fcc56b44e79d]);
          }

          jchar OpenStringBuilder::charAt(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_charAt_ebc61ec1e57770d1], a0);
          }

          void OpenStringBuilder::flush() const
          {
            env->callVoidMethod(this$, mids$[mid_flush_f2cc1bce94666404]);
          }

          JArray< jchar > OpenStringBuilder::getArray() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getArray_e11cf13c9a887534]));
          }

          jint OpenStringBuilder::length() const
          {
            return env->callIntMethod(this$, mids$[mid_length_9972fcc56b44e79d]);
          }

          void OpenStringBuilder::reserve(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reserve_040c4cd0390c5aff], a0);
          }

          void OpenStringBuilder::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }

          void OpenStringBuilder::set(const JArray< jchar > & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_set_d7b537fea0247190], a0.this$, a1);
          }

          void OpenStringBuilder::setCharAt(jint a0, jchar a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setCharAt_49eec491b83160ef], a0, a1);
          }

          void OpenStringBuilder::setLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLength_040c4cd0390c5aff], a0);
          }

          jint OpenStringBuilder::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
          }

          ::java::lang::CharSequence OpenStringBuilder::subSequence(jint a0, jint a1) const
          {
            return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_26d6f5be97bcdc38], a0, a1));
          }

          JArray< jchar > OpenStringBuilder::toCharArray() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_toCharArray_e11cf13c9a887534]));
          }

          ::java::lang::String OpenStringBuilder::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          void OpenStringBuilder::unsafeWrite(jchar a0) const
          {
            env->callVoidMethod(this$, mids$[mid_unsafeWrite_b227b2c08d18d29e], a0);
          }

          void OpenStringBuilder::unsafeWrite(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_unsafeWrite_040c4cd0390c5aff], a0);
          }

          void OpenStringBuilder::unsafeWrite(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_unsafeWrite_d5128be76a214037], a0.this$, a1, a2);
          }

          void OpenStringBuilder::write(const JArray< jchar > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_82dffe1ba55ed767], a0.this$);
          }

          void OpenStringBuilder::write(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_9fd2eb66a64e6f0f], a0.this$);
          }

          void OpenStringBuilder::write(const OpenStringBuilder & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_3dcbae012727a44f], a0.this$);
          }

          void OpenStringBuilder::write(jchar a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_b227b2c08d18d29e], a0);
          }

          void OpenStringBuilder::write(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_040c4cd0390c5aff], a0);
          }

          void OpenStringBuilder::write(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_write_d5128be76a214037], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_OpenStringBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OpenStringBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OpenStringBuilder_init_(t_OpenStringBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OpenStringBuilder_append(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_capacity(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_charAt(t_OpenStringBuilder *self, PyObject *arg);
          static PyObject *t_OpenStringBuilder_flush(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_getArray(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_length(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_reserve(t_OpenStringBuilder *self, PyObject *arg);
          static PyObject *t_OpenStringBuilder_reset(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_set(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_setCharAt(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_setLength(t_OpenStringBuilder *self, PyObject *arg);
          static PyObject *t_OpenStringBuilder_size(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_subSequence(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_toCharArray(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_toString(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_unsafeWrite(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_write(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_get__array(t_OpenStringBuilder *self, void *data);
          static PyGetSetDef t_OpenStringBuilder__fields_[] = {
            DECLARE_GET_FIELD(t_OpenStringBuilder, array),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_OpenStringBuilder__methods_[] = {
            DECLARE_METHOD(t_OpenStringBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OpenStringBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OpenStringBuilder, append, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, capacity, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, charAt, METH_O),
            DECLARE_METHOD(t_OpenStringBuilder, flush, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, getArray, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, length, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, reserve, METH_O),
            DECLARE_METHOD(t_OpenStringBuilder, reset, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, set, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, setCharAt, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, setLength, METH_O),
            DECLARE_METHOD(t_OpenStringBuilder, size, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, subSequence, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, toCharArray, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, toString, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, unsafeWrite, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(OpenStringBuilder)[] = {
            { Py_tp_methods, t_OpenStringBuilder__methods_ },
            { Py_tp_init, (void *) t_OpenStringBuilder_init_ },
            { Py_tp_getset, t_OpenStringBuilder__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(OpenStringBuilder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(OpenStringBuilder, t_OpenStringBuilder, OpenStringBuilder);

          void t_OpenStringBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(OpenStringBuilder), &PY_TYPE_DEF(OpenStringBuilder), module, "OpenStringBuilder", 0);
          }

          void t_OpenStringBuilder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(OpenStringBuilder), "class_", make_descriptor(OpenStringBuilder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OpenStringBuilder), "wrapfn_", make_descriptor(t_OpenStringBuilder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OpenStringBuilder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OpenStringBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OpenStringBuilder::initializeClass, 1)))
              return NULL;
            return t_OpenStringBuilder::wrap_Object(OpenStringBuilder(((t_OpenStringBuilder *) arg)->object.this$));
          }
          static PyObject *t_OpenStringBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OpenStringBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OpenStringBuilder_init_(t_OpenStringBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                OpenStringBuilder object((jobject) NULL);

                INT_CALL(object = OpenStringBuilder());
                self->object = object;
                break;
              }
             case 1:
              {
                jint a0;
                OpenStringBuilder object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = OpenStringBuilder(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                OpenStringBuilder object((jobject) NULL);

                if (!parseArgs(args, "[CI", &a0, &a1))
                {
                  INT_CALL(object = OpenStringBuilder(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OpenStringBuilder_append(t_OpenStringBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jchar a0;
                ::java::lang::Appendable result((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::java::lang::t_Appendable::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Appendable result((jobject) NULL);

                if (!parseArgs(args, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::java::lang::t_Appendable::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint a2;
                ::java::lang::Appendable result((jobject) NULL);

                if (!parseArgs(args, "OII", ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.append(a0, a1, a2));
                  return ::java::lang::t_Appendable::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_capacity(t_OpenStringBuilder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.capacity());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_OpenStringBuilder_charAt(t_OpenStringBuilder *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.charAt(a0));
              return c2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "charAt", arg);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_flush(t_OpenStringBuilder *self)
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          static PyObject *t_OpenStringBuilder_getArray(t_OpenStringBuilder *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.getArray());
            return result.wrap();
          }

          static PyObject *t_OpenStringBuilder_length(t_OpenStringBuilder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.length());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_OpenStringBuilder_reserve(t_OpenStringBuilder *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.reserve(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "reserve", arg);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_reset(t_OpenStringBuilder *self)
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          static PyObject *t_OpenStringBuilder_set(t_OpenStringBuilder *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(self->object.set(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "set", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_setCharAt(t_OpenStringBuilder *self, PyObject *args)
          {
            jint a0;
            jchar a1;

            if (!parseArgs(args, "IC", &a0, &a1))
            {
              OBJ_CALL(self->object.setCharAt(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setCharAt", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_setLength(t_OpenStringBuilder *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLength", arg);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_size(t_OpenStringBuilder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_OpenStringBuilder_subSequence(t_OpenStringBuilder *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::lang::CharSequence result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.subSequence(a0, a1));
              return ::java::lang::t_CharSequence::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subSequence", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_toCharArray(t_OpenStringBuilder *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.toCharArray());
            return result.wrap();
          }

          static PyObject *t_OpenStringBuilder_toString(t_OpenStringBuilder *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(OpenStringBuilder), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_OpenStringBuilder_unsafeWrite(t_OpenStringBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jchar a0;

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(self->object.unsafeWrite(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                jint a0;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(self->object.unsafeWrite(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.unsafeWrite(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "unsafeWrite", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_write(t_OpenStringBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< jchar > a0((jobject) NULL);

                if (!parseArgs(args, "[C", &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                OpenStringBuilder a0((jobject) NULL);

                if (!parseArgs(args, "k", OpenStringBuilder::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                jchar a0;

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                jint a0;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.write(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "write", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_get__array(t_OpenStringBuilder *self, void *data)
          {
            JArray< jchar > value((jobject) NULL);
            OBJ_CALL(value = self->object.getArray());
            return value.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/InPlaceMergeSorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *InPlaceMergeSorter::class$ = NULL;
        jmethodID *InPlaceMergeSorter::mids$ = NULL;
        bool InPlaceMergeSorter::live$ = false;

        jclass InPlaceMergeSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/InPlaceMergeSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_sort_438c62480c481c65] = env->getMethodID(cls, "sort", "(II)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        InPlaceMergeSorter::InPlaceMergeSorter() : ::org::apache::lucene::util::Sorter(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void InPlaceMergeSorter::sort(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_438c62480c481c65], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_InPlaceMergeSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InPlaceMergeSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_InPlaceMergeSorter_init_(t_InPlaceMergeSorter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_InPlaceMergeSorter_sort(t_InPlaceMergeSorter *self, PyObject *args);

        static PyMethodDef t_InPlaceMergeSorter__methods_[] = {
          DECLARE_METHOD(t_InPlaceMergeSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InPlaceMergeSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InPlaceMergeSorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(InPlaceMergeSorter)[] = {
          { Py_tp_methods, t_InPlaceMergeSorter__methods_ },
          { Py_tp_init, (void *) t_InPlaceMergeSorter_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(InPlaceMergeSorter)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::Sorter),
          NULL
        };

        DEFINE_TYPE(InPlaceMergeSorter, t_InPlaceMergeSorter, InPlaceMergeSorter);

        void t_InPlaceMergeSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(InPlaceMergeSorter), &PY_TYPE_DEF(InPlaceMergeSorter), module, "InPlaceMergeSorter", 0);
        }

        void t_InPlaceMergeSorter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(InPlaceMergeSorter), "class_", make_descriptor(InPlaceMergeSorter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(InPlaceMergeSorter), "wrapfn_", make_descriptor(t_InPlaceMergeSorter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(InPlaceMergeSorter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_InPlaceMergeSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, InPlaceMergeSorter::initializeClass, 1)))
            return NULL;
          return t_InPlaceMergeSorter::wrap_Object(InPlaceMergeSorter(((t_InPlaceMergeSorter *) arg)->object.this$));
        }
        static PyObject *t_InPlaceMergeSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, InPlaceMergeSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_InPlaceMergeSorter_init_(t_InPlaceMergeSorter *self, PyObject *args, PyObject *kwds)
        {
          InPlaceMergeSorter object((jobject) NULL);

          INT_CALL(object = InPlaceMergeSorter());
          self->object = object;

          return 0;
        }

        static PyObject *t_InPlaceMergeSorter_sort(t_InPlaceMergeSorter *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.sort(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(InPlaceMergeSorter), (PyObject *) self, "sort", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BlockMaxDISI.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BlockMaxDISI::class$ = NULL;
        jmethodID *BlockMaxDISI::mids$ = NULL;
        bool BlockMaxDISI::live$ = false;

        jclass BlockMaxDISI::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BlockMaxDISI");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f01854c732b59c55] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DocIdSetIterator;Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_setMinCompetitiveScore_8e1d952dd65cdc3a] = env->getMethodID(cls, "setMinCompetitiveScore", "(F)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BlockMaxDISI::BlockMaxDISI(const ::org::apache::lucene::search::DocIdSetIterator & a0, const ::org::apache::lucene::search::Scorer & a1) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_f01854c732b59c55, a0.this$, a1.this$)) {}

        jint BlockMaxDISI::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
        }

        jlong BlockMaxDISI::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
        }

        jint BlockMaxDISI::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        jint BlockMaxDISI::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
        }

        void BlockMaxDISI::setMinCompetitiveScore(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMinCompetitiveScore_8e1d952dd65cdc3a], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BlockMaxDISI_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BlockMaxDISI_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BlockMaxDISI_init_(t_BlockMaxDISI *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BlockMaxDISI_advance(t_BlockMaxDISI *self, PyObject *args);
        static PyObject *t_BlockMaxDISI_cost(t_BlockMaxDISI *self, PyObject *args);
        static PyObject *t_BlockMaxDISI_docID(t_BlockMaxDISI *self, PyObject *args);
        static PyObject *t_BlockMaxDISI_nextDoc(t_BlockMaxDISI *self, PyObject *args);
        static PyObject *t_BlockMaxDISI_setMinCompetitiveScore(t_BlockMaxDISI *self, PyObject *arg);
        static int t_BlockMaxDISI_set__minCompetitiveScore(t_BlockMaxDISI *self, PyObject *arg, void *data);
        static PyGetSetDef t_BlockMaxDISI__fields_[] = {
          DECLARE_SET_FIELD(t_BlockMaxDISI, minCompetitiveScore),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BlockMaxDISI__methods_[] = {
          DECLARE_METHOD(t_BlockMaxDISI, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BlockMaxDISI, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BlockMaxDISI, advance, METH_VARARGS),
          DECLARE_METHOD(t_BlockMaxDISI, cost, METH_VARARGS),
          DECLARE_METHOD(t_BlockMaxDISI, docID, METH_VARARGS),
          DECLARE_METHOD(t_BlockMaxDISI, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_BlockMaxDISI, setMinCompetitiveScore, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BlockMaxDISI)[] = {
          { Py_tp_methods, t_BlockMaxDISI__methods_ },
          { Py_tp_init, (void *) t_BlockMaxDISI_init_ },
          { Py_tp_getset, t_BlockMaxDISI__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BlockMaxDISI)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::DocIdSetIterator),
          NULL
        };

        DEFINE_TYPE(BlockMaxDISI, t_BlockMaxDISI, BlockMaxDISI);

        void t_BlockMaxDISI::install(PyObject *module)
        {
          installType(&PY_TYPE(BlockMaxDISI), &PY_TYPE_DEF(BlockMaxDISI), module, "BlockMaxDISI", 0);
        }

        void t_BlockMaxDISI::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlockMaxDISI), "class_", make_descriptor(BlockMaxDISI::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlockMaxDISI), "wrapfn_", make_descriptor(t_BlockMaxDISI::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlockMaxDISI), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BlockMaxDISI_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BlockMaxDISI::initializeClass, 1)))
            return NULL;
          return t_BlockMaxDISI::wrap_Object(BlockMaxDISI(((t_BlockMaxDISI *) arg)->object.this$));
        }
        static PyObject *t_BlockMaxDISI_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BlockMaxDISI::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BlockMaxDISI_init_(t_BlockMaxDISI *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
          ::org::apache::lucene::search::Scorer a1((jobject) NULL);
          BlockMaxDISI object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, ::org::apache::lucene::search::Scorer::initializeClass, &a0, &a1))
          {
            INT_CALL(object = BlockMaxDISI(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BlockMaxDISI_advance(t_BlockMaxDISI *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(BlockMaxDISI), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_BlockMaxDISI_cost(t_BlockMaxDISI *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(BlockMaxDISI), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_BlockMaxDISI_docID(t_BlockMaxDISI *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(BlockMaxDISI), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_BlockMaxDISI_nextDoc(t_BlockMaxDISI *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(BlockMaxDISI), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_BlockMaxDISI_setMinCompetitiveScore(t_BlockMaxDISI *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setMinCompetitiveScore(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMinCompetitiveScore", arg);
          return NULL;
        }

        static int t_BlockMaxDISI_set__minCompetitiveScore(t_BlockMaxDISI *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setMinCompetitiveScore(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "minCompetitiveScore", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopTermsRewrite.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopTermsRewrite::class$ = NULL;
        jmethodID *TopTermsRewrite::mids$ = NULL;
        bool TopTermsRewrite::live$ = false;

        jclass TopTermsRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopTermsRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getSize_9972fcc56b44e79d] = env->getMethodID(cls, "getSize", "()I");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_9b63ebac49a26b30] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");
            mids$[mid_getMaxSize_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxSize", "()I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopTermsRewrite::TopTermsRewrite(jint a0) : ::org::apache::lucene::search::TermCollectingRewrite(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        jboolean TopTermsRewrite::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint TopTermsRewrite::getSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getSize_9972fcc56b44e79d]);
        }

        jint TopTermsRewrite::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::Query TopTermsRewrite::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_9b63ebac49a26b30], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopTermsRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopTermsRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopTermsRewrite_of_(t_TopTermsRewrite *self, PyObject *args);
        static int t_TopTermsRewrite_init_(t_TopTermsRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopTermsRewrite_equals(t_TopTermsRewrite *self, PyObject *args);
        static PyObject *t_TopTermsRewrite_getSize(t_TopTermsRewrite *self);
        static PyObject *t_TopTermsRewrite_hashCode(t_TopTermsRewrite *self, PyObject *args);
        static PyObject *t_TopTermsRewrite_rewrite(t_TopTermsRewrite *self, PyObject *args);
        static PyObject *t_TopTermsRewrite_get__size(t_TopTermsRewrite *self, void *data);
        static PyObject *t_TopTermsRewrite_get__parameters_(t_TopTermsRewrite *self, void *data);
        static PyGetSetDef t_TopTermsRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_TopTermsRewrite, size),
          DECLARE_GET_FIELD(t_TopTermsRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopTermsRewrite__methods_[] = {
          DECLARE_METHOD(t_TopTermsRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopTermsRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopTermsRewrite, of_, METH_VARARGS),
          DECLARE_METHOD(t_TopTermsRewrite, equals, METH_VARARGS),
          DECLARE_METHOD(t_TopTermsRewrite, getSize, METH_NOARGS),
          DECLARE_METHOD(t_TopTermsRewrite, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TopTermsRewrite, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TopTermsRewrite)[] = {
          { Py_tp_methods, t_TopTermsRewrite__methods_ },
          { Py_tp_init, (void *) t_TopTermsRewrite_init_ },
          { Py_tp_getset, t_TopTermsRewrite__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TopTermsRewrite)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::TermCollectingRewrite),
          NULL
        };

        DEFINE_TYPE(TopTermsRewrite, t_TopTermsRewrite, TopTermsRewrite);
        PyObject *t_TopTermsRewrite::wrap_Object(const TopTermsRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopTermsRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopTermsRewrite *self = (t_TopTermsRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopTermsRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopTermsRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopTermsRewrite *self = (t_TopTermsRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopTermsRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(TopTermsRewrite), &PY_TYPE_DEF(TopTermsRewrite), module, "TopTermsRewrite", 0);
        }

        void t_TopTermsRewrite::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopTermsRewrite), "class_", make_descriptor(TopTermsRewrite::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopTermsRewrite), "wrapfn_", make_descriptor(t_TopTermsRewrite::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopTermsRewrite), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopTermsRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopTermsRewrite::initializeClass, 1)))
            return NULL;
          return t_TopTermsRewrite::wrap_Object(TopTermsRewrite(((t_TopTermsRewrite *) arg)->object.this$));
        }
        static PyObject *t_TopTermsRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopTermsRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopTermsRewrite_of_(t_TopTermsRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopTermsRewrite_init_(t_TopTermsRewrite *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          TopTermsRewrite object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = TopTermsRewrite(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TopTermsRewrite_equals(t_TopTermsRewrite *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(TopTermsRewrite), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TopTermsRewrite_getSize(t_TopTermsRewrite *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSize());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_TopTermsRewrite_hashCode(t_TopTermsRewrite *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(TopTermsRewrite), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TopTermsRewrite_rewrite(t_TopTermsRewrite *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(TopTermsRewrite), (PyObject *) self, "rewrite", args, 2);
        }
        static PyObject *t_TopTermsRewrite_get__parameters_(t_TopTermsRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TopTermsRewrite_get__size(t_TopTermsRewrite *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSize());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/lv/LatvianStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {

          ::java::lang::Class *LatvianStemFilterFactory::class$ = NULL;
          jmethodID *LatvianStemFilterFactory::mids$ = NULL;
          bool LatvianStemFilterFactory::live$ = false;
          ::java::lang::String *LatvianStemFilterFactory::NAME = NULL;

          jclass LatvianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/lv/LatvianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LatvianStemFilterFactory::LatvianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream LatvianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {
          static PyObject *t_LatvianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LatvianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LatvianStemFilterFactory_init_(t_LatvianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LatvianStemFilterFactory_create(t_LatvianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_LatvianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LatvianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LatvianStemFilterFactory)[] = {
            { Py_tp_methods, t_LatvianStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_LatvianStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LatvianStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(LatvianStemFilterFactory, t_LatvianStemFilterFactory, LatvianStemFilterFactory);

          void t_LatvianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LatvianStemFilterFactory), &PY_TYPE_DEF(LatvianStemFilterFactory), module, "LatvianStemFilterFactory", 0);
          }

          void t_LatvianStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LatvianStemFilterFactory), "class_", make_descriptor(LatvianStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LatvianStemFilterFactory), "wrapfn_", make_descriptor(t_LatvianStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LatvianStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(LatvianStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(LatvianStemFilterFactory), "NAME", make_descriptor(j2p(*LatvianStemFilterFactory::NAME)));
          }

          static PyObject *t_LatvianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LatvianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LatvianStemFilterFactory::wrap_Object(LatvianStemFilterFactory(((t_LatvianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LatvianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LatvianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LatvianStemFilterFactory_init_(t_LatvianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LatvianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LatvianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LatvianStemFilterFactory_create(t_LatvianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(LatvianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ByteBlockPool.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/ByteBlockPool$Allocator.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ByteBlockPool::class$ = NULL;
        jmethodID *ByteBlockPool::mids$ = NULL;
        jfieldID *ByteBlockPool::fids$ = NULL;
        bool ByteBlockPool::live$ = false;
        jint ByteBlockPool::BYTE_BLOCK_MASK = (jint) 0;
        jint ByteBlockPool::BYTE_BLOCK_SHIFT = (jint) 0;
        jint ByteBlockPool::BYTE_BLOCK_SIZE = (jint) 0;
        jint ByteBlockPool::FIRST_LEVEL_SIZE = (jint) 0;
        JArray< jint > *ByteBlockPool::LEVEL_SIZE_ARRAY = NULL;
        JArray< jint > *ByteBlockPool::NEXT_LEVEL_ARRAY = NULL;

        jclass ByteBlockPool::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ByteBlockPool");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_815b2bd959e148a5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/ByteBlockPool$Allocator;)V");
            mids$[mid_allocSlice_7cdc0fb0850d95a0] = env->getMethodID(cls, "allocSlice", "([BI)I");
            mids$[mid_append_0bdfd2603b7490a8] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_newSlice_1e143afe1894d213] = env->getMethodID(cls, "newSlice", "(I)I");
            mids$[mid_nextBuffer_f2cc1bce94666404] = env->getMethodID(cls, "nextBuffer", "()V");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_readByte_70f46e25a8aca047] = env->getMethodID(cls, "readByte", "(J)B");
            mids$[mid_readBytes_29c102c3728da619] = env->getMethodID(cls, "readBytes", "(J[BII)V");
            mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_reset_33bb9a5a88dc139c] = env->getMethodID(cls, "reset", "(ZZ)V");
            mids$[mid_setBytesRef_327a6f4e8624d9f4] = env->getMethodID(cls, "setBytesRef", "(Lorg/apache/lucene/util/BytesRef;I)V");
            mids$[mid_setRawBytesRef_c61df66683b6c9c2] = env->getMethodID(cls, "setRawBytesRef", "(Lorg/apache/lucene/util/BytesRef;J)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_buffer] = env->getFieldID(cls, "buffer", "[B");
            fids$[fid_buffers] = env->getFieldID(cls, "buffers", "[[B");
            fids$[fid_byteOffset] = env->getFieldID(cls, "byteOffset", "I");
            fids$[fid_byteUpto] = env->getFieldID(cls, "byteUpto", "I");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            BYTE_BLOCK_MASK = env->getStaticIntField(cls, "BYTE_BLOCK_MASK");
            BYTE_BLOCK_SHIFT = env->getStaticIntField(cls, "BYTE_BLOCK_SHIFT");
            BYTE_BLOCK_SIZE = env->getStaticIntField(cls, "BYTE_BLOCK_SIZE");
            FIRST_LEVEL_SIZE = env->getStaticIntField(cls, "FIRST_LEVEL_SIZE");
            LEVEL_SIZE_ARRAY = new JArray< jint >(env->getStaticObjectField(cls, "LEVEL_SIZE_ARRAY", "[I"));
            NEXT_LEVEL_ARRAY = new JArray< jint >(env->getStaticObjectField(cls, "NEXT_LEVEL_ARRAY", "[I"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBlockPool::ByteBlockPool(const ::org::apache::lucene::util::ByteBlockPool$Allocator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_815b2bd959e148a5, a0.this$)) {}

        jint ByteBlockPool::allocSlice(const JArray< jbyte > & a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_allocSlice_7cdc0fb0850d95a0], a0.this$, a1);
        }

        void ByteBlockPool::append(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_append_0bdfd2603b7490a8], a0.this$);
        }

        jint ByteBlockPool::newSlice(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_newSlice_1e143afe1894d213], a0);
        }

        void ByteBlockPool::nextBuffer() const
        {
          env->callVoidMethod(this$, mids$[mid_nextBuffer_f2cc1bce94666404]);
        }

        jlong ByteBlockPool::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        jbyte ByteBlockPool::readByte(jlong a0) const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_70f46e25a8aca047], a0);
        }

        void ByteBlockPool::readBytes(jlong a0, const JArray< jbyte > & a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_29c102c3728da619], a0, a1.this$, a2, a3);
        }

        void ByteBlockPool::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
        }

        void ByteBlockPool::reset(jboolean a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_33bb9a5a88dc139c], a0, a1);
        }

        void ByteBlockPool::setBytesRef(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesRef_327a6f4e8624d9f4], a0.this$, a1);
        }

        void ByteBlockPool::setRawBytesRef(const ::org::apache::lucene::util::BytesRef & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setRawBytesRef_c61df66683b6c9c2], a0.this$, a1);
        }

        JArray< jbyte > ByteBlockPool::_get_buffer() const
        {
          return JArray< jbyte >(env->getObjectField(this$, fids$[fid_buffer]));
        }

        void ByteBlockPool::_set_buffer(const JArray< jbyte > & a0) const
        {
          env->setObjectField(this$, fids$[fid_buffer], a0.this$);
        }

        JArray< JArray< jbyte > > ByteBlockPool::_get_buffers() const
        {
          return JArray< JArray< jbyte > >(env->getObjectField(this$, fids$[fid_buffers]));
        }

        void ByteBlockPool::_set_buffers(const JArray< JArray< jbyte > > & a0) const
        {
          env->setObjectField(this$, fids$[fid_buffers], a0.this$);
        }

        jint ByteBlockPool::_get_byteOffset() const
        {
          return env->getIntField(this$, fids$[fid_byteOffset]);
        }

        void ByteBlockPool::_set_byteOffset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_byteOffset], a0);
        }

        jint ByteBlockPool::_get_byteUpto() const
        {
          return env->getIntField(this$, fids$[fid_byteUpto]);
        }

        void ByteBlockPool::_set_byteUpto(jint a0) const
        {
          env->setIntField(this$, fids$[fid_byteUpto], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/ByteBlockPool$DirectTrackingAllocator.h"
#include "org/apache/lucene/util/ByteBlockPool$DirectAllocator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ByteBlockPool_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBlockPool_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBlockPool_init_(t_ByteBlockPool *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBlockPool_allocSlice(t_ByteBlockPool *self, PyObject *args);
        static PyObject *t_ByteBlockPool_append(t_ByteBlockPool *self, PyObject *arg);
        static PyObject *t_ByteBlockPool_newSlice(t_ByteBlockPool *self, PyObject *arg);
        static PyObject *t_ByteBlockPool_nextBuffer(t_ByteBlockPool *self);
        static PyObject *t_ByteBlockPool_ramBytesUsed(t_ByteBlockPool *self);
        static PyObject *t_ByteBlockPool_readByte(t_ByteBlockPool *self, PyObject *arg);
        static PyObject *t_ByteBlockPool_readBytes(t_ByteBlockPool *self, PyObject *args);
        static PyObject *t_ByteBlockPool_reset(t_ByteBlockPool *self, PyObject *args);
        static PyObject *t_ByteBlockPool_setBytesRef(t_ByteBlockPool *self, PyObject *args);
        static PyObject *t_ByteBlockPool_setRawBytesRef(t_ByteBlockPool *self, PyObject *args);
        static PyObject *t_ByteBlockPool_get__buffer(t_ByteBlockPool *self, void *data);
        static int t_ByteBlockPool_set__buffer(t_ByteBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_ByteBlockPool_get__buffers(t_ByteBlockPool *self, void *data);
        static int t_ByteBlockPool_set__buffers(t_ByteBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_ByteBlockPool_get__byteOffset(t_ByteBlockPool *self, void *data);
        static int t_ByteBlockPool_set__byteOffset(t_ByteBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_ByteBlockPool_get__byteUpto(t_ByteBlockPool *self, void *data);
        static int t_ByteBlockPool_set__byteUpto(t_ByteBlockPool *self, PyObject *arg, void *data);

        static PyGetSetDef t_ByteBlockPool__fields_[] = {
          DECLARE_GETSET_FIELD(t_ByteBlockPool, buffer),
          DECLARE_GETSET_FIELD(t_ByteBlockPool, buffers),
          DECLARE_GETSET_FIELD(t_ByteBlockPool, byteOffset),
          DECLARE_GETSET_FIELD(t_ByteBlockPool, byteUpto),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteBlockPool__methods_[] = {
          DECLARE_METHOD(t_ByteBlockPool, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool, allocSlice, METH_VARARGS),
          DECLARE_METHOD(t_ByteBlockPool, append, METH_O),
          DECLARE_METHOD(t_ByteBlockPool, newSlice, METH_O),
          DECLARE_METHOD(t_ByteBlockPool, nextBuffer, METH_NOARGS),
          DECLARE_METHOD(t_ByteBlockPool, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_ByteBlockPool, readByte, METH_O),
          DECLARE_METHOD(t_ByteBlockPool, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_ByteBlockPool, reset, METH_VARARGS),
          DECLARE_METHOD(t_ByteBlockPool, setBytesRef, METH_VARARGS),
          DECLARE_METHOD(t_ByteBlockPool, setRawBytesRef, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ByteBlockPool)[] = {
          { Py_tp_methods, t_ByteBlockPool__methods_ },
          { Py_tp_init, (void *) t_ByteBlockPool_init_ },
          { Py_tp_getset, t_ByteBlockPool__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ByteBlockPool)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(ByteBlockPool, t_ByteBlockPool, ByteBlockPool);

        void t_ByteBlockPool::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBlockPool), &PY_TYPE_DEF(ByteBlockPool), module, "ByteBlockPool", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBlockPool), "DirectTrackingAllocator", make_descriptor(&PY_TYPE_DEF(ByteBlockPool$DirectTrackingAllocator)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBlockPool), "DirectAllocator", make_descriptor(&PY_TYPE_DEF(ByteBlockPool$DirectAllocator)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBlockPool), "Allocator", make_descriptor(&PY_TYPE_DEF(ByteBlockPool$Allocator)));
        }

        void t_ByteBlockPool::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBlockPool), "class_", make_descriptor(ByteBlockPool::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBlockPool), "wrapfn_", make_descriptor(t_ByteBlockPool::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBlockPool), "boxfn_", make_descriptor(boxObject));
          env->getClass(ByteBlockPool::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBlockPool), "BYTE_BLOCK_MASK", make_descriptor(ByteBlockPool::BYTE_BLOCK_MASK));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBlockPool), "BYTE_BLOCK_SHIFT", make_descriptor(ByteBlockPool::BYTE_BLOCK_SHIFT));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBlockPool), "BYTE_BLOCK_SIZE", make_descriptor(ByteBlockPool::BYTE_BLOCK_SIZE));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBlockPool), "FIRST_LEVEL_SIZE", make_descriptor(ByteBlockPool::FIRST_LEVEL_SIZE));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBlockPool), "LEVEL_SIZE_ARRAY", make_descriptor(ByteBlockPool::LEVEL_SIZE_ARRAY->wrap()));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBlockPool), "NEXT_LEVEL_ARRAY", make_descriptor(ByteBlockPool::NEXT_LEVEL_ARRAY->wrap()));
        }

        static PyObject *t_ByteBlockPool_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBlockPool::initializeClass, 1)))
            return NULL;
          return t_ByteBlockPool::wrap_Object(ByteBlockPool(((t_ByteBlockPool *) arg)->object.this$));
        }
        static PyObject *t_ByteBlockPool_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBlockPool::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBlockPool_init_(t_ByteBlockPool *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::ByteBlockPool$Allocator a0((jobject) NULL);
          ByteBlockPool object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::ByteBlockPool$Allocator::initializeClass, &a0))
          {
            INT_CALL(object = ByteBlockPool(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBlockPool_allocSlice(t_ByteBlockPool *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.allocSlice(a0, a1));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "allocSlice", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_append(t_ByteBlockPool *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.append(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "append", arg);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_newSlice(t_ByteBlockPool *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.newSlice(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "newSlice", arg);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_nextBuffer(t_ByteBlockPool *self)
        {
          OBJ_CALL(self->object.nextBuffer());
          Py_RETURN_NONE;
        }

        static PyObject *t_ByteBlockPool_ramBytesUsed(t_ByteBlockPool *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_ByteBlockPool_readByte(t_ByteBlockPool *self, PyObject *arg)
        {
          jlong a0;
          jbyte result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.readByte(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "readByte", arg);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_readBytes(t_ByteBlockPool *self, PyObject *args)
        {
          jlong a0;
          JArray< jbyte > a1((jobject) NULL);
          jint a2;
          jint a3;

          if (!parseArgs(args, "J[BII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "readBytes", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_reset(t_ByteBlockPool *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }
            break;
           case 2:
            {
              jboolean a0;
              jboolean a1;

              if (!parseArgs(args, "ZZ", &a0, &a1))
              {
                OBJ_CALL(self->object.reset(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_setBytesRef(t_ByteBlockPool *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.setBytesRef(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBytesRef", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_setRawBytesRef(t_ByteBlockPool *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.setRawBytesRef(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRawBytesRef", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_get__buffer(t_ByteBlockPool *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_buffer());
          return value.wrap();
        }
        static int t_ByteBlockPool_set__buffer(t_ByteBlockPool *self, PyObject *arg, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          if (!parseArg(arg, "[B", &value))
          {
            INT_CALL(self->object._set_buffer(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "buffer", arg);
          return -1;
        }

        static PyObject *t_ByteBlockPool_get__buffers(t_ByteBlockPool *self, void *data)
        {
          JArray< JArray< jbyte > > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_buffers());
          return JArray<jobject>(value.this$).wrap(NULL);
        }
        static int t_ByteBlockPool_set__buffers(t_ByteBlockPool *self, PyObject *arg, void *data)
        {
          JArray< JArray< jbyte > > value((jobject) NULL);
          if (!parseArg(arg, "[[B", &value))
          {
            INT_CALL(self->object._set_buffers(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "buffers", arg);
          return -1;
        }

        static PyObject *t_ByteBlockPool_get__byteOffset(t_ByteBlockPool *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_byteOffset());
          return PyLong_FromLong((long) value);
        }
        static int t_ByteBlockPool_set__byteOffset(t_ByteBlockPool *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_byteOffset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "byteOffset", arg);
          return -1;
        }

        static PyObject *t_ByteBlockPool_get__byteUpto(t_ByteBlockPool *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_byteUpto());
          return PyLong_FromLong((long) value);
        }
        static int t_ByteBlockPool_set__byteUpto(t_ByteBlockPool *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_byteUpto(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "byteUpto", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CombinedFieldQuery$Builder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/CombinedFieldQuery.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/CombinedFieldQuery$Builder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CombinedFieldQuery$Builder::class$ = NULL;
        jmethodID *CombinedFieldQuery$Builder::mids$ = NULL;
        bool CombinedFieldQuery$Builder::live$ = false;

        jclass CombinedFieldQuery$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CombinedFieldQuery$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_addField_92786a8da06745de] = env->getMethodID(cls, "addField", "(Ljava/lang/String;)Lorg/apache/lucene/search/CombinedFieldQuery$Builder;");
            mids$[mid_addField_1cc94505b7eafb8c] = env->getMethodID(cls, "addField", "(Ljava/lang/String;F)Lorg/apache/lucene/search/CombinedFieldQuery$Builder;");
            mids$[mid_addTerm_cd7375b3d94de00c] = env->getMethodID(cls, "addTerm", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/search/CombinedFieldQuery$Builder;");
            mids$[mid_build_d474dc0d0a05e373] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/search/CombinedFieldQuery;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CombinedFieldQuery$Builder::CombinedFieldQuery$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        CombinedFieldQuery$Builder CombinedFieldQuery$Builder::addField(const ::java::lang::String & a0) const
        {
          return CombinedFieldQuery$Builder(env->callObjectMethod(this$, mids$[mid_addField_92786a8da06745de], a0.this$));
        }

        CombinedFieldQuery$Builder CombinedFieldQuery$Builder::addField(const ::java::lang::String & a0, jfloat a1) const
        {
          return CombinedFieldQuery$Builder(env->callObjectMethod(this$, mids$[mid_addField_1cc94505b7eafb8c], a0.this$, a1));
        }

        CombinedFieldQuery$Builder CombinedFieldQuery$Builder::addTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return CombinedFieldQuery$Builder(env->callObjectMethod(this$, mids$[mid_addTerm_cd7375b3d94de00c], a0.this$));
        }

        ::org::apache::lucene::search::CombinedFieldQuery CombinedFieldQuery$Builder::build() const
        {
          return ::org::apache::lucene::search::CombinedFieldQuery(env->callObjectMethod(this$, mids$[mid_build_d474dc0d0a05e373]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CombinedFieldQuery$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CombinedFieldQuery$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CombinedFieldQuery$Builder_init_(t_CombinedFieldQuery$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CombinedFieldQuery$Builder_addField(t_CombinedFieldQuery$Builder *self, PyObject *args);
        static PyObject *t_CombinedFieldQuery$Builder_addTerm(t_CombinedFieldQuery$Builder *self, PyObject *arg);
        static PyObject *t_CombinedFieldQuery$Builder_build(t_CombinedFieldQuery$Builder *self);

        static PyMethodDef t_CombinedFieldQuery$Builder__methods_[] = {
          DECLARE_METHOD(t_CombinedFieldQuery$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CombinedFieldQuery$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CombinedFieldQuery$Builder, addField, METH_VARARGS),
          DECLARE_METHOD(t_CombinedFieldQuery$Builder, addTerm, METH_O),
          DECLARE_METHOD(t_CombinedFieldQuery$Builder, build, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CombinedFieldQuery$Builder)[] = {
          { Py_tp_methods, t_CombinedFieldQuery$Builder__methods_ },
          { Py_tp_init, (void *) t_CombinedFieldQuery$Builder_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CombinedFieldQuery$Builder)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CombinedFieldQuery$Builder, t_CombinedFieldQuery$Builder, CombinedFieldQuery$Builder);

        void t_CombinedFieldQuery$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(CombinedFieldQuery$Builder), &PY_TYPE_DEF(CombinedFieldQuery$Builder), module, "CombinedFieldQuery$Builder", 0);
        }

        void t_CombinedFieldQuery$Builder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CombinedFieldQuery$Builder), "class_", make_descriptor(CombinedFieldQuery$Builder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CombinedFieldQuery$Builder), "wrapfn_", make_descriptor(t_CombinedFieldQuery$Builder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CombinedFieldQuery$Builder), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CombinedFieldQuery$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CombinedFieldQuery$Builder::initializeClass, 1)))
            return NULL;
          return t_CombinedFieldQuery$Builder::wrap_Object(CombinedFieldQuery$Builder(((t_CombinedFieldQuery$Builder *) arg)->object.this$));
        }
        static PyObject *t_CombinedFieldQuery$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CombinedFieldQuery$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CombinedFieldQuery$Builder_init_(t_CombinedFieldQuery$Builder *self, PyObject *args, PyObject *kwds)
        {
          CombinedFieldQuery$Builder object((jobject) NULL);

          INT_CALL(object = CombinedFieldQuery$Builder());
          self->object = object;

          return 0;
        }

        static PyObject *t_CombinedFieldQuery$Builder_addField(t_CombinedFieldQuery$Builder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              CombinedFieldQuery$Builder result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.addField(a0));
                return t_CombinedFieldQuery$Builder::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jfloat a1;
              CombinedFieldQuery$Builder result((jobject) NULL);

              if (!parseArgs(args, "sF", &a0, &a1))
              {
                OBJ_CALL(result = self->object.addField(a0, a1));
                return t_CombinedFieldQuery$Builder::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addField", args);
          return NULL;
        }

        static PyObject *t_CombinedFieldQuery$Builder_addTerm(t_CombinedFieldQuery$Builder *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          CombinedFieldQuery$Builder result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.addTerm(a0));
            return t_CombinedFieldQuery$Builder::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "addTerm", arg);
          return NULL;
        }

        static PyObject *t_CombinedFieldQuery$Builder_build(t_CombinedFieldQuery$Builder *self)
        {
          ::org::apache::lucene::search::CombinedFieldQuery result((jobject) NULL);
          OBJ_CALL(result = self->object.build());
          return ::org::apache::lucene::search::t_CombinedFieldQuery::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermVectorsWriter::class$ = NULL;
        jmethodID *TermVectorsWriter::mids$ = NULL;
        bool TermVectorsWriter::live$ = false;

        jclass TermVectorsWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermVectorsWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addPosition_fcc26e8860ce5755] = env->getMethodID(cls, "addPosition", "(IIILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_addProx_6f7770ea4ff78a67] = env->getMethodID(cls, "addProx", "(ILorg/apache/lucene/store/DataInput;Lorg/apache/lucene/store/DataInput;)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finish_8a63e70a8b43ee48] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
            mids$[mid_finishDocument_f2cc1bce94666404] = env->getMethodID(cls, "finishDocument", "()V");
            mids$[mid_finishField_f2cc1bce94666404] = env->getMethodID(cls, "finishField", "()V");
            mids$[mid_finishTerm_f2cc1bce94666404] = env->getMethodID(cls, "finishTerm", "()V");
            mids$[mid_merge_6926471512b57791] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
            mids$[mid_startDocument_040c4cd0390c5aff] = env->getMethodID(cls, "startDocument", "(I)V");
            mids$[mid_startField_5f83540baaace30d] = env->getMethodID(cls, "startField", "(Lorg/apache/lucene/index/FieldInfo;IZZZ)V");
            mids$[mid_startTerm_327a6f4e8624d9f4] = env->getMethodID(cls, "startTerm", "(Lorg/apache/lucene/util/BytesRef;I)V");
            mids$[mid_addAllDocVectors_5d6f9936739d2ebb] = env->getMethodID(cls, "addAllDocVectors", "(Lorg/apache/lucene/index/Fields;Lorg/apache/lucene/index/MergeState;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TermVectorsWriter::addPosition(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_addPosition_fcc26e8860ce5755], a0, a1, a2, a3.this$);
        }

        void TermVectorsWriter::addProx(jint a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::store::DataInput & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addProx_6f7770ea4ff78a67], a0, a1.this$, a2.this$);
        }

        void TermVectorsWriter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        void TermVectorsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_finish_8a63e70a8b43ee48], a0.this$, a1);
        }

        void TermVectorsWriter::finishDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_finishDocument_f2cc1bce94666404]);
        }

        void TermVectorsWriter::finishField() const
        {
          env->callVoidMethod(this$, mids$[mid_finishField_f2cc1bce94666404]);
        }

        void TermVectorsWriter::finishTerm() const
        {
          env->callVoidMethod(this$, mids$[mid_finishTerm_f2cc1bce94666404]);
        }

        jint TermVectorsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_merge_6926471512b57791], a0.this$);
        }

        void TermVectorsWriter::startDocument(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_startDocument_040c4cd0390c5aff], a0);
        }

        void TermVectorsWriter::startField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1, jboolean a2, jboolean a3, jboolean a4) const
        {
          env->callVoidMethod(this$, mids$[mid_startField_5f83540baaace30d], a0.this$, a1, a2, a3, a4);
        }

        void TermVectorsWriter::startTerm(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_startTerm_327a6f4e8624d9f4], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsWriter_addPosition(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_addProx(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_close(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_finish(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_finishDocument(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_finishField(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_finishTerm(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_merge(t_TermVectorsWriter *self, PyObject *arg);
        static PyObject *t_TermVectorsWriter_startDocument(t_TermVectorsWriter *self, PyObject *arg);
        static PyObject *t_TermVectorsWriter_startField(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_startTerm(t_TermVectorsWriter *self, PyObject *args);

        static PyMethodDef t_TermVectorsWriter__methods_[] = {
          DECLARE_METHOD(t_TermVectorsWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsWriter, addPosition, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsWriter, addProx, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsWriter, close, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, finish, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsWriter, finishDocument, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, finishField, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, finishTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, merge, METH_O),
          DECLARE_METHOD(t_TermVectorsWriter, startDocument, METH_O),
          DECLARE_METHOD(t_TermVectorsWriter, startField, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsWriter, startTerm, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TermVectorsWriter)[] = {
          { Py_tp_methods, t_TermVectorsWriter__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TermVectorsWriter)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(TermVectorsWriter, t_TermVectorsWriter, TermVectorsWriter);

        void t_TermVectorsWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(TermVectorsWriter), &PY_TYPE_DEF(TermVectorsWriter), module, "TermVectorsWriter", 0);
        }

        void t_TermVectorsWriter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermVectorsWriter), "class_", make_descriptor(TermVectorsWriter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermVectorsWriter), "wrapfn_", make_descriptor(t_TermVectorsWriter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermVectorsWriter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermVectorsWriter::initializeClass, 1)))
            return NULL;
          return t_TermVectorsWriter::wrap_Object(TermVectorsWriter(((t_TermVectorsWriter *) arg)->object.this$));
        }
        static PyObject *t_TermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermVectorsWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermVectorsWriter_addPosition(t_TermVectorsWriter *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint a2;
          ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

          if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addPosition", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_addProx(t_TermVectorsWriter *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::store::DataInput a1((jobject) NULL);
          ::org::apache::lucene::store::DataInput a2((jobject) NULL);

          if (!parseArgs(args, "Ikk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.addProx(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addProx", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_close(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_finish(t_TermVectorsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.finish(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finish", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_finishDocument(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.finishDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_finishField(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.finishField());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_finishTerm(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.finishTerm());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_merge(t_TermVectorsWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.merge(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "merge", arg);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_startDocument(t_TermVectorsWriter *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.startDocument(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startDocument", arg);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_startField(t_TermVectorsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jint a1;
          jboolean a2;
          jboolean a3;
          jboolean a4;

          if (!parseArgs(args, "kIZZZ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.startField(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startField", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_startTerm(t_TermVectorsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.startTerm(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startTerm", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PagedBytes.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/PagedBytes$Reader.h"
#include "org/apache/lucene/util/PagedBytes$PagedBytesDataOutput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/PagedBytes$PagedBytesDataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PagedBytes::class$ = NULL;
        jmethodID *PagedBytes::mids$ = NULL;
        bool PagedBytes::live$ = false;

        jclass PagedBytes::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PagedBytes");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_copy_d83dac9c2bf8d6bd] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/store/IndexInput;J)V");
            mids$[mid_copy_6919dc9b1ed68993] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_copyUsingLengthPrefix_6f6ee5bba7f22d4c] = env->getMethodID(cls, "copyUsingLengthPrefix", "(Lorg/apache/lucene/util/BytesRef;)J");
            mids$[mid_freeze_ed53a7ccc85cd8eb] = env->getMethodID(cls, "freeze", "(Z)Lorg/apache/lucene/util/PagedBytes$Reader;");
            mids$[mid_getDataInput_e168c75ab4d0482b] = env->getMethodID(cls, "getDataInput", "()Lorg/apache/lucene/util/PagedBytes$PagedBytesDataInput;");
            mids$[mid_getDataOutput_4e0eeedac11539bb] = env->getMethodID(cls, "getDataOutput", "()Lorg/apache/lucene/util/PagedBytes$PagedBytesDataOutput;");
            mids$[mid_getPointer_2e5ae9edcb9b072f] = env->getMethodID(cls, "getPointer", "()J");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PagedBytes::PagedBytes(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        void PagedBytes::copy(const ::org::apache::lucene::store::IndexInput & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d83dac9c2bf8d6bd], a0.this$, a1);
        }

        void PagedBytes::copy(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_6919dc9b1ed68993], a0.this$, a1.this$);
        }

        jlong PagedBytes::copyUsingLengthPrefix(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_copyUsingLengthPrefix_6f6ee5bba7f22d4c], a0.this$);
        }

        ::org::apache::lucene::util::PagedBytes$Reader PagedBytes::freeze(jboolean a0) const
        {
          return ::org::apache::lucene::util::PagedBytes$Reader(env->callObjectMethod(this$, mids$[mid_freeze_ed53a7ccc85cd8eb], a0));
        }

        ::org::apache::lucene::util::PagedBytes$PagedBytesDataInput PagedBytes::getDataInput() const
        {
          return ::org::apache::lucene::util::PagedBytes$PagedBytesDataInput(env->callObjectMethod(this$, mids$[mid_getDataInput_e168c75ab4d0482b]));
        }

        ::org::apache::lucene::util::PagedBytes$PagedBytesDataOutput PagedBytes::getDataOutput() const
        {
          return ::org::apache::lucene::util::PagedBytes$PagedBytesDataOutput(env->callObjectMethod(this$, mids$[mid_getDataOutput_4e0eeedac11539bb]));
        }

        jlong PagedBytes::getPointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getPointer_2e5ae9edcb9b072f]);
        }

        jlong PagedBytes::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PagedBytes_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PagedBytes_init_(t_PagedBytes *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PagedBytes_copy(t_PagedBytes *self, PyObject *args);
        static PyObject *t_PagedBytes_copyUsingLengthPrefix(t_PagedBytes *self, PyObject *arg);
        static PyObject *t_PagedBytes_freeze(t_PagedBytes *self, PyObject *arg);
        static PyObject *t_PagedBytes_getDataInput(t_PagedBytes *self);
        static PyObject *t_PagedBytes_getDataOutput(t_PagedBytes *self);
        static PyObject *t_PagedBytes_getPointer(t_PagedBytes *self);
        static PyObject *t_PagedBytes_ramBytesUsed(t_PagedBytes *self);
        static PyObject *t_PagedBytes_get__dataInput(t_PagedBytes *self, void *data);
        static PyObject *t_PagedBytes_get__dataOutput(t_PagedBytes *self, void *data);
        static PyObject *t_PagedBytes_get__pointer(t_PagedBytes *self, void *data);
        static PyGetSetDef t_PagedBytes__fields_[] = {
          DECLARE_GET_FIELD(t_PagedBytes, dataInput),
          DECLARE_GET_FIELD(t_PagedBytes, dataOutput),
          DECLARE_GET_FIELD(t_PagedBytes, pointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PagedBytes__methods_[] = {
          DECLARE_METHOD(t_PagedBytes, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes, copy, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes, copyUsingLengthPrefix, METH_O),
          DECLARE_METHOD(t_PagedBytes, freeze, METH_O),
          DECLARE_METHOD(t_PagedBytes, getDataInput, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes, getDataOutput, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes, getPointer, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PagedBytes)[] = {
          { Py_tp_methods, t_PagedBytes__methods_ },
          { Py_tp_init, (void *) t_PagedBytes_init_ },
          { Py_tp_getset, t_PagedBytes__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PagedBytes)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PagedBytes, t_PagedBytes, PagedBytes);

        void t_PagedBytes::install(PyObject *module)
        {
          installType(&PY_TYPE(PagedBytes), &PY_TYPE_DEF(PagedBytes), module, "PagedBytes", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(PagedBytes), "Reader", make_descriptor(&PY_TYPE_DEF(PagedBytes$Reader)));
        }

        void t_PagedBytes::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PagedBytes), "class_", make_descriptor(PagedBytes::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PagedBytes), "wrapfn_", make_descriptor(t_PagedBytes::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PagedBytes), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PagedBytes_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PagedBytes::initializeClass, 1)))
            return NULL;
          return t_PagedBytes::wrap_Object(PagedBytes(((t_PagedBytes *) arg)->object.this$));
        }
        static PyObject *t_PagedBytes_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PagedBytes::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PagedBytes_init_(t_PagedBytes *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          PagedBytes object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = PagedBytes(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PagedBytes_copy(t_PagedBytes *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
              jlong a1;

              if (!parseArgs(args, "kJ", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.copy(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.copy(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "copy", args);
          return NULL;
        }

        static PyObject *t_PagedBytes_copyUsingLengthPrefix(t_PagedBytes *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.copyUsingLengthPrefix(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "copyUsingLengthPrefix", arg);
          return NULL;
        }

        static PyObject *t_PagedBytes_freeze(t_PagedBytes *self, PyObject *arg)
        {
          jboolean a0;
          ::org::apache::lucene::util::PagedBytes$Reader result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.freeze(a0));
            return ::org::apache::lucene::util::t_PagedBytes$Reader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "freeze", arg);
          return NULL;
        }

        static PyObject *t_PagedBytes_getDataInput(t_PagedBytes *self)
        {
          ::org::apache::lucene::util::PagedBytes$PagedBytesDataInput result((jobject) NULL);
          OBJ_CALL(result = self->object.getDataInput());
          return ::org::apache::lucene::util::t_PagedBytes$PagedBytesDataInput::wrap_Object(result);
        }

        static PyObject *t_PagedBytes_getDataOutput(t_PagedBytes *self)
        {
          ::org::apache::lucene::util::PagedBytes$PagedBytesDataOutput result((jobject) NULL);
          OBJ_CALL(result = self->object.getDataOutput());
          return ::org::apache::lucene::util::t_PagedBytes$PagedBytesDataOutput::wrap_Object(result);
        }

        static PyObject *t_PagedBytes_getPointer(t_PagedBytes *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getPointer());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PagedBytes_ramBytesUsed(t_PagedBytes *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PagedBytes_get__dataInput(t_PagedBytes *self, void *data)
        {
          ::org::apache::lucene::util::PagedBytes$PagedBytesDataInput value((jobject) NULL);
          OBJ_CALL(value = self->object.getDataInput());
          return ::org::apache::lucene::util::t_PagedBytes$PagedBytesDataInput::wrap_Object(value);
        }

        static PyObject *t_PagedBytes_get__dataOutput(t_PagedBytes *self, void *data)
        {
          ::org::apache::lucene::util::PagedBytes$PagedBytesDataOutput value((jobject) NULL);
          OBJ_CALL(value = self->object.getDataOutput());
          return ::org::apache::lucene::util::t_PagedBytes$PagedBytesDataOutput::wrap_Object(value);
        }

        static PyObject *t_PagedBytes_get__pointer(t_PagedBytes *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getPointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/LevenshteinAutomata.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *LevenshteinAutomata::class$ = NULL;
          jmethodID *LevenshteinAutomata::mids$ = NULL;
          bool LevenshteinAutomata::live$ = false;
          jint LevenshteinAutomata::MAXIMUM_SUPPORTED_DISTANCE = (jint) 0;

          jclass LevenshteinAutomata::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/LevenshteinAutomata");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b1180807b87ba737] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
              mids$[mid_init$_1c4790fa65aa622f] = env->getMethodID(cls, "<init>", "([IIZ)V");
              mids$[mid_toAutomaton_577098ea686d0440] = env->getMethodID(cls, "toAutomaton", "(I)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_toAutomaton_6c860d4a6c23f1ba] = env->getMethodID(cls, "toAutomaton", "(ILjava/lang/String;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              MAXIMUM_SUPPORTED_DISTANCE = env->getStaticIntField(cls, "MAXIMUM_SUPPORTED_DISTANCE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LevenshteinAutomata::LevenshteinAutomata(const ::java::lang::String & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b1180807b87ba737, a0.this$, a1)) {}

          LevenshteinAutomata::LevenshteinAutomata(const JArray< jint > & a0, jint a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1c4790fa65aa622f, a0.this$, a1, a2)) {}

          ::org::apache::lucene::util::automaton::Automaton LevenshteinAutomata::toAutomaton(jint a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_577098ea686d0440], a0));
          }

          ::org::apache::lucene::util::automaton::Automaton LevenshteinAutomata::toAutomaton(jint a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_6c860d4a6c23f1ba], a0, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_LevenshteinAutomata_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LevenshteinAutomata_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LevenshteinAutomata_init_(t_LevenshteinAutomata *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LevenshteinAutomata_toAutomaton(t_LevenshteinAutomata *self, PyObject *args);

          static PyMethodDef t_LevenshteinAutomata__methods_[] = {
            DECLARE_METHOD(t_LevenshteinAutomata, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LevenshteinAutomata, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LevenshteinAutomata, toAutomaton, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LevenshteinAutomata)[] = {
            { Py_tp_methods, t_LevenshteinAutomata__methods_ },
            { Py_tp_init, (void *) t_LevenshteinAutomata_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LevenshteinAutomata)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(LevenshteinAutomata, t_LevenshteinAutomata, LevenshteinAutomata);

          void t_LevenshteinAutomata::install(PyObject *module)
          {
            installType(&PY_TYPE(LevenshteinAutomata), &PY_TYPE_DEF(LevenshteinAutomata), module, "LevenshteinAutomata", 0);
          }

          void t_LevenshteinAutomata::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LevenshteinAutomata), "class_", make_descriptor(LevenshteinAutomata::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LevenshteinAutomata), "wrapfn_", make_descriptor(t_LevenshteinAutomata::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LevenshteinAutomata), "boxfn_", make_descriptor(boxObject));
            env->getClass(LevenshteinAutomata::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(LevenshteinAutomata), "MAXIMUM_SUPPORTED_DISTANCE", make_descriptor(LevenshteinAutomata::MAXIMUM_SUPPORTED_DISTANCE));
          }

          static PyObject *t_LevenshteinAutomata_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LevenshteinAutomata::initializeClass, 1)))
              return NULL;
            return t_LevenshteinAutomata::wrap_Object(LevenshteinAutomata(((t_LevenshteinAutomata *) arg)->object.this$));
          }
          static PyObject *t_LevenshteinAutomata_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LevenshteinAutomata::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LevenshteinAutomata_init_(t_LevenshteinAutomata *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean a1;
                LevenshteinAutomata object((jobject) NULL);

                if (!parseArgs(args, "sZ", &a0, &a1))
                {
                  INT_CALL(object = LevenshteinAutomata(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                jboolean a2;
                LevenshteinAutomata object((jobject) NULL);

                if (!parseArgs(args, "[IIZ", &a0, &a1, &a2))
                {
                  INT_CALL(object = LevenshteinAutomata(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LevenshteinAutomata_toAutomaton(t_LevenshteinAutomata *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.toAutomaton(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "Is", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.toAutomaton(a0, a1));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "toAutomaton", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/TopSuggestDocs$SuggestScoreDoc.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/search/suggest/document/TopSuggestDocs$SuggestScoreDoc.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *TopSuggestDocs$SuggestScoreDoc::class$ = NULL;
            jmethodID *TopSuggestDocs$SuggestScoreDoc::mids$ = NULL;
            jfieldID *TopSuggestDocs$SuggestScoreDoc::fids$ = NULL;
            bool TopSuggestDocs$SuggestScoreDoc::live$ = false;

            jclass TopSuggestDocs$SuggestScoreDoc::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/TopSuggestDocs$SuggestScoreDoc");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_4e826ed75ee3fa30] = env->getMethodID(cls, "<init>", "(ILjava/lang/CharSequence;Ljava/lang/CharSequence;F)V");
                mids$[mid_compareTo_65dd7c25269d1b11] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/suggest/document/TopSuggestDocs$SuggestScoreDoc;)I");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_context] = env->getFieldID(cls, "context", "Ljava/lang/CharSequence;");
                fids$[fid_key] = env->getFieldID(cls, "key", "Ljava/lang/CharSequence;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TopSuggestDocs$SuggestScoreDoc::TopSuggestDocs$SuggestScoreDoc(jint a0, const ::java::lang::CharSequence & a1, const ::java::lang::CharSequence & a2, jfloat a3) : ::org::apache::lucene::search::ScoreDoc(env->newObject(initializeClass, &mids$, mid_init$_4e826ed75ee3fa30, a0, a1.this$, a2.this$, a3)) {}

            jint TopSuggestDocs$SuggestScoreDoc::compareTo(const TopSuggestDocs$SuggestScoreDoc & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_compareTo_65dd7c25269d1b11], a0.this$);
            }

            jboolean TopSuggestDocs$SuggestScoreDoc::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            jint TopSuggestDocs$SuggestScoreDoc::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }

            ::java::lang::String TopSuggestDocs$SuggestScoreDoc::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
            }

            ::java::lang::CharSequence TopSuggestDocs$SuggestScoreDoc::_get_context() const
            {
              return ::java::lang::CharSequence(env->getObjectField(this$, fids$[fid_context]));
            }

            ::java::lang::CharSequence TopSuggestDocs$SuggestScoreDoc::_get_key() const
            {
              return ::java::lang::CharSequence(env->getObjectField(this$, fids$[fid_key]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_TopSuggestDocs$SuggestScoreDoc_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TopSuggestDocs$SuggestScoreDoc_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TopSuggestDocs$SuggestScoreDoc_init_(t_TopSuggestDocs$SuggestScoreDoc *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TopSuggestDocs$SuggestScoreDoc_compareTo(t_TopSuggestDocs$SuggestScoreDoc *self, PyObject *arg);
            static PyObject *t_TopSuggestDocs$SuggestScoreDoc_equals(t_TopSuggestDocs$SuggestScoreDoc *self, PyObject *args);
            static PyObject *t_TopSuggestDocs$SuggestScoreDoc_hashCode(t_TopSuggestDocs$SuggestScoreDoc *self, PyObject *args);
            static PyObject *t_TopSuggestDocs$SuggestScoreDoc_toString(t_TopSuggestDocs$SuggestScoreDoc *self, PyObject *args);
            static PyObject *t_TopSuggestDocs$SuggestScoreDoc_get__context(t_TopSuggestDocs$SuggestScoreDoc *self, void *data);
            static PyObject *t_TopSuggestDocs$SuggestScoreDoc_get__key(t_TopSuggestDocs$SuggestScoreDoc *self, void *data);

            static PyGetSetDef t_TopSuggestDocs$SuggestScoreDoc__fields_[] = {
              DECLARE_GET_FIELD(t_TopSuggestDocs$SuggestScoreDoc, context),
              DECLARE_GET_FIELD(t_TopSuggestDocs$SuggestScoreDoc, key),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TopSuggestDocs$SuggestScoreDoc__methods_[] = {
              DECLARE_METHOD(t_TopSuggestDocs$SuggestScoreDoc, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TopSuggestDocs$SuggestScoreDoc, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TopSuggestDocs$SuggestScoreDoc, compareTo, METH_O),
              DECLARE_METHOD(t_TopSuggestDocs$SuggestScoreDoc, equals, METH_VARARGS),
              DECLARE_METHOD(t_TopSuggestDocs$SuggestScoreDoc, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_TopSuggestDocs$SuggestScoreDoc, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(TopSuggestDocs$SuggestScoreDoc)[] = {
              { Py_tp_methods, t_TopSuggestDocs$SuggestScoreDoc__methods_ },
              { Py_tp_init, (void *) t_TopSuggestDocs$SuggestScoreDoc_init_ },
              { Py_tp_getset, t_TopSuggestDocs$SuggestScoreDoc__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(TopSuggestDocs$SuggestScoreDoc)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::ScoreDoc),
              NULL
            };

            DEFINE_TYPE(TopSuggestDocs$SuggestScoreDoc, t_TopSuggestDocs$SuggestScoreDoc, TopSuggestDocs$SuggestScoreDoc);

            void t_TopSuggestDocs$SuggestScoreDoc::install(PyObject *module)
            {
              installType(&PY_TYPE(TopSuggestDocs$SuggestScoreDoc), &PY_TYPE_DEF(TopSuggestDocs$SuggestScoreDoc), module, "TopSuggestDocs$SuggestScoreDoc", 0);
            }

            void t_TopSuggestDocs$SuggestScoreDoc::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(TopSuggestDocs$SuggestScoreDoc), "class_", make_descriptor(TopSuggestDocs$SuggestScoreDoc::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TopSuggestDocs$SuggestScoreDoc), "wrapfn_", make_descriptor(t_TopSuggestDocs$SuggestScoreDoc::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TopSuggestDocs$SuggestScoreDoc), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TopSuggestDocs$SuggestScoreDoc_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TopSuggestDocs$SuggestScoreDoc::initializeClass, 1)))
                return NULL;
              return t_TopSuggestDocs$SuggestScoreDoc::wrap_Object(TopSuggestDocs$SuggestScoreDoc(((t_TopSuggestDocs$SuggestScoreDoc *) arg)->object.this$));
            }
            static PyObject *t_TopSuggestDocs$SuggestScoreDoc_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TopSuggestDocs$SuggestScoreDoc::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TopSuggestDocs$SuggestScoreDoc_init_(t_TopSuggestDocs$SuggestScoreDoc *self, PyObject *args, PyObject *kwds)
            {
              jint a0;
              ::java::lang::CharSequence a1((jobject) NULL);
              ::java::lang::CharSequence a2((jobject) NULL);
              jfloat a3;
              TopSuggestDocs$SuggestScoreDoc object((jobject) NULL);

              if (!parseArgs(args, "IOOF", ::java::lang::PY_TYPE(CharSequence), ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = TopSuggestDocs$SuggestScoreDoc(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TopSuggestDocs$SuggestScoreDoc_compareTo(t_TopSuggestDocs$SuggestScoreDoc *self, PyObject *arg)
            {
              TopSuggestDocs$SuggestScoreDoc a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", TopSuggestDocs$SuggestScoreDoc::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.compareTo(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
              return NULL;
            }

            static PyObject *t_TopSuggestDocs$SuggestScoreDoc_equals(t_TopSuggestDocs$SuggestScoreDoc *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(TopSuggestDocs$SuggestScoreDoc), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_TopSuggestDocs$SuggestScoreDoc_hashCode(t_TopSuggestDocs$SuggestScoreDoc *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(TopSuggestDocs$SuggestScoreDoc), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_TopSuggestDocs$SuggestScoreDoc_toString(t_TopSuggestDocs$SuggestScoreDoc *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(PY_TYPE(TopSuggestDocs$SuggestScoreDoc), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_TopSuggestDocs$SuggestScoreDoc_get__context(t_TopSuggestDocs$SuggestScoreDoc *self, void *data)
            {
              ::java::lang::CharSequence value((jobject) NULL);
              OBJ_CALL(value = self->object._get_context());
              return ::java::lang::t_CharSequence::wrap_Object(value);
            }

            static PyObject *t_TopSuggestDocs$SuggestScoreDoc_get__key(t_TopSuggestDocs$SuggestScoreDoc *self, void *data)
            {
              ::java::lang::CharSequence value((jobject) NULL);
              OBJ_CALL(value = self->object._get_key());
              return ::java::lang::t_CharSequence::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *FieldQueryNode::class$ = NULL;
              jmethodID *FieldQueryNode::mids$ = NULL;
              bool FieldQueryNode::live$ = false;

              jclass FieldQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_9cb0cd96f3795799] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_801604d543702e18] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;");
                  mids$[mid_getBegin_9972fcc56b44e79d] = env->getMethodID(cls, "getBegin", "()I");
                  mids$[mid_getEnd_9972fcc56b44e79d] = env->getMethodID(cls, "getEnd", "()I");
                  mids$[mid_getField_ba44900ab7d793b9] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getFieldAsString_db9b55ba01e03e4b] = env->getMethodID(cls, "getFieldAsString", "()Ljava/lang/String;");
                  mids$[mid_getPositionIncrement_9972fcc56b44e79d] = env->getMethodID(cls, "getPositionIncrement", "()I");
                  mids$[mid_getText_ba44900ab7d793b9] = env->getMethodID(cls, "getText", "()Ljava/lang/CharSequence;");
                  mids$[mid_getTextAsString_db9b55ba01e03e4b] = env->getMethodID(cls, "getTextAsString", "()Ljava/lang/String;");
                  mids$[mid_getValue_ba44900ab7d793b9] = env->getMethodID(cls, "getValue", "()Ljava/lang/CharSequence;");
                  mids$[mid_setBegin_040c4cd0390c5aff] = env->getMethodID(cls, "setBegin", "(I)V");
                  mids$[mid_setEnd_040c4cd0390c5aff] = env->getMethodID(cls, "setEnd", "(I)V");
                  mids$[mid_setField_4b7f5e38f806ae55] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_setPositionIncrement_040c4cd0390c5aff] = env->getMethodID(cls, "setPositionIncrement", "(I)V");
                  mids$[mid_setText_4b7f5e38f806ae55] = env->getMethodID(cls, "setText", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_setValue_4b7f5e38f806ae55] = env->getMethodID(cls, "setValue", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_getTermEscaped_6bb2daa53c506f10] = env->getMethodID(cls, "getTermEscaped", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_getTermEscapeQuoted_6bb2daa53c506f10] = env->getMethodID(cls, "getTermEscapeQuoted", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldQueryNode::FieldQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_9cb0cd96f3795799, a0.this$, a1.this$, a2, a3)) {}

              FieldQueryNode FieldQueryNode::cloneTree() const
              {
                return FieldQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_801604d543702e18]));
              }

              jint FieldQueryNode::getBegin() const
              {
                return env->callIntMethod(this$, mids$[mid_getBegin_9972fcc56b44e79d]);
              }

              jint FieldQueryNode::getEnd() const
              {
                return env->callIntMethod(this$, mids$[mid_getEnd_9972fcc56b44e79d]);
              }

              ::java::lang::CharSequence FieldQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_ba44900ab7d793b9]));
              }

              ::java::lang::String FieldQueryNode::getFieldAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldAsString_db9b55ba01e03e4b]));
              }

              jint FieldQueryNode::getPositionIncrement() const
              {
                return env->callIntMethod(this$, mids$[mid_getPositionIncrement_9972fcc56b44e79d]);
              }

              ::java::lang::CharSequence FieldQueryNode::getText() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getText_ba44900ab7d793b9]));
              }

              ::java::lang::String FieldQueryNode::getTextAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTextAsString_db9b55ba01e03e4b]));
              }

              ::java::lang::CharSequence FieldQueryNode::getValue() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getValue_ba44900ab7d793b9]));
              }

              void FieldQueryNode::setBegin(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setBegin_040c4cd0390c5aff], a0);
              }

              void FieldQueryNode::setEnd(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setEnd_040c4cd0390c5aff], a0);
              }

              void FieldQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_4b7f5e38f806ae55], a0.this$);
              }

              void FieldQueryNode::setPositionIncrement(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPositionIncrement_040c4cd0390c5aff], a0);
              }

              void FieldQueryNode::setText(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setText_4b7f5e38f806ae55], a0.this$);
              }

              void FieldQueryNode::setValue(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setValue_4b7f5e38f806ae55], a0.this$);
              }

              ::java::lang::CharSequence FieldQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String FieldQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_FieldQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldQueryNode_init_(t_FieldQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldQueryNode_cloneTree(t_FieldQueryNode *self, PyObject *args);
              static PyObject *t_FieldQueryNode_getBegin(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getEnd(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getField(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getFieldAsString(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getPositionIncrement(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getText(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getTextAsString(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getValue(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_setBegin(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setEnd(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setField(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setPositionIncrement(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setText(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setValue(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_toQueryString(t_FieldQueryNode *self, PyObject *args);
              static PyObject *t_FieldQueryNode_toString(t_FieldQueryNode *self, PyObject *args);
              static PyObject *t_FieldQueryNode_get__begin(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__begin(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__end(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__end(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__field(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__field(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__fieldAsString(t_FieldQueryNode *self, void *data);
              static PyObject *t_FieldQueryNode_get__positionIncrement(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__positionIncrement(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__text(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__text(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__textAsString(t_FieldQueryNode *self, void *data);
              static PyObject *t_FieldQueryNode_get__value(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__value(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_FieldQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_FieldQueryNode, begin),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, end),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, field),
                DECLARE_GET_FIELD(t_FieldQueryNode, fieldAsString),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, positionIncrement),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, text),
                DECLARE_GET_FIELD(t_FieldQueryNode, textAsString),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FieldQueryNode__methods_[] = {
                DECLARE_METHOD(t_FieldQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_FieldQueryNode, getBegin, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getEnd, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getFieldAsString, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getPositionIncrement, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getText, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getTextAsString, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, setBegin, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setEnd, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setField, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setPositionIncrement, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setText, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setValue, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_FieldQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(FieldQueryNode)[] = {
                { Py_tp_methods, t_FieldQueryNode__methods_ },
                { Py_tp_init, (void *) t_FieldQueryNode_init_ },
                { Py_tp_getset, t_FieldQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(FieldQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl),
                NULL
              };

              DEFINE_TYPE(FieldQueryNode, t_FieldQueryNode, FieldQueryNode);

              void t_FieldQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldQueryNode), &PY_TYPE_DEF(FieldQueryNode), module, "FieldQueryNode", 0);
              }

              void t_FieldQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldQueryNode), "class_", make_descriptor(FieldQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldQueryNode), "wrapfn_", make_descriptor(t_FieldQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldQueryNode::initializeClass, 1)))
                  return NULL;
                return t_FieldQueryNode::wrap_Object(FieldQueryNode(((t_FieldQueryNode *) arg)->object.this$));
              }
              static PyObject *t_FieldQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldQueryNode_init_(t_FieldQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                jint a2;
                jint a3;
                FieldQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOII", ::java::lang::PY_TYPE(CharSequence), ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = FieldQueryNode(a0, a1, a2, a3));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FieldQueryNode_cloneTree(t_FieldQueryNode *self, PyObject *args)
              {
                FieldQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_FieldQueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(FieldQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_FieldQueryNode_getBegin(t_FieldQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBegin());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_FieldQueryNode_getEnd(t_FieldQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEnd());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_FieldQueryNode_getField(t_FieldQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_FieldQueryNode_getFieldAsString(t_FieldQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getFieldAsString());
                return j2p(result);
              }

              static PyObject *t_FieldQueryNode_getPositionIncrement(t_FieldQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getPositionIncrement());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_FieldQueryNode_getText(t_FieldQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_FieldQueryNode_getTextAsString(t_FieldQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getTextAsString());
                return j2p(result);
              }

              static PyObject *t_FieldQueryNode_getValue(t_FieldQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_FieldQueryNode_setBegin(t_FieldQueryNode *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setBegin(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setBegin", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setEnd(t_FieldQueryNode *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setEnd(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setEnd", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setField(t_FieldQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setPositionIncrement(t_FieldQueryNode *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setPositionIncrement(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPositionIncrement", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setText(t_FieldQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setText(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setText", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setValue(t_FieldQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setValue(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setValue", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_toQueryString(t_FieldQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(FieldQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_FieldQueryNode_toString(t_FieldQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(FieldQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_FieldQueryNode_get__begin(t_FieldQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBegin());
                return PyLong_FromLong((long) value);
              }
              static int t_FieldQueryNode_set__begin(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setBegin(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "begin", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__end(t_FieldQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEnd());
                return PyLong_FromLong((long) value);
              }
              static int t_FieldQueryNode_set__end(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setEnd(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "end", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__field(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_FieldQueryNode_set__field(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__fieldAsString(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getFieldAsString());
                return j2p(value);
              }

              static PyObject *t_FieldQueryNode_get__positionIncrement(t_FieldQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getPositionIncrement());
                return PyLong_FromLong((long) value);
              }
              static int t_FieldQueryNode_set__positionIncrement(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setPositionIncrement(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "positionIncrement", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__text(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_FieldQueryNode_set__text(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setText(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "text", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__textAsString(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getTextAsString());
                return j2p(value);
              }

              static PyObject *t_FieldQueryNode_get__value(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_FieldQueryNode_set__value(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setValue(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "value", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/IndexReaderFunctions.h"
#include "org/apache/lucene/search/LongValuesSource.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/DoubleValuesSource.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *IndexReaderFunctions::class$ = NULL;
          jmethodID *IndexReaderFunctions::mids$ = NULL;
          bool IndexReaderFunctions::live$ = false;

          jclass IndexReaderFunctions::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/IndexReaderFunctions");

              mids$ = new jmethodID[max_mid];
              mids$[mid_docCount_ff23b83f44e75cdf] = env->getStaticMethodID(cls, "docCount", "(Ljava/lang/String;)Lorg/apache/lucene/search/DoubleValuesSource;");
              mids$[mid_docFreq_c3af75bc48267e62] = env->getStaticMethodID(cls, "docFreq", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/DoubleValuesSource;");
              mids$[mid_maxDoc_ccca60747b1553ac] = env->getStaticMethodID(cls, "maxDoc", "()Lorg/apache/lucene/search/DoubleValuesSource;");
              mids$[mid_numDeletedDocs_ccca60747b1553ac] = env->getStaticMethodID(cls, "numDeletedDocs", "()Lorg/apache/lucene/search/DoubleValuesSource;");
              mids$[mid_numDocs_ccca60747b1553ac] = env->getStaticMethodID(cls, "numDocs", "()Lorg/apache/lucene/search/DoubleValuesSource;");
              mids$[mid_sumDocFreq_ff23b83f44e75cdf] = env->getStaticMethodID(cls, "sumDocFreq", "(Ljava/lang/String;)Lorg/apache/lucene/search/DoubleValuesSource;");
              mids$[mid_sumTotalTermFreq_f99a170202280759] = env->getStaticMethodID(cls, "sumTotalTermFreq", "(Ljava/lang/String;)Lorg/apache/lucene/search/LongValuesSource;");
              mids$[mid_termFreq_c3af75bc48267e62] = env->getStaticMethodID(cls, "termFreq", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/DoubleValuesSource;");
              mids$[mid_totalTermFreq_c3af75bc48267e62] = env->getStaticMethodID(cls, "totalTermFreq", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/DoubleValuesSource;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::DoubleValuesSource IndexReaderFunctions::docCount(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::DoubleValuesSource(env->callStaticObjectMethod(cls, mids$[mid_docCount_ff23b83f44e75cdf], a0.this$));
          }

          ::org::apache::lucene::search::DoubleValuesSource IndexReaderFunctions::docFreq(const ::org::apache::lucene::index::Term & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::DoubleValuesSource(env->callStaticObjectMethod(cls, mids$[mid_docFreq_c3af75bc48267e62], a0.this$));
          }

          ::org::apache::lucene::search::DoubleValuesSource IndexReaderFunctions::maxDoc()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::DoubleValuesSource(env->callStaticObjectMethod(cls, mids$[mid_maxDoc_ccca60747b1553ac]));
          }

          ::org::apache::lucene::search::DoubleValuesSource IndexReaderFunctions::numDeletedDocs()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::DoubleValuesSource(env->callStaticObjectMethod(cls, mids$[mid_numDeletedDocs_ccca60747b1553ac]));
          }

          ::org::apache::lucene::search::DoubleValuesSource IndexReaderFunctions::numDocs()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::DoubleValuesSource(env->callStaticObjectMethod(cls, mids$[mid_numDocs_ccca60747b1553ac]));
          }

          ::org::apache::lucene::search::DoubleValuesSource IndexReaderFunctions::sumDocFreq(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::DoubleValuesSource(env->callStaticObjectMethod(cls, mids$[mid_sumDocFreq_ff23b83f44e75cdf], a0.this$));
          }

          ::org::apache::lucene::search::LongValuesSource IndexReaderFunctions::sumTotalTermFreq(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::LongValuesSource(env->callStaticObjectMethod(cls, mids$[mid_sumTotalTermFreq_f99a170202280759], a0.this$));
          }

          ::org::apache::lucene::search::DoubleValuesSource IndexReaderFunctions::termFreq(const ::org::apache::lucene::index::Term & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::DoubleValuesSource(env->callStaticObjectMethod(cls, mids$[mid_termFreq_c3af75bc48267e62], a0.this$));
          }

          ::org::apache::lucene::search::DoubleValuesSource IndexReaderFunctions::totalTermFreq(const ::org::apache::lucene::index::Term & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::DoubleValuesSource(env->callStaticObjectMethod(cls, mids$[mid_totalTermFreq_c3af75bc48267e62], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_IndexReaderFunctions_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndexReaderFunctions_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndexReaderFunctions_docCount(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndexReaderFunctions_docFreq(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndexReaderFunctions_maxDoc(PyTypeObject *type);
          static PyObject *t_IndexReaderFunctions_numDeletedDocs(PyTypeObject *type);
          static PyObject *t_IndexReaderFunctions_numDocs(PyTypeObject *type);
          static PyObject *t_IndexReaderFunctions_sumDocFreq(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndexReaderFunctions_sumTotalTermFreq(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndexReaderFunctions_termFreq(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndexReaderFunctions_totalTermFreq(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_IndexReaderFunctions__methods_[] = {
            DECLARE_METHOD(t_IndexReaderFunctions, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndexReaderFunctions, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndexReaderFunctions, docCount, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndexReaderFunctions, docFreq, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndexReaderFunctions, maxDoc, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_IndexReaderFunctions, numDeletedDocs, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_IndexReaderFunctions, numDocs, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_IndexReaderFunctions, sumDocFreq, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndexReaderFunctions, sumTotalTermFreq, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndexReaderFunctions, termFreq, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndexReaderFunctions, totalTermFreq, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IndexReaderFunctions)[] = {
            { Py_tp_methods, t_IndexReaderFunctions__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IndexReaderFunctions)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(IndexReaderFunctions, t_IndexReaderFunctions, IndexReaderFunctions);

          void t_IndexReaderFunctions::install(PyObject *module)
          {
            installType(&PY_TYPE(IndexReaderFunctions), &PY_TYPE_DEF(IndexReaderFunctions), module, "IndexReaderFunctions", 0);
          }

          void t_IndexReaderFunctions::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexReaderFunctions), "class_", make_descriptor(IndexReaderFunctions::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexReaderFunctions), "wrapfn_", make_descriptor(t_IndexReaderFunctions::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexReaderFunctions), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndexReaderFunctions_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndexReaderFunctions::initializeClass, 1)))
              return NULL;
            return t_IndexReaderFunctions::wrap_Object(IndexReaderFunctions(((t_IndexReaderFunctions *) arg)->object.this$));
          }
          static PyObject *t_IndexReaderFunctions_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndexReaderFunctions::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IndexReaderFunctions_docCount(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::DoubleValuesSource result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::function::IndexReaderFunctions::docCount(a0));
              return ::org::apache::lucene::search::t_DoubleValuesSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "docCount", arg);
            return NULL;
          }

          static PyObject *t_IndexReaderFunctions_docFreq(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::index::Term a0((jobject) NULL);
            ::org::apache::lucene::search::DoubleValuesSource result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::function::IndexReaderFunctions::docFreq(a0));
              return ::org::apache::lucene::search::t_DoubleValuesSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "docFreq", arg);
            return NULL;
          }

          static PyObject *t_IndexReaderFunctions_maxDoc(PyTypeObject *type)
          {
            ::org::apache::lucene::search::DoubleValuesSource result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::queries::function::IndexReaderFunctions::maxDoc());
            return ::org::apache::lucene::search::t_DoubleValuesSource::wrap_Object(result);
          }

          static PyObject *t_IndexReaderFunctions_numDeletedDocs(PyTypeObject *type)
          {
            ::org::apache::lucene::search::DoubleValuesSource result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::queries::function::IndexReaderFunctions::numDeletedDocs());
            return ::org::apache::lucene::search::t_DoubleValuesSource::wrap_Object(result);
          }

          static PyObject *t_IndexReaderFunctions_numDocs(PyTypeObject *type)
          {
            ::org::apache::lucene::search::DoubleValuesSource result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::queries::function::IndexReaderFunctions::numDocs());
            return ::org::apache::lucene::search::t_DoubleValuesSource::wrap_Object(result);
          }

          static PyObject *t_IndexReaderFunctions_sumDocFreq(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::DoubleValuesSource result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::function::IndexReaderFunctions::sumDocFreq(a0));
              return ::org::apache::lucene::search::t_DoubleValuesSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "sumDocFreq", arg);
            return NULL;
          }

          static PyObject *t_IndexReaderFunctions_sumTotalTermFreq(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::LongValuesSource result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::function::IndexReaderFunctions::sumTotalTermFreq(a0));
              return ::org::apache::lucene::search::t_LongValuesSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "sumTotalTermFreq", arg);
            return NULL;
          }

          static PyObject *t_IndexReaderFunctions_termFreq(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::index::Term a0((jobject) NULL);
            ::org::apache::lucene::search::DoubleValuesSource result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::function::IndexReaderFunctions::termFreq(a0));
              return ::org::apache::lucene::search::t_DoubleValuesSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "termFreq", arg);
            return NULL;
          }

          static PyObject *t_IndexReaderFunctions_totalTermFreq(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::index::Term a0((jobject) NULL);
            ::org::apache::lucene::search::DoubleValuesSource result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::function::IndexReaderFunctions::totalTermFreq(a0));
              return ::org::apache::lucene::search::t_DoubleValuesSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "totalTermFreq", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefIterator::class$ = NULL;
        jmethodID *BytesRefIterator::mids$ = NULL;
        bool BytesRefIterator::live$ = false;
        BytesRefIterator *BytesRefIterator::EMPTY = NULL;

        jclass BytesRefIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_next_7af2ea2e37ce82b8] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            EMPTY = new BytesRefIterator(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/util/BytesRefIterator;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef BytesRefIterator::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_7af2ea2e37ce82b8]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefIterator_next(t_BytesRefIterator *self);

        static PyMethodDef t_BytesRefIterator__methods_[] = {
          DECLARE_METHOD(t_BytesRefIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefIterator, next, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BytesRefIterator)[] = {
          { Py_tp_methods, t_BytesRefIterator__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_iter, (void *) PyObject_SelfIter },
          { Py_tp_iternext, (void *) ((PyObject *(*)(t_BytesRefIterator *)) get_next< t_BytesRefIterator,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >) },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BytesRefIterator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(BytesRefIterator, t_BytesRefIterator, BytesRefIterator);

        void t_BytesRefIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefIterator), &PY_TYPE_DEF(BytesRefIterator), module, "BytesRefIterator", 0);
        }

        void t_BytesRefIterator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefIterator), "class_", make_descriptor(BytesRefIterator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefIterator), "wrapfn_", make_descriptor(t_BytesRefIterator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefIterator), "boxfn_", make_descriptor(boxObject));
          env->getClass(BytesRefIterator::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefIterator), "EMPTY", make_descriptor(t_BytesRefIterator::wrap_Object(*BytesRefIterator::EMPTY)));
        }

        static PyObject *t_BytesRefIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefIterator::initializeClass, 1)))
            return NULL;
          return t_BytesRefIterator::wrap_Object(BytesRefIterator(((t_BytesRefIterator *) arg)->object.this$));
        }
        static PyObject *t_BytesRefIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BytesRefIterator_next(t_BytesRefIterator *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/GroupFacetCollector$GroupedFacetResult.h"
#include "java/util/List.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/grouping/GroupFacetCollector$FacetEntry.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *GroupFacetCollector$GroupedFacetResult::class$ = NULL;
          jmethodID *GroupFacetCollector$GroupedFacetResult::mids$ = NULL;
          bool GroupFacetCollector$GroupedFacetResult::live$ = false;

          jclass GroupFacetCollector$GroupedFacetResult::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/GroupFacetCollector$GroupedFacetResult");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f1df1c36c40f81e9] = env->getMethodID(cls, "<init>", "(IIZII)V");
              mids$[mid_addFacetCount_327a6f4e8624d9f4] = env->getMethodID(cls, "addFacetCount", "(Lorg/apache/lucene/util/BytesRef;I)V");
              mids$[mid_getFacetEntries_e1795bf76fe1346f] = env->getMethodID(cls, "getFacetEntries", "(II)Ljava/util/List;");
              mids$[mid_getTotalCount_9972fcc56b44e79d] = env->getMethodID(cls, "getTotalCount", "()I");
              mids$[mid_getTotalMissingCount_9972fcc56b44e79d] = env->getMethodID(cls, "getTotalMissingCount", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GroupFacetCollector$GroupedFacetResult::GroupFacetCollector$GroupedFacetResult(jint a0, jint a1, jboolean a2, jint a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f1df1c36c40f81e9, a0, a1, a2, a3, a4)) {}

          void GroupFacetCollector$GroupedFacetResult::addFacetCount(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addFacetCount_327a6f4e8624d9f4], a0.this$, a1);
          }

          ::java::util::List GroupFacetCollector$GroupedFacetResult::getFacetEntries(jint a0, jint a1) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getFacetEntries_e1795bf76fe1346f], a0, a1));
          }

          jint GroupFacetCollector$GroupedFacetResult::getTotalCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getTotalCount_9972fcc56b44e79d]);
          }

          jint GroupFacetCollector$GroupedFacetResult::getTotalMissingCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getTotalMissingCount_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_GroupFacetCollector$GroupedFacetResult_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupFacetCollector$GroupedFacetResult_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GroupFacetCollector$GroupedFacetResult_init_(t_GroupFacetCollector$GroupedFacetResult *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GroupFacetCollector$GroupedFacetResult_addFacetCount(t_GroupFacetCollector$GroupedFacetResult *self, PyObject *args);
          static PyObject *t_GroupFacetCollector$GroupedFacetResult_getFacetEntries(t_GroupFacetCollector$GroupedFacetResult *self, PyObject *args);
          static PyObject *t_GroupFacetCollector$GroupedFacetResult_getTotalCount(t_GroupFacetCollector$GroupedFacetResult *self);
          static PyObject *t_GroupFacetCollector$GroupedFacetResult_getTotalMissingCount(t_GroupFacetCollector$GroupedFacetResult *self);
          static PyObject *t_GroupFacetCollector$GroupedFacetResult_get__totalCount(t_GroupFacetCollector$GroupedFacetResult *self, void *data);
          static PyObject *t_GroupFacetCollector$GroupedFacetResult_get__totalMissingCount(t_GroupFacetCollector$GroupedFacetResult *self, void *data);
          static PyGetSetDef t_GroupFacetCollector$GroupedFacetResult__fields_[] = {
            DECLARE_GET_FIELD(t_GroupFacetCollector$GroupedFacetResult, totalCount),
            DECLARE_GET_FIELD(t_GroupFacetCollector$GroupedFacetResult, totalMissingCount),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GroupFacetCollector$GroupedFacetResult__methods_[] = {
            DECLARE_METHOD(t_GroupFacetCollector$GroupedFacetResult, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupFacetCollector$GroupedFacetResult, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupFacetCollector$GroupedFacetResult, addFacetCount, METH_VARARGS),
            DECLARE_METHOD(t_GroupFacetCollector$GroupedFacetResult, getFacetEntries, METH_VARARGS),
            DECLARE_METHOD(t_GroupFacetCollector$GroupedFacetResult, getTotalCount, METH_NOARGS),
            DECLARE_METHOD(t_GroupFacetCollector$GroupedFacetResult, getTotalMissingCount, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GroupFacetCollector$GroupedFacetResult)[] = {
            { Py_tp_methods, t_GroupFacetCollector$GroupedFacetResult__methods_ },
            { Py_tp_init, (void *) t_GroupFacetCollector$GroupedFacetResult_init_ },
            { Py_tp_getset, t_GroupFacetCollector$GroupedFacetResult__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GroupFacetCollector$GroupedFacetResult)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GroupFacetCollector$GroupedFacetResult, t_GroupFacetCollector$GroupedFacetResult, GroupFacetCollector$GroupedFacetResult);

          void t_GroupFacetCollector$GroupedFacetResult::install(PyObject *module)
          {
            installType(&PY_TYPE(GroupFacetCollector$GroupedFacetResult), &PY_TYPE_DEF(GroupFacetCollector$GroupedFacetResult), module, "GroupFacetCollector$GroupedFacetResult", 0);
          }

          void t_GroupFacetCollector$GroupedFacetResult::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupFacetCollector$GroupedFacetResult), "class_", make_descriptor(GroupFacetCollector$GroupedFacetResult::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupFacetCollector$GroupedFacetResult), "wrapfn_", make_descriptor(t_GroupFacetCollector$GroupedFacetResult::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupFacetCollector$GroupedFacetResult), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GroupFacetCollector$GroupedFacetResult_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GroupFacetCollector$GroupedFacetResult::initializeClass, 1)))
              return NULL;
            return t_GroupFacetCollector$GroupedFacetResult::wrap_Object(GroupFacetCollector$GroupedFacetResult(((t_GroupFacetCollector$GroupedFacetResult *) arg)->object.this$));
          }
          static PyObject *t_GroupFacetCollector$GroupedFacetResult_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GroupFacetCollector$GroupedFacetResult::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GroupFacetCollector$GroupedFacetResult_init_(t_GroupFacetCollector$GroupedFacetResult *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            jboolean a2;
            jint a3;
            jint a4;
            GroupFacetCollector$GroupedFacetResult object((jobject) NULL);

            if (!parseArgs(args, "IIZII", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = GroupFacetCollector$GroupedFacetResult(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GroupFacetCollector$GroupedFacetResult_addFacetCount(t_GroupFacetCollector$GroupedFacetResult *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addFacetCount(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addFacetCount", args);
            return NULL;
          }

          static PyObject *t_GroupFacetCollector$GroupedFacetResult_getFacetEntries(t_GroupFacetCollector$GroupedFacetResult *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getFacetEntries(a0, a1));
              return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::grouping::PY_TYPE(GroupFacetCollector$FacetEntry));
            }

            PyErr_SetArgsError((PyObject *) self, "getFacetEntries", args);
            return NULL;
          }

          static PyObject *t_GroupFacetCollector$GroupedFacetResult_getTotalCount(t_GroupFacetCollector$GroupedFacetResult *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getTotalCount());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_GroupFacetCollector$GroupedFacetResult_getTotalMissingCount(t_GroupFacetCollector$GroupedFacetResult *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getTotalMissingCount());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_GroupFacetCollector$GroupedFacetResult_get__totalCount(t_GroupFacetCollector$GroupedFacetResult *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getTotalCount());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_GroupFacetCollector$GroupedFacetResult_get__totalMissingCount(t_GroupFacetCollector$GroupedFacetResult *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getTotalMissingCount());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Builder$UnCompiledNode.h"
#include "org/apache/lucene/util/fst/Builder.h"
#include "org/apache/lucene/util/fst/Builder$Arc.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Builder$UnCompiledNode::class$ = NULL;
          jmethodID *Builder$UnCompiledNode::mids$ = NULL;
          jfieldID *Builder$UnCompiledNode::fids$ = NULL;
          bool Builder$UnCompiledNode::live$ = false;

          jclass Builder$UnCompiledNode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Builder$UnCompiledNode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1ccf00f70d22d376] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/Builder;I)V");
              mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_getLastOutput_b15c79acb15c2870] = env->getMethodID(cls, "getLastOutput", "(I)Ljava/lang/Object;");
              mids$[mid_isCompiled_8454bd5aa23fd11e] = env->getMethodID(cls, "isCompiled", "()Z");
              mids$[mid_prependOutput_d20f626183f72f7d] = env->getMethodID(cls, "prependOutput", "(Ljava/lang/Object;)V");
              mids$[mid_setLastOutput_cf6732d7dfcfc293] = env->getMethodID(cls, "setLastOutput", "(ILjava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_arcs] = env->getFieldID(cls, "arcs", "[Lorg/apache/lucene/util/fst/Builder$Arc;");
              fids$[fid_depth] = env->getFieldID(cls, "depth", "I");
              fids$[fid_inputCount] = env->getFieldID(cls, "inputCount", "J");
              fids$[fid_isFinal] = env->getFieldID(cls, "isFinal", "Z");
              fids$[fid_numArcs] = env->getFieldID(cls, "numArcs", "I");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Builder$UnCompiledNode::Builder$UnCompiledNode(const ::org::apache::lucene::util::fst::Builder & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1ccf00f70d22d376, a0.this$, a1)) {}

          void Builder$UnCompiledNode::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
          }

          ::java::lang::Object Builder$UnCompiledNode::getLastOutput(jint a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getLastOutput_b15c79acb15c2870], a0));
          }

          jboolean Builder$UnCompiledNode::isCompiled() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCompiled_8454bd5aa23fd11e]);
          }

          void Builder$UnCompiledNode::prependOutput(const ::java::lang::Object & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_prependOutput_d20f626183f72f7d], a0.this$);
          }

          void Builder$UnCompiledNode::setLastOutput(jint a0, const ::java::lang::Object & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setLastOutput_cf6732d7dfcfc293], a0, a1.this$);
          }

          JArray< ::org::apache::lucene::util::fst::Builder$Arc > Builder$UnCompiledNode::_get_arcs() const
          {
            return JArray< ::org::apache::lucene::util::fst::Builder$Arc >(env->getObjectField(this$, fids$[fid_arcs]));
          }

          void Builder$UnCompiledNode::_set_arcs(const JArray< ::org::apache::lucene::util::fst::Builder$Arc > & a0) const
          {
            env->setObjectField(this$, fids$[fid_arcs], a0.this$);
          }

          jint Builder$UnCompiledNode::_get_depth() const
          {
            return env->getIntField(this$, fids$[fid_depth]);
          }

          jlong Builder$UnCompiledNode::_get_inputCount() const
          {
            return env->getLongField(this$, fids$[fid_inputCount]);
          }

          void Builder$UnCompiledNode::_set_inputCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_inputCount], a0);
          }

          jboolean Builder$UnCompiledNode::_get_isFinal() const
          {
            return env->getBooleanField(this$, fids$[fid_isFinal]);
          }

          void Builder$UnCompiledNode::_set_isFinal(jboolean a0) const
          {
            env->setBooleanField(this$, fids$[fid_isFinal], a0);
          }

          jint Builder$UnCompiledNode::_get_numArcs() const
          {
            return env->getIntField(this$, fids$[fid_numArcs]);
          }

          void Builder$UnCompiledNode::_set_numArcs(jint a0) const
          {
            env->setIntField(this$, fids$[fid_numArcs], a0);
          }

          ::java::lang::Object Builder$UnCompiledNode::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void Builder$UnCompiledNode::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Builder$UnCompiledNode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$UnCompiledNode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$UnCompiledNode_of_(t_Builder$UnCompiledNode *self, PyObject *args);
          static int t_Builder$UnCompiledNode_init_(t_Builder$UnCompiledNode *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Builder$UnCompiledNode_clear(t_Builder$UnCompiledNode *self);
          static PyObject *t_Builder$UnCompiledNode_getLastOutput(t_Builder$UnCompiledNode *self, PyObject *arg);
          static PyObject *t_Builder$UnCompiledNode_isCompiled(t_Builder$UnCompiledNode *self);
          static PyObject *t_Builder$UnCompiledNode_prependOutput(t_Builder$UnCompiledNode *self, PyObject *arg);
          static PyObject *t_Builder$UnCompiledNode_setLastOutput(t_Builder$UnCompiledNode *self, PyObject *args);
          static PyObject *t_Builder$UnCompiledNode_get__arcs(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__arcs(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__depth(t_Builder$UnCompiledNode *self, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__inputCount(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__inputCount(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__isFinal(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__isFinal(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__numArcs(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__numArcs(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__output(t_Builder$UnCompiledNode *self, void *data);
          static int t_Builder$UnCompiledNode_set__output(t_Builder$UnCompiledNode *self, PyObject *arg, void *data);

          static PyObject *t_Builder$UnCompiledNode_get__compiled(t_Builder$UnCompiledNode *self, void *data);
          static PyObject *t_Builder$UnCompiledNode_get__parameters_(t_Builder$UnCompiledNode *self, void *data);
          static PyGetSetDef t_Builder$UnCompiledNode__fields_[] = {
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, arcs),
            DECLARE_GET_FIELD(t_Builder$UnCompiledNode, depth),
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, inputCount),
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, isFinal),
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, numArcs),
            DECLARE_GETSET_FIELD(t_Builder$UnCompiledNode, output),
            DECLARE_GET_FIELD(t_Builder$UnCompiledNode, compiled),
            DECLARE_GET_FIELD(t_Builder$UnCompiledNode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Builder$UnCompiledNode__methods_[] = {
            DECLARE_METHOD(t_Builder$UnCompiledNode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, of_, METH_VARARGS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, clear, METH_NOARGS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, getLastOutput, METH_O),
            DECLARE_METHOD(t_Builder$UnCompiledNode, isCompiled, METH_NOARGS),
            DECLARE_METHOD(t_Builder$UnCompiledNode, prependOutput, METH_O),
            DECLARE_METHOD(t_Builder$UnCompiledNode, setLastOutput, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Builder$UnCompiledNode)[] = {
            { Py_tp_methods, t_Builder$UnCompiledNode__methods_ },
            { Py_tp_init, (void *) t_Builder$UnCompiledNode_init_ },
            { Py_tp_getset, t_Builder$UnCompiledNode__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Builder$UnCompiledNode)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Builder$UnCompiledNode, t_Builder$UnCompiledNode, Builder$UnCompiledNode);
          PyObject *t_Builder$UnCompiledNode::wrap_Object(const Builder$UnCompiledNode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$UnCompiledNode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$UnCompiledNode *self = (t_Builder$UnCompiledNode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Builder$UnCompiledNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$UnCompiledNode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$UnCompiledNode *self = (t_Builder$UnCompiledNode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Builder$UnCompiledNode::install(PyObject *module)
          {
            installType(&PY_TYPE(Builder$UnCompiledNode), &PY_TYPE_DEF(Builder$UnCompiledNode), module, "Builder$UnCompiledNode", 0);
          }

          void t_Builder$UnCompiledNode::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Builder$UnCompiledNode), "class_", make_descriptor(Builder$UnCompiledNode::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Builder$UnCompiledNode), "wrapfn_", make_descriptor(t_Builder$UnCompiledNode::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Builder$UnCompiledNode), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Builder$UnCompiledNode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Builder$UnCompiledNode::initializeClass, 1)))
              return NULL;
            return t_Builder$UnCompiledNode::wrap_Object(Builder$UnCompiledNode(((t_Builder$UnCompiledNode *) arg)->object.this$));
          }
          static PyObject *t_Builder$UnCompiledNode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Builder$UnCompiledNode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Builder$UnCompiledNode_of_(t_Builder$UnCompiledNode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Builder$UnCompiledNode_init_(t_Builder$UnCompiledNode *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::Builder a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            Builder$UnCompiledNode object((jobject) NULL);

            if (!parseArgs(args, "KI", ::org::apache::lucene::util::fst::Builder::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_Builder::parameters_, &a1))
            {
              INT_CALL(object = Builder$UnCompiledNode(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Builder$UnCompiledNode_clear(t_Builder$UnCompiledNode *self)
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          static PyObject *t_Builder$UnCompiledNode_getLastOutput(t_Builder$UnCompiledNode *self, PyObject *arg)
          {
            jint a0;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getLastOutput(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getLastOutput", arg);
            return NULL;
          }

          static PyObject *t_Builder$UnCompiledNode_isCompiled(t_Builder$UnCompiledNode *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isCompiled());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Builder$UnCompiledNode_prependOutput(t_Builder$UnCompiledNode *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
              OBJ_CALL(self->object.prependOutput(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "prependOutput", arg);
            return NULL;
          }

          static PyObject *t_Builder$UnCompiledNode_setLastOutput(t_Builder$UnCompiledNode *self, PyObject *args)
          {
            jint a0;
            ::java::lang::Object a1((jobject) NULL);

            if (!parseArgs(args, "IO", self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(self->object.setLastOutput(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLastOutput", args);
            return NULL;
          }
          static PyObject *t_Builder$UnCompiledNode_get__parameters_(t_Builder$UnCompiledNode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Builder$UnCompiledNode_get__arcs(t_Builder$UnCompiledNode *self, void *data)
          {
            JArray< ::org::apache::lucene::util::fst::Builder$Arc > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_arcs());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::util::fst::t_Builder$Arc::wrap_jobject);
          }
          static int t_Builder$UnCompiledNode_set__arcs(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            JArray< ::org::apache::lucene::util::fst::Builder$Arc > value((jobject) NULL);
            if (!parseArg(arg, "[k", ::org::apache::lucene::util::fst::Builder$Arc::initializeClass, &value))
            {
              INT_CALL(self->object._set_arcs(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "arcs", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__depth(t_Builder$UnCompiledNode *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_depth());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_Builder$UnCompiledNode_get__inputCount(t_Builder$UnCompiledNode *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_inputCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Builder$UnCompiledNode_set__inputCount(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_inputCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "inputCount", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__isFinal(t_Builder$UnCompiledNode *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_isFinal());
            Py_RETURN_BOOL(value);
          }
          static int t_Builder$UnCompiledNode_set__isFinal(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object._set_isFinal(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "isFinal", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__numArcs(t_Builder$UnCompiledNode *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_numArcs());
            return PyLong_FromLong((long) value);
          }
          static int t_Builder$UnCompiledNode_set__numArcs(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_numArcs(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "numArcs", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__output(t_Builder$UnCompiledNode *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Builder$UnCompiledNode_set__output(t_Builder$UnCompiledNode *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }

          static PyObject *t_Builder$UnCompiledNode_get__compiled(t_Builder$UnCompiledNode *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isCompiled());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocIdSetIterator::class$ = NULL;
        jmethodID *DocIdSetIterator::mids$ = NULL;
        bool DocIdSetIterator::live$ = false;
        jint DocIdSetIterator::NO_MORE_DOCS = (jint) 0;

        jclass DocIdSetIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocIdSetIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_all_5e088db3f3a73f3d] = env->getStaticMethodID(cls, "all", "(I)Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_empty_173d81d7b8f93882] = env->getStaticMethodID(cls, "empty", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_range_49e04a876d0cf39a] = env->getStaticMethodID(cls, "range", "(II)Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_slowAdvance_1e143afe1894d213] = env->getMethodID(cls, "slowAdvance", "(I)I");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            NO_MORE_DOCS = env->getStaticIntField(cls, "NO_MORE_DOCS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocIdSetIterator::DocIdSetIterator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jint DocIdSetIterator::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
        }

        DocIdSetIterator DocIdSetIterator::all(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DocIdSetIterator(env->callStaticObjectMethod(cls, mids$[mid_all_5e088db3f3a73f3d], a0));
        }

        jlong DocIdSetIterator::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
        }

        jint DocIdSetIterator::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        DocIdSetIterator DocIdSetIterator::empty()
        {
          jclass cls = env->getClass(initializeClass);
          return DocIdSetIterator(env->callStaticObjectMethod(cls, mids$[mid_empty_173d81d7b8f93882]));
        }

        jint DocIdSetIterator::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
        }

        DocIdSetIterator DocIdSetIterator::range(jint a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DocIdSetIterator(env->callStaticObjectMethod(cls, mids$[mid_range_49e04a876d0cf39a], a0, a1));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocIdSetIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocIdSetIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocIdSetIterator_init_(t_DocIdSetIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocIdSetIterator_advance(t_DocIdSetIterator *self, PyObject *arg);
        static PyObject *t_DocIdSetIterator_all(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocIdSetIterator_cost(t_DocIdSetIterator *self);
        static PyObject *t_DocIdSetIterator_docID(t_DocIdSetIterator *self);
        static PyObject *t_DocIdSetIterator_empty(PyTypeObject *type);
        static PyObject *t_DocIdSetIterator_nextDoc(t_DocIdSetIterator *self);
        static PyObject *t_DocIdSetIterator_range(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_DocIdSetIterator__methods_[] = {
          DECLARE_METHOD(t_DocIdSetIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSetIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSetIterator, advance, METH_O),
          DECLARE_METHOD(t_DocIdSetIterator, all, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSetIterator, cost, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSetIterator, docID, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSetIterator, empty, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocIdSetIterator, nextDoc, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSetIterator, range, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocIdSetIterator)[] = {
          { Py_tp_methods, t_DocIdSetIterator__methods_ },
          { Py_tp_init, (void *) t_DocIdSetIterator_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocIdSetIterator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DocIdSetIterator, t_DocIdSetIterator, DocIdSetIterator);

        void t_DocIdSetIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(DocIdSetIterator), &PY_TYPE_DEF(DocIdSetIterator), module, "DocIdSetIterator", 0);
        }

        void t_DocIdSetIterator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIdSetIterator), "class_", make_descriptor(DocIdSetIterator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIdSetIterator), "wrapfn_", make_descriptor(t_DocIdSetIterator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIdSetIterator), "boxfn_", make_descriptor(boxObject));
          env->getClass(DocIdSetIterator::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIdSetIterator), "NO_MORE_DOCS", make_descriptor(DocIdSetIterator::NO_MORE_DOCS));
        }

        static PyObject *t_DocIdSetIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocIdSetIterator::initializeClass, 1)))
            return NULL;
          return t_DocIdSetIterator::wrap_Object(DocIdSetIterator(((t_DocIdSetIterator *) arg)->object.this$));
        }
        static PyObject *t_DocIdSetIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocIdSetIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocIdSetIterator_init_(t_DocIdSetIterator *self, PyObject *args, PyObject *kwds)
        {
          DocIdSetIterator object((jobject) NULL);

          INT_CALL(object = DocIdSetIterator());
          self->object = object;

          return 0;
        }

        static PyObject *t_DocIdSetIterator_advance(t_DocIdSetIterator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "advance", arg);
          return NULL;
        }

        static PyObject *t_DocIdSetIterator_all(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          DocIdSetIterator result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::DocIdSetIterator::all(a0));
            return t_DocIdSetIterator::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "all", arg);
          return NULL;
        }

        static PyObject *t_DocIdSetIterator_cost(t_DocIdSetIterator *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.cost());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DocIdSetIterator_docID(t_DocIdSetIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.docID());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_DocIdSetIterator_empty(PyTypeObject *type)
        {
          DocIdSetIterator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::DocIdSetIterator::empty());
          return t_DocIdSetIterator::wrap_Object(result);
        }

        static PyObject *t_DocIdSetIterator_nextDoc(t_DocIdSetIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.nextDoc());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_DocIdSetIterator_range(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::DocIdSetIterator::range(a0, a1));
            return t_DocIdSetIterator::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "range", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/codecs/PointsReader.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/index/MergeState$DocMap.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeState::class$ = NULL;
        jmethodID *MergeState::mids$ = NULL;
        jfieldID *MergeState::fids$ = NULL;
        bool MergeState::live$ = false;

        jclass MergeState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeState");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docMaps] = env->getFieldID(cls, "docMaps", "[Lorg/apache/lucene/index/MergeState$DocMap;");
            fids$[fid_docValuesProducers] = env->getFieldID(cls, "docValuesProducers", "[Lorg/apache/lucene/codecs/DocValuesProducer;");
            fids$[fid_fieldInfos] = env->getFieldID(cls, "fieldInfos", "[Lorg/apache/lucene/index/FieldInfos;");
            fids$[fid_fieldsProducers] = env->getFieldID(cls, "fieldsProducers", "[Lorg/apache/lucene/codecs/FieldsProducer;");
            fids$[fid_infoStream] = env->getFieldID(cls, "infoStream", "Lorg/apache/lucene/util/InfoStream;");
            fids$[fid_liveDocs] = env->getFieldID(cls, "liveDocs", "[Lorg/apache/lucene/util/Bits;");
            fids$[fid_maxDocs] = env->getFieldID(cls, "maxDocs", "[I");
            fids$[fid_mergeFieldInfos] = env->getFieldID(cls, "mergeFieldInfos", "Lorg/apache/lucene/index/FieldInfos;");
            fids$[fid_needsIndexSort] = env->getFieldID(cls, "needsIndexSort", "Z");
            fids$[fid_normsProducers] = env->getFieldID(cls, "normsProducers", "[Lorg/apache/lucene/codecs/NormsProducer;");
            fids$[fid_pointsReaders] = env->getFieldID(cls, "pointsReaders", "[Lorg/apache/lucene/codecs/PointsReader;");
            fids$[fid_segmentInfo] = env->getFieldID(cls, "segmentInfo", "Lorg/apache/lucene/index/SegmentInfo;");
            fids$[fid_storedFieldsReaders] = env->getFieldID(cls, "storedFieldsReaders", "[Lorg/apache/lucene/codecs/StoredFieldsReader;");
            fids$[fid_termVectorsReaders] = env->getFieldID(cls, "termVectorsReaders", "[Lorg/apache/lucene/codecs/TermVectorsReader;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        JArray< ::org::apache::lucene::index::MergeState$DocMap > MergeState::_get_docMaps() const
        {
          return JArray< ::org::apache::lucene::index::MergeState$DocMap >(env->getObjectField(this$, fids$[fid_docMaps]));
        }

        JArray< ::org::apache::lucene::codecs::DocValuesProducer > MergeState::_get_docValuesProducers() const
        {
          return JArray< ::org::apache::lucene::codecs::DocValuesProducer >(env->getObjectField(this$, fids$[fid_docValuesProducers]));
        }

        JArray< ::org::apache::lucene::index::FieldInfos > MergeState::_get_fieldInfos() const
        {
          return JArray< ::org::apache::lucene::index::FieldInfos >(env->getObjectField(this$, fids$[fid_fieldInfos]));
        }

        JArray< ::org::apache::lucene::codecs::FieldsProducer > MergeState::_get_fieldsProducers() const
        {
          return JArray< ::org::apache::lucene::codecs::FieldsProducer >(env->getObjectField(this$, fids$[fid_fieldsProducers]));
        }

        ::org::apache::lucene::util::InfoStream MergeState::_get_infoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->getObjectField(this$, fids$[fid_infoStream]));
        }

        JArray< ::org::apache::lucene::util::Bits > MergeState::_get_liveDocs() const
        {
          return JArray< ::org::apache::lucene::util::Bits >(env->getObjectField(this$, fids$[fid_liveDocs]));
        }

        JArray< jint > MergeState::_get_maxDocs() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_maxDocs]));
        }

        ::org::apache::lucene::index::FieldInfos MergeState::_get_mergeFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->getObjectField(this$, fids$[fid_mergeFieldInfos]));
        }

        void MergeState::_set_mergeFieldInfos(const ::org::apache::lucene::index::FieldInfos & a0) const
        {
          env->setObjectField(this$, fids$[fid_mergeFieldInfos], a0.this$);
        }

        jboolean MergeState::_get_needsIndexSort() const
        {
          return env->getBooleanField(this$, fids$[fid_needsIndexSort]);
        }

        void MergeState::_set_needsIndexSort(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_needsIndexSort], a0);
        }

        JArray< ::org::apache::lucene::codecs::NormsProducer > MergeState::_get_normsProducers() const
        {
          return JArray< ::org::apache::lucene::codecs::NormsProducer >(env->getObjectField(this$, fids$[fid_normsProducers]));
        }

        JArray< ::org::apache::lucene::codecs::PointsReader > MergeState::_get_pointsReaders() const
        {
          return JArray< ::org::apache::lucene::codecs::PointsReader >(env->getObjectField(this$, fids$[fid_pointsReaders]));
        }

        ::org::apache::lucene::index::SegmentInfo MergeState::_get_segmentInfo() const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->getObjectField(this$, fids$[fid_segmentInfo]));
        }

        JArray< ::org::apache::lucene::codecs::StoredFieldsReader > MergeState::_get_storedFieldsReaders() const
        {
          return JArray< ::org::apache::lucene::codecs::StoredFieldsReader >(env->getObjectField(this$, fids$[fid_storedFieldsReaders]));
        }

        JArray< ::org::apache::lucene::codecs::TermVectorsReader > MergeState::_get_termVectorsReaders() const
        {
          return JArray< ::org::apache::lucene::codecs::TermVectorsReader >(env->getObjectField(this$, fids$[fid_termVectorsReaders]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState_get__docMaps(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__docValuesProducers(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__fieldInfos(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__fieldsProducers(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__infoStream(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__liveDocs(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__maxDocs(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__mergeFieldInfos(t_MergeState *self, void *data);
        static int t_MergeState_set__mergeFieldInfos(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__needsIndexSort(t_MergeState *self, void *data);
        static int t_MergeState_set__needsIndexSort(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__normsProducers(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__pointsReaders(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__segmentInfo(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__storedFieldsReaders(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__termVectorsReaders(t_MergeState *self, void *data);

        static PyGetSetDef t_MergeState__fields_[] = {
          DECLARE_GET_FIELD(t_MergeState, docMaps),
          DECLARE_GET_FIELD(t_MergeState, docValuesProducers),
          DECLARE_GET_FIELD(t_MergeState, fieldInfos),
          DECLARE_GET_FIELD(t_MergeState, fieldsProducers),
          DECLARE_GET_FIELD(t_MergeState, infoStream),
          DECLARE_GET_FIELD(t_MergeState, liveDocs),
          DECLARE_GET_FIELD(t_MergeState, maxDocs),
          DECLARE_GETSET_FIELD(t_MergeState, mergeFieldInfos),
          DECLARE_GETSET_FIELD(t_MergeState, needsIndexSort),
          DECLARE_GET_FIELD(t_MergeState, normsProducers),
          DECLARE_GET_FIELD(t_MergeState, pointsReaders),
          DECLARE_GET_FIELD(t_MergeState, segmentInfo),
          DECLARE_GET_FIELD(t_MergeState, storedFieldsReaders),
          DECLARE_GET_FIELD(t_MergeState, termVectorsReaders),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergeState__methods_[] = {
          DECLARE_METHOD(t_MergeState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MergeState)[] = {
          { Py_tp_methods, t_MergeState__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_MergeState__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MergeState)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MergeState, t_MergeState, MergeState);

        void t_MergeState::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeState), &PY_TYPE_DEF(MergeState), module, "MergeState", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeState), "DocMap", make_descriptor(&PY_TYPE_DEF(MergeState$DocMap)));
        }

        void t_MergeState::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeState), "class_", make_descriptor(MergeState::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeState), "wrapfn_", make_descriptor(t_MergeState::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeState), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeState::initializeClass, 1)))
            return NULL;
          return t_MergeState::wrap_Object(MergeState(((t_MergeState *) arg)->object.this$));
        }
        static PyObject *t_MergeState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergeState_get__docMaps(t_MergeState *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MergeState$DocMap > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docMaps());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MergeState$DocMap::wrap_jobject);
        }

        static PyObject *t_MergeState_get__docValuesProducers(t_MergeState *self, void *data)
        {
          JArray< ::org::apache::lucene::codecs::DocValuesProducer > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docValuesProducers());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::codecs::t_DocValuesProducer::wrap_jobject);
        }

        static PyObject *t_MergeState_get__fieldInfos(t_MergeState *self, void *data)
        {
          JArray< ::org::apache::lucene::index::FieldInfos > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldInfos());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_FieldInfos::wrap_jobject);
        }

        static PyObject *t_MergeState_get__fieldsProducers(t_MergeState *self, void *data)
        {
          JArray< ::org::apache::lucene::codecs::FieldsProducer > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldsProducers());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::codecs::t_FieldsProducer::wrap_jobject);
        }

        static PyObject *t_MergeState_get__infoStream(t_MergeState *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object._get_infoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }

        static PyObject *t_MergeState_get__liveDocs(t_MergeState *self, void *data)
        {
          JArray< ::org::apache::lucene::util::Bits > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_liveDocs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::util::t_Bits::wrap_jobject);
        }

        static PyObject *t_MergeState_get__maxDocs(t_MergeState *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_maxDocs());
          return value.wrap();
        }

        static PyObject *t_MergeState_get__mergeFieldInfos(t_MergeState *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object._get_mergeFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }
        static int t_MergeState_set__mergeFieldInfos(t_MergeState *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfos::initializeClass, &value))
          {
            INT_CALL(self->object._set_mergeFieldInfos(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "mergeFieldInfos", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__needsIndexSort(t_MergeState *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_needsIndexSort());
          Py_RETURN_BOOL(value);
        }
        static int t_MergeState_set__needsIndexSort(t_MergeState *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_needsIndexSort(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "needsIndexSort", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__normsProducers(t_MergeState *self, void *data)
        {
          JArray< ::org::apache::lucene::codecs::NormsProducer > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_normsProducers());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::codecs::t_NormsProducer::wrap_jobject);
        }

        static PyObject *t_MergeState_get__pointsReaders(t_MergeState *self, void *data)
        {
          JArray< ::org::apache::lucene::codecs::PointsReader > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_pointsReaders());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::codecs::t_PointsReader::wrap_jobject);
        }

        static PyObject *t_MergeState_get__segmentInfo(t_MergeState *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentInfo());
          return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(value);
        }

        static PyObject *t_MergeState_get__storedFieldsReaders(t_MergeState *self, void *data)
        {
          JArray< ::org::apache::lucene::codecs::StoredFieldsReader > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_storedFieldsReaders());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_jobject);
        }

        static PyObject *t_MergeState_get__termVectorsReaders(t_MergeState *self, void *data)
        {
          JArray< ::org::apache::lucene::codecs::TermVectorsReader > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_termVectorsReaders());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::codecs::t_TermVectorsReader::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/DecimalFormat.h"
#include "java/lang/Number.h"
#include "java/util/Currency.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/StringBuffer.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *DecimalFormat::class$ = NULL;
    jmethodID *DecimalFormat::mids$ = NULL;
    bool DecimalFormat::live$ = false;

    jclass DecimalFormat::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/DecimalFormat");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_applyLocalizedPattern_9fd2eb66a64e6f0f] = env->getMethodID(cls, "applyLocalizedPattern", "(Ljava/lang/String;)V");
        mids$[mid_applyPattern_9fd2eb66a64e6f0f] = env->getMethodID(cls, "applyPattern", "(Ljava/lang/String;)V");
        mids$[mid_clone_d6bcd06f3102c4d9] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getCurrency_34cd83b8be53b24a] = env->getMethodID(cls, "getCurrency", "()Ljava/util/Currency;");
        mids$[mid_getGroupingSize_9972fcc56b44e79d] = env->getMethodID(cls, "getGroupingSize", "()I");
        mids$[mid_getMaximumFractionDigits_9972fcc56b44e79d] = env->getMethodID(cls, "getMaximumFractionDigits", "()I");
        mids$[mid_getMaximumIntegerDigits_9972fcc56b44e79d] = env->getMethodID(cls, "getMaximumIntegerDigits", "()I");
        mids$[mid_getMinimumFractionDigits_9972fcc56b44e79d] = env->getMethodID(cls, "getMinimumFractionDigits", "()I");
        mids$[mid_getMinimumIntegerDigits_9972fcc56b44e79d] = env->getMethodID(cls, "getMinimumIntegerDigits", "()I");
        mids$[mid_getMultiplier_9972fcc56b44e79d] = env->getMethodID(cls, "getMultiplier", "()I");
        mids$[mid_getNegativePrefix_db9b55ba01e03e4b] = env->getMethodID(cls, "getNegativePrefix", "()Ljava/lang/String;");
        mids$[mid_getNegativeSuffix_db9b55ba01e03e4b] = env->getMethodID(cls, "getNegativeSuffix", "()Ljava/lang/String;");
        mids$[mid_getPositivePrefix_db9b55ba01e03e4b] = env->getMethodID(cls, "getPositivePrefix", "()Ljava/lang/String;");
        mids$[mid_getPositiveSuffix_db9b55ba01e03e4b] = env->getMethodID(cls, "getPositiveSuffix", "()Ljava/lang/String;");
        mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_isDecimalSeparatorAlwaysShown_8454bd5aa23fd11e] = env->getMethodID(cls, "isDecimalSeparatorAlwaysShown", "()Z");
        mids$[mid_isParseBigDecimal_8454bd5aa23fd11e] = env->getMethodID(cls, "isParseBigDecimal", "()Z");
        mids$[mid_setCurrency_ad6cd0db6835c0e2] = env->getMethodID(cls, "setCurrency", "(Ljava/util/Currency;)V");
        mids$[mid_setDecimalSeparatorAlwaysShown_9d72768e8fdce2b7] = env->getMethodID(cls, "setDecimalSeparatorAlwaysShown", "(Z)V");
        mids$[mid_setGroupingSize_040c4cd0390c5aff] = env->getMethodID(cls, "setGroupingSize", "(I)V");
        mids$[mid_setGroupingUsed_9d72768e8fdce2b7] = env->getMethodID(cls, "setGroupingUsed", "(Z)V");
        mids$[mid_setMaximumFractionDigits_040c4cd0390c5aff] = env->getMethodID(cls, "setMaximumFractionDigits", "(I)V");
        mids$[mid_setMaximumIntegerDigits_040c4cd0390c5aff] = env->getMethodID(cls, "setMaximumIntegerDigits", "(I)V");
        mids$[mid_setMinimumFractionDigits_040c4cd0390c5aff] = env->getMethodID(cls, "setMinimumFractionDigits", "(I)V");
        mids$[mid_setMinimumIntegerDigits_040c4cd0390c5aff] = env->getMethodID(cls, "setMinimumIntegerDigits", "(I)V");
        mids$[mid_setMultiplier_040c4cd0390c5aff] = env->getMethodID(cls, "setMultiplier", "(I)V");
        mids$[mid_setNegativePrefix_9fd2eb66a64e6f0f] = env->getMethodID(cls, "setNegativePrefix", "(Ljava/lang/String;)V");
        mids$[mid_setNegativeSuffix_9fd2eb66a64e6f0f] = env->getMethodID(cls, "setNegativeSuffix", "(Ljava/lang/String;)V");
        mids$[mid_setParseBigDecimal_9d72768e8fdce2b7] = env->getMethodID(cls, "setParseBigDecimal", "(Z)V");
        mids$[mid_setPositivePrefix_9fd2eb66a64e6f0f] = env->getMethodID(cls, "setPositivePrefix", "(Ljava/lang/String;)V");
        mids$[mid_setPositiveSuffix_9fd2eb66a64e6f0f] = env->getMethodID(cls, "setPositiveSuffix", "(Ljava/lang/String;)V");
        mids$[mid_toLocalizedPattern_db9b55ba01e03e4b] = env->getMethodID(cls, "toLocalizedPattern", "()Ljava/lang/String;");
        mids$[mid_toPattern_db9b55ba01e03e4b] = env->getMethodID(cls, "toPattern", "()Ljava/lang/String;");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    DecimalFormat::DecimalFormat() : ::java::text::NumberFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

    DecimalFormat::DecimalFormat(const ::java::lang::String & a0) : ::java::text::NumberFormat(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

    void DecimalFormat::applyLocalizedPattern(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_applyLocalizedPattern_9fd2eb66a64e6f0f], a0.this$);
    }

    void DecimalFormat::applyPattern(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_applyPattern_9fd2eb66a64e6f0f], a0.this$);
    }

    ::java::lang::Object DecimalFormat::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_d6bcd06f3102c4d9]));
    }

    jboolean DecimalFormat::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
    }

    ::java::util::Currency DecimalFormat::getCurrency() const
    {
      return ::java::util::Currency(env->callObjectMethod(this$, mids$[mid_getCurrency_34cd83b8be53b24a]));
    }

    jint DecimalFormat::getGroupingSize() const
    {
      return env->callIntMethod(this$, mids$[mid_getGroupingSize_9972fcc56b44e79d]);
    }

    jint DecimalFormat::getMaximumFractionDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMaximumFractionDigits_9972fcc56b44e79d]);
    }

    jint DecimalFormat::getMaximumIntegerDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMaximumIntegerDigits_9972fcc56b44e79d]);
    }

    jint DecimalFormat::getMinimumFractionDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMinimumFractionDigits_9972fcc56b44e79d]);
    }

    jint DecimalFormat::getMinimumIntegerDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMinimumIntegerDigits_9972fcc56b44e79d]);
    }

    jint DecimalFormat::getMultiplier() const
    {
      return env->callIntMethod(this$, mids$[mid_getMultiplier_9972fcc56b44e79d]);
    }

    ::java::lang::String DecimalFormat::getNegativePrefix() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getNegativePrefix_db9b55ba01e03e4b]));
    }

    ::java::lang::String DecimalFormat::getNegativeSuffix() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getNegativeSuffix_db9b55ba01e03e4b]));
    }

    ::java::lang::String DecimalFormat::getPositivePrefix() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPositivePrefix_db9b55ba01e03e4b]));
    }

    ::java::lang::String DecimalFormat::getPositiveSuffix() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPositiveSuffix_db9b55ba01e03e4b]));
    }

    jint DecimalFormat::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
    }

    jboolean DecimalFormat::isDecimalSeparatorAlwaysShown() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isDecimalSeparatorAlwaysShown_8454bd5aa23fd11e]);
    }

    jboolean DecimalFormat::isParseBigDecimal() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isParseBigDecimal_8454bd5aa23fd11e]);
    }

    void DecimalFormat::setCurrency(const ::java::util::Currency & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setCurrency_ad6cd0db6835c0e2], a0.this$);
    }

    void DecimalFormat::setDecimalSeparatorAlwaysShown(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setDecimalSeparatorAlwaysShown_9d72768e8fdce2b7], a0);
    }

    void DecimalFormat::setGroupingSize(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setGroupingSize_040c4cd0390c5aff], a0);
    }

    void DecimalFormat::setGroupingUsed(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setGroupingUsed_9d72768e8fdce2b7], a0);
    }

    void DecimalFormat::setMaximumFractionDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMaximumFractionDigits_040c4cd0390c5aff], a0);
    }

    void DecimalFormat::setMaximumIntegerDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMaximumIntegerDigits_040c4cd0390c5aff], a0);
    }

    void DecimalFormat::setMinimumFractionDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMinimumFractionDigits_040c4cd0390c5aff], a0);
    }

    void DecimalFormat::setMinimumIntegerDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMinimumIntegerDigits_040c4cd0390c5aff], a0);
    }

    void DecimalFormat::setMultiplier(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMultiplier_040c4cd0390c5aff], a0);
    }

    void DecimalFormat::setNegativePrefix(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setNegativePrefix_9fd2eb66a64e6f0f], a0.this$);
    }

    void DecimalFormat::setNegativeSuffix(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setNegativeSuffix_9fd2eb66a64e6f0f], a0.this$);
    }

    void DecimalFormat::setParseBigDecimal(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setParseBigDecimal_9d72768e8fdce2b7], a0);
    }

    void DecimalFormat::setPositivePrefix(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setPositivePrefix_9fd2eb66a64e6f0f], a0.this$);
    }

    void DecimalFormat::setPositiveSuffix(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setPositiveSuffix_9fd2eb66a64e6f0f], a0.this$);
    }

    ::java::lang::String DecimalFormat::toLocalizedPattern() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toLocalizedPattern_db9b55ba01e03e4b]));
    }

    ::java::lang::String DecimalFormat::toPattern() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toPattern_db9b55ba01e03e4b]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_DecimalFormat_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DecimalFormat_instance_(PyTypeObject *type, PyObject *arg);
    static int t_DecimalFormat_init_(t_DecimalFormat *self, PyObject *args, PyObject *kwds);
    static PyObject *t_DecimalFormat_applyLocalizedPattern(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_applyPattern(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_clone(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_equals(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getCurrency(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getGroupingSize(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getMaximumFractionDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getMaximumIntegerDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getMinimumFractionDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getMinimumIntegerDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getMultiplier(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getNegativePrefix(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getNegativeSuffix(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getPositivePrefix(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getPositiveSuffix(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_hashCode(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_isDecimalSeparatorAlwaysShown(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_isParseBigDecimal(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_setCurrency(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setDecimalSeparatorAlwaysShown(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setGroupingSize(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setGroupingUsed(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMaximumFractionDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMaximumIntegerDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMinimumFractionDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMinimumIntegerDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMultiplier(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setNegativePrefix(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setNegativeSuffix(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setParseBigDecimal(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setPositivePrefix(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setPositiveSuffix(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_toLocalizedPattern(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_toPattern(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_get__currency(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__currency(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__decimalSeparatorAlwaysShown(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__decimalSeparatorAlwaysShown(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__groupingSize(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__groupingSize(t_DecimalFormat *self, PyObject *arg, void *data);
    static int t_DecimalFormat_set__groupingUsed(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__maximumFractionDigits(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__maximumFractionDigits(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__maximumIntegerDigits(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__maximumIntegerDigits(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__minimumFractionDigits(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__minimumFractionDigits(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__minimumIntegerDigits(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__minimumIntegerDigits(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__multiplier(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__multiplier(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__negativePrefix(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__negativePrefix(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__negativeSuffix(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__negativeSuffix(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__parseBigDecimal(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__parseBigDecimal(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__positivePrefix(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__positivePrefix(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__positiveSuffix(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__positiveSuffix(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyGetSetDef t_DecimalFormat__fields_[] = {
      DECLARE_GETSET_FIELD(t_DecimalFormat, currency),
      DECLARE_GETSET_FIELD(t_DecimalFormat, decimalSeparatorAlwaysShown),
      DECLARE_GETSET_FIELD(t_DecimalFormat, groupingSize),
      DECLARE_SET_FIELD(t_DecimalFormat, groupingUsed),
      DECLARE_GETSET_FIELD(t_DecimalFormat, maximumFractionDigits),
      DECLARE_GETSET_FIELD(t_DecimalFormat, maximumIntegerDigits),
      DECLARE_GETSET_FIELD(t_DecimalFormat, minimumFractionDigits),
      DECLARE_GETSET_FIELD(t_DecimalFormat, minimumIntegerDigits),
      DECLARE_GETSET_FIELD(t_DecimalFormat, multiplier),
      DECLARE_GETSET_FIELD(t_DecimalFormat, negativePrefix),
      DECLARE_GETSET_FIELD(t_DecimalFormat, negativeSuffix),
      DECLARE_GETSET_FIELD(t_DecimalFormat, parseBigDecimal),
      DECLARE_GETSET_FIELD(t_DecimalFormat, positivePrefix),
      DECLARE_GETSET_FIELD(t_DecimalFormat, positiveSuffix),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_DecimalFormat__methods_[] = {
      DECLARE_METHOD(t_DecimalFormat, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DecimalFormat, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DecimalFormat, applyLocalizedPattern, METH_O),
      DECLARE_METHOD(t_DecimalFormat, applyPattern, METH_O),
      DECLARE_METHOD(t_DecimalFormat, clone, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, equals, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getCurrency, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getGroupingSize, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getMaximumFractionDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getMaximumIntegerDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getMinimumFractionDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getMinimumIntegerDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getMultiplier, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getNegativePrefix, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getNegativeSuffix, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getPositivePrefix, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getPositiveSuffix, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, isDecimalSeparatorAlwaysShown, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, isParseBigDecimal, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, setCurrency, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setDecimalSeparatorAlwaysShown, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setGroupingSize, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setGroupingUsed, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMaximumFractionDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMaximumIntegerDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMinimumFractionDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMinimumIntegerDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMultiplier, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setNegativePrefix, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setNegativeSuffix, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setParseBigDecimal, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setPositivePrefix, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setPositiveSuffix, METH_O),
      DECLARE_METHOD(t_DecimalFormat, toLocalizedPattern, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, toPattern, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(DecimalFormat)[] = {
      { Py_tp_methods, t_DecimalFormat__methods_ },
      { Py_tp_init, (void *) t_DecimalFormat_init_ },
      { Py_tp_getset, t_DecimalFormat__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(DecimalFormat)[] = {
      &PY_TYPE_DEF(::java::text::NumberFormat),
      NULL
    };

    DEFINE_TYPE(DecimalFormat, t_DecimalFormat, DecimalFormat);

    void t_DecimalFormat::install(PyObject *module)
    {
      installType(&PY_TYPE(DecimalFormat), &PY_TYPE_DEF(DecimalFormat), module, "DecimalFormat", 0);
    }

    void t_DecimalFormat::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(DecimalFormat), "class_", make_descriptor(DecimalFormat::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DecimalFormat), "wrapfn_", make_descriptor(t_DecimalFormat::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DecimalFormat), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_DecimalFormat_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, DecimalFormat::initializeClass, 1)))
        return NULL;
      return t_DecimalFormat::wrap_Object(DecimalFormat(((t_DecimalFormat *) arg)->object.this$));
    }
    static PyObject *t_DecimalFormat_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, DecimalFormat::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_DecimalFormat_init_(t_DecimalFormat *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          DecimalFormat object((jobject) NULL);

          INT_CALL(object = DecimalFormat());
          self->object = object;
          break;
        }
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          DecimalFormat object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = DecimalFormat(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_DecimalFormat_applyLocalizedPattern(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.applyLocalizedPattern(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "applyLocalizedPattern", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_applyPattern(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.applyPattern(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "applyPattern", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_clone(t_DecimalFormat *self, PyObject *args)
    {
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.clone());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(PY_TYPE(DecimalFormat), (PyObject *) self, "clone", args, 2);
    }

    static PyObject *t_DecimalFormat_equals(t_DecimalFormat *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(DecimalFormat), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_DecimalFormat_getCurrency(t_DecimalFormat *self, PyObject *args)
    {
      ::java::util::Currency result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getCurrency());
        return ::java::util::t_Currency::wrap_Object(result);
      }

      return callSuper(PY_TYPE(DecimalFormat), (PyObject *) self, "getCurrency", args, 2);
    }

    static PyObject *t_DecimalFormat_getGroupingSize(t_DecimalFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getGroupingSize());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_DecimalFormat_getMaximumFractionDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getMaximumFractionDigits());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(DecimalFormat), (PyObject *) self, "getMaximumFractionDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_getMaximumIntegerDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getMaximumIntegerDigits());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(DecimalFormat), (PyObject *) self, "getMaximumIntegerDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_getMinimumFractionDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getMinimumFractionDigits());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(DecimalFormat), (PyObject *) self, "getMinimumFractionDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_getMinimumIntegerDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getMinimumIntegerDigits());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(DecimalFormat), (PyObject *) self, "getMinimumIntegerDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_getMultiplier(t_DecimalFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMultiplier());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_DecimalFormat_getNegativePrefix(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getNegativePrefix());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_getNegativeSuffix(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getNegativeSuffix());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_getPositivePrefix(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getPositivePrefix());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_getPositiveSuffix(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getPositiveSuffix());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_hashCode(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(DecimalFormat), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_DecimalFormat_isDecimalSeparatorAlwaysShown(t_DecimalFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isDecimalSeparatorAlwaysShown());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_DecimalFormat_isParseBigDecimal(t_DecimalFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isParseBigDecimal());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_DecimalFormat_setCurrency(t_DecimalFormat *self, PyObject *args)
    {
      ::java::util::Currency a0((jobject) NULL);

      if (!parseArgs(args, "k", ::java::util::Currency::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setCurrency(a0));
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(DecimalFormat), (PyObject *) self, "setCurrency", args, 2);
    }

    static PyObject *t_DecimalFormat_setDecimalSeparatorAlwaysShown(t_DecimalFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setDecimalSeparatorAlwaysShown(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setDecimalSeparatorAlwaysShown", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setGroupingSize(t_DecimalFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setGroupingSize(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setGroupingSize", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setGroupingUsed(t_DecimalFormat *self, PyObject *args)
    {
      jboolean a0;

      if (!parseArgs(args, "Z", &a0))
      {
        OBJ_CALL(self->object.setGroupingUsed(a0));
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(DecimalFormat), (PyObject *) self, "setGroupingUsed", args, 2);
    }

    static PyObject *t_DecimalFormat_setMaximumFractionDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.setMaximumFractionDigits(a0));
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(DecimalFormat), (PyObject *) self, "setMaximumFractionDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_setMaximumIntegerDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.setMaximumIntegerDigits(a0));
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(DecimalFormat), (PyObject *) self, "setMaximumIntegerDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_setMinimumFractionDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.setMinimumFractionDigits(a0));
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(DecimalFormat), (PyObject *) self, "setMinimumFractionDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_setMinimumIntegerDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.setMinimumIntegerDigits(a0));
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(DecimalFormat), (PyObject *) self, "setMinimumIntegerDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_setMultiplier(t_DecimalFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMultiplier(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMultiplier", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setNegativePrefix(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setNegativePrefix(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setNegativePrefix", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setNegativeSuffix(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setNegativeSuffix(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setNegativeSuffix", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setParseBigDecimal(t_DecimalFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setParseBigDecimal(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setParseBigDecimal", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setPositivePrefix(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setPositivePrefix(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setPositivePrefix", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setPositiveSuffix(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setPositiveSuffix(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setPositiveSuffix", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_toLocalizedPattern(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toLocalizedPattern());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_toPattern(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toPattern());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_get__currency(t_DecimalFormat *self, void *data)
    {
      ::java::util::Currency value((jobject) NULL);
      OBJ_CALL(value = self->object.getCurrency());
      return ::java::util::t_Currency::wrap_Object(value);
    }
    static int t_DecimalFormat_set__currency(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Currency value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Currency::initializeClass, &value))
        {
          INT_CALL(self->object.setCurrency(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "currency", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__decimalSeparatorAlwaysShown(t_DecimalFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isDecimalSeparatorAlwaysShown());
      Py_RETURN_BOOL(value);
    }
    static int t_DecimalFormat_set__decimalSeparatorAlwaysShown(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setDecimalSeparatorAlwaysShown(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "decimalSeparatorAlwaysShown", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__groupingSize(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getGroupingSize());
      return PyLong_FromLong((long) value);
    }
    static int t_DecimalFormat_set__groupingSize(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setGroupingSize(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "groupingSize", arg);
      return -1;
    }

    static int t_DecimalFormat_set__groupingUsed(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setGroupingUsed(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "groupingUsed", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__maximumFractionDigits(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMaximumFractionDigits());
      return PyLong_FromLong((long) value);
    }
    static int t_DecimalFormat_set__maximumFractionDigits(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMaximumFractionDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "maximumFractionDigits", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__maximumIntegerDigits(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMaximumIntegerDigits());
      return PyLong_FromLong((long) value);
    }
    static int t_DecimalFormat_set__maximumIntegerDigits(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMaximumIntegerDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "maximumIntegerDigits", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__minimumFractionDigits(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMinimumFractionDigits());
      return PyLong_FromLong((long) value);
    }
    static int t_DecimalFormat_set__minimumFractionDigits(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMinimumFractionDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "minimumFractionDigits", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__minimumIntegerDigits(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMinimumIntegerDigits());
      return PyLong_FromLong((long) value);
    }
    static int t_DecimalFormat_set__minimumIntegerDigits(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMinimumIntegerDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "minimumIntegerDigits", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__multiplier(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMultiplier());
      return PyLong_FromLong((long) value);
    }
    static int t_DecimalFormat_set__multiplier(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMultiplier(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "multiplier", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__negativePrefix(t_DecimalFormat *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getNegativePrefix());
      return j2p(value);
    }
    static int t_DecimalFormat_set__negativePrefix(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setNegativePrefix(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "negativePrefix", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__negativeSuffix(t_DecimalFormat *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getNegativeSuffix());
      return j2p(value);
    }
    static int t_DecimalFormat_set__negativeSuffix(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setNegativeSuffix(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "negativeSuffix", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__parseBigDecimal(t_DecimalFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isParseBigDecimal());
      Py_RETURN_BOOL(value);
    }
    static int t_DecimalFormat_set__parseBigDecimal(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setParseBigDecimal(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "parseBigDecimal", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__positivePrefix(t_DecimalFormat *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getPositivePrefix());
      return j2p(value);
    }
    static int t_DecimalFormat_set__positivePrefix(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setPositivePrefix(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "positivePrefix", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__positiveSuffix(t_DecimalFormat *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getPositiveSuffix());
      return j2p(value);
    }
    static int t_DecimalFormat_set__positiveSuffix(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setPositiveSuffix(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "positiveSuffix", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/IndriAndQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *IndriAndQuery::class$ = NULL;
        jmethodID *IndriAndQuery::mids$ = NULL;
        bool IndriAndQuery::live$ = false;

        jclass IndriAndQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/IndriAndQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d03990be0130160d] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndriAndQuery::IndriAndQuery(const ::java::util::List & a0) : ::org::apache::lucene::search::IndriQuery(env->newObject(initializeClass, &mids$, mid_init$_d03990be0130160d, a0.this$)) {}

        ::org::apache::lucene::search::Weight IndriAndQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_IndriAndQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndriAndQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndriAndQuery_init_(t_IndriAndQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndriAndQuery_createWeight(t_IndriAndQuery *self, PyObject *args);

        static PyMethodDef t_IndriAndQuery__methods_[] = {
          DECLARE_METHOD(t_IndriAndQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndriAndQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndriAndQuery, createWeight, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndriAndQuery)[] = {
          { Py_tp_methods, t_IndriAndQuery__methods_ },
          { Py_tp_init, (void *) t_IndriAndQuery_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndriAndQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::IndriQuery),
          NULL
        };

        DEFINE_TYPE(IndriAndQuery, t_IndriAndQuery, IndriAndQuery);

        void t_IndriAndQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(IndriAndQuery), &PY_TYPE_DEF(IndriAndQuery), module, "IndriAndQuery", 0);
        }

        void t_IndriAndQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndriAndQuery), "class_", make_descriptor(IndriAndQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndriAndQuery), "wrapfn_", make_descriptor(t_IndriAndQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndriAndQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndriAndQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndriAndQuery::initializeClass, 1)))
            return NULL;
          return t_IndriAndQuery::wrap_Object(IndriAndQuery(((t_IndriAndQuery *) arg)->object.this$));
        }
        static PyObject *t_IndriAndQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndriAndQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndriAndQuery_init_(t_IndriAndQuery *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          IndriAndQuery object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            INT_CALL(object = IndriAndQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndriAndQuery_createWeight(t_IndriAndQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndriAndQuery), (PyObject *) self, "createWeight", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsScoringBooleanQueryRewrite.h"
#include "org/apache/lucene/search/BooleanQuery$Builder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery$TopTermsScoringBooleanQueryRewrite::class$ = NULL;
        jmethodID *MultiTermQuery$TopTermsScoringBooleanQueryRewrite::mids$ = NULL;
        bool MultiTermQuery$TopTermsScoringBooleanQueryRewrite::live$ = false;

        jclass MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery$TopTermsScoringBooleanQueryRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_build_f9a1c1df37d5da9b] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/BooleanQuery$Builder;)Lorg/apache/lucene/search/Query;");
            mids$[mid_addClause_deba14d568ed29a2] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/BooleanQuery$Builder;Lorg/apache/lucene/index/Term;IFLorg/apache/lucene/index/TermStates;)V");
            mids$[mid_getTopLevelBuilder_a51b33134513d073] = env->getMethodID(cls, "getTopLevelBuilder", "()Lorg/apache/lucene/search/BooleanQuery$Builder;");
            mids$[mid_getMaxSize_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxSize", "()I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery$TopTermsScoringBooleanQueryRewrite::MultiTermQuery$TopTermsScoringBooleanQueryRewrite(jint a0) : ::org::apache::lucene::search::TopTermsRewrite(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_of_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, PyObject *args);
        static int t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_init_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_get__parameters_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, void *data);
        static PyGetSetDef t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiTermQuery$TopTermsScoringBooleanQueryRewrite)[] = {
          { Py_tp_methods, t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite__methods_ },
          { Py_tp_init, (void *) t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_init_ },
          { Py_tp_getset, t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiTermQuery$TopTermsScoringBooleanQueryRewrite)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::TopTermsRewrite),
          NULL
        };

        DEFINE_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite, t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, MultiTermQuery$TopTermsScoringBooleanQueryRewrite);
        PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_Object(const MultiTermQuery$TopTermsScoringBooleanQueryRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self = (t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self = (t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite), &PY_TYPE_DEF(MultiTermQuery$TopTermsScoringBooleanQueryRewrite), module, "MultiTermQuery$TopTermsScoringBooleanQueryRewrite", 0);
        }

        void t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite), "class_", make_descriptor(MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite), "wrapfn_", make_descriptor(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_Object(MultiTermQuery$TopTermsScoringBooleanQueryRewrite(((t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_of_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_init_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          MultiTermQuery$TopTermsScoringBooleanQueryRewrite object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = MultiTermQuery$TopTermsScoringBooleanQueryRewrite(a0));
            self->object = object;
            self->parameters[0] = ::org::apache::lucene::search::PY_TYPE(BooleanQuery$Builder);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_get__parameters_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sr/SerbianNormalizationFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sr {

          ::java::lang::Class *SerbianNormalizationFilterFactory::class$ = NULL;
          jmethodID *SerbianNormalizationFilterFactory::mids$ = NULL;
          bool SerbianNormalizationFilterFactory::live$ = false;
          ::java::lang::String *SerbianNormalizationFilterFactory::NAME = NULL;

          jclass SerbianNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sr/SerbianNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_normalize_6de1e28d9d10cd9e] = env->getMethodID(cls, "normalize", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SerbianNormalizationFilterFactory::SerbianNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream SerbianNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream SerbianNormalizationFilterFactory::normalize(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_normalize_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sr {
          static PyObject *t_SerbianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SerbianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SerbianNormalizationFilterFactory_init_(t_SerbianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SerbianNormalizationFilterFactory_create(t_SerbianNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_SerbianNormalizationFilterFactory_normalize(t_SerbianNormalizationFilterFactory *self, PyObject *args);

          static PyMethodDef t_SerbianNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SerbianNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SerbianNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SerbianNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_SerbianNormalizationFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SerbianNormalizationFilterFactory)[] = {
            { Py_tp_methods, t_SerbianNormalizationFilterFactory__methods_ },
            { Py_tp_init, (void *) t_SerbianNormalizationFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SerbianNormalizationFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(SerbianNormalizationFilterFactory, t_SerbianNormalizationFilterFactory, SerbianNormalizationFilterFactory);

          void t_SerbianNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SerbianNormalizationFilterFactory), &PY_TYPE_DEF(SerbianNormalizationFilterFactory), module, "SerbianNormalizationFilterFactory", 0);
          }

          void t_SerbianNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SerbianNormalizationFilterFactory), "class_", make_descriptor(SerbianNormalizationFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SerbianNormalizationFilterFactory), "wrapfn_", make_descriptor(t_SerbianNormalizationFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SerbianNormalizationFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(SerbianNormalizationFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SerbianNormalizationFilterFactory), "NAME", make_descriptor(j2p(*SerbianNormalizationFilterFactory::NAME)));
          }

          static PyObject *t_SerbianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SerbianNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SerbianNormalizationFilterFactory::wrap_Object(SerbianNormalizationFilterFactory(((t_SerbianNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SerbianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SerbianNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SerbianNormalizationFilterFactory_init_(t_SerbianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SerbianNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SerbianNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SerbianNormalizationFilterFactory_create(t_SerbianNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SerbianNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_SerbianNormalizationFilterFactory_normalize(t_SerbianNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SerbianNormalizationFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/LongValuesSource.h"
#include "org/apache/lucene/search/SegmentCacheable.h"
#include "org/apache/lucene/search/LongValuesSource.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/DoubleValues.h"
#include "org/apache/lucene/search/DoubleValuesSource.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/LongValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *LongValuesSource::class$ = NULL;
        jmethodID *LongValuesSource::mids$ = NULL;
        bool LongValuesSource::live$ = false;

        jclass LongValuesSource::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/LongValuesSource");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_constant_5d962b4a04f587bb] = env->getStaticMethodID(cls, "constant", "(J)Lorg/apache/lucene/search/LongValuesSource;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_fromIntField_f99a170202280759] = env->getStaticMethodID(cls, "fromIntField", "(Ljava/lang/String;)Lorg/apache/lucene/search/LongValuesSource;");
            mids$[mid_fromLongField_f99a170202280759] = env->getStaticMethodID(cls, "fromLongField", "(Ljava/lang/String;)Lorg/apache/lucene/search/LongValuesSource;");
            mids$[mid_getSortField_8a713675264264ba] = env->getMethodID(cls, "getSortField", "(Z)Lorg/apache/lucene/search/SortField;");
            mids$[mid_getValues_7e294615cabb0892] = env->getMethodID(cls, "getValues", "(Lorg/apache/lucene/index/LeafReaderContext;Lorg/apache/lucene/search/DoubleValues;)Lorg/apache/lucene/search/LongValues;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_needsScores_8454bd5aa23fd11e] = env->getMethodID(cls, "needsScores", "()Z");
            mids$[mid_rewrite_46c9173c5c89f0e5] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/LongValuesSource;");
            mids$[mid_toDoubleValuesSource_ccca60747b1553ac] = env->getMethodID(cls, "toDoubleValuesSource", "()Lorg/apache/lucene/search/DoubleValuesSource;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongValuesSource::LongValuesSource() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        LongValuesSource LongValuesSource::constant(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return LongValuesSource(env->callStaticObjectMethod(cls, mids$[mid_constant_5d962b4a04f587bb], a0));
        }

        jboolean LongValuesSource::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        LongValuesSource LongValuesSource::fromIntField(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return LongValuesSource(env->callStaticObjectMethod(cls, mids$[mid_fromIntField_f99a170202280759], a0.this$));
        }

        LongValuesSource LongValuesSource::fromLongField(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return LongValuesSource(env->callStaticObjectMethod(cls, mids$[mid_fromLongField_f99a170202280759], a0.this$));
        }

        ::org::apache::lucene::search::SortField LongValuesSource::getSortField(jboolean a0) const
        {
          return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_getSortField_8a713675264264ba], a0));
        }

        ::org::apache::lucene::search::LongValues LongValuesSource::getValues(const ::org::apache::lucene::index::LeafReaderContext & a0, const ::org::apache::lucene::search::DoubleValues & a1) const
        {
          return ::org::apache::lucene::search::LongValues(env->callObjectMethod(this$, mids$[mid_getValues_7e294615cabb0892], a0.this$, a1.this$));
        }

        jint LongValuesSource::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean LongValuesSource::needsScores() const
        {
          return env->callBooleanMethod(this$, mids$[mid_needsScores_8454bd5aa23fd11e]);
        }

        LongValuesSource LongValuesSource::rewrite(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return LongValuesSource(env->callObjectMethod(this$, mids$[mid_rewrite_46c9173c5c89f0e5], a0.this$));
        }

        ::org::apache::lucene::search::DoubleValuesSource LongValuesSource::toDoubleValuesSource() const
        {
          return ::org::apache::lucene::search::DoubleValuesSource(env->callObjectMethod(this$, mids$[mid_toDoubleValuesSource_ccca60747b1553ac]));
        }

        ::java::lang::String LongValuesSource::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_LongValuesSource_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongValuesSource_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongValuesSource_init_(t_LongValuesSource *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongValuesSource_constant(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongValuesSource_equals(t_LongValuesSource *self, PyObject *args);
        static PyObject *t_LongValuesSource_fromIntField(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongValuesSource_fromLongField(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongValuesSource_getSortField(t_LongValuesSource *self, PyObject *arg);
        static PyObject *t_LongValuesSource_getValues(t_LongValuesSource *self, PyObject *args);
        static PyObject *t_LongValuesSource_hashCode(t_LongValuesSource *self, PyObject *args);
        static PyObject *t_LongValuesSource_needsScores(t_LongValuesSource *self);
        static PyObject *t_LongValuesSource_rewrite(t_LongValuesSource *self, PyObject *arg);
        static PyObject *t_LongValuesSource_toDoubleValuesSource(t_LongValuesSource *self);
        static PyObject *t_LongValuesSource_toString(t_LongValuesSource *self, PyObject *args);

        static PyMethodDef t_LongValuesSource__methods_[] = {
          DECLARE_METHOD(t_LongValuesSource, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongValuesSource, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongValuesSource, constant, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongValuesSource, equals, METH_VARARGS),
          DECLARE_METHOD(t_LongValuesSource, fromIntField, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongValuesSource, fromLongField, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongValuesSource, getSortField, METH_O),
          DECLARE_METHOD(t_LongValuesSource, getValues, METH_VARARGS),
          DECLARE_METHOD(t_LongValuesSource, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LongValuesSource, needsScores, METH_NOARGS),
          DECLARE_METHOD(t_LongValuesSource, rewrite, METH_O),
          DECLARE_METHOD(t_LongValuesSource, toDoubleValuesSource, METH_NOARGS),
          DECLARE_METHOD(t_LongValuesSource, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LongValuesSource)[] = {
          { Py_tp_methods, t_LongValuesSource__methods_ },
          { Py_tp_init, (void *) t_LongValuesSource_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LongValuesSource)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LongValuesSource, t_LongValuesSource, LongValuesSource);

        void t_LongValuesSource::install(PyObject *module)
        {
          installType(&PY_TYPE(LongValuesSource), &PY_TYPE_DEF(LongValuesSource), module, "LongValuesSource", 0);
        }

        void t_LongValuesSource::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongValuesSource), "class_", make_descriptor(LongValuesSource::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongValuesSource), "wrapfn_", make_descriptor(t_LongValuesSource::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongValuesSource), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LongValuesSource_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongValuesSource::initializeClass, 1)))
            return NULL;
          return t_LongValuesSource::wrap_Object(LongValuesSource(((t_LongValuesSource *) arg)->object.this$));
        }
        static PyObject *t_LongValuesSource_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongValuesSource::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongValuesSource_init_(t_LongValuesSource *self, PyObject *args, PyObject *kwds)
        {
          LongValuesSource object((jobject) NULL);

          INT_CALL(object = LongValuesSource());
          self->object = object;

          return 0;
        }

        static PyObject *t_LongValuesSource_constant(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          LongValuesSource result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::LongValuesSource::constant(a0));
            return t_LongValuesSource::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "constant", arg);
          return NULL;
        }

        static PyObject *t_LongValuesSource_equals(t_LongValuesSource *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(LongValuesSource), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LongValuesSource_fromIntField(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          LongValuesSource result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::LongValuesSource::fromIntField(a0));
            return t_LongValuesSource::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "fromIntField", arg);
          return NULL;
        }

        static PyObject *t_LongValuesSource_fromLongField(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          LongValuesSource result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::LongValuesSource::fromLongField(a0));
            return t_LongValuesSource::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "fromLongField", arg);
          return NULL;
        }

        static PyObject *t_LongValuesSource_getSortField(t_LongValuesSource *self, PyObject *arg)
        {
          jboolean a0;
          ::org::apache::lucene::search::SortField result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.getSortField(a0));
            return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortField", arg);
          return NULL;
        }

        static PyObject *t_LongValuesSource_getValues(t_LongValuesSource *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::DoubleValues a1((jobject) NULL);
          ::org::apache::lucene::search::LongValues result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::LeafReaderContext::initializeClass, ::org::apache::lucene::search::DoubleValues::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getValues(a0, a1));
            return ::org::apache::lucene::search::t_LongValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getValues", args);
          return NULL;
        }

        static PyObject *t_LongValuesSource_hashCode(t_LongValuesSource *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(LongValuesSource), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LongValuesSource_needsScores(t_LongValuesSource *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.needsScores());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LongValuesSource_rewrite(t_LongValuesSource *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          LongValuesSource result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return t_LongValuesSource::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_LongValuesSource_toDoubleValuesSource(t_LongValuesSource *self)
        {
          ::org::apache::lucene::search::DoubleValuesSource result((jobject) NULL);
          OBJ_CALL(result = self->object.toDoubleValuesSource());
          return ::org::apache::lucene::search::t_DoubleValuesSource::wrap_Object(result);
        }

        static PyObject *t_LongValuesSource_toString(t_LongValuesSource *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(LongValuesSource), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Byte.h"
#include "java/lang/Byte.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/NumberFormatException.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Byte::class$ = NULL;
    jmethodID *Byte::mids$ = NULL;
    bool Byte::live$ = false;
    jint Byte::BYTES = (jint) 0;
    jbyte Byte::MAX_VALUE = (jbyte) 0;
    jbyte Byte::MIN_VALUE = (jbyte) 0;
    jint Byte::SIZE = (jint) 0;
    ::java::lang::Class *Byte::TYPE = NULL;

    jclass Byte::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Byte");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_9c36fec3bac1d0c7] = env->getMethodID(cls, "<init>", "(B)V");
        mids$[mid_byteValue_871cd52a74f26213] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_5112c82a316a4717] = env->getStaticMethodID(cls, "compare", "(BB)I");
        mids$[mid_compareTo_5be20057625ab643] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Byte;)I");
        mids$[mid_decode_6633bb9d2ad3c415] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Byte;");
        mids$[mid_doubleValue_8c74b787998ce4bc] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_58aec2b64dff50c8] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_5312fc6ae11d52d9] = env->getStaticMethodID(cls, "hashCode", "(B)I");
        mids$[mid_intValue_9972fcc56b44e79d] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_2e5ae9edcb9b072f] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_parseByte_5cc1cc3ee6dabd77] = env->getStaticMethodID(cls, "parseByte", "(Ljava/lang/String;)B");
        mids$[mid_parseByte_d205b8ee3799eb65] = env->getStaticMethodID(cls, "parseByte", "(Ljava/lang/String;I)B");
        mids$[mid_shortValue_ec20af88366b851e] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_3bd839c18a5b11ae] = env->getStaticMethodID(cls, "toString", "(B)Ljava/lang/String;");
        mids$[mid_toUnsignedInt_5312fc6ae11d52d9] = env->getStaticMethodID(cls, "toUnsignedInt", "(B)I");
        mids$[mid_toUnsignedLong_b213fc556f31ad65] = env->getStaticMethodID(cls, "toUnsignedLong", "(B)J");
        mids$[mid_valueOf_6633bb9d2ad3c415] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Byte;");
        mids$[mid_valueOf_e3255412a205c0a4] = env->getStaticMethodID(cls, "valueOf", "(B)Ljava/lang/Byte;");
        mids$[mid_valueOf_c95717ff69a28c0d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Byte;");

        class$ = new ::java::lang::Class(cls);
        cls = (jclass) class$->this$;

        BYTES = env->getStaticIntField(cls, "BYTES");
        MAX_VALUE = env->getStaticByteField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticByteField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Byte::Byte(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

    Byte::Byte(jbyte a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_9c36fec3bac1d0c7, a0)) {}

    jbyte Byte::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_871cd52a74f26213]);
    }

    jint Byte::compare(jbyte a0, jbyte a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_5112c82a316a4717], a0, a1);
    }

    jint Byte::compareTo(const Byte & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_5be20057625ab643], a0.this$);
    }

    Byte Byte::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_decode_6633bb9d2ad3c415], a0.this$));
    }

    jdouble Byte::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_8c74b787998ce4bc]);
    }

    jboolean Byte::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
    }

    jfloat Byte::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_58aec2b64dff50c8]);
    }

    jint Byte::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
    }

    jint Byte::hashCode(jbyte a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_5312fc6ae11d52d9], a0);
    }

    jint Byte::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_9972fcc56b44e79d]);
    }

    jlong Byte::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_2e5ae9edcb9b072f]);
    }

    jbyte Byte::parseByte(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_parseByte_5cc1cc3ee6dabd77], a0.this$);
    }

    jbyte Byte::parseByte(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_parseByte_d205b8ee3799eb65], a0.this$, a1);
    }

    jshort Byte::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_ec20af88366b851e]);
    }

    ::java::lang::String Byte::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
    }

    ::java::lang::String Byte::toString(jbyte a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_3bd839c18a5b11ae], a0));
    }

    jint Byte::toUnsignedInt(jbyte a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toUnsignedInt_5312fc6ae11d52d9], a0);
    }

    jlong Byte::toUnsignedLong(jbyte a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_toUnsignedLong_b213fc556f31ad65], a0);
    }

    Byte Byte::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_valueOf_6633bb9d2ad3c415], a0.this$));
    }

    Byte Byte::valueOf(jbyte a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_valueOf_e3255412a205c0a4], a0));
    }

    Byte Byte::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_valueOf_c95717ff69a28c0d], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Byte_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Byte_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Byte_init_(t_Byte *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Byte_byteValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Byte_compareTo(t_Byte *self, PyObject *arg);
    static PyObject *t_Byte_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Byte_doubleValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_equals(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_floatValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_hashCode(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Byte_intValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_longValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_parseByte(PyTypeObject *type, PyObject *args);
    static PyObject *t_Byte_shortValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_toString(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Byte_toUnsignedInt(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Byte_toUnsignedLong(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Byte_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Byte__methods_[] = {
      DECLARE_METHOD(t_Byte, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Byte, compareTo, METH_O),
      DECLARE_METHOD(t_Byte, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, equals, METH_VARARGS),
      DECLARE_METHOD(t_Byte, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Byte, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, parseByte, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Byte, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, toString, METH_VARARGS),
      DECLARE_METHOD(t_Byte, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, toUnsignedInt, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, toUnsignedLong, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Byte)[] = {
      { Py_tp_methods, t_Byte__methods_ },
      { Py_tp_init, (void *) t_Byte_init_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Byte)[] = {
      &PY_TYPE_DEF(::java::lang::Number),
      NULL
    };

    DEFINE_TYPE(Byte, t_Byte, Byte);

    void t_Byte::install(PyObject *module)
    {
      installType(&PY_TYPE(Byte), &PY_TYPE_DEF(Byte), module, "Byte", 0);
    }

    void t_Byte::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Byte), "class_", make_descriptor(Byte::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Byte), "wrapfn_", make_descriptor(unboxByte));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Byte), "boxfn_", make_descriptor(boxByte));
      env->getClass(Byte::initializeClass);
      PyObject_SetAttrString((PyObject *) PY_TYPE(Byte), "BYTES", make_descriptor(Byte::BYTES));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Byte), "MAX_VALUE", make_descriptor(Byte::MAX_VALUE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Byte), "MIN_VALUE", make_descriptor(Byte::MIN_VALUE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Byte), "SIZE", make_descriptor(Byte::SIZE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Byte), "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Byte::TYPE)));
    }

    static PyObject *t_Byte_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Byte::initializeClass, 1)))
        return NULL;
      return t_Byte::wrap_Object(Byte(((t_Byte *) arg)->object.this$));
    }
    static PyObject *t_Byte_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Byte::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Byte_init_(t_Byte *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Byte object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Byte(a0));
            self->object = object;
            break;
          }
        }
        {
          jbyte a0;
          Byte object((jobject) NULL);

          if (!parseArgs(args, "B", &a0))
          {
            INT_CALL(object = Byte(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Byte_byteValue(t_Byte *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Byte), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Byte_compare(PyTypeObject *type, PyObject *args)
    {
      jbyte a0;
      jbyte a1;
      jint result;

      if (!parseArgs(args, "BB", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Byte::compare(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Byte_compareTo(t_Byte *self, PyObject *arg)
    {
      Byte a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", ::java::lang::PY_TYPE(Byte), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Byte_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Byte result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Byte::decode(a0));
        return t_Byte::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Byte_doubleValue(t_Byte *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(PY_TYPE(Byte), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Byte_equals(t_Byte *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(Byte), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Byte_floatValue(t_Byte *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(PY_TYPE(Byte), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Byte_hashCode(t_Byte *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Byte), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Byte_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jbyte a0;
      jint result;

      if (!parseArgs(args, "B", &a0))
      {
        OBJ_CALL(result = ::java::lang::Byte::hashCode(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Byte_intValue(t_Byte *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Byte), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Byte_longValue(t_Byte *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(PY_TYPE(Byte), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Byte_parseByte(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jbyte result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Byte::parseByte(a0));
            return PyLong_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jbyte result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Byte::parseByte(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseByte", args);
      return NULL;
    }

    static PyObject *t_Byte_shortValue(t_Byte *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Byte), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Byte_toString(t_Byte *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(PY_TYPE(Byte), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Byte_toString_(PyTypeObject *type, PyObject *args)
    {
      jbyte a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "B", &a0))
      {
        OBJ_CALL(result = ::java::lang::Byte::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Byte_toUnsignedInt(PyTypeObject *type, PyObject *arg)
    {
      jbyte a0;
      jint result;

      if (!parseArg(arg, "B", &a0))
      {
        OBJ_CALL(result = ::java::lang::Byte::toUnsignedInt(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "toUnsignedInt", arg);
      return NULL;
    }

    static PyObject *t_Byte_toUnsignedLong(PyTypeObject *type, PyObject *arg)
    {
      jbyte a0;
      jlong result;

      if (!parseArg(arg, "B", &a0))
      {
        OBJ_CALL(result = ::java::lang::Byte::toUnsignedLong(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "toUnsignedLong", arg);
      return NULL;
    }

    static PyObject *t_Byte_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Byte result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Byte::valueOf(a0));
            return t_Byte::wrap_Object(result);
          }
        }
        {
          jbyte a0;
          Byte result((jobject) NULL);

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(result = ::java::lang::Byte::valueOf(a0));
            return t_Byte::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Byte result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Byte::valueOf(a0, a1));
            return t_Byte::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktreeords {

          ::java::lang::Class *OrdsBlockTreeTermsWriter::class$ = NULL;
          jmethodID *OrdsBlockTreeTermsWriter::mids$ = NULL;
          bool OrdsBlockTreeTermsWriter::live$ = false;
          jint OrdsBlockTreeTermsWriter::DEFAULT_MAX_BLOCK_SIZE = (jint) 0;
          jint OrdsBlockTreeTermsWriter::DEFAULT_MIN_BLOCK_SIZE = (jint) 0;
          jint OrdsBlockTreeTermsWriter::VERSION_CURRENT = (jint) 0;
          jint OrdsBlockTreeTermsWriter::VERSION_START = (jint) 0;

          jclass OrdsBlockTreeTermsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6610f1188867ac3d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;Lorg/apache/lucene/codecs/PostingsWriterBase;II)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_write_a02f5612a398fd43] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/index/Fields;Lorg/apache/lucene/codecs/NormsProducer;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_BLOCK_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_BLOCK_SIZE");
              DEFAULT_MIN_BLOCK_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_BLOCK_SIZE");
              VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
              VERSION_START = env->getStaticIntField(cls, "VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OrdsBlockTreeTermsWriter::OrdsBlockTreeTermsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0, const ::org::apache::lucene::codecs::PostingsWriterBase & a1, jint a2, jint a3) : ::org::apache::lucene::codecs::FieldsConsumer(env->newObject(initializeClass, &mids$, mid_init$_6610f1188867ac3d, a0.this$, a1.this$, a2, a3)) {}

          void OrdsBlockTreeTermsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void OrdsBlockTreeTermsWriter::write(const ::org::apache::lucene::index::Fields & a0, const ::org::apache::lucene::codecs::NormsProducer & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_a02f5612a398fd43], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktreeords {
          static PyObject *t_OrdsBlockTreeTermsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OrdsBlockTreeTermsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OrdsBlockTreeTermsWriter_init_(t_OrdsBlockTreeTermsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OrdsBlockTreeTermsWriter_close(t_OrdsBlockTreeTermsWriter *self, PyObject *args);
          static PyObject *t_OrdsBlockTreeTermsWriter_write(t_OrdsBlockTreeTermsWriter *self, PyObject *args);

          static PyMethodDef t_OrdsBlockTreeTermsWriter__methods_[] = {
            DECLARE_METHOD(t_OrdsBlockTreeTermsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdsBlockTreeTermsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdsBlockTreeTermsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_OrdsBlockTreeTermsWriter, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(OrdsBlockTreeTermsWriter)[] = {
            { Py_tp_methods, t_OrdsBlockTreeTermsWriter__methods_ },
            { Py_tp_init, (void *) t_OrdsBlockTreeTermsWriter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(OrdsBlockTreeTermsWriter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::FieldsConsumer),
            NULL
          };

          DEFINE_TYPE(OrdsBlockTreeTermsWriter, t_OrdsBlockTreeTermsWriter, OrdsBlockTreeTermsWriter);

          void t_OrdsBlockTreeTermsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(OrdsBlockTreeTermsWriter), &PY_TYPE_DEF(OrdsBlockTreeTermsWriter), module, "OrdsBlockTreeTermsWriter", 0);
          }

          void t_OrdsBlockTreeTermsWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdsBlockTreeTermsWriter), "class_", make_descriptor(OrdsBlockTreeTermsWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdsBlockTreeTermsWriter), "wrapfn_", make_descriptor(t_OrdsBlockTreeTermsWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdsBlockTreeTermsWriter), "boxfn_", make_descriptor(boxObject));
            env->getClass(OrdsBlockTreeTermsWriter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdsBlockTreeTermsWriter), "DEFAULT_MAX_BLOCK_SIZE", make_descriptor(OrdsBlockTreeTermsWriter::DEFAULT_MAX_BLOCK_SIZE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdsBlockTreeTermsWriter), "DEFAULT_MIN_BLOCK_SIZE", make_descriptor(OrdsBlockTreeTermsWriter::DEFAULT_MIN_BLOCK_SIZE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdsBlockTreeTermsWriter), "VERSION_CURRENT", make_descriptor(OrdsBlockTreeTermsWriter::VERSION_CURRENT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdsBlockTreeTermsWriter), "VERSION_START", make_descriptor(OrdsBlockTreeTermsWriter::VERSION_START));
          }

          static PyObject *t_OrdsBlockTreeTermsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OrdsBlockTreeTermsWriter::initializeClass, 1)))
              return NULL;
            return t_OrdsBlockTreeTermsWriter::wrap_Object(OrdsBlockTreeTermsWriter(((t_OrdsBlockTreeTermsWriter *) arg)->object.this$));
          }
          static PyObject *t_OrdsBlockTreeTermsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OrdsBlockTreeTermsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OrdsBlockTreeTermsWriter_init_(t_OrdsBlockTreeTermsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsWriterBase a1((jobject) NULL);
            jint a2;
            jint a3;
            OrdsBlockTreeTermsWriter object((jobject) NULL);

            if (!parseArgs(args, "kkII", ::org::apache::lucene::index::SegmentWriteState::initializeClass, ::org::apache::lucene::codecs::PostingsWriterBase::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = OrdsBlockTreeTermsWriter(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OrdsBlockTreeTermsWriter_close(t_OrdsBlockTreeTermsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(OrdsBlockTreeTermsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_OrdsBlockTreeTermsWriter_write(t_OrdsBlockTreeTermsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::Fields a0((jobject) NULL);
            ::org::apache::lucene::codecs::NormsProducer a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::Fields::initializeClass, ::org::apache::lucene::codecs::NormsProducer::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(OrdsBlockTreeTermsWriter), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKAnalyzer::class$ = NULL;
          jmethodID *CJKAnalyzer::mids$ = NULL;
          bool CJKAnalyzer::live$ = false;
          ::java::lang::String *CJKAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass CJKAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKAnalyzer::CJKAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          CJKAnalyzer::CJKAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet CJKAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKAnalyzer_init_(t_CJKAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_CJKAnalyzer_get__defaultStopSet(t_CJKAnalyzer *self, void *data);
          static PyGetSetDef t_CJKAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_CJKAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CJKAnalyzer__methods_[] = {
            DECLARE_METHOD(t_CJKAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CJKAnalyzer)[] = {
            { Py_tp_methods, t_CJKAnalyzer__methods_ },
            { Py_tp_init, (void *) t_CJKAnalyzer_init_ },
            { Py_tp_getset, t_CJKAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CJKAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(CJKAnalyzer, t_CJKAnalyzer, CJKAnalyzer);

          void t_CJKAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKAnalyzer), &PY_TYPE_DEF(CJKAnalyzer), module, "CJKAnalyzer", 0);
          }

          void t_CJKAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKAnalyzer), "class_", make_descriptor(CJKAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKAnalyzer), "wrapfn_", make_descriptor(t_CJKAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(CJKAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*CJKAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_CJKAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKAnalyzer::initializeClass, 1)))
              return NULL;
            return t_CJKAnalyzer::wrap_Object(CJKAnalyzer(((t_CJKAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_CJKAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKAnalyzer_init_(t_CJKAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                CJKAnalyzer object((jobject) NULL);

                INT_CALL(object = CJKAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                CJKAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CJKAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::cjk::CJKAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_CJKAnalyzer_get__defaultStopSet(t_CJKAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianMinimalStemFilter::class$ = NULL;
          jmethodID *GalicianMinimalStemFilter::mids$ = NULL;
          bool GalicianMinimalStemFilter::live$ = false;

          jclass GalicianMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianMinimalStemFilter::GalicianMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean GalicianMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianMinimalStemFilter_init_(t_GalicianMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianMinimalStemFilter_incrementToken(t_GalicianMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_GalicianMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_GalicianMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GalicianMinimalStemFilter)[] = {
            { Py_tp_methods, t_GalicianMinimalStemFilter__methods_ },
            { Py_tp_init, (void *) t_GalicianMinimalStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GalicianMinimalStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(GalicianMinimalStemFilter, t_GalicianMinimalStemFilter, GalicianMinimalStemFilter);

          void t_GalicianMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianMinimalStemFilter), &PY_TYPE_DEF(GalicianMinimalStemFilter), module, "GalicianMinimalStemFilter", 0);
          }

          void t_GalicianMinimalStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianMinimalStemFilter), "class_", make_descriptor(GalicianMinimalStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianMinimalStemFilter), "wrapfn_", make_descriptor(t_GalicianMinimalStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianMinimalStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_GalicianMinimalStemFilter::wrap_Object(GalicianMinimalStemFilter(((t_GalicianMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GalicianMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianMinimalStemFilter_init_(t_GalicianMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GalicianMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GalicianMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianMinimalStemFilter_incrementToken(t_GalicianMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(GalicianMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/CharArrayMap$EntryIterator.h"
#include "java/util/Map$Entry.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *CharArrayMap$EntryIterator::class$ = NULL;
        jmethodID *CharArrayMap$EntryIterator::mids$ = NULL;
        bool CharArrayMap$EntryIterator::live$ = false;

        jclass CharArrayMap$EntryIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/CharArrayMap$EntryIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_currentValue_d6bcd06f3102c4d9] = env->getMethodID(cls, "currentValue", "()Ljava/lang/Object;");
            mids$[mid_hasNext_8454bd5aa23fd11e] = env->getMethodID(cls, "hasNext", "()Z");
            mids$[mid_next_e3cdd83e5947ee54] = env->getMethodID(cls, "next", "()Ljava/util/Map$Entry;");
            mids$[mid_nextKey_e11cf13c9a887534] = env->getMethodID(cls, "nextKey", "()[C");
            mids$[mid_nextKeyString_db9b55ba01e03e4b] = env->getMethodID(cls, "nextKeyString", "()Ljava/lang/String;");
            mids$[mid_remove_f2cc1bce94666404] = env->getMethodID(cls, "remove", "()V");
            mids$[mid_setValue_e5ae0f8c04795fa9] = env->getMethodID(cls, "setValue", "(Ljava/lang/Object;)Ljava/lang/Object;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Object CharArrayMap$EntryIterator::currentValue() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_currentValue_d6bcd06f3102c4d9]));
        }

        jboolean CharArrayMap$EntryIterator::hasNext() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNext_8454bd5aa23fd11e]);
        }

        ::java::util::Map$Entry CharArrayMap$EntryIterator::next() const
        {
          return ::java::util::Map$Entry(env->callObjectMethod(this$, mids$[mid_next_e3cdd83e5947ee54]));
        }

        JArray< jchar > CharArrayMap$EntryIterator::nextKey() const
        {
          return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_nextKey_e11cf13c9a887534]));
        }

        ::java::lang::String CharArrayMap$EntryIterator::nextKeyString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_nextKeyString_db9b55ba01e03e4b]));
        }

        void CharArrayMap$EntryIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_f2cc1bce94666404]);
        }

        ::java::lang::Object CharArrayMap$EntryIterator::setValue(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_setValue_e5ae0f8c04795fa9], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_CharArrayMap$EntryIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharArrayMap$EntryIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharArrayMap$EntryIterator_of_(t_CharArrayMap$EntryIterator *self, PyObject *args);
        static PyObject *t_CharArrayMap$EntryIterator_currentValue(t_CharArrayMap$EntryIterator *self);
        static PyObject *t_CharArrayMap$EntryIterator_hasNext(t_CharArrayMap$EntryIterator *self);
        static PyObject *t_CharArrayMap$EntryIterator_next(t_CharArrayMap$EntryIterator *self);
        static PyObject *t_CharArrayMap$EntryIterator_nextKey(t_CharArrayMap$EntryIterator *self);
        static PyObject *t_CharArrayMap$EntryIterator_nextKeyString(t_CharArrayMap$EntryIterator *self);
        static PyObject *t_CharArrayMap$EntryIterator_remove(t_CharArrayMap$EntryIterator *self);
        static PyObject *t_CharArrayMap$EntryIterator_setValue(t_CharArrayMap$EntryIterator *self, PyObject *arg);
        static int t_CharArrayMap$EntryIterator_set__value(t_CharArrayMap$EntryIterator *self, PyObject *arg, void *data);
        static PyObject *t_CharArrayMap$EntryIterator_get__parameters_(t_CharArrayMap$EntryIterator *self, void *data);
        static PyGetSetDef t_CharArrayMap$EntryIterator__fields_[] = {
          DECLARE_SET_FIELD(t_CharArrayMap$EntryIterator, value),
          DECLARE_GET_FIELD(t_CharArrayMap$EntryIterator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CharArrayMap$EntryIterator__methods_[] = {
          DECLARE_METHOD(t_CharArrayMap$EntryIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharArrayMap$EntryIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharArrayMap$EntryIterator, of_, METH_VARARGS),
          DECLARE_METHOD(t_CharArrayMap$EntryIterator, currentValue, METH_NOARGS),
          DECLARE_METHOD(t_CharArrayMap$EntryIterator, hasNext, METH_NOARGS),
          DECLARE_METHOD(t_CharArrayMap$EntryIterator, next, METH_NOARGS),
          DECLARE_METHOD(t_CharArrayMap$EntryIterator, nextKey, METH_NOARGS),
          DECLARE_METHOD(t_CharArrayMap$EntryIterator, nextKeyString, METH_NOARGS),
          DECLARE_METHOD(t_CharArrayMap$EntryIterator, remove, METH_NOARGS),
          DECLARE_METHOD(t_CharArrayMap$EntryIterator, setValue, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CharArrayMap$EntryIterator)[] = {
          { Py_tp_methods, t_CharArrayMap$EntryIterator__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_CharArrayMap$EntryIterator__fields_ },
          { Py_tp_iter, (void *) PyObject_SelfIter },
          { Py_tp_iternext, (void *) ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::util::t_Map$Entry >) },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CharArrayMap$EntryIterator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CharArrayMap$EntryIterator, t_CharArrayMap$EntryIterator, CharArrayMap$EntryIterator);
        PyObject *t_CharArrayMap$EntryIterator::wrap_Object(const CharArrayMap$EntryIterator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CharArrayMap$EntryIterator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CharArrayMap$EntryIterator *self = (t_CharArrayMap$EntryIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_CharArrayMap$EntryIterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CharArrayMap$EntryIterator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CharArrayMap$EntryIterator *self = (t_CharArrayMap$EntryIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_CharArrayMap$EntryIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(CharArrayMap$EntryIterator), &PY_TYPE_DEF(CharArrayMap$EntryIterator), module, "CharArrayMap$EntryIterator", 0);
        }

        void t_CharArrayMap$EntryIterator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharArrayMap$EntryIterator), "class_", make_descriptor(CharArrayMap$EntryIterator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharArrayMap$EntryIterator), "wrapfn_", make_descriptor(t_CharArrayMap$EntryIterator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharArrayMap$EntryIterator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CharArrayMap$EntryIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CharArrayMap$EntryIterator::initializeClass, 1)))
            return NULL;
          return t_CharArrayMap$EntryIterator::wrap_Object(CharArrayMap$EntryIterator(((t_CharArrayMap$EntryIterator *) arg)->object.this$));
        }
        static PyObject *t_CharArrayMap$EntryIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CharArrayMap$EntryIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CharArrayMap$EntryIterator_of_(t_CharArrayMap$EntryIterator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_CharArrayMap$EntryIterator_currentValue(t_CharArrayMap$EntryIterator *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.currentValue());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_CharArrayMap$EntryIterator_hasNext(t_CharArrayMap$EntryIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNext());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CharArrayMap$EntryIterator_next(t_CharArrayMap$EntryIterator *self)
        {
          ::java::util::Map$Entry result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return ::java::util::t_Map$Entry::wrap_Object(result, ::java::lang::PY_TYPE(Object), self->parameters[0]);
        }

        static PyObject *t_CharArrayMap$EntryIterator_nextKey(t_CharArrayMap$EntryIterator *self)
        {
          JArray< jchar > result((jobject) NULL);
          OBJ_CALL(result = self->object.nextKey());
          return result.wrap();
        }

        static PyObject *t_CharArrayMap$EntryIterator_nextKeyString(t_CharArrayMap$EntryIterator *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.nextKeyString());
          return j2p(result);
        }

        static PyObject *t_CharArrayMap$EntryIterator_remove(t_CharArrayMap$EntryIterator *self)
        {
          OBJ_CALL(self->object.remove());
          Py_RETURN_NONE;
        }

        static PyObject *t_CharArrayMap$EntryIterator_setValue(t_CharArrayMap$EntryIterator *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(result = self->object.setValue(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setValue", arg);
          return NULL;
        }
        static PyObject *t_CharArrayMap$EntryIterator_get__parameters_(t_CharArrayMap$EntryIterator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_CharArrayMap$EntryIterator_set__value(t_CharArrayMap$EntryIterator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object.setValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "value", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/automaton/ByteRunAutomaton.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *CompiledAutomaton::class$ = NULL;
          jmethodID *CompiledAutomaton::mids$ = NULL;
          jfieldID *CompiledAutomaton::fids$ = NULL;
          bool CompiledAutomaton::live$ = false;

          jclass CompiledAutomaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/CompiledAutomaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_06c1b4541f684199] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_init$_7a9846a5677b2fa4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;Ljava/lang/Boolean;Z)V");
              mids$[mid_init$_9b6925fe126f4acd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;Ljava/lang/Boolean;ZIZ)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_floor_fac926e9807743ac] = env->getMethodID(cls, "floor", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRefBuilder;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getTermsEnum_eeaa7baef2944dcc] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_visit_8947aa40e853f84f] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;Lorg/apache/lucene/search/Query;Ljava/lang/String;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_automaton] = env->getFieldID(cls, "automaton", "Lorg/apache/lucene/util/automaton/Automaton;");
              fids$[fid_commonSuffixRef] = env->getFieldID(cls, "commonSuffixRef", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_finite] = env->getFieldID(cls, "finite", "Ljava/lang/Boolean;");
              fids$[fid_runAutomaton] = env->getFieldID(cls, "runAutomaton", "Lorg/apache/lucene/util/automaton/ByteRunAutomaton;");
              fids$[fid_sinkState] = env->getFieldID(cls, "sinkState", "I");
              fids$[fid_term] = env->getFieldID(cls, "term", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_type] = env->getFieldID(cls, "type", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompiledAutomaton::CompiledAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_06c1b4541f684199, a0.this$)) {}

          CompiledAutomaton::CompiledAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::java::lang::Boolean & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7a9846a5677b2fa4, a0.this$, a1.this$, a2)) {}

          CompiledAutomaton::CompiledAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::java::lang::Boolean & a1, jboolean a2, jint a3, jboolean a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9b6925fe126f4acd, a0.this$, a1.this$, a2, a3, a4)) {}

          jboolean CompiledAutomaton::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef CompiledAutomaton::floor(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRefBuilder & a1) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_floor_fac926e9807743ac], a0.this$, a1.this$));
          }

          ::org::apache::lucene::index::TermsEnum CompiledAutomaton::getTermsEnum(const ::org::apache::lucene::index::Terms & a0) const
          {
            return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_getTermsEnum_eeaa7baef2944dcc], a0.this$));
          }

          jint CompiledAutomaton::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          jlong CompiledAutomaton::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          void CompiledAutomaton::visit(const ::org::apache::lucene::search::QueryVisitor & a0, const ::org::apache::lucene::search::Query & a1, const ::java::lang::String & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_8947aa40e853f84f], a0.this$, a1.this$, a2.this$);
          }

          ::org::apache::lucene::util::automaton::Automaton CompiledAutomaton::_get_automaton() const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->getObjectField(this$, fids$[fid_automaton]));
          }

          ::org::apache::lucene::util::BytesRef CompiledAutomaton::_get_commonSuffixRef() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_commonSuffixRef]));
          }

          ::java::lang::Boolean CompiledAutomaton::_get_finite() const
          {
            return ::java::lang::Boolean(env->getObjectField(this$, fids$[fid_finite]));
          }

          ::org::apache::lucene::util::automaton::ByteRunAutomaton CompiledAutomaton::_get_runAutomaton() const
          {
            return ::org::apache::lucene::util::automaton::ByteRunAutomaton(env->getObjectField(this$, fids$[fid_runAutomaton]));
          }

          jint CompiledAutomaton::_get_sinkState() const
          {
            return env->getIntField(this$, fids$[fid_sinkState]);
          }

          ::org::apache::lucene::util::BytesRef CompiledAutomaton::_get_term() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_term]));
          }

          ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE CompiledAutomaton::_get_type() const
          {
            return ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE(env->getObjectField(this$, fids$[fid_type]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_CompiledAutomaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompiledAutomaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompiledAutomaton_init_(t_CompiledAutomaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompiledAutomaton_equals(t_CompiledAutomaton *self, PyObject *args);
          static PyObject *t_CompiledAutomaton_floor(t_CompiledAutomaton *self, PyObject *args);
          static PyObject *t_CompiledAutomaton_getTermsEnum(t_CompiledAutomaton *self, PyObject *arg);
          static PyObject *t_CompiledAutomaton_hashCode(t_CompiledAutomaton *self, PyObject *args);
          static PyObject *t_CompiledAutomaton_ramBytesUsed(t_CompiledAutomaton *self);
          static PyObject *t_CompiledAutomaton_visit(t_CompiledAutomaton *self, PyObject *args);
          static PyObject *t_CompiledAutomaton_get__automaton(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__commonSuffixRef(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__finite(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__runAutomaton(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__sinkState(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__term(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__type(t_CompiledAutomaton *self, void *data);

          static PyGetSetDef t_CompiledAutomaton__fields_[] = {
            DECLARE_GET_FIELD(t_CompiledAutomaton, automaton),
            DECLARE_GET_FIELD(t_CompiledAutomaton, commonSuffixRef),
            DECLARE_GET_FIELD(t_CompiledAutomaton, finite),
            DECLARE_GET_FIELD(t_CompiledAutomaton, runAutomaton),
            DECLARE_GET_FIELD(t_CompiledAutomaton, sinkState),
            DECLARE_GET_FIELD(t_CompiledAutomaton, term),
            DECLARE_GET_FIELD(t_CompiledAutomaton, type),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CompiledAutomaton__methods_[] = {
            DECLARE_METHOD(t_CompiledAutomaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton, equals, METH_VARARGS),
            DECLARE_METHOD(t_CompiledAutomaton, floor, METH_VARARGS),
            DECLARE_METHOD(t_CompiledAutomaton, getTermsEnum, METH_O),
            DECLARE_METHOD(t_CompiledAutomaton, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_CompiledAutomaton, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_CompiledAutomaton, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CompiledAutomaton)[] = {
            { Py_tp_methods, t_CompiledAutomaton__methods_ },
            { Py_tp_init, (void *) t_CompiledAutomaton_init_ },
            { Py_tp_getset, t_CompiledAutomaton__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CompiledAutomaton)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(CompiledAutomaton, t_CompiledAutomaton, CompiledAutomaton);

          void t_CompiledAutomaton::install(PyObject *module)
          {
            installType(&PY_TYPE(CompiledAutomaton), &PY_TYPE_DEF(CompiledAutomaton), module, "CompiledAutomaton", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompiledAutomaton), "AUTOMATON_TYPE", make_descriptor(&PY_TYPE_DEF(CompiledAutomaton$AUTOMATON_TYPE)));
          }

          void t_CompiledAutomaton::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompiledAutomaton), "class_", make_descriptor(CompiledAutomaton::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompiledAutomaton), "wrapfn_", make_descriptor(t_CompiledAutomaton::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompiledAutomaton), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompiledAutomaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompiledAutomaton::initializeClass, 1)))
              return NULL;
            return t_CompiledAutomaton::wrap_Object(CompiledAutomaton(((t_CompiledAutomaton *) arg)->object.this$));
          }
          static PyObject *t_CompiledAutomaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompiledAutomaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompiledAutomaton_init_(t_CompiledAutomaton *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                CompiledAutomaton object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
                {
                  INT_CALL(object = CompiledAutomaton(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::java::lang::Boolean a1((jobject) NULL);
                jboolean a2;
                CompiledAutomaton object((jobject) NULL);

                if (!parseArgs(args, "kOZ", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::java::lang::PY_TYPE(Boolean), &a0, &a1, &a2))
                {
                  INT_CALL(object = CompiledAutomaton(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::java::lang::Boolean a1((jobject) NULL);
                jboolean a2;
                jint a3;
                jboolean a4;
                CompiledAutomaton object((jobject) NULL);

                if (!parseArgs(args, "kOZIZ", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::java::lang::PY_TYPE(Boolean), &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = CompiledAutomaton(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompiledAutomaton_equals(t_CompiledAutomaton *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(CompiledAutomaton), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_CompiledAutomaton_floor(t_CompiledAutomaton *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRefBuilder a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRefBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.floor(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "floor", args);
            return NULL;
          }

          static PyObject *t_CompiledAutomaton_getTermsEnum(t_CompiledAutomaton *self, PyObject *arg)
          {
            ::org::apache::lucene::index::Terms a0((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getTermsEnum(a0));
              return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getTermsEnum", arg);
            return NULL;
          }

          static PyObject *t_CompiledAutomaton_hashCode(t_CompiledAutomaton *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(CompiledAutomaton), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_CompiledAutomaton_ramBytesUsed(t_CompiledAutomaton *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_CompiledAutomaton_visit(t_CompiledAutomaton *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);
            ::org::apache::lucene::search::Query a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);

            if (!parseArgs(args, "kks", ::org::apache::lucene::search::QueryVisitor::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.visit(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "visit", args);
            return NULL;
          }

          static PyObject *t_CompiledAutomaton_get__automaton(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::automaton::Automaton value((jobject) NULL);
            OBJ_CALL(value = self->object._get_automaton());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__commonSuffixRef(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_commonSuffixRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__finite(t_CompiledAutomaton *self, void *data)
          {
            ::java::lang::Boolean value((jobject) NULL);
            OBJ_CALL(value = self->object._get_finite());
            return ::java::lang::t_Boolean::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__runAutomaton(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::automaton::ByteRunAutomaton value((jobject) NULL);
            OBJ_CALL(value = self->object._get_runAutomaton());
            return ::org::apache::lucene::util::automaton::t_ByteRunAutomaton::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__sinkState(t_CompiledAutomaton *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_sinkState());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_CompiledAutomaton_get__term(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__type(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE value((jobject) NULL);
            OBJ_CALL(value = self->object._get_type());
            return ::org::apache::lucene::util::automaton::t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockWriter.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/codecs/uniformsplit/IndexDictionary$Builder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/codecs/uniformsplit/sharedterms/FieldMetadataTermState.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {

            ::java::lang::Class *STBlockWriter::class$ = NULL;
            jmethodID *STBlockWriter::mids$ = NULL;
            bool STBlockWriter::live$ = false;

            jclass STBlockWriter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockWriter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_38d0a74f45854c03] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IndexOutput;IILorg/apache/lucene/codecs/uniformsplit/BlockEncoder;)V");
                mids$[mid_addLine_aa368c320c94943e] = env->getMethodID(cls, "addLine", "(Lorg/apache/lucene/util/BytesRef;Ljava/util/List;Lorg/apache/lucene/codecs/uniformsplit/IndexDictionary$Builder;)V");
                mids$[mid_finishLastBlock_f9451def1ea25bf5] = env->getMethodID(cls, "finishLastBlock", "(Lorg/apache/lucene/codecs/uniformsplit/IndexDictionary$Builder;)V");
                mids$[mid_createBlockLineSerializer_8d7f678ac5857d60] = env->getMethodID(cls, "createBlockLineSerializer", "()Lorg/apache/lucene/codecs/uniformsplit/BlockLine$Serializer;");
                mids$[mid_updateFieldMetadata_9c778c9bce6694df] = env->getMethodID(cls, "updateFieldMetadata", "(J)V");
                mids$[mid_writeBlockLine_fa6b8f0fea2f0a11] = env->getMethodID(cls, "writeBlockLine", "(ZLorg/apache/lucene/codecs/uniformsplit/BlockLine;Lorg/apache/lucene/codecs/uniformsplit/BlockLine;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            STBlockWriter::STBlockWriter(const ::org::apache::lucene::store::IndexOutput & a0, jint a1, jint a2, const ::org::apache::lucene::codecs::uniformsplit::BlockEncoder & a3) : ::org::apache::lucene::codecs::uniformsplit::BlockWriter(env->newObject(initializeClass, &mids$, mid_init$_38d0a74f45854c03, a0.this$, a1, a2, a3.this$)) {}

            void STBlockWriter::addLine(const ::org::apache::lucene::util::BytesRef & a0, const ::java::util::List & a1, const ::org::apache::lucene::codecs::uniformsplit::IndexDictionary$Builder & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_addLine_aa368c320c94943e], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {
            static PyObject *t_STBlockWriter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_STBlockWriter_instance_(PyTypeObject *type, PyObject *arg);
            static int t_STBlockWriter_init_(t_STBlockWriter *self, PyObject *args, PyObject *kwds);
            static PyObject *t_STBlockWriter_addLine(t_STBlockWriter *self, PyObject *args);

            static PyMethodDef t_STBlockWriter__methods_[] = {
              DECLARE_METHOD(t_STBlockWriter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_STBlockWriter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_STBlockWriter, addLine, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(STBlockWriter)[] = {
              { Py_tp_methods, t_STBlockWriter__methods_ },
              { Py_tp_init, (void *) t_STBlockWriter_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(STBlockWriter)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::codecs::uniformsplit::BlockWriter),
              NULL
            };

            DEFINE_TYPE(STBlockWriter, t_STBlockWriter, STBlockWriter);

            void t_STBlockWriter::install(PyObject *module)
            {
              installType(&PY_TYPE(STBlockWriter), &PY_TYPE_DEF(STBlockWriter), module, "STBlockWriter", 0);
            }

            void t_STBlockWriter::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(STBlockWriter), "class_", make_descriptor(STBlockWriter::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STBlockWriter), "wrapfn_", make_descriptor(t_STBlockWriter::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STBlockWriter), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_STBlockWriter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, STBlockWriter::initializeClass, 1)))
                return NULL;
              return t_STBlockWriter::wrap_Object(STBlockWriter(((t_STBlockWriter *) arg)->object.this$));
            }
            static PyObject *t_STBlockWriter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, STBlockWriter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_STBlockWriter_init_(t_STBlockWriter *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);
              jint a1;
              jint a2;
              ::org::apache::lucene::codecs::uniformsplit::BlockEncoder a3((jobject) NULL);
              STBlockWriter object((jobject) NULL);

              if (!parseArgs(args, "kIIk", ::org::apache::lucene::store::IndexOutput::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockEncoder::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = STBlockWriter(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_STBlockWriter_addLine(t_STBlockWriter *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::java::util::List a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::codecs::uniformsplit::IndexDictionary$Builder a2((jobject) NULL);

              if (!parseArgs(args, "kKk", ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::List::initializeClass, ::org::apache::lucene::codecs::uniformsplit::IndexDictionary$Builder::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2))
              {
                OBJ_CALL(self->object.addLine(a0, a1, a2));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addLine", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharFilterFactory.h"
#include "org/apache/lucene/analysis/util/CharFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/io/Reader.h"
#include "java/lang/ClassLoader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharFilterFactory::class$ = NULL;
          jmethodID *CharFilterFactory::mids$ = NULL;
          bool CharFilterFactory::live$ = false;

          jclass CharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_availableCharFilters_7dcf4034c6d1a92a] = env->getStaticMethodID(cls, "availableCharFilters", "()Ljava/util/Set;");
              mids$[mid_create_e71c53e25a234d7d] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Ljava/io/Reader;");
              mids$[mid_findSPIName_1d6fc28577e5ff15] = env->getStaticMethodID(cls, "findSPIName", "(Ljava/lang/Class;)Ljava/lang/String;");
              mids$[mid_forName_645e896d48e8802c] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/lucene/analysis/util/CharFilterFactory;");
              mids$[mid_lookupClass_337d52b895d55b49] = env->getStaticMethodID(cls, "lookupClass", "(Ljava/lang/String;)Ljava/lang/Class;");
              mids$[mid_normalize_e71c53e25a234d7d] = env->getMethodID(cls, "normalize", "(Ljava/io/Reader;)Ljava/io/Reader;");
              mids$[mid_reloadCharFilters_98a876e82795b112] = env->getStaticMethodID(cls, "reloadCharFilters", "(Ljava/lang/ClassLoader;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Set CharFilterFactory::availableCharFilters()
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableCharFilters_7dcf4034c6d1a92a]));
          }

          ::java::io::Reader CharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_create_e71c53e25a234d7d], a0.this$));
          }

          ::java::lang::String CharFilterFactory::findSPIName(const ::java::lang::Class & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_findSPIName_1d6fc28577e5ff15], a0.this$));
          }

          CharFilterFactory CharFilterFactory::forName(const ::java::lang::String & a0, const ::java::util::Map & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return CharFilterFactory(env->callStaticObjectMethod(cls, mids$[mid_forName_645e896d48e8802c], a0.this$, a1.this$));
          }

          ::java::lang::Class CharFilterFactory::lookupClass(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_lookupClass_337d52b895d55b49], a0.this$));
          }

          ::java::io::Reader CharFilterFactory::normalize(const ::java::io::Reader & a0) const
          {
            return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_normalize_e71c53e25a234d7d], a0.this$));
          }

          void CharFilterFactory::reloadCharFilters(const ::java::lang::ClassLoader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reloadCharFilters_98a876e82795b112], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharFilterFactory_availableCharFilters(PyTypeObject *type);
          static PyObject *t_CharFilterFactory_create(t_CharFilterFactory *self, PyObject *arg);
          static PyObject *t_CharFilterFactory_findSPIName(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharFilterFactory_forName(PyTypeObject *type, PyObject *args);
          static PyObject *t_CharFilterFactory_lookupClass(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharFilterFactory_normalize(t_CharFilterFactory *self, PyObject *arg);
          static PyObject *t_CharFilterFactory_reloadCharFilters(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_CharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, availableCharFilters, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, create, METH_O),
            DECLARE_METHOD(t_CharFilterFactory, findSPIName, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, forName, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, lookupClass, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, normalize, METH_O),
            DECLARE_METHOD(t_CharFilterFactory, reloadCharFilters, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CharFilterFactory)[] = {
            { Py_tp_methods, t_CharFilterFactory__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CharFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::AbstractAnalysisFactory),
            NULL
          };

          DEFINE_TYPE(CharFilterFactory, t_CharFilterFactory, CharFilterFactory);

          void t_CharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CharFilterFactory), &PY_TYPE_DEF(CharFilterFactory), module, "CharFilterFactory", 0);
          }

          void t_CharFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharFilterFactory), "class_", make_descriptor(CharFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharFilterFactory), "wrapfn_", make_descriptor(t_CharFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharFilterFactory), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CharFilterFactory::wrap_Object(CharFilterFactory(((t_CharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharFilterFactory_availableCharFilters(PyTypeObject *type)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharFilterFactory::availableCharFilters());
            return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
          }

          static PyObject *t_CharFilterFactory_create(t_CharFilterFactory *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::java::io::Reader result((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::java::io::t_Reader::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "create", arg);
            return NULL;
          }

          static PyObject *t_CharFilterFactory_findSPIName(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::Class a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharFilterFactory::findSPIName(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "findSPIName", arg);
            return NULL;
          }

          static PyObject *t_CharFilterFactory_forName(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::Map a1((jobject) NULL);
            PyTypeObject **p1;
            CharFilterFactory result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharFilterFactory::forName(a0, a1));
              return t_CharFilterFactory::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "forName", args);
            return NULL;
          }

          static PyObject *t_CharFilterFactory_lookupClass(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharFilterFactory::lookupClass(a0));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "lookupClass", arg);
            return NULL;
          }

          static PyObject *t_CharFilterFactory_normalize(t_CharFilterFactory *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::java::io::Reader result((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::java::io::t_Reader::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", arg);
            return NULL;
          }

          static PyObject *t_CharFilterFactory_reloadCharFilters(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::ClassLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::analysis::util::CharFilterFactory::reloadCharFilters(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "reloadCharFilters", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/LongDocValues.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *LongDocValues::class$ = NULL;
            jmethodID *LongDocValues::mids$ = NULL;
            bool LongDocValues::live$ = false;

            jclass LongDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/LongDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31c80a0040f07e19] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_boolVal_a1d30e1ee40c89a2] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_byteVal_4d5233a30cda5878] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_f3ddedc0b6f18620] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_384f078ef4b8f931] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getRangeScorer_a2e4107cfe5ff421] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/index/LeafReaderContext;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
                mids$[mid_getValueFiller_e87ccfe6e71ebd5e] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_1e143afe1894d213] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_0f1d64a641e8af53] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_b15c79acb15c2870] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_464e34d67b70dc89] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_d7593acad64ef635] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_d7593acad64ef635] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");
                mids$[mid_externalToLong_b1e05207ec98e246] = env->getMethodID(cls, "externalToLong", "(Ljava/lang/String;)J");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LongDocValues::LongDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_31c80a0040f07e19, a0.this$)) {}

            jboolean LongDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_a1d30e1ee40c89a2], a0);
            }

            jbyte LongDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_4d5233a30cda5878], a0);
            }

            jdouble LongDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_f3ddedc0b6f18620], a0);
            }

            jfloat LongDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_384f078ef4b8f931], a0);
            }

            ::org::apache::lucene::queries::function::ValueSourceScorer LongDocValues::getRangeScorer(const ::org::apache::lucene::search::Weight & a0, const ::org::apache::lucene::index::LeafReaderContext & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, jboolean a4, jboolean a5) const
            {
              return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_a2e4107cfe5ff421], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller LongDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_e87ccfe6e71ebd5e]));
            }

            jint LongDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_1e143afe1894d213], a0);
            }

            jlong LongDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_0f1d64a641e8af53], a0);
            }

            ::java::lang::Object LongDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_b15c79acb15c2870], a0));
            }

            jshort LongDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_464e34d67b70dc89], a0);
            }

            ::java::lang::String LongDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_d7593acad64ef635], a0));
            }

            ::java::lang::String LongDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_d7593acad64ef635], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_LongDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LongDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LongDocValues_init_(t_LongDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LongDocValues_boolVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_byteVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_doubleVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_floatVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_getRangeScorer(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_getValueFiller(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_intVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_longVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_objectVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_shortVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_strVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_toString(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_get__valueFiller(t_LongDocValues *self, void *data);
            static PyGetSetDef t_LongDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_LongDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LongDocValues__methods_[] = {
              DECLARE_METHOD(t_LongDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LongDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LongDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, getRangeScorer, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(LongDocValues)[] = {
              { Py_tp_methods, t_LongDocValues__methods_ },
              { Py_tp_init, (void *) t_LongDocValues_init_ },
              { Py_tp_getset, t_LongDocValues__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(LongDocValues)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::FunctionValues),
              NULL
            };

            DEFINE_TYPE(LongDocValues, t_LongDocValues, LongDocValues);

            void t_LongDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(LongDocValues), &PY_TYPE_DEF(LongDocValues), module, "LongDocValues", 0);
            }

            void t_LongDocValues::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(LongDocValues), "class_", make_descriptor(LongDocValues::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(LongDocValues), "wrapfn_", make_descriptor(t_LongDocValues::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(LongDocValues), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LongDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LongDocValues::initializeClass, 1)))
                return NULL;
              return t_LongDocValues::wrap_Object(LongDocValues(((t_LongDocValues *) arg)->object.this$));
            }
            static PyObject *t_LongDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LongDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LongDocValues_init_(t_LongDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              LongDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = LongDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LongDocValues_boolVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(LongDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_LongDocValues_byteVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(LongDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_LongDocValues_doubleVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(PY_TYPE(LongDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_LongDocValues_floatVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(PY_TYPE(LongDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_LongDocValues_getRangeScorer(t_LongDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::search::Weight a0((jobject) NULL);
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::java::lang::String a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

              if (!parseArgs(args, "kkssZZ", ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4, a5));
                return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
              }

              return callSuper(PY_TYPE(LongDocValues), (PyObject *) self, "getRangeScorer", args, 2);
            }

            static PyObject *t_LongDocValues_getValueFiller(t_LongDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(PY_TYPE(LongDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_LongDocValues_intVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(LongDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_LongDocValues_longVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(LongDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_LongDocValues_objectVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(PY_TYPE(LongDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_LongDocValues_shortVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(LongDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_LongDocValues_strVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(LongDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_LongDocValues_toString(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(LongDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_LongDocValues_get__valueFiller(t_LongDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorPipeline.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *QueryNodeProcessorPipeline::class$ = NULL;
              jmethodID *QueryNodeProcessorPipeline::mids$ = NULL;
              bool QueryNodeProcessorPipeline::live$ = false;

              jclass QueryNodeProcessorPipeline::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorPipeline");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_ae2484f2d8820041] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_add_616fb2ff5234e2f1] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;)Z");
                  mids$[mid_add_590d2ddfdbda61a1] = env->getMethodID(cls, "add", "(ILorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;)V");
                  mids$[mid_addAll_15d9cc2398c22637] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
                  mids$[mid_addAll_8980636bfaaa897b] = env->getMethodID(cls, "addAll", "(ILjava/util/Collection;)Z");
                  mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
                  mids$[mid_contains_8b72f2dcdde6fd1d] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
                  mids$[mid_containsAll_15d9cc2398c22637] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
                  mids$[mid_get_bc496efafd1d673e] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;");
                  mids$[mid_getQueryConfigHandler_04fdb47806be47b9] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_indexOf_5a4805a36cf611e7] = env->getMethodID(cls, "indexOf", "(Ljava/lang/Object;)I");
                  mids$[mid_isEmpty_8454bd5aa23fd11e] = env->getMethodID(cls, "isEmpty", "()Z");
                  mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
                  mids$[mid_lastIndexOf_5a4805a36cf611e7] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/Object;)I");
                  mids$[mid_listIterator_78bda7a3d01214c3] = env->getMethodID(cls, "listIterator", "()Ljava/util/ListIterator;");
                  mids$[mid_listIterator_8204cc66da390272] = env->getMethodID(cls, "listIterator", "(I)Ljava/util/ListIterator;");
                  mids$[mid_process_9b07be8595532de7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_remove_bc496efafd1d673e] = env->getMethodID(cls, "remove", "(I)Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;");
                  mids$[mid_remove_8b72f2dcdde6fd1d] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
                  mids$[mid_removeAll_15d9cc2398c22637] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
                  mids$[mid_retainAll_15d9cc2398c22637] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
                  mids$[mid_set_0eb89979ac683c24] = env->getMethodID(cls, "set", "(ILorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;)Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;");
                  mids$[mid_setQueryConfigHandler_ae2484f2d8820041] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
                  mids$[mid_subList_e1795bf76fe1346f] = env->getMethodID(cls, "subList", "(II)Ljava/util/List;");
                  mids$[mid_toArray_6becf78ffd87a9bc] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
                  mids$[mid_toArray_609b05756010dc5d] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryNodeProcessorPipeline::QueryNodeProcessorPipeline() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              QueryNodeProcessorPipeline::QueryNodeProcessorPipeline(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ae2484f2d8820041, a0.this$)) {}

              jboolean QueryNodeProcessorPipeline::add(const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_add_616fb2ff5234e2f1], a0.this$);
              }

              void QueryNodeProcessorPipeline::add(jint a0, const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_add_590d2ddfdbda61a1], a0, a1.this$);
              }

              jboolean QueryNodeProcessorPipeline::addAll(const ::java::util::Collection & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_addAll_15d9cc2398c22637], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::addAll(jint a0, const ::java::util::Collection & a1) const
              {
                return env->callBooleanMethod(this$, mids$[mid_addAll_8980636bfaaa897b], a0, a1.this$);
              }

              void QueryNodeProcessorPipeline::clear() const
              {
                env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
              }

              jboolean QueryNodeProcessorPipeline::contains(const ::java::lang::Object & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_contains_8b72f2dcdde6fd1d], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::containsAll(const ::java::util::Collection & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_containsAll_15d9cc2398c22637], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor QueryNodeProcessorPipeline::get(jint a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor(env->callObjectMethod(this$, mids$[mid_get_bc496efafd1d673e], a0));
              }

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler QueryNodeProcessorPipeline::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_04fdb47806be47b9]));
              }

              jint QueryNodeProcessorPipeline::indexOf(const ::java::lang::Object & a0) const
              {
                return env->callIntMethod(this$, mids$[mid_indexOf_5a4805a36cf611e7], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::isEmpty() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isEmpty_8454bd5aa23fd11e]);
              }

              ::java::util::Iterator QueryNodeProcessorPipeline::iterator() const
              {
                return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
              }

              jint QueryNodeProcessorPipeline::lastIndexOf(const ::java::lang::Object & a0) const
              {
                return env->callIntMethod(this$, mids$[mid_lastIndexOf_5a4805a36cf611e7], a0.this$);
              }

              ::java::util::ListIterator QueryNodeProcessorPipeline::listIterator() const
              {
                return ::java::util::ListIterator(env->callObjectMethod(this$, mids$[mid_listIterator_78bda7a3d01214c3]));
              }

              ::java::util::ListIterator QueryNodeProcessorPipeline::listIterator(jint a0) const
              {
                return ::java::util::ListIterator(env->callObjectMethod(this$, mids$[mid_listIterator_8204cc66da390272], a0));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeProcessorPipeline::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_9b07be8595532de7], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor QueryNodeProcessorPipeline::remove(jint a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor(env->callObjectMethod(this$, mids$[mid_remove_bc496efafd1d673e], a0));
              }

              jboolean QueryNodeProcessorPipeline::remove(const ::java::lang::Object & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_remove_8b72f2dcdde6fd1d], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::removeAll(const ::java::util::Collection & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_removeAll_15d9cc2398c22637], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::retainAll(const ::java::util::Collection & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_retainAll_15d9cc2398c22637], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor QueryNodeProcessorPipeline::set(jint a0, const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a1) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor(env->callObjectMethod(this$, mids$[mid_set_0eb89979ac683c24], a0, a1.this$));
              }

              void QueryNodeProcessorPipeline::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_ae2484f2d8820041], a0.this$);
              }

              jint QueryNodeProcessorPipeline::size() const
              {
                return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
              }

              ::java::util::List QueryNodeProcessorPipeline::subList(jint a0, jint a1) const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_subList_e1795bf76fe1346f], a0, a1));
              }

              JArray< ::java::lang::Object > QueryNodeProcessorPipeline::toArray() const
              {
                return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_6becf78ffd87a9bc]));
              }

              JArray< ::java::lang::Object > QueryNodeProcessorPipeline::toArray(const JArray< ::java::lang::Object > & a0) const
              {
                return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_609b05756010dc5d], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_QueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryNodeProcessorPipeline_init_(t_QueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryNodeProcessorPipeline_add(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_addAll(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_clear(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_contains(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_containsAll(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_get(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_getQueryConfigHandler(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_indexOf(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_isEmpty(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_iterator(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_lastIndexOf(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_listIterator(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_process(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_remove(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_removeAll(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_retainAll(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_set(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_setQueryConfigHandler(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_size(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_subList(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_toArray(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_get__empty(t_QueryNodeProcessorPipeline *self, void *data);
              static PyObject *t_QueryNodeProcessorPipeline_get__queryConfigHandler(t_QueryNodeProcessorPipeline *self, void *data);
              static int t_QueryNodeProcessorPipeline_set__queryConfigHandler(t_QueryNodeProcessorPipeline *self, PyObject *arg, void *data);
              static PyGetSetDef t_QueryNodeProcessorPipeline__fields_[] = {
                DECLARE_GET_FIELD(t_QueryNodeProcessorPipeline, empty),
                DECLARE_GETSET_FIELD(t_QueryNodeProcessorPipeline, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNodeProcessorPipeline__methods_[] = {
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, add, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, addAll, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, clear, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, contains, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, containsAll, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, get, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, indexOf, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, isEmpty, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, iterator, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, lastIndexOf, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, listIterator, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, process, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, remove, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, removeAll, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, retainAll, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, set, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, setQueryConfigHandler, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, size, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, subList, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, toArray, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(QueryNodeProcessorPipeline)[] = {
                { Py_tp_methods, t_QueryNodeProcessorPipeline__methods_ },
                { Py_tp_init, (void *) t_QueryNodeProcessorPipeline_init_ },
                { Py_tp_getset, t_QueryNodeProcessorPipeline__fields_ },
                { Py_tp_iter, (void *) ((PyObject *(*)(t_QueryNodeProcessorPipeline *)) get_iterator< t_QueryNodeProcessorPipeline >) },
                { Py_tp_iternext, (void *) 0 },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(QueryNodeProcessorPipeline)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(QueryNodeProcessorPipeline, t_QueryNodeProcessorPipeline, QueryNodeProcessorPipeline);

              void t_QueryNodeProcessorPipeline::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeProcessorPipeline), &PY_TYPE_DEF(QueryNodeProcessorPipeline), module, "QueryNodeProcessorPipeline", 0);
              }

              void t_QueryNodeProcessorPipeline::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeProcessorPipeline), "class_", make_descriptor(QueryNodeProcessorPipeline::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeProcessorPipeline), "wrapfn_", make_descriptor(t_QueryNodeProcessorPipeline::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeProcessorPipeline), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeProcessorPipeline::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeProcessorPipeline::wrap_Object(QueryNodeProcessorPipeline(((t_QueryNodeProcessorPipeline *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeProcessorPipeline::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryNodeProcessorPipeline_init_(t_QueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    QueryNodeProcessorPipeline object((jobject) NULL);

                    INT_CALL(object = QueryNodeProcessorPipeline());
                    self->object = object;
                    break;
                  }
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                    QueryNodeProcessorPipeline object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                    {
                      INT_CALL(object = QueryNodeProcessorPipeline(a0));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_QueryNodeProcessorPipeline_add(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a0((jobject) NULL);
                    jboolean result;

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &a0))
                    {
                      OBJ_CALL(result = self->object.add(a0));
                      Py_RETURN_BOOL(result);
                    }
                  }
                  break;
                 case 2:
                  {
                    jint a0;
                    ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a1((jobject) NULL);

                    if (!parseArgs(args, "Ik", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &a0, &a1))
                    {
                      OBJ_CALL(self->object.add(a0, a1));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "add", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_addAll(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::java::util::Collection a0((jobject) NULL);
                    PyTypeObject **p0;
                    jboolean result;

                    if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                    {
                      OBJ_CALL(result = self->object.addAll(a0));
                      Py_RETURN_BOOL(result);
                    }
                  }
                  break;
                 case 2:
                  {
                    jint a0;
                    ::java::util::Collection a1((jobject) NULL);
                    PyTypeObject **p1;
                    jboolean result;

                    if (!parseArgs(args, "IK", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
                    {
                      OBJ_CALL(result = self->object.addAll(a0, a1));
                      Py_RETURN_BOOL(result);
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "addAll", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_clear(t_QueryNodeProcessorPipeline *self)
              {
                OBJ_CALL(self->object.clear());
                Py_RETURN_NONE;
              }

              static PyObject *t_QueryNodeProcessorPipeline_contains(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArg(arg, "o", &a0))
                {
                  OBJ_CALL(result = self->object.contains(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "contains", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_containsAll(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.containsAll(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "containsAll", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_get(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                jint a0;
                ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "get", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_getQueryConfigHandler(t_QueryNodeProcessorPipeline *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_QueryNodeProcessorPipeline_indexOf(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::lang::Object a0((jobject) NULL);
                jint result;

                if (!parseArg(arg, "o", &a0))
                {
                  OBJ_CALL(result = self->object.indexOf(a0));
                  return PyLong_FromLong((long) result);
                }

                PyErr_SetArgsError((PyObject *) self, "indexOf", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_isEmpty(t_QueryNodeProcessorPipeline *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isEmpty());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_QueryNodeProcessorPipeline_iterator(t_QueryNodeProcessorPipeline *self)
              {
                ::java::util::Iterator result((jobject) NULL);
                OBJ_CALL(result = self->object.iterator());
                return ::java::util::t_Iterator::wrap_Object(result, ::org::apache::lucene::queryparser::flexible::core::processors::PY_TYPE(QueryNodeProcessor));
              }

              static PyObject *t_QueryNodeProcessorPipeline_lastIndexOf(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::lang::Object a0((jobject) NULL);
                jint result;

                if (!parseArg(arg, "o", &a0))
                {
                  OBJ_CALL(result = self->object.lastIndexOf(a0));
                  return PyLong_FromLong((long) result);
                }

                PyErr_SetArgsError((PyObject *) self, "lastIndexOf", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_listIterator(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    ::java::util::ListIterator result((jobject) NULL);
                    OBJ_CALL(result = self->object.listIterator());
                    return ::java::util::t_ListIterator::wrap_Object(result, ::org::apache::lucene::queryparser::flexible::core::processors::PY_TYPE(QueryNodeProcessor));
                  }
                  break;
                 case 1:
                  {
                    jint a0;
                    ::java::util::ListIterator result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      OBJ_CALL(result = self->object.listIterator(a0));
                      return ::java::util::t_ListIterator::wrap_Object(result, ::org::apache::lucene::queryparser::flexible::core::processors::PY_TYPE(QueryNodeProcessor));
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "listIterator", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_process(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_remove(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    jint a0;
                    ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      OBJ_CALL(result = self->object.remove(a0));
                      return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(result);
                    }
                  }
                  {
                    ::java::lang::Object a0((jobject) NULL);
                    jboolean result;

                    if (!parseArgs(args, "o", &a0))
                    {
                      OBJ_CALL(result = self->object.remove(a0));
                      Py_RETURN_BOOL(result);
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "remove", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_removeAll(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.removeAll(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "removeAll", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_retainAll(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.retainAll(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "retainAll", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_set(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                jint a0;
                ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor result((jobject) NULL);

                if (!parseArgs(args, "Ik", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.set(a0, a1));
                  return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "set", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_setQueryConfigHandler(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_size(t_QueryNodeProcessorPipeline *self)
              {
                jint result;
                OBJ_CALL(result = self->object.size());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_QueryNodeProcessorPipeline_subList(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                jint a0;
                jint a1;
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.subList(a0, a1));
                  return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::queryparser::flexible::core::processors::PY_TYPE(QueryNodeProcessor));
                }

                PyErr_SetArgsError((PyObject *) self, "subList", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_toArray(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    JArray< ::java::lang::Object > result((jobject) NULL);
                    OBJ_CALL(result = self->object.toArray());
                    return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                  }
                  break;
                 case 1:
                  {
                    JArray< ::java::lang::Object > a0((jobject) NULL);
                    JArray< ::java::lang::Object > result((jobject) NULL);

                    if (!parseArgs(args, "[o", &a0))
                    {
                      OBJ_CALL(result = self->object.toArray(a0));
                      return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "toArray", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_get__empty(t_QueryNodeProcessorPipeline *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isEmpty());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_QueryNodeProcessorPipeline_get__queryConfigHandler(t_QueryNodeProcessorPipeline *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_QueryNodeProcessorPipeline_set__queryConfigHandler(t_QueryNodeProcessorPipeline *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Arrays.h"
#include "java/util/function/DoubleBinaryOperator.h"
#include "java/util/Comparator.h"
#include "java/lang/Comparable.h"
#include "java/util/function/BinaryOperator.h"
#include "java/lang/Class.h"
#include "java/util/function/IntToDoubleFunction.h"
#include "java/util/function/IntToLongFunction.h"
#include "java/util/Spliterator$OfLong.h"
#include "java/util/function/LongBinaryOperator.h"
#include "java/util/Spliterator$OfInt.h"
#include "java/util/Spliterator.h"
#include "java/lang/String.h"
#include "java/util/function/IntFunction.h"
#include "java/util/function/IntUnaryOperator.h"
#include "java/util/List.h"
#include "java/util/function/IntBinaryOperator.h"
#include "java/util/Spliterator$OfDouble.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Arrays::class$ = NULL;
    jmethodID *Arrays::mids$ = NULL;
    bool Arrays::live$ = false;

    jclass Arrays::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Arrays");

        mids$ = new jmethodID[max_mid];
        mids$[mid_asList_0d1dcd70f7b07e48] = env->getStaticMethodID(cls, "asList", "([Ljava/lang/Object;)Ljava/util/List;");
        mids$[mid_binarySearch_90d6cd4636c06d5e] = env->getStaticMethodID(cls, "binarySearch", "([BB)I");
        mids$[mid_binarySearch_cdeaee5df7f0bc5f] = env->getStaticMethodID(cls, "binarySearch", "([CC)I");
        mids$[mid_binarySearch_f46c949aba2292ce] = env->getStaticMethodID(cls, "binarySearch", "([DD)I");
        mids$[mid_binarySearch_6f94e91df3885a5f] = env->getStaticMethodID(cls, "binarySearch", "([FF)I");
        mids$[mid_binarySearch_f44f708380c30a86] = env->getStaticMethodID(cls, "binarySearch", "([II)I");
        mids$[mid_binarySearch_076f94f5b6020264] = env->getStaticMethodID(cls, "binarySearch", "([Ljava/lang/Object;Ljava/lang/Object;)I");
        mids$[mid_binarySearch_09d3b95d429cf15a] = env->getStaticMethodID(cls, "binarySearch", "([JJ)I");
        mids$[mid_binarySearch_1059cfbba5ff4204] = env->getStaticMethodID(cls, "binarySearch", "([SS)I");
        mids$[mid_binarySearch_33a026fae3c703c5] = env->getStaticMethodID(cls, "binarySearch", "([Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Comparator;)I");
        mids$[mid_binarySearch_0bfe30034b35c12c] = env->getStaticMethodID(cls, "binarySearch", "([BIIB)I");
        mids$[mid_binarySearch_1ca24311f9e246c6] = env->getStaticMethodID(cls, "binarySearch", "([CIIC)I");
        mids$[mid_binarySearch_6cf57647131f60b3] = env->getStaticMethodID(cls, "binarySearch", "([DIID)I");
        mids$[mid_binarySearch_9f19acf63eea81de] = env->getStaticMethodID(cls, "binarySearch", "([FIIF)I");
        mids$[mid_binarySearch_9d7610067d360ceb] = env->getStaticMethodID(cls, "binarySearch", "([IIII)I");
        mids$[mid_binarySearch_9a64ecd54a61726d] = env->getStaticMethodID(cls, "binarySearch", "([Ljava/lang/Object;IILjava/lang/Object;)I");
        mids$[mid_binarySearch_ef4424920bc20119] = env->getStaticMethodID(cls, "binarySearch", "([JIIJ)I");
        mids$[mid_binarySearch_3a4cf86e3c27d3c1] = env->getStaticMethodID(cls, "binarySearch", "([SIIS)I");
        mids$[mid_binarySearch_44a45200f5027f60] = env->getStaticMethodID(cls, "binarySearch", "([Ljava/lang/Object;IILjava/lang/Object;Ljava/util/Comparator;)I");
        mids$[mid_copyOf_478cfa823c780485] = env->getStaticMethodID(cls, "copyOf", "([BI)[B");
        mids$[mid_copyOf_03b7414ad135d405] = env->getStaticMethodID(cls, "copyOf", "([CI)[C");
        mids$[mid_copyOf_e3e5bf986725ed31] = env->getStaticMethodID(cls, "copyOf", "([DI)[D");
        mids$[mid_copyOf_bb41b4b6c049f550] = env->getStaticMethodID(cls, "copyOf", "([FI)[F");
        mids$[mid_copyOf_5d6e0b423e11726d] = env->getStaticMethodID(cls, "copyOf", "([II)[I");
        mids$[mid_copyOf_278093e726fd2826] = env->getStaticMethodID(cls, "copyOf", "([JI)[J");
        mids$[mid_copyOf_19c42e0f45b1d30d] = env->getStaticMethodID(cls, "copyOf", "([Ljava/lang/Object;I)[Ljava/lang/Object;");
        mids$[mid_copyOf_918425fa1c7f2801] = env->getStaticMethodID(cls, "copyOf", "([SI)[S");
        mids$[mid_copyOf_094f6372938169dc] = env->getStaticMethodID(cls, "copyOf", "([ZI)[Z");
        mids$[mid_copyOf_1c345c121eeb3b56] = env->getStaticMethodID(cls, "copyOf", "([Ljava/lang/Object;ILjava/lang/Class;)[Ljava/lang/Object;");
        mids$[mid_copyOfRange_33260d5dc8f14bd0] = env->getStaticMethodID(cls, "copyOfRange", "([BII)[B");
        mids$[mid_copyOfRange_ca570db90ff6e0f1] = env->getStaticMethodID(cls, "copyOfRange", "([CII)[C");
        mids$[mid_copyOfRange_6b2f32f5ab793d0c] = env->getStaticMethodID(cls, "copyOfRange", "([DII)[D");
        mids$[mid_copyOfRange_0d04fdadd79a97ce] = env->getStaticMethodID(cls, "copyOfRange", "([FII)[F");
        mids$[mid_copyOfRange_af5b45ff63d82992] = env->getStaticMethodID(cls, "copyOfRange", "([III)[I");
        mids$[mid_copyOfRange_ba7d14c0962577c6] = env->getStaticMethodID(cls, "copyOfRange", "([JII)[J");
        mids$[mid_copyOfRange_244d7a3a846688e6] = env->getStaticMethodID(cls, "copyOfRange", "([Ljava/lang/Object;II)[Ljava/lang/Object;");
        mids$[mid_copyOfRange_a5236f77979b84ce] = env->getStaticMethodID(cls, "copyOfRange", "([SII)[S");
        mids$[mid_copyOfRange_57f63fbc42a23c9a] = env->getStaticMethodID(cls, "copyOfRange", "([ZII)[Z");
        mids$[mid_copyOfRange_3adef14989b355be] = env->getStaticMethodID(cls, "copyOfRange", "([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;");
        mids$[mid_deepEquals_b612ec45556826e0] = env->getStaticMethodID(cls, "deepEquals", "([Ljava/lang/Object;[Ljava/lang/Object;)Z");
        mids$[mid_deepHashCode_11ba1d1a829f1dd5] = env->getStaticMethodID(cls, "deepHashCode", "([Ljava/lang/Object;)I");
        mids$[mid_deepToString_769987d5b132ba3d] = env->getStaticMethodID(cls, "deepToString", "([Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_equals_ce3112cb35333a26] = env->getStaticMethodID(cls, "equals", "([B[B)Z");
        mids$[mid_equals_1ee327a84336ebdb] = env->getStaticMethodID(cls, "equals", "([C[C)Z");
        mids$[mid_equals_16540669d79f8e1b] = env->getStaticMethodID(cls, "equals", "([D[D)Z");
        mids$[mid_equals_1d909350e9af0dad] = env->getStaticMethodID(cls, "equals", "([F[F)Z");
        mids$[mid_equals_c71a22c5997b765f] = env->getStaticMethodID(cls, "equals", "([I[I)Z");
        mids$[mid_equals_aa7b365f33a11d8e] = env->getStaticMethodID(cls, "equals", "([J[J)Z");
        mids$[mid_equals_b612ec45556826e0] = env->getStaticMethodID(cls, "equals", "([Ljava/lang/Object;[Ljava/lang/Object;)Z");
        mids$[mid_equals_3e9cffdf740a6d39] = env->getStaticMethodID(cls, "equals", "([S[S)Z");
        mids$[mid_equals_589de1c3283e825f] = env->getStaticMethodID(cls, "equals", "([Z[Z)Z");
        mids$[mid_fill_e7360e0dc16247fd] = env->getStaticMethodID(cls, "fill", "([ZZ)V");
        mids$[mid_fill_46963483e78758c4] = env->getStaticMethodID(cls, "fill", "([BB)V");
        mids$[mid_fill_3a42039882649674] = env->getStaticMethodID(cls, "fill", "([CC)V");
        mids$[mid_fill_ec2a6dadbe25ef13] = env->getStaticMethodID(cls, "fill", "([DD)V");
        mids$[mid_fill_317038f7dae85a54] = env->getStaticMethodID(cls, "fill", "([FF)V");
        mids$[mid_fill_b15462fe6b719dc3] = env->getStaticMethodID(cls, "fill", "([II)V");
        mids$[mid_fill_cd5c30946ff045d6] = env->getStaticMethodID(cls, "fill", "([Ljava/lang/Object;Ljava/lang/Object;)V");
        mids$[mid_fill_6b9d54909d29b341] = env->getStaticMethodID(cls, "fill", "([JJ)V");
        mids$[mid_fill_9111e74f8caf6bd8] = env->getStaticMethodID(cls, "fill", "([SS)V");
        mids$[mid_fill_45d686c7d1def9d3] = env->getStaticMethodID(cls, "fill", "([BIIB)V");
        mids$[mid_fill_5bfc2b23269a5af2] = env->getStaticMethodID(cls, "fill", "([CIIC)V");
        mids$[mid_fill_dfe1eda20ca191c7] = env->getStaticMethodID(cls, "fill", "([FIIF)V");
        mids$[mid_fill_506dafa9f041290c] = env->getStaticMethodID(cls, "fill", "([IIII)V");
        mids$[mid_fill_b4b053a761fbec22] = env->getStaticMethodID(cls, "fill", "([ZIIZ)V");
        mids$[mid_fill_f5d8fb4895840d8c] = env->getStaticMethodID(cls, "fill", "([DIID)V");
        mids$[mid_fill_f601c4902e7fad30] = env->getStaticMethodID(cls, "fill", "([JIIJ)V");
        mids$[mid_fill_f67a7534f6f0f6d0] = env->getStaticMethodID(cls, "fill", "([Ljava/lang/Object;IILjava/lang/Object;)V");
        mids$[mid_fill_b132329771b4e20d] = env->getStaticMethodID(cls, "fill", "([SIIS)V");
        mids$[mid_hashCode_bc39a112ba52f98e] = env->getStaticMethodID(cls, "hashCode", "([B)I");
        mids$[mid_hashCode_946cc819d92a7347] = env->getStaticMethodID(cls, "hashCode", "([C)I");
        mids$[mid_hashCode_bb668a876ff13ea0] = env->getStaticMethodID(cls, "hashCode", "([D)I");
        mids$[mid_hashCode_5119d9d9e0a9c69f] = env->getStaticMethodID(cls, "hashCode", "([F)I");
        mids$[mid_hashCode_b1d2da90a0b4944e] = env->getStaticMethodID(cls, "hashCode", "([I)I");
        mids$[mid_hashCode_9bdbb9e936dd10c2] = env->getStaticMethodID(cls, "hashCode", "([J)I");
        mids$[mid_hashCode_11ba1d1a829f1dd5] = env->getStaticMethodID(cls, "hashCode", "([Ljava/lang/Object;)I");
        mids$[mid_hashCode_4dec2479c34dbbb2] = env->getStaticMethodID(cls, "hashCode", "([S)I");
        mids$[mid_hashCode_46abd8a4229eb8ff] = env->getStaticMethodID(cls, "hashCode", "([Z)I");
        mids$[mid_parallelPrefix_d3c81f15012216ce] = env->getStaticMethodID(cls, "parallelPrefix", "([Ljava/lang/Object;Ljava/util/function/BinaryOperator;)V");
        mids$[mid_parallelPrefix_113b63e5820710e8] = env->getStaticMethodID(cls, "parallelPrefix", "([DLjava/util/function/DoubleBinaryOperator;)V");
        mids$[mid_parallelPrefix_cddc22a1993ebbad] = env->getStaticMethodID(cls, "parallelPrefix", "([ILjava/util/function/IntBinaryOperator;)V");
        mids$[mid_parallelPrefix_c2a5953092a5e694] = env->getStaticMethodID(cls, "parallelPrefix", "([JLjava/util/function/LongBinaryOperator;)V");
        mids$[mid_parallelPrefix_978f8710bc21971c] = env->getStaticMethodID(cls, "parallelPrefix", "([Ljava/lang/Object;IILjava/util/function/BinaryOperator;)V");
        mids$[mid_parallelPrefix_0b466df92709ec50] = env->getStaticMethodID(cls, "parallelPrefix", "([DIILjava/util/function/DoubleBinaryOperator;)V");
        mids$[mid_parallelPrefix_07c33c5822c4ad0b] = env->getStaticMethodID(cls, "parallelPrefix", "([IIILjava/util/function/IntBinaryOperator;)V");
        mids$[mid_parallelPrefix_efa40d5fb233f42f] = env->getStaticMethodID(cls, "parallelPrefix", "([JIILjava/util/function/LongBinaryOperator;)V");
        mids$[mid_parallelSetAll_61c092838dd7ba7c] = env->getStaticMethodID(cls, "parallelSetAll", "([Ljava/lang/Object;Ljava/util/function/IntFunction;)V");
        mids$[mid_parallelSetAll_4e7f845c107bd69a] = env->getStaticMethodID(cls, "parallelSetAll", "([DLjava/util/function/IntToDoubleFunction;)V");
        mids$[mid_parallelSetAll_f63b4a12f5cf300e] = env->getStaticMethodID(cls, "parallelSetAll", "([ILjava/util/function/IntUnaryOperator;)V");
        mids$[mid_parallelSetAll_d9db2f050cf0de6e] = env->getStaticMethodID(cls, "parallelSetAll", "([JLjava/util/function/IntToLongFunction;)V");
        mids$[mid_parallelSort_9ffdf271836656c4] = env->getStaticMethodID(cls, "parallelSort", "([B)V");
        mids$[mid_parallelSort_82dffe1ba55ed767] = env->getStaticMethodID(cls, "parallelSort", "([C)V");
        mids$[mid_parallelSort_d5d56d9facba9bbe] = env->getStaticMethodID(cls, "parallelSort", "([D)V");
        mids$[mid_parallelSort_86d8949a8a13e717] = env->getStaticMethodID(cls, "parallelSort", "([F)V");
        mids$[mid_parallelSort_263e68476cd076a9] = env->getStaticMethodID(cls, "parallelSort", "([I)V");
        mids$[mid_parallelSort_7f1c853abc1a9198] = env->getStaticMethodID(cls, "parallelSort", "([J)V");
        mids$[mid_parallelSort_f26a4c17dc350da3] = env->getStaticMethodID(cls, "parallelSort", "([Ljava/lang/Comparable;)V");
        mids$[mid_parallelSort_8c88552bda1613c2] = env->getStaticMethodID(cls, "parallelSort", "([S)V");
        mids$[mid_parallelSort_f8e3b3d2a8c9889c] = env->getStaticMethodID(cls, "parallelSort", "([Ljava/lang/Object;Ljava/util/Comparator;)V");
        mids$[mid_parallelSort_43fdd39c09bb2fad] = env->getStaticMethodID(cls, "parallelSort", "([BII)V");
        mids$[mid_parallelSort_d5128be76a214037] = env->getStaticMethodID(cls, "parallelSort", "([CII)V");
        mids$[mid_parallelSort_ab3d95e9316c4026] = env->getStaticMethodID(cls, "parallelSort", "([DII)V");
        mids$[mid_parallelSort_177aa4cf1758b37e] = env->getStaticMethodID(cls, "parallelSort", "([FII)V");
        mids$[mid_parallelSort_11b52125bd016996] = env->getStaticMethodID(cls, "parallelSort", "([III)V");
        mids$[mid_parallelSort_d07f51188c558bf8] = env->getStaticMethodID(cls, "parallelSort", "([JII)V");
        mids$[mid_parallelSort_a2389198cde72d32] = env->getStaticMethodID(cls, "parallelSort", "([Ljava/lang/Comparable;II)V");
        mids$[mid_parallelSort_9e371bc10784c07e] = env->getStaticMethodID(cls, "parallelSort", "([SII)V");
        mids$[mid_parallelSort_fe20a22253bec8d0] = env->getStaticMethodID(cls, "parallelSort", "([Ljava/lang/Object;IILjava/util/Comparator;)V");
        mids$[mid_setAll_61c092838dd7ba7c] = env->getStaticMethodID(cls, "setAll", "([Ljava/lang/Object;Ljava/util/function/IntFunction;)V");
        mids$[mid_setAll_4e7f845c107bd69a] = env->getStaticMethodID(cls, "setAll", "([DLjava/util/function/IntToDoubleFunction;)V");
        mids$[mid_setAll_f63b4a12f5cf300e] = env->getStaticMethodID(cls, "setAll", "([ILjava/util/function/IntUnaryOperator;)V");
        mids$[mid_setAll_d9db2f050cf0de6e] = env->getStaticMethodID(cls, "setAll", "([JLjava/util/function/IntToLongFunction;)V");
        mids$[mid_sort_9ffdf271836656c4] = env->getStaticMethodID(cls, "sort", "([B)V");
        mids$[mid_sort_82dffe1ba55ed767] = env->getStaticMethodID(cls, "sort", "([C)V");
        mids$[mid_sort_d5d56d9facba9bbe] = env->getStaticMethodID(cls, "sort", "([D)V");
        mids$[mid_sort_86d8949a8a13e717] = env->getStaticMethodID(cls, "sort", "([F)V");
        mids$[mid_sort_263e68476cd076a9] = env->getStaticMethodID(cls, "sort", "([I)V");
        mids$[mid_sort_7f1c853abc1a9198] = env->getStaticMethodID(cls, "sort", "([J)V");
        mids$[mid_sort_f6e9e09a6ebaf005] = env->getStaticMethodID(cls, "sort", "([Ljava/lang/Object;)V");
        mids$[mid_sort_8c88552bda1613c2] = env->getStaticMethodID(cls, "sort", "([S)V");
        mids$[mid_sort_f8e3b3d2a8c9889c] = env->getStaticMethodID(cls, "sort", "([Ljava/lang/Object;Ljava/util/Comparator;)V");
        mids$[mid_sort_43fdd39c09bb2fad] = env->getStaticMethodID(cls, "sort", "([BII)V");
        mids$[mid_sort_d5128be76a214037] = env->getStaticMethodID(cls, "sort", "([CII)V");
        mids$[mid_sort_ab3d95e9316c4026] = env->getStaticMethodID(cls, "sort", "([DII)V");
        mids$[mid_sort_177aa4cf1758b37e] = env->getStaticMethodID(cls, "sort", "([FII)V");
        mids$[mid_sort_11b52125bd016996] = env->getStaticMethodID(cls, "sort", "([III)V");
        mids$[mid_sort_d07f51188c558bf8] = env->getStaticMethodID(cls, "sort", "([JII)V");
        mids$[mid_sort_d4d2b2e959e9eb5a] = env->getStaticMethodID(cls, "sort", "([Ljava/lang/Object;II)V");
        mids$[mid_sort_9e371bc10784c07e] = env->getStaticMethodID(cls, "sort", "([SII)V");
        mids$[mid_sort_fe20a22253bec8d0] = env->getStaticMethodID(cls, "sort", "([Ljava/lang/Object;IILjava/util/Comparator;)V");
        mids$[mid_spliterator_4a63de50cb0f977d] = env->getStaticMethodID(cls, "spliterator", "([D)Ljava/util/Spliterator$OfDouble;");
        mids$[mid_spliterator_da5b0df49c0de311] = env->getStaticMethodID(cls, "spliterator", "([I)Ljava/util/Spliterator$OfInt;");
        mids$[mid_spliterator_04cf0490c66ffb8d] = env->getStaticMethodID(cls, "spliterator", "([J)Ljava/util/Spliterator$OfLong;");
        mids$[mid_spliterator_68eb20c1c200a32f] = env->getStaticMethodID(cls, "spliterator", "([Ljava/lang/Object;)Ljava/util/Spliterator;");
        mids$[mid_spliterator_5a77a34cf63f68d8] = env->getStaticMethodID(cls, "spliterator", "([DII)Ljava/util/Spliterator$OfDouble;");
        mids$[mid_spliterator_9d4217d8fdca4773] = env->getStaticMethodID(cls, "spliterator", "([III)Ljava/util/Spliterator$OfInt;");
        mids$[mid_spliterator_7d4d4e264ab4c361] = env->getStaticMethodID(cls, "spliterator", "([JII)Ljava/util/Spliterator$OfLong;");
        mids$[mid_spliterator_7647782f58d558d1] = env->getStaticMethodID(cls, "spliterator", "([Ljava/lang/Object;II)Ljava/util/Spliterator;");
        mids$[mid_toString_724cde42c4d4b340] = env->getStaticMethodID(cls, "toString", "([B)Ljava/lang/String;");
        mids$[mid_toString_4082f27b3cc7d145] = env->getStaticMethodID(cls, "toString", "([C)Ljava/lang/String;");
        mids$[mid_toString_000a2125e47f39f3] = env->getStaticMethodID(cls, "toString", "([D)Ljava/lang/String;");
        mids$[mid_toString_f579147e371e96c3] = env->getStaticMethodID(cls, "toString", "([F)Ljava/lang/String;");
        mids$[mid_toString_75d82be1631ea68f] = env->getStaticMethodID(cls, "toString", "([I)Ljava/lang/String;");
        mids$[mid_toString_ee1527d74a0c3326] = env->getStaticMethodID(cls, "toString", "([J)Ljava/lang/String;");
        mids$[mid_toString_769987d5b132ba3d] = env->getStaticMethodID(cls, "toString", "([Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_toString_94e3669ff8d32c24] = env->getStaticMethodID(cls, "toString", "([S)Ljava/lang/String;");
        mids$[mid_toString_d8db261a6f60d389] = env->getStaticMethodID(cls, "toString", "([Z)Ljava/lang/String;");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::util::List Arrays::asList(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_asList_0d1dcd70f7b07e48], a0.this$));
    }

    jint Arrays::binarySearch(const JArray< jbyte > & a0, jbyte a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_90d6cd4636c06d5e], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jchar > & a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_cdeaee5df7f0bc5f], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jdouble > & a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_f46c949aba2292ce], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jfloat > & a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_6f94e91df3885a5f], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jint > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_f44f708380c30a86], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< ::java::lang::Object > & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_076f94f5b6020264], a0.this$, a1.this$);
    }

    jint Arrays::binarySearch(const JArray< jlong > & a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_09d3b95d429cf15a], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jshort > & a0, jshort a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_1059cfbba5ff4204], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< ::java::lang::Object > & a0, const ::java::lang::Object & a1, const ::java::util::Comparator & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_33a026fae3c703c5], a0.this$, a1.this$, a2.this$);
    }

    jint Arrays::binarySearch(const JArray< jbyte > & a0, jint a1, jint a2, jbyte a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_0bfe30034b35c12c], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jchar > & a0, jint a1, jint a2, jchar a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_1ca24311f9e246c6], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jdouble > & a0, jint a1, jint a2, jdouble a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_6cf57647131f60b3], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jfloat > & a0, jint a1, jint a2, jfloat a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_9f19acf63eea81de], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jint > & a0, jint a1, jint a2, jint a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_9d7610067d360ceb], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::lang::Object & a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_9a64ecd54a61726d], a0.this$, a1, a2, a3.this$);
    }

    jint Arrays::binarySearch(const JArray< jlong > & a0, jint a1, jint a2, jlong a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_ef4424920bc20119], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jshort > & a0, jint a1, jint a2, jshort a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_3a4cf86e3c27d3c1], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::lang::Object & a3, const ::java::util::Comparator & a4)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_44a45200f5027f60], a0.this$, a1, a2, a3.this$, a4.this$);
    }

    JArray< jbyte > Arrays::copyOf(const JArray< jbyte > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_478cfa823c780485], a0.this$, a1));
    }

    JArray< jchar > Arrays::copyOf(const JArray< jchar > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_03b7414ad135d405], a0.this$, a1));
    }

    JArray< jdouble > Arrays::copyOf(const JArray< jdouble > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_e3e5bf986725ed31], a0.this$, a1));
    }

    JArray< jfloat > Arrays::copyOf(const JArray< jfloat > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_bb41b4b6c049f550], a0.this$, a1));
    }

    JArray< jint > Arrays::copyOf(const JArray< jint > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_5d6e0b423e11726d], a0.this$, a1));
    }

    JArray< jlong > Arrays::copyOf(const JArray< jlong > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_278093e726fd2826], a0.this$, a1));
    }

    JArray< ::java::lang::Object > Arrays::copyOf(const JArray< ::java::lang::Object > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_19c42e0f45b1d30d], a0.this$, a1));
    }

    JArray< jshort > Arrays::copyOf(const JArray< jshort > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_918425fa1c7f2801], a0.this$, a1));
    }

    JArray< jboolean > Arrays::copyOf(const JArray< jboolean > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_094f6372938169dc], a0.this$, a1));
    }

    JArray< ::java::lang::Object > Arrays::copyOf(const JArray< ::java::lang::Object > & a0, jint a1, const ::java::lang::Class & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_1c345c121eeb3b56], a0.this$, a1, a2.this$));
    }

    JArray< jbyte > Arrays::copyOfRange(const JArray< jbyte > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_33260d5dc8f14bd0], a0.this$, a1, a2));
    }

    JArray< jchar > Arrays::copyOfRange(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_ca570db90ff6e0f1], a0.this$, a1, a2));
    }

    JArray< jdouble > Arrays::copyOfRange(const JArray< jdouble > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_6b2f32f5ab793d0c], a0.this$, a1, a2));
    }

    JArray< jfloat > Arrays::copyOfRange(const JArray< jfloat > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_0d04fdadd79a97ce], a0.this$, a1, a2));
    }

    JArray< jint > Arrays::copyOfRange(const JArray< jint > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_af5b45ff63d82992], a0.this$, a1, a2));
    }

    JArray< jlong > Arrays::copyOfRange(const JArray< jlong > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_ba7d14c0962577c6], a0.this$, a1, a2));
    }

    JArray< ::java::lang::Object > Arrays::copyOfRange(const JArray< ::java::lang::Object > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_244d7a3a846688e6], a0.this$, a1, a2));
    }

    JArray< jshort > Arrays::copyOfRange(const JArray< jshort > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_a5236f77979b84ce], a0.this$, a1, a2));
    }

    JArray< jboolean > Arrays::copyOfRange(const JArray< jboolean > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_57f63fbc42a23c9a], a0.this$, a1, a2));
    }

    JArray< ::java::lang::Object > Arrays::copyOfRange(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::lang::Class & a3)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_3adef14989b355be], a0.this$, a1, a2, a3.this$));
    }

    jboolean Arrays::deepEquals(const JArray< ::java::lang::Object > & a0, const JArray< ::java::lang::Object > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_deepEquals_b612ec45556826e0], a0.this$, a1.this$);
    }

    jint Arrays::deepHashCode(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_deepHashCode_11ba1d1a829f1dd5], a0.this$);
    }

    ::java::lang::String Arrays::deepToString(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_deepToString_769987d5b132ba3d], a0.this$));
    }

    jboolean Arrays::equals(const JArray< jbyte > & a0, const JArray< jbyte > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_ce3112cb35333a26], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jchar > & a0, const JArray< jchar > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_1ee327a84336ebdb], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jdouble > & a0, const JArray< jdouble > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_16540669d79f8e1b], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jfloat > & a0, const JArray< jfloat > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_1d909350e9af0dad], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jint > & a0, const JArray< jint > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_c71a22c5997b765f], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jlong > & a0, const JArray< jlong > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_aa7b365f33a11d8e], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< ::java::lang::Object > & a0, const JArray< ::java::lang::Object > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_b612ec45556826e0], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jshort > & a0, const JArray< jshort > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_3e9cffdf740a6d39], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jboolean > & a0, const JArray< jboolean > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_589de1c3283e825f], a0.this$, a1.this$);
    }

    void Arrays::fill(const JArray< jboolean > & a0, jboolean a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_e7360e0dc16247fd], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jbyte > & a0, jbyte a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_46963483e78758c4], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jchar > & a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_3a42039882649674], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jdouble > & a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_ec2a6dadbe25ef13], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jfloat > & a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_317038f7dae85a54], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jint > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_b15462fe6b719dc3], a0.this$, a1);
    }

    void Arrays::fill(const JArray< ::java::lang::Object > & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_cd5c30946ff045d6], a0.this$, a1.this$);
    }

    void Arrays::fill(const JArray< jlong > & a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_6b9d54909d29b341], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jshort > & a0, jshort a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_9111e74f8caf6bd8], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jbyte > & a0, jint a1, jint a2, jbyte a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_45d686c7d1def9d3], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jchar > & a0, jint a1, jint a2, jchar a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_5bfc2b23269a5af2], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jfloat > & a0, jint a1, jint a2, jfloat a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_dfe1eda20ca191c7], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jint > & a0, jint a1, jint a2, jint a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_506dafa9f041290c], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jboolean > & a0, jint a1, jint a2, jboolean a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_b4b053a761fbec22], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jdouble > & a0, jint a1, jint a2, jdouble a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_f5d8fb4895840d8c], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jlong > & a0, jint a1, jint a2, jlong a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_f601c4902e7fad30], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::lang::Object & a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_f67a7534f6f0f6d0], a0.this$, a1, a2, a3.this$);
    }

    void Arrays::fill(const JArray< jshort > & a0, jint a1, jint a2, jshort a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_b132329771b4e20d], a0.this$, a1, a2, a3);
    }

    jint Arrays::hashCode(const JArray< jbyte > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_bc39a112ba52f98e], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_946cc819d92a7347], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jdouble > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_bb668a876ff13ea0], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jfloat > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_5119d9d9e0a9c69f], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jint > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_b1d2da90a0b4944e], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jlong > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_9bdbb9e936dd10c2], a0.this$);
    }

    jint Arrays::hashCode(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_11ba1d1a829f1dd5], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jshort > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_4dec2479c34dbbb2], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jboolean > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_46abd8a4229eb8ff], a0.this$);
    }

    void Arrays::parallelPrefix(const JArray< ::java::lang::Object > & a0, const ::java::util::function::BinaryOperator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelPrefix_d3c81f15012216ce], a0.this$, a1.this$);
    }

    void Arrays::parallelPrefix(const JArray< jdouble > & a0, const ::java::util::function::DoubleBinaryOperator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelPrefix_113b63e5820710e8], a0.this$, a1.this$);
    }

    void Arrays::parallelPrefix(const JArray< jint > & a0, const ::java::util::function::IntBinaryOperator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelPrefix_cddc22a1993ebbad], a0.this$, a1.this$);
    }

    void Arrays::parallelPrefix(const JArray< jlong > & a0, const ::java::util::function::LongBinaryOperator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelPrefix_c2a5953092a5e694], a0.this$, a1.this$);
    }

    void Arrays::parallelPrefix(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::util::function::BinaryOperator & a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelPrefix_978f8710bc21971c], a0.this$, a1, a2, a3.this$);
    }

    void Arrays::parallelPrefix(const JArray< jdouble > & a0, jint a1, jint a2, const ::java::util::function::DoubleBinaryOperator & a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelPrefix_0b466df92709ec50], a0.this$, a1, a2, a3.this$);
    }

    void Arrays::parallelPrefix(const JArray< jint > & a0, jint a1, jint a2, const ::java::util::function::IntBinaryOperator & a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelPrefix_07c33c5822c4ad0b], a0.this$, a1, a2, a3.this$);
    }

    void Arrays::parallelPrefix(const JArray< jlong > & a0, jint a1, jint a2, const ::java::util::function::LongBinaryOperator & a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelPrefix_efa40d5fb233f42f], a0.this$, a1, a2, a3.this$);
    }

    void Arrays::parallelSetAll(const JArray< ::java::lang::Object > & a0, const ::java::util::function::IntFunction & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSetAll_61c092838dd7ba7c], a0.this$, a1.this$);
    }

    void Arrays::parallelSetAll(const JArray< jdouble > & a0, const ::java::util::function::IntToDoubleFunction & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSetAll_4e7f845c107bd69a], a0.this$, a1.this$);
    }

    void Arrays::parallelSetAll(const JArray< jint > & a0, const ::java::util::function::IntUnaryOperator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSetAll_f63b4a12f5cf300e], a0.this$, a1.this$);
    }

    void Arrays::parallelSetAll(const JArray< jlong > & a0, const ::java::util::function::IntToLongFunction & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSetAll_d9db2f050cf0de6e], a0.this$, a1.this$);
    }

    void Arrays::parallelSort(const JArray< jbyte > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_9ffdf271836656c4], a0.this$);
    }

    void Arrays::parallelSort(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_82dffe1ba55ed767], a0.this$);
    }

    void Arrays::parallelSort(const JArray< jdouble > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_d5d56d9facba9bbe], a0.this$);
    }

    void Arrays::parallelSort(const JArray< jfloat > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_86d8949a8a13e717], a0.this$);
    }

    void Arrays::parallelSort(const JArray< jint > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_263e68476cd076a9], a0.this$);
    }

    void Arrays::parallelSort(const JArray< jlong > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_7f1c853abc1a9198], a0.this$);
    }

    void Arrays::parallelSort(const JArray< ::java::lang::Comparable > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_f26a4c17dc350da3], a0.this$);
    }

    void Arrays::parallelSort(const JArray< jshort > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_8c88552bda1613c2], a0.this$);
    }

    void Arrays::parallelSort(const JArray< ::java::lang::Object > & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_f8e3b3d2a8c9889c], a0.this$, a1.this$);
    }

    void Arrays::parallelSort(const JArray< jbyte > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_43fdd39c09bb2fad], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_d5128be76a214037], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< jdouble > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_ab3d95e9316c4026], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< jfloat > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_177aa4cf1758b37e], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< jint > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_11b52125bd016996], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< jlong > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_d07f51188c558bf8], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< ::java::lang::Comparable > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_a2389198cde72d32], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< jshort > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_9e371bc10784c07e], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::util::Comparator & a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_fe20a22253bec8d0], a0.this$, a1, a2, a3.this$);
    }

    void Arrays::setAll(const JArray< ::java::lang::Object > & a0, const ::java::util::function::IntFunction & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setAll_61c092838dd7ba7c], a0.this$, a1.this$);
    }

    void Arrays::setAll(const JArray< jdouble > & a0, const ::java::util::function::IntToDoubleFunction & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setAll_4e7f845c107bd69a], a0.this$, a1.this$);
    }

    void Arrays::setAll(const JArray< jint > & a0, const ::java::util::function::IntUnaryOperator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setAll_f63b4a12f5cf300e], a0.this$, a1.this$);
    }

    void Arrays::setAll(const JArray< jlong > & a0, const ::java::util::function::IntToLongFunction & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setAll_d9db2f050cf0de6e], a0.this$, a1.this$);
    }

    void Arrays::sort(const JArray< jbyte > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_9ffdf271836656c4], a0.this$);
    }

    void Arrays::sort(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_82dffe1ba55ed767], a0.this$);
    }

    void Arrays::sort(const JArray< jdouble > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_d5d56d9facba9bbe], a0.this$);
    }

    void Arrays::sort(const JArray< jfloat > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_86d8949a8a13e717], a0.this$);
    }

    void Arrays::sort(const JArray< jint > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_263e68476cd076a9], a0.this$);
    }

    void Arrays::sort(const JArray< jlong > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_7f1c853abc1a9198], a0.this$);
    }

    void Arrays::sort(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_f6e9e09a6ebaf005], a0.this$);
    }

    void Arrays::sort(const JArray< jshort > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_8c88552bda1613c2], a0.this$);
    }

    void Arrays::sort(const JArray< ::java::lang::Object > & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_f8e3b3d2a8c9889c], a0.this$, a1.this$);
    }

    void Arrays::sort(const JArray< jbyte > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_43fdd39c09bb2fad], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_d5128be76a214037], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jdouble > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_ab3d95e9316c4026], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jfloat > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_177aa4cf1758b37e], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jint > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_11b52125bd016996], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jlong > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_d07f51188c558bf8], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_d4d2b2e959e9eb5a], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jshort > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_9e371bc10784c07e], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::util::Comparator & a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_fe20a22253bec8d0], a0.this$, a1, a2, a3.this$);
    }

    ::java::util::Spliterator$OfDouble Arrays::spliterator(const JArray< jdouble > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator$OfDouble(env->callStaticObjectMethod(cls, mids$[mid_spliterator_4a63de50cb0f977d], a0.this$));
    }

    ::java::util::Spliterator$OfInt Arrays::spliterator(const JArray< jint > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator$OfInt(env->callStaticObjectMethod(cls, mids$[mid_spliterator_da5b0df49c0de311], a0.this$));
    }

    ::java::util::Spliterator$OfLong Arrays::spliterator(const JArray< jlong > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator$OfLong(env->callStaticObjectMethod(cls, mids$[mid_spliterator_04cf0490c66ffb8d], a0.this$));
    }

    ::java::util::Spliterator Arrays::spliterator(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator(env->callStaticObjectMethod(cls, mids$[mid_spliterator_68eb20c1c200a32f], a0.this$));
    }

    ::java::util::Spliterator$OfDouble Arrays::spliterator(const JArray< jdouble > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator$OfDouble(env->callStaticObjectMethod(cls, mids$[mid_spliterator_5a77a34cf63f68d8], a0.this$, a1, a2));
    }

    ::java::util::Spliterator$OfInt Arrays::spliterator(const JArray< jint > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator$OfInt(env->callStaticObjectMethod(cls, mids$[mid_spliterator_9d4217d8fdca4773], a0.this$, a1, a2));
    }

    ::java::util::Spliterator$OfLong Arrays::spliterator(const JArray< jlong > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator$OfLong(env->callStaticObjectMethod(cls, mids$[mid_spliterator_7d4d4e264ab4c361], a0.this$, a1, a2));
    }

    ::java::util::Spliterator Arrays::spliterator(const JArray< ::java::lang::Object > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator(env->callStaticObjectMethod(cls, mids$[mid_spliterator_7647782f58d558d1], a0.this$, a1, a2));
    }

    ::java::lang::String Arrays::toString(const JArray< jbyte > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_724cde42c4d4b340], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_4082f27b3cc7d145], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jdouble > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_000a2125e47f39f3], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jfloat > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_f579147e371e96c3], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jint > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_75d82be1631ea68f], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jlong > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_ee1527d74a0c3326], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_769987d5b132ba3d], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jshort > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_94e3669ff8d32c24], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jboolean > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_d8db261a6f60d389], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Arrays_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_asList(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_binarySearch(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_copyOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_copyOfRange(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_deepEquals(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_deepHashCode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_deepToString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_equals(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_fill(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_hashCode(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_parallelPrefix(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_parallelSetAll(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_parallelSort(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_setAll(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_sort(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_spliterator(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_toString(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Arrays__methods_[] = {
      DECLARE_METHOD(t_Arrays, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, asList, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, binarySearch, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, copyOf, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, copyOfRange, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, deepEquals, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, deepHashCode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, deepToString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, equals, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, fill, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, hashCode, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, parallelPrefix, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, parallelSetAll, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, parallelSort, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, setAll, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, sort, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, spliterator, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, toString, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Arrays)[] = {
      { Py_tp_methods, t_Arrays__methods_ },
      { Py_tp_init, (void *) abstract_init },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Arrays)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(Arrays, t_Arrays, Arrays);

    void t_Arrays::install(PyObject *module)
    {
      installType(&PY_TYPE(Arrays), &PY_TYPE_DEF(Arrays), module, "Arrays", 0);
    }

    void t_Arrays::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Arrays), "class_", make_descriptor(Arrays::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Arrays), "wrapfn_", make_descriptor(t_Arrays::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Arrays), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Arrays_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Arrays::initializeClass, 1)))
        return NULL;
      return t_Arrays::wrap_Object(Arrays(((t_Arrays *) arg)->object.this$));
    }
    static PyObject *t_Arrays_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Arrays::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Arrays_asList(PyTypeObject *type, PyObject *arg)
    {
      JArray< ::java::lang::Object > a0((jobject) NULL);
      ::java::util::List result((jobject) NULL);

      if (!parseArg(arg, "[o", &a0))
      {
        OBJ_CALL(result = ::java::util::Arrays::asList(a0));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "asList", arg);
      return NULL;
    }

    static PyObject *t_Arrays_binarySearch(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jbyte > a0((jobject) NULL);
          jbyte a1;
          jint result;

          if (!parseArgs(args, "[BB", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jchar a1;
          jint result;

          if (!parseArgs(args, "[CC", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jdouble a1;
          jint result;

          if (!parseArgs(args, "[DD", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jfloat a1;
          jint result;

          if (!parseArgs(args, "[FF", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jlong a1;
          jint result;

          if (!parseArgs(args, "[JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[oo", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jshort a1;
          jint result;

          if (!parseArgs(args, "[SS", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          ::java::util::Comparator a2((jobject) NULL);
          PyTypeObject **p2;
          jint result;

          if (!parseArgs(args, "[ooK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2));
            return PyLong_FromLong((long) result);
          }
        }
        break;
       case 4:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jbyte a3;
          jint result;

          if (!parseArgs(args, "[BIIB", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jchar a3;
          jint result;

          if (!parseArgs(args, "[CIIC", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;
          jdouble a3;
          jint result;

          if (!parseArgs(args, "[DIID", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;
          jfloat a3;
          jint result;

          if (!parseArgs(args, "[FIIF", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;
          jint result;

          if (!parseArgs(args, "[IIII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          jlong a3;
          jint result;

          if (!parseArgs(args, "[JIIJ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::Object a3((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[oIIo", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;
          jshort a3;
          jint result;

          if (!parseArgs(args, "[SIIS", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyLong_FromLong((long) result);
          }
        }
        break;
       case 5:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::Object a3((jobject) NULL);
          ::java::util::Comparator a4((jobject) NULL);
          PyTypeObject **p4;
          jint result;

          if (!parseArgs(args, "[oIIoK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3, a4));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "binarySearch", args);
      return NULL;
    }

    static PyObject *t_Arrays_copyOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          JArray< jchar > result((jobject) NULL);

          if (!parseArgs(args, "[CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          JArray< jdouble > result((jobject) NULL);

          if (!parseArgs(args, "[DI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          JArray< jfloat > result((jobject) NULL);

          if (!parseArgs(args, "[FI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, "[II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          JArray< jlong > result((jobject) NULL);

          if (!parseArgs(args, "[JI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[oI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          JArray< jshort > result((jobject) NULL);

          if (!parseArgs(args, "[SI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          jint a1;
          JArray< jboolean > result((jobject) NULL);

          if (!parseArgs(args, "[ZI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        break;
       case 3:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          ::java::lang::Class a2((jobject) NULL);
          PyTypeObject **p2;
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[oIK", ::java::lang::Class::initializeClass, &a0, &a1, &a2, &p2, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1, a2));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
      }

      PyErr_SetArgsError(type, "copyOf", args);
      return NULL;
    }

    static PyObject *t_Arrays_copyOfRange(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jchar > result((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jdouble > result((jobject) NULL);

          if (!parseArgs(args, "[DII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jfloat > result((jobject) NULL);

          if (!parseArgs(args, "[FII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jlong > result((jobject) NULL);

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[oII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jshort > result((jobject) NULL);

          if (!parseArgs(args, "[SII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jboolean > result((jobject) NULL);

          if (!parseArgs(args, "[ZII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        break;
       case 4:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::Class a3((jobject) NULL);
          PyTypeObject **p3;
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[oIIK", ::java::lang::Class::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2, a3));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
      }

      PyErr_SetArgsError(type, "copyOfRange", args);
      return NULL;
    }

    static PyObject *t_Arrays_deepEquals(PyTypeObject *type, PyObject *args)
    {
      JArray< ::java::lang::Object > a0((jobject) NULL);
      JArray< ::java::lang::Object > a1((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "[o[o", &a0, &a1))
      {
        OBJ_CALL(result = ::java::util::Arrays::deepEquals(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "deepEquals", args);
      return NULL;
    }

    static PyObject *t_Arrays_deepHashCode(PyTypeObject *type, PyObject *arg)
    {
      JArray< ::java::lang::Object > a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "[o", &a0))
      {
        OBJ_CALL(result = ::java::util::Arrays::deepHashCode(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "deepHashCode", arg);
      return NULL;
    }

    static PyObject *t_Arrays_deepToString(PyTypeObject *type, PyObject *arg)
    {
      JArray< ::java::lang::Object > a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "[o", &a0))
      {
        OBJ_CALL(result = ::java::util::Arrays::deepToString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "deepToString", arg);
      return NULL;
    }

    static PyObject *t_Arrays_equals(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jbyte > a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[B[B", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          JArray< jchar > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[C[C", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          JArray< jdouble > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[D[D", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          JArray< jfloat > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[F[F", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          JArray< jint > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[I[I", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[J[J", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          JArray< ::java::lang::Object > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[o[o", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          JArray< jshort > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[S[S", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          JArray< jboolean > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[Z[Z", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
      }

      return callSuper(type, "equals", args, 2);
    }

    static PyObject *t_Arrays_fill(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jbyte > a0((jobject) NULL);
          jbyte a1;

          if (!parseArgs(args, "[BB", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jchar a1;

          if (!parseArgs(args, "[CC", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jdouble a1;

          if (!parseArgs(args, "[DD", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jfloat a1;

          if (!parseArgs(args, "[FF", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "[II", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "[JJ", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);

          if (!parseArgs(args, "[oo", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jshort a1;

          if (!parseArgs(args, "[SS", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "[ZZ", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        break;
       case 4:
        {
          JArray< jboolean > a0((jobject) NULL);
          jint a1;
          jint a2;
          jboolean a3;

          if (!parseArgs(args, "[ZIIZ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jbyte a3;

          if (!parseArgs(args, "[BIIB", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jchar a3;

          if (!parseArgs(args, "[CIIC", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;
          jdouble a3;

          if (!parseArgs(args, "[DIID", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;
          jfloat a3;

          if (!parseArgs(args, "[FIIF", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;

          if (!parseArgs(args, "[IIII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::Object a3((jobject) NULL);

          if (!parseArgs(args, "[oIIo", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          jlong a3;

          if (!parseArgs(args, "[JIIJ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;
          jshort a3;

          if (!parseArgs(args, "[SIIS", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "fill", args);
      return NULL;
    }

    static PyObject *t_Arrays_hashCode(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[D", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[F", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[I", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[J", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[S", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyLong_FromLong((long) result);
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[Z", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyLong_FromLong((long) result);
          }
        }
      }

      return callSuper(type, "hashCode", args, 2);
    }

    static PyObject *t_Arrays_parallelPrefix(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jdouble > a0((jobject) NULL);
          ::java::util::function::DoubleBinaryOperator a1((jobject) NULL);

          if (!parseArgs(args, "[Dk", ::java::util::function::DoubleBinaryOperator::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::parallelPrefix(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          ::java::util::function::IntBinaryOperator a1((jobject) NULL);

          if (!parseArgs(args, "[Ik", ::java::util::function::IntBinaryOperator::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::parallelPrefix(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          ::java::util::function::LongBinaryOperator a1((jobject) NULL);

          if (!parseArgs(args, "[Jk", ::java::util::function::LongBinaryOperator::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::parallelPrefix(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::util::function::BinaryOperator a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "[oK", ::java::util::function::BinaryOperator::initializeClass, &a0, &a1, &p1, ::java::util::function::t_BinaryOperator::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::parallelPrefix(a0, a1));
            Py_RETURN_NONE;
          }
        }
        break;
       case 4:
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::function::DoubleBinaryOperator a3((jobject) NULL);

          if (!parseArgs(args, "[DIIk", ::java::util::function::DoubleBinaryOperator::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::parallelPrefix(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::function::IntBinaryOperator a3((jobject) NULL);

          if (!parseArgs(args, "[IIIk", ::java::util::function::IntBinaryOperator::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::parallelPrefix(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::function::LongBinaryOperator a3((jobject) NULL);

          if (!parseArgs(args, "[JIIk", ::java::util::function::LongBinaryOperator::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::parallelPrefix(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::function::BinaryOperator a3((jobject) NULL);
          PyTypeObject **p3;

          if (!parseArgs(args, "[oIIK", ::java::util::function::BinaryOperator::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::function::t_BinaryOperator::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::parallelPrefix(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "parallelPrefix", args);
      return NULL;
    }

    static PyObject *t_Arrays_parallelSetAll(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jdouble > a0((jobject) NULL);
          ::java::util::function::IntToDoubleFunction a1((jobject) NULL);

          if (!parseArgs(args, "[Dk", ::java::util::function::IntToDoubleFunction::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::parallelSetAll(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          ::java::util::function::IntToLongFunction a1((jobject) NULL);

          if (!parseArgs(args, "[Jk", ::java::util::function::IntToLongFunction::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::parallelSetAll(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          ::java::util::function::IntUnaryOperator a1((jobject) NULL);

          if (!parseArgs(args, "[Ik", ::java::util::function::IntUnaryOperator::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::parallelSetAll(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::util::function::IntFunction a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "[oK", ::java::util::function::IntFunction::initializeClass, &a0, &a1, &p1, ::java::util::function::t_IntFunction::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::parallelSetAll(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "parallelSetAll", args);
      return NULL;
    }

    static PyObject *t_Arrays_parallelSort(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);

          if (!parseArgs(args, "[D", &a0))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);

          if (!parseArgs(args, "[F", &a0))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);

          if (!parseArgs(args, "[I", &a0))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);

          if (!parseArgs(args, "[J", &a0))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Comparable > a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "[K", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);

          if (!parseArgs(args, "[S", &a0))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "[oK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[DII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[FII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Comparable > a0((jobject) NULL);
          PyTypeObject **p0;
          jint a1;
          jint a2;

          if (!parseArgs(args, "[KII", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[SII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        break;
       case 4:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::Comparator a3((jobject) NULL);
          PyTypeObject **p3;

          if (!parseArgs(args, "[oIIK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "parallelSort", args);
      return NULL;
    }

    static PyObject *t_Arrays_setAll(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jdouble > a0((jobject) NULL);
          ::java::util::function::IntToDoubleFunction a1((jobject) NULL);

          if (!parseArgs(args, "[Dk", ::java::util::function::IntToDoubleFunction::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::setAll(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          ::java::util::function::IntToLongFunction a1((jobject) NULL);

          if (!parseArgs(args, "[Jk", ::java::util::function::IntToLongFunction::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::setAll(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          ::java::util::function::IntUnaryOperator a1((jobject) NULL);

          if (!parseArgs(args, "[Ik", ::java::util::function::IntUnaryOperator::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::setAll(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::util::function::IntFunction a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "[oK", ::java::util::function::IntFunction::initializeClass, &a0, &a1, &p1, ::java::util::function::t_IntFunction::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::setAll(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "setAll", args);
      return NULL;
    }

    static PyObject *t_Arrays_sort(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);

          if (!parseArgs(args, "[D", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);

          if (!parseArgs(args, "[F", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);

          if (!parseArgs(args, "[I", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);

          if (!parseArgs(args, "[J", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);

          if (!parseArgs(args, "[S", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "[oK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[DII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[FII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[oII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[SII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        break;
       case 4:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::Comparator a3((jobject) NULL);
          PyTypeObject **p3;

          if (!parseArgs(args, "[oIIK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "sort", args);
      return NULL;
    }

    static PyObject *t_Arrays_spliterator(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jdouble > a0((jobject) NULL);
          ::java::util::Spliterator$OfDouble result((jobject) NULL);

          if (!parseArgs(args, "[D", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0));
            return ::java::util::t_Spliterator$OfDouble::wrap_Object(result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          ::java::util::Spliterator$OfInt result((jobject) NULL);

          if (!parseArgs(args, "[I", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0));
            return ::java::util::t_Spliterator$OfInt::wrap_Object(result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          ::java::util::Spliterator$OfLong result((jobject) NULL);

          if (!parseArgs(args, "[J", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0));
            return ::java::util::t_Spliterator$OfLong::wrap_Object(result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::util::Spliterator result((jobject) NULL);

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0));
            return ::java::util::t_Spliterator::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::Spliterator$OfDouble result((jobject) NULL);

          if (!parseArgs(args, "[DII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0, a1, a2));
            return ::java::util::t_Spliterator$OfDouble::wrap_Object(result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::Spliterator$OfInt result((jobject) NULL);

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0, a1, a2));
            return ::java::util::t_Spliterator$OfInt::wrap_Object(result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::Spliterator$OfLong result((jobject) NULL);

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0, a1, a2));
            return ::java::util::t_Spliterator$OfLong::wrap_Object(result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::Spliterator result((jobject) NULL);

          if (!parseArgs(args, "[oII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0, a1, a2));
            return ::java::util::t_Spliterator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "spliterator", args);
      return NULL;
    }

    static PyObject *t_Arrays_toString(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[D", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[F", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[I", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[J", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[S", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[Z", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
      }

      return callSuper(type, "toString", args, 2);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/OffsetsEnum$MultiOffsetsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *OffsetsEnum$MultiOffsetsEnum::class$ = NULL;
          jmethodID *OffsetsEnum$MultiOffsetsEnum::mids$ = NULL;
          bool OffsetsEnum$MultiOffsetsEnum::live$ = false;

          jclass OffsetsEnum$MultiOffsetsEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/OffsetsEnum$MultiOffsetsEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d03990be0130160d] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_endOffset_9972fcc56b44e79d] = env->getMethodID(cls, "endOffset", "()I");
              mids$[mid_freq_9972fcc56b44e79d] = env->getMethodID(cls, "freq", "()I");
              mids$[mid_getTerm_7af2ea2e37ce82b8] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_nextPosition_8454bd5aa23fd11e] = env->getMethodID(cls, "nextPosition", "()Z");
              mids$[mid_startOffset_9972fcc56b44e79d] = env->getMethodID(cls, "startOffset", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OffsetsEnum$MultiOffsetsEnum::OffsetsEnum$MultiOffsetsEnum(const ::java::util::List & a0) : ::org::apache::lucene::search::uhighlight::OffsetsEnum(env->newObject(initializeClass, &mids$, mid_init$_d03990be0130160d, a0.this$)) {}

          void OffsetsEnum$MultiOffsetsEnum::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          jint OffsetsEnum$MultiOffsetsEnum::endOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_endOffset_9972fcc56b44e79d]);
          }

          jint OffsetsEnum$MultiOffsetsEnum::freq() const
          {
            return env->callIntMethod(this$, mids$[mid_freq_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::util::BytesRef OffsetsEnum$MultiOffsetsEnum::getTerm() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getTerm_7af2ea2e37ce82b8]));
          }

          jboolean OffsetsEnum$MultiOffsetsEnum::nextPosition() const
          {
            return env->callBooleanMethod(this$, mids$[mid_nextPosition_8454bd5aa23fd11e]);
          }

          jint OffsetsEnum$MultiOffsetsEnum::startOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_startOffset_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_OffsetsEnum$MultiOffsetsEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetsEnum$MultiOffsetsEnum_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OffsetsEnum$MultiOffsetsEnum_init_(t_OffsetsEnum$MultiOffsetsEnum *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OffsetsEnum$MultiOffsetsEnum_close(t_OffsetsEnum$MultiOffsetsEnum *self, PyObject *args);
          static PyObject *t_OffsetsEnum$MultiOffsetsEnum_endOffset(t_OffsetsEnum$MultiOffsetsEnum *self, PyObject *args);
          static PyObject *t_OffsetsEnum$MultiOffsetsEnum_freq(t_OffsetsEnum$MultiOffsetsEnum *self, PyObject *args);
          static PyObject *t_OffsetsEnum$MultiOffsetsEnum_getTerm(t_OffsetsEnum$MultiOffsetsEnum *self, PyObject *args);
          static PyObject *t_OffsetsEnum$MultiOffsetsEnum_nextPosition(t_OffsetsEnum$MultiOffsetsEnum *self, PyObject *args);
          static PyObject *t_OffsetsEnum$MultiOffsetsEnum_startOffset(t_OffsetsEnum$MultiOffsetsEnum *self, PyObject *args);
          static PyObject *t_OffsetsEnum$MultiOffsetsEnum_get__term(t_OffsetsEnum$MultiOffsetsEnum *self, void *data);
          static PyGetSetDef t_OffsetsEnum$MultiOffsetsEnum__fields_[] = {
            DECLARE_GET_FIELD(t_OffsetsEnum$MultiOffsetsEnum, term),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_OffsetsEnum$MultiOffsetsEnum__methods_[] = {
            DECLARE_METHOD(t_OffsetsEnum$MultiOffsetsEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetsEnum$MultiOffsetsEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetsEnum$MultiOffsetsEnum, close, METH_VARARGS),
            DECLARE_METHOD(t_OffsetsEnum$MultiOffsetsEnum, endOffset, METH_VARARGS),
            DECLARE_METHOD(t_OffsetsEnum$MultiOffsetsEnum, freq, METH_VARARGS),
            DECLARE_METHOD(t_OffsetsEnum$MultiOffsetsEnum, getTerm, METH_VARARGS),
            DECLARE_METHOD(t_OffsetsEnum$MultiOffsetsEnum, nextPosition, METH_VARARGS),
            DECLARE_METHOD(t_OffsetsEnum$MultiOffsetsEnum, startOffset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(OffsetsEnum$MultiOffsetsEnum)[] = {
            { Py_tp_methods, t_OffsetsEnum$MultiOffsetsEnum__methods_ },
            { Py_tp_init, (void *) t_OffsetsEnum$MultiOffsetsEnum_init_ },
            { Py_tp_getset, t_OffsetsEnum$MultiOffsetsEnum__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(OffsetsEnum$MultiOffsetsEnum)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::uhighlight::OffsetsEnum),
            NULL
          };

          DEFINE_TYPE(OffsetsEnum$MultiOffsetsEnum, t_OffsetsEnum$MultiOffsetsEnum, OffsetsEnum$MultiOffsetsEnum);

          void t_OffsetsEnum$MultiOffsetsEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(OffsetsEnum$MultiOffsetsEnum), &PY_TYPE_DEF(OffsetsEnum$MultiOffsetsEnum), module, "OffsetsEnum$MultiOffsetsEnum", 0);
          }

          void t_OffsetsEnum$MultiOffsetsEnum::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetsEnum$MultiOffsetsEnum), "class_", make_descriptor(OffsetsEnum$MultiOffsetsEnum::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetsEnum$MultiOffsetsEnum), "wrapfn_", make_descriptor(t_OffsetsEnum$MultiOffsetsEnum::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetsEnum$MultiOffsetsEnum), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OffsetsEnum$MultiOffsetsEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OffsetsEnum$MultiOffsetsEnum::initializeClass, 1)))
              return NULL;
            return t_OffsetsEnum$MultiOffsetsEnum::wrap_Object(OffsetsEnum$MultiOffsetsEnum(((t_OffsetsEnum$MultiOffsetsEnum *) arg)->object.this$));
          }
          static PyObject *t_OffsetsEnum$MultiOffsetsEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OffsetsEnum$MultiOffsetsEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OffsetsEnum$MultiOffsetsEnum_init_(t_OffsetsEnum$MultiOffsetsEnum *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            OffsetsEnum$MultiOffsetsEnum object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              INT_CALL(object = OffsetsEnum$MultiOffsetsEnum(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OffsetsEnum$MultiOffsetsEnum_close(t_OffsetsEnum$MultiOffsetsEnum *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(OffsetsEnum$MultiOffsetsEnum), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_OffsetsEnum$MultiOffsetsEnum_endOffset(t_OffsetsEnum$MultiOffsetsEnum *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.endOffset());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(OffsetsEnum$MultiOffsetsEnum), (PyObject *) self, "endOffset", args, 2);
          }

          static PyObject *t_OffsetsEnum$MultiOffsetsEnum_freq(t_OffsetsEnum$MultiOffsetsEnum *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.freq());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(OffsetsEnum$MultiOffsetsEnum), (PyObject *) self, "freq", args, 2);
          }

          static PyObject *t_OffsetsEnum$MultiOffsetsEnum_getTerm(t_OffsetsEnum$MultiOffsetsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getTerm());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(OffsetsEnum$MultiOffsetsEnum), (PyObject *) self, "getTerm", args, 2);
          }

          static PyObject *t_OffsetsEnum$MultiOffsetsEnum_nextPosition(t_OffsetsEnum$MultiOffsetsEnum *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextPosition());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(OffsetsEnum$MultiOffsetsEnum), (PyObject *) self, "nextPosition", args, 2);
          }

          static PyObject *t_OffsetsEnum$MultiOffsetsEnum_startOffset(t_OffsetsEnum$MultiOffsetsEnum *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.startOffset());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(OffsetsEnum$MultiOffsetsEnum), (PyObject *) self, "startOffset", args, 2);
          }

          static PyObject *t_OffsetsEnum$MultiOffsetsEnum_get__term(t_OffsetsEnum$MultiOffsetsEnum *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getTerm());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/FingerprintFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *FingerprintFilter::class$ = NULL;
          jmethodID *FingerprintFilter::mids$ = NULL;
          bool FingerprintFilter::live$ = false;
          jint FingerprintFilter::DEFAULT_MAX_OUTPUT_TOKEN_SIZE = (jint) 0;
          jchar FingerprintFilter::DEFAULT_SEPARATOR = (jchar) 0;

          jclass FingerprintFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/FingerprintFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_a3708e5b0eba3aea] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;IC)V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_OUTPUT_TOKEN_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_OUTPUT_TOKEN_SIZE");
              DEFAULT_SEPARATOR = env->getStaticCharField(cls, "DEFAULT_SEPARATOR");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FingerprintFilter::FingerprintFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          FingerprintFilter::FingerprintFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jchar a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_a3708e5b0eba3aea, a0.this$, a1, a2)) {}

          void FingerprintFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean FingerprintFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void FingerprintFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_FingerprintFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FingerprintFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FingerprintFilter_init_(t_FingerprintFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FingerprintFilter_end(t_FingerprintFilter *self, PyObject *args);
          static PyObject *t_FingerprintFilter_incrementToken(t_FingerprintFilter *self, PyObject *args);
          static PyObject *t_FingerprintFilter_reset(t_FingerprintFilter *self, PyObject *args);

          static PyMethodDef t_FingerprintFilter__methods_[] = {
            DECLARE_METHOD(t_FingerprintFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FingerprintFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FingerprintFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_FingerprintFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_FingerprintFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FingerprintFilter)[] = {
            { Py_tp_methods, t_FingerprintFilter__methods_ },
            { Py_tp_init, (void *) t_FingerprintFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FingerprintFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(FingerprintFilter, t_FingerprintFilter, FingerprintFilter);

          void t_FingerprintFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FingerprintFilter), &PY_TYPE_DEF(FingerprintFilter), module, "FingerprintFilter", 0);
          }

          void t_FingerprintFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FingerprintFilter), "class_", make_descriptor(FingerprintFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FingerprintFilter), "wrapfn_", make_descriptor(t_FingerprintFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FingerprintFilter), "boxfn_", make_descriptor(boxObject));
            env->getClass(FingerprintFilter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FingerprintFilter), "DEFAULT_MAX_OUTPUT_TOKEN_SIZE", make_descriptor(FingerprintFilter::DEFAULT_MAX_OUTPUT_TOKEN_SIZE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FingerprintFilter), "DEFAULT_SEPARATOR", make_descriptor(FingerprintFilter::DEFAULT_SEPARATOR));
          }

          static PyObject *t_FingerprintFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FingerprintFilter::initializeClass, 1)))
              return NULL;
            return t_FingerprintFilter::wrap_Object(FingerprintFilter(((t_FingerprintFilter *) arg)->object.this$));
          }
          static PyObject *t_FingerprintFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FingerprintFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FingerprintFilter_init_(t_FingerprintFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                FingerprintFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = FingerprintFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jchar a2;
                FingerprintFilter object((jobject) NULL);

                if (!parseArgs(args, "kIC", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = FingerprintFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FingerprintFilter_end(t_FingerprintFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FingerprintFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_FingerprintFilter_incrementToken(t_FingerprintFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FingerprintFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_FingerprintFilter_reset(t_FingerprintFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FingerprintFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/FixBrokenOffsetsFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *FixBrokenOffsetsFilter::class$ = NULL;
          jmethodID *FixBrokenOffsetsFilter::mids$ = NULL;
          bool FixBrokenOffsetsFilter::live$ = false;

          jclass FixBrokenOffsetsFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/FixBrokenOffsetsFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FixBrokenOffsetsFilter::FixBrokenOffsetsFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          void FixBrokenOffsetsFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean FixBrokenOffsetsFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void FixBrokenOffsetsFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_FixBrokenOffsetsFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FixBrokenOffsetsFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FixBrokenOffsetsFilter_init_(t_FixBrokenOffsetsFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FixBrokenOffsetsFilter_end(t_FixBrokenOffsetsFilter *self, PyObject *args);
          static PyObject *t_FixBrokenOffsetsFilter_incrementToken(t_FixBrokenOffsetsFilter *self, PyObject *args);
          static PyObject *t_FixBrokenOffsetsFilter_reset(t_FixBrokenOffsetsFilter *self, PyObject *args);

          static PyMethodDef t_FixBrokenOffsetsFilter__methods_[] = {
            DECLARE_METHOD(t_FixBrokenOffsetsFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FixBrokenOffsetsFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FixBrokenOffsetsFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_FixBrokenOffsetsFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_FixBrokenOffsetsFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FixBrokenOffsetsFilter)[] = {
            { Py_tp_methods, t_FixBrokenOffsetsFilter__methods_ },
            { Py_tp_init, (void *) t_FixBrokenOffsetsFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FixBrokenOffsetsFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(FixBrokenOffsetsFilter, t_FixBrokenOffsetsFilter, FixBrokenOffsetsFilter);

          void t_FixBrokenOffsetsFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FixBrokenOffsetsFilter), &PY_TYPE_DEF(FixBrokenOffsetsFilter), module, "FixBrokenOffsetsFilter", 0);
          }

          void t_FixBrokenOffsetsFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FixBrokenOffsetsFilter), "class_", make_descriptor(FixBrokenOffsetsFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FixBrokenOffsetsFilter), "wrapfn_", make_descriptor(t_FixBrokenOffsetsFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FixBrokenOffsetsFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FixBrokenOffsetsFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FixBrokenOffsetsFilter::initializeClass, 1)))
              return NULL;
            return t_FixBrokenOffsetsFilter::wrap_Object(FixBrokenOffsetsFilter(((t_FixBrokenOffsetsFilter *) arg)->object.this$));
          }
          static PyObject *t_FixBrokenOffsetsFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FixBrokenOffsetsFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FixBrokenOffsetsFilter_init_(t_FixBrokenOffsetsFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            FixBrokenOffsetsFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = FixBrokenOffsetsFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FixBrokenOffsetsFilter_end(t_FixBrokenOffsetsFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FixBrokenOffsetsFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_FixBrokenOffsetsFilter_incrementToken(t_FixBrokenOffsetsFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FixBrokenOffsetsFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_FixBrokenOffsetsFilter_reset(t_FixBrokenOffsetsFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FixBrokenOffsetsFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueFloat.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueFloat::class$ = NULL;
          jmethodID *MutableValueFloat::mids$ = NULL;
          jfieldID *MutableValueFloat::fids$ = NULL;
          bool MutableValueFloat::live$ = false;

          jclass MutableValueFloat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueFloat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_5a4805a36cf611e7] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_3a4da6d6b1464d7a] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_b6a1db04136f7d9b] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_d6bcd06f3102c4d9] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "F");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueFloat::MutableValueFloat() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint MutableValueFloat::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_5a4805a36cf611e7], a0.this$);
          }

          void MutableValueFloat::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_3a4da6d6b1464d7a], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueFloat::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_b6a1db04136f7d9b]));
          }

          jboolean MutableValueFloat::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_8b72f2dcdde6fd1d], a0.this$);
          }

          jint MutableValueFloat::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::Object MutableValueFloat::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_d6bcd06f3102c4d9]));
          }

          jfloat MutableValueFloat::_get_value() const
          {
            return env->getFloatField(this$, fids$[fid_value]);
          }

          void MutableValueFloat::_set_value(jfloat a0) const
          {
            env->setFloatField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueFloat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueFloat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueFloat_init_(t_MutableValueFloat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueFloat_compareSameType(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_copy(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_duplicate(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_equalsSameType(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_hashCode(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_toObject(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_get__value(t_MutableValueFloat *self, void *data);
          static int t_MutableValueFloat_set__value(t_MutableValueFloat *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueFloat__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueFloat, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueFloat__methods_[] = {
            DECLARE_METHOD(t_MutableValueFloat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueFloat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueFloat, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MutableValueFloat)[] = {
            { Py_tp_methods, t_MutableValueFloat__methods_ },
            { Py_tp_init, (void *) t_MutableValueFloat_init_ },
            { Py_tp_getset, t_MutableValueFloat__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MutableValueFloat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::mutable$::MutableValue),
            NULL
          };

          DEFINE_TYPE(MutableValueFloat, t_MutableValueFloat, MutableValueFloat);

          void t_MutableValueFloat::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueFloat), &PY_TYPE_DEF(MutableValueFloat), module, "MutableValueFloat", 0);
          }

          void t_MutableValueFloat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValueFloat), "class_", make_descriptor(MutableValueFloat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValueFloat), "wrapfn_", make_descriptor(t_MutableValueFloat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValueFloat), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueFloat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueFloat::initializeClass, 1)))
              return NULL;
            return t_MutableValueFloat::wrap_Object(MutableValueFloat(((t_MutableValueFloat *) arg)->object.this$));
          }
          static PyObject *t_MutableValueFloat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueFloat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueFloat_init_(t_MutableValueFloat *self, PyObject *args, PyObject *kwds)
          {
            MutableValueFloat object((jobject) NULL);

            INT_CALL(object = MutableValueFloat());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueFloat_compareSameType(t_MutableValueFloat *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(MutableValueFloat), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueFloat_copy(t_MutableValueFloat *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(MutableValueFloat), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueFloat_duplicate(t_MutableValueFloat *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(PY_TYPE(MutableValueFloat), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueFloat_equalsSameType(t_MutableValueFloat *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(MutableValueFloat), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueFloat_hashCode(t_MutableValueFloat *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(MutableValueFloat), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueFloat_toObject(t_MutableValueFloat *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(MutableValueFloat), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueFloat_get__value(t_MutableValueFloat *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_value());
            return PyFloat_FromDouble((double) value);
          }
          static int t_MutableValueFloat_set__value(t_MutableValueFloat *self, PyObject *arg, void *data)
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MatchesIterator.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/MatchesIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MatchesIterator::class$ = NULL;
        jmethodID *MatchesIterator::mids$ = NULL;
        bool MatchesIterator::live$ = false;

        jclass MatchesIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MatchesIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_endOffset_9972fcc56b44e79d] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_endPosition_9972fcc56b44e79d] = env->getMethodID(cls, "endPosition", "()I");
            mids$[mid_getQuery_cbf839a480265450] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_getSubMatches_f62a1cfba0155bff] = env->getMethodID(cls, "getSubMatches", "()Lorg/apache/lucene/search/MatchesIterator;");
            mids$[mid_next_8454bd5aa23fd11e] = env->getMethodID(cls, "next", "()Z");
            mids$[mid_startOffset_9972fcc56b44e79d] = env->getMethodID(cls, "startOffset", "()I");
            mids$[mid_startPosition_9972fcc56b44e79d] = env->getMethodID(cls, "startPosition", "()I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint MatchesIterator::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_9972fcc56b44e79d]);
        }

        jint MatchesIterator::endPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_endPosition_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::Query MatchesIterator::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_cbf839a480265450]));
        }

        MatchesIterator MatchesIterator::getSubMatches() const
        {
          return MatchesIterator(env->callObjectMethod(this$, mids$[mid_getSubMatches_f62a1cfba0155bff]));
        }

        jboolean MatchesIterator::next() const
        {
          return env->callBooleanMethod(this$, mids$[mid_next_8454bd5aa23fd11e]);
        }

        jint MatchesIterator::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_9972fcc56b44e79d]);
        }

        jint MatchesIterator::startPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_startPosition_9972fcc56b44e79d]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MatchesIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MatchesIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MatchesIterator_endOffset(t_MatchesIterator *self);
        static PyObject *t_MatchesIterator_endPosition(t_MatchesIterator *self);
        static PyObject *t_MatchesIterator_getQuery(t_MatchesIterator *self);
        static PyObject *t_MatchesIterator_getSubMatches(t_MatchesIterator *self);
        static PyObject *t_MatchesIterator_next(t_MatchesIterator *self);
        static PyObject *t_MatchesIterator_startOffset(t_MatchesIterator *self);
        static PyObject *t_MatchesIterator_startPosition(t_MatchesIterator *self);
        static PyObject *t_MatchesIterator_get__query(t_MatchesIterator *self, void *data);
        static PyObject *t_MatchesIterator_get__subMatches(t_MatchesIterator *self, void *data);
        static PyGetSetDef t_MatchesIterator__fields_[] = {
          DECLARE_GET_FIELD(t_MatchesIterator, query),
          DECLARE_GET_FIELD(t_MatchesIterator, subMatches),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MatchesIterator__methods_[] = {
          DECLARE_METHOD(t_MatchesIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MatchesIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MatchesIterator, endOffset, METH_NOARGS),
          DECLARE_METHOD(t_MatchesIterator, endPosition, METH_NOARGS),
          DECLARE_METHOD(t_MatchesIterator, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_MatchesIterator, getSubMatches, METH_NOARGS),
          DECLARE_METHOD(t_MatchesIterator, next, METH_NOARGS),
          DECLARE_METHOD(t_MatchesIterator, startOffset, METH_NOARGS),
          DECLARE_METHOD(t_MatchesIterator, startPosition, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MatchesIterator)[] = {
          { Py_tp_methods, t_MatchesIterator__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_MatchesIterator__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MatchesIterator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MatchesIterator, t_MatchesIterator, MatchesIterator);

        void t_MatchesIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(MatchesIterator), &PY_TYPE_DEF(MatchesIterator), module, "MatchesIterator", 0);
        }

        void t_MatchesIterator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MatchesIterator), "class_", make_descriptor(MatchesIterator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MatchesIterator), "wrapfn_", make_descriptor(t_MatchesIterator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MatchesIterator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MatchesIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MatchesIterator::initializeClass, 1)))
            return NULL;
          return t_MatchesIterator::wrap_Object(MatchesIterator(((t_MatchesIterator *) arg)->object.this$));
        }
        static PyObject *t_MatchesIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MatchesIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MatchesIterator_endOffset(t_MatchesIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.endOffset());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_MatchesIterator_endPosition(t_MatchesIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.endPosition());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_MatchesIterator_getQuery(t_MatchesIterator *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_MatchesIterator_getSubMatches(t_MatchesIterator *self)
        {
          MatchesIterator result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubMatches());
          return t_MatchesIterator::wrap_Object(result);
        }

        static PyObject *t_MatchesIterator_next(t_MatchesIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.next());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MatchesIterator_startOffset(t_MatchesIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.startOffset());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_MatchesIterator_startPosition(t_MatchesIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.startPosition());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_MatchesIterator_get__query(t_MatchesIterator *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }

        static PyObject *t_MatchesIterator_get__subMatches(t_MatchesIterator *self, void *data)
        {
          MatchesIterator value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubMatches());
          return t_MatchesIterator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/LeafSimScorer.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *LeafSimScorer::class$ = NULL;
        jmethodID *LeafSimScorer::mids$ = NULL;
        bool LeafSimScorer::live$ = false;

        jclass LeafSimScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/LeafSimScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8cfc7cc31d48bebd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/Similarity$SimScorer;Lorg/apache/lucene/index/LeafReader;Ljava/lang/String;Z)V");
            mids$[mid_explain_4863a6cd39dc340e] = env->getMethodID(cls, "explain", "(ILorg/apache/lucene/search/Explanation;)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_getSimScorer_f3997483b3fd0bed] = env->getMethodID(cls, "getSimScorer", "()Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");
            mids$[mid_score_8b93519e5f6c2f28] = env->getMethodID(cls, "score", "(IF)F");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LeafSimScorer::LeafSimScorer(const ::org::apache::lucene::search::similarities::Similarity$SimScorer & a0, const ::org::apache::lucene::index::LeafReader & a1, const ::java::lang::String & a2, jboolean a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8cfc7cc31d48bebd, a0.this$, a1.this$, a2.this$, a3)) {}

        ::org::apache::lucene::search::Explanation LeafSimScorer::explain(jint a0, const ::org::apache::lucene::search::Explanation & a1) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_4863a6cd39dc340e], a0, a1.this$));
        }

        ::org::apache::lucene::search::similarities::Similarity$SimScorer LeafSimScorer::getSimScorer() const
        {
          return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_getSimScorer_f3997483b3fd0bed]));
        }

        jfloat LeafSimScorer::score(jint a0, jfloat a1) const
        {
          return env->callFloatMethod(this$, mids$[mid_score_8b93519e5f6c2f28], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_LeafSimScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LeafSimScorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LeafSimScorer_init_(t_LeafSimScorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LeafSimScorer_explain(t_LeafSimScorer *self, PyObject *args);
        static PyObject *t_LeafSimScorer_getSimScorer(t_LeafSimScorer *self);
        static PyObject *t_LeafSimScorer_score(t_LeafSimScorer *self, PyObject *args);
        static PyObject *t_LeafSimScorer_get__simScorer(t_LeafSimScorer *self, void *data);
        static PyGetSetDef t_LeafSimScorer__fields_[] = {
          DECLARE_GET_FIELD(t_LeafSimScorer, simScorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LeafSimScorer__methods_[] = {
          DECLARE_METHOD(t_LeafSimScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LeafSimScorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LeafSimScorer, explain, METH_VARARGS),
          DECLARE_METHOD(t_LeafSimScorer, getSimScorer, METH_NOARGS),
          DECLARE_METHOD(t_LeafSimScorer, score, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LeafSimScorer)[] = {
          { Py_tp_methods, t_LeafSimScorer__methods_ },
          { Py_tp_init, (void *) t_LeafSimScorer_init_ },
          { Py_tp_getset, t_LeafSimScorer__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LeafSimScorer)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LeafSimScorer, t_LeafSimScorer, LeafSimScorer);

        void t_LeafSimScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(LeafSimScorer), &PY_TYPE_DEF(LeafSimScorer), module, "LeafSimScorer", 0);
        }

        void t_LeafSimScorer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LeafSimScorer), "class_", make_descriptor(LeafSimScorer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LeafSimScorer), "wrapfn_", make_descriptor(t_LeafSimScorer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LeafSimScorer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LeafSimScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LeafSimScorer::initializeClass, 1)))
            return NULL;
          return t_LeafSimScorer::wrap_Object(LeafSimScorer(((t_LeafSimScorer *) arg)->object.this$));
        }
        static PyObject *t_LeafSimScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LeafSimScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LeafSimScorer_init_(t_LeafSimScorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::similarities::Similarity$SimScorer a0((jobject) NULL);
          ::org::apache::lucene::index::LeafReader a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          jboolean a3;
          LeafSimScorer object((jobject) NULL);

          if (!parseArgs(args, "kksZ", ::org::apache::lucene::search::similarities::Similarity$SimScorer::initializeClass, ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = LeafSimScorer(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LeafSimScorer_explain(t_LeafSimScorer *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::search::Explanation a1((jobject) NULL);
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.explain(a0, a1));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "explain", args);
          return NULL;
        }

        static PyObject *t_LeafSimScorer_getSimScorer(t_LeafSimScorer *self)
        {
          ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);
          OBJ_CALL(result = self->object.getSimScorer());
          return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
        }

        static PyObject *t_LeafSimScorer_score(t_LeafSimScorer *self, PyObject *args)
        {
          jint a0;
          jfloat a1;
          jfloat result;

          if (!parseArgs(args, "IF", &a0, &a1))
          {
            OBJ_CALL(result = self->object.score(a0, a1));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "score", args);
          return NULL;
        }

        static PyObject *t_LeafSimScorer_get__simScorer(t_LeafSimScorer *self, void *data)
        {
          ::org::apache::lucene::search::similarities::Similarity$SimScorer value((jobject) NULL);
          OBJ_CALL(value = self->object.getSimScorer());
          return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanBuilderBase.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanBuilderBase::class$ = NULL;
            jmethodID *SpanBuilderBase::mids$ = NULL;
            bool SpanBuilderBase::live$ = false;

            jclass SpanBuilderBase::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanBuilderBase");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanBuilderBase::SpanBuilderBase() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanBuilderBase_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanBuilderBase_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanBuilderBase_init_(t_SpanBuilderBase *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanBuilderBase__methods_[] = {
              DECLARE_METHOD(t_SpanBuilderBase, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanBuilderBase, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SpanBuilderBase)[] = {
              { Py_tp_methods, t_SpanBuilderBase__methods_ },
              { Py_tp_init, (void *) t_SpanBuilderBase_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SpanBuilderBase)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(SpanBuilderBase, t_SpanBuilderBase, SpanBuilderBase);

            void t_SpanBuilderBase::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanBuilderBase), &PY_TYPE_DEF(SpanBuilderBase), module, "SpanBuilderBase", 0);
            }

            void t_SpanBuilderBase::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanBuilderBase), "class_", make_descriptor(SpanBuilderBase::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanBuilderBase), "wrapfn_", make_descriptor(t_SpanBuilderBase::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanBuilderBase), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanBuilderBase_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanBuilderBase::initializeClass, 1)))
                return NULL;
              return t_SpanBuilderBase::wrap_Object(SpanBuilderBase(((t_SpanBuilderBase *) arg)->object.this$));
            }
            static PyObject *t_SpanBuilderBase_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanBuilderBase::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanBuilderBase_init_(t_SpanBuilderBase *self, PyObject *args, PyObject *kwds)
            {
              SpanBuilderBase object((jobject) NULL);

              INT_CALL(object = SpanBuilderBase());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseStemFilter::class$ = NULL;
          jmethodID *PortugueseStemFilter::mids$ = NULL;
          bool PortugueseStemFilter::live$ = false;

          jclass PortugueseStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseStemFilter::PortugueseStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean PortugueseStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseStemFilter_init_(t_PortugueseStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseStemFilter_incrementToken(t_PortugueseStemFilter *self, PyObject *args);

          static PyMethodDef t_PortugueseStemFilter__methods_[] = {
            DECLARE_METHOD(t_PortugueseStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PortugueseStemFilter)[] = {
            { Py_tp_methods, t_PortugueseStemFilter__methods_ },
            { Py_tp_init, (void *) t_PortugueseStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PortugueseStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(PortugueseStemFilter, t_PortugueseStemFilter, PortugueseStemFilter);

          void t_PortugueseStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseStemFilter), &PY_TYPE_DEF(PortugueseStemFilter), module, "PortugueseStemFilter", 0);
          }

          void t_PortugueseStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseStemFilter), "class_", make_descriptor(PortugueseStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseStemFilter), "wrapfn_", make_descriptor(t_PortugueseStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseStemFilter::initializeClass, 1)))
              return NULL;
            return t_PortugueseStemFilter::wrap_Object(PortugueseStemFilter(((t_PortugueseStemFilter *) arg)->object.this$));
          }
          static PyObject *t_PortugueseStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseStemFilter_init_(t_PortugueseStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PortugueseStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PortugueseStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseStemFilter_incrementToken(t_PortugueseStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(PortugueseStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BoostAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BoostAttribute::class$ = NULL;
        jmethodID *BoostAttribute::mids$ = NULL;
        bool BoostAttribute::live$ = false;
        jfloat BoostAttribute::DEFAULT_BOOST = (jfloat) 0;

        jclass BoostAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BoostAttribute");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getBoost_58aec2b64dff50c8] = env->getMethodID(cls, "getBoost", "()F");
            mids$[mid_setBoost_8e1d952dd65cdc3a] = env->getMethodID(cls, "setBoost", "(F)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DEFAULT_BOOST = env->getStaticFloatField(cls, "DEFAULT_BOOST");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jfloat BoostAttribute::getBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getBoost_58aec2b64dff50c8]);
        }

        void BoostAttribute::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_8e1d952dd65cdc3a], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BoostAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BoostAttribute_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BoostAttribute_getBoost(t_BoostAttribute *self);
        static PyObject *t_BoostAttribute_setBoost(t_BoostAttribute *self, PyObject *arg);
        static PyObject *t_BoostAttribute_get__boost(t_BoostAttribute *self, void *data);
        static int t_BoostAttribute_set__boost(t_BoostAttribute *self, PyObject *arg, void *data);
        static PyGetSetDef t_BoostAttribute__fields_[] = {
          DECLARE_GETSET_FIELD(t_BoostAttribute, boost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BoostAttribute__methods_[] = {
          DECLARE_METHOD(t_BoostAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostAttribute, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostAttribute, getBoost, METH_NOARGS),
          DECLARE_METHOD(t_BoostAttribute, setBoost, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BoostAttribute)[] = {
          { Py_tp_methods, t_BoostAttribute__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_BoostAttribute__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BoostAttribute)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::Attribute),
          NULL
        };

        DEFINE_TYPE(BoostAttribute, t_BoostAttribute, BoostAttribute);

        void t_BoostAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(BoostAttribute), &PY_TYPE_DEF(BoostAttribute), module, "BoostAttribute", 0);
        }

        void t_BoostAttribute::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BoostAttribute), "class_", make_descriptor(BoostAttribute::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BoostAttribute), "wrapfn_", make_descriptor(t_BoostAttribute::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BoostAttribute), "boxfn_", make_descriptor(boxObject));
          env->getClass(BoostAttribute::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(BoostAttribute), "DEFAULT_BOOST", make_descriptor(BoostAttribute::DEFAULT_BOOST));
        }

        static PyObject *t_BoostAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BoostAttribute::initializeClass, 1)))
            return NULL;
          return t_BoostAttribute::wrap_Object(BoostAttribute(((t_BoostAttribute *) arg)->object.this$));
        }
        static PyObject *t_BoostAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BoostAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BoostAttribute_getBoost(t_BoostAttribute *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_BoostAttribute_setBoost(t_BoostAttribute *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_BoostAttribute_get__boost(t_BoostAttribute *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_BoostAttribute_set__boost(t_BoostAttribute *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "boost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene84/Lucene84PostingsFormat$IntBlockTermState.h"
#include "org/apache/lucene/codecs/lucene84/Lucene84PostingsFormat$IntBlockTermState.h"
#include "org/apache/lucene/index/TermState.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene84 {

          ::java::lang::Class *Lucene84PostingsFormat$IntBlockTermState::class$ = NULL;
          jmethodID *Lucene84PostingsFormat$IntBlockTermState::mids$ = NULL;
          jfieldID *Lucene84PostingsFormat$IntBlockTermState::fids$ = NULL;
          bool Lucene84PostingsFormat$IntBlockTermState::live$ = false;

          jclass Lucene84PostingsFormat$IntBlockTermState::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene84/Lucene84PostingsFormat$IntBlockTermState");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clone_8880b3d74c257bd4] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/lucene84/Lucene84PostingsFormat$IntBlockTermState;");
              mids$[mid_copyFrom_4291efa1cd29ac2a] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/index/TermState;)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_docStartFP] = env->getFieldID(cls, "docStartFP", "J");
              fids$[fid_lastPosBlockOffset] = env->getFieldID(cls, "lastPosBlockOffset", "J");
              fids$[fid_payStartFP] = env->getFieldID(cls, "payStartFP", "J");
              fids$[fid_posStartFP] = env->getFieldID(cls, "posStartFP", "J");
              fids$[fid_singletonDocID] = env->getFieldID(cls, "singletonDocID", "I");
              fids$[fid_skipOffset] = env->getFieldID(cls, "skipOffset", "J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene84PostingsFormat$IntBlockTermState::Lucene84PostingsFormat$IntBlockTermState() : ::org::apache::lucene::codecs::BlockTermState(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          Lucene84PostingsFormat$IntBlockTermState Lucene84PostingsFormat$IntBlockTermState::clone() const
          {
            return Lucene84PostingsFormat$IntBlockTermState(env->callObjectMethod(this$, mids$[mid_clone_8880b3d74c257bd4]));
          }

          void Lucene84PostingsFormat$IntBlockTermState::copyFrom(const ::org::apache::lucene::index::TermState & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyFrom_4291efa1cd29ac2a], a0.this$);
          }

          ::java::lang::String Lucene84PostingsFormat$IntBlockTermState::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          jlong Lucene84PostingsFormat$IntBlockTermState::_get_docStartFP() const
          {
            return env->getLongField(this$, fids$[fid_docStartFP]);
          }

          void Lucene84PostingsFormat$IntBlockTermState::_set_docStartFP(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_docStartFP], a0);
          }

          jlong Lucene84PostingsFormat$IntBlockTermState::_get_lastPosBlockOffset() const
          {
            return env->getLongField(this$, fids$[fid_lastPosBlockOffset]);
          }

          void Lucene84PostingsFormat$IntBlockTermState::_set_lastPosBlockOffset(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_lastPosBlockOffset], a0);
          }

          jlong Lucene84PostingsFormat$IntBlockTermState::_get_payStartFP() const
          {
            return env->getLongField(this$, fids$[fid_payStartFP]);
          }

          void Lucene84PostingsFormat$IntBlockTermState::_set_payStartFP(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_payStartFP], a0);
          }

          jlong Lucene84PostingsFormat$IntBlockTermState::_get_posStartFP() const
          {
            return env->getLongField(this$, fids$[fid_posStartFP]);
          }

          void Lucene84PostingsFormat$IntBlockTermState::_set_posStartFP(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_posStartFP], a0);
          }

          jint Lucene84PostingsFormat$IntBlockTermState::_get_singletonDocID() const
          {
            return env->getIntField(this$, fids$[fid_singletonDocID]);
          }

          void Lucene84PostingsFormat$IntBlockTermState::_set_singletonDocID(jint a0) const
          {
            env->setIntField(this$, fids$[fid_singletonDocID], a0);
          }

          jlong Lucene84PostingsFormat$IntBlockTermState::_get_skipOffset() const
          {
            return env->getLongField(this$, fids$[fid_skipOffset]);
          }

          void Lucene84PostingsFormat$IntBlockTermState::_set_skipOffset(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_skipOffset], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene84 {
          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene84PostingsFormat$IntBlockTermState_init_(t_Lucene84PostingsFormat$IntBlockTermState *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_clone(t_Lucene84PostingsFormat$IntBlockTermState *self, PyObject *args);
          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_copyFrom(t_Lucene84PostingsFormat$IntBlockTermState *self, PyObject *args);
          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_toString(t_Lucene84PostingsFormat$IntBlockTermState *self, PyObject *args);
          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_get__docStartFP(t_Lucene84PostingsFormat$IntBlockTermState *self, void *data);
          static int t_Lucene84PostingsFormat$IntBlockTermState_set__docStartFP(t_Lucene84PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data);
          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_get__lastPosBlockOffset(t_Lucene84PostingsFormat$IntBlockTermState *self, void *data);
          static int t_Lucene84PostingsFormat$IntBlockTermState_set__lastPosBlockOffset(t_Lucene84PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data);
          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_get__payStartFP(t_Lucene84PostingsFormat$IntBlockTermState *self, void *data);
          static int t_Lucene84PostingsFormat$IntBlockTermState_set__payStartFP(t_Lucene84PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data);
          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_get__posStartFP(t_Lucene84PostingsFormat$IntBlockTermState *self, void *data);
          static int t_Lucene84PostingsFormat$IntBlockTermState_set__posStartFP(t_Lucene84PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data);
          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_get__singletonDocID(t_Lucene84PostingsFormat$IntBlockTermState *self, void *data);
          static int t_Lucene84PostingsFormat$IntBlockTermState_set__singletonDocID(t_Lucene84PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data);
          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_get__skipOffset(t_Lucene84PostingsFormat$IntBlockTermState *self, void *data);
          static int t_Lucene84PostingsFormat$IntBlockTermState_set__skipOffset(t_Lucene84PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data);

          static PyGetSetDef t_Lucene84PostingsFormat$IntBlockTermState__fields_[] = {
            DECLARE_GETSET_FIELD(t_Lucene84PostingsFormat$IntBlockTermState, docStartFP),
            DECLARE_GETSET_FIELD(t_Lucene84PostingsFormat$IntBlockTermState, lastPosBlockOffset),
            DECLARE_GETSET_FIELD(t_Lucene84PostingsFormat$IntBlockTermState, payStartFP),
            DECLARE_GETSET_FIELD(t_Lucene84PostingsFormat$IntBlockTermState, posStartFP),
            DECLARE_GETSET_FIELD(t_Lucene84PostingsFormat$IntBlockTermState, singletonDocID),
            DECLARE_GETSET_FIELD(t_Lucene84PostingsFormat$IntBlockTermState, skipOffset),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene84PostingsFormat$IntBlockTermState__methods_[] = {
            DECLARE_METHOD(t_Lucene84PostingsFormat$IntBlockTermState, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene84PostingsFormat$IntBlockTermState, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene84PostingsFormat$IntBlockTermState, clone, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84PostingsFormat$IntBlockTermState, copyFrom, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84PostingsFormat$IntBlockTermState, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene84PostingsFormat$IntBlockTermState)[] = {
            { Py_tp_methods, t_Lucene84PostingsFormat$IntBlockTermState__methods_ },
            { Py_tp_init, (void *) t_Lucene84PostingsFormat$IntBlockTermState_init_ },
            { Py_tp_getset, t_Lucene84PostingsFormat$IntBlockTermState__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene84PostingsFormat$IntBlockTermState)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::BlockTermState),
            NULL
          };

          DEFINE_TYPE(Lucene84PostingsFormat$IntBlockTermState, t_Lucene84PostingsFormat$IntBlockTermState, Lucene84PostingsFormat$IntBlockTermState);

          void t_Lucene84PostingsFormat$IntBlockTermState::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene84PostingsFormat$IntBlockTermState), &PY_TYPE_DEF(Lucene84PostingsFormat$IntBlockTermState), module, "Lucene84PostingsFormat$IntBlockTermState", 0);
          }

          void t_Lucene84PostingsFormat$IntBlockTermState::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene84PostingsFormat$IntBlockTermState), "class_", make_descriptor(Lucene84PostingsFormat$IntBlockTermState::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene84PostingsFormat$IntBlockTermState), "wrapfn_", make_descriptor(t_Lucene84PostingsFormat$IntBlockTermState::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene84PostingsFormat$IntBlockTermState), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene84PostingsFormat$IntBlockTermState::initializeClass, 1)))
              return NULL;
            return t_Lucene84PostingsFormat$IntBlockTermState::wrap_Object(Lucene84PostingsFormat$IntBlockTermState(((t_Lucene84PostingsFormat$IntBlockTermState *) arg)->object.this$));
          }
          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene84PostingsFormat$IntBlockTermState::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene84PostingsFormat$IntBlockTermState_init_(t_Lucene84PostingsFormat$IntBlockTermState *self, PyObject *args, PyObject *kwds)
          {
            Lucene84PostingsFormat$IntBlockTermState object((jobject) NULL);

            INT_CALL(object = Lucene84PostingsFormat$IntBlockTermState());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_clone(t_Lucene84PostingsFormat$IntBlockTermState *self, PyObject *args)
          {
            Lucene84PostingsFormat$IntBlockTermState result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_Lucene84PostingsFormat$IntBlockTermState::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene84PostingsFormat$IntBlockTermState), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_copyFrom(t_Lucene84PostingsFormat$IntBlockTermState *self, PyObject *args)
          {
            ::org::apache::lucene::index::TermState a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::TermState::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyFrom(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene84PostingsFormat$IntBlockTermState), (PyObject *) self, "copyFrom", args, 2);
          }

          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_toString(t_Lucene84PostingsFormat$IntBlockTermState *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Lucene84PostingsFormat$IntBlockTermState), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_get__docStartFP(t_Lucene84PostingsFormat$IntBlockTermState *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_docStartFP());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Lucene84PostingsFormat$IntBlockTermState_set__docStartFP(t_Lucene84PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_docStartFP(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "docStartFP", arg);
            return -1;
          }

          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_get__lastPosBlockOffset(t_Lucene84PostingsFormat$IntBlockTermState *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_lastPosBlockOffset());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Lucene84PostingsFormat$IntBlockTermState_set__lastPosBlockOffset(t_Lucene84PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_lastPosBlockOffset(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "lastPosBlockOffset", arg);
            return -1;
          }

          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_get__payStartFP(t_Lucene84PostingsFormat$IntBlockTermState *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_payStartFP());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Lucene84PostingsFormat$IntBlockTermState_set__payStartFP(t_Lucene84PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_payStartFP(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "payStartFP", arg);
            return -1;
          }

          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_get__posStartFP(t_Lucene84PostingsFormat$IntBlockTermState *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_posStartFP());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Lucene84PostingsFormat$IntBlockTermState_set__posStartFP(t_Lucene84PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_posStartFP(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "posStartFP", arg);
            return -1;
          }

          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_get__singletonDocID(t_Lucene84PostingsFormat$IntBlockTermState *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_singletonDocID());
            return PyLong_FromLong((long) value);
          }
          static int t_Lucene84PostingsFormat$IntBlockTermState_set__singletonDocID(t_Lucene84PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_singletonDocID(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "singletonDocID", arg);
            return -1;
          }

          static PyObject *t_Lucene84PostingsFormat$IntBlockTermState_get__skipOffset(t_Lucene84PostingsFormat$IntBlockTermState *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_skipOffset());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Lucene84PostingsFormat$IntBlockTermState_set__skipOffset(t_Lucene84PostingsFormat$IntBlockTermState *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_skipOffset(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "skipOffset", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ValueQueryNode.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ValueQueryNode::class$ = NULL;
              jmethodID *ValueQueryNode::mids$ = NULL;
              bool ValueQueryNode::live$ = false;

              jclass ValueQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ValueQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getValue_d6bcd06f3102c4d9] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
                  mids$[mid_setValue_d20f626183f72f7d] = env->getMethodID(cls, "setValue", "(Ljava/lang/Object;)V");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::Object ValueQueryNode::getValue() const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_d6bcd06f3102c4d9]));
              }

              void ValueQueryNode::setValue(const ::java::lang::Object & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setValue_d20f626183f72f7d], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ValueQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ValueQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ValueQueryNode_of_(t_ValueQueryNode *self, PyObject *args);
              static PyObject *t_ValueQueryNode_getValue(t_ValueQueryNode *self);
              static PyObject *t_ValueQueryNode_setValue(t_ValueQueryNode *self, PyObject *arg);
              static PyObject *t_ValueQueryNode_get__value(t_ValueQueryNode *self, void *data);
              static int t_ValueQueryNode_set__value(t_ValueQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_ValueQueryNode_get__parameters_(t_ValueQueryNode *self, void *data);
              static PyGetSetDef t_ValueQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_ValueQueryNode, value),
                DECLARE_GET_FIELD(t_ValueQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ValueQueryNode__methods_[] = {
                DECLARE_METHOD(t_ValueQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ValueQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ValueQueryNode, of_, METH_VARARGS),
                DECLARE_METHOD(t_ValueQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_ValueQueryNode, setValue, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(ValueQueryNode)[] = {
                { Py_tp_methods, t_ValueQueryNode__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { Py_tp_getset, t_ValueQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(ValueQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode),
                NULL
              };

              DEFINE_TYPE(ValueQueryNode, t_ValueQueryNode, ValueQueryNode);
              PyObject *t_ValueQueryNode::wrap_Object(const ValueQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ValueQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ValueQueryNode *self = (t_ValueQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_ValueQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ValueQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ValueQueryNode *self = (t_ValueQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_ValueQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(ValueQueryNode), &PY_TYPE_DEF(ValueQueryNode), module, "ValueQueryNode", 0);
              }

              void t_ValueQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(ValueQueryNode), "class_", make_descriptor(ValueQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ValueQueryNode), "wrapfn_", make_descriptor(t_ValueQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ValueQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ValueQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ValueQueryNode::initializeClass, 1)))
                  return NULL;
                return t_ValueQueryNode::wrap_Object(ValueQueryNode(((t_ValueQueryNode *) arg)->object.this$));
              }
              static PyObject *t_ValueQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ValueQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_ValueQueryNode_of_(t_ValueQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_ValueQueryNode_getValue(t_ValueQueryNode *self)
              {
                ::java::lang::Object result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
              }

              static PyObject *t_ValueQueryNode_setValue(t_ValueQueryNode *self, PyObject *arg)
              {
                ::java::lang::Object a0((jobject) NULL);

                if (!parseArg(arg, "O", self->parameters[0], &a0))
                {
                  OBJ_CALL(self->object.setValue(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setValue", arg);
                return NULL;
              }
              static PyObject *t_ValueQueryNode_get__parameters_(t_ValueQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }

              static PyObject *t_ValueQueryNode_get__value(t_ValueQueryNode *self, void *data)
              {
                ::java::lang::Object value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_Object::wrap_Object(value);
              }
              static int t_ValueQueryNode_set__value(t_ValueQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::Object value((jobject) NULL);
                  if (!parseArg(arg, "o", &value))
                  {
                    INT_CALL(self->object.setValue(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "value", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/LabelAndValue.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *LabelAndValue::class$ = NULL;
        jmethodID *LabelAndValue::mids$ = NULL;
        jfieldID *LabelAndValue::fids$ = NULL;
        bool LabelAndValue::live$ = false;

        jclass LabelAndValue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/LabelAndValue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c6d240346ba1ada2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Number;)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_label] = env->getFieldID(cls, "label", "Ljava/lang/String;");
            fids$[fid_value] = env->getFieldID(cls, "value", "Ljava/lang/Number;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LabelAndValue::LabelAndValue(const ::java::lang::String & a0, const ::java::lang::Number & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c6d240346ba1ada2, a0.this$, a1.this$)) {}

        jboolean LabelAndValue::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint LabelAndValue::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String LabelAndValue::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        ::java::lang::String LabelAndValue::_get_label() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_label]));
        }

        ::java::lang::Number LabelAndValue::_get_value() const
        {
          return ::java::lang::Number(env->getObjectField(this$, fids$[fid_value]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_LabelAndValue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LabelAndValue_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LabelAndValue_init_(t_LabelAndValue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LabelAndValue_equals(t_LabelAndValue *self, PyObject *args);
        static PyObject *t_LabelAndValue_hashCode(t_LabelAndValue *self, PyObject *args);
        static PyObject *t_LabelAndValue_toString(t_LabelAndValue *self, PyObject *args);
        static PyObject *t_LabelAndValue_get__label(t_LabelAndValue *self, void *data);
        static PyObject *t_LabelAndValue_get__value(t_LabelAndValue *self, void *data);

        static PyGetSetDef t_LabelAndValue__fields_[] = {
          DECLARE_GET_FIELD(t_LabelAndValue, label),
          DECLARE_GET_FIELD(t_LabelAndValue, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LabelAndValue__methods_[] = {
          DECLARE_METHOD(t_LabelAndValue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LabelAndValue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LabelAndValue, equals, METH_VARARGS),
          DECLARE_METHOD(t_LabelAndValue, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LabelAndValue, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LabelAndValue)[] = {
          { Py_tp_methods, t_LabelAndValue__methods_ },
          { Py_tp_init, (void *) t_LabelAndValue_init_ },
          { Py_tp_getset, t_LabelAndValue__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LabelAndValue)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LabelAndValue, t_LabelAndValue, LabelAndValue);

        void t_LabelAndValue::install(PyObject *module)
        {
          installType(&PY_TYPE(LabelAndValue), &PY_TYPE_DEF(LabelAndValue), module, "LabelAndValue", 0);
        }

        void t_LabelAndValue::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LabelAndValue), "class_", make_descriptor(LabelAndValue::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LabelAndValue), "wrapfn_", make_descriptor(t_LabelAndValue::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LabelAndValue), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LabelAndValue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LabelAndValue::initializeClass, 1)))
            return NULL;
          return t_LabelAndValue::wrap_Object(LabelAndValue(((t_LabelAndValue *) arg)->object.this$));
        }
        static PyObject *t_LabelAndValue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LabelAndValue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LabelAndValue_init_(t_LabelAndValue *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Number a1((jobject) NULL);
          LabelAndValue object((jobject) NULL);

          if (!parseArgs(args, "sO", ::java::lang::PY_TYPE(Number), &a0, &a1))
          {
            INT_CALL(object = LabelAndValue(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LabelAndValue_equals(t_LabelAndValue *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(LabelAndValue), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LabelAndValue_hashCode(t_LabelAndValue *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(LabelAndValue), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LabelAndValue_toString(t_LabelAndValue *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(LabelAndValue), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LabelAndValue_get__label(t_LabelAndValue *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_label());
          return j2p(value);
        }

        static PyObject *t_LabelAndValue_get__value(t_LabelAndValue *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object._get_value());
          return ::java::lang::t_Number::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *TotalTermFreqValueSource::class$ = NULL;
            jmethodID *TotalTermFreqValueSource::mids$ = NULL;
            bool TotalTermFreqValueSource::live$ = false;

            jclass TotalTermFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1329b9cc98226e6f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_createWeight_69d322032c5ae159] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TotalTermFreqValueSource::TotalTermFreqValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_1329b9cc98226e6f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            void TotalTermFreqValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_69d322032c5ae159], a0.this$, a1.this$);
            }

            ::java::lang::String TotalTermFreqValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean TotalTermFreqValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues TotalTermFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint TotalTermFreqValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }

            ::java::lang::String TotalTermFreqValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_db9b55ba01e03e4b]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_TotalTermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TotalTermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TotalTermFreqValueSource_init_(t_TotalTermFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TotalTermFreqValueSource_createWeight(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_description(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_equals(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_getValues(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_hashCode(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_name(t_TotalTermFreqValueSource *self);

            static PyMethodDef t_TotalTermFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_TotalTermFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(TotalTermFreqValueSource)[] = {
              { Py_tp_methods, t_TotalTermFreqValueSource__methods_ },
              { Py_tp_init, (void *) t_TotalTermFreqValueSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(TotalTermFreqValueSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::ValueSource),
              NULL
            };

            DEFINE_TYPE(TotalTermFreqValueSource, t_TotalTermFreqValueSource, TotalTermFreqValueSource);

            void t_TotalTermFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(TotalTermFreqValueSource), &PY_TYPE_DEF(TotalTermFreqValueSource), module, "TotalTermFreqValueSource", 0);
            }

            void t_TotalTermFreqValueSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(TotalTermFreqValueSource), "class_", make_descriptor(TotalTermFreqValueSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TotalTermFreqValueSource), "wrapfn_", make_descriptor(t_TotalTermFreqValueSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TotalTermFreqValueSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TotalTermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TotalTermFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_TotalTermFreqValueSource::wrap_Object(TotalTermFreqValueSource(((t_TotalTermFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_TotalTermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TotalTermFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TotalTermFreqValueSource_init_(t_TotalTermFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              TotalTermFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = TotalTermFreqValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TotalTermFreqValueSource_createWeight(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_description(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_equals(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_getValues(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_hashCode(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_name(t_TotalTermFreqValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/index/ImpactsEnum.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene84 {

          ::java::lang::Class *Lucene84PostingsReader::class$ = NULL;
          jmethodID *Lucene84PostingsReader::mids$ = NULL;
          bool Lucene84PostingsReader::live$ = false;

          jclass Lucene84PostingsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene84/Lucene84PostingsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_363fedc32cc1a1cf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentReadState;)V");
              mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_decodeTerm_96c712031f56c3ca] = env->getMethodID(cls, "decodeTerm", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
              mids$[mid_impacts_c827249ad6105c32] = env->getMethodID(cls, "impacts", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;I)Lorg/apache/lucene/index/ImpactsEnum;");
              mids$[mid_init_80eb712663869aa2] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/index/SegmentReadState;)V");
              mids$[mid_newTermState_ec21239f6d5a0c5b] = env->getMethodID(cls, "newTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");
              mids$[mid_postings_07f95f4d18ad7976] = env->getMethodID(cls, "postings", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/index/PostingsEnum;I)Lorg/apache/lucene/index/PostingsEnum;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene84PostingsReader::Lucene84PostingsReader(const ::org::apache::lucene::index::SegmentReadState & a0) : ::org::apache::lucene::codecs::PostingsReaderBase(env->newObject(initializeClass, &mids$, mid_init$_363fedc32cc1a1cf, a0.this$)) {}

          void Lucene84PostingsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
          }

          void Lucene84PostingsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void Lucene84PostingsReader::decodeTerm(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::index::FieldInfo & a1, const ::org::apache::lucene::codecs::BlockTermState & a2, jboolean a3) const
          {
            env->callVoidMethod(this$, mids$[mid_decodeTerm_96c712031f56c3ca], a0.this$, a1.this$, a2.this$, a3);
          }

          ::org::apache::lucene::index::ImpactsEnum Lucene84PostingsReader::impacts(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, jint a2) const
          {
            return ::org::apache::lucene::index::ImpactsEnum(env->callObjectMethod(this$, mids$[mid_impacts_c827249ad6105c32], a0.this$, a1.this$, a2));
          }

          void Lucene84PostingsReader::init(const ::org::apache::lucene::store::IndexInput & a0, const ::org::apache::lucene::index::SegmentReadState & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_init_80eb712663869aa2], a0.this$, a1.this$);
          }

          ::org::apache::lucene::codecs::BlockTermState Lucene84PostingsReader::newTermState() const
          {
            return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_newTermState_ec21239f6d5a0c5b]));
          }

          ::org::apache::lucene::index::PostingsEnum Lucene84PostingsReader::postings(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::index::PostingsEnum & a2, jint a3) const
          {
            return ::org::apache::lucene::index::PostingsEnum(env->callObjectMethod(this$, mids$[mid_postings_07f95f4d18ad7976], a0.this$, a1.this$, a2.this$, a3));
          }

          jlong Lucene84PostingsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          ::java::lang::String Lucene84PostingsReader::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene84 {
          static PyObject *t_Lucene84PostingsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene84PostingsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene84PostingsReader_init_(t_Lucene84PostingsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene84PostingsReader_checkIntegrity(t_Lucene84PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene84PostingsReader_close(t_Lucene84PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene84PostingsReader_decodeTerm(t_Lucene84PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene84PostingsReader_impacts(t_Lucene84PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene84PostingsReader_init(t_Lucene84PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene84PostingsReader_newTermState(t_Lucene84PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene84PostingsReader_postings(t_Lucene84PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene84PostingsReader_ramBytesUsed(t_Lucene84PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene84PostingsReader_toString(t_Lucene84PostingsReader *self, PyObject *args);

          static PyMethodDef t_Lucene84PostingsReader__methods_[] = {
            DECLARE_METHOD(t_Lucene84PostingsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene84PostingsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene84PostingsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84PostingsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84PostingsReader, decodeTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84PostingsReader, impacts, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84PostingsReader, init, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84PostingsReader, newTermState, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84PostingsReader, postings, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84PostingsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84PostingsReader, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene84PostingsReader)[] = {
            { Py_tp_methods, t_Lucene84PostingsReader__methods_ },
            { Py_tp_init, (void *) t_Lucene84PostingsReader_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene84PostingsReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::PostingsReaderBase),
            NULL
          };

          DEFINE_TYPE(Lucene84PostingsReader, t_Lucene84PostingsReader, Lucene84PostingsReader);

          void t_Lucene84PostingsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene84PostingsReader), &PY_TYPE_DEF(Lucene84PostingsReader), module, "Lucene84PostingsReader", 0);
          }

          void t_Lucene84PostingsReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene84PostingsReader), "class_", make_descriptor(Lucene84PostingsReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene84PostingsReader), "wrapfn_", make_descriptor(t_Lucene84PostingsReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene84PostingsReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene84PostingsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene84PostingsReader::initializeClass, 1)))
              return NULL;
            return t_Lucene84PostingsReader::wrap_Object(Lucene84PostingsReader(((t_Lucene84PostingsReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene84PostingsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene84PostingsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene84PostingsReader_init_(t_Lucene84PostingsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            Lucene84PostingsReader object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              INT_CALL(object = Lucene84PostingsReader(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene84PostingsReader_checkIntegrity(t_Lucene84PostingsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene84PostingsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_Lucene84PostingsReader_close(t_Lucene84PostingsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene84PostingsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene84PostingsReader_decodeTerm(t_Lucene84PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfo a1((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a2((jobject) NULL);
            jboolean a3;

            if (!parseArgs(args, "kkkZ", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.decodeTerm(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene84PostingsReader), (PyObject *) self, "decodeTerm", args, 2);
          }

          static PyObject *t_Lucene84PostingsReader_impacts(t_Lucene84PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::index::ImpactsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.impacts(a0, a1, a2));
              return ::org::apache::lucene::index::t_ImpactsEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene84PostingsReader), (PyObject *) self, "impacts", args, 2);
          }

          static PyObject *t_Lucene84PostingsReader_init(t_Lucene84PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentReadState a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.init(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene84PostingsReader), (PyObject *) self, "init", args, 2);
          }

          static PyObject *t_Lucene84PostingsReader_newTermState(t_Lucene84PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.newTermState());
              return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene84PostingsReader), (PyObject *) self, "newTermState", args, 2);
          }

          static PyObject *t_Lucene84PostingsReader_postings(t_Lucene84PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
            ::org::apache::lucene::index::PostingsEnum a2((jobject) NULL);
            jint a3;
            ::org::apache::lucene::index::PostingsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::index::PostingsEnum::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.postings(a0, a1, a2, a3));
              return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene84PostingsReader), (PyObject *) self, "postings", args, 2);
          }

          static PyObject *t_Lucene84PostingsReader_ramBytesUsed(t_Lucene84PostingsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(Lucene84PostingsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_Lucene84PostingsReader_toString(t_Lucene84PostingsReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Lucene84PostingsReader), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/PersistentSnapshotDeletionPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *PersistentSnapshotDeletionPolicy::class$ = NULL;
        jmethodID *PersistentSnapshotDeletionPolicy::mids$ = NULL;
        bool PersistentSnapshotDeletionPolicy::live$ = false;
        ::java::lang::String *PersistentSnapshotDeletionPolicy::SNAPSHOTS_PREFIX = NULL;

        jclass PersistentSnapshotDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/PersistentSnapshotDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_70d2cfd2842a2611] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexDeletionPolicy;Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_init$_76c8bd5de273e038] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexDeletionPolicy;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)V");
            mids$[mid_getLastSaveFile_db9b55ba01e03e4b] = env->getMethodID(cls, "getLastSaveFile", "()Ljava/lang/String;");
            mids$[mid_release_d519b4b694415d4a] = env->getMethodID(cls, "release", "(Lorg/apache/lucene/index/IndexCommit;)V");
            mids$[mid_release_9c778c9bce6694df] = env->getMethodID(cls, "release", "(J)V");
            mids$[mid_snapshot_4abaa8d830d8ecf1] = env->getMethodID(cls, "snapshot", "()Lorg/apache/lucene/index/IndexCommit;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            SNAPSHOTS_PREFIX = new ::java::lang::String(env->getStaticObjectField(cls, "SNAPSHOTS_PREFIX", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PersistentSnapshotDeletionPolicy::PersistentSnapshotDeletionPolicy(const ::org::apache::lucene::index::IndexDeletionPolicy & a0, const ::org::apache::lucene::store::Directory & a1) : ::org::apache::lucene::index::SnapshotDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_70d2cfd2842a2611, a0.this$, a1.this$)) {}

        PersistentSnapshotDeletionPolicy::PersistentSnapshotDeletionPolicy(const ::org::apache::lucene::index::IndexDeletionPolicy & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::index::IndexWriterConfig$OpenMode & a2) : ::org::apache::lucene::index::SnapshotDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_76c8bd5de273e038, a0.this$, a1.this$, a2.this$)) {}

        ::java::lang::String PersistentSnapshotDeletionPolicy::getLastSaveFile() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLastSaveFile_db9b55ba01e03e4b]));
        }

        void PersistentSnapshotDeletionPolicy::release(const ::org::apache::lucene::index::IndexCommit & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_d519b4b694415d4a], a0.this$);
        }

        void PersistentSnapshotDeletionPolicy::release(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_9c778c9bce6694df], a0);
        }

        ::org::apache::lucene::index::IndexCommit PersistentSnapshotDeletionPolicy::snapshot() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_snapshot_4abaa8d830d8ecf1]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_PersistentSnapshotDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PersistentSnapshotDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PersistentSnapshotDeletionPolicy_init_(t_PersistentSnapshotDeletionPolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PersistentSnapshotDeletionPolicy_getLastSaveFile(t_PersistentSnapshotDeletionPolicy *self);
        static PyObject *t_PersistentSnapshotDeletionPolicy_release(t_PersistentSnapshotDeletionPolicy *self, PyObject *args);
        static PyObject *t_PersistentSnapshotDeletionPolicy_snapshot(t_PersistentSnapshotDeletionPolicy *self, PyObject *args);
        static PyObject *t_PersistentSnapshotDeletionPolicy_get__lastSaveFile(t_PersistentSnapshotDeletionPolicy *self, void *data);
        static PyGetSetDef t_PersistentSnapshotDeletionPolicy__fields_[] = {
          DECLARE_GET_FIELD(t_PersistentSnapshotDeletionPolicy, lastSaveFile),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PersistentSnapshotDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, getLastSaveFile, METH_NOARGS),
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, release, METH_VARARGS),
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, snapshot, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PersistentSnapshotDeletionPolicy)[] = {
          { Py_tp_methods, t_PersistentSnapshotDeletionPolicy__methods_ },
          { Py_tp_init, (void *) t_PersistentSnapshotDeletionPolicy_init_ },
          { Py_tp_getset, t_PersistentSnapshotDeletionPolicy__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PersistentSnapshotDeletionPolicy)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::SnapshotDeletionPolicy),
          NULL
        };

        DEFINE_TYPE(PersistentSnapshotDeletionPolicy, t_PersistentSnapshotDeletionPolicy, PersistentSnapshotDeletionPolicy);

        void t_PersistentSnapshotDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(PersistentSnapshotDeletionPolicy), &PY_TYPE_DEF(PersistentSnapshotDeletionPolicy), module, "PersistentSnapshotDeletionPolicy", 0);
        }

        void t_PersistentSnapshotDeletionPolicy::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PersistentSnapshotDeletionPolicy), "class_", make_descriptor(PersistentSnapshotDeletionPolicy::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PersistentSnapshotDeletionPolicy), "wrapfn_", make_descriptor(t_PersistentSnapshotDeletionPolicy::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PersistentSnapshotDeletionPolicy), "boxfn_", make_descriptor(boxObject));
          env->getClass(PersistentSnapshotDeletionPolicy::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(PersistentSnapshotDeletionPolicy), "SNAPSHOTS_PREFIX", make_descriptor(j2p(*PersistentSnapshotDeletionPolicy::SNAPSHOTS_PREFIX)));
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PersistentSnapshotDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_PersistentSnapshotDeletionPolicy::wrap_Object(PersistentSnapshotDeletionPolicy(((t_PersistentSnapshotDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_PersistentSnapshotDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PersistentSnapshotDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PersistentSnapshotDeletionPolicy_init_(t_PersistentSnapshotDeletionPolicy *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::IndexDeletionPolicy a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              PersistentSnapshotDeletionPolicy object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = PersistentSnapshotDeletionPolicy(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::index::IndexDeletionPolicy a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              ::org::apache::lucene::index::IndexWriterConfig$OpenMode a2((jobject) NULL);
              PyTypeObject **p2;
              PersistentSnapshotDeletionPolicy object((jobject) NULL);

              if (!parseArgs(args, "kkK", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::parameters_))
              {
                INT_CALL(object = PersistentSnapshotDeletionPolicy(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_getLastSaveFile(t_PersistentSnapshotDeletionPolicy *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getLastSaveFile());
          return j2p(result);
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_release(t_PersistentSnapshotDeletionPolicy *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
              {
                OBJ_CALL(self->object.release(a0));
                Py_RETURN_NONE;
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.release(a0));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(PY_TYPE(PersistentSnapshotDeletionPolicy), (PyObject *) self, "release", args, 2);
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_snapshot(t_PersistentSnapshotDeletionPolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.snapshot());
            return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
          }

          return callSuper(PY_TYPE(PersistentSnapshotDeletionPolicy), (PyObject *) self, "snapshot", args, 2);
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_get__lastSaveFile(t_PersistentSnapshotDeletionPolicy *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLastSaveFile());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SimpleFragmentsBuilder::class$ = NULL;
          jmethodID *SimpleFragmentsBuilder::mids$ = NULL;
          bool SimpleFragmentsBuilder::live$ = false;

          jclass SimpleFragmentsBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_2c463cdfa06312df] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/BoundaryScanner;)V");
              mids$[mid_init$_d48c3e85eaff05d2] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_init$_68492bd2e5986041] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/vectorhighlight/BoundaryScanner;)V");
              mids$[mid_getWeightedFragInfoList_e420eeaadf0bcd20] = env->getMethodID(cls, "getWeightedFragInfoList", "(Ljava/util/List;)Ljava/util/List;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleFragmentsBuilder::SimpleFragmentsBuilder() : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          SimpleFragmentsBuilder::SimpleFragmentsBuilder(const ::org::apache::lucene::search::vectorhighlight::BoundaryScanner & a0) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_2c463cdfa06312df, a0.this$)) {}

          SimpleFragmentsBuilder::SimpleFragmentsBuilder(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_d48c3e85eaff05d2, a0.this$, a1.this$)) {}

          SimpleFragmentsBuilder::SimpleFragmentsBuilder(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::search::vectorhighlight::BoundaryScanner & a2) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_68492bd2e5986041, a0.this$, a1.this$, a2.this$)) {}

          ::java::util::List SimpleFragmentsBuilder::getWeightedFragInfoList(const ::java::util::List & a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getWeightedFragInfoList_e420eeaadf0bcd20], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SimpleFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleFragmentsBuilder_init_(t_SimpleFragmentsBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleFragmentsBuilder_getWeightedFragInfoList(t_SimpleFragmentsBuilder *self, PyObject *args);

          static PyMethodDef t_SimpleFragmentsBuilder__methods_[] = {
            DECLARE_METHOD(t_SimpleFragmentsBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragmentsBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragmentsBuilder, getWeightedFragInfoList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleFragmentsBuilder)[] = {
            { Py_tp_methods, t_SimpleFragmentsBuilder__methods_ },
            { Py_tp_init, (void *) t_SimpleFragmentsBuilder_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleFragmentsBuilder)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder),
            NULL
          };

          DEFINE_TYPE(SimpleFragmentsBuilder, t_SimpleFragmentsBuilder, SimpleFragmentsBuilder);

          void t_SimpleFragmentsBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleFragmentsBuilder), &PY_TYPE_DEF(SimpleFragmentsBuilder), module, "SimpleFragmentsBuilder", 0);
          }

          void t_SimpleFragmentsBuilder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFragmentsBuilder), "class_", make_descriptor(SimpleFragmentsBuilder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFragmentsBuilder), "wrapfn_", make_descriptor(t_SimpleFragmentsBuilder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFragmentsBuilder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleFragmentsBuilder::initializeClass, 1)))
              return NULL;
            return t_SimpleFragmentsBuilder::wrap_Object(SimpleFragmentsBuilder(((t_SimpleFragmentsBuilder *) arg)->object.this$));
          }
          static PyObject *t_SimpleFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleFragmentsBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleFragmentsBuilder_init_(t_SimpleFragmentsBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleFragmentsBuilder object((jobject) NULL);

                INT_CALL(object = SimpleFragmentsBuilder());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::search::vectorhighlight::BoundaryScanner a0((jobject) NULL);
                SimpleFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::vectorhighlight::BoundaryScanner::initializeClass, &a0))
                {
                  INT_CALL(object = SimpleFragmentsBuilder(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                SimpleFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "[s[s", &a0, &a1))
                {
                  INT_CALL(object = SimpleFragmentsBuilder(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::BoundaryScanner a2((jobject) NULL);
                SimpleFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "[s[sk", ::org::apache::lucene::search::vectorhighlight::BoundaryScanner::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SimpleFragmentsBuilder(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleFragmentsBuilder_getWeightedFragInfoList(t_SimpleFragmentsBuilder *self, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.getWeightedFragInfoList(a0));
              return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo));
            }

            return callSuper(PY_TYPE(SimpleFragmentsBuilder), (PyObject *) self, "getWeightedFragInfoList", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BlendedTermQuery$DisjunctionMaxRewrite.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BlendedTermQuery$DisjunctionMaxRewrite::class$ = NULL;
        jmethodID *BlendedTermQuery$DisjunctionMaxRewrite::mids$ = NULL;
        bool BlendedTermQuery$DisjunctionMaxRewrite::live$ = false;

        jclass BlendedTermQuery$DisjunctionMaxRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BlendedTermQuery$DisjunctionMaxRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8e1d952dd65cdc3a] = env->getMethodID(cls, "<init>", "(F)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_1e167f3b9bc63b74] = env->getMethodID(cls, "rewrite", "([Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/Query;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BlendedTermQuery$DisjunctionMaxRewrite::BlendedTermQuery$DisjunctionMaxRewrite(jfloat a0) : ::org::apache::lucene::search::BlendedTermQuery$RewriteMethod(env->newObject(initializeClass, &mids$, mid_init$_8e1d952dd65cdc3a, a0)) {}

        jboolean BlendedTermQuery$DisjunctionMaxRewrite::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint BlendedTermQuery$DisjunctionMaxRewrite::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::Query BlendedTermQuery$DisjunctionMaxRewrite::rewrite(const JArray< ::org::apache::lucene::search::Query > & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_1e167f3b9bc63b74], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BlendedTermQuery$DisjunctionMaxRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BlendedTermQuery$DisjunctionMaxRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BlendedTermQuery$DisjunctionMaxRewrite_init_(t_BlendedTermQuery$DisjunctionMaxRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BlendedTermQuery$DisjunctionMaxRewrite_equals(t_BlendedTermQuery$DisjunctionMaxRewrite *self, PyObject *args);
        static PyObject *t_BlendedTermQuery$DisjunctionMaxRewrite_hashCode(t_BlendedTermQuery$DisjunctionMaxRewrite *self, PyObject *args);
        static PyObject *t_BlendedTermQuery$DisjunctionMaxRewrite_rewrite(t_BlendedTermQuery$DisjunctionMaxRewrite *self, PyObject *args);

        static PyMethodDef t_BlendedTermQuery$DisjunctionMaxRewrite__methods_[] = {
          DECLARE_METHOD(t_BlendedTermQuery$DisjunctionMaxRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BlendedTermQuery$DisjunctionMaxRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BlendedTermQuery$DisjunctionMaxRewrite, equals, METH_VARARGS),
          DECLARE_METHOD(t_BlendedTermQuery$DisjunctionMaxRewrite, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BlendedTermQuery$DisjunctionMaxRewrite, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BlendedTermQuery$DisjunctionMaxRewrite)[] = {
          { Py_tp_methods, t_BlendedTermQuery$DisjunctionMaxRewrite__methods_ },
          { Py_tp_init, (void *) t_BlendedTermQuery$DisjunctionMaxRewrite_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BlendedTermQuery$DisjunctionMaxRewrite)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::BlendedTermQuery$RewriteMethod),
          NULL
        };

        DEFINE_TYPE(BlendedTermQuery$DisjunctionMaxRewrite, t_BlendedTermQuery$DisjunctionMaxRewrite, BlendedTermQuery$DisjunctionMaxRewrite);

        void t_BlendedTermQuery$DisjunctionMaxRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(BlendedTermQuery$DisjunctionMaxRewrite), &PY_TYPE_DEF(BlendedTermQuery$DisjunctionMaxRewrite), module, "BlendedTermQuery$DisjunctionMaxRewrite", 0);
        }

        void t_BlendedTermQuery$DisjunctionMaxRewrite::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedTermQuery$DisjunctionMaxRewrite), "class_", make_descriptor(BlendedTermQuery$DisjunctionMaxRewrite::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedTermQuery$DisjunctionMaxRewrite), "wrapfn_", make_descriptor(t_BlendedTermQuery$DisjunctionMaxRewrite::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlendedTermQuery$DisjunctionMaxRewrite), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BlendedTermQuery$DisjunctionMaxRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BlendedTermQuery$DisjunctionMaxRewrite::initializeClass, 1)))
            return NULL;
          return t_BlendedTermQuery$DisjunctionMaxRewrite::wrap_Object(BlendedTermQuery$DisjunctionMaxRewrite(((t_BlendedTermQuery$DisjunctionMaxRewrite *) arg)->object.this$));
        }
        static PyObject *t_BlendedTermQuery$DisjunctionMaxRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BlendedTermQuery$DisjunctionMaxRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BlendedTermQuery$DisjunctionMaxRewrite_init_(t_BlendedTermQuery$DisjunctionMaxRewrite *self, PyObject *args, PyObject *kwds)
        {
          jfloat a0;
          BlendedTermQuery$DisjunctionMaxRewrite object((jobject) NULL);

          if (!parseArgs(args, "F", &a0))
          {
            INT_CALL(object = BlendedTermQuery$DisjunctionMaxRewrite(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BlendedTermQuery$DisjunctionMaxRewrite_equals(t_BlendedTermQuery$DisjunctionMaxRewrite *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(BlendedTermQuery$DisjunctionMaxRewrite), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BlendedTermQuery$DisjunctionMaxRewrite_hashCode(t_BlendedTermQuery$DisjunctionMaxRewrite *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(BlendedTermQuery$DisjunctionMaxRewrite), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BlendedTermQuery$DisjunctionMaxRewrite_rewrite(t_BlendedTermQuery$DisjunctionMaxRewrite *self, PyObject *args)
        {
          JArray< ::org::apache::lucene::search::Query > a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "[k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(BlendedTermQuery$DisjunctionMaxRewrite), (PyObject *) self, "rewrite", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool$PrepareCommitFailException.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool$CommitFailException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TwoPhaseCommitTool::class$ = NULL;
        jmethodID *TwoPhaseCommitTool::mids$ = NULL;
        bool TwoPhaseCommitTool::live$ = false;

        jclass TwoPhaseCommitTool::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TwoPhaseCommitTool");

            mids$ = new jmethodID[max_mid];
            mids$[mid_execute_8deca1539a0cbb4e] = env->getStaticMethodID(cls, "execute", "([Lorg/apache/lucene/index/TwoPhaseCommit;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TwoPhaseCommitTool::execute(const JArray< ::org::apache::lucene::index::TwoPhaseCommit > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_execute_8deca1539a0cbb4e], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TwoPhaseCommitTool_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommitTool_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommitTool_execute(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_TwoPhaseCommitTool__methods_[] = {
          DECLARE_METHOD(t_TwoPhaseCommitTool, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommitTool, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommitTool, execute, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TwoPhaseCommitTool)[] = {
          { Py_tp_methods, t_TwoPhaseCommitTool__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TwoPhaseCommitTool)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(TwoPhaseCommitTool, t_TwoPhaseCommitTool, TwoPhaseCommitTool);

        void t_TwoPhaseCommitTool::install(PyObject *module)
        {
          installType(&PY_TYPE(TwoPhaseCommitTool), &PY_TYPE_DEF(TwoPhaseCommitTool), module, "TwoPhaseCommitTool", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(TwoPhaseCommitTool), "CommitFailException", make_descriptor(&PY_TYPE_DEF(TwoPhaseCommitTool$CommitFailException)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TwoPhaseCommitTool), "PrepareCommitFailException", make_descriptor(&PY_TYPE_DEF(TwoPhaseCommitTool$PrepareCommitFailException)));
        }

        void t_TwoPhaseCommitTool::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TwoPhaseCommitTool), "class_", make_descriptor(TwoPhaseCommitTool::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TwoPhaseCommitTool), "wrapfn_", make_descriptor(t_TwoPhaseCommitTool::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TwoPhaseCommitTool), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TwoPhaseCommitTool_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TwoPhaseCommitTool::initializeClass, 1)))
            return NULL;
          return t_TwoPhaseCommitTool::wrap_Object(TwoPhaseCommitTool(((t_TwoPhaseCommitTool *) arg)->object.this$));
        }
        static PyObject *t_TwoPhaseCommitTool_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TwoPhaseCommitTool::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TwoPhaseCommitTool_execute(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::org::apache::lucene::index::TwoPhaseCommit > a0((jobject) NULL);

          if (!parseArg(arg, "[k", ::org::apache::lucene::index::TwoPhaseCommit::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::TwoPhaseCommitTool::execute(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "execute", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/MultiFacetQuery.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *MultiFacetQuery::class$ = NULL;
        jmethodID *MultiFacetQuery::mids$ = NULL;
        bool MultiFacetQuery::live$ = false;

        jclass MultiFacetQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/MultiFacetQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_17ef1a8884f31440] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[[Ljava/lang/String;)V");
            mids$[mid_init$_69cd59aa5c114a2a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/FacetsConfig;Ljava/lang/String;[[Ljava/lang/String;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiFacetQuery::MultiFacetQuery(const ::java::lang::String & a0, const JArray< JArray< ::java::lang::String > > & a1) : ::org::apache::lucene::search::TermInSetQuery(env->newObject(initializeClass, &mids$, mid_init$_17ef1a8884f31440, a0.this$, a1.this$)) {}

        MultiFacetQuery::MultiFacetQuery(const ::org::apache::lucene::facet::FacetsConfig & a0, const ::java::lang::String & a1, const JArray< JArray< ::java::lang::String > > & a2) : ::org::apache::lucene::search::TermInSetQuery(env->newObject(initializeClass, &mids$, mid_init$_69cd59aa5c114a2a, a0.this$, a1.this$, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_MultiFacetQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFacetQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiFacetQuery_init_(t_MultiFacetQuery *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_MultiFacetQuery__methods_[] = {
          DECLARE_METHOD(t_MultiFacetQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFacetQuery, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiFacetQuery)[] = {
          { Py_tp_methods, t_MultiFacetQuery__methods_ },
          { Py_tp_init, (void *) t_MultiFacetQuery_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiFacetQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::TermInSetQuery),
          NULL
        };

        DEFINE_TYPE(MultiFacetQuery, t_MultiFacetQuery, MultiFacetQuery);

        void t_MultiFacetQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiFacetQuery), &PY_TYPE_DEF(MultiFacetQuery), module, "MultiFacetQuery", 0);
        }

        void t_MultiFacetQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFacetQuery), "class_", make_descriptor(MultiFacetQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFacetQuery), "wrapfn_", make_descriptor(t_MultiFacetQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFacetQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiFacetQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiFacetQuery::initializeClass, 1)))
            return NULL;
          return t_MultiFacetQuery::wrap_Object(MultiFacetQuery(((t_MultiFacetQuery *) arg)->object.this$));
        }
        static PyObject *t_MultiFacetQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiFacetQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiFacetQuery_init_(t_MultiFacetQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< JArray< ::java::lang::String > > a1((jobject) NULL);
              MultiFacetQuery object((jobject) NULL);

              if (!parseArgs(args, "s[[s", &a0, &a1))
              {
                INT_CALL(object = MultiFacetQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::facet::FacetsConfig a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              JArray< JArray< ::java::lang::String > > a2((jobject) NULL);
              MultiFacetQuery object((jobject) NULL);

              if (!parseArgs(args, "ks[[s", ::org::apache::lucene::facet::FacetsConfig::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = MultiFacetQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/NormalizationH3.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *NormalizationH3::class$ = NULL;
          jmethodID *NormalizationH3::mids$ = NULL;
          bool NormalizationH3::live$ = false;

          jclass NormalizationH3::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/NormalizationH3");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_8e1d952dd65cdc3a] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_explain_77a68ba236144920] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_getMu_58aec2b64dff50c8] = env->getMethodID(cls, "getMu", "()F");
              mids$[mid_tfn_761ab1c432346fd0] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizationH3::NormalizationH3() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          NormalizationH3::NormalizationH3(jfloat a0) : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_8e1d952dd65cdc3a, a0)) {}

          ::org::apache::lucene::search::Explanation NormalizationH3::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_77a68ba236144920], a0.this$, a1, a2));
          }

          jfloat NormalizationH3::getMu() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMu_58aec2b64dff50c8]);
          }

          jdouble NormalizationH3::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_tfn_761ab1c432346fd0], a0.this$, a1, a2);
          }

          ::java::lang::String NormalizationH3::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_NormalizationH3_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizationH3_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizationH3_init_(t_NormalizationH3 *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizationH3_explain(t_NormalizationH3 *self, PyObject *args);
          static PyObject *t_NormalizationH3_getMu(t_NormalizationH3 *self);
          static PyObject *t_NormalizationH3_tfn(t_NormalizationH3 *self, PyObject *args);
          static PyObject *t_NormalizationH3_toString(t_NormalizationH3 *self, PyObject *args);
          static PyObject *t_NormalizationH3_get__mu(t_NormalizationH3 *self, void *data);
          static PyGetSetDef t_NormalizationH3__fields_[] = {
            DECLARE_GET_FIELD(t_NormalizationH3, mu),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NormalizationH3__methods_[] = {
            DECLARE_METHOD(t_NormalizationH3, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH3, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH3, explain, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationH3, getMu, METH_NOARGS),
            DECLARE_METHOD(t_NormalizationH3, tfn, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationH3, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NormalizationH3)[] = {
            { Py_tp_methods, t_NormalizationH3__methods_ },
            { Py_tp_init, (void *) t_NormalizationH3_init_ },
            { Py_tp_getset, t_NormalizationH3__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NormalizationH3)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Normalization),
            NULL
          };

          DEFINE_TYPE(NormalizationH3, t_NormalizationH3, NormalizationH3);

          void t_NormalizationH3::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizationH3), &PY_TYPE_DEF(NormalizationH3), module, "NormalizationH3", 0);
          }

          void t_NormalizationH3::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalizationH3), "class_", make_descriptor(NormalizationH3::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalizationH3), "wrapfn_", make_descriptor(t_NormalizationH3::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalizationH3), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizationH3_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizationH3::initializeClass, 1)))
              return NULL;
            return t_NormalizationH3::wrap_Object(NormalizationH3(((t_NormalizationH3 *) arg)->object.this$));
          }
          static PyObject *t_NormalizationH3_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizationH3::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizationH3_init_(t_NormalizationH3 *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NormalizationH3 object((jobject) NULL);

                INT_CALL(object = NormalizationH3());
                self->object = object;
                break;
              }
             case 1:
              {
                jfloat a0;
                NormalizationH3 object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = NormalizationH3(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NormalizationH3_explain(t_NormalizationH3 *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(PY_TYPE(NormalizationH3), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_NormalizationH3_getMu(t_NormalizationH3 *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMu());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_NormalizationH3_tfn(t_NormalizationH3 *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            jdouble result;

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(NormalizationH3), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_NormalizationH3_toString(t_NormalizationH3 *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(NormalizationH3), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NormalizationH3_get__mu(t_NormalizationH3 *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMu());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/CatalanStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *CatalanStemmer::class$ = NULL;
        jmethodID *CatalanStemmer::mids$ = NULL;
        bool CatalanStemmer::live$ = false;

        jclass CatalanStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/CatalanStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CatalanStemmer::CatalanStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean CatalanStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint CatalanStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean CatalanStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_CatalanStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CatalanStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CatalanStemmer_init_(t_CatalanStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CatalanStemmer_equals(t_CatalanStemmer *self, PyObject *args);
        static PyObject *t_CatalanStemmer_hashCode(t_CatalanStemmer *self, PyObject *args);
        static PyObject *t_CatalanStemmer_stem(t_CatalanStemmer *self, PyObject *args);

        static PyMethodDef t_CatalanStemmer__methods_[] = {
          DECLARE_METHOD(t_CatalanStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CatalanStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CatalanStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_CatalanStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CatalanStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CatalanStemmer)[] = {
          { Py_tp_methods, t_CatalanStemmer__methods_ },
          { Py_tp_init, (void *) t_CatalanStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CatalanStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(CatalanStemmer, t_CatalanStemmer, CatalanStemmer);

        void t_CatalanStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(CatalanStemmer), &PY_TYPE_DEF(CatalanStemmer), module, "CatalanStemmer", 0);
        }

        void t_CatalanStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CatalanStemmer), "class_", make_descriptor(CatalanStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CatalanStemmer), "wrapfn_", make_descriptor(t_CatalanStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CatalanStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CatalanStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CatalanStemmer::initializeClass, 1)))
            return NULL;
          return t_CatalanStemmer::wrap_Object(CatalanStemmer(((t_CatalanStemmer *) arg)->object.this$));
        }
        static PyObject *t_CatalanStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CatalanStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CatalanStemmer_init_(t_CatalanStemmer *self, PyObject *args, PyObject *kwds)
        {
          CatalanStemmer object((jobject) NULL);

          INT_CALL(object = CatalanStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_CatalanStemmer_equals(t_CatalanStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(CatalanStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CatalanStemmer_hashCode(t_CatalanStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(CatalanStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CatalanStemmer_stem(t_CatalanStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(CatalanStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/ByteSequenceOutputs.h"
#include "org/apache/lucene/util/fst/ByteSequenceOutputs.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *ByteSequenceOutputs::class$ = NULL;
          jmethodID *ByteSequenceOutputs::mids$ = NULL;
          bool ByteSequenceOutputs::live$ = false;

          jclass ByteSequenceOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/ByteSequenceOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_3b1869bcd9268245] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_common_3b1869bcd9268245] = env->getMethodID(cls, "common", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getNoOutput_7af2ea2e37ce82b8] = env->getMethodID(cls, "getNoOutput", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getSingleton_d0df74ff84295d24] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/ByteSequenceOutputs;");
              mids$[mid_outputToString_2b6942d1baf39302] = env->getMethodID(cls, "outputToString", "(Lorg/apache/lucene/util/BytesRef;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_6f6ee5bba7f22d4c] = env->getMethodID(cls, "ramBytesUsed", "(Lorg/apache/lucene/util/BytesRef;)J");
              mids$[mid_read_7e2b7f8d071430cf] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_skipOutput_be8da68faa81682c] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_3b1869bcd9268245] = env->getMethodID(cls, "subtract", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_write_a1a1d144eae6beb1] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::add(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_add_3b1869bcd9268245], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::common(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_common_3b1869bcd9268245], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::getNoOutput() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getNoOutput_7af2ea2e37ce82b8]));
          }

          ByteSequenceOutputs ByteSequenceOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return ByteSequenceOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_d0df74ff84295d24]));
          }

          ::java::lang::String ByteSequenceOutputs::outputToString(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_2b6942d1baf39302], a0.this$));
          }

          jlong ByteSequenceOutputs::ramBytesUsed(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_6f6ee5bba7f22d4c], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_read_7e2b7f8d071430cf], a0.this$));
          }

          void ByteSequenceOutputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_be8da68faa81682c], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::subtract(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_subtract_3b1869bcd9268245], a0.this$, a1.this$));
          }

          ::java::lang::String ByteSequenceOutputs::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          void ByteSequenceOutputs::write(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_a1a1d144eae6beb1], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_ByteSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ByteSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ByteSequenceOutputs_of_(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_add(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_common(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_getNoOutput(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_ByteSequenceOutputs_outputToString(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_ramBytesUsed(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_read(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_skipOutput(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_subtract(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_toString(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_write(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_get__noOutput(t_ByteSequenceOutputs *self, void *data);
          static PyObject *t_ByteSequenceOutputs_get__singleton(t_ByteSequenceOutputs *self, void *data);
          static PyObject *t_ByteSequenceOutputs_get__parameters_(t_ByteSequenceOutputs *self, void *data);
          static PyGetSetDef t_ByteSequenceOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_ByteSequenceOutputs, noOutput),
            DECLARE_GET_FIELD(t_ByteSequenceOutputs, singleton),
            DECLARE_GET_FIELD(t_ByteSequenceOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ByteSequenceOutputs__methods_[] = {
            DECLARE_METHOD(t_ByteSequenceOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ByteSequenceOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ByteSequenceOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_ByteSequenceOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, skipOutput, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, toString, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ByteSequenceOutputs)[] = {
            { Py_tp_methods, t_ByteSequenceOutputs__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_ByteSequenceOutputs__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ByteSequenceOutputs)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::fst::Outputs),
            NULL
          };

          DEFINE_TYPE(ByteSequenceOutputs, t_ByteSequenceOutputs, ByteSequenceOutputs);
          PyObject *t_ByteSequenceOutputs::wrap_Object(const ByteSequenceOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ByteSequenceOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ByteSequenceOutputs *self = (t_ByteSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ByteSequenceOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ByteSequenceOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ByteSequenceOutputs *self = (t_ByteSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ByteSequenceOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(ByteSequenceOutputs), &PY_TYPE_DEF(ByteSequenceOutputs), module, "ByteSequenceOutputs", 0);
          }

          void t_ByteSequenceOutputs::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ByteSequenceOutputs), "class_", make_descriptor(ByteSequenceOutputs::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ByteSequenceOutputs), "wrapfn_", make_descriptor(t_ByteSequenceOutputs::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ByteSequenceOutputs), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ByteSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ByteSequenceOutputs::initializeClass, 1)))
              return NULL;
            return t_ByteSequenceOutputs::wrap_Object(ByteSequenceOutputs(((t_ByteSequenceOutputs *) arg)->object.this$));
          }
          static PyObject *t_ByteSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ByteSequenceOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ByteSequenceOutputs_of_(t_ByteSequenceOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_ByteSequenceOutputs_add(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_common(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_getNoOutput(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_getSingleton(PyTypeObject *type)
          {
            ByteSequenceOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::ByteSequenceOutputs::getSingleton());
            return t_ByteSequenceOutputs::wrap_Object(result);
          }

          static PyObject *t_ByteSequenceOutputs_outputToString(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_ramBytesUsed(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_read(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_skipOutput(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "skipOutput", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_subtract(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_toString(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_write(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_ByteSequenceOutputs_get__parameters_(t_ByteSequenceOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_ByteSequenceOutputs_get__noOutput(t_ByteSequenceOutputs *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_ByteSequenceOutputs_get__singleton(t_ByteSequenceOutputs *self, void *data)
          {
            ByteSequenceOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_ByteSequenceOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/BaseFragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FragListBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *BaseFragListBuilder::class$ = NULL;
          jmethodID *BaseFragListBuilder::mids$ = NULL;
          bool BaseFragListBuilder::live$ = false;
          jint BaseFragListBuilder::MARGIN_DEFAULT = (jint) 0;
          jint BaseFragListBuilder::MIN_FRAG_CHAR_SIZE_FACTOR = (jint) 0;

          jclass BaseFragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/BaseFragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_createFieldFragList_6dafac4c97f99656] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");
              mids$[mid_acceptPhrase_b88103572c2dcc25] = env->getMethodID(cls, "acceptPhrase", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo;II)Z");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              MARGIN_DEFAULT = env->getStaticIntField(cls, "MARGIN_DEFAULT");
              MIN_FRAG_CHAR_SIZE_FACTOR = env->getStaticIntField(cls, "MIN_FRAG_CHAR_SIZE_FACTOR");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BaseFragListBuilder::BaseFragListBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          BaseFragListBuilder::BaseFragListBuilder(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_BaseFragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BaseFragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BaseFragListBuilder_init_(t_BaseFragListBuilder *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_BaseFragListBuilder__methods_[] = {
            DECLARE_METHOD(t_BaseFragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BaseFragListBuilder, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BaseFragListBuilder)[] = {
            { Py_tp_methods, t_BaseFragListBuilder__methods_ },
            { Py_tp_init, (void *) t_BaseFragListBuilder_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BaseFragListBuilder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BaseFragListBuilder, t_BaseFragListBuilder, BaseFragListBuilder);

          void t_BaseFragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(BaseFragListBuilder), &PY_TYPE_DEF(BaseFragListBuilder), module, "BaseFragListBuilder", 0);
          }

          void t_BaseFragListBuilder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BaseFragListBuilder), "class_", make_descriptor(BaseFragListBuilder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BaseFragListBuilder), "wrapfn_", make_descriptor(t_BaseFragListBuilder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BaseFragListBuilder), "boxfn_", make_descriptor(boxObject));
            env->getClass(BaseFragListBuilder::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BaseFragListBuilder), "MARGIN_DEFAULT", make_descriptor(BaseFragListBuilder::MARGIN_DEFAULT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BaseFragListBuilder), "MIN_FRAG_CHAR_SIZE_FACTOR", make_descriptor(BaseFragListBuilder::MIN_FRAG_CHAR_SIZE_FACTOR));
          }

          static PyObject *t_BaseFragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BaseFragListBuilder::initializeClass, 1)))
              return NULL;
            return t_BaseFragListBuilder::wrap_Object(BaseFragListBuilder(((t_BaseFragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_BaseFragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BaseFragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BaseFragListBuilder_init_(t_BaseFragListBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                BaseFragListBuilder object((jobject) NULL);

                INT_CALL(object = BaseFragListBuilder());
                self->object = object;
                break;
              }
             case 1:
              {
                jint a0;
                BaseFragListBuilder object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = BaseFragListBuilder(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldValueHitQueue.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/search/LeafFieldComparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/FieldValueHitQueue.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldValueHitQueue::class$ = NULL;
        jmethodID *FieldValueHitQueue::mids$ = NULL;
        bool FieldValueHitQueue::live$ = false;

        jclass FieldValueHitQueue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldValueHitQueue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_create_199d803b90218dfa] = env->getStaticMethodID(cls, "create", "([Lorg/apache/lucene/search/SortField;I)Lorg/apache/lucene/search/FieldValueHitQueue;");
            mids$[mid_getComparators_9ea4bc24b88e775e] = env->getMethodID(cls, "getComparators", "()[Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_getComparators_b924d680b3cf1048] = env->getMethodID(cls, "getComparators", "(Lorg/apache/lucene/index/LeafReaderContext;)[Lorg/apache/lucene/search/LeafFieldComparator;");
            mids$[mid_getReverseMul_d2c45ef07a322466] = env->getMethodID(cls, "getReverseMul", "()[I");
            mids$[mid_lessThan_93b00f87a714d725] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/search/FieldValueHitQueue$Entry;Lorg/apache/lucene/search/FieldValueHitQueue$Entry;)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldValueHitQueue FieldValueHitQueue::create(const JArray< ::org::apache::lucene::search::SortField > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldValueHitQueue(env->callStaticObjectMethod(cls, mids$[mid_create_199d803b90218dfa], a0.this$, a1));
        }

        JArray< ::org::apache::lucene::search::FieldComparator > FieldValueHitQueue::getComparators() const
        {
          return JArray< ::org::apache::lucene::search::FieldComparator >(env->callObjectMethod(this$, mids$[mid_getComparators_9ea4bc24b88e775e]));
        }

        JArray< ::org::apache::lucene::search::LeafFieldComparator > FieldValueHitQueue::getComparators(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return JArray< ::org::apache::lucene::search::LeafFieldComparator >(env->callObjectMethod(this$, mids$[mid_getComparators_b924d680b3cf1048], a0.this$));
        }

        JArray< jint > FieldValueHitQueue::getReverseMul() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getReverseMul_d2c45ef07a322466]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FieldValueHitQueue$Entry.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldValueHitQueue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueHitQueue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueHitQueue_of_(t_FieldValueHitQueue *self, PyObject *args);
        static PyObject *t_FieldValueHitQueue_create(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldValueHitQueue_getComparators(t_FieldValueHitQueue *self, PyObject *args);
        static PyObject *t_FieldValueHitQueue_getReverseMul(t_FieldValueHitQueue *self);
        static PyObject *t_FieldValueHitQueue_get__comparators(t_FieldValueHitQueue *self, void *data);
        static PyObject *t_FieldValueHitQueue_get__reverseMul(t_FieldValueHitQueue *self, void *data);
        static PyObject *t_FieldValueHitQueue_get__parameters_(t_FieldValueHitQueue *self, void *data);
        static PyGetSetDef t_FieldValueHitQueue__fields_[] = {
          DECLARE_GET_FIELD(t_FieldValueHitQueue, comparators),
          DECLARE_GET_FIELD(t_FieldValueHitQueue, reverseMul),
          DECLARE_GET_FIELD(t_FieldValueHitQueue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldValueHitQueue__methods_[] = {
          DECLARE_METHOD(t_FieldValueHitQueue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueHitQueue, create, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue, getComparators, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueHitQueue, getReverseMul, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FieldValueHitQueue)[] = {
          { Py_tp_methods, t_FieldValueHitQueue__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_FieldValueHitQueue__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FieldValueHitQueue)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::PriorityQueue),
          NULL
        };

        DEFINE_TYPE(FieldValueHitQueue, t_FieldValueHitQueue, FieldValueHitQueue);
        PyObject *t_FieldValueHitQueue::wrap_Object(const FieldValueHitQueue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldValueHitQueue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldValueHitQueue *self = (t_FieldValueHitQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldValueHitQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldValueHitQueue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldValueHitQueue *self = (t_FieldValueHitQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldValueHitQueue::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldValueHitQueue), &PY_TYPE_DEF(FieldValueHitQueue), module, "FieldValueHitQueue", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldValueHitQueue), "Entry", make_descriptor(&PY_TYPE_DEF(FieldValueHitQueue$Entry)));
        }

        void t_FieldValueHitQueue::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldValueHitQueue), "class_", make_descriptor(FieldValueHitQueue::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldValueHitQueue), "wrapfn_", make_descriptor(t_FieldValueHitQueue::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldValueHitQueue), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldValueHitQueue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldValueHitQueue::initializeClass, 1)))
            return NULL;
          return t_FieldValueHitQueue::wrap_Object(FieldValueHitQueue(((t_FieldValueHitQueue *) arg)->object.this$));
        }
        static PyObject *t_FieldValueHitQueue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldValueHitQueue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldValueHitQueue_of_(t_FieldValueHitQueue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldValueHitQueue_create(PyTypeObject *type, PyObject *args)
        {
          JArray< ::org::apache::lucene::search::SortField > a0((jobject) NULL);
          jint a1;
          FieldValueHitQueue result((jobject) NULL);

          if (!parseArgs(args, "[kI", ::org::apache::lucene::search::SortField::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::FieldValueHitQueue::create(a0, a1));
            return t_FieldValueHitQueue::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "create", args);
          return NULL;
        }

        static PyObject *t_FieldValueHitQueue_getComparators(t_FieldValueHitQueue *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              JArray< ::org::apache::lucene::search::FieldComparator > result((jobject) NULL);
              OBJ_CALL(result = self->object.getComparators());
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_FieldComparator::wrap_jobject);
            }
            break;
           case 1:
            {
              ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
              JArray< ::org::apache::lucene::search::LeafFieldComparator > result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.getComparators(a0));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_LeafFieldComparator::wrap_jobject);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getComparators", args);
          return NULL;
        }

        static PyObject *t_FieldValueHitQueue_getReverseMul(t_FieldValueHitQueue *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.getReverseMul());
          return result.wrap();
        }
        static PyObject *t_FieldValueHitQueue_get__parameters_(t_FieldValueHitQueue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_FieldValueHitQueue_get__comparators(t_FieldValueHitQueue *self, void *data)
        {
          JArray< ::org::apache::lucene::search::FieldComparator > value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparators());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_FieldComparator::wrap_jobject);
        }

        static PyObject *t_FieldValueHitQueue_get__reverseMul(t_FieldValueHitQueue *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getReverseMul());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/NGramFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *NGramFilterFactory::class$ = NULL;
          jmethodID *NGramFilterFactory::mids$ = NULL;
          bool NGramFilterFactory::live$ = false;
          ::java::lang::String *NGramFilterFactory::NAME = NULL;

          jclass NGramFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/NGramFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4366615ad7077dae] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramFilterFactory::NGramFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter NGramFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_4366615ad7077dae], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_NGramFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramFilterFactory_init_(t_NGramFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramFilterFactory_create(t_NGramFilterFactory *self, PyObject *args);

          static PyMethodDef t_NGramFilterFactory__methods_[] = {
            DECLARE_METHOD(t_NGramFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NGramFilterFactory)[] = {
            { Py_tp_methods, t_NGramFilterFactory__methods_ },
            { Py_tp_init, (void *) t_NGramFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NGramFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(NGramFilterFactory, t_NGramFilterFactory, NGramFilterFactory);

          void t_NGramFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramFilterFactory), &PY_TYPE_DEF(NGramFilterFactory), module, "NGramFilterFactory", 0);
          }

          void t_NGramFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NGramFilterFactory), "class_", make_descriptor(NGramFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NGramFilterFactory), "wrapfn_", make_descriptor(t_NGramFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NGramFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(NGramFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(NGramFilterFactory), "NAME", make_descriptor(j2p(*NGramFilterFactory::NAME)));
          }

          static PyObject *t_NGramFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramFilterFactory::initializeClass, 1)))
              return NULL;
            return t_NGramFilterFactory::wrap_Object(NGramFilterFactory(((t_NGramFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_NGramFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramFilterFactory_init_(t_NGramFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NGramFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NGramFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramFilterFactory_create(t_NGramFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(NGramFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *LruTaxonomyWriterCache$LRUType::class$ = NULL;
            jmethodID *LruTaxonomyWriterCache$LRUType::mids$ = NULL;
            bool LruTaxonomyWriterCache$LRUType::live$ = false;
            LruTaxonomyWriterCache$LRUType *LruTaxonomyWriterCache$LRUType::LRU_HASHED = NULL;
            LruTaxonomyWriterCache$LRUType *LruTaxonomyWriterCache$LRUType::LRU_STRING = NULL;

            jclass LruTaxonomyWriterCache$LRUType::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType");

                mids$ = new jmethodID[max_mid];
                mids$[mid_valueOf_533236fd1a8b3446] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;");
                mids$[mid_values_de2090a9342fdcf4] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                LRU_HASHED = new LruTaxonomyWriterCache$LRUType(env->getStaticObjectField(cls, "LRU_HASHED", "Lorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;"));
                LRU_STRING = new LruTaxonomyWriterCache$LRUType(env->getStaticObjectField(cls, "LRU_STRING", "Lorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LruTaxonomyWriterCache$LRUType LruTaxonomyWriterCache$LRUType::valueOf(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return LruTaxonomyWriterCache$LRUType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_533236fd1a8b3446], a0.this$));
            }

            JArray< LruTaxonomyWriterCache$LRUType > LruTaxonomyWriterCache$LRUType::values()
            {
              jclass cls = env->getClass(initializeClass);
              return JArray< LruTaxonomyWriterCache$LRUType >(env->callStaticObjectMethod(cls, mids$[mid_values_de2090a9342fdcf4]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_LruTaxonomyWriterCache$LRUType_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_of_(t_LruTaxonomyWriterCache$LRUType *self, PyObject *args);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_valueOf(PyTypeObject *type, PyObject *args);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_values(PyTypeObject *type);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_get__parameters_(t_LruTaxonomyWriterCache$LRUType *self, void *data);
            static PyGetSetDef t_LruTaxonomyWriterCache$LRUType__fields_[] = {
              DECLARE_GET_FIELD(t_LruTaxonomyWriterCache$LRUType, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LruTaxonomyWriterCache$LRUType__methods_[] = {
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, of_, METH_VARARGS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, valueOf, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, values, METH_NOARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(LruTaxonomyWriterCache$LRUType)[] = {
              { Py_tp_methods, t_LruTaxonomyWriterCache$LRUType__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_LruTaxonomyWriterCache$LRUType__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(LruTaxonomyWriterCache$LRUType)[] = {
              &PY_TYPE_DEF(::java::lang::Enum),
              NULL
            };

            DEFINE_TYPE(LruTaxonomyWriterCache$LRUType, t_LruTaxonomyWriterCache$LRUType, LruTaxonomyWriterCache$LRUType);
            PyObject *t_LruTaxonomyWriterCache$LRUType::wrap_Object(const LruTaxonomyWriterCache$LRUType& object, PyTypeObject *p0)
            {
              PyObject *obj = t_LruTaxonomyWriterCache$LRUType::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_LruTaxonomyWriterCache$LRUType *self = (t_LruTaxonomyWriterCache$LRUType *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_LruTaxonomyWriterCache$LRUType::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_LruTaxonomyWriterCache$LRUType::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_LruTaxonomyWriterCache$LRUType *self = (t_LruTaxonomyWriterCache$LRUType *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_LruTaxonomyWriterCache$LRUType::install(PyObject *module)
            {
              installType(&PY_TYPE(LruTaxonomyWriterCache$LRUType), &PY_TYPE_DEF(LruTaxonomyWriterCache$LRUType), module, "LruTaxonomyWriterCache$LRUType", 0);
            }

            void t_LruTaxonomyWriterCache$LRUType::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(LruTaxonomyWriterCache$LRUType), "class_", make_descriptor(LruTaxonomyWriterCache$LRUType::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(LruTaxonomyWriterCache$LRUType), "wrapfn_", make_descriptor(t_LruTaxonomyWriterCache$LRUType::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(LruTaxonomyWriterCache$LRUType), "boxfn_", make_descriptor(boxObject));
              env->getClass(LruTaxonomyWriterCache$LRUType::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(LruTaxonomyWriterCache$LRUType), "LRU_HASHED", make_descriptor(t_LruTaxonomyWriterCache$LRUType::wrap_Object(*LruTaxonomyWriterCache$LRUType::LRU_HASHED)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(LruTaxonomyWriterCache$LRUType), "LRU_STRING", make_descriptor(t_LruTaxonomyWriterCache$LRUType::wrap_Object(*LruTaxonomyWriterCache$LRUType::LRU_STRING)));
            }

            static PyObject *t_LruTaxonomyWriterCache$LRUType_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LruTaxonomyWriterCache$LRUType::initializeClass, 1)))
                return NULL;
              return t_LruTaxonomyWriterCache$LRUType::wrap_Object(LruTaxonomyWriterCache$LRUType(((t_LruTaxonomyWriterCache$LRUType *) arg)->object.this$));
            }
            static PyObject *t_LruTaxonomyWriterCache$LRUType_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LruTaxonomyWriterCache$LRUType::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_LruTaxonomyWriterCache$LRUType_of_(t_LruTaxonomyWriterCache$LRUType *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_LruTaxonomyWriterCache$LRUType_valueOf(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              LruTaxonomyWriterCache$LRUType result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType::valueOf(a0));
                return t_LruTaxonomyWriterCache$LRUType::wrap_Object(result);
              }

              return callSuper(type, "valueOf", args, 2);
            }

            static PyObject *t_LruTaxonomyWriterCache$LRUType_values(PyTypeObject *type)
            {
              JArray< LruTaxonomyWriterCache$LRUType > result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType::values());
              return JArray<jobject>(result.this$).wrap(t_LruTaxonomyWriterCache$LRUType::wrap_jobject);
            }
            static PyObject *t_LruTaxonomyWriterCache$LRUType_get__parameters_(t_LruTaxonomyWriterCache$LRUType *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/LatLonPoint.h"
#include "org/apache/lucene/document/ShapeField$QueryRelation.h"
#include "org/apache/lucene/geo/Polygon.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/geo/LatLonGeometry.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *LatLonPoint::class$ = NULL;
        jmethodID *LatLonPoint::mids$ = NULL;
        bool LatLonPoint::live$ = false;
        jint LatLonPoint::BYTES = (jint) 0;
        ::org::apache::lucene::document::FieldType *LatLonPoint::TYPE = NULL;

        jclass LatLonPoint::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/LatLonPoint");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_afcb65cb7af1d628] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;DD)V");
            mids$[mid_newBoxQuery_a7f4245a62724723] = env->getStaticMethodID(cls, "newBoxQuery", "(Ljava/lang/String;DDDD)Lorg/apache/lucene/search/Query;");
            mids$[mid_newDistanceFeatureQuery_4a588aef530f566b] = env->getStaticMethodID(cls, "newDistanceFeatureQuery", "(Ljava/lang/String;FDDD)Lorg/apache/lucene/search/Query;");
            mids$[mid_newDistanceQuery_42a7446eeb740739] = env->getStaticMethodID(cls, "newDistanceQuery", "(Ljava/lang/String;DDD)Lorg/apache/lucene/search/Query;");
            mids$[mid_newGeometryQuery_5d57fa89ea474605] = env->getStaticMethodID(cls, "newGeometryQuery", "(Ljava/lang/String;Lorg/apache/lucene/document/ShapeField$QueryRelation;[Lorg/apache/lucene/geo/LatLonGeometry;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newPolygonQuery_5f62a5e692542815] = env->getStaticMethodID(cls, "newPolygonQuery", "(Ljava/lang/String;[Lorg/apache/lucene/geo/Polygon;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setLocationValue_75a41c58a4d52f7d] = env->getMethodID(cls, "setLocationValue", "(DD)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            BYTES = env->getStaticIntField(cls, "BYTES");
            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LatLonPoint::LatLonPoint(const ::java::lang::String & a0, jdouble a1, jdouble a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_afcb65cb7af1d628, a0.this$, a1, a2)) {}

        ::org::apache::lucene::search::Query LatLonPoint::newBoxQuery(const ::java::lang::String & a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newBoxQuery_a7f4245a62724723], a0.this$, a1, a2, a3, a4));
        }

        ::org::apache::lucene::search::Query LatLonPoint::newDistanceFeatureQuery(const ::java::lang::String & a0, jfloat a1, jdouble a2, jdouble a3, jdouble a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newDistanceFeatureQuery_4a588aef530f566b], a0.this$, a1, a2, a3, a4));
        }

        ::org::apache::lucene::search::Query LatLonPoint::newDistanceQuery(const ::java::lang::String & a0, jdouble a1, jdouble a2, jdouble a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newDistanceQuery_42a7446eeb740739], a0.this$, a1, a2, a3));
        }

        ::org::apache::lucene::search::Query LatLonPoint::newGeometryQuery(const ::java::lang::String & a0, const ::org::apache::lucene::document::ShapeField$QueryRelation & a1, const JArray< ::org::apache::lucene::geo::LatLonGeometry > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newGeometryQuery_5d57fa89ea474605], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query LatLonPoint::newPolygonQuery(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::geo::Polygon > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newPolygonQuery_5f62a5e692542815], a0.this$, a1.this$));
        }

        void LatLonPoint::setLocationValue(jdouble a0, jdouble a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setLocationValue_75a41c58a4d52f7d], a0, a1);
        }

        ::java::lang::String LatLonPoint::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_LatLonPoint_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LatLonPoint_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LatLonPoint_init_(t_LatLonPoint *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LatLonPoint_newBoxQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LatLonPoint_newDistanceFeatureQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LatLonPoint_newDistanceQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LatLonPoint_newGeometryQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LatLonPoint_newPolygonQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LatLonPoint_setLocationValue(t_LatLonPoint *self, PyObject *args);
        static PyObject *t_LatLonPoint_toString(t_LatLonPoint *self, PyObject *args);

        static PyMethodDef t_LatLonPoint__methods_[] = {
          DECLARE_METHOD(t_LatLonPoint, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LatLonPoint, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LatLonPoint, newBoxQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LatLonPoint, newDistanceFeatureQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LatLonPoint, newDistanceQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LatLonPoint, newGeometryQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LatLonPoint, newPolygonQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LatLonPoint, setLocationValue, METH_VARARGS),
          DECLARE_METHOD(t_LatLonPoint, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LatLonPoint)[] = {
          { Py_tp_methods, t_LatLonPoint__methods_ },
          { Py_tp_init, (void *) t_LatLonPoint_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LatLonPoint)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(LatLonPoint, t_LatLonPoint, LatLonPoint);

        void t_LatLonPoint::install(PyObject *module)
        {
          installType(&PY_TYPE(LatLonPoint), &PY_TYPE_DEF(LatLonPoint), module, "LatLonPoint", 0);
        }

        void t_LatLonPoint::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonPoint), "class_", make_descriptor(LatLonPoint::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonPoint), "wrapfn_", make_descriptor(t_LatLonPoint::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonPoint), "boxfn_", make_descriptor(boxObject));
          env->getClass(LatLonPoint::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonPoint), "BYTES", make_descriptor(LatLonPoint::BYTES));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonPoint), "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*LatLonPoint::TYPE)));
        }

        static PyObject *t_LatLonPoint_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LatLonPoint::initializeClass, 1)))
            return NULL;
          return t_LatLonPoint::wrap_Object(LatLonPoint(((t_LatLonPoint *) arg)->object.this$));
        }
        static PyObject *t_LatLonPoint_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LatLonPoint::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LatLonPoint_init_(t_LatLonPoint *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jdouble a1;
          jdouble a2;
          LatLonPoint object((jobject) NULL);

          if (!parseArgs(args, "sDD", &a0, &a1, &a2))
          {
            INT_CALL(object = LatLonPoint(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LatLonPoint_newBoxQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble a4;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sDDDD", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LatLonPoint::newBoxQuery(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newBoxQuery", args);
          return NULL;
        }

        static PyObject *t_LatLonPoint_newDistanceFeatureQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jfloat a1;
          jdouble a2;
          jdouble a3;
          jdouble a4;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sFDDD", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LatLonPoint::newDistanceFeatureQuery(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newDistanceFeatureQuery", args);
          return NULL;
        }

        static PyObject *t_LatLonPoint_newDistanceQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jdouble a1;
          jdouble a2;
          jdouble a3;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sDDD", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LatLonPoint::newDistanceQuery(a0, a1, a2, a3));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newDistanceQuery", args);
          return NULL;
        }

        static PyObject *t_LatLonPoint_newGeometryQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::document::ShapeField$QueryRelation a1((jobject) NULL);
          PyTypeObject **p1;
          JArray< ::org::apache::lucene::geo::LatLonGeometry > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sK[k", ::org::apache::lucene::document::ShapeField$QueryRelation::initializeClass, ::org::apache::lucene::geo::LatLonGeometry::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_ShapeField$QueryRelation::parameters_, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LatLonPoint::newGeometryQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newGeometryQuery", args);
          return NULL;
        }

        static PyObject *t_LatLonPoint_newPolygonQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::org::apache::lucene::geo::Polygon > a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[k", ::org::apache::lucene::geo::Polygon::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LatLonPoint::newPolygonQuery(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newPolygonQuery", args);
          return NULL;
        }

        static PyObject *t_LatLonPoint_setLocationValue(t_LatLonPoint *self, PyObject *args)
        {
          jdouble a0;
          jdouble a1;

          if (!parseArgs(args, "DD", &a0, &a1))
          {
            OBJ_CALL(self->object.setLocationValue(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLocationValue", args);
          return NULL;
        }

        static PyObject *t_LatLonPoint_toString(t_LatLonPoint *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(LatLonPoint), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/UniformSplitTerms.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *UniformSplitTerms::class$ = NULL;
          jmethodID *UniformSplitTerms::mids$ = NULL;
          bool UniformSplitTerms::live$ = false;

          jclass UniformSplitTerms::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/UniformSplitTerms");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getDictionaryRamBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "getDictionaryRamBytesUsed", "()J");
              mids$[mid_getDocCount_9972fcc56b44e79d] = env->getMethodID(cls, "getDocCount", "()I");
              mids$[mid_getMax_7af2ea2e37ce82b8] = env->getMethodID(cls, "getMax", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getSumDocFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "getSumDocFreq", "()J");
              mids$[mid_getSumTotalTermFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
              mids$[mid_hasFreqs_8454bd5aa23fd11e] = env->getMethodID(cls, "hasFreqs", "()Z");
              mids$[mid_hasOffsets_8454bd5aa23fd11e] = env->getMethodID(cls, "hasOffsets", "()Z");
              mids$[mid_hasPayloads_8454bd5aa23fd11e] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_hasPositions_8454bd5aa23fd11e] = env->getMethodID(cls, "hasPositions", "()Z");
              mids$[mid_intersect_20ab83ddd033f0a8] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");
              mids$[mid_iterator_3f9a21827903a65f] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/index/TermsEnum;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_ramBytesUsedWithoutDictionary_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsedWithoutDictionary", "()J");
              mids$[mid_size_2e5ae9edcb9b072f] = env->getMethodID(cls, "size", "()J");
              mids$[mid_checkIntersectAutomatonType_5cce1ea99900863e] = env->getMethodID(cls, "checkIntersectAutomatonType", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jlong UniformSplitTerms::getDictionaryRamBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_getDictionaryRamBytesUsed_2e5ae9edcb9b072f]);
          }

          jint UniformSplitTerms::getDocCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getDocCount_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::util::BytesRef UniformSplitTerms::getMax() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMax_7af2ea2e37ce82b8]));
          }

          jlong UniformSplitTerms::getSumDocFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getSumDocFreq_2e5ae9edcb9b072f]);
          }

          jlong UniformSplitTerms::getSumTotalTermFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_2e5ae9edcb9b072f]);
          }

          jboolean UniformSplitTerms::hasFreqs() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasFreqs_8454bd5aa23fd11e]);
          }

          jboolean UniformSplitTerms::hasOffsets() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasOffsets_8454bd5aa23fd11e]);
          }

          jboolean UniformSplitTerms::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_8454bd5aa23fd11e]);
          }

          jboolean UniformSplitTerms::hasPositions() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPositions_8454bd5aa23fd11e]);
          }

          ::org::apache::lucene::index::TermsEnum UniformSplitTerms::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_20ab83ddd033f0a8], a0.this$, a1.this$));
          }

          ::org::apache::lucene::index::TermsEnum UniformSplitTerms::iterator() const
          {
            return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_3f9a21827903a65f]));
          }

          jlong UniformSplitTerms::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          jlong UniformSplitTerms::ramBytesUsedWithoutDictionary() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsedWithoutDictionary_2e5ae9edcb9b072f]);
          }

          jlong UniformSplitTerms::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_2e5ae9edcb9b072f]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_UniformSplitTerms_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UniformSplitTerms_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UniformSplitTerms_getDictionaryRamBytesUsed(t_UniformSplitTerms *self);
          static PyObject *t_UniformSplitTerms_getDocCount(t_UniformSplitTerms *self, PyObject *args);
          static PyObject *t_UniformSplitTerms_getMax(t_UniformSplitTerms *self, PyObject *args);
          static PyObject *t_UniformSplitTerms_getSumDocFreq(t_UniformSplitTerms *self, PyObject *args);
          static PyObject *t_UniformSplitTerms_getSumTotalTermFreq(t_UniformSplitTerms *self, PyObject *args);
          static PyObject *t_UniformSplitTerms_hasFreqs(t_UniformSplitTerms *self, PyObject *args);
          static PyObject *t_UniformSplitTerms_hasOffsets(t_UniformSplitTerms *self, PyObject *args);
          static PyObject *t_UniformSplitTerms_hasPayloads(t_UniformSplitTerms *self, PyObject *args);
          static PyObject *t_UniformSplitTerms_hasPositions(t_UniformSplitTerms *self, PyObject *args);
          static PyObject *t_UniformSplitTerms_intersect(t_UniformSplitTerms *self, PyObject *args);
          static PyObject *t_UniformSplitTerms_iterator(t_UniformSplitTerms *self, PyObject *args);
          static PyObject *t_UniformSplitTerms_ramBytesUsed(t_UniformSplitTerms *self);
          static PyObject *t_UniformSplitTerms_ramBytesUsedWithoutDictionary(t_UniformSplitTerms *self);
          static PyObject *t_UniformSplitTerms_size(t_UniformSplitTerms *self, PyObject *args);
          static PyObject *t_UniformSplitTerms_get__dictionaryRamBytesUsed(t_UniformSplitTerms *self, void *data);
          static PyObject *t_UniformSplitTerms_get__docCount(t_UniformSplitTerms *self, void *data);
          static PyObject *t_UniformSplitTerms_get__max(t_UniformSplitTerms *self, void *data);
          static PyObject *t_UniformSplitTerms_get__sumDocFreq(t_UniformSplitTerms *self, void *data);
          static PyObject *t_UniformSplitTerms_get__sumTotalTermFreq(t_UniformSplitTerms *self, void *data);
          static PyGetSetDef t_UniformSplitTerms__fields_[] = {
            DECLARE_GET_FIELD(t_UniformSplitTerms, dictionaryRamBytesUsed),
            DECLARE_GET_FIELD(t_UniformSplitTerms, docCount),
            DECLARE_GET_FIELD(t_UniformSplitTerms, max),
            DECLARE_GET_FIELD(t_UniformSplitTerms, sumDocFreq),
            DECLARE_GET_FIELD(t_UniformSplitTerms, sumTotalTermFreq),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UniformSplitTerms__methods_[] = {
            DECLARE_METHOD(t_UniformSplitTerms, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UniformSplitTerms, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UniformSplitTerms, getDictionaryRamBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_UniformSplitTerms, getDocCount, METH_VARARGS),
            DECLARE_METHOD(t_UniformSplitTerms, getMax, METH_VARARGS),
            DECLARE_METHOD(t_UniformSplitTerms, getSumDocFreq, METH_VARARGS),
            DECLARE_METHOD(t_UniformSplitTerms, getSumTotalTermFreq, METH_VARARGS),
            DECLARE_METHOD(t_UniformSplitTerms, hasFreqs, METH_VARARGS),
            DECLARE_METHOD(t_UniformSplitTerms, hasOffsets, METH_VARARGS),
            DECLARE_METHOD(t_UniformSplitTerms, hasPayloads, METH_VARARGS),
            DECLARE_METHOD(t_UniformSplitTerms, hasPositions, METH_VARARGS),
            DECLARE_METHOD(t_UniformSplitTerms, intersect, METH_VARARGS),
            DECLARE_METHOD(t_UniformSplitTerms, iterator, METH_VARARGS),
            DECLARE_METHOD(t_UniformSplitTerms, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_UniformSplitTerms, ramBytesUsedWithoutDictionary, METH_NOARGS),
            DECLARE_METHOD(t_UniformSplitTerms, size, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(UniformSplitTerms)[] = {
            { Py_tp_methods, t_UniformSplitTerms__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_UniformSplitTerms__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(UniformSplitTerms)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::index::Terms),
            NULL
          };

          DEFINE_TYPE(UniformSplitTerms, t_UniformSplitTerms, UniformSplitTerms);

          void t_UniformSplitTerms::install(PyObject *module)
          {
            installType(&PY_TYPE(UniformSplitTerms), &PY_TYPE_DEF(UniformSplitTerms), module, "UniformSplitTerms", 0);
          }

          void t_UniformSplitTerms::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(UniformSplitTerms), "class_", make_descriptor(UniformSplitTerms::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UniformSplitTerms), "wrapfn_", make_descriptor(t_UniformSplitTerms::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UniformSplitTerms), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UniformSplitTerms_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UniformSplitTerms::initializeClass, 1)))
              return NULL;
            return t_UniformSplitTerms::wrap_Object(UniformSplitTerms(((t_UniformSplitTerms *) arg)->object.this$));
          }
          static PyObject *t_UniformSplitTerms_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UniformSplitTerms::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_UniformSplitTerms_getDictionaryRamBytesUsed(t_UniformSplitTerms *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getDictionaryRamBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_UniformSplitTerms_getDocCount(t_UniformSplitTerms *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getDocCount());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(UniformSplitTerms), (PyObject *) self, "getDocCount", args, 2);
          }

          static PyObject *t_UniformSplitTerms_getMax(t_UniformSplitTerms *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMax());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(UniformSplitTerms), (PyObject *) self, "getMax", args, 2);
          }

          static PyObject *t_UniformSplitTerms_getSumDocFreq(t_UniformSplitTerms *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSumDocFreq());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(UniformSplitTerms), (PyObject *) self, "getSumDocFreq", args, 2);
          }

          static PyObject *t_UniformSplitTerms_getSumTotalTermFreq(t_UniformSplitTerms *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSumTotalTermFreq());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(UniformSplitTerms), (PyObject *) self, "getSumTotalTermFreq", args, 2);
          }

          static PyObject *t_UniformSplitTerms_hasFreqs(t_UniformSplitTerms *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasFreqs());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(UniformSplitTerms), (PyObject *) self, "hasFreqs", args, 2);
          }

          static PyObject *t_UniformSplitTerms_hasOffsets(t_UniformSplitTerms *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasOffsets());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(UniformSplitTerms), (PyObject *) self, "hasOffsets", args, 2);
          }

          static PyObject *t_UniformSplitTerms_hasPayloads(t_UniformSplitTerms *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasPayloads());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(UniformSplitTerms), (PyObject *) self, "hasPayloads", args, 2);
          }

          static PyObject *t_UniformSplitTerms_hasPositions(t_UniformSplitTerms *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasPositions());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(UniformSplitTerms), (PyObject *) self, "hasPositions", args, 2);
          }

          static PyObject *t_UniformSplitTerms_intersect(t_UniformSplitTerms *self, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.intersect(a0, a1));
              return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(UniformSplitTerms), (PyObject *) self, "intersect", args, 2);
          }

          static PyObject *t_UniformSplitTerms_iterator(t_UniformSplitTerms *self, PyObject *args)
          {
            ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(UniformSplitTerms), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_UniformSplitTerms_ramBytesUsed(t_UniformSplitTerms *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_UniformSplitTerms_ramBytesUsedWithoutDictionary(t_UniformSplitTerms *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsedWithoutDictionary());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_UniformSplitTerms_size(t_UniformSplitTerms *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(UniformSplitTerms), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_UniformSplitTerms_get__dictionaryRamBytesUsed(t_UniformSplitTerms *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getDictionaryRamBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_UniformSplitTerms_get__docCount(t_UniformSplitTerms *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getDocCount());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_UniformSplitTerms_get__max(t_UniformSplitTerms *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getMax());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_UniformSplitTerms_get__sumDocFreq(t_UniformSplitTerms *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getSumDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_UniformSplitTerms_get__sumTotalTermFreq(t_UniformSplitTerms *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getSumTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/SyntaxParser.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeParseException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {

              ::java::lang::Class *SyntaxParser::class$ = NULL;
              jmethodID *SyntaxParser::mids$ = NULL;
              bool SyntaxParser::live$ = false;

              jclass SyntaxParser::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/parser/SyntaxParser");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_parse_19de468a7b0842c6] = env->getMethodID(cls, "parse", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode SyntaxParser::parse(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_parse_19de468a7b0842c6], a0.this$, a1.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {
              static PyObject *t_SyntaxParser_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SyntaxParser_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SyntaxParser_parse(t_SyntaxParser *self, PyObject *args);

              static PyMethodDef t_SyntaxParser__methods_[] = {
                DECLARE_METHOD(t_SyntaxParser, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SyntaxParser, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SyntaxParser, parse, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(SyntaxParser)[] = {
                { Py_tp_methods, t_SyntaxParser__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(SyntaxParser)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(SyntaxParser, t_SyntaxParser, SyntaxParser);

              void t_SyntaxParser::install(PyObject *module)
              {
                installType(&PY_TYPE(SyntaxParser), &PY_TYPE_DEF(SyntaxParser), module, "SyntaxParser", 0);
              }

              void t_SyntaxParser::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(SyntaxParser), "class_", make_descriptor(SyntaxParser::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(SyntaxParser), "wrapfn_", make_descriptor(t_SyntaxParser::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(SyntaxParser), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_SyntaxParser_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, SyntaxParser::initializeClass, 1)))
                  return NULL;
                return t_SyntaxParser::wrap_Object(SyntaxParser(((t_SyntaxParser *) arg)->object.this$));
              }
              static PyObject *t_SyntaxParser_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, SyntaxParser::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_SyntaxParser_parse(t_SyntaxParser *self, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "OO", ::java::lang::PY_TYPE(CharSequence), ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  OBJ_CALL(result = self->object.parse(a0, a1));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "parse", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/FuzzySuggester.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *FuzzySuggester::class$ = NULL;
            jmethodID *FuzzySuggester::mids$ = NULL;
            bool FuzzySuggester::live$ = false;
            jint FuzzySuggester::DEFAULT_MAX_EDITS = (jint) 0;
            jint FuzzySuggester::DEFAULT_MIN_FUZZY_LENGTH = (jint) 0;
            jint FuzzySuggester::DEFAULT_NON_FUZZY_PREFIX = (jint) 0;
            jboolean FuzzySuggester::DEFAULT_TRANSPOSITIONS = (jboolean) 0;
            jboolean FuzzySuggester::DEFAULT_UNICODE_AWARE = (jboolean) 0;

            jclass FuzzySuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/FuzzySuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b735cd38a317930e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_60532e6811eab0d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_d7fdeb2863a43d77] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;IIIZIZIIZ)V");
                mids$[mid_convertAutomaton_cb3855ae955106b8] = env->getMethodID(cls, "convertAutomaton", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
                mids$[mid_getFullPrefixPaths_c28373d5650ad826] = env->getMethodID(cls, "getFullPrefixPaths", "(Ljava/util/List;Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/fst/FST;)Ljava/util/List;");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                DEFAULT_MAX_EDITS = env->getStaticIntField(cls, "DEFAULT_MAX_EDITS");
                DEFAULT_MIN_FUZZY_LENGTH = env->getStaticIntField(cls, "DEFAULT_MIN_FUZZY_LENGTH");
                DEFAULT_NON_FUZZY_PREFIX = env->getStaticIntField(cls, "DEFAULT_NON_FUZZY_PREFIX");
                DEFAULT_TRANSPOSITIONS = env->getStaticBooleanField(cls, "DEFAULT_TRANSPOSITIONS");
                DEFAULT_UNICODE_AWARE = env->getStaticBooleanField(cls, "DEFAULT_UNICODE_AWARE");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FuzzySuggester::FuzzySuggester(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingSuggester(env->newObject(initializeClass, &mids$, mid_init$_b735cd38a317930e, a0.this$, a1.this$, a2.this$)) {}

            FuzzySuggester::FuzzySuggester(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::org::apache::lucene::analysis::Analyzer & a3) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingSuggester(env->newObject(initializeClass, &mids$, mid_init$_60532e6811eab0d3, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            FuzzySuggester::FuzzySuggester(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::org::apache::lucene::analysis::Analyzer & a3, jint a4, jint a5, jint a6, jboolean a7, jint a8, jboolean a9, jint a10, jint a11, jboolean a12) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingSuggester(env->newObject(initializeClass, &mids$, mid_init$_d7fdeb2863a43d77, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5, a6, a7, a8, a9, a10, a11, a12)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_FuzzySuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FuzzySuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FuzzySuggester_init_(t_FuzzySuggester *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_FuzzySuggester__methods_[] = {
              DECLARE_METHOD(t_FuzzySuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FuzzySuggester, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(FuzzySuggester)[] = {
              { Py_tp_methods, t_FuzzySuggester__methods_ },
              { Py_tp_init, (void *) t_FuzzySuggester_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(FuzzySuggester)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::suggest::analyzing::AnalyzingSuggester),
              NULL
            };

            DEFINE_TYPE(FuzzySuggester, t_FuzzySuggester, FuzzySuggester);

            void t_FuzzySuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(FuzzySuggester), &PY_TYPE_DEF(FuzzySuggester), module, "FuzzySuggester", 0);
            }

            void t_FuzzySuggester::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzySuggester), "class_", make_descriptor(FuzzySuggester::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzySuggester), "wrapfn_", make_descriptor(t_FuzzySuggester::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzySuggester), "boxfn_", make_descriptor(boxObject));
              env->getClass(FuzzySuggester::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzySuggester), "DEFAULT_MAX_EDITS", make_descriptor(FuzzySuggester::DEFAULT_MAX_EDITS));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzySuggester), "DEFAULT_MIN_FUZZY_LENGTH", make_descriptor(FuzzySuggester::DEFAULT_MIN_FUZZY_LENGTH));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzySuggester), "DEFAULT_NON_FUZZY_PREFIX", make_descriptor(FuzzySuggester::DEFAULT_NON_FUZZY_PREFIX));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzySuggester), "DEFAULT_TRANSPOSITIONS", make_descriptor(FuzzySuggester::DEFAULT_TRANSPOSITIONS));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzySuggester), "DEFAULT_UNICODE_AWARE", make_descriptor(FuzzySuggester::DEFAULT_UNICODE_AWARE));
            }

            static PyObject *t_FuzzySuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FuzzySuggester::initializeClass, 1)))
                return NULL;
              return t_FuzzySuggester::wrap_Object(FuzzySuggester(((t_FuzzySuggester *) arg)->object.this$));
            }
            static PyObject *t_FuzzySuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FuzzySuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FuzzySuggester_init_(t_FuzzySuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::java::lang::String a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  FuzzySuggester object((jobject) NULL);

                  if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = FuzzySuggester(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 4:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::java::lang::String a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  FuzzySuggester object((jobject) NULL);

                  if (!parseArgs(args, "kskk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                  {
                    INT_CALL(object = FuzzySuggester(a0, a1, a2, a3));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 13:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::java::lang::String a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  jint a4;
                  jint a5;
                  jint a6;
                  jboolean a7;
                  jint a8;
                  jboolean a9;
                  jint a10;
                  jint a11;
                  jboolean a12;
                  FuzzySuggester object((jobject) NULL);

                  if (!parseArgs(args, "kskkIIIZIZIIZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12))
                  {
                    INT_CALL(object = FuzzySuggester(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/classification/CachingNaiveBayesClassifier.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {

        ::java::lang::Class *CachingNaiveBayesClassifier::class$ = NULL;
        jmethodID *CachingNaiveBayesClassifier::mids$ = NULL;
        bool CachingNaiveBayesClassifier::live$ = false;

        jclass CachingNaiveBayesClassifier::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/classification/CachingNaiveBayesClassifier");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e4936342c09a71e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/search/Query;Ljava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_reInitCache_b8f283cdbda5c964] = env->getMethodID(cls, "reInitCache", "(IZ)V");
            mids$[mid_assignClassNormalizedList_25278b4b3ab80e37] = env->getMethodID(cls, "assignClassNormalizedList", "(Ljava/lang/String;)Ljava/util/List;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CachingNaiveBayesClassifier::CachingNaiveBayesClassifier(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::search::Query & a2, const ::java::lang::String & a3, const JArray< ::java::lang::String > & a4) : ::org::apache::lucene::classification::SimpleNaiveBayesClassifier(env->newObject(initializeClass, &mids$, mid_init$_6e4936342c09a71e, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

        void CachingNaiveBayesClassifier::reInitCache(jint a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_reInitCache_b8f283cdbda5c964], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        static PyObject *t_CachingNaiveBayesClassifier_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CachingNaiveBayesClassifier_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CachingNaiveBayesClassifier_init_(t_CachingNaiveBayesClassifier *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CachingNaiveBayesClassifier_reInitCache(t_CachingNaiveBayesClassifier *self, PyObject *args);

        static PyMethodDef t_CachingNaiveBayesClassifier__methods_[] = {
          DECLARE_METHOD(t_CachingNaiveBayesClassifier, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingNaiveBayesClassifier, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingNaiveBayesClassifier, reInitCache, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CachingNaiveBayesClassifier)[] = {
          { Py_tp_methods, t_CachingNaiveBayesClassifier__methods_ },
          { Py_tp_init, (void *) t_CachingNaiveBayesClassifier_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CachingNaiveBayesClassifier)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::classification::SimpleNaiveBayesClassifier),
          NULL
        };

        DEFINE_TYPE(CachingNaiveBayesClassifier, t_CachingNaiveBayesClassifier, CachingNaiveBayesClassifier);

        void t_CachingNaiveBayesClassifier::install(PyObject *module)
        {
          installType(&PY_TYPE(CachingNaiveBayesClassifier), &PY_TYPE_DEF(CachingNaiveBayesClassifier), module, "CachingNaiveBayesClassifier", 0);
        }

        void t_CachingNaiveBayesClassifier::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CachingNaiveBayesClassifier), "class_", make_descriptor(CachingNaiveBayesClassifier::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CachingNaiveBayesClassifier), "wrapfn_", make_descriptor(t_CachingNaiveBayesClassifier::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CachingNaiveBayesClassifier), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CachingNaiveBayesClassifier_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CachingNaiveBayesClassifier::initializeClass, 1)))
            return NULL;
          return t_CachingNaiveBayesClassifier::wrap_Object(CachingNaiveBayesClassifier(((t_CachingNaiveBayesClassifier *) arg)->object.this$));
        }
        static PyObject *t_CachingNaiveBayesClassifier_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CachingNaiveBayesClassifier::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CachingNaiveBayesClassifier_init_(t_CachingNaiveBayesClassifier *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
          ::org::apache::lucene::search::Query a2((jobject) NULL);
          ::java::lang::String a3((jobject) NULL);
          JArray< ::java::lang::String > a4((jobject) NULL);
          CachingNaiveBayesClassifier object((jobject) NULL);

          if (!parseArgs(args, "kkks[s", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = CachingNaiveBayesClassifier(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CachingNaiveBayesClassifier_reInitCache(t_CachingNaiveBayesClassifier *self, PyObject *args)
        {
          jint a0;
          jboolean a1;

          if (!parseArgs(args, "IZ", &a0, &a1))
          {
            OBJ_CALL(self->object.reInitCache(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reInitCache", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocValues$MultiSortedDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/OrdinalMap.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocValues$MultiSortedDocValues::class$ = NULL;
        jmethodID *MultiDocValues$MultiSortedDocValues::mids$ = NULL;
        jfieldID *MultiDocValues$MultiSortedDocValues::fids$ = NULL;
        bool MultiDocValues$MultiSortedDocValues::live$ = false;

        jclass MultiDocValues$MultiSortedDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocValues$MultiSortedDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_86e5e1b16854c7e1] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/SortedDocValues;[ILorg/apache/lucene/index/OrdinalMap;J)V");
            mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_advanceExact_a1d30e1ee40c89a2] = env->getMethodID(cls, "advanceExact", "(I)Z");
            mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_getValueCount_9972fcc56b44e79d] = env->getMethodID(cls, "getValueCount", "()I");
            mids$[mid_lookupOrd_83238e65a54c68bb] = env->getMethodID(cls, "lookupOrd", "(I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_ordValue_9972fcc56b44e79d] = env->getMethodID(cls, "ordValue", "()I");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docStarts] = env->getFieldID(cls, "docStarts", "[I");
            fids$[fid_mapping] = env->getFieldID(cls, "mapping", "Lorg/apache/lucene/index/OrdinalMap;");
            fids$[fid_values] = env->getFieldID(cls, "values", "[Lorg/apache/lucene/index/SortedDocValues;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiDocValues$MultiSortedDocValues::MultiDocValues$MultiSortedDocValues(const JArray< ::org::apache::lucene::index::SortedDocValues > & a0, const JArray< jint > & a1, const ::org::apache::lucene::index::OrdinalMap & a2, jlong a3) : ::org::apache::lucene::index::SortedDocValues(env->newObject(initializeClass, &mids$, mid_init$_86e5e1b16854c7e1, a0.this$, a1.this$, a2.this$, a3)) {}

        jint MultiDocValues$MultiSortedDocValues::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
        }

        jboolean MultiDocValues$MultiSortedDocValues::advanceExact(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_advanceExact_a1d30e1ee40c89a2], a0);
        }

        jlong MultiDocValues$MultiSortedDocValues::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
        }

        jint MultiDocValues$MultiSortedDocValues::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        jint MultiDocValues$MultiSortedDocValues::getValueCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getValueCount_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::util::BytesRef MultiDocValues$MultiSortedDocValues::lookupOrd(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_83238e65a54c68bb], a0));
        }

        jint MultiDocValues$MultiSortedDocValues::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
        }

        jint MultiDocValues$MultiSortedDocValues::ordValue() const
        {
          return env->callIntMethod(this$, mids$[mid_ordValue_9972fcc56b44e79d]);
        }

        JArray< jint > MultiDocValues$MultiSortedDocValues::_get_docStarts() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_docStarts]));
        }

        ::org::apache::lucene::index::OrdinalMap MultiDocValues$MultiSortedDocValues::_get_mapping() const
        {
          return ::org::apache::lucene::index::OrdinalMap(env->getObjectField(this$, fids$[fid_mapping]));
        }

        JArray< ::org::apache::lucene::index::SortedDocValues > MultiDocValues$MultiSortedDocValues::_get_values() const
        {
          return JArray< ::org::apache::lucene::index::SortedDocValues >(env->getObjectField(this$, fids$[fid_values]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocValues$MultiSortedDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiDocValues$MultiSortedDocValues_init_(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_advance(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_advanceExact(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_cost(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_docID(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_getValueCount(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_lookupOrd(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_nextDoc(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_ordValue(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__docStarts(t_MultiDocValues$MultiSortedDocValues *self, void *data);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__mapping(t_MultiDocValues$MultiSortedDocValues *self, void *data);
        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__values(t_MultiDocValues$MultiSortedDocValues *self, void *data);

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__valueCount(t_MultiDocValues$MultiSortedDocValues *self, void *data);
        static PyGetSetDef t_MultiDocValues$MultiSortedDocValues__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedDocValues, docStarts),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedDocValues, mapping),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedDocValues, values),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocValues$MultiSortedDocValues__methods_[] = {
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, advance, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, advanceExact, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, cost, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, docID, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, getValueCount, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, lookupOrd, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedDocValues, ordValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiDocValues$MultiSortedDocValues)[] = {
          { Py_tp_methods, t_MultiDocValues$MultiSortedDocValues__methods_ },
          { Py_tp_init, (void *) t_MultiDocValues$MultiSortedDocValues_init_ },
          { Py_tp_getset, t_MultiDocValues$MultiSortedDocValues__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiDocValues$MultiSortedDocValues)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::SortedDocValues),
          NULL
        };

        DEFINE_TYPE(MultiDocValues$MultiSortedDocValues, t_MultiDocValues$MultiSortedDocValues, MultiDocValues$MultiSortedDocValues);

        void t_MultiDocValues$MultiSortedDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocValues$MultiSortedDocValues), &PY_TYPE_DEF(MultiDocValues$MultiSortedDocValues), module, "MultiDocValues$MultiSortedDocValues", 0);
        }

        void t_MultiDocValues$MultiSortedDocValues::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiDocValues$MultiSortedDocValues), "class_", make_descriptor(MultiDocValues$MultiSortedDocValues::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiDocValues$MultiSortedDocValues), "wrapfn_", make_descriptor(t_MultiDocValues$MultiSortedDocValues::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiDocValues$MultiSortedDocValues), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocValues$MultiSortedDocValues::initializeClass, 1)))
            return NULL;
          return t_MultiDocValues$MultiSortedDocValues::wrap_Object(MultiDocValues$MultiSortedDocValues(((t_MultiDocValues$MultiSortedDocValues *) arg)->object.this$));
        }
        static PyObject *t_MultiDocValues$MultiSortedDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocValues$MultiSortedDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiDocValues$MultiSortedDocValues_init_(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::SortedDocValues > a0((jobject) NULL);
          JArray< jint > a1((jobject) NULL);
          ::org::apache::lucene::index::OrdinalMap a2((jobject) NULL);
          jlong a3;
          MultiDocValues$MultiSortedDocValues object((jobject) NULL);

          if (!parseArgs(args, "[k[IkJ", ::org::apache::lucene::index::SortedDocValues::initializeClass, ::org::apache::lucene::index::OrdinalMap::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = MultiDocValues$MultiSortedDocValues(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_advance(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MultiDocValues$MultiSortedDocValues), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_advanceExact(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args)
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advanceExact(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(MultiDocValues$MultiSortedDocValues), (PyObject *) self, "advanceExact", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_cost(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(MultiDocValues$MultiSortedDocValues), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_docID(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MultiDocValues$MultiSortedDocValues), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_getValueCount(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getValueCount());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MultiDocValues$MultiSortedDocValues), (PyObject *) self, "getValueCount", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_lookupOrd(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MultiDocValues$MultiSortedDocValues), (PyObject *) self, "lookupOrd", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_nextDoc(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MultiDocValues$MultiSortedDocValues), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_ordValue(t_MultiDocValues$MultiSortedDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ordValue());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MultiDocValues$MultiSortedDocValues), (PyObject *) self, "ordValue", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__docStarts(t_MultiDocValues$MultiSortedDocValues *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docStarts());
          return value.wrap();
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__mapping(t_MultiDocValues$MultiSortedDocValues *self, void *data)
        {
          ::org::apache::lucene::index::OrdinalMap value((jobject) NULL);
          OBJ_CALL(value = self->object._get_mapping());
          return ::org::apache::lucene::index::t_OrdinalMap::wrap_Object(value);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__values(t_MultiDocValues$MultiSortedDocValues *self, void *data)
        {
          JArray< ::org::apache::lucene::index::SortedDocValues > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_values());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_SortedDocValues::wrap_jobject);
        }

        static PyObject *t_MultiDocValues$MultiSortedDocValues_get__valueCount(t_MultiDocValues$MultiSortedDocValues *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "java/util/Set.h"
#include "java/lang/ClassLoader.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsFormat::class$ = NULL;
        jmethodID *PostingsFormat::mids$ = NULL;
        bool PostingsFormat::live$ = false;
        JArray< PostingsFormat > *PostingsFormat::EMPTY = NULL;

        jclass PostingsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_availablePostingsFormats_7dcf4034c6d1a92a] = env->getStaticMethodID(cls, "availablePostingsFormats", "()Ljava/util/Set;");
            mids$[mid_fieldsConsumer_876dc181a1f61814] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
            mids$[mid_fieldsProducer_c39bdf540a53fab9] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
            mids$[mid_forName_62d8049c839a109a] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
            mids$[mid_getName_db9b55ba01e03e4b] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_reloadPostingsFormats_98a876e82795b112] = env->getStaticMethodID(cls, "reloadPostingsFormats", "(Ljava/lang/ClassLoader;)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            EMPTY = new JArray< PostingsFormat >(env->getStaticObjectField(cls, "EMPTY", "[Lorg/apache/lucene/codecs/PostingsFormat;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Set PostingsFormat::availablePostingsFormats()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availablePostingsFormats_7dcf4034c6d1a92a]));
        }

        ::org::apache::lucene::codecs::FieldsConsumer PostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
        {
          return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_876dc181a1f61814], a0.this$));
        }

        ::org::apache::lucene::codecs::FieldsProducer PostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
        {
          return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c39bdf540a53fab9], a0.this$));
        }

        PostingsFormat PostingsFormat::forName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return PostingsFormat(env->callStaticObjectMethod(cls, mids$[mid_forName_62d8049c839a109a], a0.this$));
        }

        ::java::lang::String PostingsFormat::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_db9b55ba01e03e4b]));
        }

        void PostingsFormat::reloadPostingsFormats(const ::java::lang::ClassLoader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reloadPostingsFormats_98a876e82795b112], a0.this$);
        }

        ::java::lang::String PostingsFormat::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsFormat_availablePostingsFormats(PyTypeObject *type);
        static PyObject *t_PostingsFormat_fieldsConsumer(t_PostingsFormat *self, PyObject *arg);
        static PyObject *t_PostingsFormat_fieldsProducer(t_PostingsFormat *self, PyObject *arg);
        static PyObject *t_PostingsFormat_forName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsFormat_getName(t_PostingsFormat *self);
        static PyObject *t_PostingsFormat_reloadPostingsFormats(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsFormat_toString(t_PostingsFormat *self, PyObject *args);
        static PyObject *t_PostingsFormat_get__name(t_PostingsFormat *self, void *data);
        static PyGetSetDef t_PostingsFormat__fields_[] = {
          DECLARE_GET_FIELD(t_PostingsFormat, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PostingsFormat__methods_[] = {
          DECLARE_METHOD(t_PostingsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, availablePostingsFormats, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, fieldsConsumer, METH_O),
          DECLARE_METHOD(t_PostingsFormat, fieldsProducer, METH_O),
          DECLARE_METHOD(t_PostingsFormat, forName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, getName, METH_NOARGS),
          DECLARE_METHOD(t_PostingsFormat, reloadPostingsFormats, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PostingsFormat)[] = {
          { Py_tp_methods, t_PostingsFormat__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_PostingsFormat__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PostingsFormat)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PostingsFormat, t_PostingsFormat, PostingsFormat);

        void t_PostingsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsFormat), &PY_TYPE_DEF(PostingsFormat), module, "PostingsFormat", 0);
        }

        void t_PostingsFormat::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsFormat), "class_", make_descriptor(PostingsFormat::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsFormat), "wrapfn_", make_descriptor(t_PostingsFormat::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsFormat), "boxfn_", make_descriptor(boxObject));
          env->getClass(PostingsFormat::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsFormat), "EMPTY", make_descriptor(JArray<jobject>(PostingsFormat::EMPTY->this$).wrap(t_PostingsFormat::wrap_jobject)));
        }

        static PyObject *t_PostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsFormat::initializeClass, 1)))
            return NULL;
          return t_PostingsFormat::wrap_Object(PostingsFormat(((t_PostingsFormat *) arg)->object.this$));
        }
        static PyObject *t_PostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsFormat_availablePostingsFormats(PyTypeObject *type)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::codecs::PostingsFormat::availablePostingsFormats());
          return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_PostingsFormat_fieldsConsumer(t_PostingsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
          ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsConsumer(a0));
            return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsConsumer", arg);
          return NULL;
        }

        static PyObject *t_PostingsFormat_fieldsProducer(t_PostingsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
          ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsProducer(a0));
            return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsProducer", arg);
          return NULL;
        }

        static PyObject *t_PostingsFormat_forName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          PostingsFormat result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::PostingsFormat::forName(a0));
            return t_PostingsFormat::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "forName", arg);
          return NULL;
        }

        static PyObject *t_PostingsFormat_getName(t_PostingsFormat *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_PostingsFormat_reloadPostingsFormats(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::PostingsFormat::reloadPostingsFormats(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reloadPostingsFormats", arg);
          return NULL;
        }

        static PyObject *t_PostingsFormat_toString(t_PostingsFormat *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(PostingsFormat), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_PostingsFormat_get__name(t_PostingsFormat *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterSortedNumericDocValues.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterSortedNumericDocValues::class$ = NULL;
        jmethodID *FilterSortedNumericDocValues::mids$ = NULL;
        bool FilterSortedNumericDocValues::live$ = false;

        jclass FilterSortedNumericDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterSortedNumericDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b9ac00ef62973eb6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SortedNumericDocValues;)V");
            mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_advanceExact_a1d30e1ee40c89a2] = env->getMethodID(cls, "advanceExact", "(I)Z");
            mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_docValueCount_9972fcc56b44e79d] = env->getMethodID(cls, "docValueCount", "()I");
            mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_nextValue_2e5ae9edcb9b072f] = env->getMethodID(cls, "nextValue", "()J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterSortedNumericDocValues::FilterSortedNumericDocValues(const ::org::apache::lucene::index::SortedNumericDocValues & a0) : ::org::apache::lucene::index::SortedNumericDocValues(env->newObject(initializeClass, &mids$, mid_init$_b9ac00ef62973eb6, a0.this$)) {}

        jint FilterSortedNumericDocValues::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
        }

        jboolean FilterSortedNumericDocValues::advanceExact(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_advanceExact_a1d30e1ee40c89a2], a0);
        }

        jlong FilterSortedNumericDocValues::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
        }

        jint FilterSortedNumericDocValues::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        jint FilterSortedNumericDocValues::docValueCount() const
        {
          return env->callIntMethod(this$, mids$[mid_docValueCount_9972fcc56b44e79d]);
        }

        jint FilterSortedNumericDocValues::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
        }

        jlong FilterSortedNumericDocValues::nextValue() const
        {
          return env->callLongMethod(this$, mids$[mid_nextValue_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterSortedNumericDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterSortedNumericDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterSortedNumericDocValues_init_(t_FilterSortedNumericDocValues *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterSortedNumericDocValues_advance(t_FilterSortedNumericDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedNumericDocValues_advanceExact(t_FilterSortedNumericDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedNumericDocValues_cost(t_FilterSortedNumericDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedNumericDocValues_docID(t_FilterSortedNumericDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedNumericDocValues_docValueCount(t_FilterSortedNumericDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedNumericDocValues_nextDoc(t_FilterSortedNumericDocValues *self, PyObject *args);
        static PyObject *t_FilterSortedNumericDocValues_nextValue(t_FilterSortedNumericDocValues *self, PyObject *args);

        static PyMethodDef t_FilterSortedNumericDocValues__methods_[] = {
          DECLARE_METHOD(t_FilterSortedNumericDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterSortedNumericDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterSortedNumericDocValues, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedNumericDocValues, advanceExact, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedNumericDocValues, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedNumericDocValues, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedNumericDocValues, docValueCount, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedNumericDocValues, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_FilterSortedNumericDocValues, nextValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterSortedNumericDocValues)[] = {
          { Py_tp_methods, t_FilterSortedNumericDocValues__methods_ },
          { Py_tp_init, (void *) t_FilterSortedNumericDocValues_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterSortedNumericDocValues)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::SortedNumericDocValues),
          NULL
        };

        DEFINE_TYPE(FilterSortedNumericDocValues, t_FilterSortedNumericDocValues, FilterSortedNumericDocValues);

        void t_FilterSortedNumericDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterSortedNumericDocValues), &PY_TYPE_DEF(FilterSortedNumericDocValues), module, "FilterSortedNumericDocValues", 0);
        }

        void t_FilterSortedNumericDocValues::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterSortedNumericDocValues), "class_", make_descriptor(FilterSortedNumericDocValues::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterSortedNumericDocValues), "wrapfn_", make_descriptor(t_FilterSortedNumericDocValues::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterSortedNumericDocValues), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterSortedNumericDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterSortedNumericDocValues::initializeClass, 1)))
            return NULL;
          return t_FilterSortedNumericDocValues::wrap_Object(FilterSortedNumericDocValues(((t_FilterSortedNumericDocValues *) arg)->object.this$));
        }
        static PyObject *t_FilterSortedNumericDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterSortedNumericDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterSortedNumericDocValues_init_(t_FilterSortedNumericDocValues *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::SortedNumericDocValues a0((jobject) NULL);
          FilterSortedNumericDocValues object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::SortedNumericDocValues::initializeClass, &a0))
          {
            INT_CALL(object = FilterSortedNumericDocValues(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterSortedNumericDocValues_advance(t_FilterSortedNumericDocValues *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterSortedNumericDocValues), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilterSortedNumericDocValues_advanceExact(t_FilterSortedNumericDocValues *self, PyObject *args)
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advanceExact(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FilterSortedNumericDocValues), (PyObject *) self, "advanceExact", args, 2);
        }

        static PyObject *t_FilterSortedNumericDocValues_cost(t_FilterSortedNumericDocValues *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilterSortedNumericDocValues), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilterSortedNumericDocValues_docID(t_FilterSortedNumericDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterSortedNumericDocValues), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilterSortedNumericDocValues_docValueCount(t_FilterSortedNumericDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docValueCount());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterSortedNumericDocValues), (PyObject *) self, "docValueCount", args, 2);
        }

        static PyObject *t_FilterSortedNumericDocValues_nextDoc(t_FilterSortedNumericDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterSortedNumericDocValues), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_FilterSortedNumericDocValues_nextValue(t_FilterSortedNumericDocValues *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextValue());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilterSortedNumericDocValues), (PyObject *) self, "nextValue", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/NorwegianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *NorwegianStemmer::class$ = NULL;
        jmethodID *NorwegianStemmer::mids$ = NULL;
        bool NorwegianStemmer::live$ = false;

        jclass NorwegianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/NorwegianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NorwegianStemmer::NorwegianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean NorwegianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint NorwegianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean NorwegianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_NorwegianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NorwegianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NorwegianStemmer_init_(t_NorwegianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NorwegianStemmer_equals(t_NorwegianStemmer *self, PyObject *args);
        static PyObject *t_NorwegianStemmer_hashCode(t_NorwegianStemmer *self, PyObject *args);
        static PyObject *t_NorwegianStemmer_stem(t_NorwegianStemmer *self, PyObject *args);

        static PyMethodDef t_NorwegianStemmer__methods_[] = {
          DECLARE_METHOD(t_NorwegianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NorwegianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NorwegianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_NorwegianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_NorwegianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NorwegianStemmer)[] = {
          { Py_tp_methods, t_NorwegianStemmer__methods_ },
          { Py_tp_init, (void *) t_NorwegianStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NorwegianStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(NorwegianStemmer, t_NorwegianStemmer, NorwegianStemmer);

        void t_NorwegianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(NorwegianStemmer), &PY_TYPE_DEF(NorwegianStemmer), module, "NorwegianStemmer", 0);
        }

        void t_NorwegianStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianStemmer), "class_", make_descriptor(NorwegianStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianStemmer), "wrapfn_", make_descriptor(t_NorwegianStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NorwegianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NorwegianStemmer::initializeClass, 1)))
            return NULL;
          return t_NorwegianStemmer::wrap_Object(NorwegianStemmer(((t_NorwegianStemmer *) arg)->object.this$));
        }
        static PyObject *t_NorwegianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NorwegianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NorwegianStemmer_init_(t_NorwegianStemmer *self, PyObject *args, PyObject *kwds)
        {
          NorwegianStemmer object((jobject) NULL);

          INT_CALL(object = NorwegianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_NorwegianStemmer_equals(t_NorwegianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(NorwegianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_NorwegianStemmer_hashCode(t_NorwegianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(NorwegianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_NorwegianStemmer_stem(t_NorwegianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(NorwegianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ScorerSupplier.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ScorerSupplier::class$ = NULL;
        jmethodID *ScorerSupplier::mids$ = NULL;
        bool ScorerSupplier::live$ = false;

        jclass ScorerSupplier::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ScorerSupplier");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_get_1e03e1b54e372d29] = env->getMethodID(cls, "get", "(J)Lorg/apache/lucene/search/Scorer;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ScorerSupplier::ScorerSupplier() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jlong ScorerSupplier::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::search::Scorer ScorerSupplier::get(jlong a0) const
        {
          return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_get_1e03e1b54e372d29], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ScorerSupplier_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScorerSupplier_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ScorerSupplier_init_(t_ScorerSupplier *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ScorerSupplier_cost(t_ScorerSupplier *self);
        static PyObject *t_ScorerSupplier_get(t_ScorerSupplier *self, PyObject *arg);

        static PyMethodDef t_ScorerSupplier__methods_[] = {
          DECLARE_METHOD(t_ScorerSupplier, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScorerSupplier, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScorerSupplier, cost, METH_NOARGS),
          DECLARE_METHOD(t_ScorerSupplier, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ScorerSupplier)[] = {
          { Py_tp_methods, t_ScorerSupplier__methods_ },
          { Py_tp_init, (void *) t_ScorerSupplier_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ScorerSupplier)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(ScorerSupplier, t_ScorerSupplier, ScorerSupplier);

        void t_ScorerSupplier::install(PyObject *module)
        {
          installType(&PY_TYPE(ScorerSupplier), &PY_TYPE_DEF(ScorerSupplier), module, "ScorerSupplier", 0);
        }

        void t_ScorerSupplier::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScorerSupplier), "class_", make_descriptor(ScorerSupplier::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScorerSupplier), "wrapfn_", make_descriptor(t_ScorerSupplier::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScorerSupplier), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ScorerSupplier_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ScorerSupplier::initializeClass, 1)))
            return NULL;
          return t_ScorerSupplier::wrap_Object(ScorerSupplier(((t_ScorerSupplier *) arg)->object.this$));
        }
        static PyObject *t_ScorerSupplier_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ScorerSupplier::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ScorerSupplier_init_(t_ScorerSupplier *self, PyObject *args, PyObject *kwds)
        {
          ScorerSupplier object((jobject) NULL);

          INT_CALL(object = ScorerSupplier());
          self->object = object;

          return 0;
        }

        static PyObject *t_ScorerSupplier_cost(t_ScorerSupplier *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.cost());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_ScorerSupplier_get(t_ScorerSupplier *self, PyObject *arg)
        {
          jlong a0;
          ::org::apache::lucene::search::Scorer result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *WordDelimiterFilter::class$ = NULL;
          jmethodID *WordDelimiterFilter::mids$ = NULL;
          bool WordDelimiterFilter::live$ = false;
          jint WordDelimiterFilter::ALPHA = (jint) 0;
          jint WordDelimiterFilter::ALPHANUM = (jint) 0;
          jint WordDelimiterFilter::CATENATE_ALL = (jint) 0;
          jint WordDelimiterFilter::CATENATE_NUMBERS = (jint) 0;
          jint WordDelimiterFilter::CATENATE_WORDS = (jint) 0;
          jint WordDelimiterFilter::DIGIT = (jint) 0;
          jint WordDelimiterFilter::GENERATE_NUMBER_PARTS = (jint) 0;
          jint WordDelimiterFilter::GENERATE_WORD_PARTS = (jint) 0;
          jint WordDelimiterFilter::IGNORE_KEYWORDS = (jint) 0;
          jint WordDelimiterFilter::LOWER = (jint) 0;
          jint WordDelimiterFilter::PRESERVE_ORIGINAL = (jint) 0;
          jint WordDelimiterFilter::SPLIT_ON_CASE_CHANGE = (jint) 0;
          jint WordDelimiterFilter::SPLIT_ON_NUMERICS = (jint) 0;
          jint WordDelimiterFilter::STEM_ENGLISH_POSSESSIVE = (jint) 0;
          jint WordDelimiterFilter::SUBWORD_DELIM = (jint) 0;
          jint WordDelimiterFilter::UPPER = (jint) 0;

          jclass WordDelimiterFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_dbdcafe10d75de60] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;ILorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_6da25121c72a4ca9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;[BILorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              ALPHA = env->getStaticIntField(cls, "ALPHA");
              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              CATENATE_ALL = env->getStaticIntField(cls, "CATENATE_ALL");
              CATENATE_NUMBERS = env->getStaticIntField(cls, "CATENATE_NUMBERS");
              CATENATE_WORDS = env->getStaticIntField(cls, "CATENATE_WORDS");
              DIGIT = env->getStaticIntField(cls, "DIGIT");
              GENERATE_NUMBER_PARTS = env->getStaticIntField(cls, "GENERATE_NUMBER_PARTS");
              GENERATE_WORD_PARTS = env->getStaticIntField(cls, "GENERATE_WORD_PARTS");
              IGNORE_KEYWORDS = env->getStaticIntField(cls, "IGNORE_KEYWORDS");
              LOWER = env->getStaticIntField(cls, "LOWER");
              PRESERVE_ORIGINAL = env->getStaticIntField(cls, "PRESERVE_ORIGINAL");
              SPLIT_ON_CASE_CHANGE = env->getStaticIntField(cls, "SPLIT_ON_CASE_CHANGE");
              SPLIT_ON_NUMERICS = env->getStaticIntField(cls, "SPLIT_ON_NUMERICS");
              STEM_ENGLISH_POSSESSIVE = env->getStaticIntField(cls, "STEM_ENGLISH_POSSESSIVE");
              SUBWORD_DELIM = env->getStaticIntField(cls, "SUBWORD_DELIM");
              UPPER = env->getStaticIntField(cls, "UPPER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordDelimiterFilter::WordDelimiterFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, const ::org::apache::lucene::analysis::CharArraySet & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_dbdcafe10d75de60, a0.this$, a1, a2.this$)) {}

          WordDelimiterFilter::WordDelimiterFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const JArray< jbyte > & a1, jint a2, const ::org::apache::lucene::analysis::CharArraySet & a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_6da25121c72a4ca9, a0.this$, a1.this$, a2, a3.this$)) {}

          jboolean WordDelimiterFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void WordDelimiterFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_WordDelimiterFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordDelimiterFilter_init_(t_WordDelimiterFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordDelimiterFilter_incrementToken(t_WordDelimiterFilter *self, PyObject *args);
          static PyObject *t_WordDelimiterFilter_reset(t_WordDelimiterFilter *self, PyObject *args);

          static PyMethodDef t_WordDelimiterFilter__methods_[] = {
            DECLARE_METHOD(t_WordDelimiterFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_WordDelimiterFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(WordDelimiterFilter)[] = {
            { Py_tp_methods, t_WordDelimiterFilter__methods_ },
            { Py_tp_init, (void *) t_WordDelimiterFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(WordDelimiterFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(WordDelimiterFilter, t_WordDelimiterFilter, WordDelimiterFilter);

          void t_WordDelimiterFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(WordDelimiterFilter), &PY_TYPE_DEF(WordDelimiterFilter), module, "WordDelimiterFilter", 0);
          }

          void t_WordDelimiterFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilter), "class_", make_descriptor(WordDelimiterFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilter), "wrapfn_", make_descriptor(t_WordDelimiterFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilter), "boxfn_", make_descriptor(boxObject));
            env->getClass(WordDelimiterFilter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilter), "ALPHA", make_descriptor(WordDelimiterFilter::ALPHA));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilter), "ALPHANUM", make_descriptor(WordDelimiterFilter::ALPHANUM));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilter), "CATENATE_ALL", make_descriptor(WordDelimiterFilter::CATENATE_ALL));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilter), "CATENATE_NUMBERS", make_descriptor(WordDelimiterFilter::CATENATE_NUMBERS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilter), "CATENATE_WORDS", make_descriptor(WordDelimiterFilter::CATENATE_WORDS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilter), "DIGIT", make_descriptor(WordDelimiterFilter::DIGIT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilter), "GENERATE_NUMBER_PARTS", make_descriptor(WordDelimiterFilter::GENERATE_NUMBER_PARTS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilter), "GENERATE_WORD_PARTS", make_descriptor(WordDelimiterFilter::GENERATE_WORD_PARTS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilter), "IGNORE_KEYWORDS", make_descriptor(WordDelimiterFilter::IGNORE_KEYWORDS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilter), "LOWER", make_descriptor(WordDelimiterFilter::LOWER));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilter), "PRESERVE_ORIGINAL", make_descriptor(WordDelimiterFilter::PRESERVE_ORIGINAL));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilter), "SPLIT_ON_CASE_CHANGE", make_descriptor(WordDelimiterFilter::SPLIT_ON_CASE_CHANGE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilter), "SPLIT_ON_NUMERICS", make_descriptor(WordDelimiterFilter::SPLIT_ON_NUMERICS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilter), "STEM_ENGLISH_POSSESSIVE", make_descriptor(WordDelimiterFilter::STEM_ENGLISH_POSSESSIVE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilter), "SUBWORD_DELIM", make_descriptor(WordDelimiterFilter::SUBWORD_DELIM));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilter), "UPPER", make_descriptor(WordDelimiterFilter::UPPER));
          }

          static PyObject *t_WordDelimiterFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordDelimiterFilter::initializeClass, 1)))
              return NULL;
            return t_WordDelimiterFilter::wrap_Object(WordDelimiterFilter(((t_WordDelimiterFilter *) arg)->object.this$));
          }
          static PyObject *t_WordDelimiterFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordDelimiterFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordDelimiterFilter_init_(t_WordDelimiterFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::analysis::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                WordDelimiterFilter object((jobject) NULL);

                if (!parseArgs(args, "kIK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = WordDelimiterFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                JArray< jbyte > a1((jobject) NULL);
                jint a2;
                ::org::apache::lucene::analysis::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                WordDelimiterFilter object((jobject) NULL);

                if (!parseArgs(args, "k[BIK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = WordDelimiterFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WordDelimiterFilter_incrementToken(t_WordDelimiterFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(WordDelimiterFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_WordDelimiterFilter_reset(t_WordDelimiterFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(WordDelimiterFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Independence.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Independence::class$ = NULL;
          jmethodID *Independence::mids$ = NULL;
          bool Independence::live$ = false;

          jclass Independence::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Independence");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_990b512583b70d91] = env->getMethodID(cls, "score", "(DD)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Independence::Independence() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jdouble Independence::score(jdouble a0, jdouble a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_score_990b512583b70d91], a0, a1);
          }

          ::java::lang::String Independence::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Independence_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Independence_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Independence_init_(t_Independence *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Independence_score(t_Independence *self, PyObject *args);
          static PyObject *t_Independence_toString(t_Independence *self, PyObject *args);

          static PyMethodDef t_Independence__methods_[] = {
            DECLARE_METHOD(t_Independence, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Independence, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Independence, score, METH_VARARGS),
            DECLARE_METHOD(t_Independence, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Independence)[] = {
            { Py_tp_methods, t_Independence__methods_ },
            { Py_tp_init, (void *) t_Independence_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Independence)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Independence, t_Independence, Independence);

          void t_Independence::install(PyObject *module)
          {
            installType(&PY_TYPE(Independence), &PY_TYPE_DEF(Independence), module, "Independence", 0);
          }

          void t_Independence::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Independence), "class_", make_descriptor(Independence::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Independence), "wrapfn_", make_descriptor(t_Independence::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Independence), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Independence_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Independence::initializeClass, 1)))
              return NULL;
            return t_Independence::wrap_Object(Independence(((t_Independence *) arg)->object.this$));
          }
          static PyObject *t_Independence_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Independence::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Independence_init_(t_Independence *self, PyObject *args, PyObject *kwds)
          {
            Independence object((jobject) NULL);

            INT_CALL(object = Independence());
            self->object = object;

            return 0;
          }

          static PyObject *t_Independence_score(t_Independence *self, PyObject *args)
          {
            jdouble a0;
            jdouble a1;
            jdouble result;

            if (!parseArgs(args, "DD", &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }

          static PyObject *t_Independence_toString(t_Independence *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Independence), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$MergeAbortedException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$MergeAbortedException::class$ = NULL;
        jmethodID *MergePolicy$MergeAbortedException::mids$ = NULL;
        bool MergePolicy$MergeAbortedException::live$ = false;

        jclass MergePolicy$MergeAbortedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$MergeAbortedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$MergeAbortedException::MergePolicy$MergeAbortedException() : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        MergePolicy$MergeAbortedException::MergePolicy$MergeAbortedException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$MergeAbortedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$MergeAbortedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy$MergeAbortedException_init_(t_MergePolicy$MergeAbortedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_MergePolicy$MergeAbortedException__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$MergeAbortedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeAbortedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MergePolicy$MergeAbortedException)[] = {
          { Py_tp_methods, t_MergePolicy$MergeAbortedException__methods_ },
          { Py_tp_init, (void *) t_MergePolicy$MergeAbortedException_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MergePolicy$MergeAbortedException)[] = {
          &PY_TYPE_DEF(::java::io::IOException),
          NULL
        };

        DEFINE_TYPE(MergePolicy$MergeAbortedException, t_MergePolicy$MergeAbortedException, MergePolicy$MergeAbortedException);

        void t_MergePolicy$MergeAbortedException::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$MergeAbortedException), &PY_TYPE_DEF(MergePolicy$MergeAbortedException), module, "MergePolicy$MergeAbortedException", 0);
        }

        void t_MergePolicy$MergeAbortedException::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$MergeAbortedException), "class_", make_descriptor(MergePolicy$MergeAbortedException::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$MergeAbortedException), "wrapfn_", make_descriptor(t_MergePolicy$MergeAbortedException::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$MergeAbortedException), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$MergeAbortedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$MergeAbortedException::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$MergeAbortedException::wrap_Object(MergePolicy$MergeAbortedException(((t_MergePolicy$MergeAbortedException *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$MergeAbortedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$MergeAbortedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy$MergeAbortedException_init_(t_MergePolicy$MergeAbortedException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              MergePolicy$MergeAbortedException object((jobject) NULL);

              INT_CALL(object = MergePolicy$MergeAbortedException());
              self->object = object;
              break;
            }
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              MergePolicy$MergeAbortedException object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = MergePolicy$MergeAbortedException(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/payloads/MaxPayloadFunction.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace payloads {

          ::java::lang::Class *MaxPayloadFunction::class$ = NULL;
          jmethodID *MaxPayloadFunction::mids$ = NULL;
          bool MaxPayloadFunction::live$ = false;

          jclass MaxPayloadFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/payloads/MaxPayloadFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_currentScore_0a14f13874ab46d9] = env->getMethodID(cls, "currentScore", "(ILjava/lang/String;IIIFF)F");
              mids$[mid_docScore_6294fc7b7308f6b0] = env->getMethodID(cls, "docScore", "(ILjava/lang/String;IF)F");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MaxPayloadFunction::MaxPayloadFunction() : ::org::apache::lucene::queries::payloads::PayloadFunction(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jfloat MaxPayloadFunction::currentScore(jint a0, const ::java::lang::String & a1, jint a2, jint a3, jint a4, jfloat a5, jfloat a6) const
          {
            return env->callFloatMethod(this$, mids$[mid_currentScore_0a14f13874ab46d9], a0, a1.this$, a2, a3, a4, a5, a6);
          }

          jfloat MaxPayloadFunction::docScore(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_docScore_6294fc7b7308f6b0], a0, a1.this$, a2, a3);
          }

          jboolean MaxPayloadFunction::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint MaxPayloadFunction::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace payloads {
          static PyObject *t_MaxPayloadFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MaxPayloadFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MaxPayloadFunction_init_(t_MaxPayloadFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MaxPayloadFunction_currentScore(t_MaxPayloadFunction *self, PyObject *args);
          static PyObject *t_MaxPayloadFunction_docScore(t_MaxPayloadFunction *self, PyObject *args);
          static PyObject *t_MaxPayloadFunction_equals(t_MaxPayloadFunction *self, PyObject *args);
          static PyObject *t_MaxPayloadFunction_hashCode(t_MaxPayloadFunction *self, PyObject *args);

          static PyMethodDef t_MaxPayloadFunction__methods_[] = {
            DECLARE_METHOD(t_MaxPayloadFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MaxPayloadFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MaxPayloadFunction, currentScore, METH_VARARGS),
            DECLARE_METHOD(t_MaxPayloadFunction, docScore, METH_VARARGS),
            DECLARE_METHOD(t_MaxPayloadFunction, equals, METH_VARARGS),
            DECLARE_METHOD(t_MaxPayloadFunction, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MaxPayloadFunction)[] = {
            { Py_tp_methods, t_MaxPayloadFunction__methods_ },
            { Py_tp_init, (void *) t_MaxPayloadFunction_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MaxPayloadFunction)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::queries::payloads::PayloadFunction),
            NULL
          };

          DEFINE_TYPE(MaxPayloadFunction, t_MaxPayloadFunction, MaxPayloadFunction);

          void t_MaxPayloadFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(MaxPayloadFunction), &PY_TYPE_DEF(MaxPayloadFunction), module, "MaxPayloadFunction", 0);
          }

          void t_MaxPayloadFunction::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MaxPayloadFunction), "class_", make_descriptor(MaxPayloadFunction::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MaxPayloadFunction), "wrapfn_", make_descriptor(t_MaxPayloadFunction::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MaxPayloadFunction), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MaxPayloadFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MaxPayloadFunction::initializeClass, 1)))
              return NULL;
            return t_MaxPayloadFunction::wrap_Object(MaxPayloadFunction(((t_MaxPayloadFunction *) arg)->object.this$));
          }
          static PyObject *t_MaxPayloadFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MaxPayloadFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MaxPayloadFunction_init_(t_MaxPayloadFunction *self, PyObject *args, PyObject *kwds)
          {
            MaxPayloadFunction object((jobject) NULL);

            INT_CALL(object = MaxPayloadFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_MaxPayloadFunction_currentScore(t_MaxPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jfloat a5;
            jfloat a6;
            jfloat result;

            if (!parseArgs(args, "IsIIIFF", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.currentScore(a0, a1, a2, a3, a4, a5, a6));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(MaxPayloadFunction), (PyObject *) self, "currentScore", args, 2);
          }

          static PyObject *t_MaxPayloadFunction_docScore(t_MaxPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            jfloat result;

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.docScore(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(MaxPayloadFunction), (PyObject *) self, "docScore", args, 2);
          }

          static PyObject *t_MaxPayloadFunction_equals(t_MaxPayloadFunction *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(MaxPayloadFunction), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_MaxPayloadFunction_hashCode(t_MaxPayloadFunction *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(MaxPayloadFunction), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/jaspell/JaspellLookup.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/util/Set.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace jaspell {

            ::java::lang::Class *JaspellLookup::class$ = NULL;
            jmethodID *JaspellLookup::mids$ = NULL;
            bool JaspellLookup::live$ = false;

            jclass JaspellLookup::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/jaspell/JaspellLookup");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_add_d7485052d53c5b82] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/Object;)Z");
                mids$[mid_build_bf225d6cde09eeb7] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_02b63332574637fb] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_8d76187aa69e280c] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_b158b62b42de2509] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_a9f4986a27ef0adc] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JaspellLookup::JaspellLookup() : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            jboolean JaspellLookup::add(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_add_d7485052d53c5b82], a0.this$, a1.this$);
            }

            void JaspellLookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_bf225d6cde09eeb7], a0.this$);
            }

            ::java::lang::Object JaspellLookup::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_02b63332574637fb], a0.this$));
            }

            jlong JaspellLookup::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_2e5ae9edcb9b072f]);
            }

            jboolean JaspellLookup::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_8d76187aa69e280c], a0.this$);
            }

            ::java::util::List JaspellLookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_b158b62b42de2509], a0.this$, a1.this$, a2, a3));
            }

            jlong JaspellLookup::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
            }

            jboolean JaspellLookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_a9f4986a27ef0adc], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace jaspell {
            static PyObject *t_JaspellLookup_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_JaspellLookup_instance_(PyTypeObject *type, PyObject *arg);
            static int t_JaspellLookup_init_(t_JaspellLookup *self, PyObject *args, PyObject *kwds);
            static PyObject *t_JaspellLookup_add(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_build(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_get(t_JaspellLookup *self, PyObject *arg);
            static PyObject *t_JaspellLookup_getCount(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_load(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_lookup(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_ramBytesUsed(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_store(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_get__count(t_JaspellLookup *self, void *data);
            static PyGetSetDef t_JaspellLookup__fields_[] = {
              DECLARE_GET_FIELD(t_JaspellLookup, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_JaspellLookup__methods_[] = {
              DECLARE_METHOD(t_JaspellLookup, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JaspellLookup, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JaspellLookup, add, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, build, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, get, METH_O),
              DECLARE_METHOD(t_JaspellLookup, getCount, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, load, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, lookup, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(JaspellLookup)[] = {
              { Py_tp_methods, t_JaspellLookup__methods_ },
              { Py_tp_init, (void *) t_JaspellLookup_init_ },
              { Py_tp_getset, t_JaspellLookup__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(JaspellLookup)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::suggest::Lookup),
              NULL
            };

            DEFINE_TYPE(JaspellLookup, t_JaspellLookup, JaspellLookup);

            void t_JaspellLookup::install(PyObject *module)
            {
              installType(&PY_TYPE(JaspellLookup), &PY_TYPE_DEF(JaspellLookup), module, "JaspellLookup", 0);
            }

            void t_JaspellLookup::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(JaspellLookup), "class_", make_descriptor(JaspellLookup::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(JaspellLookup), "wrapfn_", make_descriptor(t_JaspellLookup::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(JaspellLookup), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_JaspellLookup_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, JaspellLookup::initializeClass, 1)))
                return NULL;
              return t_JaspellLookup::wrap_Object(JaspellLookup(((t_JaspellLookup *) arg)->object.this$));
            }
            static PyObject *t_JaspellLookup_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, JaspellLookup::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_JaspellLookup_init_(t_JaspellLookup *self, PyObject *args, PyObject *kwds)
            {
              JaspellLookup object((jobject) NULL);

              INT_CALL(object = JaspellLookup());
              self->object = object;

              return 0;
            }

            static PyObject *t_JaspellLookup_add(t_JaspellLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object a1((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "Oo", ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
              {
                OBJ_CALL(result = self->object.add(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "add", args);
              return NULL;
            }

            static PyObject *t_JaspellLookup_build(t_JaspellLookup *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(JaspellLookup), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_JaspellLookup_get(t_JaspellLookup *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_JaspellLookup_getCount(t_JaspellLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(JaspellLookup), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_JaspellLookup_load(t_JaspellLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(JaspellLookup), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_JaspellLookup_lookup(t_JaspellLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", ::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(PY_TYPE(JaspellLookup), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_JaspellLookup_ramBytesUsed(t_JaspellLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(JaspellLookup), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_JaspellLookup_store(t_JaspellLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(JaspellLookup), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_JaspellLookup_get__count(t_JaspellLookup *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiCollector.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/search/LeafCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Collector.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiCollector::class$ = NULL;
        jmethodID *MultiCollector::mids$ = NULL;
        bool MultiCollector::live$ = false;

        jclass MultiCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getLeafCollector_d5dbc8c30b21e920] = env->getMethodID(cls, "getLeafCollector", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/LeafCollector;");
            mids$[mid_scoreMode_8a35254b82ee8276] = env->getMethodID(cls, "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;");
            mids$[mid_wrap_4d7c714483acc201] = env->getStaticMethodID(cls, "wrap", "([Lorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/Collector;");
            mids$[mid_wrap_1729841421ec8df3] = env->getStaticMethodID(cls, "wrap", "(Ljava/lang/Iterable;)Lorg/apache/lucene/search/Collector;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::LeafCollector MultiCollector::getLeafCollector(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::search::LeafCollector(env->callObjectMethod(this$, mids$[mid_getLeafCollector_d5dbc8c30b21e920], a0.this$));
        }

        ::org::apache::lucene::search::ScoreMode MultiCollector::scoreMode() const
        {
          return ::org::apache::lucene::search::ScoreMode(env->callObjectMethod(this$, mids$[mid_scoreMode_8a35254b82ee8276]));
        }

        ::org::apache::lucene::search::Collector MultiCollector::wrap(const JArray< ::org::apache::lucene::search::Collector > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Collector(env->callStaticObjectMethod(cls, mids$[mid_wrap_4d7c714483acc201], a0.this$));
        }

        ::org::apache::lucene::search::Collector MultiCollector::wrap(const ::java::lang::Iterable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Collector(env->callStaticObjectMethod(cls, mids$[mid_wrap_1729841421ec8df3], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiCollector_getLeafCollector(t_MultiCollector *self, PyObject *arg);
        static PyObject *t_MultiCollector_scoreMode(t_MultiCollector *self);
        static PyObject *t_MultiCollector_wrap(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_MultiCollector__methods_[] = {
          DECLARE_METHOD(t_MultiCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiCollector, getLeafCollector, METH_O),
          DECLARE_METHOD(t_MultiCollector, scoreMode, METH_NOARGS),
          DECLARE_METHOD(t_MultiCollector, wrap, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiCollector)[] = {
          { Py_tp_methods, t_MultiCollector__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiCollector)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MultiCollector, t_MultiCollector, MultiCollector);

        void t_MultiCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiCollector), &PY_TYPE_DEF(MultiCollector), module, "MultiCollector", 0);
        }

        void t_MultiCollector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiCollector), "class_", make_descriptor(MultiCollector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiCollector), "wrapfn_", make_descriptor(t_MultiCollector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiCollector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiCollector::initializeClass, 1)))
            return NULL;
          return t_MultiCollector::wrap_Object(MultiCollector(((t_MultiCollector *) arg)->object.this$));
        }
        static PyObject *t_MultiCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiCollector_getLeafCollector(t_MultiCollector *self, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::LeafCollector result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getLeafCollector(a0));
            return ::org::apache::lucene::search::t_LeafCollector::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getLeafCollector", arg);
          return NULL;
        }

        static PyObject *t_MultiCollector_scoreMode(t_MultiCollector *self)
        {
          ::org::apache::lucene::search::ScoreMode result((jobject) NULL);
          OBJ_CALL(result = self->object.scoreMode());
          return ::org::apache::lucene::search::t_ScoreMode::wrap_Object(result);
        }

        static PyObject *t_MultiCollector_wrap(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::search::Collector > a0((jobject) NULL);
              ::org::apache::lucene::search::Collector result((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::MultiCollector::wrap(a0));
                return ::org::apache::lucene::search::t_Collector::wrap_Object(result);
              }
            }
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::Collector result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::MultiCollector::wrap(a0));
                return ::org::apache::lucene::search::t_Collector::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "wrap", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeParseException.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {

            ::java::lang::Class *QueryNodeParseException::class$ = NULL;
            jmethodID *QueryNodeParseException::mids$ = NULL;
            bool QueryNodeParseException::live$ = false;

            jclass QueryNodeParseException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/QueryNodeParseException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_471cfbdb800444a7] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
                mids$[mid_init$_26a7a119e2ed968d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                mids$[mid_init$_84e3b301d273e601] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;Ljava/lang/Throwable;)V");
                mids$[mid_getBeginColumn_9972fcc56b44e79d] = env->getMethodID(cls, "getBeginColumn", "()I");
                mids$[mid_getBeginLine_9972fcc56b44e79d] = env->getMethodID(cls, "getBeginLine", "()I");
                mids$[mid_getErrorToken_db9b55ba01e03e4b] = env->getMethodID(cls, "getErrorToken", "()Ljava/lang/String;");
                mids$[mid_getQuery_ba44900ab7d793b9] = env->getMethodID(cls, "getQuery", "()Ljava/lang/CharSequence;");
                mids$[mid_setNonLocalizedMessage_26a7a119e2ed968d] = env->getMethodID(cls, "setNonLocalizedMessage", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                mids$[mid_setQuery_4b7f5e38f806ae55] = env->getMethodID(cls, "setQuery", "(Ljava/lang/CharSequence;)V");
                mids$[mid_setBeginColumn_040c4cd0390c5aff] = env->getMethodID(cls, "setBeginColumn", "(I)V");
                mids$[mid_setErrorToken_9fd2eb66a64e6f0f] = env->getMethodID(cls, "setErrorToken", "(Ljava/lang/String;)V");
                mids$[mid_setBeginLine_040c4cd0390c5aff] = env->getMethodID(cls, "setBeginLine", "(I)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryNodeParseException::QueryNodeParseException(const ::java::lang::Throwable & a0) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeException(env->newObject(initializeClass, &mids$, mid_init$_471cfbdb800444a7, a0.this$)) {}

            QueryNodeParseException::QueryNodeParseException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeException(env->newObject(initializeClass, &mids$, mid_init$_26a7a119e2ed968d, a0.this$)) {}

            QueryNodeParseException::QueryNodeParseException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0, const ::java::lang::Throwable & a1) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeException(env->newObject(initializeClass, &mids$, mid_init$_84e3b301d273e601, a0.this$, a1.this$)) {}

            jint QueryNodeParseException::getBeginColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginColumn_9972fcc56b44e79d]);
            }

            jint QueryNodeParseException::getBeginLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginLine_9972fcc56b44e79d]);
            }

            ::java::lang::String QueryNodeParseException::getErrorToken() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getErrorToken_db9b55ba01e03e4b]));
            }

            ::java::lang::CharSequence QueryNodeParseException::getQuery() const
            {
              return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getQuery_ba44900ab7d793b9]));
            }

            void QueryNodeParseException::setNonLocalizedMessage(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNonLocalizedMessage_26a7a119e2ed968d], a0.this$);
            }

            void QueryNodeParseException::setQuery(const ::java::lang::CharSequence & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setQuery_4b7f5e38f806ae55], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            static PyObject *t_QueryNodeParseException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryNodeParseException_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryNodeParseException_init_(t_QueryNodeParseException *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryNodeParseException_getBeginColumn(t_QueryNodeParseException *self);
            static PyObject *t_QueryNodeParseException_getBeginLine(t_QueryNodeParseException *self);
            static PyObject *t_QueryNodeParseException_getErrorToken(t_QueryNodeParseException *self);
            static PyObject *t_QueryNodeParseException_getQuery(t_QueryNodeParseException *self);
            static PyObject *t_QueryNodeParseException_setNonLocalizedMessage(t_QueryNodeParseException *self, PyObject *arg);
            static PyObject *t_QueryNodeParseException_setQuery(t_QueryNodeParseException *self, PyObject *arg);
            static PyObject *t_QueryNodeParseException_get__beginColumn(t_QueryNodeParseException *self, void *data);
            static PyObject *t_QueryNodeParseException_get__beginLine(t_QueryNodeParseException *self, void *data);
            static PyObject *t_QueryNodeParseException_get__errorToken(t_QueryNodeParseException *self, void *data);
            static int t_QueryNodeParseException_set__nonLocalizedMessage(t_QueryNodeParseException *self, PyObject *arg, void *data);
            static PyObject *t_QueryNodeParseException_get__query(t_QueryNodeParseException *self, void *data);
            static int t_QueryNodeParseException_set__query(t_QueryNodeParseException *self, PyObject *arg, void *data);
            static PyGetSetDef t_QueryNodeParseException__fields_[] = {
              DECLARE_GET_FIELD(t_QueryNodeParseException, beginColumn),
              DECLARE_GET_FIELD(t_QueryNodeParseException, beginLine),
              DECLARE_GET_FIELD(t_QueryNodeParseException, errorToken),
              DECLARE_SET_FIELD(t_QueryNodeParseException, nonLocalizedMessage),
              DECLARE_GETSET_FIELD(t_QueryNodeParseException, query),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryNodeParseException__methods_[] = {
              DECLARE_METHOD(t_QueryNodeParseException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeParseException, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeParseException, getBeginColumn, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeParseException, getBeginLine, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeParseException, getErrorToken, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeParseException, getQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeParseException, setNonLocalizedMessage, METH_O),
              DECLARE_METHOD(t_QueryNodeParseException, setQuery, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(QueryNodeParseException)[] = {
              { Py_tp_methods, t_QueryNodeParseException__methods_ },
              { Py_tp_init, (void *) t_QueryNodeParseException_init_ },
              { Py_tp_getset, t_QueryNodeParseException__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(QueryNodeParseException)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::QueryNodeException),
              NULL
            };

            DEFINE_TYPE(QueryNodeParseException, t_QueryNodeParseException, QueryNodeParseException);

            void t_QueryNodeParseException::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryNodeParseException), &PY_TYPE_DEF(QueryNodeParseException), module, "QueryNodeParseException", 0);
            }

            void t_QueryNodeParseException::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeParseException), "class_", make_descriptor(QueryNodeParseException::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeParseException), "wrapfn_", make_descriptor(t_QueryNodeParseException::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeParseException), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryNodeParseException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryNodeParseException::initializeClass, 1)))
                return NULL;
              return t_QueryNodeParseException::wrap_Object(QueryNodeParseException(((t_QueryNodeParseException *) arg)->object.this$));
            }
            static PyObject *t_QueryNodeParseException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryNodeParseException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryNodeParseException_init_(t_QueryNodeParseException *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::Throwable a0((jobject) NULL);
                  QueryNodeParseException object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeParseException(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  QueryNodeParseException object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeParseException(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  ::java::lang::Throwable a1((jobject) NULL);
                  QueryNodeParseException object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, ::java::lang::Throwable::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = QueryNodeParseException(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryNodeParseException_getBeginColumn(t_QueryNodeParseException *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginColumn());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_QueryNodeParseException_getBeginLine(t_QueryNodeParseException *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginLine());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_QueryNodeParseException_getErrorToken(t_QueryNodeParseException *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getErrorToken());
              return j2p(result);
            }

            static PyObject *t_QueryNodeParseException_getQuery(t_QueryNodeParseException *self)
            {
              ::java::lang::CharSequence result((jobject) NULL);
              OBJ_CALL(result = self->object.getQuery());
              return ::java::lang::t_CharSequence::wrap_Object(result);
            }

            static PyObject *t_QueryNodeParseException_setNonLocalizedMessage(t_QueryNodeParseException *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNonLocalizedMessage(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setNonLocalizedMessage", arg);
              return NULL;
            }

            static PyObject *t_QueryNodeParseException_setQuery(t_QueryNodeParseException *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);

              if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(self->object.setQuery(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setQuery", arg);
              return NULL;
            }

            static PyObject *t_QueryNodeParseException_get__beginColumn(t_QueryNodeParseException *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginColumn());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_QueryNodeParseException_get__beginLine(t_QueryNodeParseException *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginLine());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_QueryNodeParseException_get__errorToken(t_QueryNodeParseException *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getErrorToken());
              return j2p(value);
            }

            static int t_QueryNodeParseException_set__nonLocalizedMessage(t_QueryNodeParseException *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::messages::Message value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &value))
                {
                  INT_CALL(self->object.setNonLocalizedMessage(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nonLocalizedMessage", arg);
              return -1;
            }

            static PyObject *t_QueryNodeParseException_get__query(t_QueryNodeParseException *self, void *data)
            {
              ::java::lang::CharSequence value((jobject) NULL);
              OBJ_CALL(value = self->object.getQuery());
              return ::java::lang::t_CharSequence::wrap_Object(value);
            }
            static int t_QueryNodeParseException_set__query(t_QueryNodeParseException *self, PyObject *arg, void *data)
            {
              {
                ::java::lang::CharSequence value((jobject) NULL);
                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &value))
                {
                  INT_CALL(self->object.setQuery(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "query", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FloatRangeDocValuesField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FloatRangeDocValuesField::class$ = NULL;
        jmethodID *FloatRangeDocValuesField::mids$ = NULL;
        bool FloatRangeDocValuesField::live$ = false;

        jclass FloatRangeDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FloatRangeDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_591dcbe784ecff7c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[F[F)V");
            mids$[mid_getMax_384f078ef4b8f931] = env->getMethodID(cls, "getMax", "(I)F");
            mids$[mid_getMin_384f078ef4b8f931] = env->getMethodID(cls, "getMin", "(I)F");
            mids$[mid_newSlowIntersectsQuery_a56c233be2e586b6] = env->getStaticMethodID(cls, "newSlowIntersectsQuery", "(Ljava/lang/String;[F[F)Lorg/apache/lucene/search/Query;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FloatRangeDocValuesField::FloatRangeDocValuesField(const ::java::lang::String & a0, const JArray< jfloat > & a1, const JArray< jfloat > & a2) : ::org::apache::lucene::document::BinaryRangeDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_591dcbe784ecff7c, a0.this$, a1.this$, a2.this$)) {}

        jfloat FloatRangeDocValuesField::getMax(jint a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_getMax_384f078ef4b8f931], a0);
        }

        jfloat FloatRangeDocValuesField::getMin(jint a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_getMin_384f078ef4b8f931], a0);
        }

        ::org::apache::lucene::search::Query FloatRangeDocValuesField::newSlowIntersectsQuery(const ::java::lang::String & a0, const JArray< jfloat > & a1, const JArray< jfloat > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSlowIntersectsQuery_a56c233be2e586b6], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FloatRangeDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FloatRangeDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FloatRangeDocValuesField_init_(t_FloatRangeDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FloatRangeDocValuesField_getMax(t_FloatRangeDocValuesField *self, PyObject *arg);
        static PyObject *t_FloatRangeDocValuesField_getMin(t_FloatRangeDocValuesField *self, PyObject *arg);
        static PyObject *t_FloatRangeDocValuesField_newSlowIntersectsQuery(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_FloatRangeDocValuesField__methods_[] = {
          DECLARE_METHOD(t_FloatRangeDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatRangeDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatRangeDocValuesField, getMax, METH_O),
          DECLARE_METHOD(t_FloatRangeDocValuesField, getMin, METH_O),
          DECLARE_METHOD(t_FloatRangeDocValuesField, newSlowIntersectsQuery, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FloatRangeDocValuesField)[] = {
          { Py_tp_methods, t_FloatRangeDocValuesField__methods_ },
          { Py_tp_init, (void *) t_FloatRangeDocValuesField_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FloatRangeDocValuesField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::BinaryRangeDocValuesField),
          NULL
        };

        DEFINE_TYPE(FloatRangeDocValuesField, t_FloatRangeDocValuesField, FloatRangeDocValuesField);

        void t_FloatRangeDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(FloatRangeDocValuesField), &PY_TYPE_DEF(FloatRangeDocValuesField), module, "FloatRangeDocValuesField", 0);
        }

        void t_FloatRangeDocValuesField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FloatRangeDocValuesField), "class_", make_descriptor(FloatRangeDocValuesField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FloatRangeDocValuesField), "wrapfn_", make_descriptor(t_FloatRangeDocValuesField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FloatRangeDocValuesField), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FloatRangeDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FloatRangeDocValuesField::initializeClass, 1)))
            return NULL;
          return t_FloatRangeDocValuesField::wrap_Object(FloatRangeDocValuesField(((t_FloatRangeDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_FloatRangeDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FloatRangeDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FloatRangeDocValuesField_init_(t_FloatRangeDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jfloat > a1((jobject) NULL);
          JArray< jfloat > a2((jobject) NULL);
          FloatRangeDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "s[F[F", &a0, &a1, &a2))
          {
            INT_CALL(object = FloatRangeDocValuesField(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FloatRangeDocValuesField_getMax(t_FloatRangeDocValuesField *self, PyObject *arg)
        {
          jint a0;
          jfloat result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getMax(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMax", arg);
          return NULL;
        }

        static PyObject *t_FloatRangeDocValuesField_getMin(t_FloatRangeDocValuesField *self, PyObject *arg)
        {
          jint a0;
          jfloat result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getMin(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMin", arg);
          return NULL;
        }

        static PyObject *t_FloatRangeDocValuesField_newSlowIntersectsQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jfloat > a1((jobject) NULL);
          JArray< jfloat > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[F[F", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::FloatRangeDocValuesField::newSlowIntersectsQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSlowIntersectsQuery", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsReader::class$ = NULL;
          jmethodID *CompressingStoredFieldsReader::mids$ = NULL;
          bool CompressingStoredFieldsReader::live$ = false;

          jclass CompressingStoredFieldsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f8f677347d54d3ca] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;)V");
              mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_clone_ba629b83d3686969] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/StoredFieldsReader;");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
              mids$[mid_getMergeInstance_ba629b83d3686969] = env->getMethodID(cls, "getMergeInstance", "()Lorg/apache/lucene/codecs/StoredFieldsReader;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_visitDocument_8f45e7464506ed2f] = env->getMethodID(cls, "visitDocument", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingStoredFieldsReader::CompressingStoredFieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::FieldInfos & a3, const ::org::apache::lucene::store::IOContext & a4, const ::java::lang::String & a5, const ::org::apache::lucene::codecs::compressing::CompressionMode & a6) : ::org::apache::lucene::codecs::StoredFieldsReader(env->newObject(initializeClass, &mids$, mid_init$_f8f677347d54d3ca, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$)) {}

          void CompressingStoredFieldsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
          }

          ::org::apache::lucene::codecs::StoredFieldsReader CompressingStoredFieldsReader::clone() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_clone_ba629b83d3686969]));
          }

          void CompressingStoredFieldsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          ::java::util::Collection CompressingStoredFieldsReader::getChildResources() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
          }

          ::org::apache::lucene::codecs::StoredFieldsReader CompressingStoredFieldsReader::getMergeInstance() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_getMergeInstance_ba629b83d3686969]));
          }

          jlong CompressingStoredFieldsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          ::java::lang::String CompressingStoredFieldsReader::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          void CompressingStoredFieldsReader::visitDocument(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_visitDocument_8f45e7464506ed2f], a0, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingStoredFieldsReader_init_(t_CompressingStoredFieldsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingStoredFieldsReader_checkIntegrity(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_clone(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_close(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_getChildResources(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_getMergeInstance(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_ramBytesUsed(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_toString(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_visitDocument(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_get__childResources(t_CompressingStoredFieldsReader *self, void *data);
          static PyObject *t_CompressingStoredFieldsReader_get__mergeInstance(t_CompressingStoredFieldsReader *self, void *data);
          static PyGetSetDef t_CompressingStoredFieldsReader__fields_[] = {
            DECLARE_GET_FIELD(t_CompressingStoredFieldsReader, childResources),
            DECLARE_GET_FIELD(t_CompressingStoredFieldsReader, mergeInstance),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CompressingStoredFieldsReader__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, clone, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, getChildResources, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, getMergeInstance, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, toString, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, visitDocument, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CompressingStoredFieldsReader)[] = {
            { Py_tp_methods, t_CompressingStoredFieldsReader__methods_ },
            { Py_tp_init, (void *) t_CompressingStoredFieldsReader_init_ },
            { Py_tp_getset, t_CompressingStoredFieldsReader__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CompressingStoredFieldsReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::StoredFieldsReader),
            NULL
          };

          DEFINE_TYPE(CompressingStoredFieldsReader, t_CompressingStoredFieldsReader, CompressingStoredFieldsReader);

          void t_CompressingStoredFieldsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsReader), &PY_TYPE_DEF(CompressingStoredFieldsReader), module, "CompressingStoredFieldsReader", 0);
          }

          void t_CompressingStoredFieldsReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingStoredFieldsReader), "class_", make_descriptor(CompressingStoredFieldsReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingStoredFieldsReader), "wrapfn_", make_descriptor(t_CompressingStoredFieldsReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingStoredFieldsReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsReader::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsReader::wrap_Object(CompressingStoredFieldsReader(((t_CompressingStoredFieldsReader *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingStoredFieldsReader_init_(t_CompressingStoredFieldsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a3((jobject) NULL);
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);
            ::java::lang::String a5((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a6((jobject) NULL);
            CompressingStoredFieldsReader object((jobject) NULL);

            if (!parseArgs(args, "kkskksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = CompressingStoredFieldsReader(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingStoredFieldsReader_checkIntegrity(t_CompressingStoredFieldsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_clone(t_CompressingStoredFieldsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_close(t_CompressingStoredFieldsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_getChildResources(t_CompressingStoredFieldsReader *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
            }

            return callSuper(PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "getChildResources", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_getMergeInstance(t_CompressingStoredFieldsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMergeInstance());
              return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "getMergeInstance", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_ramBytesUsed(t_CompressingStoredFieldsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_toString(t_CompressingStoredFieldsReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_visitDocument(t_CompressingStoredFieldsReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.visitDocument(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "visitDocument", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_get__childResources(t_CompressingStoredFieldsReader *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getChildResources());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static PyObject *t_CompressingStoredFieldsReader_get__mergeInstance(t_CompressingStoredFieldsReader *self, void *data)
          {
            ::org::apache::lucene::codecs::StoredFieldsReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getMergeInstance());
            return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/classification/KNearestNeighborClassifier.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/classification/Classifier.h"
#include "org/apache/lucene/classification/ClassificationResult.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {

        ::java::lang::Class *KNearestNeighborClassifier::class$ = NULL;
        jmethodID *KNearestNeighborClassifier::mids$ = NULL;
        bool KNearestNeighborClassifier::live$ = false;

        jclass KNearestNeighborClassifier::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/classification/KNearestNeighborClassifier");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_770a00a5864970d8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/similarities/Similarity;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/search/Query;IIILjava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_assignClass_5edc036bda71a93d] = env->getMethodID(cls, "assignClass", "(Ljava/lang/String;)Lorg/apache/lucene/classification/ClassificationResult;");
            mids$[mid_getClasses_25278b4b3ab80e37] = env->getMethodID(cls, "getClasses", "(Ljava/lang/String;)Ljava/util/List;");
            mids$[mid_getClasses_a5d57c41d0cd0867] = env->getMethodID(cls, "getClasses", "(Ljava/lang/String;I)Ljava/util/List;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_classifyFromTopDocs_6fc8879c93b9f25b] = env->getMethodID(cls, "classifyFromTopDocs", "(Lorg/apache/lucene/search/TopDocs;)Lorg/apache/lucene/classification/ClassificationResult;");
            mids$[mid_buildListFromTopDocs_e221c61940c02716] = env->getMethodID(cls, "buildListFromTopDocs", "(Lorg/apache/lucene/search/TopDocs;)Ljava/util/List;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        KNearestNeighborClassifier::KNearestNeighborClassifier(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::similarities::Similarity & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::org::apache::lucene::search::Query & a3, jint a4, jint a5, jint a6, const ::java::lang::String & a7, const JArray< ::java::lang::String > & a8) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_770a00a5864970d8, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5, a6, a7.this$, a8.this$)) {}

        ::org::apache::lucene::classification::ClassificationResult KNearestNeighborClassifier::assignClass(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::classification::ClassificationResult(env->callObjectMethod(this$, mids$[mid_assignClass_5edc036bda71a93d], a0.this$));
        }

        ::java::util::List KNearestNeighborClassifier::getClasses(const ::java::lang::String & a0) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getClasses_25278b4b3ab80e37], a0.this$));
        }

        ::java::util::List KNearestNeighborClassifier::getClasses(const ::java::lang::String & a0, jint a1) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getClasses_a5d57c41d0cd0867], a0.this$, a1));
        }

        ::java::lang::String KNearestNeighborClassifier::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        static PyObject *t_KNearestNeighborClassifier_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_KNearestNeighborClassifier_instance_(PyTypeObject *type, PyObject *arg);
        static int t_KNearestNeighborClassifier_init_(t_KNearestNeighborClassifier *self, PyObject *args, PyObject *kwds);
        static PyObject *t_KNearestNeighborClassifier_assignClass(t_KNearestNeighborClassifier *self, PyObject *arg);
        static PyObject *t_KNearestNeighborClassifier_getClasses(t_KNearestNeighborClassifier *self, PyObject *args);
        static PyObject *t_KNearestNeighborClassifier_toString(t_KNearestNeighborClassifier *self, PyObject *args);

        static PyMethodDef t_KNearestNeighborClassifier__methods_[] = {
          DECLARE_METHOD(t_KNearestNeighborClassifier, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KNearestNeighborClassifier, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KNearestNeighborClassifier, assignClass, METH_O),
          DECLARE_METHOD(t_KNearestNeighborClassifier, getClasses, METH_VARARGS),
          DECLARE_METHOD(t_KNearestNeighborClassifier, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(KNearestNeighborClassifier)[] = {
          { Py_tp_methods, t_KNearestNeighborClassifier__methods_ },
          { Py_tp_init, (void *) t_KNearestNeighborClassifier_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(KNearestNeighborClassifier)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(KNearestNeighborClassifier, t_KNearestNeighborClassifier, KNearestNeighborClassifier);

        void t_KNearestNeighborClassifier::install(PyObject *module)
        {
          installType(&PY_TYPE(KNearestNeighborClassifier), &PY_TYPE_DEF(KNearestNeighborClassifier), module, "KNearestNeighborClassifier", 0);
        }

        void t_KNearestNeighborClassifier::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(KNearestNeighborClassifier), "class_", make_descriptor(KNearestNeighborClassifier::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(KNearestNeighborClassifier), "wrapfn_", make_descriptor(t_KNearestNeighborClassifier::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(KNearestNeighborClassifier), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_KNearestNeighborClassifier_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, KNearestNeighborClassifier::initializeClass, 1)))
            return NULL;
          return t_KNearestNeighborClassifier::wrap_Object(KNearestNeighborClassifier(((t_KNearestNeighborClassifier *) arg)->object.this$));
        }
        static PyObject *t_KNearestNeighborClassifier_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, KNearestNeighborClassifier::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_KNearestNeighborClassifier_init_(t_KNearestNeighborClassifier *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::similarities::Similarity a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
          ::org::apache::lucene::search::Query a3((jobject) NULL);
          jint a4;
          jint a5;
          jint a6;
          ::java::lang::String a7((jobject) NULL);
          JArray< ::java::lang::String > a8((jobject) NULL);
          KNearestNeighborClassifier object((jobject) NULL);

          if (!parseArgs(args, "kkkkIIIs[s", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::similarities::Similarity::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
          {
            INT_CALL(object = KNearestNeighborClassifier(a0, a1, a2, a3, a4, a5, a6, a7, a8));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_KNearestNeighborClassifier_assignClass(t_KNearestNeighborClassifier *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::classification::ClassificationResult result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.assignClass(a0));
            return ::org::apache::lucene::classification::t_ClassificationResult::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          PyErr_SetArgsError((PyObject *) self, "assignClass", arg);
          return NULL;
        }

        static PyObject *t_KNearestNeighborClassifier_getClasses(t_KNearestNeighborClassifier *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.getClasses(a0));
                return ::java::util::t_List::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                OBJ_CALL(result = self->object.getClasses(a0, a1));
                return ::java::util::t_List::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getClasses", args);
          return NULL;
        }

        static PyObject *t_KNearestNeighborClassifier_toString(t_KNearestNeighborClassifier *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(KNearestNeighborClassifier), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/UniformSplitTermsWriter.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockEncoder.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *UniformSplitTermsWriter::class$ = NULL;
          jmethodID *UniformSplitTermsWriter::mids$ = NULL;
          bool UniformSplitTermsWriter::live$ = false;
          jint UniformSplitTermsWriter::DEFAULT_DELTA_NUM_LINES = (jint) 0;
          jint UniformSplitTermsWriter::DEFAULT_TARGET_NUM_BLOCK_LINES = (jint) 0;

          jclass UniformSplitTermsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/UniformSplitTermsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_858a5da9538896c8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/PostingsWriterBase;Lorg/apache/lucene/index/SegmentWriteState;Lorg/apache/lucene/codecs/uniformsplit/BlockEncoder;)V");
              mids$[mid_init$_035eacbde5d790cf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/PostingsWriterBase;Lorg/apache/lucene/index/SegmentWriteState;IILorg/apache/lucene/codecs/uniformsplit/BlockEncoder;)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_write_a02f5612a398fd43] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/index/Fields;Lorg/apache/lucene/codecs/NormsProducer;)V");
              mids$[mid_writeDictionary_f9451def1ea25bf5] = env->getMethodID(cls, "writeDictionary", "(Lorg/apache/lucene/codecs/uniformsplit/IndexDictionary$Builder;)V");
              mids$[mid_writePostingLine_668b78212341f993] = env->getMethodID(cls, "writePostingLine", "(Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/codecs/uniformsplit/FieldMetadata;Lorg/apache/lucene/codecs/NormsProducer;)Lorg/apache/lucene/codecs/BlockTermState;");
              mids$[mid_writeFieldsMetadata_2b54f802835ab89b] = env->getMethodID(cls, "writeFieldsMetadata", "(ILorg/apache/lucene/store/ByteBuffersDataOutput;)V");
              mids$[mid_writeFieldTerms_163a88a037f23099] = env->getMethodID(cls, "writeFieldTerms", "(Lorg/apache/lucene/codecs/uniformsplit/BlockWriter;Lorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/NormsProducer;)I");
              mids$[mid_validateSettings_438c62480c481c65] = env->getStaticMethodID(cls, "validateSettings", "(II)V");
              mids$[mid_writeUnencodedFieldsMetadata_a44c60d9058935d3] = env->getMethodID(cls, "writeUnencodedFieldsMetadata", "(Lorg/apache/lucene/store/ByteBuffersDataOutput;)V");
              mids$[mid_writeEncodedFieldsMetadata_a44c60d9058935d3] = env->getMethodID(cls, "writeEncodedFieldsMetadata", "(Lorg/apache/lucene/store/ByteBuffersDataOutput;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_DELTA_NUM_LINES = env->getStaticIntField(cls, "DEFAULT_DELTA_NUM_LINES");
              DEFAULT_TARGET_NUM_BLOCK_LINES = env->getStaticIntField(cls, "DEFAULT_TARGET_NUM_BLOCK_LINES");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UniformSplitTermsWriter::UniformSplitTermsWriter(const ::org::apache::lucene::codecs::PostingsWriterBase & a0, const ::org::apache::lucene::index::SegmentWriteState & a1, const ::org::apache::lucene::codecs::uniformsplit::BlockEncoder & a2) : ::org::apache::lucene::codecs::FieldsConsumer(env->newObject(initializeClass, &mids$, mid_init$_858a5da9538896c8, a0.this$, a1.this$, a2.this$)) {}

          UniformSplitTermsWriter::UniformSplitTermsWriter(const ::org::apache::lucene::codecs::PostingsWriterBase & a0, const ::org::apache::lucene::index::SegmentWriteState & a1, jint a2, jint a3, const ::org::apache::lucene::codecs::uniformsplit::BlockEncoder & a4) : ::org::apache::lucene::codecs::FieldsConsumer(env->newObject(initializeClass, &mids$, mid_init$_035eacbde5d790cf, a0.this$, a1.this$, a2, a3, a4.this$)) {}

          void UniformSplitTermsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void UniformSplitTermsWriter::write(const ::org::apache::lucene::index::Fields & a0, const ::org::apache::lucene::codecs::NormsProducer & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_a02f5612a398fd43], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_UniformSplitTermsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UniformSplitTermsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UniformSplitTermsWriter_init_(t_UniformSplitTermsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UniformSplitTermsWriter_close(t_UniformSplitTermsWriter *self, PyObject *args);
          static PyObject *t_UniformSplitTermsWriter_write(t_UniformSplitTermsWriter *self, PyObject *args);

          static PyMethodDef t_UniformSplitTermsWriter__methods_[] = {
            DECLARE_METHOD(t_UniformSplitTermsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UniformSplitTermsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UniformSplitTermsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_UniformSplitTermsWriter, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(UniformSplitTermsWriter)[] = {
            { Py_tp_methods, t_UniformSplitTermsWriter__methods_ },
            { Py_tp_init, (void *) t_UniformSplitTermsWriter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(UniformSplitTermsWriter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::FieldsConsumer),
            NULL
          };

          DEFINE_TYPE(UniformSplitTermsWriter, t_UniformSplitTermsWriter, UniformSplitTermsWriter);

          void t_UniformSplitTermsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(UniformSplitTermsWriter), &PY_TYPE_DEF(UniformSplitTermsWriter), module, "UniformSplitTermsWriter", 0);
          }

          void t_UniformSplitTermsWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(UniformSplitTermsWriter), "class_", make_descriptor(UniformSplitTermsWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UniformSplitTermsWriter), "wrapfn_", make_descriptor(t_UniformSplitTermsWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UniformSplitTermsWriter), "boxfn_", make_descriptor(boxObject));
            env->getClass(UniformSplitTermsWriter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(UniformSplitTermsWriter), "DEFAULT_DELTA_NUM_LINES", make_descriptor(UniformSplitTermsWriter::DEFAULT_DELTA_NUM_LINES));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UniformSplitTermsWriter), "DEFAULT_TARGET_NUM_BLOCK_LINES", make_descriptor(UniformSplitTermsWriter::DEFAULT_TARGET_NUM_BLOCK_LINES));
          }

          static PyObject *t_UniformSplitTermsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UniformSplitTermsWriter::initializeClass, 1)))
              return NULL;
            return t_UniformSplitTermsWriter::wrap_Object(UniformSplitTermsWriter(((t_UniformSplitTermsWriter *) arg)->object.this$));
          }
          static PyObject *t_UniformSplitTermsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UniformSplitTermsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UniformSplitTermsWriter_init_(t_UniformSplitTermsWriter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::codecs::PostingsWriterBase a0((jobject) NULL);
                ::org::apache::lucene::index::SegmentWriteState a1((jobject) NULL);
                ::org::apache::lucene::codecs::uniformsplit::BlockEncoder a2((jobject) NULL);
                UniformSplitTermsWriter object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::codecs::PostingsWriterBase::initializeClass, ::org::apache::lucene::index::SegmentWriteState::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockEncoder::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = UniformSplitTermsWriter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::codecs::PostingsWriterBase a0((jobject) NULL);
                ::org::apache::lucene::index::SegmentWriteState a1((jobject) NULL);
                jint a2;
                jint a3;
                ::org::apache::lucene::codecs::uniformsplit::BlockEncoder a4((jobject) NULL);
                UniformSplitTermsWriter object((jobject) NULL);

                if (!parseArgs(args, "kkIIk", ::org::apache::lucene::codecs::PostingsWriterBase::initializeClass, ::org::apache::lucene::index::SegmentWriteState::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockEncoder::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = UniformSplitTermsWriter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UniformSplitTermsWriter_close(t_UniformSplitTermsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(UniformSplitTermsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_UniformSplitTermsWriter_write(t_UniformSplitTermsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::Fields a0((jobject) NULL);
            ::org::apache::lucene::codecs::NormsProducer a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::Fields::initializeClass, ::org::apache::lucene::codecs::NormsProducer::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(UniformSplitTermsWriter), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter$IndexTermSelector.h"
#include "org/apache/lucene/codecs/TermStats.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {

          ::java::lang::Class *VariableGapTermsIndexWriter$IndexTermSelector::class$ = NULL;
          jmethodID *VariableGapTermsIndexWriter$IndexTermSelector::mids$ = NULL;
          bool VariableGapTermsIndexWriter$IndexTermSelector::live$ = false;

          jclass VariableGapTermsIndexWriter$IndexTermSelector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter$IndexTermSelector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_isIndexTerm_b105bc98075287ea] = env->getMethodID(cls, "isIndexTerm", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/codecs/TermStats;)Z");
              mids$[mid_newField_747195a1c5ce5890] = env->getMethodID(cls, "newField", "(Lorg/apache/lucene/index/FieldInfo;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          VariableGapTermsIndexWriter$IndexTermSelector::VariableGapTermsIndexWriter$IndexTermSelector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jboolean VariableGapTermsIndexWriter$IndexTermSelector::isIndexTerm(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::codecs::TermStats & a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIndexTerm_b105bc98075287ea], a0.this$, a1.this$);
          }

          void VariableGapTermsIndexWriter$IndexTermSelector::newField(const ::org::apache::lucene::index::FieldInfo & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_newField_747195a1c5ce5890], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {
          static PyObject *t_VariableGapTermsIndexWriter$IndexTermSelector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_VariableGapTermsIndexWriter$IndexTermSelector_instance_(PyTypeObject *type, PyObject *arg);
          static int t_VariableGapTermsIndexWriter$IndexTermSelector_init_(t_VariableGapTermsIndexWriter$IndexTermSelector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_VariableGapTermsIndexWriter$IndexTermSelector_isIndexTerm(t_VariableGapTermsIndexWriter$IndexTermSelector *self, PyObject *args);
          static PyObject *t_VariableGapTermsIndexWriter$IndexTermSelector_newField(t_VariableGapTermsIndexWriter$IndexTermSelector *self, PyObject *arg);

          static PyMethodDef t_VariableGapTermsIndexWriter$IndexTermSelector__methods_[] = {
            DECLARE_METHOD(t_VariableGapTermsIndexWriter$IndexTermSelector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VariableGapTermsIndexWriter$IndexTermSelector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VariableGapTermsIndexWriter$IndexTermSelector, isIndexTerm, METH_VARARGS),
            DECLARE_METHOD(t_VariableGapTermsIndexWriter$IndexTermSelector, newField, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(VariableGapTermsIndexWriter$IndexTermSelector)[] = {
            { Py_tp_methods, t_VariableGapTermsIndexWriter$IndexTermSelector__methods_ },
            { Py_tp_init, (void *) t_VariableGapTermsIndexWriter$IndexTermSelector_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(VariableGapTermsIndexWriter$IndexTermSelector)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(VariableGapTermsIndexWriter$IndexTermSelector, t_VariableGapTermsIndexWriter$IndexTermSelector, VariableGapTermsIndexWriter$IndexTermSelector);

          void t_VariableGapTermsIndexWriter$IndexTermSelector::install(PyObject *module)
          {
            installType(&PY_TYPE(VariableGapTermsIndexWriter$IndexTermSelector), &PY_TYPE_DEF(VariableGapTermsIndexWriter$IndexTermSelector), module, "VariableGapTermsIndexWriter$IndexTermSelector", 0);
          }

          void t_VariableGapTermsIndexWriter$IndexTermSelector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableGapTermsIndexWriter$IndexTermSelector), "class_", make_descriptor(VariableGapTermsIndexWriter$IndexTermSelector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableGapTermsIndexWriter$IndexTermSelector), "wrapfn_", make_descriptor(t_VariableGapTermsIndexWriter$IndexTermSelector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableGapTermsIndexWriter$IndexTermSelector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_VariableGapTermsIndexWriter$IndexTermSelector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, VariableGapTermsIndexWriter$IndexTermSelector::initializeClass, 1)))
              return NULL;
            return t_VariableGapTermsIndexWriter$IndexTermSelector::wrap_Object(VariableGapTermsIndexWriter$IndexTermSelector(((t_VariableGapTermsIndexWriter$IndexTermSelector *) arg)->object.this$));
          }
          static PyObject *t_VariableGapTermsIndexWriter$IndexTermSelector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, VariableGapTermsIndexWriter$IndexTermSelector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_VariableGapTermsIndexWriter$IndexTermSelector_init_(t_VariableGapTermsIndexWriter$IndexTermSelector *self, PyObject *args, PyObject *kwds)
          {
            VariableGapTermsIndexWriter$IndexTermSelector object((jobject) NULL);

            INT_CALL(object = VariableGapTermsIndexWriter$IndexTermSelector());
            self->object = object;

            return 0;
          }

          static PyObject *t_VariableGapTermsIndexWriter$IndexTermSelector_isIndexTerm(t_VariableGapTermsIndexWriter$IndexTermSelector *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::codecs::TermStats a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::codecs::TermStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.isIndexTerm(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isIndexTerm", args);
            return NULL;
          }

          static PyObject *t_VariableGapTermsIndexWriter$IndexTermSelector_newField(t_VariableGapTermsIndexWriter$IndexTermSelector *self, PyObject *arg)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
            {
              OBJ_CALL(self->object.newField(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "newField", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bg/BulgarianStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {

          ::java::lang::Class *BulgarianStemFilter::class$ = NULL;
          jmethodID *BulgarianStemFilter::mids$ = NULL;
          bool BulgarianStemFilter::live$ = false;

          jclass BulgarianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bg/BulgarianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BulgarianStemFilter::BulgarianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean BulgarianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {
          static PyObject *t_BulgarianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BulgarianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BulgarianStemFilter_init_(t_BulgarianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BulgarianStemFilter_incrementToken(t_BulgarianStemFilter *self, PyObject *args);

          static PyMethodDef t_BulgarianStemFilter__methods_[] = {
            DECLARE_METHOD(t_BulgarianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BulgarianStemFilter)[] = {
            { Py_tp_methods, t_BulgarianStemFilter__methods_ },
            { Py_tp_init, (void *) t_BulgarianStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BulgarianStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(BulgarianStemFilter, t_BulgarianStemFilter, BulgarianStemFilter);

          void t_BulgarianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(BulgarianStemFilter), &PY_TYPE_DEF(BulgarianStemFilter), module, "BulgarianStemFilter", 0);
          }

          void t_BulgarianStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BulgarianStemFilter), "class_", make_descriptor(BulgarianStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BulgarianStemFilter), "wrapfn_", make_descriptor(t_BulgarianStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BulgarianStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BulgarianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BulgarianStemFilter::initializeClass, 1)))
              return NULL;
            return t_BulgarianStemFilter::wrap_Object(BulgarianStemFilter(((t_BulgarianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_BulgarianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BulgarianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BulgarianStemFilter_init_(t_BulgarianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            BulgarianStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = BulgarianStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BulgarianStemFilter_incrementToken(t_BulgarianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(BulgarianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/FirstPassGroupingCollector.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/grouping/GroupSelector.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorable.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *FirstPassGroupingCollector::class$ = NULL;
          jmethodID *FirstPassGroupingCollector::mids$ = NULL;
          bool FirstPassGroupingCollector::live$ = false;

          jclass FirstPassGroupingCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/FirstPassGroupingCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_542fa4aa72157f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/grouping/GroupSelector;Lorg/apache/lucene/search/Sort;I)V");
              mids$[mid_collect_040c4cd0390c5aff] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_getGroupSelector_06bb0f4d4c7a4e8b] = env->getMethodID(cls, "getGroupSelector", "()Lorg/apache/lucene/search/grouping/GroupSelector;");
              mids$[mid_getTopGroups_d2d6ba66bd7a489e] = env->getMethodID(cls, "getTopGroups", "(I)Ljava/util/Collection;");
              mids$[mid_scoreMode_8a35254b82ee8276] = env->getMethodID(cls, "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;");
              mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");
              mids$[mid_doSetNextReader_8747e0e89febf88d] = env->getMethodID(cls, "doSetNextReader", "(Lorg/apache/lucene/index/LeafReaderContext;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FirstPassGroupingCollector::FirstPassGroupingCollector(const ::org::apache::lucene::search::grouping::GroupSelector & a0, const ::org::apache::lucene::search::Sort & a1, jint a2) : ::org::apache::lucene::search::SimpleCollector(env->newObject(initializeClass, &mids$, mid_init$_542fa4aa72157f4e, a0.this$, a1.this$, a2)) {}

          void FirstPassGroupingCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_040c4cd0390c5aff], a0);
          }

          ::org::apache::lucene::search::grouping::GroupSelector FirstPassGroupingCollector::getGroupSelector() const
          {
            return ::org::apache::lucene::search::grouping::GroupSelector(env->callObjectMethod(this$, mids$[mid_getGroupSelector_06bb0f4d4c7a4e8b]));
          }

          ::java::util::Collection FirstPassGroupingCollector::getTopGroups(jint a0) const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getTopGroups_d2d6ba66bd7a489e], a0));
          }

          ::org::apache::lucene::search::ScoreMode FirstPassGroupingCollector::scoreMode() const
          {
            return ::org::apache::lucene::search::ScoreMode(env->callObjectMethod(this$, mids$[mid_scoreMode_8a35254b82ee8276]));
          }

          void FirstPassGroupingCollector::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_FirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FirstPassGroupingCollector_of_(t_FirstPassGroupingCollector *self, PyObject *args);
          static int t_FirstPassGroupingCollector_init_(t_FirstPassGroupingCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FirstPassGroupingCollector_collect(t_FirstPassGroupingCollector *self, PyObject *args);
          static PyObject *t_FirstPassGroupingCollector_getGroupSelector(t_FirstPassGroupingCollector *self);
          static PyObject *t_FirstPassGroupingCollector_getTopGroups(t_FirstPassGroupingCollector *self, PyObject *arg);
          static PyObject *t_FirstPassGroupingCollector_scoreMode(t_FirstPassGroupingCollector *self, PyObject *args);
          static PyObject *t_FirstPassGroupingCollector_setScorer(t_FirstPassGroupingCollector *self, PyObject *args);
          static PyObject *t_FirstPassGroupingCollector_get__groupSelector(t_FirstPassGroupingCollector *self, void *data);
          static int t_FirstPassGroupingCollector_set__scorer(t_FirstPassGroupingCollector *self, PyObject *arg, void *data);
          static PyObject *t_FirstPassGroupingCollector_get__parameters_(t_FirstPassGroupingCollector *self, void *data);
          static PyGetSetDef t_FirstPassGroupingCollector__fields_[] = {
            DECLARE_GET_FIELD(t_FirstPassGroupingCollector, groupSelector),
            DECLARE_SET_FIELD(t_FirstPassGroupingCollector, scorer),
            DECLARE_GET_FIELD(t_FirstPassGroupingCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FirstPassGroupingCollector__methods_[] = {
            DECLARE_METHOD(t_FirstPassGroupingCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FirstPassGroupingCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FirstPassGroupingCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_FirstPassGroupingCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_FirstPassGroupingCollector, getGroupSelector, METH_NOARGS),
            DECLARE_METHOD(t_FirstPassGroupingCollector, getTopGroups, METH_O),
            DECLARE_METHOD(t_FirstPassGroupingCollector, scoreMode, METH_VARARGS),
            DECLARE_METHOD(t_FirstPassGroupingCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FirstPassGroupingCollector)[] = {
            { Py_tp_methods, t_FirstPassGroupingCollector__methods_ },
            { Py_tp_init, (void *) t_FirstPassGroupingCollector_init_ },
            { Py_tp_getset, t_FirstPassGroupingCollector__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FirstPassGroupingCollector)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::SimpleCollector),
            NULL
          };

          DEFINE_TYPE(FirstPassGroupingCollector, t_FirstPassGroupingCollector, FirstPassGroupingCollector);
          PyObject *t_FirstPassGroupingCollector::wrap_Object(const FirstPassGroupingCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FirstPassGroupingCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FirstPassGroupingCollector *self = (t_FirstPassGroupingCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FirstPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FirstPassGroupingCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FirstPassGroupingCollector *self = (t_FirstPassGroupingCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FirstPassGroupingCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(FirstPassGroupingCollector), &PY_TYPE_DEF(FirstPassGroupingCollector), module, "FirstPassGroupingCollector", 0);
          }

          void t_FirstPassGroupingCollector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FirstPassGroupingCollector), "class_", make_descriptor(FirstPassGroupingCollector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FirstPassGroupingCollector), "wrapfn_", make_descriptor(t_FirstPassGroupingCollector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FirstPassGroupingCollector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FirstPassGroupingCollector::initializeClass, 1)))
              return NULL;
            return t_FirstPassGroupingCollector::wrap_Object(FirstPassGroupingCollector(((t_FirstPassGroupingCollector *) arg)->object.this$));
          }
          static PyObject *t_FirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FirstPassGroupingCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FirstPassGroupingCollector_of_(t_FirstPassGroupingCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_FirstPassGroupingCollector_init_(t_FirstPassGroupingCollector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::grouping::GroupSelector a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::Sort a1((jobject) NULL);
            jint a2;
            FirstPassGroupingCollector object((jobject) NULL);

            if (!parseArgs(args, "KkI", ::org::apache::lucene::search::grouping::GroupSelector::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &p0, ::org::apache::lucene::search::grouping::t_GroupSelector::parameters_, &a1, &a2))
            {
              INT_CALL(object = FirstPassGroupingCollector(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FirstPassGroupingCollector_collect(t_FirstPassGroupingCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FirstPassGroupingCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_FirstPassGroupingCollector_getGroupSelector(t_FirstPassGroupingCollector *self)
          {
            ::org::apache::lucene::search::grouping::GroupSelector result((jobject) NULL);
            OBJ_CALL(result = self->object.getGroupSelector());
            return ::org::apache::lucene::search::grouping::t_GroupSelector::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_FirstPassGroupingCollector_getTopGroups(t_FirstPassGroupingCollector *self, PyObject *arg)
          {
            jint a0;
            ::java::util::Collection result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getTopGroups(a0));
              return ::java::util::t_Collection::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroups", arg);
            return NULL;
          }

          static PyObject *t_FirstPassGroupingCollector_scoreMode(t_FirstPassGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::ScoreMode result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.scoreMode());
              return ::org::apache::lucene::search::t_ScoreMode::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FirstPassGroupingCollector), (PyObject *) self, "scoreMode", args, 2);
          }

          static PyObject *t_FirstPassGroupingCollector_setScorer(t_FirstPassGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorable a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FirstPassGroupingCollector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_FirstPassGroupingCollector_get__parameters_(t_FirstPassGroupingCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_FirstPassGroupingCollector_get__groupSelector(t_FirstPassGroupingCollector *self, void *data)
          {
            ::org::apache::lucene::search::grouping::GroupSelector value((jobject) NULL);
            OBJ_CALL(value = self->object.getGroupSelector());
            return ::org::apache::lucene::search::grouping::t_GroupSelector::wrap_Object(value);
          }

          static int t_FirstPassGroupingCollector_set__scorer(t_FirstPassGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorable value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/PhraseHelper.h"
#include "java/util/Collection.h"
#include "java/util/function/Predicate.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "java/util/function/Function.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/search/uhighlight/OffsetsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/uhighlight/PhraseHelper.h"
#include "java/util/List.h"
#include "java/lang/Boolean.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *PhraseHelper::class$ = NULL;
          jmethodID *PhraseHelper::mids$ = NULL;
          bool PhraseHelper::live$ = false;
          PhraseHelper *PhraseHelper::NONE = NULL;

          jclass PhraseHelper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/PhraseHelper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fa45f19855a9ac86] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Ljava/lang/String;Ljava/util/function/Predicate;Ljava/util/function/Function;Ljava/util/function/Function;Z)V");
              mids$[mid_createOffsetsEnumsForSpans_af48ca8156e21201] = env->getMethodID(cls, "createOffsetsEnumsForSpans", "(Lorg/apache/lucene/index/LeafReader;ILjava/util/List;)V");
              mids$[mid_getAllPositionInsensitiveTerms_af55d198d80d9d7e] = env->getMethodID(cls, "getAllPositionInsensitiveTerms", "()[Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getSpanQueries_7dcf4034c6d1a92a] = env->getMethodID(cls, "getSpanQueries", "()Ljava/util/Set;");
              mids$[mid_hasPositionSensitivity_8454bd5aa23fd11e] = env->getMethodID(cls, "hasPositionSensitivity", "()Z");
              mids$[mid_willRewrite_8454bd5aa23fd11e] = env->getMethodID(cls, "willRewrite", "()Z");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NONE = new PhraseHelper(env->getStaticObjectField(cls, "NONE", "Lorg/apache/lucene/search/uhighlight/PhraseHelper;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PhraseHelper::PhraseHelper(const ::org::apache::lucene::search::Query & a0, const ::java::lang::String & a1, const ::java::util::function::Predicate & a2, const ::java::util::function::Function & a3, const ::java::util::function::Function & a4, jboolean a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_fa45f19855a9ac86, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5)) {}

          void PhraseHelper::createOffsetsEnumsForSpans(const ::org::apache::lucene::index::LeafReader & a0, jint a1, const ::java::util::List & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_createOffsetsEnumsForSpans_af48ca8156e21201], a0.this$, a1, a2.this$);
          }

          JArray< ::org::apache::lucene::util::BytesRef > PhraseHelper::getAllPositionInsensitiveTerms() const
          {
            return JArray< ::org::apache::lucene::util::BytesRef >(env->callObjectMethod(this$, mids$[mid_getAllPositionInsensitiveTerms_af55d198d80d9d7e]));
          }

          ::java::util::Set PhraseHelper::getSpanQueries() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getSpanQueries_7dcf4034c6d1a92a]));
          }

          jboolean PhraseHelper::hasPositionSensitivity() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPositionSensitivity_8454bd5aa23fd11e]);
          }

          jboolean PhraseHelper::willRewrite() const
          {
            return env->callBooleanMethod(this$, mids$[mid_willRewrite_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_PhraseHelper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PhraseHelper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PhraseHelper_init_(t_PhraseHelper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PhraseHelper_createOffsetsEnumsForSpans(t_PhraseHelper *self, PyObject *args);
          static PyObject *t_PhraseHelper_getAllPositionInsensitiveTerms(t_PhraseHelper *self);
          static PyObject *t_PhraseHelper_getSpanQueries(t_PhraseHelper *self);
          static PyObject *t_PhraseHelper_hasPositionSensitivity(t_PhraseHelper *self);
          static PyObject *t_PhraseHelper_willRewrite(t_PhraseHelper *self);
          static PyObject *t_PhraseHelper_get__allPositionInsensitiveTerms(t_PhraseHelper *self, void *data);
          static PyObject *t_PhraseHelper_get__spanQueries(t_PhraseHelper *self, void *data);
          static PyGetSetDef t_PhraseHelper__fields_[] = {
            DECLARE_GET_FIELD(t_PhraseHelper, allPositionInsensitiveTerms),
            DECLARE_GET_FIELD(t_PhraseHelper, spanQueries),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PhraseHelper__methods_[] = {
            DECLARE_METHOD(t_PhraseHelper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PhraseHelper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PhraseHelper, createOffsetsEnumsForSpans, METH_VARARGS),
            DECLARE_METHOD(t_PhraseHelper, getAllPositionInsensitiveTerms, METH_NOARGS),
            DECLARE_METHOD(t_PhraseHelper, getSpanQueries, METH_NOARGS),
            DECLARE_METHOD(t_PhraseHelper, hasPositionSensitivity, METH_NOARGS),
            DECLARE_METHOD(t_PhraseHelper, willRewrite, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PhraseHelper)[] = {
            { Py_tp_methods, t_PhraseHelper__methods_ },
            { Py_tp_init, (void *) t_PhraseHelper_init_ },
            { Py_tp_getset, t_PhraseHelper__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PhraseHelper)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PhraseHelper, t_PhraseHelper, PhraseHelper);

          void t_PhraseHelper::install(PyObject *module)
          {
            installType(&PY_TYPE(PhraseHelper), &PY_TYPE_DEF(PhraseHelper), module, "PhraseHelper", 0);
          }

          void t_PhraseHelper::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseHelper), "class_", make_descriptor(PhraseHelper::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseHelper), "wrapfn_", make_descriptor(t_PhraseHelper::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseHelper), "boxfn_", make_descriptor(boxObject));
            env->getClass(PhraseHelper::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseHelper), "NONE", make_descriptor(t_PhraseHelper::wrap_Object(*PhraseHelper::NONE)));
          }

          static PyObject *t_PhraseHelper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PhraseHelper::initializeClass, 1)))
              return NULL;
            return t_PhraseHelper::wrap_Object(PhraseHelper(((t_PhraseHelper *) arg)->object.this$));
          }
          static PyObject *t_PhraseHelper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PhraseHelper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PhraseHelper_init_(t_PhraseHelper *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::util::function::Predicate a2((jobject) NULL);
            PyTypeObject **p2;
            ::java::util::function::Function a3((jobject) NULL);
            PyTypeObject **p3;
            ::java::util::function::Function a4((jobject) NULL);
            PyTypeObject **p4;
            jboolean a5;
            PhraseHelper object((jobject) NULL);

            if (!parseArgs(args, "ksKKKZ", ::org::apache::lucene::search::Query::initializeClass, ::java::util::function::Predicate::initializeClass, ::java::util::function::Function::initializeClass, ::java::util::function::Function::initializeClass, &a0, &a1, &a2, &p2, ::java::util::function::t_Predicate::parameters_, &a3, &p3, ::java::util::function::t_Function::parameters_, &a4, &p4, ::java::util::function::t_Function::parameters_, &a5))
            {
              INT_CALL(object = PhraseHelper(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PhraseHelper_createOffsetsEnumsForSpans(t_PhraseHelper *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;

            if (!parseArgs(args, "kIK", ::org::apache::lucene::index::LeafReader::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.createOffsetsEnumsForSpans(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "createOffsetsEnumsForSpans", args);
            return NULL;
          }

          static PyObject *t_PhraseHelper_getAllPositionInsensitiveTerms(t_PhraseHelper *self)
          {
            JArray< ::org::apache::lucene::util::BytesRef > result((jobject) NULL);
            OBJ_CALL(result = self->object.getAllPositionInsensitiveTerms());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_BytesRef::wrap_jobject);
          }

          static PyObject *t_PhraseHelper_getSpanQueries(t_PhraseHelper *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getSpanQueries());
            return ::java::util::t_Set::wrap_Object(result, ::org::apache::lucene::search::spans::PY_TYPE(SpanQuery));
          }

          static PyObject *t_PhraseHelper_hasPositionSensitivity(t_PhraseHelper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasPositionSensitivity());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_PhraseHelper_willRewrite(t_PhraseHelper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.willRewrite());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_PhraseHelper_get__allPositionInsensitiveTerms(t_PhraseHelper *self, void *data)
          {
            JArray< ::org::apache::lucene::util::BytesRef > value((jobject) NULL);
            OBJ_CALL(value = self->object.getAllPositionInsensitiveTerms());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::util::t_BytesRef::wrap_jobject);
          }

          static PyObject *t_PhraseHelper_get__spanQueries(t_PhraseHelper *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getSpanQueries());
            return ::java::util::t_Set::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/LatLonShape.h"
#include "org/apache/lucene/document/ShapeField$QueryRelation.h"
#include "org/apache/lucene/geo/Polygon.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/document/Field.h"
#include "org/apache/lucene/geo/LatLonGeometry.h"
#include "org/apache/lucene/geo/Line.h"
#include "org/apache/lucene/geo/Circle.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *LatLonShape::class$ = NULL;
        jmethodID *LatLonShape::mids$ = NULL;
        bool LatLonShape::live$ = false;

        jclass LatLonShape::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/LatLonShape");

            mids$ = new jmethodID[max_mid];
            mids$[mid_createIndexableFields_3c68b99c521ee3e0] = env->getStaticMethodID(cls, "createIndexableFields", "(Ljava/lang/String;Lorg/apache/lucene/geo/Line;)[Lorg/apache/lucene/document/Field;");
            mids$[mid_createIndexableFields_239f890b199edcb5] = env->getStaticMethodID(cls, "createIndexableFields", "(Ljava/lang/String;Lorg/apache/lucene/geo/Polygon;)[Lorg/apache/lucene/document/Field;");
            mids$[mid_createIndexableFields_b9ef7dc9350ba044] = env->getStaticMethodID(cls, "createIndexableFields", "(Ljava/lang/String;DD)[Lorg/apache/lucene/document/Field;");
            mids$[mid_newBoxQuery_c51d519254e61ba1] = env->getStaticMethodID(cls, "newBoxQuery", "(Ljava/lang/String;Lorg/apache/lucene/document/ShapeField$QueryRelation;DDDD)Lorg/apache/lucene/search/Query;");
            mids$[mid_newDistanceQuery_0c35bf065e6dcb5e] = env->getStaticMethodID(cls, "newDistanceQuery", "(Ljava/lang/String;Lorg/apache/lucene/document/ShapeField$QueryRelation;[Lorg/apache/lucene/geo/Circle;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newGeometryQuery_5d57fa89ea474605] = env->getStaticMethodID(cls, "newGeometryQuery", "(Ljava/lang/String;Lorg/apache/lucene/document/ShapeField$QueryRelation;[Lorg/apache/lucene/geo/LatLonGeometry;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newLineQuery_130a76776e02e58d] = env->getStaticMethodID(cls, "newLineQuery", "(Ljava/lang/String;Lorg/apache/lucene/document/ShapeField$QueryRelation;[Lorg/apache/lucene/geo/Line;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newPointQuery_258f6ffe1460d657] = env->getStaticMethodID(cls, "newPointQuery", "(Ljava/lang/String;Lorg/apache/lucene/document/ShapeField$QueryRelation;[[D)Lorg/apache/lucene/search/Query;");
            mids$[mid_newPolygonQuery_5e03a2ef6c182f00] = env->getStaticMethodID(cls, "newPolygonQuery", "(Ljava/lang/String;Lorg/apache/lucene/document/ShapeField$QueryRelation;[Lorg/apache/lucene/geo/Polygon;)Lorg/apache/lucene/search/Query;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        JArray< ::org::apache::lucene::document::Field > LatLonShape::createIndexableFields(const ::java::lang::String & a0, const ::org::apache::lucene::geo::Line & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::org::apache::lucene::document::Field >(env->callStaticObjectMethod(cls, mids$[mid_createIndexableFields_3c68b99c521ee3e0], a0.this$, a1.this$));
        }

        JArray< ::org::apache::lucene::document::Field > LatLonShape::createIndexableFields(const ::java::lang::String & a0, const ::org::apache::lucene::geo::Polygon & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::org::apache::lucene::document::Field >(env->callStaticObjectMethod(cls, mids$[mid_createIndexableFields_239f890b199edcb5], a0.this$, a1.this$));
        }

        JArray< ::org::apache::lucene::document::Field > LatLonShape::createIndexableFields(const ::java::lang::String & a0, jdouble a1, jdouble a2)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::org::apache::lucene::document::Field >(env->callStaticObjectMethod(cls, mids$[mid_createIndexableFields_b9ef7dc9350ba044], a0.this$, a1, a2));
        }

        ::org::apache::lucene::search::Query LatLonShape::newBoxQuery(const ::java::lang::String & a0, const ::org::apache::lucene::document::ShapeField$QueryRelation & a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newBoxQuery_c51d519254e61ba1], a0.this$, a1.this$, a2, a3, a4, a5));
        }

        ::org::apache::lucene::search::Query LatLonShape::newDistanceQuery(const ::java::lang::String & a0, const ::org::apache::lucene::document::ShapeField$QueryRelation & a1, const JArray< ::org::apache::lucene::geo::Circle > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newDistanceQuery_0c35bf065e6dcb5e], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query LatLonShape::newGeometryQuery(const ::java::lang::String & a0, const ::org::apache::lucene::document::ShapeField$QueryRelation & a1, const JArray< ::org::apache::lucene::geo::LatLonGeometry > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newGeometryQuery_5d57fa89ea474605], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query LatLonShape::newLineQuery(const ::java::lang::String & a0, const ::org::apache::lucene::document::ShapeField$QueryRelation & a1, const JArray< ::org::apache::lucene::geo::Line > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newLineQuery_130a76776e02e58d], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query LatLonShape::newPointQuery(const ::java::lang::String & a0, const ::org::apache::lucene::document::ShapeField$QueryRelation & a1, const JArray< JArray< jdouble > > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newPointQuery_258f6ffe1460d657], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query LatLonShape::newPolygonQuery(const ::java::lang::String & a0, const ::org::apache::lucene::document::ShapeField$QueryRelation & a1, const JArray< ::org::apache::lucene::geo::Polygon > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newPolygonQuery_5e03a2ef6c182f00], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_LatLonShape_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LatLonShape_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LatLonShape_createIndexableFields(PyTypeObject *type, PyObject *args);
        static PyObject *t_LatLonShape_newBoxQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LatLonShape_newDistanceQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LatLonShape_newGeometryQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LatLonShape_newLineQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LatLonShape_newPointQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LatLonShape_newPolygonQuery(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_LatLonShape__methods_[] = {
          DECLARE_METHOD(t_LatLonShape, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LatLonShape, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LatLonShape, createIndexableFields, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LatLonShape, newBoxQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LatLonShape, newDistanceQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LatLonShape, newGeometryQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LatLonShape, newLineQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LatLonShape, newPointQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LatLonShape, newPolygonQuery, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LatLonShape)[] = {
          { Py_tp_methods, t_LatLonShape__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LatLonShape)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LatLonShape, t_LatLonShape, LatLonShape);

        void t_LatLonShape::install(PyObject *module)
        {
          installType(&PY_TYPE(LatLonShape), &PY_TYPE_DEF(LatLonShape), module, "LatLonShape", 0);
        }

        void t_LatLonShape::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonShape), "class_", make_descriptor(LatLonShape::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonShape), "wrapfn_", make_descriptor(t_LatLonShape::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonShape), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LatLonShape_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LatLonShape::initializeClass, 1)))
            return NULL;
          return t_LatLonShape::wrap_Object(LatLonShape(((t_LatLonShape *) arg)->object.this$));
        }
        static PyObject *t_LatLonShape_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LatLonShape::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LatLonShape_createIndexableFields(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::geo::Line a1((jobject) NULL);
              JArray< ::org::apache::lucene::document::Field > result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::geo::Line::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::LatLonShape::createIndexableFields(a0, a1));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::document::t_Field::wrap_jobject);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::geo::Polygon a1((jobject) NULL);
              JArray< ::org::apache::lucene::document::Field > result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::geo::Polygon::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::LatLonShape::createIndexableFields(a0, a1));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::document::t_Field::wrap_jobject);
              }
            }
            break;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jdouble a1;
              jdouble a2;
              JArray< ::org::apache::lucene::document::Field > result((jobject) NULL);

              if (!parseArgs(args, "sDD", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::LatLonShape::createIndexableFields(a0, a1, a2));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::document::t_Field::wrap_jobject);
              }
            }
          }

          PyErr_SetArgsError(type, "createIndexableFields", args);
          return NULL;
        }

        static PyObject *t_LatLonShape_newBoxQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::document::ShapeField$QueryRelation a1((jobject) NULL);
          PyTypeObject **p1;
          jdouble a2;
          jdouble a3;
          jdouble a4;
          jdouble a5;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sKDDDD", ::org::apache::lucene::document::ShapeField$QueryRelation::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_ShapeField$QueryRelation::parameters_, &a2, &a3, &a4, &a5))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LatLonShape::newBoxQuery(a0, a1, a2, a3, a4, a5));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newBoxQuery", args);
          return NULL;
        }

        static PyObject *t_LatLonShape_newDistanceQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::document::ShapeField$QueryRelation a1((jobject) NULL);
          PyTypeObject **p1;
          JArray< ::org::apache::lucene::geo::Circle > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sK[k", ::org::apache::lucene::document::ShapeField$QueryRelation::initializeClass, ::org::apache::lucene::geo::Circle::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_ShapeField$QueryRelation::parameters_, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LatLonShape::newDistanceQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newDistanceQuery", args);
          return NULL;
        }

        static PyObject *t_LatLonShape_newGeometryQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::document::ShapeField$QueryRelation a1((jobject) NULL);
          PyTypeObject **p1;
          JArray< ::org::apache::lucene::geo::LatLonGeometry > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sK[k", ::org::apache::lucene::document::ShapeField$QueryRelation::initializeClass, ::org::apache::lucene::geo::LatLonGeometry::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_ShapeField$QueryRelation::parameters_, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LatLonShape::newGeometryQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newGeometryQuery", args);
          return NULL;
        }

        static PyObject *t_LatLonShape_newLineQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::document::ShapeField$QueryRelation a1((jobject) NULL);
          PyTypeObject **p1;
          JArray< ::org::apache::lucene::geo::Line > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sK[k", ::org::apache::lucene::document::ShapeField$QueryRelation::initializeClass, ::org::apache::lucene::geo::Line::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_ShapeField$QueryRelation::parameters_, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LatLonShape::newLineQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newLineQuery", args);
          return NULL;
        }

        static PyObject *t_LatLonShape_newPointQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::document::ShapeField$QueryRelation a1((jobject) NULL);
          PyTypeObject **p1;
          JArray< JArray< jdouble > > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sK[[D", ::org::apache::lucene::document::ShapeField$QueryRelation::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_ShapeField$QueryRelation::parameters_, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LatLonShape::newPointQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newPointQuery", args);
          return NULL;
        }

        static PyObject *t_LatLonShape_newPolygonQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::document::ShapeField$QueryRelation a1((jobject) NULL);
          PyTypeObject **p1;
          JArray< ::org::apache::lucene::geo::Polygon > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sK[k", ::org::apache::lucene::document::ShapeField$QueryRelation::initializeClass, ::org::apache::lucene::geo::Polygon::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_ShapeField$QueryRelation::parameters_, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LatLonShape::newPolygonQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newPolygonQuery", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexReader$CacheKey.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexReader$CacheKey::class$ = NULL;
        jmethodID *IndexReader$CacheKey::mids$ = NULL;
        bool IndexReader$CacheKey::live$ = false;

        jclass IndexReader$CacheKey::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexReader$CacheKey");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexReader$CacheKey_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader$CacheKey_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_IndexReader$CacheKey__methods_[] = {
          DECLARE_METHOD(t_IndexReader$CacheKey, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader$CacheKey, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexReader$CacheKey)[] = {
          { Py_tp_methods, t_IndexReader$CacheKey__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexReader$CacheKey)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexReader$CacheKey, t_IndexReader$CacheKey, IndexReader$CacheKey);

        void t_IndexReader$CacheKey::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexReader$CacheKey), &PY_TYPE_DEF(IndexReader$CacheKey), module, "IndexReader$CacheKey", 0);
        }

        void t_IndexReader$CacheKey::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexReader$CacheKey), "class_", make_descriptor(IndexReader$CacheKey::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexReader$CacheKey), "wrapfn_", make_descriptor(t_IndexReader$CacheKey::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexReader$CacheKey), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexReader$CacheKey_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexReader$CacheKey::initializeClass, 1)))
            return NULL;
          return t_IndexReader$CacheKey::wrap_Object(IndexReader$CacheKey(((t_IndexReader$CacheKey *) arg)->object.this$));
        }
        static PyObject *t_IndexReader$CacheKey_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexReader$CacheKey::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ScoreDoc::class$ = NULL;
        jmethodID *ScoreDoc::mids$ = NULL;
        jfieldID *ScoreDoc::fids$ = NULL;
        bool ScoreDoc::live$ = false;

        jclass ScoreDoc::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ScoreDoc");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_da161bce5801b190] = env->getMethodID(cls, "<init>", "(IF)V");
            mids$[mid_init$_f10d010c0199a31d] = env->getMethodID(cls, "<init>", "(IFI)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_doc] = env->getFieldID(cls, "doc", "I");
            fids$[fid_score] = env->getFieldID(cls, "score", "F");
            fids$[fid_shardIndex] = env->getFieldID(cls, "shardIndex", "I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ScoreDoc::ScoreDoc(jint a0, jfloat a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_da161bce5801b190, a0, a1)) {}

        ScoreDoc::ScoreDoc(jint a0, jfloat a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f10d010c0199a31d, a0, a1, a2)) {}

        ::java::lang::String ScoreDoc::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jint ScoreDoc::_get_doc() const
        {
          return env->getIntField(this$, fids$[fid_doc]);
        }

        void ScoreDoc::_set_doc(jint a0) const
        {
          env->setIntField(this$, fids$[fid_doc], a0);
        }

        jfloat ScoreDoc::_get_score() const
        {
          return env->getFloatField(this$, fids$[fid_score]);
        }

        void ScoreDoc::_set_score(jfloat a0) const
        {
          env->setFloatField(this$, fids$[fid_score], a0);
        }

        jint ScoreDoc::_get_shardIndex() const
        {
          return env->getIntField(this$, fids$[fid_shardIndex]);
        }

        void ScoreDoc::_set_shardIndex(jint a0) const
        {
          env->setIntField(this$, fids$[fid_shardIndex], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ScoreDoc_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoreDoc_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ScoreDoc_init_(t_ScoreDoc *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ScoreDoc_toString(t_ScoreDoc *self, PyObject *args);
        static PyObject *t_ScoreDoc_get__doc(t_ScoreDoc *self, void *data);
        static int t_ScoreDoc_set__doc(t_ScoreDoc *self, PyObject *arg, void *data);
        static PyObject *t_ScoreDoc_get__score(t_ScoreDoc *self, void *data);
        static int t_ScoreDoc_set__score(t_ScoreDoc *self, PyObject *arg, void *data);
        static PyObject *t_ScoreDoc_get__shardIndex(t_ScoreDoc *self, void *data);
        static int t_ScoreDoc_set__shardIndex(t_ScoreDoc *self, PyObject *arg, void *data);

        static PyGetSetDef t_ScoreDoc__fields_[] = {
          DECLARE_GETSET_FIELD(t_ScoreDoc, doc),
          DECLARE_GETSET_FIELD(t_ScoreDoc, score),
          DECLARE_GETSET_FIELD(t_ScoreDoc, shardIndex),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ScoreDoc__methods_[] = {
          DECLARE_METHOD(t_ScoreDoc, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreDoc, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreDoc, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ScoreDoc)[] = {
          { Py_tp_methods, t_ScoreDoc__methods_ },
          { Py_tp_init, (void *) t_ScoreDoc_init_ },
          { Py_tp_getset, t_ScoreDoc__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ScoreDoc)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(ScoreDoc, t_ScoreDoc, ScoreDoc);

        void t_ScoreDoc::install(PyObject *module)
        {
          installType(&PY_TYPE(ScoreDoc), &PY_TYPE_DEF(ScoreDoc), module, "ScoreDoc", 0);
        }

        void t_ScoreDoc::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreDoc), "class_", make_descriptor(ScoreDoc::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreDoc), "wrapfn_", make_descriptor(t_ScoreDoc::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreDoc), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ScoreDoc_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ScoreDoc::initializeClass, 1)))
            return NULL;
          return t_ScoreDoc::wrap_Object(ScoreDoc(((t_ScoreDoc *) arg)->object.this$));
        }
        static PyObject *t_ScoreDoc_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ScoreDoc::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ScoreDoc_init_(t_ScoreDoc *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              jfloat a1;
              ScoreDoc object((jobject) NULL);

              if (!parseArgs(args, "IF", &a0, &a1))
              {
                INT_CALL(object = ScoreDoc(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              jfloat a1;
              jint a2;
              ScoreDoc object((jobject) NULL);

              if (!parseArgs(args, "IFI", &a0, &a1, &a2))
              {
                INT_CALL(object = ScoreDoc(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ScoreDoc_toString(t_ScoreDoc *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(ScoreDoc), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ScoreDoc_get__doc(t_ScoreDoc *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_doc());
          return PyLong_FromLong((long) value);
        }
        static int t_ScoreDoc_set__doc(t_ScoreDoc *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_doc(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "doc", arg);
          return -1;
        }

        static PyObject *t_ScoreDoc_get__score(t_ScoreDoc *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_score());
          return PyFloat_FromDouble((double) value);
        }
        static int t_ScoreDoc_set__score(t_ScoreDoc *self, PyObject *arg, void *data)
        {
          jfloat value;
          if (!parseArg(arg, "F", &value))
          {
            INT_CALL(self->object._set_score(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "score", arg);
          return -1;
        }

        static PyObject *t_ScoreDoc_get__shardIndex(t_ScoreDoc *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_shardIndex());
          return PyLong_FromLong((long) value);
        }
        static int t_ScoreDoc_set__shardIndex(t_ScoreDoc *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_shardIndex(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "shardIndex", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hunspell/Hunspell.h"
#include "org/apache/lucene/analysis/hunspell/Dictionary.h"
#include "java/lang/Class.h"
#include "java/lang/Runnable.h"
#include "org/apache/lucene/analysis/hunspell/SuggestionTimeoutException.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/analysis/hunspell/TimeoutPolicy.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {

          ::java::lang::Class *Hunspell::class$ = NULL;
          jmethodID *Hunspell::mids$ = NULL;
          bool Hunspell::live$ = false;

          jclass Hunspell::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hunspell/Hunspell");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ce3007d0ed8f72c3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/hunspell/Dictionary;)V");
              mids$[mid_init$_28b3da2c997ad002] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/hunspell/Dictionary;Lorg/apache/lucene/analysis/hunspell/TimeoutPolicy;Ljava/lang/Runnable;)V");
              mids$[mid_getRoots_25278b4b3ab80e37] = env->getMethodID(cls, "getRoots", "(Ljava/lang/String;)Ljava/util/List;");
              mids$[mid_spell_145b2d0af0c06b93] = env->getMethodID(cls, "spell", "(Ljava/lang/String;)Z");
              mids$[mid_suggest_25278b4b3ab80e37] = env->getMethodID(cls, "suggest", "(Ljava/lang/String;)Ljava/util/List;");
              mids$[mid_suggest_4a8af2e4ac73458e] = env->getMethodID(cls, "suggest", "(Ljava/lang/String;J)Ljava/util/List;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Hunspell::Hunspell(const ::org::apache::lucene::analysis::hunspell::Dictionary & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ce3007d0ed8f72c3, a0.this$)) {}

          Hunspell::Hunspell(const ::org::apache::lucene::analysis::hunspell::Dictionary & a0, const ::org::apache::lucene::analysis::hunspell::TimeoutPolicy & a1, const ::java::lang::Runnable & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_28b3da2c997ad002, a0.this$, a1.this$, a2.this$)) {}

          ::java::util::List Hunspell::getRoots(const ::java::lang::String & a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getRoots_25278b4b3ab80e37], a0.this$));
          }

          jboolean Hunspell::spell(const ::java::lang::String & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_spell_145b2d0af0c06b93], a0.this$);
          }

          ::java::util::List Hunspell::suggest(const ::java::lang::String & a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_suggest_25278b4b3ab80e37], a0.this$));
          }

          ::java::util::List Hunspell::suggest(const ::java::lang::String & a0, jlong a1) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_suggest_4a8af2e4ac73458e], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {
          static PyObject *t_Hunspell_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Hunspell_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Hunspell_init_(t_Hunspell *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Hunspell_getRoots(t_Hunspell *self, PyObject *arg);
          static PyObject *t_Hunspell_spell(t_Hunspell *self, PyObject *arg);
          static PyObject *t_Hunspell_suggest(t_Hunspell *self, PyObject *args);

          static PyMethodDef t_Hunspell__methods_[] = {
            DECLARE_METHOD(t_Hunspell, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Hunspell, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Hunspell, getRoots, METH_O),
            DECLARE_METHOD(t_Hunspell, spell, METH_O),
            DECLARE_METHOD(t_Hunspell, suggest, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Hunspell)[] = {
            { Py_tp_methods, t_Hunspell__methods_ },
            { Py_tp_init, (void *) t_Hunspell_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Hunspell)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Hunspell, t_Hunspell, Hunspell);

          void t_Hunspell::install(PyObject *module)
          {
            installType(&PY_TYPE(Hunspell), &PY_TYPE_DEF(Hunspell), module, "Hunspell", 0);
          }

          void t_Hunspell::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Hunspell), "class_", make_descriptor(Hunspell::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Hunspell), "wrapfn_", make_descriptor(t_Hunspell::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Hunspell), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Hunspell_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Hunspell::initializeClass, 1)))
              return NULL;
            return t_Hunspell::wrap_Object(Hunspell(((t_Hunspell *) arg)->object.this$));
          }
          static PyObject *t_Hunspell_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Hunspell::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Hunspell_init_(t_Hunspell *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::hunspell::Dictionary a0((jobject) NULL);
                Hunspell object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::hunspell::Dictionary::initializeClass, &a0))
                {
                  INT_CALL(object = Hunspell(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::hunspell::Dictionary a0((jobject) NULL);
                ::org::apache::lucene::analysis::hunspell::TimeoutPolicy a1((jobject) NULL);
                PyTypeObject **p1;
                ::java::lang::Runnable a2((jobject) NULL);
                Hunspell object((jobject) NULL);

                if (!parseArgs(args, "kKk", ::org::apache::lucene::analysis::hunspell::Dictionary::initializeClass, ::org::apache::lucene::analysis::hunspell::TimeoutPolicy::initializeClass, ::java::lang::Runnable::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::hunspell::t_TimeoutPolicy::parameters_, &a2))
                {
                  INT_CALL(object = Hunspell(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Hunspell_getRoots(t_Hunspell *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::List result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getRoots(a0));
              return ::java::util::t_List::wrap_Object(result, ::java::lang::PY_TYPE(String));
            }

            PyErr_SetArgsError((PyObject *) self, "getRoots", arg);
            return NULL;
          }

          static PyObject *t_Hunspell_spell(t_Hunspell *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.spell(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "spell", arg);
            return NULL;
          }

          static PyObject *t_Hunspell_suggest(t_Hunspell *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.suggest(a0));
                  return ::java::util::t_List::wrap_Object(result, ::java::lang::PY_TYPE(String));
                }
              }
              break;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jlong a1;
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "sJ", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.suggest(a0, a1));
                  return ::java::util::t_List::wrap_Object(result, ::java::lang::PY_TYPE(String));
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "suggest", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *RegexpQueryNode::class$ = NULL;
              jmethodID *RegexpQueryNode::mids$ = NULL;
              bool RegexpQueryNode::live$ = false;

              jclass RegexpQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_9cb0cd96f3795799] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_c91fbc14c65bb82b] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode;");
                  mids$[mid_getField_ba44900ab7d793b9] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getFieldAsString_db9b55ba01e03e4b] = env->getMethodID(cls, "getFieldAsString", "()Ljava/lang/String;");
                  mids$[mid_getText_ba44900ab7d793b9] = env->getMethodID(cls, "getText", "()Ljava/lang/CharSequence;");
                  mids$[mid_setField_4b7f5e38f806ae55] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_setText_4b7f5e38f806ae55] = env->getMethodID(cls, "setText", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_textToBytesRef_7af2ea2e37ce82b8] = env->getMethodID(cls, "textToBytesRef", "()Lorg/apache/lucene/util/BytesRef;");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              RegexpQueryNode::RegexpQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_9cb0cd96f3795799, a0.this$, a1.this$, a2, a3)) {}

              RegexpQueryNode RegexpQueryNode::cloneTree() const
              {
                return RegexpQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_c91fbc14c65bb82b]));
              }

              ::java::lang::CharSequence RegexpQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_ba44900ab7d793b9]));
              }

              ::java::lang::String RegexpQueryNode::getFieldAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldAsString_db9b55ba01e03e4b]));
              }

              ::java::lang::CharSequence RegexpQueryNode::getText() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getText_ba44900ab7d793b9]));
              }

              void RegexpQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_4b7f5e38f806ae55], a0.this$);
              }

              void RegexpQueryNode::setText(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setText_4b7f5e38f806ae55], a0.this$);
              }

              ::org::apache::lucene::util::BytesRef RegexpQueryNode::textToBytesRef() const
              {
                return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_textToBytesRef_7af2ea2e37ce82b8]));
              }

              ::java::lang::CharSequence RegexpQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String RegexpQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_RegexpQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RegexpQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_RegexpQueryNode_init_(t_RegexpQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_RegexpQueryNode_cloneTree(t_RegexpQueryNode *self, PyObject *args);
              static PyObject *t_RegexpQueryNode_getField(t_RegexpQueryNode *self);
              static PyObject *t_RegexpQueryNode_getFieldAsString(t_RegexpQueryNode *self);
              static PyObject *t_RegexpQueryNode_getText(t_RegexpQueryNode *self);
              static PyObject *t_RegexpQueryNode_setField(t_RegexpQueryNode *self, PyObject *arg);
              static PyObject *t_RegexpQueryNode_setText(t_RegexpQueryNode *self, PyObject *arg);
              static PyObject *t_RegexpQueryNode_textToBytesRef(t_RegexpQueryNode *self);
              static PyObject *t_RegexpQueryNode_toQueryString(t_RegexpQueryNode *self, PyObject *args);
              static PyObject *t_RegexpQueryNode_toString(t_RegexpQueryNode *self, PyObject *args);
              static PyObject *t_RegexpQueryNode_get__field(t_RegexpQueryNode *self, void *data);
              static int t_RegexpQueryNode_set__field(t_RegexpQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_RegexpQueryNode_get__fieldAsString(t_RegexpQueryNode *self, void *data);
              static PyObject *t_RegexpQueryNode_get__text(t_RegexpQueryNode *self, void *data);
              static int t_RegexpQueryNode_set__text(t_RegexpQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_RegexpQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_RegexpQueryNode, field),
                DECLARE_GET_FIELD(t_RegexpQueryNode, fieldAsString),
                DECLARE_GETSET_FIELD(t_RegexpQueryNode, text),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_RegexpQueryNode__methods_[] = {
                DECLARE_METHOD(t_RegexpQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RegexpQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RegexpQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_RegexpQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_RegexpQueryNode, getFieldAsString, METH_NOARGS),
                DECLARE_METHOD(t_RegexpQueryNode, getText, METH_NOARGS),
                DECLARE_METHOD(t_RegexpQueryNode, setField, METH_O),
                DECLARE_METHOD(t_RegexpQueryNode, setText, METH_O),
                DECLARE_METHOD(t_RegexpQueryNode, textToBytesRef, METH_NOARGS),
                DECLARE_METHOD(t_RegexpQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_RegexpQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(RegexpQueryNode)[] = {
                { Py_tp_methods, t_RegexpQueryNode__methods_ },
                { Py_tp_init, (void *) t_RegexpQueryNode_init_ },
                { Py_tp_getset, t_RegexpQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(RegexpQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl),
                NULL
              };

              DEFINE_TYPE(RegexpQueryNode, t_RegexpQueryNode, RegexpQueryNode);

              void t_RegexpQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(RegexpQueryNode), &PY_TYPE_DEF(RegexpQueryNode), module, "RegexpQueryNode", 0);
              }

              void t_RegexpQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(RegexpQueryNode), "class_", make_descriptor(RegexpQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(RegexpQueryNode), "wrapfn_", make_descriptor(t_RegexpQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(RegexpQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RegexpQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RegexpQueryNode::initializeClass, 1)))
                  return NULL;
                return t_RegexpQueryNode::wrap_Object(RegexpQueryNode(((t_RegexpQueryNode *) arg)->object.this$));
              }
              static PyObject *t_RegexpQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RegexpQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_RegexpQueryNode_init_(t_RegexpQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                jint a2;
                jint a3;
                RegexpQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOII", ::java::lang::PY_TYPE(CharSequence), ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = RegexpQueryNode(a0, a1, a2, a3));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_RegexpQueryNode_cloneTree(t_RegexpQueryNode *self, PyObject *args)
              {
                RegexpQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_RegexpQueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(RegexpQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_RegexpQueryNode_getField(t_RegexpQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_RegexpQueryNode_getFieldAsString(t_RegexpQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getFieldAsString());
                return j2p(result);
              }

              static PyObject *t_RegexpQueryNode_getText(t_RegexpQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_RegexpQueryNode_setField(t_RegexpQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_RegexpQueryNode_setText(t_RegexpQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setText(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setText", arg);
                return NULL;
              }

              static PyObject *t_RegexpQueryNode_textToBytesRef(t_RegexpQueryNode *self)
              {
                ::org::apache::lucene::util::BytesRef result((jobject) NULL);
                OBJ_CALL(result = self->object.textToBytesRef());
                return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
              }

              static PyObject *t_RegexpQueryNode_toQueryString(t_RegexpQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(RegexpQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_RegexpQueryNode_toString(t_RegexpQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(RegexpQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_RegexpQueryNode_get__field(t_RegexpQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_RegexpQueryNode_set__field(t_RegexpQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_RegexpQueryNode_get__fieldAsString(t_RegexpQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getFieldAsString());
                return j2p(value);
              }

              static PyObject *t_RegexpQueryNode_get__text(t_RegexpQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_RegexpQueryNode_set__text(t_RegexpQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setText(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "text", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/RegExp.h"
#include "java/util/Map.h"
#include "org/apache/lucene/util/automaton/RegExp$Kind.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/RegExp.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/lucene/util/automaton/TooComplexToDeterminizeException.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/automaton/AutomatonProvider.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *RegExp::class$ = NULL;
          jmethodID *RegExp::mids$ = NULL;
          jfieldID *RegExp::fids$ = NULL;
          bool RegExp::live$ = false;
          jint RegExp::ALL = (jint) 0;
          jint RegExp::ANYSTRING = (jint) 0;
          jint RegExp::ASCII_CASE_INSENSITIVE = (jint) 0;
          jint RegExp::AUTOMATON = (jint) 0;
          jint RegExp::COMPLEMENT = (jint) 0;
          jint RegExp::EMPTY = (jint) 0;
          jint RegExp::INTERSECTION = (jint) 0;
          jint RegExp::INTERVAL = (jint) 0;
          jint RegExp::NONE = (jint) 0;

          jclass RegExp::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/RegExp");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_3fb1dae8d4037984] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
              mids$[mid_init$_08af6957f9159d4d] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;II)V");
              mids$[mid_getIdentifiers_7dcf4034c6d1a92a] = env->getMethodID(cls, "getIdentifiers", "()Ljava/util/Set;");
              mids$[mid_getOriginalString_db9b55ba01e03e4b] = env->getMethodID(cls, "getOriginalString", "()Ljava/lang/String;");
              mids$[mid_toAutomaton_d9f5c446a29ec187] = env->getMethodID(cls, "toAutomaton", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_toAutomaton_577098ea686d0440] = env->getMethodID(cls, "toAutomaton", "(I)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_toAutomaton_45649c5d7779ad7f] = env->getMethodID(cls, "toAutomaton", "(Ljava/util/Map;I)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_toAutomaton_f3862af1b10ec1ba] = env->getMethodID(cls, "toAutomaton", "(Lorg/apache/lucene/util/automaton/AutomatonProvider;I)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_toStringTree_db9b55ba01e03e4b] = env->getMethodID(cls, "toStringTree", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_c] = env->getFieldID(cls, "c", "I");
              fids$[fid_digits] = env->getFieldID(cls, "digits", "I");
              fids$[fid_exp1] = env->getFieldID(cls, "exp1", "Lorg/apache/lucene/util/automaton/RegExp;");
              fids$[fid_exp2] = env->getFieldID(cls, "exp2", "Lorg/apache/lucene/util/automaton/RegExp;");
              fids$[fid_from] = env->getFieldID(cls, "from", "I");
              fids$[fid_kind] = env->getFieldID(cls, "kind", "Lorg/apache/lucene/util/automaton/RegExp$Kind;");
              fids$[fid_max] = env->getFieldID(cls, "max", "I");
              fids$[fid_min] = env->getFieldID(cls, "min", "I");
              fids$[fid_s] = env->getFieldID(cls, "s", "Ljava/lang/String;");
              fids$[fid_to] = env->getFieldID(cls, "to", "I");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              ALL = env->getStaticIntField(cls, "ALL");
              ANYSTRING = env->getStaticIntField(cls, "ANYSTRING");
              ASCII_CASE_INSENSITIVE = env->getStaticIntField(cls, "ASCII_CASE_INSENSITIVE");
              AUTOMATON = env->getStaticIntField(cls, "AUTOMATON");
              COMPLEMENT = env->getStaticIntField(cls, "COMPLEMENT");
              EMPTY = env->getStaticIntField(cls, "EMPTY");
              INTERSECTION = env->getStaticIntField(cls, "INTERSECTION");
              INTERVAL = env->getStaticIntField(cls, "INTERVAL");
              NONE = env->getStaticIntField(cls, "NONE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RegExp::RegExp(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

          RegExp::RegExp(const ::java::lang::String & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3fb1dae8d4037984, a0.this$, a1)) {}

          RegExp::RegExp(const ::java::lang::String & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_08af6957f9159d4d, a0.this$, a1, a2)) {}

          ::java::util::Set RegExp::getIdentifiers() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getIdentifiers_7dcf4034c6d1a92a]));
          }

          ::java::lang::String RegExp::getOriginalString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getOriginalString_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::util::automaton::Automaton RegExp::toAutomaton() const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_d9f5c446a29ec187]));
          }

          ::org::apache::lucene::util::automaton::Automaton RegExp::toAutomaton(jint a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_577098ea686d0440], a0));
          }

          ::org::apache::lucene::util::automaton::Automaton RegExp::toAutomaton(const ::java::util::Map & a0, jint a1) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_45649c5d7779ad7f], a0.this$, a1));
          }

          ::org::apache::lucene::util::automaton::Automaton RegExp::toAutomaton(const ::org::apache::lucene::util::automaton::AutomatonProvider & a0, jint a1) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_f3862af1b10ec1ba], a0.this$, a1));
          }

          ::java::lang::String RegExp::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          ::java::lang::String RegExp::toStringTree() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringTree_db9b55ba01e03e4b]));
          }

          jint RegExp::_get_c() const
          {
            return env->getIntField(this$, fids$[fid_c]);
          }

          jint RegExp::_get_digits() const
          {
            return env->getIntField(this$, fids$[fid_digits]);
          }

          RegExp RegExp::_get_exp1() const
          {
            return RegExp(env->getObjectField(this$, fids$[fid_exp1]));
          }

          RegExp RegExp::_get_exp2() const
          {
            return RegExp(env->getObjectField(this$, fids$[fid_exp2]));
          }

          jint RegExp::_get_from() const
          {
            return env->getIntField(this$, fids$[fid_from]);
          }

          ::org::apache::lucene::util::automaton::RegExp$Kind RegExp::_get_kind() const
          {
            return ::org::apache::lucene::util::automaton::RegExp$Kind(env->getObjectField(this$, fids$[fid_kind]));
          }

          jint RegExp::_get_max() const
          {
            return env->getIntField(this$, fids$[fid_max]);
          }

          jint RegExp::_get_min() const
          {
            return env->getIntField(this$, fids$[fid_min]);
          }

          ::java::lang::String RegExp::_get_s() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_s]));
          }

          jint RegExp::_get_to() const
          {
            return env->getIntField(this$, fids$[fid_to]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_RegExp_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RegExp_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RegExp_init_(t_RegExp *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RegExp_getIdentifiers(t_RegExp *self);
          static PyObject *t_RegExp_getOriginalString(t_RegExp *self);
          static PyObject *t_RegExp_toAutomaton(t_RegExp *self, PyObject *args);
          static PyObject *t_RegExp_toString(t_RegExp *self, PyObject *args);
          static PyObject *t_RegExp_toStringTree(t_RegExp *self);
          static PyObject *t_RegExp_get__c(t_RegExp *self, void *data);
          static PyObject *t_RegExp_get__digits(t_RegExp *self, void *data);
          static PyObject *t_RegExp_get__exp1(t_RegExp *self, void *data);
          static PyObject *t_RegExp_get__exp2(t_RegExp *self, void *data);
          static PyObject *t_RegExp_get__from(t_RegExp *self, void *data);
          static PyObject *t_RegExp_get__kind(t_RegExp *self, void *data);
          static PyObject *t_RegExp_get__max(t_RegExp *self, void *data);
          static PyObject *t_RegExp_get__min(t_RegExp *self, void *data);
          static PyObject *t_RegExp_get__s(t_RegExp *self, void *data);
          static PyObject *t_RegExp_get__to(t_RegExp *self, void *data);

          static PyObject *t_RegExp_get__identifiers(t_RegExp *self, void *data);
          static PyObject *t_RegExp_get__originalString(t_RegExp *self, void *data);
          static PyGetSetDef t_RegExp__fields_[] = {
            DECLARE_GET_FIELD(t_RegExp, c),
            DECLARE_GET_FIELD(t_RegExp, digits),
            DECLARE_GET_FIELD(t_RegExp, exp1),
            DECLARE_GET_FIELD(t_RegExp, exp2),
            DECLARE_GET_FIELD(t_RegExp, from),
            DECLARE_GET_FIELD(t_RegExp, kind),
            DECLARE_GET_FIELD(t_RegExp, max),
            DECLARE_GET_FIELD(t_RegExp, min),
            DECLARE_GET_FIELD(t_RegExp, s),
            DECLARE_GET_FIELD(t_RegExp, to),
            DECLARE_GET_FIELD(t_RegExp, identifiers),
            DECLARE_GET_FIELD(t_RegExp, originalString),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_RegExp__methods_[] = {
            DECLARE_METHOD(t_RegExp, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RegExp, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RegExp, getIdentifiers, METH_NOARGS),
            DECLARE_METHOD(t_RegExp, getOriginalString, METH_NOARGS),
            DECLARE_METHOD(t_RegExp, toAutomaton, METH_VARARGS),
            DECLARE_METHOD(t_RegExp, toString, METH_VARARGS),
            DECLARE_METHOD(t_RegExp, toStringTree, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(RegExp)[] = {
            { Py_tp_methods, t_RegExp__methods_ },
            { Py_tp_init, (void *) t_RegExp_init_ },
            { Py_tp_getset, t_RegExp__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(RegExp)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(RegExp, t_RegExp, RegExp);

          void t_RegExp::install(PyObject *module)
          {
            installType(&PY_TYPE(RegExp), &PY_TYPE_DEF(RegExp), module, "RegExp", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp), "Kind", make_descriptor(&PY_TYPE_DEF(RegExp$Kind)));
          }

          void t_RegExp::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp), "class_", make_descriptor(RegExp::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp), "wrapfn_", make_descriptor(t_RegExp::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp), "boxfn_", make_descriptor(boxObject));
            env->getClass(RegExp::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp), "ALL", make_descriptor(RegExp::ALL));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp), "ANYSTRING", make_descriptor(RegExp::ANYSTRING));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp), "ASCII_CASE_INSENSITIVE", make_descriptor(RegExp::ASCII_CASE_INSENSITIVE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp), "AUTOMATON", make_descriptor(RegExp::AUTOMATON));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp), "COMPLEMENT", make_descriptor(RegExp::COMPLEMENT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp), "EMPTY", make_descriptor(RegExp::EMPTY));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp), "INTERSECTION", make_descriptor(RegExp::INTERSECTION));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp), "INTERVAL", make_descriptor(RegExp::INTERVAL));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp), "NONE", make_descriptor(RegExp::NONE));
          }

          static PyObject *t_RegExp_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RegExp::initializeClass, 1)))
              return NULL;
            return t_RegExp::wrap_Object(RegExp(((t_RegExp *) arg)->object.this$));
          }
          static PyObject *t_RegExp_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RegExp::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RegExp_init_(t_RegExp *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                RegExp object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = RegExp(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                RegExp object((jobject) NULL);

                if (!parseArgs(args, "sI", &a0, &a1))
                {
                  INT_CALL(object = RegExp(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                jint a2;
                RegExp object((jobject) NULL);

                if (!parseArgs(args, "sII", &a0, &a1, &a2))
                {
                  INT_CALL(object = RegExp(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RegExp_getIdentifiers(t_RegExp *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getIdentifiers());
            return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
          }

          static PyObject *t_RegExp_getOriginalString(t_RegExp *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getOriginalString());
            return j2p(result);
          }

          static PyObject *t_RegExp_toAutomaton(t_RegExp *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
                OBJ_CALL(result = self->object.toAutomaton());
                return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.toAutomaton(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                jint a1;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "KI", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
                {
                  OBJ_CALL(result = self->object.toAutomaton(a0, a1));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::automaton::AutomatonProvider a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::util::automaton::AutomatonProvider::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.toAutomaton(a0, a1));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "toAutomaton", args);
            return NULL;
          }

          static PyObject *t_RegExp_toString(t_RegExp *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(RegExp), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_RegExp_toStringTree(t_RegExp *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.toStringTree());
            return j2p(result);
          }

          static PyObject *t_RegExp_get__c(t_RegExp *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_c());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_RegExp_get__digits(t_RegExp *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_digits());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_RegExp_get__exp1(t_RegExp *self, void *data)
          {
            RegExp value((jobject) NULL);
            OBJ_CALL(value = self->object._get_exp1());
            return t_RegExp::wrap_Object(value);
          }

          static PyObject *t_RegExp_get__exp2(t_RegExp *self, void *data)
          {
            RegExp value((jobject) NULL);
            OBJ_CALL(value = self->object._get_exp2());
            return t_RegExp::wrap_Object(value);
          }

          static PyObject *t_RegExp_get__from(t_RegExp *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_from());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_RegExp_get__kind(t_RegExp *self, void *data)
          {
            ::org::apache::lucene::util::automaton::RegExp$Kind value((jobject) NULL);
            OBJ_CALL(value = self->object._get_kind());
            return ::org::apache::lucene::util::automaton::t_RegExp$Kind::wrap_Object(value);
          }

          static PyObject *t_RegExp_get__max(t_RegExp *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_max());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_RegExp_get__min(t_RegExp *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_min());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_RegExp_get__s(t_RegExp *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_s());
            return j2p(value);
          }

          static PyObject *t_RegExp_get__to(t_RegExp *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_to());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_RegExp_get__identifiers(t_RegExp *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getIdentifiers());
            return ::java::util::t_Set::wrap_Object(value);
          }

          static PyObject *t_RegExp_get__originalString(t_RegExp *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getOriginalString());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalMappingLeafReader.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexReader$CacheHelper.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *OrdinalMappingLeafReader::class$ = NULL;
          jmethodID *OrdinalMappingLeafReader::mids$ = NULL;
          bool OrdinalMappingLeafReader::live$ = false;

          jclass OrdinalMappingLeafReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/OrdinalMappingLeafReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0bc004e527f620ef] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/LeafReader;[ILorg/apache/lucene/facet/FacetsConfig;)V");
              mids$[mid_getBinaryDocValues_6cf59c3533d4df22] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
              mids$[mid_getCoreCacheHelper_a64c414fea9a8cf6] = env->getMethodID(cls, "getCoreCacheHelper", "()Lorg/apache/lucene/index/IndexReader$CacheHelper;");
              mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6] = env->getMethodID(cls, "getReaderCacheHelper", "()Lorg/apache/lucene/index/IndexReader$CacheHelper;");
              mids$[mid_getOrdinalsReader_e1b1523781142411] = env->getMethodID(cls, "getOrdinalsReader", "(Ljava/lang/String;)Lorg/apache/lucene/facet/taxonomy/OrdinalsReader;");
              mids$[mid_encode_887f798643eedba4] = env->getMethodID(cls, "encode", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/BytesRef;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OrdinalMappingLeafReader::OrdinalMappingLeafReader(const ::org::apache::lucene::index::LeafReader & a0, const JArray< jint > & a1, const ::org::apache::lucene::facet::FacetsConfig & a2) : ::org::apache::lucene::index::FilterLeafReader(env->newObject(initializeClass, &mids$, mid_init$_0bc004e527f620ef, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::index::BinaryDocValues OrdinalMappingLeafReader::getBinaryDocValues(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_6cf59c3533d4df22], a0.this$));
          }

          ::org::apache::lucene::index::IndexReader$CacheHelper OrdinalMappingLeafReader::getCoreCacheHelper() const
          {
            return ::org::apache::lucene::index::IndexReader$CacheHelper(env->callObjectMethod(this$, mids$[mid_getCoreCacheHelper_a64c414fea9a8cf6]));
          }

          ::org::apache::lucene::index::IndexReader$CacheHelper OrdinalMappingLeafReader::getReaderCacheHelper() const
          {
            return ::org::apache::lucene::index::IndexReader$CacheHelper(env->callObjectMethod(this$, mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_OrdinalMappingLeafReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OrdinalMappingLeafReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OrdinalMappingLeafReader_init_(t_OrdinalMappingLeafReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OrdinalMappingLeafReader_getBinaryDocValues(t_OrdinalMappingLeafReader *self, PyObject *args);
          static PyObject *t_OrdinalMappingLeafReader_getCoreCacheHelper(t_OrdinalMappingLeafReader *self, PyObject *args);
          static PyObject *t_OrdinalMappingLeafReader_getReaderCacheHelper(t_OrdinalMappingLeafReader *self, PyObject *args);
          static PyObject *t_OrdinalMappingLeafReader_get__coreCacheHelper(t_OrdinalMappingLeafReader *self, void *data);
          static PyObject *t_OrdinalMappingLeafReader_get__readerCacheHelper(t_OrdinalMappingLeafReader *self, void *data);
          static PyGetSetDef t_OrdinalMappingLeafReader__fields_[] = {
            DECLARE_GET_FIELD(t_OrdinalMappingLeafReader, coreCacheHelper),
            DECLARE_GET_FIELD(t_OrdinalMappingLeafReader, readerCacheHelper),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_OrdinalMappingLeafReader__methods_[] = {
            DECLARE_METHOD(t_OrdinalMappingLeafReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalMappingLeafReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalMappingLeafReader, getBinaryDocValues, METH_VARARGS),
            DECLARE_METHOD(t_OrdinalMappingLeafReader, getCoreCacheHelper, METH_VARARGS),
            DECLARE_METHOD(t_OrdinalMappingLeafReader, getReaderCacheHelper, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(OrdinalMappingLeafReader)[] = {
            { Py_tp_methods, t_OrdinalMappingLeafReader__methods_ },
            { Py_tp_init, (void *) t_OrdinalMappingLeafReader_init_ },
            { Py_tp_getset, t_OrdinalMappingLeafReader__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(OrdinalMappingLeafReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::index::FilterLeafReader),
            NULL
          };

          DEFINE_TYPE(OrdinalMappingLeafReader, t_OrdinalMappingLeafReader, OrdinalMappingLeafReader);

          void t_OrdinalMappingLeafReader::install(PyObject *module)
          {
            installType(&PY_TYPE(OrdinalMappingLeafReader), &PY_TYPE_DEF(OrdinalMappingLeafReader), module, "OrdinalMappingLeafReader", 0);
          }

          void t_OrdinalMappingLeafReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdinalMappingLeafReader), "class_", make_descriptor(OrdinalMappingLeafReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdinalMappingLeafReader), "wrapfn_", make_descriptor(t_OrdinalMappingLeafReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdinalMappingLeafReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OrdinalMappingLeafReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OrdinalMappingLeafReader::initializeClass, 1)))
              return NULL;
            return t_OrdinalMappingLeafReader::wrap_Object(OrdinalMappingLeafReader(((t_OrdinalMappingLeafReader *) arg)->object.this$));
          }
          static PyObject *t_OrdinalMappingLeafReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OrdinalMappingLeafReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OrdinalMappingLeafReader_init_(t_OrdinalMappingLeafReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
            JArray< jint > a1((jobject) NULL);
            ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
            OrdinalMappingLeafReader object((jobject) NULL);

            if (!parseArgs(args, "k[Ik", ::org::apache::lucene::index::LeafReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = OrdinalMappingLeafReader(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OrdinalMappingLeafReader_getBinaryDocValues(t_OrdinalMappingLeafReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.getBinaryDocValues(a0));
              return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
            }

            return callSuper(PY_TYPE(OrdinalMappingLeafReader), (PyObject *) self, "getBinaryDocValues", args, 2);
          }

          static PyObject *t_OrdinalMappingLeafReader_getCoreCacheHelper(t_OrdinalMappingLeafReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader$CacheHelper result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getCoreCacheHelper());
              return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(result);
            }

            return callSuper(PY_TYPE(OrdinalMappingLeafReader), (PyObject *) self, "getCoreCacheHelper", args, 2);
          }

          static PyObject *t_OrdinalMappingLeafReader_getReaderCacheHelper(t_OrdinalMappingLeafReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader$CacheHelper result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getReaderCacheHelper());
              return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(result);
            }

            return callSuper(PY_TYPE(OrdinalMappingLeafReader), (PyObject *) self, "getReaderCacheHelper", args, 2);
          }

          static PyObject *t_OrdinalMappingLeafReader_get__coreCacheHelper(t_OrdinalMappingLeafReader *self, void *data)
          {
            ::org::apache::lucene::index::IndexReader$CacheHelper value((jobject) NULL);
            OBJ_CALL(value = self->object.getCoreCacheHelper());
            return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(value);
          }

          static PyObject *t_OrdinalMappingLeafReader_get__readerCacheHelper(t_OrdinalMappingLeafReader *self, void *data)
          {
            ::org::apache::lucene::index::IndexReader$CacheHelper value((jobject) NULL);
            OBJ_CALL(value = self->object.getReaderCacheHelper());
            return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocIdSet::class$ = NULL;
        jmethodID *DocIdSet::mids$ = NULL;
        bool DocIdSet::live$ = false;
        DocIdSet *DocIdSet::EMPTY = NULL;

        jclass DocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_bits_ad87da2b626b21cf] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_iterator_173d81d7b8f93882] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            EMPTY = new DocIdSet(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/DocIdSet;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocIdSet::DocIdSet() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::util::Bits DocIdSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_ad87da2b626b21cf]));
        }

        ::org::apache::lucene::search::DocIdSetIterator DocIdSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_173d81d7b8f93882]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocIdSet_init_(t_DocIdSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocIdSet_bits(t_DocIdSet *self);
        static PyObject *t_DocIdSet_iterator(t_DocIdSet *self);

        static PyMethodDef t_DocIdSet__methods_[] = {
          DECLARE_METHOD(t_DocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdSet, bits, METH_NOARGS),
          DECLARE_METHOD(t_DocIdSet, iterator, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocIdSet)[] = {
          { Py_tp_methods, t_DocIdSet__methods_ },
          { Py_tp_init, (void *) t_DocIdSet_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocIdSet)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DocIdSet, t_DocIdSet, DocIdSet);

        void t_DocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(DocIdSet), &PY_TYPE_DEF(DocIdSet), module, "DocIdSet", 0);
        }

        void t_DocIdSet::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIdSet), "class_", make_descriptor(DocIdSet::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIdSet), "wrapfn_", make_descriptor(t_DocIdSet::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIdSet), "boxfn_", make_descriptor(boxObject));
          env->getClass(DocIdSet::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIdSet), "EMPTY", make_descriptor(t_DocIdSet::wrap_Object(*DocIdSet::EMPTY)));
        }

        static PyObject *t_DocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocIdSet::initializeClass, 1)))
            return NULL;
          return t_DocIdSet::wrap_Object(DocIdSet(((t_DocIdSet *) arg)->object.this$));
        }
        static PyObject *t_DocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocIdSet_init_(t_DocIdSet *self, PyObject *args, PyObject *kwds)
        {
          DocIdSet object((jobject) NULL);

          INT_CALL(object = DocIdSet());
          self->object = object;

          return 0;
        }

        static PyObject *t_DocIdSet_bits(t_DocIdSet *self)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);
          OBJ_CALL(result = self->object.bits());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
        }

        static PyObject *t_DocIdSet_iterator(t_DocIdSet *self)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
        }
      }
    }
  }
}
