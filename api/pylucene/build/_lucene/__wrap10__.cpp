#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/NGramTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *NGramTokenizer::class$ = NULL;
          jmethodID *NGramTokenizer::mids$ = NULL;
          bool NGramTokenizer::live$ = false;
          jint NGramTokenizer::DEFAULT_MAX_NGRAM_SIZE = (jint) 0;
          jint NGramTokenizer::DEFAULT_MIN_NGRAM_SIZE = (jint) 0;

          jclass NGramTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/NGramTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_438c62480c481c65] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_init$_302276806b767fde] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;II)V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_isTokenChar_a1d30e1ee40c89a2] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_NGRAM_SIZE");
              DEFAULT_MIN_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_NGRAM_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramTokenizer::NGramTokenizer() : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          NGramTokenizer::NGramTokenizer(jint a0, jint a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_438c62480c481c65, a0, a1)) {}

          NGramTokenizer::NGramTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_302276806b767fde, a0.this$, a1, a2)) {}

          void NGramTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean NGramTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void NGramTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_NGramTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramTokenizer_init_(t_NGramTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramTokenizer_end(t_NGramTokenizer *self, PyObject *args);
          static PyObject *t_NGramTokenizer_incrementToken(t_NGramTokenizer *self, PyObject *args);
          static PyObject *t_NGramTokenizer_reset(t_NGramTokenizer *self, PyObject *args);

          static PyMethodDef t_NGramTokenizer__methods_[] = {
            DECLARE_METHOD(t_NGramTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_NGramTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_NGramTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NGramTokenizer)[] = {
            { Py_tp_methods, t_NGramTokenizer__methods_ },
            { Py_tp_init, (void *) t_NGramTokenizer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NGramTokenizer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Tokenizer),
            NULL
          };

          DEFINE_TYPE(NGramTokenizer, t_NGramTokenizer, NGramTokenizer);

          void t_NGramTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramTokenizer), &PY_TYPE_DEF(NGramTokenizer), module, "NGramTokenizer", 0);
          }

          void t_NGramTokenizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NGramTokenizer), "class_", make_descriptor(NGramTokenizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NGramTokenizer), "wrapfn_", make_descriptor(t_NGramTokenizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NGramTokenizer), "boxfn_", make_descriptor(boxObject));
            env->getClass(NGramTokenizer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(NGramTokenizer), "DEFAULT_MAX_NGRAM_SIZE", make_descriptor(NGramTokenizer::DEFAULT_MAX_NGRAM_SIZE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NGramTokenizer), "DEFAULT_MIN_NGRAM_SIZE", make_descriptor(NGramTokenizer::DEFAULT_MIN_NGRAM_SIZE));
          }

          static PyObject *t_NGramTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramTokenizer::initializeClass, 1)))
              return NULL;
            return t_NGramTokenizer::wrap_Object(NGramTokenizer(((t_NGramTokenizer *) arg)->object.this$));
          }
          static PyObject *t_NGramTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramTokenizer_init_(t_NGramTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NGramTokenizer object((jobject) NULL);

                INT_CALL(object = NGramTokenizer());
                self->object = object;
                break;
              }
             case 2:
              {
                jint a0;
                jint a1;
                NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  INT_CALL(object = NGramTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                jint a1;
                jint a2;
                NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = NGramTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramTokenizer_end(t_NGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(NGramTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_NGramTokenizer_incrementToken(t_NGramTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(NGramTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_NGramTokenizer_reset(t_NGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(NGramTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/StopFilter.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *StopFilter::class$ = NULL;
          jmethodID *StopFilter::mids$ = NULL;
          bool StopFilter::live$ = false;

          jclass StopFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/StopFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_85e689f6ceab32ee] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/CharArraySet;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StopFilter::StopFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopFilter(env->newObject(initializeClass, &mids$, mid_init$_85e689f6ceab32ee, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_StopFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StopFilter_init_(t_StopFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_StopFilter__methods_[] = {
            DECLARE_METHOD(t_StopFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(StopFilter)[] = {
            { Py_tp_methods, t_StopFilter__methods_ },
            { Py_tp_init, (void *) t_StopFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(StopFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopFilter),
            NULL
          };

          DEFINE_TYPE(StopFilter, t_StopFilter, StopFilter);

          void t_StopFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(StopFilter), &PY_TYPE_DEF(StopFilter), module, "StopFilter", 0);
          }

          void t_StopFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(StopFilter), "class_", make_descriptor(StopFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StopFilter), "wrapfn_", make_descriptor(t_StopFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StopFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StopFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StopFilter::initializeClass, 1)))
              return NULL;
            return t_StopFilter::wrap_Object(StopFilter(((t_StopFilter *) arg)->object.this$));
          }
          static PyObject *t_StopFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StopFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StopFilter_init_(t_StopFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
            PyTypeObject **p1;
            StopFilter object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
            {
              INT_CALL(object = StopFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$TermValComparator.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/LeafFieldComparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$TermValComparator::class$ = NULL;
        jmethodID *FieldComparator$TermValComparator::mids$ = NULL;
        bool FieldComparator$TermValComparator::live$ = false;

        jclass FieldComparator$TermValComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$TermValComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c668924727dbd3e1] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Z)V");
            mids$[mid_compare_57a58545eba514db] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_1e143afe1894d213] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_1e143afe1894d213] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_compareValues_f465493e4f3be174] = env->getMethodID(cls, "compareValues", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_copy_438c62480c481c65] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_getLeafComparator_6183906b7058c4b5] = env->getMethodID(cls, "getLeafComparator", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/LeafFieldComparator;");
            mids$[mid_setBottom_040c4cd0390c5aff] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");
            mids$[mid_setTopValue_0bdfd2603b7490a8] = env->getMethodID(cls, "setTopValue", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_value_83238e65a54c68bb] = env->getMethodID(cls, "value", "(I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getBinaryDocValues_06fcee42e0cb3ebc] = env->getMethodID(cls, "getBinaryDocValues", "(Lorg/apache/lucene/index/LeafReaderContext;Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$TermValComparator::FieldComparator$TermValComparator(jint a0, const ::java::lang::String & a1, jboolean a2) : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_c668924727dbd3e1, a0, a1.this$, a2)) {}

        jint FieldComparator$TermValComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_57a58545eba514db], a0, a1);
        }

        jint FieldComparator$TermValComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_1e143afe1894d213], a0);
        }

        jint FieldComparator$TermValComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_1e143afe1894d213], a0);
        }

        jint FieldComparator$TermValComparator::compareValues(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compareValues_f465493e4f3be174], a0.this$, a1.this$);
        }

        void FieldComparator$TermValComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_438c62480c481c65], a0, a1);
        }

        ::org::apache::lucene::search::LeafFieldComparator FieldComparator$TermValComparator::getLeafComparator(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::search::LeafFieldComparator(env->callObjectMethod(this$, mids$[mid_getLeafComparator_6183906b7058c4b5], a0.this$));
        }

        void FieldComparator$TermValComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_040c4cd0390c5aff], a0);
        }

        void FieldComparator$TermValComparator::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
        }

        void FieldComparator$TermValComparator::setTopValue(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_0bdfd2603b7490a8], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef FieldComparator$TermValComparator::value(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_value_83238e65a54c68bb], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$TermValComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$TermValComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$TermValComparator_of_(t_FieldComparator$TermValComparator *self, PyObject *args);
        static int t_FieldComparator$TermValComparator_init_(t_FieldComparator$TermValComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$TermValComparator_compare(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_compareBottom(t_FieldComparator$TermValComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator$TermValComparator_compareTop(t_FieldComparator$TermValComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator$TermValComparator_compareValues(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_copy(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_getLeafComparator(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_setBottom(t_FieldComparator$TermValComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator$TermValComparator_setScorer(t_FieldComparator$TermValComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator$TermValComparator_setTopValue(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_value(t_FieldComparator$TermValComparator *self, PyObject *args);
        static int t_FieldComparator$TermValComparator_set__bottom(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$TermValComparator_set__scorer(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$TermValComparator_set__topValue(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$TermValComparator_get__parameters_(t_FieldComparator$TermValComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$TermValComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$TermValComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$TermValComparator, scorer),
          DECLARE_SET_FIELD(t_FieldComparator$TermValComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$TermValComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$TermValComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$TermValComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, compareBottom, METH_O),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, compareTop, METH_O),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, compareValues, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, getLeafComparator, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, setBottom, METH_O),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, setScorer, METH_O),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FieldComparator$TermValComparator)[] = {
          { Py_tp_methods, t_FieldComparator$TermValComparator__methods_ },
          { Py_tp_init, (void *) t_FieldComparator$TermValComparator_init_ },
          { Py_tp_getset, t_FieldComparator$TermValComparator__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FieldComparator$TermValComparator)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::FieldComparator),
          NULL
        };

        DEFINE_TYPE(FieldComparator$TermValComparator, t_FieldComparator$TermValComparator, FieldComparator$TermValComparator);
        PyObject *t_FieldComparator$TermValComparator::wrap_Object(const FieldComparator$TermValComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$TermValComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$TermValComparator *self = (t_FieldComparator$TermValComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$TermValComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$TermValComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$TermValComparator *self = (t_FieldComparator$TermValComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$TermValComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$TermValComparator), &PY_TYPE_DEF(FieldComparator$TermValComparator), module, "FieldComparator$TermValComparator", 0);
        }

        void t_FieldComparator$TermValComparator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldComparator$TermValComparator), "class_", make_descriptor(FieldComparator$TermValComparator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldComparator$TermValComparator), "wrapfn_", make_descriptor(t_FieldComparator$TermValComparator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldComparator$TermValComparator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$TermValComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$TermValComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$TermValComparator::wrap_Object(FieldComparator$TermValComparator(((t_FieldComparator$TermValComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$TermValComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$TermValComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$TermValComparator_of_(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$TermValComparator_init_(t_FieldComparator$TermValComparator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          jboolean a2;
          FieldComparator$TermValComparator object((jobject) NULL);

          if (!parseArgs(args, "IsZ", &a0, &a1, &a2))
          {
            INT_CALL(object = FieldComparator$TermValComparator(a0, a1, a2));
            self->object = object;
            self->parameters[0] = ::org::apache::lucene::util::PY_TYPE(BytesRef);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$TermValComparator_compare(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_compareBottom(t_FieldComparator$TermValComparator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareBottom", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator$TermValComparator_compareTop(t_FieldComparator$TermValComparator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTop", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator$TermValComparator_compareValues(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.compareValues(a0, a1));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "compareValues", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_copy(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copy", args);
          return NULL;
        }

        static PyObject *t_FieldComparator$TermValComparator_getLeafComparator(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::LeafFieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getLeafComparator(a0));
            return ::org::apache::lucene::search::t_LeafFieldComparator::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "getLeafComparator", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_setBottom(t_FieldComparator$TermValComparator *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBottom", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator$TermValComparator_setScorer(t_FieldComparator$TermValComparator *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Scorable a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setScorer", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator$TermValComparator_setTopValue(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_value(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$TermValComparator_get__parameters_(t_FieldComparator$TermValComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$TermValComparator_set__bottom(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$TermValComparator_set__scorer(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorable value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }

        static int t_FieldComparator$TermValComparator_set__topValue(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/in/IndicNormalizationFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {

          ::java::lang::Class *IndicNormalizationFilterFactory::class$ = NULL;
          jmethodID *IndicNormalizationFilterFactory::mids$ = NULL;
          bool IndicNormalizationFilterFactory::live$ = false;
          ::java::lang::String *IndicNormalizationFilterFactory::NAME = NULL;

          jclass IndicNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/in/IndicNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_normalize_6de1e28d9d10cd9e] = env->getMethodID(cls, "normalize", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndicNormalizationFilterFactory::IndicNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream IndicNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream IndicNormalizationFilterFactory::normalize(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_normalize_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {
          static PyObject *t_IndicNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndicNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndicNormalizationFilterFactory_init_(t_IndicNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndicNormalizationFilterFactory_create(t_IndicNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_IndicNormalizationFilterFactory_normalize(t_IndicNormalizationFilterFactory *self, PyObject *args);

          static PyMethodDef t_IndicNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_IndicNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_IndicNormalizationFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IndicNormalizationFilterFactory)[] = {
            { Py_tp_methods, t_IndicNormalizationFilterFactory__methods_ },
            { Py_tp_init, (void *) t_IndicNormalizationFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IndicNormalizationFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(IndicNormalizationFilterFactory, t_IndicNormalizationFilterFactory, IndicNormalizationFilterFactory);

          void t_IndicNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(IndicNormalizationFilterFactory), &PY_TYPE_DEF(IndicNormalizationFilterFactory), module, "IndicNormalizationFilterFactory", 0);
          }

          void t_IndicNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndicNormalizationFilterFactory), "class_", make_descriptor(IndicNormalizationFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndicNormalizationFilterFactory), "wrapfn_", make_descriptor(t_IndicNormalizationFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndicNormalizationFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(IndicNormalizationFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndicNormalizationFilterFactory), "NAME", make_descriptor(j2p(*IndicNormalizationFilterFactory::NAME)));
          }

          static PyObject *t_IndicNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndicNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_IndicNormalizationFilterFactory::wrap_Object(IndicNormalizationFilterFactory(((t_IndicNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_IndicNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndicNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndicNormalizationFilterFactory_init_(t_IndicNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            IndicNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = IndicNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndicNormalizationFilterFactory_create(t_IndicNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IndicNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_IndicNormalizationFilterFactory_normalize(t_IndicNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IndicNormalizationFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/MappingCharFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *MappingCharFilterFactory::class$ = NULL;
          jmethodID *MappingCharFilterFactory::mids$ = NULL;
          bool MappingCharFilterFactory::live$ = false;
          ::java::lang::String *MappingCharFilterFactory::NAME = NULL;

          jclass MappingCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/MappingCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_e71c53e25a234d7d] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Ljava/io/Reader;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_normalize_e71c53e25a234d7d] = env->getMethodID(cls, "normalize", "(Ljava/io/Reader;)Ljava/io/Reader;");
              mids$[mid_parseString_9bfa75c9f141b67f] = env->getMethodID(cls, "parseString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_parseRules_a3f640adfca22610] = env->getMethodID(cls, "parseRules", "(Ljava/util/List;Lorg/apache/lucene/analysis/charfilter/NormalizeCharMap$Builder;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MappingCharFilterFactory::MappingCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::java::io::Reader MappingCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_create_e71c53e25a234d7d], a0.this$));
          }

          void MappingCharFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }

          ::java::io::Reader MappingCharFilterFactory::normalize(const ::java::io::Reader & a0) const
          {
            return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_normalize_e71c53e25a234d7d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_MappingCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MappingCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MappingCharFilterFactory_init_(t_MappingCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MappingCharFilterFactory_create(t_MappingCharFilterFactory *self, PyObject *args);
          static PyObject *t_MappingCharFilterFactory_inform(t_MappingCharFilterFactory *self, PyObject *arg);
          static PyObject *t_MappingCharFilterFactory_normalize(t_MappingCharFilterFactory *self, PyObject *args);

          static PyMethodDef t_MappingCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_MappingCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MappingCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MappingCharFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_MappingCharFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_MappingCharFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MappingCharFilterFactory)[] = {
            { Py_tp_methods, t_MappingCharFilterFactory__methods_ },
            { Py_tp_init, (void *) t_MappingCharFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MappingCharFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::CharFilterFactory),
            NULL
          };

          DEFINE_TYPE(MappingCharFilterFactory, t_MappingCharFilterFactory, MappingCharFilterFactory);

          void t_MappingCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(MappingCharFilterFactory), &PY_TYPE_DEF(MappingCharFilterFactory), module, "MappingCharFilterFactory", 0);
          }

          void t_MappingCharFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MappingCharFilterFactory), "class_", make_descriptor(MappingCharFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MappingCharFilterFactory), "wrapfn_", make_descriptor(t_MappingCharFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MappingCharFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(MappingCharFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(MappingCharFilterFactory), "NAME", make_descriptor(j2p(*MappingCharFilterFactory::NAME)));
          }

          static PyObject *t_MappingCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MappingCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_MappingCharFilterFactory::wrap_Object(MappingCharFilterFactory(((t_MappingCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_MappingCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MappingCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MappingCharFilterFactory_init_(t_MappingCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            MappingCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = MappingCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MappingCharFilterFactory_create(t_MappingCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::java::io::Reader result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::java::io::t_Reader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(MappingCharFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_MappingCharFilterFactory_inform(t_MappingCharFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_MappingCharFilterFactory_normalize(t_MappingCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::java::io::Reader result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::java::io::t_Reader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(MappingCharFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/bloom/MurmurHash2.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/bloom/MurmurHash2.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace bloom {

          ::java::lang::Class *MurmurHash2::class$ = NULL;
          jmethodID *MurmurHash2::mids$ = NULL;
          bool MurmurHash2::live$ = false;
          MurmurHash2 *MurmurHash2::INSTANCE = NULL;

          jclass MurmurHash2::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/bloom/MurmurHash2");

              mids$ = new jmethodID[max_mid];
              mids$[mid_hash_1c2e5fa34f4312de] = env->getMethodID(cls, "hash", "(Lorg/apache/lucene/util/BytesRef;)I");
              mids$[mid_hash_f28ba127c1c46b31] = env->getStaticMethodID(cls, "hash", "([BIII)I");
              mids$[mid_hash32_a974b127529aaf33] = env->getStaticMethodID(cls, "hash32", "([BII)I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              INSTANCE = new MurmurHash2(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/codecs/bloom/MurmurHash2;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint MurmurHash2::hash(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_hash_1c2e5fa34f4312de], a0.this$);
          }

          jint MurmurHash2::hash(const JArray< jbyte > & a0, jint a1, jint a2, jint a3)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_hash_f28ba127c1c46b31], a0.this$, a1, a2, a3);
          }

          jint MurmurHash2::hash32(const JArray< jbyte > & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_hash32_a974b127529aaf33], a0.this$, a1, a2);
          }

          ::java::lang::String MurmurHash2::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace bloom {
          static PyObject *t_MurmurHash2_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MurmurHash2_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MurmurHash2_hash(t_MurmurHash2 *self, PyObject *args);
          static PyObject *t_MurmurHash2_hash32(PyTypeObject *type, PyObject *args);
          static PyObject *t_MurmurHash2_hash_(PyTypeObject *type, PyObject *args);
          static PyObject *t_MurmurHash2_toString(t_MurmurHash2 *self, PyObject *args);

          static PyMethodDef t_MurmurHash2__methods_[] = {
            DECLARE_METHOD(t_MurmurHash2, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MurmurHash2, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MurmurHash2, hash, METH_VARARGS),
            DECLARE_METHOD(t_MurmurHash2, hash32, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_MurmurHash2, hash_, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_MurmurHash2, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MurmurHash2)[] = {
            { Py_tp_methods, t_MurmurHash2__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MurmurHash2)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::bloom::HashFunction),
            NULL
          };

          DEFINE_TYPE(MurmurHash2, t_MurmurHash2, MurmurHash2);

          void t_MurmurHash2::install(PyObject *module)
          {
            installType(&PY_TYPE(MurmurHash2), &PY_TYPE_DEF(MurmurHash2), module, "MurmurHash2", 0);
          }

          void t_MurmurHash2::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MurmurHash2), "class_", make_descriptor(MurmurHash2::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MurmurHash2), "wrapfn_", make_descriptor(t_MurmurHash2::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MurmurHash2), "boxfn_", make_descriptor(boxObject));
            env->getClass(MurmurHash2::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(MurmurHash2), "INSTANCE", make_descriptor(t_MurmurHash2::wrap_Object(*MurmurHash2::INSTANCE)));
          }

          static PyObject *t_MurmurHash2_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MurmurHash2::initializeClass, 1)))
              return NULL;
            return t_MurmurHash2::wrap_Object(MurmurHash2(((t_MurmurHash2 *) arg)->object.this$));
          }
          static PyObject *t_MurmurHash2_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MurmurHash2::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_MurmurHash2_hash(t_MurmurHash2 *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.hash(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(MurmurHash2), (PyObject *) self, "hash", args, 2);
          }

          static PyObject *t_MurmurHash2_hash32(PyTypeObject *type, PyObject *args)
          {
            JArray< jbyte > a0((jobject) NULL);
            jint a1;
            jint a2;
            jint result;

            if (!parseArgs(args, "[BII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::bloom::MurmurHash2::hash32(a0, a1, a2));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "hash32", args);
            return NULL;
          }

          static PyObject *t_MurmurHash2_hash_(PyTypeObject *type, PyObject *args)
          {
            JArray< jbyte > a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jint result;

            if (!parseArgs(args, "[BIII", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::bloom::MurmurHash2::hash(a0, a1, a2, a3));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "hash_", args);
            return NULL;
          }

          static PyObject *t_MurmurHash2_toString(t_MurmurHash2 *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(MurmurHash2), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishMinimalStemFilter::class$ = NULL;
          jmethodID *SpanishMinimalStemFilter::mids$ = NULL;
          bool SpanishMinimalStemFilter::live$ = false;

          jclass SpanishMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishMinimalStemFilter::SpanishMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean SpanishMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishMinimalStemFilter_init_(t_SpanishMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishMinimalStemFilter_incrementToken(t_SpanishMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_SpanishMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_SpanishMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanishMinimalStemFilter)[] = {
            { Py_tp_methods, t_SpanishMinimalStemFilter__methods_ },
            { Py_tp_init, (void *) t_SpanishMinimalStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanishMinimalStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(SpanishMinimalStemFilter, t_SpanishMinimalStemFilter, SpanishMinimalStemFilter);

          void t_SpanishMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishMinimalStemFilter), &PY_TYPE_DEF(SpanishMinimalStemFilter), module, "SpanishMinimalStemFilter", 0);
          }

          void t_SpanishMinimalStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishMinimalStemFilter), "class_", make_descriptor(SpanishMinimalStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishMinimalStemFilter), "wrapfn_", make_descriptor(t_SpanishMinimalStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishMinimalStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanishMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_SpanishMinimalStemFilter::wrap_Object(SpanishMinimalStemFilter(((t_SpanishMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_SpanishMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishMinimalStemFilter_init_(t_SpanishMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SpanishMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SpanishMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanishMinimalStemFilter_incrementToken(t_SpanishMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SpanishMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/JaroWinklerDistance.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *JaroWinklerDistance::class$ = NULL;
          jmethodID *JaroWinklerDistance::mids$ = NULL;
          bool JaroWinklerDistance::live$ = false;

          jclass JaroWinklerDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/JaroWinklerDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDistance_31e45f475cca0d26] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");
              mids$[mid_getThreshold_58aec2b64dff50c8] = env->getMethodID(cls, "getThreshold", "()F");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setThreshold_8e1d952dd65cdc3a] = env->getMethodID(cls, "setThreshold", "(F)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JaroWinklerDistance::JaroWinklerDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jboolean JaroWinklerDistance::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jfloat JaroWinklerDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_31e45f475cca0d26], a0.this$, a1.this$);
          }

          jfloat JaroWinklerDistance::getThreshold() const
          {
            return env->callFloatMethod(this$, mids$[mid_getThreshold_58aec2b64dff50c8]);
          }

          jint JaroWinklerDistance::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          void JaroWinklerDistance::setThreshold(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setThreshold_8e1d952dd65cdc3a], a0);
          }

          ::java::lang::String JaroWinklerDistance::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_JaroWinklerDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JaroWinklerDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JaroWinklerDistance_init_(t_JaroWinklerDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JaroWinklerDistance_equals(t_JaroWinklerDistance *self, PyObject *args);
          static PyObject *t_JaroWinklerDistance_getDistance(t_JaroWinklerDistance *self, PyObject *args);
          static PyObject *t_JaroWinklerDistance_getThreshold(t_JaroWinklerDistance *self);
          static PyObject *t_JaroWinklerDistance_hashCode(t_JaroWinklerDistance *self, PyObject *args);
          static PyObject *t_JaroWinklerDistance_setThreshold(t_JaroWinklerDistance *self, PyObject *arg);
          static PyObject *t_JaroWinklerDistance_toString(t_JaroWinklerDistance *self, PyObject *args);
          static PyObject *t_JaroWinklerDistance_get__threshold(t_JaroWinklerDistance *self, void *data);
          static int t_JaroWinklerDistance_set__threshold(t_JaroWinklerDistance *self, PyObject *arg, void *data);
          static PyGetSetDef t_JaroWinklerDistance__fields_[] = {
            DECLARE_GETSET_FIELD(t_JaroWinklerDistance, threshold),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JaroWinklerDistance__methods_[] = {
            DECLARE_METHOD(t_JaroWinklerDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JaroWinklerDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JaroWinklerDistance, equals, METH_VARARGS),
            DECLARE_METHOD(t_JaroWinklerDistance, getDistance, METH_VARARGS),
            DECLARE_METHOD(t_JaroWinklerDistance, getThreshold, METH_NOARGS),
            DECLARE_METHOD(t_JaroWinklerDistance, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_JaroWinklerDistance, setThreshold, METH_O),
            DECLARE_METHOD(t_JaroWinklerDistance, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JaroWinklerDistance)[] = {
            { Py_tp_methods, t_JaroWinklerDistance__methods_ },
            { Py_tp_init, (void *) t_JaroWinklerDistance_init_ },
            { Py_tp_getset, t_JaroWinklerDistance__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JaroWinklerDistance)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(JaroWinklerDistance, t_JaroWinklerDistance, JaroWinklerDistance);

          void t_JaroWinklerDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(JaroWinklerDistance), &PY_TYPE_DEF(JaroWinklerDistance), module, "JaroWinklerDistance", 0);
          }

          void t_JaroWinklerDistance::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JaroWinklerDistance), "class_", make_descriptor(JaroWinklerDistance::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JaroWinklerDistance), "wrapfn_", make_descriptor(t_JaroWinklerDistance::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JaroWinklerDistance), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JaroWinklerDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JaroWinklerDistance::initializeClass, 1)))
              return NULL;
            return t_JaroWinklerDistance::wrap_Object(JaroWinklerDistance(((t_JaroWinklerDistance *) arg)->object.this$));
          }
          static PyObject *t_JaroWinklerDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JaroWinklerDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JaroWinklerDistance_init_(t_JaroWinklerDistance *self, PyObject *args, PyObject *kwds)
          {
            JaroWinklerDistance object((jobject) NULL);

            INT_CALL(object = JaroWinklerDistance());
            self->object = object;

            return 0;
          }

          static PyObject *t_JaroWinklerDistance_equals(t_JaroWinklerDistance *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(JaroWinklerDistance), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_JaroWinklerDistance_getDistance(t_JaroWinklerDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }

          static PyObject *t_JaroWinklerDistance_getThreshold(t_JaroWinklerDistance *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getThreshold());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_JaroWinklerDistance_hashCode(t_JaroWinklerDistance *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(JaroWinklerDistance), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_JaroWinklerDistance_setThreshold(t_JaroWinklerDistance *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setThreshold(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setThreshold", arg);
            return NULL;
          }

          static PyObject *t_JaroWinklerDistance_toString(t_JaroWinklerDistance *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(JaroWinklerDistance), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_JaroWinklerDistance_get__threshold(t_JaroWinklerDistance *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getThreshold());
            return PyFloat_FromDouble((double) value);
          }
          static int t_JaroWinklerDistance_set__threshold(t_JaroWinklerDistance *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setThreshold(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "threshold", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/QueryValueSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *QueryValueSource::class$ = NULL;
            jmethodID *QueryValueSource::mids$ = NULL;
            bool QueryValueSource::live$ = false;

            jclass QueryValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/QueryValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2d949d9faf0fc5a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;F)V");
                mids$[mid_createWeight_69d322032c5ae159] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getDefaultValue_58aec2b64dff50c8] = env->getMethodID(cls, "getDefaultValue", "()F");
                mids$[mid_getQuery_cbf839a480265450] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryValueSource::QueryValueSource(const ::org::apache::lucene::search::Query & a0, jfloat a1) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_f2d949d9faf0fc5a, a0.this$, a1)) {}

            void QueryValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_69d322032c5ae159], a0.this$, a1.this$);
            }

            ::java::lang::String QueryValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean QueryValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            jfloat QueryValueSource::getDefaultValue() const
            {
              return env->callFloatMethod(this$, mids$[mid_getDefaultValue_58aec2b64dff50c8]);
            }

            ::org::apache::lucene::search::Query QueryValueSource::getQuery() const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_cbf839a480265450]));
            }

            ::org::apache::lucene::queries::function::FunctionValues QueryValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint QueryValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_QueryValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryValueSource_init_(t_QueryValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryValueSource_createWeight(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_description(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_equals(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_getDefaultValue(t_QueryValueSource *self);
            static PyObject *t_QueryValueSource_getQuery(t_QueryValueSource *self);
            static PyObject *t_QueryValueSource_getValues(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_hashCode(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_get__defaultValue(t_QueryValueSource *self, void *data);
            static PyObject *t_QueryValueSource_get__query(t_QueryValueSource *self, void *data);
            static PyGetSetDef t_QueryValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_QueryValueSource, defaultValue),
              DECLARE_GET_FIELD(t_QueryValueSource, query),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryValueSource__methods_[] = {
              DECLARE_METHOD(t_QueryValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_QueryValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_QueryValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_QueryValueSource, getDefaultValue, METH_NOARGS),
              DECLARE_METHOD(t_QueryValueSource, getQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_QueryValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(QueryValueSource)[] = {
              { Py_tp_methods, t_QueryValueSource__methods_ },
              { Py_tp_init, (void *) t_QueryValueSource_init_ },
              { Py_tp_getset, t_QueryValueSource__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(QueryValueSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::ValueSource),
              NULL
            };

            DEFINE_TYPE(QueryValueSource, t_QueryValueSource, QueryValueSource);

            void t_QueryValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryValueSource), &PY_TYPE_DEF(QueryValueSource), module, "QueryValueSource", 0);
            }

            void t_QueryValueSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryValueSource), "class_", make_descriptor(QueryValueSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryValueSource), "wrapfn_", make_descriptor(t_QueryValueSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryValueSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryValueSource::initializeClass, 1)))
                return NULL;
              return t_QueryValueSource::wrap_Object(QueryValueSource(((t_QueryValueSource *) arg)->object.this$));
            }
            static PyObject *t_QueryValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryValueSource_init_(t_QueryValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jfloat a1;
              QueryValueSource object((jobject) NULL);

              if (!parseArgs(args, "kF", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
              {
                INT_CALL(object = QueryValueSource(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryValueSource_createWeight(t_QueryValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(QueryValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_QueryValueSource_description(t_QueryValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(QueryValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_QueryValueSource_equals(t_QueryValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(QueryValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_QueryValueSource_getDefaultValue(t_QueryValueSource *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getDefaultValue());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_QueryValueSource_getQuery(t_QueryValueSource *self)
            {
              ::org::apache::lucene::search::Query result((jobject) NULL);
              OBJ_CALL(result = self->object.getQuery());
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            static PyObject *t_QueryValueSource_getValues(t_QueryValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(QueryValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_QueryValueSource_hashCode(t_QueryValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(QueryValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_QueryValueSource_get__defaultValue(t_QueryValueSource *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getDefaultValue());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_QueryValueSource_get__query(t_QueryValueSource *self, void *data)
            {
              ::org::apache::lucene::search::Query value((jobject) NULL);
              OBJ_CALL(value = self->object.getQuery());
              return ::org::apache::lucene::search::t_Query::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/DirectReader.h"
#include "org/apache/lucene/util/LongValues.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *DirectReader::class$ = NULL;
          jmethodID *DirectReader::mids$ = NULL;
          bool DirectReader::live$ = false;

          jclass DirectReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/DirectReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getInstance_f46266e3ed0f6bbd] = env->getStaticMethodID(cls, "getInstance", "(Lorg/apache/lucene/store/RandomAccessInput;I)Lorg/apache/lucene/util/LongValues;");
              mids$[mid_getInstance_82556e4e5006a66b] = env->getStaticMethodID(cls, "getInstance", "(Lorg/apache/lucene/store/RandomAccessInput;IJ)Lorg/apache/lucene/util/LongValues;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DirectReader::DirectReader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::util::LongValues DirectReader::getInstance(const ::org::apache::lucene::store::RandomAccessInput & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::LongValues(env->callStaticObjectMethod(cls, mids$[mid_getInstance_f46266e3ed0f6bbd], a0.this$, a1));
          }

          ::org::apache::lucene::util::LongValues DirectReader::getInstance(const ::org::apache::lucene::store::RandomAccessInput & a0, jint a1, jlong a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::LongValues(env->callStaticObjectMethod(cls, mids$[mid_getInstance_82556e4e5006a66b], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_DirectReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DirectReader_init_(t_DirectReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DirectReader_getInstance(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_DirectReader__methods_[] = {
            DECLARE_METHOD(t_DirectReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectReader, getInstance, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DirectReader)[] = {
            { Py_tp_methods, t_DirectReader__methods_ },
            { Py_tp_init, (void *) t_DirectReader_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DirectReader)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(DirectReader, t_DirectReader, DirectReader);

          void t_DirectReader::install(PyObject *module)
          {
            installType(&PY_TYPE(DirectReader), &PY_TYPE_DEF(DirectReader), module, "DirectReader", 0);
          }

          void t_DirectReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectReader), "class_", make_descriptor(DirectReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectReader), "wrapfn_", make_descriptor(t_DirectReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DirectReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DirectReader::initializeClass, 1)))
              return NULL;
            return t_DirectReader::wrap_Object(DirectReader(((t_DirectReader *) arg)->object.this$));
          }
          static PyObject *t_DirectReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DirectReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DirectReader_init_(t_DirectReader *self, PyObject *args, PyObject *kwds)
          {
            DirectReader object((jobject) NULL);

            INT_CALL(object = DirectReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_DirectReader_getInstance(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::store::RandomAccessInput a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::util::LongValues result((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::store::RandomAccessInput::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectReader::getInstance(a0, a1));
                  return ::org::apache::lucene::util::t_LongValues::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::store::RandomAccessInput a0((jobject) NULL);
                jint a1;
                jlong a2;
                ::org::apache::lucene::util::LongValues result((jobject) NULL);

                if (!parseArgs(args, "kIJ", ::org::apache::lucene::store::RandomAccessInput::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectReader::getInstance(a0, a1, a2));
                  return ::org::apache::lucene::util::t_LongValues::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getInstance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/util/CSVUtil.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace util {

            ::java::lang::Class *CSVUtil::class$ = NULL;
            jmethodID *CSVUtil::mids$ = NULL;
            bool CSVUtil::live$ = false;

            jclass CSVUtil::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/util/CSVUtil");

                mids$ = new jmethodID[max_mid];
                mids$[mid_parse_1606e23a23a4a8e5] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/String;)[Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JArray< ::java::lang::String > CSVUtil::parse(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return JArray< ::java::lang::String >(env->callStaticObjectMethod(cls, mids$[mid_parse_1606e23a23a4a8e5], a0.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace util {
            static PyObject *t_CSVUtil_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CSVUtil_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CSVUtil_parse(PyTypeObject *type, PyObject *arg);

            static PyMethodDef t_CSVUtil__methods_[] = {
              DECLARE_METHOD(t_CSVUtil, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CSVUtil, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CSVUtil, parse, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(CSVUtil)[] = {
              { Py_tp_methods, t_CSVUtil__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(CSVUtil)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(CSVUtil, t_CSVUtil, CSVUtil);

            void t_CSVUtil::install(PyObject *module)
            {
              installType(&PY_TYPE(CSVUtil), &PY_TYPE_DEF(CSVUtil), module, "CSVUtil", 0);
            }

            void t_CSVUtil::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(CSVUtil), "class_", make_descriptor(CSVUtil::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CSVUtil), "wrapfn_", make_descriptor(t_CSVUtil::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CSVUtil), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CSVUtil_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CSVUtil::initializeClass, 1)))
                return NULL;
              return t_CSVUtil::wrap_Object(CSVUtil(((t_CSVUtil *) arg)->object.this$));
            }
            static PyObject *t_CSVUtil_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CSVUtil::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CSVUtil_parse(PyTypeObject *type, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::java::lang::String > result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::ko::util::CSVUtil::parse(a0));
                return JArray<jstring>(result.this$).wrap();
              }

              PyErr_SetArgsError(type, "parse", arg);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Analyzer$ReuseStrategy.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer::class$ = NULL;
        jmethodID *Analyzer::mids$ = NULL;
        bool Analyzer::live$ = false;
        ::org::apache::lucene::analysis::Analyzer$ReuseStrategy *Analyzer::GLOBAL_REUSE_STRATEGY = NULL;
        ::org::apache::lucene::analysis::Analyzer$ReuseStrategy *Analyzer::PER_FIELD_REUSE_STRATEGY = NULL;

        jclass Analyzer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_e42cc94d4b9f3f5e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer$ReuseStrategy;)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getOffsetGap_a5a7d1128e9e2bb7] = env->getMethodID(cls, "getOffsetGap", "(Ljava/lang/String;)I");
            mids$[mid_getPositionIncrementGap_a5a7d1128e9e2bb7] = env->getMethodID(cls, "getPositionIncrementGap", "(Ljava/lang/String;)I");
            mids$[mid_getReuseStrategy_fac8abbdfb8de3f7] = env->getMethodID(cls, "getReuseStrategy", "()Lorg/apache/lucene/analysis/Analyzer$ReuseStrategy;");
            mids$[mid_getVersion_6b68647131bbda98] = env->getMethodID(cls, "getVersion", "()Lorg/apache/lucene/util/Version;");
            mids$[mid_normalize_7ec4806c73267fd9] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_setVersion_8d0afbac9e78af32] = env->getMethodID(cls, "setVersion", "(Lorg/apache/lucene/util/Version;)V");
            mids$[mid_tokenStream_4d8a0821b29081b4] = env->getMethodID(cls, "tokenStream", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_tokenStream_aa7af853b58ab542] = env->getMethodID(cls, "tokenStream", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_attributeFactory_11e9c67770fe4372] = env->getMethodID(cls, "attributeFactory", "(Ljava/lang/String;)Lorg/apache/lucene/util/AttributeFactory;");
            mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_initReader_8dbb4487391277c7] = env->getMethodID(cls, "initReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");
            mids$[mid_initReaderForNormalization_8dbb4487391277c7] = env->getMethodID(cls, "initReaderForNormalization", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");
            mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            GLOBAL_REUSE_STRATEGY = new ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->getStaticObjectField(cls, "GLOBAL_REUSE_STRATEGY", "Lorg/apache/lucene/analysis/Analyzer$ReuseStrategy;"));
            PER_FIELD_REUSE_STRATEGY = new ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->getStaticObjectField(cls, "PER_FIELD_REUSE_STRATEGY", "Lorg/apache/lucene/analysis/Analyzer$ReuseStrategy;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer::Analyzer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        Analyzer::Analyzer(const ::org::apache::lucene::analysis::Analyzer$ReuseStrategy & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e42cc94d4b9f3f5e, a0.this$)) {}

        void Analyzer::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        jint Analyzer::getOffsetGap(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getOffsetGap_a5a7d1128e9e2bb7], a0.this$);
        }

        jint Analyzer::getPositionIncrementGap(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getPositionIncrementGap_a5a7d1128e9e2bb7], a0.this$);
        }

        ::org::apache::lucene::analysis::Analyzer$ReuseStrategy Analyzer::getReuseStrategy() const
        {
          return ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->callObjectMethod(this$, mids$[mid_getReuseStrategy_fac8abbdfb8de3f7]));
        }

        ::org::apache::lucene::util::Version Analyzer::getVersion() const
        {
          return ::org::apache::lucene::util::Version(env->callObjectMethod(this$, mids$[mid_getVersion_6b68647131bbda98]));
        }

        ::org::apache::lucene::util::BytesRef Analyzer::normalize(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_normalize_7ec4806c73267fd9], a0.this$, a1.this$));
        }

        void Analyzer::setVersion(const ::org::apache::lucene::util::Version & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setVersion_8d0afbac9e78af32], a0.this$);
        }

        ::org::apache::lucene::analysis::TokenStream Analyzer::tokenStream(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_4d8a0821b29081b4], a0.this$, a1.this$));
        }

        ::org::apache::lucene::analysis::TokenStream Analyzer::tokenStream(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_aa7af853b58ab542], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer_init_(t_Analyzer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer_close(t_Analyzer *self);
        static PyObject *t_Analyzer_getOffsetGap(t_Analyzer *self, PyObject *arg);
        static PyObject *t_Analyzer_getPositionIncrementGap(t_Analyzer *self, PyObject *arg);
        static PyObject *t_Analyzer_getReuseStrategy(t_Analyzer *self);
        static PyObject *t_Analyzer_getVersion(t_Analyzer *self);
        static PyObject *t_Analyzer_normalize(t_Analyzer *self, PyObject *args);
        static PyObject *t_Analyzer_setVersion(t_Analyzer *self, PyObject *arg);
        static PyObject *t_Analyzer_tokenStream(t_Analyzer *self, PyObject *args);
        static PyObject *t_Analyzer_get__reuseStrategy(t_Analyzer *self, void *data);
        static PyObject *t_Analyzer_get__version(t_Analyzer *self, void *data);
        static int t_Analyzer_set__version(t_Analyzer *self, PyObject *arg, void *data);
        static PyGetSetDef t_Analyzer__fields_[] = {
          DECLARE_GET_FIELD(t_Analyzer, reuseStrategy),
          DECLARE_GETSET_FIELD(t_Analyzer, version),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Analyzer__methods_[] = {
          DECLARE_METHOD(t_Analyzer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer, close, METH_NOARGS),
          DECLARE_METHOD(t_Analyzer, getOffsetGap, METH_O),
          DECLARE_METHOD(t_Analyzer, getPositionIncrementGap, METH_O),
          DECLARE_METHOD(t_Analyzer, getReuseStrategy, METH_NOARGS),
          DECLARE_METHOD(t_Analyzer, getVersion, METH_NOARGS),
          DECLARE_METHOD(t_Analyzer, normalize, METH_VARARGS),
          DECLARE_METHOD(t_Analyzer, setVersion, METH_O),
          DECLARE_METHOD(t_Analyzer, tokenStream, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Analyzer)[] = {
          { Py_tp_methods, t_Analyzer__methods_ },
          { Py_tp_init, (void *) t_Analyzer_init_ },
          { Py_tp_getset, t_Analyzer__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Analyzer)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Analyzer, t_Analyzer, Analyzer);

        void t_Analyzer::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer), &PY_TYPE_DEF(Analyzer), module, "Analyzer", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(Analyzer), "ReuseStrategy", make_descriptor(&PY_TYPE_DEF(Analyzer$ReuseStrategy)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Analyzer), "TokenStreamComponents", make_descriptor(&PY_TYPE_DEF(Analyzer$TokenStreamComponents)));
        }

        void t_Analyzer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Analyzer), "class_", make_descriptor(Analyzer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Analyzer), "wrapfn_", make_descriptor(t_Analyzer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Analyzer), "boxfn_", make_descriptor(boxObject));
          env->getClass(Analyzer::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(Analyzer), "GLOBAL_REUSE_STRATEGY", make_descriptor(::org::apache::lucene::analysis::t_Analyzer$ReuseStrategy::wrap_Object(*Analyzer::GLOBAL_REUSE_STRATEGY)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Analyzer), "PER_FIELD_REUSE_STRATEGY", make_descriptor(::org::apache::lucene::analysis::t_Analyzer$ReuseStrategy::wrap_Object(*Analyzer::PER_FIELD_REUSE_STRATEGY)));
        }

        static PyObject *t_Analyzer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer::initializeClass, 1)))
            return NULL;
          return t_Analyzer::wrap_Object(Analyzer(((t_Analyzer *) arg)->object.this$));
        }
        static PyObject *t_Analyzer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer_init_(t_Analyzer *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Analyzer object((jobject) NULL);

              INT_CALL(object = Analyzer());
              self->object = object;
              break;
            }
           case 1:
            {
              ::org::apache::lucene::analysis::Analyzer$ReuseStrategy a0((jobject) NULL);
              Analyzer object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer$ReuseStrategy::initializeClass, &a0))
              {
                INT_CALL(object = Analyzer(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Analyzer_close(t_Analyzer *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_Analyzer_getOffsetGap(t_Analyzer *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getOffsetGap(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getOffsetGap", arg);
          return NULL;
        }

        static PyObject *t_Analyzer_getPositionIncrementGap(t_Analyzer *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getPositionIncrementGap(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getPositionIncrementGap", arg);
          return NULL;
        }

        static PyObject *t_Analyzer_getReuseStrategy(t_Analyzer *self)
        {
          ::org::apache::lucene::analysis::Analyzer$ReuseStrategy result((jobject) NULL);
          OBJ_CALL(result = self->object.getReuseStrategy());
          return ::org::apache::lucene::analysis::t_Analyzer$ReuseStrategy::wrap_Object(result);
        }

        static PyObject *t_Analyzer_getVersion(t_Analyzer *self)
        {
          ::org::apache::lucene::util::Version result((jobject) NULL);
          OBJ_CALL(result = self->object.getVersion());
          return ::org::apache::lucene::util::t_Version::wrap_Object(result);
        }

        static PyObject *t_Analyzer_normalize(t_Analyzer *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.normalize(a0, a1));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "normalize", args);
          return NULL;
        }

        static PyObject *t_Analyzer_setVersion(t_Analyzer *self, PyObject *arg)
        {
          ::org::apache::lucene::util::Version a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::Version::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setVersion(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setVersion", arg);
          return NULL;
        }

        static PyObject *t_Analyzer_tokenStream(t_Analyzer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.tokenStream(a0, a1));
                return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.tokenStream(a0, a1));
                return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "tokenStream", args);
          return NULL;
        }

        static PyObject *t_Analyzer_get__reuseStrategy(t_Analyzer *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer$ReuseStrategy value((jobject) NULL);
          OBJ_CALL(value = self->object.getReuseStrategy());
          return ::org::apache::lucene::analysis::t_Analyzer$ReuseStrategy::wrap_Object(value);
        }

        static PyObject *t_Analyzer_get__version(t_Analyzer *self, void *data)
        {
          ::org::apache::lucene::util::Version value((jobject) NULL);
          OBJ_CALL(value = self->object.getVersion());
          return ::org::apache::lucene::util::t_Version::wrap_Object(value);
        }
        static int t_Analyzer_set__version(t_Analyzer *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::Version value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::Version::initializeClass, &value))
            {
              INT_CALL(self->object.setVersion(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "version", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *IndexInput::class$ = NULL;
        jmethodID *IndexInput::mids$ = NULL;
        bool IndexInput::live$ = false;

        jclass IndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/IndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_831b777072456914] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getFilePointer_2e5ae9edcb9b072f] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_length_2e5ae9edcb9b072f] = env->getMethodID(cls, "length", "()J");
            mids$[mid_randomAccessSlice_0b9b799a40079550] = env->getMethodID(cls, "randomAccessSlice", "(JJ)Lorg/apache/lucene/store/RandomAccessInput;");
            mids$[mid_seek_9c778c9bce6694df] = env->getMethodID(cls, "seek", "(J)V");
            mids$[mid_slice_552ef5e8b06b1e84] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_getFullSliceDescription_9bfa75c9f141b67f] = env->getMethodID(cls, "getFullSliceDescription", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexInput IndexInput::clone() const
        {
          return IndexInput(env->callObjectMethod(this$, mids$[mid_clone_831b777072456914]));
        }

        void IndexInput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        jlong IndexInput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_2e5ae9edcb9b072f]);
        }

        jlong IndexInput::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::store::RandomAccessInput IndexInput::randomAccessSlice(jlong a0, jlong a1) const
        {
          return ::org::apache::lucene::store::RandomAccessInput(env->callObjectMethod(this$, mids$[mid_randomAccessSlice_0b9b799a40079550], a0, a1));
        }

        void IndexInput::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_9c778c9bce6694df], a0);
        }

        IndexInput IndexInput::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return IndexInput(env->callObjectMethod(this$, mids$[mid_slice_552ef5e8b06b1e84], a0.this$, a1, a2));
        }

        ::java::lang::String IndexInput::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_IndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexInput_clone(t_IndexInput *self, PyObject *args);
        static PyObject *t_IndexInput_close(t_IndexInput *self);
        static PyObject *t_IndexInput_getFilePointer(t_IndexInput *self);
        static PyObject *t_IndexInput_length(t_IndexInput *self);
        static PyObject *t_IndexInput_randomAccessSlice(t_IndexInput *self, PyObject *args);
        static PyObject *t_IndexInput_seek(t_IndexInput *self, PyObject *arg);
        static PyObject *t_IndexInput_slice(t_IndexInput *self, PyObject *args);
        static PyObject *t_IndexInput_toString(t_IndexInput *self, PyObject *args);
        static PyObject *t_IndexInput_get__filePointer(t_IndexInput *self, void *data);
        static PyGetSetDef t_IndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_IndexInput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexInput__methods_[] = {
          DECLARE_METHOD(t_IndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_IndexInput, close, METH_NOARGS),
          DECLARE_METHOD(t_IndexInput, getFilePointer, METH_NOARGS),
          DECLARE_METHOD(t_IndexInput, length, METH_NOARGS),
          DECLARE_METHOD(t_IndexInput, randomAccessSlice, METH_VARARGS),
          DECLARE_METHOD(t_IndexInput, seek, METH_O),
          DECLARE_METHOD(t_IndexInput, slice, METH_VARARGS),
          DECLARE_METHOD(t_IndexInput, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexInput)[] = {
          { Py_tp_methods, t_IndexInput__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_IndexInput__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexInput)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::DataInput),
          NULL
        };

        DEFINE_TYPE(IndexInput, t_IndexInput, IndexInput);

        void t_IndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexInput), &PY_TYPE_DEF(IndexInput), module, "IndexInput", 0);
        }

        void t_IndexInput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexInput), "class_", make_descriptor(IndexInput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexInput), "wrapfn_", make_descriptor(t_IndexInput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexInput), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexInput::initializeClass, 1)))
            return NULL;
          return t_IndexInput::wrap_Object(IndexInput(((t_IndexInput *) arg)->object.this$));
        }
        static PyObject *t_IndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexInput_clone(t_IndexInput *self, PyObject *args)
        {
          IndexInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_IndexInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndexInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_IndexInput_close(t_IndexInput *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexInput_getFilePointer(t_IndexInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexInput_length(t_IndexInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexInput_randomAccessSlice(t_IndexInput *self, PyObject *args)
        {
          jlong a0;
          jlong a1;
          ::org::apache::lucene::store::RandomAccessInput result((jobject) NULL);

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = self->object.randomAccessSlice(a0, a1));
            return ::org::apache::lucene::store::t_RandomAccessInput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "randomAccessSlice", args);
          return NULL;
        }

        static PyObject *t_IndexInput_seek(t_IndexInput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "seek", arg);
          return NULL;
        }

        static PyObject *t_IndexInput_slice(t_IndexInput *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return t_IndexInput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "slice", args);
          return NULL;
        }

        static PyObject *t_IndexInput_toString(t_IndexInput *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(IndexInput), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IndexInput_get__filePointer(t_IndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoCompositeMembershipShape.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/spatial3d/geom/GeoMembershipShape.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoCompositeMembershipShape::class$ = NULL;
          jmethodID *GeoCompositeMembershipShape::mids$ = NULL;
          bool GeoCompositeMembershipShape::live$ = false;

          jclass GeoCompositeMembershipShape::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoCompositeMembershipShape");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fd580b4e02411290] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;)V");
              mids$[mid_init$_fa69e987247475d8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Ljava/io/InputStream;)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GeoCompositeMembershipShape::GeoCompositeMembershipShape(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0) : ::org::apache::lucene::spatial3d::geom::GeoBaseCompositeMembershipShape(env->newObject(initializeClass, &mids$, mid_init$_fd580b4e02411290, a0.this$)) {}

          GeoCompositeMembershipShape::GeoCompositeMembershipShape(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::java::io::InputStream & a1) : ::org::apache::lucene::spatial3d::geom::GeoBaseCompositeMembershipShape(env->newObject(initializeClass, &mids$, mid_init$_fa69e987247475d8, a0.this$, a1.this$)) {}

          jboolean GeoCompositeMembershipShape::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::java::lang::String GeoCompositeMembershipShape::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoCompositeMembershipShape_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoCompositeMembershipShape_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoCompositeMembershipShape_of_(t_GeoCompositeMembershipShape *self, PyObject *args);
          static int t_GeoCompositeMembershipShape_init_(t_GeoCompositeMembershipShape *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GeoCompositeMembershipShape_equals(t_GeoCompositeMembershipShape *self, PyObject *args);
          static PyObject *t_GeoCompositeMembershipShape_toString(t_GeoCompositeMembershipShape *self, PyObject *args);
          static PyObject *t_GeoCompositeMembershipShape_get__parameters_(t_GeoCompositeMembershipShape *self, void *data);
          static PyGetSetDef t_GeoCompositeMembershipShape__fields_[] = {
            DECLARE_GET_FIELD(t_GeoCompositeMembershipShape, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GeoCompositeMembershipShape__methods_[] = {
            DECLARE_METHOD(t_GeoCompositeMembershipShape, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoCompositeMembershipShape, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoCompositeMembershipShape, of_, METH_VARARGS),
            DECLARE_METHOD(t_GeoCompositeMembershipShape, equals, METH_VARARGS),
            DECLARE_METHOD(t_GeoCompositeMembershipShape, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoCompositeMembershipShape)[] = {
            { Py_tp_methods, t_GeoCompositeMembershipShape__methods_ },
            { Py_tp_init, (void *) t_GeoCompositeMembershipShape_init_ },
            { Py_tp_getset, t_GeoCompositeMembershipShape__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoCompositeMembershipShape)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::GeoBaseCompositeMembershipShape),
            NULL
          };

          DEFINE_TYPE(GeoCompositeMembershipShape, t_GeoCompositeMembershipShape, GeoCompositeMembershipShape);
          PyObject *t_GeoCompositeMembershipShape::wrap_Object(const GeoCompositeMembershipShape& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GeoCompositeMembershipShape::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GeoCompositeMembershipShape *self = (t_GeoCompositeMembershipShape *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_GeoCompositeMembershipShape::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GeoCompositeMembershipShape::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GeoCompositeMembershipShape *self = (t_GeoCompositeMembershipShape *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_GeoCompositeMembershipShape::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoCompositeMembershipShape), &PY_TYPE_DEF(GeoCompositeMembershipShape), module, "GeoCompositeMembershipShape", 0);
          }

          void t_GeoCompositeMembershipShape::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoCompositeMembershipShape), "class_", make_descriptor(GeoCompositeMembershipShape::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoCompositeMembershipShape), "wrapfn_", make_descriptor(t_GeoCompositeMembershipShape::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoCompositeMembershipShape), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoCompositeMembershipShape_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoCompositeMembershipShape::initializeClass, 1)))
              return NULL;
            return t_GeoCompositeMembershipShape::wrap_Object(GeoCompositeMembershipShape(((t_GeoCompositeMembershipShape *) arg)->object.this$));
          }
          static PyObject *t_GeoCompositeMembershipShape_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoCompositeMembershipShape::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoCompositeMembershipShape_of_(t_GeoCompositeMembershipShape *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_GeoCompositeMembershipShape_init_(t_GeoCompositeMembershipShape *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                GeoCompositeMembershipShape object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0))
                {
                  INT_CALL(object = GeoCompositeMembershipShape(a0));
                  self->object = object;
                  self->parameters[0] = ::org::apache::lucene::spatial3d::geom::PY_TYPE(GeoMembershipShape);
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::java::io::InputStream a1((jobject) NULL);
                GeoCompositeMembershipShape object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::java::io::InputStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = GeoCompositeMembershipShape(a0, a1));
                  self->object = object;
                  self->parameters[0] = ::org::apache::lucene::spatial3d::geom::PY_TYPE(GeoMembershipShape);
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GeoCompositeMembershipShape_equals(t_GeoCompositeMembershipShape *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(GeoCompositeMembershipShape), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_GeoCompositeMembershipShape_toString(t_GeoCompositeMembershipShape *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(GeoCompositeMembershipShape), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_GeoCompositeMembershipShape_get__parameters_(t_GeoCompositeMembershipShape *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/RangeQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *AbstractRangeQueryNode::class$ = NULL;
              jmethodID *AbstractRangeQueryNode::mids$ = NULL;
              bool AbstractRangeQueryNode::live$ = false;

              jclass AbstractRangeQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getField_ba44900ab7d793b9] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getLowerBound_28e9192a65eb7516] = env->getMethodID(cls, "getLowerBound", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;");
                  mids$[mid_getUpperBound_28e9192a65eb7516] = env->getMethodID(cls, "getUpperBound", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;");
                  mids$[mid_isLowerInclusive_8454bd5aa23fd11e] = env->getMethodID(cls, "isLowerInclusive", "()Z");
                  mids$[mid_isUpperInclusive_8454bd5aa23fd11e] = env->getMethodID(cls, "isUpperInclusive", "()Z");
                  mids$[mid_setBounds_c403cfc42f15ae06] = env->getMethodID(cls, "setBounds", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;ZZ)V");
                  mids$[mid_setField_4b7f5e38f806ae55] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::CharSequence AbstractRangeQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_ba44900ab7d793b9]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode AbstractRangeQueryNode::getLowerBound() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode(env->callObjectMethod(this$, mids$[mid_getLowerBound_28e9192a65eb7516]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode AbstractRangeQueryNode::getUpperBound() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode(env->callObjectMethod(this$, mids$[mid_getUpperBound_28e9192a65eb7516]));
              }

              jboolean AbstractRangeQueryNode::isLowerInclusive() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isLowerInclusive_8454bd5aa23fd11e]);
              }

              jboolean AbstractRangeQueryNode::isUpperInclusive() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isUpperInclusive_8454bd5aa23fd11e]);
              }

              void AbstractRangeQueryNode::setBounds(const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode & a1, jboolean a2, jboolean a3) const
              {
                env->callVoidMethod(this$, mids$[mid_setBounds_c403cfc42f15ae06], a0.this$, a1.this$, a2, a3);
              }

              void AbstractRangeQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_4b7f5e38f806ae55], a0.this$);
              }

              ::java::lang::CharSequence AbstractRangeQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String AbstractRangeQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_AbstractRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AbstractRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AbstractRangeQueryNode_of_(t_AbstractRangeQueryNode *self, PyObject *args);
              static PyObject *t_AbstractRangeQueryNode_getField(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_getLowerBound(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_getUpperBound(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_isLowerInclusive(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_isUpperInclusive(t_AbstractRangeQueryNode *self);
              static PyObject *t_AbstractRangeQueryNode_setBounds(t_AbstractRangeQueryNode *self, PyObject *args);
              static PyObject *t_AbstractRangeQueryNode_setField(t_AbstractRangeQueryNode *self, PyObject *arg);
              static PyObject *t_AbstractRangeQueryNode_toQueryString(t_AbstractRangeQueryNode *self, PyObject *args);
              static PyObject *t_AbstractRangeQueryNode_toString(t_AbstractRangeQueryNode *self, PyObject *args);
              static PyObject *t_AbstractRangeQueryNode_get__field(t_AbstractRangeQueryNode *self, void *data);
              static int t_AbstractRangeQueryNode_set__field(t_AbstractRangeQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__lowerBound(t_AbstractRangeQueryNode *self, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__lowerInclusive(t_AbstractRangeQueryNode *self, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__upperBound(t_AbstractRangeQueryNode *self, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__upperInclusive(t_AbstractRangeQueryNode *self, void *data);
              static PyObject *t_AbstractRangeQueryNode_get__parameters_(t_AbstractRangeQueryNode *self, void *data);
              static PyGetSetDef t_AbstractRangeQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_AbstractRangeQueryNode, field),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, lowerBound),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, lowerInclusive),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, upperBound),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, upperInclusive),
                DECLARE_GET_FIELD(t_AbstractRangeQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_AbstractRangeQueryNode__methods_[] = {
                DECLARE_METHOD(t_AbstractRangeQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, of_, METH_VARARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, getLowerBound, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, getUpperBound, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, isLowerInclusive, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, isUpperInclusive, METH_NOARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, setBounds, METH_VARARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, setField, METH_O),
                DECLARE_METHOD(t_AbstractRangeQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_AbstractRangeQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(AbstractRangeQueryNode)[] = {
                { Py_tp_methods, t_AbstractRangeQueryNode__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { Py_tp_getset, t_AbstractRangeQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(AbstractRangeQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl),
                NULL
              };

              DEFINE_TYPE(AbstractRangeQueryNode, t_AbstractRangeQueryNode, AbstractRangeQueryNode);
              PyObject *t_AbstractRangeQueryNode::wrap_Object(const AbstractRangeQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_AbstractRangeQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_AbstractRangeQueryNode *self = (t_AbstractRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_AbstractRangeQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_AbstractRangeQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_AbstractRangeQueryNode *self = (t_AbstractRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_AbstractRangeQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(AbstractRangeQueryNode), &PY_TYPE_DEF(AbstractRangeQueryNode), module, "AbstractRangeQueryNode", 0);
              }

              void t_AbstractRangeQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractRangeQueryNode), "class_", make_descriptor(AbstractRangeQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractRangeQueryNode), "wrapfn_", make_descriptor(t_AbstractRangeQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractRangeQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AbstractRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AbstractRangeQueryNode::initializeClass, 1)))
                  return NULL;
                return t_AbstractRangeQueryNode::wrap_Object(AbstractRangeQueryNode(((t_AbstractRangeQueryNode *) arg)->object.this$));
              }
              static PyObject *t_AbstractRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AbstractRangeQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_AbstractRangeQueryNode_of_(t_AbstractRangeQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_AbstractRangeQueryNode_getField(t_AbstractRangeQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_AbstractRangeQueryNode_getLowerBound(t_AbstractRangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getLowerBound());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(result);
              }

              static PyObject *t_AbstractRangeQueryNode_getUpperBound(t_AbstractRangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getUpperBound());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(result);
              }

              static PyObject *t_AbstractRangeQueryNode_isLowerInclusive(t_AbstractRangeQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isLowerInclusive());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_AbstractRangeQueryNode_isUpperInclusive(t_AbstractRangeQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isUpperInclusive());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_AbstractRangeQueryNode_setBounds(t_AbstractRangeQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                jboolean a3;

                if (!parseArgs(args, "KKZZ", ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::parameters_, &a1, &p1, ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::parameters_, &a2, &a3))
                {
                  OBJ_CALL(self->object.setBounds(a0, a1, a2, a3));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setBounds", args);
                return NULL;
              }

              static PyObject *t_AbstractRangeQueryNode_setField(t_AbstractRangeQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_AbstractRangeQueryNode_toQueryString(t_AbstractRangeQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(AbstractRangeQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_AbstractRangeQueryNode_toString(t_AbstractRangeQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(AbstractRangeQueryNode), (PyObject *) self, "toString", args, 2);
              }
              static PyObject *t_AbstractRangeQueryNode_get__parameters_(t_AbstractRangeQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }

              static PyObject *t_AbstractRangeQueryNode_get__field(t_AbstractRangeQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_AbstractRangeQueryNode_set__field(t_AbstractRangeQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_AbstractRangeQueryNode_get__lowerBound(t_AbstractRangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getLowerBound());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(value);
              }

              static PyObject *t_AbstractRangeQueryNode_get__lowerInclusive(t_AbstractRangeQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isLowerInclusive());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_AbstractRangeQueryNode_get__upperBound(t_AbstractRangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getUpperBound());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(value);
              }

              static PyObject *t_AbstractRangeQueryNode_get__upperInclusive(t_AbstractRangeQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isUpperInclusive());
                Py_RETURN_BOOL(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ByteBuffersIndexOutput.h"
#include "java/util/Map.h"
#include "org/apache/lucene/store/ByteBuffersDataOutput.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ByteBuffersIndexOutput::class$ = NULL;
        jmethodID *ByteBuffersIndexOutput::mids$ = NULL;
        bool ByteBuffersIndexOutput::live$ = false;

        jclass ByteBuffersIndexOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ByteBuffersIndexOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_03e852ad6e11b191] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/ByteBuffersDataOutput;Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_copyBytes_4833aa1d1f4cf120] = env->getMethodID(cls, "copyBytes", "(Lorg/apache/lucene/store/DataInput;J)V");
            mids$[mid_getChecksum_2e5ae9edcb9b072f] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_2e5ae9edcb9b072f] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_writeByte_9c36fec3bac1d0c7] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_2a8b02a5adcbf830] = env->getMethodID(cls, "writeBytes", "([BI)V");
            mids$[mid_writeBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "writeBytes", "([BII)V");
            mids$[mid_writeInt_040c4cd0390c5aff] = env->getMethodID(cls, "writeInt", "(I)V");
            mids$[mid_writeLong_9c778c9bce6694df] = env->getMethodID(cls, "writeLong", "(J)V");
            mids$[mid_writeMapOfStrings_408bd889ee3beae5] = env->getMethodID(cls, "writeMapOfStrings", "(Ljava/util/Map;)V");
            mids$[mid_writeSetOfStrings_d5a4a8d4b806f0ba] = env->getMethodID(cls, "writeSetOfStrings", "(Ljava/util/Set;)V");
            mids$[mid_writeShort_265bc0a0a1840315] = env->getMethodID(cls, "writeShort", "(S)V");
            mids$[mid_writeString_9fd2eb66a64e6f0f] = env->getMethodID(cls, "writeString", "(Ljava/lang/String;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBuffersIndexOutput::ByteBuffersIndexOutput(const ::org::apache::lucene::store::ByteBuffersDataOutput & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_03e852ad6e11b191, a0.this$, a1.this$, a2.this$)) {}

        void ByteBuffersIndexOutput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        void ByteBuffersIndexOutput::copyBytes(const ::org::apache::lucene::store::DataInput & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copyBytes_4833aa1d1f4cf120], a0.this$, a1);
        }

        jlong ByteBuffersIndexOutput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_2e5ae9edcb9b072f]);
        }

        jlong ByteBuffersIndexOutput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_2e5ae9edcb9b072f]);
        }

        void ByteBuffersIndexOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_9c36fec3bac1d0c7], a0);
        }

        void ByteBuffersIndexOutput::writeBytes(const JArray< jbyte > & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_2a8b02a5adcbf830], a0.this$, a1);
        }

        void ByteBuffersIndexOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }

        void ByteBuffersIndexOutput::writeInt(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeInt_040c4cd0390c5aff], a0);
        }

        void ByteBuffersIndexOutput::writeLong(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeLong_9c778c9bce6694df], a0);
        }

        void ByteBuffersIndexOutput::writeMapOfStrings(const ::java::util::Map & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeMapOfStrings_408bd889ee3beae5], a0.this$);
        }

        void ByteBuffersIndexOutput::writeSetOfStrings(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeSetOfStrings_d5a4a8d4b806f0ba], a0.this$);
        }

        void ByteBuffersIndexOutput::writeShort(jshort a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeShort_265bc0a0a1840315], a0);
        }

        void ByteBuffersIndexOutput::writeString(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeString_9fd2eb66a64e6f0f], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ByteBuffersIndexOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBuffersIndexOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBuffersIndexOutput_init_(t_ByteBuffersIndexOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBuffersIndexOutput_close(t_ByteBuffersIndexOutput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexOutput_copyBytes(t_ByteBuffersIndexOutput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexOutput_getChecksum(t_ByteBuffersIndexOutput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexOutput_getFilePointer(t_ByteBuffersIndexOutput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexOutput_writeByte(t_ByteBuffersIndexOutput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexOutput_writeBytes(t_ByteBuffersIndexOutput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexOutput_writeInt(t_ByteBuffersIndexOutput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexOutput_writeLong(t_ByteBuffersIndexOutput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexOutput_writeMapOfStrings(t_ByteBuffersIndexOutput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexOutput_writeSetOfStrings(t_ByteBuffersIndexOutput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexOutput_writeShort(t_ByteBuffersIndexOutput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexOutput_writeString(t_ByteBuffersIndexOutput *self, PyObject *args);
        static PyObject *t_ByteBuffersIndexOutput_get__checksum(t_ByteBuffersIndexOutput *self, void *data);
        static PyObject *t_ByteBuffersIndexOutput_get__filePointer(t_ByteBuffersIndexOutput *self, void *data);
        static PyGetSetDef t_ByteBuffersIndexOutput__fields_[] = {
          DECLARE_GET_FIELD(t_ByteBuffersIndexOutput, checksum),
          DECLARE_GET_FIELD(t_ByteBuffersIndexOutput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteBuffersIndexOutput__methods_[] = {
          DECLARE_METHOD(t_ByteBuffersIndexOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBuffersIndexOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBuffersIndexOutput, close, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexOutput, copyBytes, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexOutput, getChecksum, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexOutput, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexOutput, writeBytes, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexOutput, writeInt, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexOutput, writeLong, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexOutput, writeMapOfStrings, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexOutput, writeSetOfStrings, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexOutput, writeShort, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersIndexOutput, writeString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ByteBuffersIndexOutput)[] = {
          { Py_tp_methods, t_ByteBuffersIndexOutput__methods_ },
          { Py_tp_init, (void *) t_ByteBuffersIndexOutput_init_ },
          { Py_tp_getset, t_ByteBuffersIndexOutput__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ByteBuffersIndexOutput)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::IndexOutput),
          NULL
        };

        DEFINE_TYPE(ByteBuffersIndexOutput, t_ByteBuffersIndexOutput, ByteBuffersIndexOutput);

        void t_ByteBuffersIndexOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBuffersIndexOutput), &PY_TYPE_DEF(ByteBuffersIndexOutput), module, "ByteBuffersIndexOutput", 0);
        }

        void t_ByteBuffersIndexOutput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersIndexOutput), "class_", make_descriptor(ByteBuffersIndexOutput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersIndexOutput), "wrapfn_", make_descriptor(t_ByteBuffersIndexOutput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersIndexOutput), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteBuffersIndexOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBuffersIndexOutput::initializeClass, 1)))
            return NULL;
          return t_ByteBuffersIndexOutput::wrap_Object(ByteBuffersIndexOutput(((t_ByteBuffersIndexOutput *) arg)->object.this$));
        }
        static PyObject *t_ByteBuffersIndexOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBuffersIndexOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBuffersIndexOutput_init_(t_ByteBuffersIndexOutput *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::ByteBuffersDataOutput a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ByteBuffersIndexOutput object((jobject) NULL);

          if (!parseArgs(args, "kss", ::org::apache::lucene::store::ByteBuffersDataOutput::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = ByteBuffersIndexOutput(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBuffersIndexOutput_close(t_ByteBuffersIndexOutput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersIndexOutput), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_ByteBuffersIndexOutput_copyBytes(t_ByteBuffersIndexOutput *self, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.copyBytes(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersIndexOutput), (PyObject *) self, "copyBytes", args, 2);
        }

        static PyObject *t_ByteBuffersIndexOutput_getChecksum(t_ByteBuffersIndexOutput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChecksum());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(ByteBuffersIndexOutput), (PyObject *) self, "getChecksum", args, 2);
        }

        static PyObject *t_ByteBuffersIndexOutput_getFilePointer(t_ByteBuffersIndexOutput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(ByteBuffersIndexOutput), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_ByteBuffersIndexOutput_writeByte(t_ByteBuffersIndexOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersIndexOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_ByteBuffersIndexOutput_writeBytes(t_ByteBuffersIndexOutput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(self->object.writeBytes(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.writeBytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(PY_TYPE(ByteBuffersIndexOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_ByteBuffersIndexOutput_writeInt(t_ByteBuffersIndexOutput *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.writeInt(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersIndexOutput), (PyObject *) self, "writeInt", args, 2);
        }

        static PyObject *t_ByteBuffersIndexOutput_writeLong(t_ByteBuffersIndexOutput *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.writeLong(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersIndexOutput), (PyObject *) self, "writeLong", args, 2);
        }

        static PyObject *t_ByteBuffersIndexOutput_writeMapOfStrings(t_ByteBuffersIndexOutput *self, PyObject *args)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(self->object.writeMapOfStrings(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersIndexOutput), (PyObject *) self, "writeMapOfStrings", args, 2);
        }

        static PyObject *t_ByteBuffersIndexOutput_writeSetOfStrings(t_ByteBuffersIndexOutput *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.writeSetOfStrings(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersIndexOutput), (PyObject *) self, "writeSetOfStrings", args, 2);
        }

        static PyObject *t_ByteBuffersIndexOutput_writeShort(t_ByteBuffersIndexOutput *self, PyObject *args)
        {
          jshort a0;

          if (!parseArgs(args, "S", &a0))
          {
            OBJ_CALL(self->object.writeShort(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersIndexOutput), (PyObject *) self, "writeShort", args, 2);
        }

        static PyObject *t_ByteBuffersIndexOutput_writeString(t_ByteBuffersIndexOutput *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.writeString(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersIndexOutput), (PyObject *) self, "writeString", args, 2);
        }

        static PyObject *t_ByteBuffersIndexOutput_get__checksum(t_ByteBuffersIndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_ByteBuffersIndexOutput_get__filePointer(t_ByteBuffersIndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/TokenSources.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/Document.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *TokenSources::class$ = NULL;
          jmethodID *TokenSources::mids$ = NULL;
          bool TokenSources::live$ = false;

          jclass TokenSources::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/TokenSources");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getAnyTokenStream_a4530dadf56d2552] = env->getStaticMethodID(cls, "getAnyTokenStream", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getAnyTokenStream_65a0921ab98ae57e] = env->getStaticMethodID(cls, "getAnyTokenStream", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/document/Document;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTermVectorTokenStreamOrNull_6c59ecca309a091d] = env->getStaticMethodID(cls, "getTermVectorTokenStreamOrNull", "(Ljava/lang/String;Lorg/apache/lucene/index/Fields;I)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_73e2def171e28525] = env->getStaticMethodID(cls, "getTokenStream", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_6b57471ec02a0766] = env->getStaticMethodID(cls, "getTokenStream", "(Lorg/apache/lucene/index/Terms;Z)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_cf4ebac918997c2f] = env->getStaticMethodID(cls, "getTokenStream", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_6c9b451b2b7ddc6a] = env->getStaticMethodID(cls, "getTokenStream", "(Lorg/apache/lucene/document/Document;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_a4530dadf56d2552] = env->getStaticMethodID(cls, "getTokenStream", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_e8d0cef511b8524a] = env->getStaticMethodID(cls, "getTokenStream", "(Ljava/lang/String;Lorg/apache/lucene/index/Fields;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;I)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStreamWithOffsets_a9454c27326ecc70] = env->getStaticMethodID(cls, "getTokenStreamWithOffsets", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getAnyTokenStream(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getAnyTokenStream_a4530dadf56d2552], a0.this$, a1, a2.this$, a3.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getAnyTokenStream(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::document::Document & a3, const ::org::apache::lucene::analysis::Analyzer & a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getAnyTokenStream_65a0921ab98ae57e], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTermVectorTokenStreamOrNull(const ::java::lang::String & a0, const ::org::apache::lucene::index::Fields & a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTermVectorTokenStreamOrNull_6c59ecca309a091d], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::org::apache::lucene::index::Terms & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_73e2def171e28525], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::org::apache::lucene::index::Terms & a0, jboolean a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_6b57471ec02a0766], a0.this$, a1));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_cf4ebac918997c2f], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::org::apache::lucene::document::Document & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_6c9b451b2b7ddc6a], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_a4530dadf56d2552], a0.this$, a1, a2.this$, a3.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::java::lang::String & a0, const ::org::apache::lucene::index::Fields & a1, const ::java::lang::String & a2, const ::org::apache::lucene::analysis::Analyzer & a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_e8d0cef511b8524a], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStreamWithOffsets(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStreamWithOffsets_a9454c27326ecc70], a0.this$, a1, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_TokenSources_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenSources_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenSources_getAnyTokenStream(PyTypeObject *type, PyObject *args);
          static PyObject *t_TokenSources_getTermVectorTokenStreamOrNull(PyTypeObject *type, PyObject *args);
          static PyObject *t_TokenSources_getTokenStream(PyTypeObject *type, PyObject *args);
          static PyObject *t_TokenSources_getTokenStreamWithOffsets(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_TokenSources__methods_[] = {
            DECLARE_METHOD(t_TokenSources, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenSources, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenSources, getAnyTokenStream, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenSources, getTermVectorTokenStreamOrNull, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenSources, getTokenStream, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenSources, getTokenStreamWithOffsets, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TokenSources)[] = {
            { Py_tp_methods, t_TokenSources__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TokenSources)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(TokenSources, t_TokenSources, TokenSources);

          void t_TokenSources::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenSources), &PY_TYPE_DEF(TokenSources), module, "TokenSources", 0);
          }

          void t_TokenSources::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenSources), "class_", make_descriptor(TokenSources::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenSources), "wrapfn_", make_descriptor(t_TokenSources::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenSources), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenSources_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenSources::initializeClass, 1)))
              return NULL;
            return t_TokenSources::wrap_Object(TokenSources(((t_TokenSources *) arg)->object.this$));
          }
          static PyObject *t_TokenSources_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenSources::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TokenSources_getAnyTokenStream(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getAnyTokenStream(a0, a1, a2, a3));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::document::Document a3((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a4((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "kIskk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::document::Document::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getAnyTokenStream(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getAnyTokenStream", args);
            return NULL;
          }

          static PyObject *t_TokenSources_getTermVectorTokenStreamOrNull(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::Fields a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "skI", ::org::apache::lucene::index::Fields::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTermVectorTokenStreamOrNull(a0, a1, a2));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getTermVectorTokenStreamOrNull", args);
            return NULL;
          }

          static PyObject *t_TokenSources_getTokenStream(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::Terms a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::index::Terms a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::index::Terms::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0, a1));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "ssk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0, a1, a2));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::document::Document a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "ksk", ::org::apache::lucene::document::Document::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0, a1, a2));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0, a1, a2, a3));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::index::Fields a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                jint a4;
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "skskI", ::org::apache::lucene::index::Fields::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getTokenStream", args);
            return NULL;
          }

          static PyObject *t_TokenSources_getTokenStreamWithOffsets(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "kIs", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStreamWithOffsets(a0, a1, a2));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getTokenStreamWithOffsets", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardAnalyzer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardAnalyzer::class$ = NULL;
          jmethodID *StandardAnalyzer::mids$ = NULL;
          bool StandardAnalyzer::live$ = false;
          jint StandardAnalyzer::DEFAULT_MAX_TOKEN_LENGTH = (jint) 0;

          jclass StandardAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_getMaxTokenLength_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_setMaxTokenLength_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_TOKEN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_TOKEN_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardAnalyzer::StandardAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          StandardAnalyzer::StandardAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          StandardAnalyzer::StandardAnalyzer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b2f3c57f5e6eb3f2, a0.this$)) {}

          jint StandardAnalyzer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_9972fcc56b44e79d]);
          }

          void StandardAnalyzer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardAnalyzer_init_(t_StandardAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardAnalyzer_getMaxTokenLength(t_StandardAnalyzer *self);
          static PyObject *t_StandardAnalyzer_setMaxTokenLength(t_StandardAnalyzer *self, PyObject *arg);
          static PyObject *t_StandardAnalyzer_get__maxTokenLength(t_StandardAnalyzer *self, void *data);
          static int t_StandardAnalyzer_set__maxTokenLength(t_StandardAnalyzer *self, PyObject *arg, void *data);
          static PyGetSetDef t_StandardAnalyzer__fields_[] = {
            DECLARE_GETSET_FIELD(t_StandardAnalyzer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StandardAnalyzer__methods_[] = {
            DECLARE_METHOD(t_StandardAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardAnalyzer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_StandardAnalyzer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(StandardAnalyzer)[] = {
            { Py_tp_methods, t_StandardAnalyzer__methods_ },
            { Py_tp_init, (void *) t_StandardAnalyzer_init_ },
            { Py_tp_getset, t_StandardAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(StandardAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(StandardAnalyzer, t_StandardAnalyzer, StandardAnalyzer);

          void t_StandardAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardAnalyzer), &PY_TYPE_DEF(StandardAnalyzer), module, "StandardAnalyzer", 0);
          }

          void t_StandardAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardAnalyzer), "class_", make_descriptor(StandardAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardAnalyzer), "wrapfn_", make_descriptor(t_StandardAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(StandardAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardAnalyzer), "DEFAULT_MAX_TOKEN_LENGTH", make_descriptor(StandardAnalyzer::DEFAULT_MAX_TOKEN_LENGTH));
          }

          static PyObject *t_StandardAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardAnalyzer::initializeClass, 1)))
              return NULL;
            return t_StandardAnalyzer::wrap_Object(StandardAnalyzer(((t_StandardAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_StandardAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardAnalyzer_init_(t_StandardAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                StandardAnalyzer object((jobject) NULL);

                INT_CALL(object = StandardAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                StandardAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = StandardAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                StandardAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = StandardAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardAnalyzer_getMaxTokenLength(t_StandardAnalyzer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_StandardAnalyzer_setMaxTokenLength(t_StandardAnalyzer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_StandardAnalyzer_get__maxTokenLength(t_StandardAnalyzer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyLong_FromLong((long) value);
          }
          static int t_StandardAnalyzer_set__maxTokenLength(t_StandardAnalyzer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherFactory.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherFactory::class$ = NULL;
        jmethodID *SearcherFactory::mids$ = NULL;
        bool SearcherFactory::live$ = false;

        jclass SearcherFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_newSearcher_347339bfcc4f5acc] = env->getMethodID(cls, "newSearcher", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/IndexSearcher;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SearcherFactory::SearcherFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::search::IndexSearcher SearcherFactory::newSearcher(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::index::IndexReader & a1) const
        {
          return ::org::apache::lucene::search::IndexSearcher(env->callObjectMethod(this$, mids$[mid_newSearcher_347339bfcc4f5acc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SearcherFactory_init_(t_SearcherFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SearcherFactory_newSearcher(t_SearcherFactory *self, PyObject *args);

        static PyMethodDef t_SearcherFactory__methods_[] = {
          DECLARE_METHOD(t_SearcherFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherFactory, newSearcher, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SearcherFactory)[] = {
          { Py_tp_methods, t_SearcherFactory__methods_ },
          { Py_tp_init, (void *) t_SearcherFactory_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SearcherFactory)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SearcherFactory, t_SearcherFactory, SearcherFactory);

        void t_SearcherFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherFactory), &PY_TYPE_DEF(SearcherFactory), module, "SearcherFactory", 0);
        }

        void t_SearcherFactory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherFactory), "class_", make_descriptor(SearcherFactory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherFactory), "wrapfn_", make_descriptor(t_SearcherFactory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherFactory), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherFactory::initializeClass, 1)))
            return NULL;
          return t_SearcherFactory::wrap_Object(SearcherFactory(((t_SearcherFactory *) arg)->object.this$));
        }
        static PyObject *t_SearcherFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SearcherFactory_init_(t_SearcherFactory *self, PyObject *args, PyObject *kwds)
        {
          SearcherFactory object((jobject) NULL);

          INT_CALL(object = SearcherFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_SearcherFactory_newSearcher(t_SearcherFactory *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
          ::org::apache::lucene::search::IndexSearcher result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.newSearcher(a0, a1));
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "newSearcher", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiTokenizer::class$ = NULL;
          jmethodID *ThaiTokenizer::mids$ = NULL;
          bool ThaiTokenizer::live$ = false;
          jboolean ThaiTokenizer::DBBI_AVAILABLE = (jboolean) 0;

          jclass ThaiTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_a55a4d78167a7843] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;)V");
              mids$[mid_setNextSentence_438c62480c481c65] = env->getMethodID(cls, "setNextSentence", "(II)V");
              mids$[mid_incrementWord_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementWord", "()Z");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DBBI_AVAILABLE = env->getStaticBooleanField(cls, "DBBI_AVAILABLE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiTokenizer::ThaiTokenizer() : ::org::apache::lucene::analysis::util::SegmentingTokenizerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ThaiTokenizer::ThaiTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0) : ::org::apache::lucene::analysis::util::SegmentingTokenizerBase(env->newObject(initializeClass, &mids$, mid_init$_a55a4d78167a7843, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiTokenizer_init_(t_ThaiTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_ThaiTokenizer__methods_[] = {
            DECLARE_METHOD(t_ThaiTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ThaiTokenizer)[] = {
            { Py_tp_methods, t_ThaiTokenizer__methods_ },
            { Py_tp_init, (void *) t_ThaiTokenizer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ThaiTokenizer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::SegmentingTokenizerBase),
            NULL
          };

          DEFINE_TYPE(ThaiTokenizer, t_ThaiTokenizer, ThaiTokenizer);

          void t_ThaiTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiTokenizer), &PY_TYPE_DEF(ThaiTokenizer), module, "ThaiTokenizer", 0);
          }

          void t_ThaiTokenizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ThaiTokenizer), "class_", make_descriptor(ThaiTokenizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ThaiTokenizer), "wrapfn_", make_descriptor(t_ThaiTokenizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ThaiTokenizer), "boxfn_", make_descriptor(boxObject));
            env->getClass(ThaiTokenizer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ThaiTokenizer), "DBBI_AVAILABLE", make_descriptor(ThaiTokenizer::DBBI_AVAILABLE));
          }

          static PyObject *t_ThaiTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiTokenizer::initializeClass, 1)))
              return NULL;
            return t_ThaiTokenizer::wrap_Object(ThaiTokenizer(((t_ThaiTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ThaiTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiTokenizer_init_(t_ThaiTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ThaiTokenizer object((jobject) NULL);

                INT_CALL(object = ThaiTokenizer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ThaiTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
                {
                  INT_CALL(object = ThaiTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/RunAutomaton.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *RunAutomaton::class$ = NULL;
          jmethodID *RunAutomaton::mids$ = NULL;
          bool RunAutomaton::live$ = false;

          jclass RunAutomaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/RunAutomaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getCharIntervals_d2c45ef07a322466] = env->getMethodID(cls, "getCharIntervals", "()[I");
              mids$[mid_getSize_9972fcc56b44e79d] = env->getMethodID(cls, "getSize", "()I");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isAccept_a1d30e1ee40c89a2] = env->getMethodID(cls, "isAccept", "(I)Z");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_step_57a58545eba514db] = env->getMethodID(cls, "step", "(II)I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean RunAutomaton::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          JArray< jint > RunAutomaton::getCharIntervals() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getCharIntervals_d2c45ef07a322466]));
          }

          jint RunAutomaton::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_9972fcc56b44e79d]);
          }

          jint RunAutomaton::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          jboolean RunAutomaton::isAccept(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isAccept_a1d30e1ee40c89a2], a0);
          }

          jlong RunAutomaton::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          jint RunAutomaton::step(jint a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_step_57a58545eba514db], a0, a1);
          }

          ::java::lang::String RunAutomaton::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_RunAutomaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RunAutomaton_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RunAutomaton_equals(t_RunAutomaton *self, PyObject *args);
          static PyObject *t_RunAutomaton_getCharIntervals(t_RunAutomaton *self);
          static PyObject *t_RunAutomaton_getSize(t_RunAutomaton *self);
          static PyObject *t_RunAutomaton_hashCode(t_RunAutomaton *self, PyObject *args);
          static PyObject *t_RunAutomaton_isAccept(t_RunAutomaton *self, PyObject *arg);
          static PyObject *t_RunAutomaton_ramBytesUsed(t_RunAutomaton *self);
          static PyObject *t_RunAutomaton_step(t_RunAutomaton *self, PyObject *args);
          static PyObject *t_RunAutomaton_toString(t_RunAutomaton *self, PyObject *args);
          static PyObject *t_RunAutomaton_get__charIntervals(t_RunAutomaton *self, void *data);
          static PyObject *t_RunAutomaton_get__size(t_RunAutomaton *self, void *data);
          static PyGetSetDef t_RunAutomaton__fields_[] = {
            DECLARE_GET_FIELD(t_RunAutomaton, charIntervals),
            DECLARE_GET_FIELD(t_RunAutomaton, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_RunAutomaton__methods_[] = {
            DECLARE_METHOD(t_RunAutomaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RunAutomaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RunAutomaton, equals, METH_VARARGS),
            DECLARE_METHOD(t_RunAutomaton, getCharIntervals, METH_NOARGS),
            DECLARE_METHOD(t_RunAutomaton, getSize, METH_NOARGS),
            DECLARE_METHOD(t_RunAutomaton, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_RunAutomaton, isAccept, METH_O),
            DECLARE_METHOD(t_RunAutomaton, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_RunAutomaton, step, METH_VARARGS),
            DECLARE_METHOD(t_RunAutomaton, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(RunAutomaton)[] = {
            { Py_tp_methods, t_RunAutomaton__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_RunAutomaton__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(RunAutomaton)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(RunAutomaton, t_RunAutomaton, RunAutomaton);

          void t_RunAutomaton::install(PyObject *module)
          {
            installType(&PY_TYPE(RunAutomaton), &PY_TYPE_DEF(RunAutomaton), module, "RunAutomaton", 0);
          }

          void t_RunAutomaton::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(RunAutomaton), "class_", make_descriptor(RunAutomaton::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RunAutomaton), "wrapfn_", make_descriptor(t_RunAutomaton::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RunAutomaton), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RunAutomaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RunAutomaton::initializeClass, 1)))
              return NULL;
            return t_RunAutomaton::wrap_Object(RunAutomaton(((t_RunAutomaton *) arg)->object.this$));
          }
          static PyObject *t_RunAutomaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RunAutomaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_RunAutomaton_equals(t_RunAutomaton *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(RunAutomaton), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_RunAutomaton_getCharIntervals(t_RunAutomaton *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.getCharIntervals());
            return result.wrap();
          }

          static PyObject *t_RunAutomaton_getSize(t_RunAutomaton *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_RunAutomaton_hashCode(t_RunAutomaton *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(RunAutomaton), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_RunAutomaton_isAccept(t_RunAutomaton *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.isAccept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isAccept", arg);
            return NULL;
          }

          static PyObject *t_RunAutomaton_ramBytesUsed(t_RunAutomaton *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_RunAutomaton_step(t_RunAutomaton *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.step(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "step", args);
            return NULL;
          }

          static PyObject *t_RunAutomaton_toString(t_RunAutomaton *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(RunAutomaton), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_RunAutomaton_get__charIntervals(t_RunAutomaton *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object.getCharIntervals());
            return value.wrap();
          }

          static PyObject *t_RunAutomaton_get__size(t_RunAutomaton *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/TermGroupFacetCollector.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/grouping/TermGroupFacetCollector.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *TermGroupFacetCollector::class$ = NULL;
          jmethodID *TermGroupFacetCollector::mids$ = NULL;
          bool TermGroupFacetCollector::live$ = false;

          jclass TermGroupFacetCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/TermGroupFacetCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_createTermGroupFacetCollector_afc3575d1fd29c13] = env->getStaticMethodID(cls, "createTermGroupFacetCollector", "(Ljava/lang/String;Ljava/lang/String;ZLorg/apache/lucene/util/BytesRef;I)Lorg/apache/lucene/search/grouping/TermGroupFacetCollector;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TermGroupFacetCollector TermGroupFacetCollector::createTermGroupFacetCollector(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2, const ::org::apache::lucene::util::BytesRef & a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return TermGroupFacetCollector(env->callStaticObjectMethod(cls, mids$[mid_createTermGroupFacetCollector_afc3575d1fd29c13], a0.this$, a1.this$, a2, a3.this$, a4));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_TermGroupFacetCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermGroupFacetCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermGroupFacetCollector_createTermGroupFacetCollector(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_TermGroupFacetCollector__methods_[] = {
            DECLARE_METHOD(t_TermGroupFacetCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermGroupFacetCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermGroupFacetCollector, createTermGroupFacetCollector, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TermGroupFacetCollector)[] = {
            { Py_tp_methods, t_TermGroupFacetCollector__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TermGroupFacetCollector)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::grouping::GroupFacetCollector),
            NULL
          };

          DEFINE_TYPE(TermGroupFacetCollector, t_TermGroupFacetCollector, TermGroupFacetCollector);

          void t_TermGroupFacetCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(TermGroupFacetCollector), &PY_TYPE_DEF(TermGroupFacetCollector), module, "TermGroupFacetCollector", 0);
          }

          void t_TermGroupFacetCollector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermGroupFacetCollector), "class_", make_descriptor(TermGroupFacetCollector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermGroupFacetCollector), "wrapfn_", make_descriptor(t_TermGroupFacetCollector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermGroupFacetCollector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermGroupFacetCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermGroupFacetCollector::initializeClass, 1)))
              return NULL;
            return t_TermGroupFacetCollector::wrap_Object(TermGroupFacetCollector(((t_TermGroupFacetCollector *) arg)->object.this$));
          }
          static PyObject *t_TermGroupFacetCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermGroupFacetCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TermGroupFacetCollector_createTermGroupFacetCollector(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jboolean a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
            jint a4;
            TermGroupFacetCollector result((jobject) NULL);

            if (!parseArgs(args, "ssZkI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::grouping::TermGroupFacetCollector::createTermGroupFacetCollector(a0, a1, a2, a3, a4));
              return t_TermGroupFacetCollector::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "createTermGroupFacetCollector", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiTerms.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiTerms::class$ = NULL;
        jmethodID *MultiTerms::mids$ = NULL;
        bool MultiTerms::live$ = false;

        jclass MultiTerms::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiTerms");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_bd9f3e87f7844b8f] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/Terms;[Lorg/apache/lucene/index/ReaderSlice;)V");
            mids$[mid_getDocCount_9972fcc56b44e79d] = env->getMethodID(cls, "getDocCount", "()I");
            mids$[mid_getMax_7af2ea2e37ce82b8] = env->getMethodID(cls, "getMax", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getMin_7af2ea2e37ce82b8] = env->getMethodID(cls, "getMin", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSubSlices_de4835eeab049e85] = env->getMethodID(cls, "getSubSlices", "()[Lorg/apache/lucene/index/ReaderSlice;");
            mids$[mid_getSubTerms_2ef2d2f5db3e1a35] = env->getMethodID(cls, "getSubTerms", "()[Lorg/apache/lucene/index/Terms;");
            mids$[mid_getSumDocFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "getSumDocFreq", "()J");
            mids$[mid_getSumTotalTermFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
            mids$[mid_getTermPostingsEnum_a34afe7cb9819d94] = env->getStaticMethodID(cls, "getTermPostingsEnum", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/PostingsEnum;");
            mids$[mid_getTermPostingsEnum_e92505bbdef91c61] = env->getStaticMethodID(cls, "getTermPostingsEnum", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;I)Lorg/apache/lucene/index/PostingsEnum;");
            mids$[mid_getTerms_ac193a0ff9bfa681] = env->getStaticMethodID(cls, "getTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
            mids$[mid_hasFreqs_8454bd5aa23fd11e] = env->getMethodID(cls, "hasFreqs", "()Z");
            mids$[mid_hasOffsets_8454bd5aa23fd11e] = env->getMethodID(cls, "hasOffsets", "()Z");
            mids$[mid_hasPayloads_8454bd5aa23fd11e] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasPositions_8454bd5aa23fd11e] = env->getMethodID(cls, "hasPositions", "()Z");
            mids$[mid_intersect_20ab83ddd033f0a8] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_iterator_3f9a21827903a65f] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_size_2e5ae9edcb9b072f] = env->getMethodID(cls, "size", "()J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTerms::MultiTerms(const JArray< ::org::apache::lucene::index::Terms > & a0, const JArray< ::org::apache::lucene::index::ReaderSlice > & a1) : ::org::apache::lucene::index::Terms(env->newObject(initializeClass, &mids$, mid_init$_bd9f3e87f7844b8f, a0.this$, a1.this$)) {}

        jint MultiTerms::getDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::util::BytesRef MultiTerms::getMax() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMax_7af2ea2e37ce82b8]));
        }

        ::org::apache::lucene::util::BytesRef MultiTerms::getMin() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMin_7af2ea2e37ce82b8]));
        }

        JArray< ::org::apache::lucene::index::ReaderSlice > MultiTerms::getSubSlices() const
        {
          return JArray< ::org::apache::lucene::index::ReaderSlice >(env->callObjectMethod(this$, mids$[mid_getSubSlices_de4835eeab049e85]));
        }

        JArray< ::org::apache::lucene::index::Terms > MultiTerms::getSubTerms() const
        {
          return JArray< ::org::apache::lucene::index::Terms >(env->callObjectMethod(this$, mids$[mid_getSubTerms_2ef2d2f5db3e1a35]));
        }

        jlong MultiTerms::getSumDocFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_2e5ae9edcb9b072f]);
        }

        jlong MultiTerms::getSumTotalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::index::PostingsEnum MultiTerms::getTermPostingsEnum(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::util::BytesRef & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::PostingsEnum(env->callStaticObjectMethod(cls, mids$[mid_getTermPostingsEnum_a34afe7cb9819d94], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::index::PostingsEnum MultiTerms::getTermPostingsEnum(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::util::BytesRef & a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::PostingsEnum(env->callStaticObjectMethod(cls, mids$[mid_getTermPostingsEnum_e92505bbdef91c61], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::index::Terms MultiTerms::getTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::Terms(env->callStaticObjectMethod(cls, mids$[mid_getTerms_ac193a0ff9bfa681], a0.this$, a1.this$));
        }

        jboolean MultiTerms::hasFreqs() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFreqs_8454bd5aa23fd11e]);
        }

        jboolean MultiTerms::hasOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasOffsets_8454bd5aa23fd11e]);
        }

        jboolean MultiTerms::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_8454bd5aa23fd11e]);
        }

        jboolean MultiTerms::hasPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPositions_8454bd5aa23fd11e]);
        }

        ::org::apache::lucene::index::TermsEnum MultiTerms::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_20ab83ddd033f0a8], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::TermsEnum MultiTerms::iterator() const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_3f9a21827903a65f]));
        }

        jlong MultiTerms::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiTerms_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTerms_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiTerms_init_(t_MultiTerms *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTerms_getDocCount(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getMax(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getMin(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getSubSlices(t_MultiTerms *self);
        static PyObject *t_MultiTerms_getSubTerms(t_MultiTerms *self);
        static PyObject *t_MultiTerms_getSumDocFreq(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getSumTotalTermFreq(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getTermPostingsEnum(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiTerms_getTerms(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiTerms_hasFreqs(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_hasOffsets(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_hasPayloads(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_hasPositions(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_intersect(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_iterator(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_size(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_get__docCount(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__max(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__min(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__subSlices(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__subTerms(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__sumDocFreq(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__sumTotalTermFreq(t_MultiTerms *self, void *data);
        static PyGetSetDef t_MultiTerms__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTerms, docCount),
          DECLARE_GET_FIELD(t_MultiTerms, max),
          DECLARE_GET_FIELD(t_MultiTerms, min),
          DECLARE_GET_FIELD(t_MultiTerms, subSlices),
          DECLARE_GET_FIELD(t_MultiTerms, subTerms),
          DECLARE_GET_FIELD(t_MultiTerms, sumDocFreq),
          DECLARE_GET_FIELD(t_MultiTerms, sumTotalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTerms__methods_[] = {
          DECLARE_METHOD(t_MultiTerms, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTerms, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTerms, getDocCount, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getMax, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getMin, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getSubSlices, METH_NOARGS),
          DECLARE_METHOD(t_MultiTerms, getSubTerms, METH_NOARGS),
          DECLARE_METHOD(t_MultiTerms, getSumDocFreq, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getSumTotalTermFreq, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getTermPostingsEnum, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiTerms, getTerms, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiTerms, hasFreqs, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, hasOffsets, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, hasPayloads, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, hasPositions, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, intersect, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, iterator, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, size, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiTerms)[] = {
          { Py_tp_methods, t_MultiTerms__methods_ },
          { Py_tp_init, (void *) t_MultiTerms_init_ },
          { Py_tp_getset, t_MultiTerms__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiTerms)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::Terms),
          NULL
        };

        DEFINE_TYPE(MultiTerms, t_MultiTerms, MultiTerms);

        void t_MultiTerms::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTerms), &PY_TYPE_DEF(MultiTerms), module, "MultiTerms", 0);
        }

        void t_MultiTerms::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTerms), "class_", make_descriptor(MultiTerms::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTerms), "wrapfn_", make_descriptor(t_MultiTerms::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTerms), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTerms_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTerms::initializeClass, 1)))
            return NULL;
          return t_MultiTerms::wrap_Object(MultiTerms(((t_MultiTerms *) arg)->object.this$));
        }
        static PyObject *t_MultiTerms_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTerms::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiTerms_init_(t_MultiTerms *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::Terms > a0((jobject) NULL);
          JArray< ::org::apache::lucene::index::ReaderSlice > a1((jobject) NULL);
          MultiTerms object((jobject) NULL);

          if (!parseArgs(args, "[k[k", ::org::apache::lucene::index::Terms::initializeClass, ::org::apache::lucene::index::ReaderSlice::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MultiTerms(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiTerms_getDocCount(t_MultiTerms *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getDocCount());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MultiTerms), (PyObject *) self, "getDocCount", args, 2);
        }

        static PyObject *t_MultiTerms_getMax(t_MultiTerms *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMax());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MultiTerms), (PyObject *) self, "getMax", args, 2);
        }

        static PyObject *t_MultiTerms_getMin(t_MultiTerms *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMin());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MultiTerms), (PyObject *) self, "getMin", args, 2);
        }

        static PyObject *t_MultiTerms_getSubSlices(t_MultiTerms *self)
        {
          JArray< ::org::apache::lucene::index::ReaderSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubSlices());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_ReaderSlice::wrap_jobject);
        }

        static PyObject *t_MultiTerms_getSubTerms(t_MultiTerms *self)
        {
          JArray< ::org::apache::lucene::index::Terms > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubTerms());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_Terms::wrap_jobject);
        }

        static PyObject *t_MultiTerms_getSumDocFreq(t_MultiTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSumDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(MultiTerms), (PyObject *) self, "getSumDocFreq", args, 2);
        }

        static PyObject *t_MultiTerms_getSumTotalTermFreq(t_MultiTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(MultiTerms), (PyObject *) self, "getSumTotalTermFreq", args, 2);
        }

        static PyObject *t_MultiTerms_getTermPostingsEnum(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
              ::org::apache::lucene::index::PostingsEnum result((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::MultiTerms::getTermPostingsEnum(a0, a1, a2));
                return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::index::PostingsEnum result((jobject) NULL);

              if (!parseArgs(args, "kskI", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::MultiTerms::getTermPostingsEnum(a0, a1, a2, a3));
                return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "getTermPostingsEnum", args);
          return NULL;
        }

        static PyObject *t_MultiTerms_getTerms(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiTerms::getTerms(a0, a1));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getTerms", args);
          return NULL;
        }

        static PyObject *t_MultiTerms_hasFreqs(t_MultiTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasFreqs());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(MultiTerms), (PyObject *) self, "hasFreqs", args, 2);
        }

        static PyObject *t_MultiTerms_hasOffsets(t_MultiTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasOffsets());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(MultiTerms), (PyObject *) self, "hasOffsets", args, 2);
        }

        static PyObject *t_MultiTerms_hasPayloads(t_MultiTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(MultiTerms), (PyObject *) self, "hasPayloads", args, 2);
        }

        static PyObject *t_MultiTerms_hasPositions(t_MultiTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasPositions());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(MultiTerms), (PyObject *) self, "hasPositions", args, 2);
        }

        static PyObject *t_MultiTerms_intersect(t_MultiTerms *self, PyObject *args)
        {
          ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.intersect(a0, a1));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MultiTerms), (PyObject *) self, "intersect", args, 2);
        }

        static PyObject *t_MultiTerms_iterator(t_MultiTerms *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MultiTerms), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_MultiTerms_size(t_MultiTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(MultiTerms), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_MultiTerms_get__docCount(t_MultiTerms *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDocCount());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_MultiTerms_get__max(t_MultiTerms *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getMax());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_MultiTerms_get__min(t_MultiTerms *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getMin());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_MultiTerms_get__subSlices(t_MultiTerms *self, void *data)
        {
          JArray< ::org::apache::lucene::index::ReaderSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubSlices());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_ReaderSlice::wrap_jobject);
        }

        static PyObject *t_MultiTerms_get__subTerms(t_MultiTerms *self, void *data)
        {
          JArray< ::org::apache::lucene::index::Terms > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubTerms());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_Terms::wrap_jobject);
        }

        static PyObject *t_MultiTerms_get__sumDocFreq(t_MultiTerms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_MultiTerms_get__sumTotalTermFreq(t_MultiTerms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier.h"
#include "java/lang/CharSequence.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ModifierQueryNode::class$ = NULL;
              jmethodID *ModifierQueryNode::mids$ = NULL;
              bool ModifierQueryNode::live$ = false;

              jclass ModifierQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_3dc2b67c19b336d1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;)V");
                  mids$[mid_cloneTree_7f4134ae4682ace0] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_7f4134ae4682ace0] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getModifier_19c2ffd39e124f1c] = env->getMethodID(cls, "getModifier", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;");
                  mids$[mid_setChild_f80bf4f68564485e] = env->getMethodID(cls, "setChild", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ModifierQueryNode::ModifierQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier & a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_3dc2b67c19b336d1, a0.this$, a1.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode ModifierQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_7f4134ae4682ace0]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode ModifierQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_7f4134ae4682ace0]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier ModifierQueryNode::getModifier() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier(env->callObjectMethod(this$, mids$[mid_getModifier_19c2ffd39e124f1c]));
              }

              void ModifierQueryNode::setChild(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setChild_f80bf4f68564485e], a0.this$);
              }

              ::java::lang::CharSequence ModifierQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String ModifierQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ModifierQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ModifierQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ModifierQueryNode_init_(t_ModifierQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_ModifierQueryNode_cloneTree(t_ModifierQueryNode *self, PyObject *args);
              static PyObject *t_ModifierQueryNode_getChild(t_ModifierQueryNode *self);
              static PyObject *t_ModifierQueryNode_getModifier(t_ModifierQueryNode *self);
              static PyObject *t_ModifierQueryNode_setChild(t_ModifierQueryNode *self, PyObject *arg);
              static PyObject *t_ModifierQueryNode_toQueryString(t_ModifierQueryNode *self, PyObject *args);
              static PyObject *t_ModifierQueryNode_toString(t_ModifierQueryNode *self, PyObject *args);
              static PyObject *t_ModifierQueryNode_get__child(t_ModifierQueryNode *self, void *data);
              static int t_ModifierQueryNode_set__child(t_ModifierQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_ModifierQueryNode_get__modifier(t_ModifierQueryNode *self, void *data);
              static PyGetSetDef t_ModifierQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_ModifierQueryNode, child),
                DECLARE_GET_FIELD(t_ModifierQueryNode, modifier),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ModifierQueryNode__methods_[] = {
                DECLARE_METHOD(t_ModifierQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_ModifierQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_ModifierQueryNode, getModifier, METH_NOARGS),
                DECLARE_METHOD(t_ModifierQueryNode, setChild, METH_O),
                DECLARE_METHOD(t_ModifierQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_ModifierQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(ModifierQueryNode)[] = {
                { Py_tp_methods, t_ModifierQueryNode__methods_ },
                { Py_tp_init, (void *) t_ModifierQueryNode_init_ },
                { Py_tp_getset, t_ModifierQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(ModifierQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl),
                NULL
              };

              DEFINE_TYPE(ModifierQueryNode, t_ModifierQueryNode, ModifierQueryNode);

              void t_ModifierQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(ModifierQueryNode), &PY_TYPE_DEF(ModifierQueryNode), module, "ModifierQueryNode", 0);
                PyObject_SetAttrString((PyObject *) PY_TYPE(ModifierQueryNode), "Modifier", make_descriptor(&PY_TYPE_DEF(ModifierQueryNode$Modifier)));
              }

              void t_ModifierQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(ModifierQueryNode), "class_", make_descriptor(ModifierQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ModifierQueryNode), "wrapfn_", make_descriptor(t_ModifierQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ModifierQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ModifierQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ModifierQueryNode::initializeClass, 1)))
                  return NULL;
                return t_ModifierQueryNode::wrap_Object(ModifierQueryNode(((t_ModifierQueryNode *) arg)->object.this$));
              }
              static PyObject *t_ModifierQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ModifierQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ModifierQueryNode_init_(t_ModifierQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier a1((jobject) NULL);
                PyTypeObject **p1;
                ModifierQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::parameters_))
                {
                  INT_CALL(object = ModifierQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_ModifierQueryNode_cloneTree(t_ModifierQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(ModifierQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_ModifierQueryNode_getChild(t_ModifierQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_ModifierQueryNode_getModifier(t_ModifierQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier result((jobject) NULL);
                OBJ_CALL(result = self->object.getModifier());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::wrap_Object(result);
              }

              static PyObject *t_ModifierQueryNode_setChild(t_ModifierQueryNode *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setChild(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setChild", arg);
                return NULL;
              }

              static PyObject *t_ModifierQueryNode_toQueryString(t_ModifierQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(ModifierQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_ModifierQueryNode_toString(t_ModifierQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(ModifierQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_ModifierQueryNode_get__child(t_ModifierQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }
              static int t_ModifierQueryNode_set__child(t_ModifierQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &value))
                  {
                    INT_CALL(self->object.setChild(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "child", arg);
                return -1;
              }

              static PyObject *t_ModifierQueryNode_get__modifier(t_ModifierQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier value((jobject) NULL);
                OBJ_CALL(value = self->object.getModifier());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/SimpleFSLockFactory.h"
#include "org/apache/lucene/store/SimpleFSLockFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *SimpleFSLockFactory::class$ = NULL;
        jmethodID *SimpleFSLockFactory::mids$ = NULL;
        bool SimpleFSLockFactory::live$ = false;
        SimpleFSLockFactory *SimpleFSLockFactory::INSTANCE = NULL;

        jclass SimpleFSLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/SimpleFSLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_obtainFSLock_6e0f096ad0a821f7] = env->getMethodID(cls, "obtainFSLock", "(Lorg/apache/lucene/store/FSDirectory;Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            INSTANCE = new SimpleFSLockFactory(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/store/SimpleFSLockFactory;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_SimpleFSLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleFSLockFactory_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_SimpleFSLockFactory__methods_[] = {
          DECLARE_METHOD(t_SimpleFSLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleFSLockFactory, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SimpleFSLockFactory)[] = {
          { Py_tp_methods, t_SimpleFSLockFactory__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SimpleFSLockFactory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::FSLockFactory),
          NULL
        };

        DEFINE_TYPE(SimpleFSLockFactory, t_SimpleFSLockFactory, SimpleFSLockFactory);

        void t_SimpleFSLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleFSLockFactory), &PY_TYPE_DEF(SimpleFSLockFactory), module, "SimpleFSLockFactory", 0);
        }

        void t_SimpleFSLockFactory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFSLockFactory), "class_", make_descriptor(SimpleFSLockFactory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFSLockFactory), "wrapfn_", make_descriptor(t_SimpleFSLockFactory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFSLockFactory), "boxfn_", make_descriptor(boxObject));
          env->getClass(SimpleFSLockFactory::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFSLockFactory), "INSTANCE", make_descriptor(t_SimpleFSLockFactory::wrap_Object(*SimpleFSLockFactory::INSTANCE)));
        }

        static PyObject *t_SimpleFSLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleFSLockFactory::initializeClass, 1)))
            return NULL;
          return t_SimpleFSLockFactory::wrap_Object(SimpleFSLockFactory(((t_SimpleFSLockFactory *) arg)->object.this$));
        }
        static PyObject *t_SimpleFSLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleFSLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/HungarianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *HungarianStemmer::class$ = NULL;
        jmethodID *HungarianStemmer::mids$ = NULL;
        bool HungarianStemmer::live$ = false;

        jclass HungarianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/HungarianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        HungarianStemmer::HungarianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean HungarianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint HungarianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean HungarianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_HungarianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_HungarianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_HungarianStemmer_init_(t_HungarianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_HungarianStemmer_equals(t_HungarianStemmer *self, PyObject *args);
        static PyObject *t_HungarianStemmer_hashCode(t_HungarianStemmer *self, PyObject *args);
        static PyObject *t_HungarianStemmer_stem(t_HungarianStemmer *self, PyObject *args);

        static PyMethodDef t_HungarianStemmer__methods_[] = {
          DECLARE_METHOD(t_HungarianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HungarianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HungarianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_HungarianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_HungarianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(HungarianStemmer)[] = {
          { Py_tp_methods, t_HungarianStemmer__methods_ },
          { Py_tp_init, (void *) t_HungarianStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(HungarianStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(HungarianStemmer, t_HungarianStemmer, HungarianStemmer);

        void t_HungarianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(HungarianStemmer), &PY_TYPE_DEF(HungarianStemmer), module, "HungarianStemmer", 0);
        }

        void t_HungarianStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(HungarianStemmer), "class_", make_descriptor(HungarianStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(HungarianStemmer), "wrapfn_", make_descriptor(t_HungarianStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(HungarianStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_HungarianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, HungarianStemmer::initializeClass, 1)))
            return NULL;
          return t_HungarianStemmer::wrap_Object(HungarianStemmer(((t_HungarianStemmer *) arg)->object.this$));
        }
        static PyObject *t_HungarianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, HungarianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_HungarianStemmer_init_(t_HungarianStemmer *self, PyObject *args, PyObject *kwds)
        {
          HungarianStemmer object((jobject) NULL);

          INT_CALL(object = HungarianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_HungarianStemmer_equals(t_HungarianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(HungarianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_HungarianStemmer_hashCode(t_HungarianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(HungarianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_HungarianStemmer_stem(t_HungarianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(HungarianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/PrefixWildcardQueryNodeBuilder.h"
#include "org/apache/lucene/search/PrefixQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *PrefixWildcardQueryNodeBuilder::class$ = NULL;
              jmethodID *PrefixWildcardQueryNodeBuilder::mids$ = NULL;
              bool PrefixWildcardQueryNodeBuilder::live$ = false;

              jclass PrefixWildcardQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/PrefixWildcardQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_4bd622da3242b62d] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/PrefixQuery;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PrefixWildcardQueryNodeBuilder::PrefixWildcardQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::search::PrefixQuery PrefixWildcardQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::PrefixQuery(env->callObjectMethod(this$, mids$[mid_build_4bd622da3242b62d], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_PrefixWildcardQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PrefixWildcardQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PrefixWildcardQueryNodeBuilder_init_(t_PrefixWildcardQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PrefixWildcardQueryNodeBuilder_build(t_PrefixWildcardQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_PrefixWildcardQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_PrefixWildcardQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrefixWildcardQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrefixWildcardQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(PrefixWildcardQueryNodeBuilder)[] = {
                { Py_tp_methods, t_PrefixWildcardQueryNodeBuilder__methods_ },
                { Py_tp_init, (void *) t_PrefixWildcardQueryNodeBuilder_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(PrefixWildcardQueryNodeBuilder)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(PrefixWildcardQueryNodeBuilder, t_PrefixWildcardQueryNodeBuilder, PrefixWildcardQueryNodeBuilder);

              void t_PrefixWildcardQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(PrefixWildcardQueryNodeBuilder), &PY_TYPE_DEF(PrefixWildcardQueryNodeBuilder), module, "PrefixWildcardQueryNodeBuilder", 0);
              }

              void t_PrefixWildcardQueryNodeBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixWildcardQueryNodeBuilder), "class_", make_descriptor(PrefixWildcardQueryNodeBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixWildcardQueryNodeBuilder), "wrapfn_", make_descriptor(t_PrefixWildcardQueryNodeBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixWildcardQueryNodeBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PrefixWildcardQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PrefixWildcardQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_PrefixWildcardQueryNodeBuilder::wrap_Object(PrefixWildcardQueryNodeBuilder(((t_PrefixWildcardQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_PrefixWildcardQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PrefixWildcardQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PrefixWildcardQueryNodeBuilder_init_(t_PrefixWildcardQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                PrefixWildcardQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = PrefixWildcardQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_PrefixWildcardQueryNodeBuilder_build(t_PrefixWildcardQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::PrefixQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_PrefixQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/HardlinkCopyDirectoryWrapper.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *HardlinkCopyDirectoryWrapper::class$ = NULL;
        jmethodID *HardlinkCopyDirectoryWrapper::mids$ = NULL;
        bool HardlinkCopyDirectoryWrapper::live$ = false;

        jclass HardlinkCopyDirectoryWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/HardlinkCopyDirectoryWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c51fd9fb1cf0392d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_copyFrom_a0726436aec3a466] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        HardlinkCopyDirectoryWrapper::HardlinkCopyDirectoryWrapper(const ::org::apache::lucene::store::Directory & a0) : ::org::apache::lucene::store::FilterDirectory(env->newObject(initializeClass, &mids$, mid_init$_c51fd9fb1cf0392d, a0.this$)) {}

        void HardlinkCopyDirectoryWrapper::copyFrom(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_copyFrom_a0726436aec3a466], a0.this$, a1.this$, a2.this$, a3.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_HardlinkCopyDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_HardlinkCopyDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static int t_HardlinkCopyDirectoryWrapper_init_(t_HardlinkCopyDirectoryWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_HardlinkCopyDirectoryWrapper_copyFrom(t_HardlinkCopyDirectoryWrapper *self, PyObject *args);

        static PyMethodDef t_HardlinkCopyDirectoryWrapper__methods_[] = {
          DECLARE_METHOD(t_HardlinkCopyDirectoryWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HardlinkCopyDirectoryWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HardlinkCopyDirectoryWrapper, copyFrom, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(HardlinkCopyDirectoryWrapper)[] = {
          { Py_tp_methods, t_HardlinkCopyDirectoryWrapper__methods_ },
          { Py_tp_init, (void *) t_HardlinkCopyDirectoryWrapper_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(HardlinkCopyDirectoryWrapper)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::FilterDirectory),
          NULL
        };

        DEFINE_TYPE(HardlinkCopyDirectoryWrapper, t_HardlinkCopyDirectoryWrapper, HardlinkCopyDirectoryWrapper);

        void t_HardlinkCopyDirectoryWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(HardlinkCopyDirectoryWrapper), &PY_TYPE_DEF(HardlinkCopyDirectoryWrapper), module, "HardlinkCopyDirectoryWrapper", 0);
        }

        void t_HardlinkCopyDirectoryWrapper::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(HardlinkCopyDirectoryWrapper), "class_", make_descriptor(HardlinkCopyDirectoryWrapper::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(HardlinkCopyDirectoryWrapper), "wrapfn_", make_descriptor(t_HardlinkCopyDirectoryWrapper::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(HardlinkCopyDirectoryWrapper), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_HardlinkCopyDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, HardlinkCopyDirectoryWrapper::initializeClass, 1)))
            return NULL;
          return t_HardlinkCopyDirectoryWrapper::wrap_Object(HardlinkCopyDirectoryWrapper(((t_HardlinkCopyDirectoryWrapper *) arg)->object.this$));
        }
        static PyObject *t_HardlinkCopyDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, HardlinkCopyDirectoryWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_HardlinkCopyDirectoryWrapper_init_(t_HardlinkCopyDirectoryWrapper *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          HardlinkCopyDirectoryWrapper object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            INT_CALL(object = HardlinkCopyDirectoryWrapper(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_HardlinkCopyDirectoryWrapper_copyFrom(t_HardlinkCopyDirectoryWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);

          if (!parseArgs(args, "kssk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.copyFrom(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(HardlinkCopyDirectoryWrapper), (PyObject *) self, "copyFrom", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeTrigger::class$ = NULL;
        jmethodID *MergeTrigger::mids$ = NULL;
        bool MergeTrigger::live$ = false;
        MergeTrigger *MergeTrigger::CLOSING = NULL;
        MergeTrigger *MergeTrigger::COMMIT = NULL;
        MergeTrigger *MergeTrigger::EXPLICIT = NULL;
        MergeTrigger *MergeTrigger::FULL_FLUSH = NULL;
        MergeTrigger *MergeTrigger::GET_READER = NULL;
        MergeTrigger *MergeTrigger::MERGE_FINISHED = NULL;
        MergeTrigger *MergeTrigger::SEGMENT_FLUSH = NULL;

        jclass MergeTrigger::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeTrigger");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_aee4c9132eff43b3] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/MergeTrigger;");
            mids$[mid_values_4367128e2a231fa9] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/MergeTrigger;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            CLOSING = new MergeTrigger(env->getStaticObjectField(cls, "CLOSING", "Lorg/apache/lucene/index/MergeTrigger;"));
            COMMIT = new MergeTrigger(env->getStaticObjectField(cls, "COMMIT", "Lorg/apache/lucene/index/MergeTrigger;"));
            EXPLICIT = new MergeTrigger(env->getStaticObjectField(cls, "EXPLICIT", "Lorg/apache/lucene/index/MergeTrigger;"));
            FULL_FLUSH = new MergeTrigger(env->getStaticObjectField(cls, "FULL_FLUSH", "Lorg/apache/lucene/index/MergeTrigger;"));
            GET_READER = new MergeTrigger(env->getStaticObjectField(cls, "GET_READER", "Lorg/apache/lucene/index/MergeTrigger;"));
            MERGE_FINISHED = new MergeTrigger(env->getStaticObjectField(cls, "MERGE_FINISHED", "Lorg/apache/lucene/index/MergeTrigger;"));
            SEGMENT_FLUSH = new MergeTrigger(env->getStaticObjectField(cls, "SEGMENT_FLUSH", "Lorg/apache/lucene/index/MergeTrigger;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergeTrigger MergeTrigger::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return MergeTrigger(env->callStaticObjectMethod(cls, mids$[mid_valueOf_aee4c9132eff43b3], a0.this$));
        }

        JArray< MergeTrigger > MergeTrigger::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< MergeTrigger >(env->callStaticObjectMethod(cls, mids$[mid_values_4367128e2a231fa9]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeTrigger_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeTrigger_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeTrigger_of_(t_MergeTrigger *self, PyObject *args);
        static PyObject *t_MergeTrigger_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_MergeTrigger_values(PyTypeObject *type);
        static PyObject *t_MergeTrigger_get__parameters_(t_MergeTrigger *self, void *data);
        static PyGetSetDef t_MergeTrigger__fields_[] = {
          DECLARE_GET_FIELD(t_MergeTrigger, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergeTrigger__methods_[] = {
          DECLARE_METHOD(t_MergeTrigger, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeTrigger, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeTrigger, of_, METH_VARARGS),
          DECLARE_METHOD(t_MergeTrigger, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MergeTrigger, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MergeTrigger)[] = {
          { Py_tp_methods, t_MergeTrigger__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_MergeTrigger__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MergeTrigger)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(MergeTrigger, t_MergeTrigger, MergeTrigger);
        PyObject *t_MergeTrigger::wrap_Object(const MergeTrigger& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergeTrigger::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergeTrigger *self = (t_MergeTrigger *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MergeTrigger::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergeTrigger::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergeTrigger *self = (t_MergeTrigger *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MergeTrigger::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeTrigger), &PY_TYPE_DEF(MergeTrigger), module, "MergeTrigger", 0);
        }

        void t_MergeTrigger::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeTrigger), "class_", make_descriptor(MergeTrigger::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeTrigger), "wrapfn_", make_descriptor(t_MergeTrigger::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeTrigger), "boxfn_", make_descriptor(boxObject));
          env->getClass(MergeTrigger::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeTrigger), "CLOSING", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::CLOSING)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeTrigger), "COMMIT", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::COMMIT)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeTrigger), "EXPLICIT", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::EXPLICIT)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeTrigger), "FULL_FLUSH", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::FULL_FLUSH)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeTrigger), "GET_READER", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::GET_READER)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeTrigger), "MERGE_FINISHED", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::MERGE_FINISHED)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeTrigger), "SEGMENT_FLUSH", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::SEGMENT_FLUSH)));
        }

        static PyObject *t_MergeTrigger_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeTrigger::initializeClass, 1)))
            return NULL;
          return t_MergeTrigger::wrap_Object(MergeTrigger(((t_MergeTrigger *) arg)->object.this$));
        }
        static PyObject *t_MergeTrigger_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeTrigger::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergeTrigger_of_(t_MergeTrigger *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_MergeTrigger_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          MergeTrigger result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MergeTrigger::valueOf(a0));
            return t_MergeTrigger::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_MergeTrigger_values(PyTypeObject *type)
        {
          JArray< MergeTrigger > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::MergeTrigger::values());
          return JArray<jobject>(result.this$).wrap(t_MergeTrigger::wrap_jobject);
        }
        static PyObject *t_MergeTrigger_get__parameters_(t_MergeTrigger *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat$SimpleTextNormsProducer.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {

          ::java::lang::Class *SimpleTextNormsFormat$SimpleTextNormsProducer::class$ = NULL;
          jmethodID *SimpleTextNormsFormat$SimpleTextNormsProducer::mids$ = NULL;
          bool SimpleTextNormsFormat$SimpleTextNormsProducer::live$ = false;

          jclass SimpleTextNormsFormat$SimpleTextNormsProducer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat$SimpleTextNormsProducer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_363fedc32cc1a1cf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentReadState;)V");
              mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
              mids$[mid_getNorms_d63b818fc8746ddc] = env->getMethodID(cls, "getNorms", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/NumericDocValues;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleTextNormsFormat$SimpleTextNormsProducer::SimpleTextNormsFormat$SimpleTextNormsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) : ::org::apache::lucene::codecs::NormsProducer(env->newObject(initializeClass, &mids$, mid_init$_363fedc32cc1a1cf, a0.this$)) {}

          void SimpleTextNormsFormat$SimpleTextNormsProducer::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
          }

          void SimpleTextNormsFormat$SimpleTextNormsProducer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          ::java::util::Collection SimpleTextNormsFormat$SimpleTextNormsProducer::getChildResources() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
          }

          ::org::apache::lucene::index::NumericDocValues SimpleTextNormsFormat$SimpleTextNormsProducer::getNorms(const ::org::apache::lucene::index::FieldInfo & a0) const
          {
            return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNorms_d63b818fc8746ddc], a0.this$));
          }

          jlong SimpleTextNormsFormat$SimpleTextNormsProducer::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          ::java::lang::String SimpleTextNormsFormat$SimpleTextNormsProducer::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {
          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsProducer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsProducer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleTextNormsFormat$SimpleTextNormsProducer_init_(t_SimpleTextNormsFormat$SimpleTextNormsProducer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsProducer_checkIntegrity(t_SimpleTextNormsFormat$SimpleTextNormsProducer *self, PyObject *args);
          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsProducer_close(t_SimpleTextNormsFormat$SimpleTextNormsProducer *self, PyObject *args);
          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsProducer_getChildResources(t_SimpleTextNormsFormat$SimpleTextNormsProducer *self, PyObject *args);
          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsProducer_getNorms(t_SimpleTextNormsFormat$SimpleTextNormsProducer *self, PyObject *args);
          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsProducer_ramBytesUsed(t_SimpleTextNormsFormat$SimpleTextNormsProducer *self, PyObject *args);
          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsProducer_toString(t_SimpleTextNormsFormat$SimpleTextNormsProducer *self, PyObject *args);
          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsProducer_get__childResources(t_SimpleTextNormsFormat$SimpleTextNormsProducer *self, void *data);
          static PyGetSetDef t_SimpleTextNormsFormat$SimpleTextNormsProducer__fields_[] = {
            DECLARE_GET_FIELD(t_SimpleTextNormsFormat$SimpleTextNormsProducer, childResources),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SimpleTextNormsFormat$SimpleTextNormsProducer__methods_[] = {
            DECLARE_METHOD(t_SimpleTextNormsFormat$SimpleTextNormsProducer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextNormsFormat$SimpleTextNormsProducer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextNormsFormat$SimpleTextNormsProducer, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextNormsFormat$SimpleTextNormsProducer, close, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextNormsFormat$SimpleTextNormsProducer, getChildResources, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextNormsFormat$SimpleTextNormsProducer, getNorms, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextNormsFormat$SimpleTextNormsProducer, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextNormsFormat$SimpleTextNormsProducer, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleTextNormsFormat$SimpleTextNormsProducer)[] = {
            { Py_tp_methods, t_SimpleTextNormsFormat$SimpleTextNormsProducer__methods_ },
            { Py_tp_init, (void *) t_SimpleTextNormsFormat$SimpleTextNormsProducer_init_ },
            { Py_tp_getset, t_SimpleTextNormsFormat$SimpleTextNormsProducer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleTextNormsFormat$SimpleTextNormsProducer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::NormsProducer),
            NULL
          };

          DEFINE_TYPE(SimpleTextNormsFormat$SimpleTextNormsProducer, t_SimpleTextNormsFormat$SimpleTextNormsProducer, SimpleTextNormsFormat$SimpleTextNormsProducer);

          void t_SimpleTextNormsFormat$SimpleTextNormsProducer::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleTextNormsFormat$SimpleTextNormsProducer), &PY_TYPE_DEF(SimpleTextNormsFormat$SimpleTextNormsProducer), module, "SimpleTextNormsFormat$SimpleTextNormsProducer", 0);
          }

          void t_SimpleTextNormsFormat$SimpleTextNormsProducer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextNormsFormat$SimpleTextNormsProducer), "class_", make_descriptor(SimpleTextNormsFormat$SimpleTextNormsProducer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextNormsFormat$SimpleTextNormsProducer), "wrapfn_", make_descriptor(t_SimpleTextNormsFormat$SimpleTextNormsProducer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextNormsFormat$SimpleTextNormsProducer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsProducer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleTextNormsFormat$SimpleTextNormsProducer::initializeClass, 1)))
              return NULL;
            return t_SimpleTextNormsFormat$SimpleTextNormsProducer::wrap_Object(SimpleTextNormsFormat$SimpleTextNormsProducer(((t_SimpleTextNormsFormat$SimpleTextNormsProducer *) arg)->object.this$));
          }
          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsProducer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleTextNormsFormat$SimpleTextNormsProducer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleTextNormsFormat$SimpleTextNormsProducer_init_(t_SimpleTextNormsFormat$SimpleTextNormsProducer *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            SimpleTextNormsFormat$SimpleTextNormsProducer object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              INT_CALL(object = SimpleTextNormsFormat$SimpleTextNormsProducer(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsProducer_checkIntegrity(t_SimpleTextNormsFormat$SimpleTextNormsProducer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextNormsFormat$SimpleTextNormsProducer), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsProducer_close(t_SimpleTextNormsFormat$SimpleTextNormsProducer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextNormsFormat$SimpleTextNormsProducer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsProducer_getChildResources(t_SimpleTextNormsFormat$SimpleTextNormsProducer *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
            }

            return callSuper(PY_TYPE(SimpleTextNormsFormat$SimpleTextNormsProducer), (PyObject *) self, "getChildResources", args, 2);
          }

          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsProducer_getNorms(t_SimpleTextNormsFormat$SimpleTextNormsProducer *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getNorms(a0));
              return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextNormsFormat$SimpleTextNormsProducer), (PyObject *) self, "getNorms", args, 2);
          }

          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsProducer_ramBytesUsed(t_SimpleTextNormsFormat$SimpleTextNormsProducer *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(SimpleTextNormsFormat$SimpleTextNormsProducer), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsProducer_toString(t_SimpleTextNormsFormat$SimpleTextNormsProducer *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(SimpleTextNormsFormat$SimpleTextNormsProducer), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsProducer_get__childResources(t_SimpleTextNormsFormat$SimpleTextNormsProducer *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getChildResources());
            return ::java::util::t_Collection::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/FunctionScoreQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/queries/function/FunctionScoreQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/DoubleValuesSource.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *FunctionScoreQuery::class$ = NULL;
          jmethodID *FunctionScoreQuery::mids$ = NULL;
          bool FunctionScoreQuery::live$ = false;

          jclass FunctionScoreQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/FunctionScoreQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ea36782273c32d51] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/DoubleValuesSource;)V");
              mids$[mid_boostByQuery_b4687b4eea600b62] = env->getStaticMethodID(cls, "boostByQuery", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Query;F)Lorg/apache/lucene/queries/function/FunctionScoreQuery;");
              mids$[mid_boostByValue_b862fde5104a843e] = env->getStaticMethodID(cls, "boostByValue", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/DoubleValuesSource;)Lorg/apache/lucene/queries/function/FunctionScoreQuery;");
              mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getSource_ccca60747b1553ac] = env->getMethodID(cls, "getSource", "()Lorg/apache/lucene/search/DoubleValuesSource;");
              mids$[mid_getWrappedQuery_cbf839a480265450] = env->getMethodID(cls, "getWrappedQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FunctionScoreQuery::FunctionScoreQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::DoubleValuesSource & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_ea36782273c32d51, a0.this$, a1.this$)) {}

          FunctionScoreQuery FunctionScoreQuery::boostByQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Query & a1, jfloat a2)
          {
            jclass cls = env->getClass(initializeClass);
            return FunctionScoreQuery(env->callStaticObjectMethod(cls, mids$[mid_boostByQuery_b4687b4eea600b62], a0.this$, a1.this$, a2));
          }

          FunctionScoreQuery FunctionScoreQuery::boostByValue(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::DoubleValuesSource & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return FunctionScoreQuery(env->callStaticObjectMethod(cls, mids$[mid_boostByValue_b862fde5104a843e], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Weight FunctionScoreQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
          }

          jboolean FunctionScoreQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::org::apache::lucene::search::DoubleValuesSource FunctionScoreQuery::getSource() const
          {
            return ::org::apache::lucene::search::DoubleValuesSource(env->callObjectMethod(this$, mids$[mid_getSource_ccca60747b1553ac]));
          }

          ::org::apache::lucene::search::Query FunctionScoreQuery::getWrappedQuery() const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getWrappedQuery_cbf839a480265450]));
          }

          jint FunctionScoreQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::search::Query FunctionScoreQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
          }

          ::java::lang::String FunctionScoreQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }

          void FunctionScoreQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_FunctionScoreQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FunctionScoreQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FunctionScoreQuery_init_(t_FunctionScoreQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FunctionScoreQuery_boostByQuery(PyTypeObject *type, PyObject *args);
          static PyObject *t_FunctionScoreQuery_boostByValue(PyTypeObject *type, PyObject *args);
          static PyObject *t_FunctionScoreQuery_createWeight(t_FunctionScoreQuery *self, PyObject *args);
          static PyObject *t_FunctionScoreQuery_equals(t_FunctionScoreQuery *self, PyObject *args);
          static PyObject *t_FunctionScoreQuery_getSource(t_FunctionScoreQuery *self);
          static PyObject *t_FunctionScoreQuery_getWrappedQuery(t_FunctionScoreQuery *self);
          static PyObject *t_FunctionScoreQuery_hashCode(t_FunctionScoreQuery *self, PyObject *args);
          static PyObject *t_FunctionScoreQuery_rewrite(t_FunctionScoreQuery *self, PyObject *args);
          static PyObject *t_FunctionScoreQuery_toString(t_FunctionScoreQuery *self, PyObject *args);
          static PyObject *t_FunctionScoreQuery_visit(t_FunctionScoreQuery *self, PyObject *args);
          static PyObject *t_FunctionScoreQuery_get__source(t_FunctionScoreQuery *self, void *data);
          static PyObject *t_FunctionScoreQuery_get__wrappedQuery(t_FunctionScoreQuery *self, void *data);
          static PyGetSetDef t_FunctionScoreQuery__fields_[] = {
            DECLARE_GET_FIELD(t_FunctionScoreQuery, source),
            DECLARE_GET_FIELD(t_FunctionScoreQuery, wrappedQuery),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FunctionScoreQuery__methods_[] = {
            DECLARE_METHOD(t_FunctionScoreQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionScoreQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionScoreQuery, boostByQuery, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_FunctionScoreQuery, boostByValue, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_FunctionScoreQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_FunctionScoreQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_FunctionScoreQuery, getSource, METH_NOARGS),
            DECLARE_METHOD(t_FunctionScoreQuery, getWrappedQuery, METH_NOARGS),
            DECLARE_METHOD(t_FunctionScoreQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FunctionScoreQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_FunctionScoreQuery, toString, METH_VARARGS),
            DECLARE_METHOD(t_FunctionScoreQuery, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FunctionScoreQuery)[] = {
            { Py_tp_methods, t_FunctionScoreQuery__methods_ },
            { Py_tp_init, (void *) t_FunctionScoreQuery_init_ },
            { Py_tp_getset, t_FunctionScoreQuery__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FunctionScoreQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::Query),
            NULL
          };

          DEFINE_TYPE(FunctionScoreQuery, t_FunctionScoreQuery, FunctionScoreQuery);

          void t_FunctionScoreQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FunctionScoreQuery), &PY_TYPE_DEF(FunctionScoreQuery), module, "FunctionScoreQuery", 0);
          }

          void t_FunctionScoreQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FunctionScoreQuery), "class_", make_descriptor(FunctionScoreQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FunctionScoreQuery), "wrapfn_", make_descriptor(t_FunctionScoreQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FunctionScoreQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FunctionScoreQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FunctionScoreQuery::initializeClass, 1)))
              return NULL;
            return t_FunctionScoreQuery::wrap_Object(FunctionScoreQuery(((t_FunctionScoreQuery *) arg)->object.this$));
          }
          static PyObject *t_FunctionScoreQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FunctionScoreQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FunctionScoreQuery_init_(t_FunctionScoreQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::search::DoubleValuesSource a1((jobject) NULL);
            FunctionScoreQuery object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::DoubleValuesSource::initializeClass, &a0, &a1))
            {
              INT_CALL(object = FunctionScoreQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FunctionScoreQuery_boostByQuery(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::search::Query a1((jobject) NULL);
            jfloat a2;
            FunctionScoreQuery result((jobject) NULL);

            if (!parseArgs(args, "kkF", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::function::FunctionScoreQuery::boostByQuery(a0, a1, a2));
              return t_FunctionScoreQuery::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "boostByQuery", args);
            return NULL;
          }

          static PyObject *t_FunctionScoreQuery_boostByValue(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::search::DoubleValuesSource a1((jobject) NULL);
            FunctionScoreQuery result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::DoubleValuesSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::function::FunctionScoreQuery::boostByValue(a0, a1));
              return t_FunctionScoreQuery::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "boostByValue", args);
            return NULL;
          }

          static PyObject *t_FunctionScoreQuery_createWeight(t_FunctionScoreQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
            PyTypeObject **p1;
            jfloat a2;
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FunctionScoreQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_FunctionScoreQuery_equals(t_FunctionScoreQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FunctionScoreQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FunctionScoreQuery_getSource(t_FunctionScoreQuery *self)
          {
            ::org::apache::lucene::search::DoubleValuesSource result((jobject) NULL);
            OBJ_CALL(result = self->object.getSource());
            return ::org::apache::lucene::search::t_DoubleValuesSource::wrap_Object(result);
          }

          static PyObject *t_FunctionScoreQuery_getWrappedQuery(t_FunctionScoreQuery *self)
          {
            ::org::apache::lucene::search::Query result((jobject) NULL);
            OBJ_CALL(result = self->object.getWrappedQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          static PyObject *t_FunctionScoreQuery_hashCode(t_FunctionScoreQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FunctionScoreQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FunctionScoreQuery_rewrite(t_FunctionScoreQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FunctionScoreQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_FunctionScoreQuery_toString(t_FunctionScoreQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(FunctionScoreQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FunctionScoreQuery_visit(t_FunctionScoreQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FunctionScoreQuery), (PyObject *) self, "visit", args, 2);
          }

          static PyObject *t_FunctionScoreQuery_get__source(t_FunctionScoreQuery *self, void *data)
          {
            ::org::apache::lucene::search::DoubleValuesSource value((jobject) NULL);
            OBJ_CALL(value = self->object.getSource());
            return ::org::apache::lucene::search::t_DoubleValuesSource::wrap_Object(value);
          }

          static PyObject *t_FunctionScoreQuery_get__wrappedQuery(t_FunctionScoreQuery *self, void *data)
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            OBJ_CALL(value = self->object.getWrappedQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/JapaneseKatakanaStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {

          ::java::lang::Class *JapaneseKatakanaStemFilterFactory::class$ = NULL;
          jmethodID *JapaneseKatakanaStemFilterFactory::mids$ = NULL;
          bool JapaneseKatakanaStemFilterFactory::live$ = false;
          ::java::lang::String *JapaneseKatakanaStemFilterFactory::NAME = NULL;

          jclass JapaneseKatakanaStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/JapaneseKatakanaStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JapaneseKatakanaStemFilterFactory::JapaneseKatakanaStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream JapaneseKatakanaStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          static PyObject *t_JapaneseKatakanaStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JapaneseKatakanaStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JapaneseKatakanaStemFilterFactory_init_(t_JapaneseKatakanaStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JapaneseKatakanaStemFilterFactory_create(t_JapaneseKatakanaStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_JapaneseKatakanaStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_JapaneseKatakanaStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseKatakanaStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseKatakanaStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JapaneseKatakanaStemFilterFactory)[] = {
            { Py_tp_methods, t_JapaneseKatakanaStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_JapaneseKatakanaStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JapaneseKatakanaStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(JapaneseKatakanaStemFilterFactory, t_JapaneseKatakanaStemFilterFactory, JapaneseKatakanaStemFilterFactory);

          void t_JapaneseKatakanaStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(JapaneseKatakanaStemFilterFactory), &PY_TYPE_DEF(JapaneseKatakanaStemFilterFactory), module, "JapaneseKatakanaStemFilterFactory", 0);
          }

          void t_JapaneseKatakanaStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseKatakanaStemFilterFactory), "class_", make_descriptor(JapaneseKatakanaStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseKatakanaStemFilterFactory), "wrapfn_", make_descriptor(t_JapaneseKatakanaStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseKatakanaStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(JapaneseKatakanaStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseKatakanaStemFilterFactory), "NAME", make_descriptor(j2p(*JapaneseKatakanaStemFilterFactory::NAME)));
          }

          static PyObject *t_JapaneseKatakanaStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JapaneseKatakanaStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_JapaneseKatakanaStemFilterFactory::wrap_Object(JapaneseKatakanaStemFilterFactory(((t_JapaneseKatakanaStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_JapaneseKatakanaStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JapaneseKatakanaStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JapaneseKatakanaStemFilterFactory_init_(t_JapaneseKatakanaStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            JapaneseKatakanaStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = JapaneseKatakanaStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JapaneseKatakanaStemFilterFactory_create(t_JapaneseKatakanaStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(JapaneseKatakanaStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter$EveryNTermSelector.h"
#include "org/apache/lucene/codecs/TermStats.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {

          ::java::lang::Class *VariableGapTermsIndexWriter$EveryNTermSelector::class$ = NULL;
          jmethodID *VariableGapTermsIndexWriter$EveryNTermSelector::mids$ = NULL;
          bool VariableGapTermsIndexWriter$EveryNTermSelector::live$ = false;

          jclass VariableGapTermsIndexWriter$EveryNTermSelector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter$EveryNTermSelector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_isIndexTerm_b105bc98075287ea] = env->getMethodID(cls, "isIndexTerm", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/codecs/TermStats;)Z");
              mids$[mid_newField_747195a1c5ce5890] = env->getMethodID(cls, "newField", "(Lorg/apache/lucene/index/FieldInfo;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          VariableGapTermsIndexWriter$EveryNTermSelector::VariableGapTermsIndexWriter$EveryNTermSelector(jint a0) : ::org::apache::lucene::codecs::blockterms::VariableGapTermsIndexWriter$IndexTermSelector(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          jboolean VariableGapTermsIndexWriter$EveryNTermSelector::isIndexTerm(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::codecs::TermStats & a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIndexTerm_b105bc98075287ea], a0.this$, a1.this$);
          }

          void VariableGapTermsIndexWriter$EveryNTermSelector::newField(const ::org::apache::lucene::index::FieldInfo & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_newField_747195a1c5ce5890], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {
          static PyObject *t_VariableGapTermsIndexWriter$EveryNTermSelector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_VariableGapTermsIndexWriter$EveryNTermSelector_instance_(PyTypeObject *type, PyObject *arg);
          static int t_VariableGapTermsIndexWriter$EveryNTermSelector_init_(t_VariableGapTermsIndexWriter$EveryNTermSelector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_VariableGapTermsIndexWriter$EveryNTermSelector_isIndexTerm(t_VariableGapTermsIndexWriter$EveryNTermSelector *self, PyObject *args);
          static PyObject *t_VariableGapTermsIndexWriter$EveryNTermSelector_newField(t_VariableGapTermsIndexWriter$EveryNTermSelector *self, PyObject *args);

          static PyMethodDef t_VariableGapTermsIndexWriter$EveryNTermSelector__methods_[] = {
            DECLARE_METHOD(t_VariableGapTermsIndexWriter$EveryNTermSelector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VariableGapTermsIndexWriter$EveryNTermSelector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VariableGapTermsIndexWriter$EveryNTermSelector, isIndexTerm, METH_VARARGS),
            DECLARE_METHOD(t_VariableGapTermsIndexWriter$EveryNTermSelector, newField, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(VariableGapTermsIndexWriter$EveryNTermSelector)[] = {
            { Py_tp_methods, t_VariableGapTermsIndexWriter$EveryNTermSelector__methods_ },
            { Py_tp_init, (void *) t_VariableGapTermsIndexWriter$EveryNTermSelector_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(VariableGapTermsIndexWriter$EveryNTermSelector)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::blockterms::VariableGapTermsIndexWriter$IndexTermSelector),
            NULL
          };

          DEFINE_TYPE(VariableGapTermsIndexWriter$EveryNTermSelector, t_VariableGapTermsIndexWriter$EveryNTermSelector, VariableGapTermsIndexWriter$EveryNTermSelector);

          void t_VariableGapTermsIndexWriter$EveryNTermSelector::install(PyObject *module)
          {
            installType(&PY_TYPE(VariableGapTermsIndexWriter$EveryNTermSelector), &PY_TYPE_DEF(VariableGapTermsIndexWriter$EveryNTermSelector), module, "VariableGapTermsIndexWriter$EveryNTermSelector", 0);
          }

          void t_VariableGapTermsIndexWriter$EveryNTermSelector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableGapTermsIndexWriter$EveryNTermSelector), "class_", make_descriptor(VariableGapTermsIndexWriter$EveryNTermSelector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableGapTermsIndexWriter$EveryNTermSelector), "wrapfn_", make_descriptor(t_VariableGapTermsIndexWriter$EveryNTermSelector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableGapTermsIndexWriter$EveryNTermSelector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_VariableGapTermsIndexWriter$EveryNTermSelector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, VariableGapTermsIndexWriter$EveryNTermSelector::initializeClass, 1)))
              return NULL;
            return t_VariableGapTermsIndexWriter$EveryNTermSelector::wrap_Object(VariableGapTermsIndexWriter$EveryNTermSelector(((t_VariableGapTermsIndexWriter$EveryNTermSelector *) arg)->object.this$));
          }
          static PyObject *t_VariableGapTermsIndexWriter$EveryNTermSelector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, VariableGapTermsIndexWriter$EveryNTermSelector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_VariableGapTermsIndexWriter$EveryNTermSelector_init_(t_VariableGapTermsIndexWriter$EveryNTermSelector *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            VariableGapTermsIndexWriter$EveryNTermSelector object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = VariableGapTermsIndexWriter$EveryNTermSelector(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_VariableGapTermsIndexWriter$EveryNTermSelector_isIndexTerm(t_VariableGapTermsIndexWriter$EveryNTermSelector *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::codecs::TermStats a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::codecs::TermStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.isIndexTerm(a0, a1));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(VariableGapTermsIndexWriter$EveryNTermSelector), (PyObject *) self, "isIndexTerm", args, 2);
          }

          static PyObject *t_VariableGapTermsIndexWriter$EveryNTermSelector_newField(t_VariableGapTermsIndexWriter$EveryNTermSelector *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
            {
              OBJ_CALL(self->object.newField(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(VariableGapTermsIndexWriter$EveryNTermSelector), (PyObject *) self, "newField", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/PlanetObject.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *PlanetObject::class$ = NULL;
          jmethodID *PlanetObject::mids$ = NULL;
          bool PlanetObject::live$ = false;

          jclass PlanetObject::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/PlanetObject");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getPlanetModel_04c11b465ef16498] = env->getMethodID(cls, "getPlanetModel", "()Lorg/apache/lucene/spatial3d/geom/PlanetModel;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::spatial3d::geom::PlanetModel PlanetObject::getPlanetModel() const
          {
            return ::org::apache::lucene::spatial3d::geom::PlanetModel(env->callObjectMethod(this$, mids$[mid_getPlanetModel_04c11b465ef16498]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_PlanetObject_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PlanetObject_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PlanetObject_getPlanetModel(t_PlanetObject *self);
          static PyObject *t_PlanetObject_get__planetModel(t_PlanetObject *self, void *data);
          static PyGetSetDef t_PlanetObject__fields_[] = {
            DECLARE_GET_FIELD(t_PlanetObject, planetModel),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PlanetObject__methods_[] = {
            DECLARE_METHOD(t_PlanetObject, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PlanetObject, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PlanetObject, getPlanetModel, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PlanetObject)[] = {
            { Py_tp_methods, t_PlanetObject__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_PlanetObject__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PlanetObject)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::SerializableObject),
            NULL
          };

          DEFINE_TYPE(PlanetObject, t_PlanetObject, PlanetObject);

          void t_PlanetObject::install(PyObject *module)
          {
            installType(&PY_TYPE(PlanetObject), &PY_TYPE_DEF(PlanetObject), module, "PlanetObject", 0);
          }

          void t_PlanetObject::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PlanetObject), "class_", make_descriptor(PlanetObject::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PlanetObject), "wrapfn_", make_descriptor(t_PlanetObject::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PlanetObject), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PlanetObject_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PlanetObject::initializeClass, 1)))
              return NULL;
            return t_PlanetObject::wrap_Object(PlanetObject(((t_PlanetObject *) arg)->object.this$));
          }
          static PyObject *t_PlanetObject_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PlanetObject::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PlanetObject_getPlanetModel(t_PlanetObject *self)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel result((jobject) NULL);
            OBJ_CALL(result = self->object.getPlanetModel());
            return ::org::apache::lucene::spatial3d::geom::t_PlanetModel::wrap_Object(result);
          }

          static PyObject *t_PlanetObject_get__planetModel(t_PlanetObject *self, void *data)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel value((jobject) NULL);
            OBJ_CALL(value = self->object.getPlanetModel());
            return ::org::apache::lucene::spatial3d::geom::t_PlanetModel::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ConstNumberSource.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ConstNumberSource::class$ = NULL;
            jmethodID *ConstNumberSource::mids$ = NULL;
            bool ConstNumberSource::live$ = false;

            jclass ConstNumberSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ConstNumberSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_getBool_8454bd5aa23fd11e] = env->getMethodID(cls, "getBool", "()Z");
                mids$[mid_getDouble_8c74b787998ce4bc] = env->getMethodID(cls, "getDouble", "()D");
                mids$[mid_getFloat_58aec2b64dff50c8] = env->getMethodID(cls, "getFloat", "()F");
                mids$[mid_getInt_9972fcc56b44e79d] = env->getMethodID(cls, "getInt", "()I");
                mids$[mid_getLong_2e5ae9edcb9b072f] = env->getMethodID(cls, "getLong", "()J");
                mids$[mid_getNumber_f5813404cc5e3a1e] = env->getMethodID(cls, "getNumber", "()Ljava/lang/Number;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ConstNumberSource::ConstNumberSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            jboolean ConstNumberSource::getBool() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getBool_8454bd5aa23fd11e]);
            }

            jdouble ConstNumberSource::getDouble() const
            {
              return env->callDoubleMethod(this$, mids$[mid_getDouble_8c74b787998ce4bc]);
            }

            jfloat ConstNumberSource::getFloat() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFloat_58aec2b64dff50c8]);
            }

            jint ConstNumberSource::getInt() const
            {
              return env->callIntMethod(this$, mids$[mid_getInt_9972fcc56b44e79d]);
            }

            jlong ConstNumberSource::getLong() const
            {
              return env->callLongMethod(this$, mids$[mid_getLong_2e5ae9edcb9b072f]);
            }

            ::java::lang::Number ConstNumberSource::getNumber() const
            {
              return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getNumber_f5813404cc5e3a1e]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ConstNumberSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ConstNumberSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ConstNumberSource_init_(t_ConstNumberSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ConstNumberSource_getBool(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getDouble(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getFloat(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getInt(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getLong(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getNumber(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_get__bool(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__double(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__float(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__int(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__long(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__number(t_ConstNumberSource *self, void *data);
            static PyGetSetDef t_ConstNumberSource__fields_[] = {
              DECLARE_GET_FIELD(t_ConstNumberSource, bool),
              DECLARE_GET_FIELD(t_ConstNumberSource, double),
              DECLARE_GET_FIELD(t_ConstNumberSource, float),
              DECLARE_GET_FIELD(t_ConstNumberSource, int),
              DECLARE_GET_FIELD(t_ConstNumberSource, long),
              DECLARE_GET_FIELD(t_ConstNumberSource, number),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ConstNumberSource__methods_[] = {
              DECLARE_METHOD(t_ConstNumberSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstNumberSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstNumberSource, getBool, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getDouble, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getFloat, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getInt, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getLong, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getNumber, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(ConstNumberSource)[] = {
              { Py_tp_methods, t_ConstNumberSource__methods_ },
              { Py_tp_init, (void *) t_ConstNumberSource_init_ },
              { Py_tp_getset, t_ConstNumberSource__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(ConstNumberSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::ValueSource),
              NULL
            };

            DEFINE_TYPE(ConstNumberSource, t_ConstNumberSource, ConstNumberSource);

            void t_ConstNumberSource::install(PyObject *module)
            {
              installType(&PY_TYPE(ConstNumberSource), &PY_TYPE_DEF(ConstNumberSource), module, "ConstNumberSource", 0);
            }

            void t_ConstNumberSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(ConstNumberSource), "class_", make_descriptor(ConstNumberSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ConstNumberSource), "wrapfn_", make_descriptor(t_ConstNumberSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ConstNumberSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ConstNumberSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ConstNumberSource::initializeClass, 1)))
                return NULL;
              return t_ConstNumberSource::wrap_Object(ConstNumberSource(((t_ConstNumberSource *) arg)->object.this$));
            }
            static PyObject *t_ConstNumberSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ConstNumberSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ConstNumberSource_init_(t_ConstNumberSource *self, PyObject *args, PyObject *kwds)
            {
              ConstNumberSource object((jobject) NULL);

              INT_CALL(object = ConstNumberSource());
              self->object = object;

              return 0;
            }

            static PyObject *t_ConstNumberSource_getBool(t_ConstNumberSource *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getBool());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_ConstNumberSource_getDouble(t_ConstNumberSource *self)
            {
              jdouble result;
              OBJ_CALL(result = self->object.getDouble());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_ConstNumberSource_getFloat(t_ConstNumberSource *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getFloat());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_ConstNumberSource_getInt(t_ConstNumberSource *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getInt());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_ConstNumberSource_getLong(t_ConstNumberSource *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.getLong());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_ConstNumberSource_getNumber(t_ConstNumberSource *self)
            {
              ::java::lang::Number result((jobject) NULL);
              OBJ_CALL(result = self->object.getNumber());
              return ::java::lang::t_Number::wrap_Object(result);
            }

            static PyObject *t_ConstNumberSource_get__bool(t_ConstNumberSource *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getBool());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_ConstNumberSource_get__double(t_ConstNumberSource *self, void *data)
            {
              jdouble value;
              OBJ_CALL(value = self->object.getDouble());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_ConstNumberSource_get__float(t_ConstNumberSource *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFloat());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_ConstNumberSource_get__int(t_ConstNumberSource *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getInt());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_ConstNumberSource_get__long(t_ConstNumberSource *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getLong());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }

            static PyObject *t_ConstNumberSource_get__number(t_ConstNumberSource *self, void *data)
            {
              ::java::lang::Number value((jobject) NULL);
              OBJ_CALL(value = self->object.getNumber());
              return ::java::lang::t_Number::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Runtime.h"
#include "java/lang/Process.h"
#include "java/io/InputStream.h"
#include "java/lang/Runtime.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/File.h"
#include "java/io/OutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Thread.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Runtime::class$ = NULL;
    jmethodID *Runtime::mids$ = NULL;
    bool Runtime::live$ = false;

    jclass Runtime::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Runtime");

        mids$ = new jmethodID[max_mid];
        mids$[mid_addShutdownHook_5d5f76d7c905a26c] = env->getMethodID(cls, "addShutdownHook", "(Ljava/lang/Thread;)V");
        mids$[mid_availableProcessors_9972fcc56b44e79d] = env->getMethodID(cls, "availableProcessors", "()I");
        mids$[mid_exec_23688a07bfeb2b04] = env->getMethodID(cls, "exec", "([Ljava/lang/String;)Ljava/lang/Process;");
        mids$[mid_exec_dea555afa5591a5d] = env->getMethodID(cls, "exec", "(Ljava/lang/String;)Ljava/lang/Process;");
        mids$[mid_exec_74019666aa3f376f] = env->getMethodID(cls, "exec", "([Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;");
        mids$[mid_exec_c371260eb9c9f2c0] = env->getMethodID(cls, "exec", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;");
        mids$[mid_exec_182f2183e7dfe28b] = env->getMethodID(cls, "exec", "([Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;");
        mids$[mid_exec_bcd2c02362f3c8d6] = env->getMethodID(cls, "exec", "(Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;");
        mids$[mid_exit_040c4cd0390c5aff] = env->getMethodID(cls, "exit", "(I)V");
        mids$[mid_freeMemory_2e5ae9edcb9b072f] = env->getMethodID(cls, "freeMemory", "()J");
        mids$[mid_gc_f2cc1bce94666404] = env->getMethodID(cls, "gc", "()V");
        mids$[mid_getLocalizedInputStream_15a72fc0e28fa2b0] = env->getMethodID(cls, "getLocalizedInputStream", "(Ljava/io/InputStream;)Ljava/io/InputStream;");
        mids$[mid_getLocalizedOutputStream_9fd02a0c9af5f50a] = env->getMethodID(cls, "getLocalizedOutputStream", "(Ljava/io/OutputStream;)Ljava/io/OutputStream;");
        mids$[mid_getRuntime_49dbde347a8552ca] = env->getStaticMethodID(cls, "getRuntime", "()Ljava/lang/Runtime;");
        mids$[mid_halt_040c4cd0390c5aff] = env->getMethodID(cls, "halt", "(I)V");
        mids$[mid_load_9fd2eb66a64e6f0f] = env->getMethodID(cls, "load", "(Ljava/lang/String;)V");
        mids$[mid_loadLibrary_9fd2eb66a64e6f0f] = env->getMethodID(cls, "loadLibrary", "(Ljava/lang/String;)V");
        mids$[mid_maxMemory_2e5ae9edcb9b072f] = env->getMethodID(cls, "maxMemory", "()J");
        mids$[mid_removeShutdownHook_fd3c2af4cc70d693] = env->getMethodID(cls, "removeShutdownHook", "(Ljava/lang/Thread;)Z");
        mids$[mid_runFinalization_f2cc1bce94666404] = env->getMethodID(cls, "runFinalization", "()V");
        mids$[mid_runFinalizersOnExit_9d72768e8fdce2b7] = env->getStaticMethodID(cls, "runFinalizersOnExit", "(Z)V");
        mids$[mid_totalMemory_2e5ae9edcb9b072f] = env->getMethodID(cls, "totalMemory", "()J");
        mids$[mid_traceInstructions_9d72768e8fdce2b7] = env->getMethodID(cls, "traceInstructions", "(Z)V");
        mids$[mid_traceMethodCalls_9d72768e8fdce2b7] = env->getMethodID(cls, "traceMethodCalls", "(Z)V");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void Runtime::addShutdownHook(const ::java::lang::Thread & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_addShutdownHook_5d5f76d7c905a26c], a0.this$);
    }

    jint Runtime::availableProcessors() const
    {
      return env->callIntMethod(this$, mids$[mid_availableProcessors_9972fcc56b44e79d]);
    }

    ::java::lang::Process Runtime::exec(const JArray< ::java::lang::String > & a0) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_23688a07bfeb2b04], a0.this$));
    }

    ::java::lang::Process Runtime::exec(const ::java::lang::String & a0) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_dea555afa5591a5d], a0.this$));
    }

    ::java::lang::Process Runtime::exec(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_74019666aa3f376f], a0.this$, a1.this$));
    }

    ::java::lang::Process Runtime::exec(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_c371260eb9c9f2c0], a0.this$, a1.this$));
    }

    ::java::lang::Process Runtime::exec(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::java::io::File & a2) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_182f2183e7dfe28b], a0.this$, a1.this$, a2.this$));
    }

    ::java::lang::Process Runtime::exec(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const ::java::io::File & a2) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_bcd2c02362f3c8d6], a0.this$, a1.this$, a2.this$));
    }

    void Runtime::exit(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_exit_040c4cd0390c5aff], a0);
    }

    jlong Runtime::freeMemory() const
    {
      return env->callLongMethod(this$, mids$[mid_freeMemory_2e5ae9edcb9b072f]);
    }

    void Runtime::gc() const
    {
      env->callVoidMethod(this$, mids$[mid_gc_f2cc1bce94666404]);
    }

    ::java::io::InputStream Runtime::getLocalizedInputStream(const ::java::io::InputStream & a0) const
    {
      return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_getLocalizedInputStream_15a72fc0e28fa2b0], a0.this$));
    }

    ::java::io::OutputStream Runtime::getLocalizedOutputStream(const ::java::io::OutputStream & a0) const
    {
      return ::java::io::OutputStream(env->callObjectMethod(this$, mids$[mid_getLocalizedOutputStream_9fd02a0c9af5f50a], a0.this$));
    }

    Runtime Runtime::getRuntime()
    {
      jclass cls = env->getClass(initializeClass);
      return Runtime(env->callStaticObjectMethod(cls, mids$[mid_getRuntime_49dbde347a8552ca]));
    }

    void Runtime::halt(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_halt_040c4cd0390c5aff], a0);
    }

    void Runtime::load(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_load_9fd2eb66a64e6f0f], a0.this$);
    }

    void Runtime::loadLibrary(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_loadLibrary_9fd2eb66a64e6f0f], a0.this$);
    }

    jlong Runtime::maxMemory() const
    {
      return env->callLongMethod(this$, mids$[mid_maxMemory_2e5ae9edcb9b072f]);
    }

    jboolean Runtime::removeShutdownHook(const ::java::lang::Thread & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_removeShutdownHook_fd3c2af4cc70d693], a0.this$);
    }

    void Runtime::runFinalization() const
    {
      env->callVoidMethod(this$, mids$[mid_runFinalization_f2cc1bce94666404]);
    }

    void Runtime::runFinalizersOnExit(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_runFinalizersOnExit_9d72768e8fdce2b7], a0);
    }

    jlong Runtime::totalMemory() const
    {
      return env->callLongMethod(this$, mids$[mid_totalMemory_2e5ae9edcb9b072f]);
    }

    void Runtime::traceInstructions(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_traceInstructions_9d72768e8fdce2b7], a0);
    }

    void Runtime::traceMethodCalls(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_traceMethodCalls_9d72768e8fdce2b7], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Runtime_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Runtime_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Runtime_addShutdownHook(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_availableProcessors(t_Runtime *self);
    static PyObject *t_Runtime_exec(t_Runtime *self, PyObject *args);
    static PyObject *t_Runtime_exit(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_freeMemory(t_Runtime *self);
    static PyObject *t_Runtime_gc(t_Runtime *self);
    static PyObject *t_Runtime_getLocalizedInputStream(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_getLocalizedOutputStream(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_getRuntime(PyTypeObject *type);
    static PyObject *t_Runtime_halt(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_load(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_loadLibrary(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_maxMemory(t_Runtime *self);
    static PyObject *t_Runtime_removeShutdownHook(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_runFinalization(t_Runtime *self);
    static PyObject *t_Runtime_runFinalizersOnExit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Runtime_totalMemory(t_Runtime *self);
    static PyObject *t_Runtime_traceInstructions(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_traceMethodCalls(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_get__runtime(t_Runtime *self, void *data);
    static PyGetSetDef t_Runtime__fields_[] = {
      DECLARE_GET_FIELD(t_Runtime, runtime),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Runtime__methods_[] = {
      DECLARE_METHOD(t_Runtime, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Runtime, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Runtime, addShutdownHook, METH_O),
      DECLARE_METHOD(t_Runtime, availableProcessors, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, exec, METH_VARARGS),
      DECLARE_METHOD(t_Runtime, exit, METH_O),
      DECLARE_METHOD(t_Runtime, freeMemory, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, gc, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, getLocalizedInputStream, METH_O),
      DECLARE_METHOD(t_Runtime, getLocalizedOutputStream, METH_O),
      DECLARE_METHOD(t_Runtime, getRuntime, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Runtime, halt, METH_O),
      DECLARE_METHOD(t_Runtime, load, METH_O),
      DECLARE_METHOD(t_Runtime, loadLibrary, METH_O),
      DECLARE_METHOD(t_Runtime, maxMemory, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, removeShutdownHook, METH_O),
      DECLARE_METHOD(t_Runtime, runFinalization, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, runFinalizersOnExit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Runtime, totalMemory, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, traceInstructions, METH_O),
      DECLARE_METHOD(t_Runtime, traceMethodCalls, METH_O),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Runtime)[] = {
      { Py_tp_methods, t_Runtime__methods_ },
      { Py_tp_init, (void *) abstract_init },
      { Py_tp_getset, t_Runtime__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Runtime)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(Runtime, t_Runtime, Runtime);

    void t_Runtime::install(PyObject *module)
    {
      installType(&PY_TYPE(Runtime), &PY_TYPE_DEF(Runtime), module, "Runtime", 0);
    }

    void t_Runtime::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Runtime), "class_", make_descriptor(Runtime::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Runtime), "wrapfn_", make_descriptor(t_Runtime::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Runtime), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Runtime_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Runtime::initializeClass, 1)))
        return NULL;
      return t_Runtime::wrap_Object(Runtime(((t_Runtime *) arg)->object.this$));
    }
    static PyObject *t_Runtime_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Runtime::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Runtime_addShutdownHook(t_Runtime *self, PyObject *arg)
    {
      ::java::lang::Thread a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::Thread::initializeClass, &a0))
      {
        OBJ_CALL(self->object.addShutdownHook(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "addShutdownHook", arg);
      return NULL;
    }

    static PyObject *t_Runtime_availableProcessors(t_Runtime *self)
    {
      jint result;
      OBJ_CALL(result = self->object.availableProcessors());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_Runtime_exec(t_Runtime *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< ::java::lang::String > a0((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "[s", &a0))
          {
            OBJ_CALL(result = self->object.exec(a0));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.exec(a0));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          JArray< ::java::lang::String > a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "[s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.exec(a0, a1));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.exec(a0, a1));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          JArray< ::java::lang::String > a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::io::File a2((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "[s[sk", ::java::io::File::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.exec(a0, a1, a2));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::io::File a2((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "s[sk", ::java::io::File::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.exec(a0, a1, a2));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "exec", args);
      return NULL;
    }

    static PyObject *t_Runtime_exit(t_Runtime *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.exit(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "exit", arg);
      return NULL;
    }

    static PyObject *t_Runtime_freeMemory(t_Runtime *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.freeMemory());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Runtime_gc(t_Runtime *self)
    {
      OBJ_CALL(self->object.gc());
      Py_RETURN_NONE;
    }

    static PyObject *t_Runtime_getLocalizedInputStream(t_Runtime *self, PyObject *arg)
    {
      ::java::io::InputStream a0((jobject) NULL);
      ::java::io::InputStream result((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.getLocalizedInputStream(a0));
        return ::java::io::t_InputStream::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "getLocalizedInputStream", arg);
      return NULL;
    }

    static PyObject *t_Runtime_getLocalizedOutputStream(t_Runtime *self, PyObject *arg)
    {
      ::java::io::OutputStream a0((jobject) NULL);
      ::java::io::OutputStream result((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::OutputStream::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.getLocalizedOutputStream(a0));
        return ::java::io::t_OutputStream::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "getLocalizedOutputStream", arg);
      return NULL;
    }

    static PyObject *t_Runtime_getRuntime(PyTypeObject *type)
    {
      Runtime result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::Runtime::getRuntime());
      return t_Runtime::wrap_Object(result);
    }

    static PyObject *t_Runtime_halt(t_Runtime *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.halt(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "halt", arg);
      return NULL;
    }

    static PyObject *t_Runtime_load(t_Runtime *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.load(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "load", arg);
      return NULL;
    }

    static PyObject *t_Runtime_loadLibrary(t_Runtime *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.loadLibrary(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "loadLibrary", arg);
      return NULL;
    }

    static PyObject *t_Runtime_maxMemory(t_Runtime *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.maxMemory());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Runtime_removeShutdownHook(t_Runtime *self, PyObject *arg)
    {
      ::java::lang::Thread a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "k", ::java::lang::Thread::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.removeShutdownHook(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "removeShutdownHook", arg);
      return NULL;
    }

    static PyObject *t_Runtime_runFinalization(t_Runtime *self)
    {
      OBJ_CALL(self->object.runFinalization());
      Py_RETURN_NONE;
    }

    static PyObject *t_Runtime_runFinalizersOnExit(PyTypeObject *type, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(::java::lang::Runtime::runFinalizersOnExit(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "runFinalizersOnExit", arg);
      return NULL;
    }

    static PyObject *t_Runtime_totalMemory(t_Runtime *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.totalMemory());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Runtime_traceInstructions(t_Runtime *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.traceInstructions(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "traceInstructions", arg);
      return NULL;
    }

    static PyObject *t_Runtime_traceMethodCalls(t_Runtime *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.traceMethodCalls(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "traceMethodCalls", arg);
      return NULL;
    }

    static PyObject *t_Runtime_get__runtime(t_Runtime *self, void *data)
    {
      Runtime value((jobject) NULL);
      OBJ_CALL(value = self->object.getRuntime());
      return t_Runtime::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MaxNonCompetitiveBoostAttributeImpl.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/search/MaxNonCompetitiveBoostAttribute.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MaxNonCompetitiveBoostAttributeImpl::class$ = NULL;
        jmethodID *MaxNonCompetitiveBoostAttributeImpl::mids$ = NULL;
        bool MaxNonCompetitiveBoostAttributeImpl::live$ = false;

        jclass MaxNonCompetitiveBoostAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MaxNonCompetitiveBoostAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_getCompetitiveTerm_7af2ea2e37ce82b8] = env->getMethodID(cls, "getCompetitiveTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getMaxNonCompetitiveBoost_58aec2b64dff50c8] = env->getMethodID(cls, "getMaxNonCompetitiveBoost", "()F");
            mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
            mids$[mid_setCompetitiveTerm_0bdfd2603b7490a8] = env->getMethodID(cls, "setCompetitiveTerm", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setMaxNonCompetitiveBoost_8e1d952dd65cdc3a] = env->getMethodID(cls, "setMaxNonCompetitiveBoost", "(F)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MaxNonCompetitiveBoostAttributeImpl::MaxNonCompetitiveBoostAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void MaxNonCompetitiveBoostAttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
        }

        void MaxNonCompetitiveBoostAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_26346c38ebc9c090], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef MaxNonCompetitiveBoostAttributeImpl::getCompetitiveTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getCompetitiveTerm_7af2ea2e37ce82b8]));
        }

        jfloat MaxNonCompetitiveBoostAttributeImpl::getMaxNonCompetitiveBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getMaxNonCompetitiveBoost_58aec2b64dff50c8]);
        }

        void MaxNonCompetitiveBoostAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
        }

        void MaxNonCompetitiveBoostAttributeImpl::setCompetitiveTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCompetitiveTerm_0bdfd2603b7490a8], a0.this$);
        }

        void MaxNonCompetitiveBoostAttributeImpl::setMaxNonCompetitiveBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxNonCompetitiveBoost_8e1d952dd65cdc3a], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MaxNonCompetitiveBoostAttributeImpl_init_(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_clear(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_copyTo(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_getCompetitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_getMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_reflectWith(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_setCompetitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_setMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_get__competitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, void *data);
        static int t_MaxNonCompetitiveBoostAttributeImpl_set__competitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg, void *data);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_get__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, void *data);
        static int t_MaxNonCompetitiveBoostAttributeImpl_set__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg, void *data);
        static PyGetSetDef t_MaxNonCompetitiveBoostAttributeImpl__fields_[] = {
          DECLARE_GETSET_FIELD(t_MaxNonCompetitiveBoostAttributeImpl, competitiveTerm),
          DECLARE_GETSET_FIELD(t_MaxNonCompetitiveBoostAttributeImpl, maxNonCompetitiveBoost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MaxNonCompetitiveBoostAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, clear, METH_VARARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, getCompetitiveTerm, METH_NOARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, getMaxNonCompetitiveBoost, METH_NOARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, reflectWith, METH_VARARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, setCompetitiveTerm, METH_O),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, setMaxNonCompetitiveBoost, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MaxNonCompetitiveBoostAttributeImpl)[] = {
          { Py_tp_methods, t_MaxNonCompetitiveBoostAttributeImpl__methods_ },
          { Py_tp_init, (void *) t_MaxNonCompetitiveBoostAttributeImpl_init_ },
          { Py_tp_getset, t_MaxNonCompetitiveBoostAttributeImpl__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MaxNonCompetitiveBoostAttributeImpl)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::AttributeImpl),
          NULL
        };

        DEFINE_TYPE(MaxNonCompetitiveBoostAttributeImpl, t_MaxNonCompetitiveBoostAttributeImpl, MaxNonCompetitiveBoostAttributeImpl);

        void t_MaxNonCompetitiveBoostAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(MaxNonCompetitiveBoostAttributeImpl), &PY_TYPE_DEF(MaxNonCompetitiveBoostAttributeImpl), module, "MaxNonCompetitiveBoostAttributeImpl", 0);
        }

        void t_MaxNonCompetitiveBoostAttributeImpl::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MaxNonCompetitiveBoostAttributeImpl), "class_", make_descriptor(MaxNonCompetitiveBoostAttributeImpl::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MaxNonCompetitiveBoostAttributeImpl), "wrapfn_", make_descriptor(t_MaxNonCompetitiveBoostAttributeImpl::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MaxNonCompetitiveBoostAttributeImpl), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MaxNonCompetitiveBoostAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_MaxNonCompetitiveBoostAttributeImpl::wrap_Object(MaxNonCompetitiveBoostAttributeImpl(((t_MaxNonCompetitiveBoostAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MaxNonCompetitiveBoostAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MaxNonCompetitiveBoostAttributeImpl_init_(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          MaxNonCompetitiveBoostAttributeImpl object((jobject) NULL);

          INT_CALL(object = MaxNonCompetitiveBoostAttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_clear(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(MaxNonCompetitiveBoostAttributeImpl), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_copyTo(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(MaxNonCompetitiveBoostAttributeImpl), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_getCompetitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getCompetitiveTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_getMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getMaxNonCompetitiveBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_reflectWith(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reflectWith(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(MaxNonCompetitiveBoostAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_setCompetitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setCompetitiveTerm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCompetitiveTerm", arg);
          return NULL;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_setMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setMaxNonCompetitiveBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxNonCompetitiveBoost", arg);
          return NULL;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_get__competitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getCompetitiveTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
        static int t_MaxNonCompetitiveBoostAttributeImpl_set__competitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setCompetitiveTerm(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "competitiveTerm", arg);
          return -1;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_get__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getMaxNonCompetitiveBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_MaxNonCompetitiveBoostAttributeImpl_set__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setMaxNonCompetitiveBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxNonCompetitiveBoost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/CompletionsTermsReader.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/document/NRTSuggester.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *CompletionsTermsReader::class$ = NULL;
            jmethodID *CompletionsTermsReader::mids$ = NULL;
            jfieldID *CompletionsTermsReader::fids$ = NULL;
            bool CompletionsTermsReader::live$ = false;

            jclass CompletionsTermsReader::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/CompletionsTermsReader");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
                mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_suggester_05382a7351c5bba9] = env->getMethodID(cls, "suggester", "()Lorg/apache/lucene/search/suggest/document/NRTSuggester;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_maxWeight] = env->getFieldID(cls, "maxWeight", "J");
                fids$[fid_minWeight] = env->getFieldID(cls, "minWeight", "J");
                fids$[fid_type] = env->getFieldID(cls, "type", "B");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::util::Collection CompletionsTermsReader::getChildResources() const
            {
              return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
            }

            jlong CompletionsTermsReader::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
            }

            ::org::apache::lucene::search::suggest::document::NRTSuggester CompletionsTermsReader::suggester() const
            {
              return ::org::apache::lucene::search::suggest::document::NRTSuggester(env->callObjectMethod(this$, mids$[mid_suggester_05382a7351c5bba9]));
            }

            jlong CompletionsTermsReader::_get_maxWeight() const
            {
              return env->getLongField(this$, fids$[fid_maxWeight]);
            }

            jlong CompletionsTermsReader::_get_minWeight() const
            {
              return env->getLongField(this$, fids$[fid_minWeight]);
            }

            jbyte CompletionsTermsReader::_get_type() const
            {
              return env->getByteField(this$, fids$[fid_type]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_CompletionsTermsReader_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CompletionsTermsReader_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CompletionsTermsReader_getChildResources(t_CompletionsTermsReader *self);
            static PyObject *t_CompletionsTermsReader_ramBytesUsed(t_CompletionsTermsReader *self);
            static PyObject *t_CompletionsTermsReader_suggester(t_CompletionsTermsReader *self);
            static PyObject *t_CompletionsTermsReader_get__maxWeight(t_CompletionsTermsReader *self, void *data);
            static PyObject *t_CompletionsTermsReader_get__minWeight(t_CompletionsTermsReader *self, void *data);
            static PyObject *t_CompletionsTermsReader_get__type(t_CompletionsTermsReader *self, void *data);

            static PyObject *t_CompletionsTermsReader_get__childResources(t_CompletionsTermsReader *self, void *data);
            static PyGetSetDef t_CompletionsTermsReader__fields_[] = {
              DECLARE_GET_FIELD(t_CompletionsTermsReader, maxWeight),
              DECLARE_GET_FIELD(t_CompletionsTermsReader, minWeight),
              DECLARE_GET_FIELD(t_CompletionsTermsReader, type),
              DECLARE_GET_FIELD(t_CompletionsTermsReader, childResources),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CompletionsTermsReader__methods_[] = {
              DECLARE_METHOD(t_CompletionsTermsReader, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompletionsTermsReader, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompletionsTermsReader, getChildResources, METH_NOARGS),
              DECLARE_METHOD(t_CompletionsTermsReader, ramBytesUsed, METH_NOARGS),
              DECLARE_METHOD(t_CompletionsTermsReader, suggester, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(CompletionsTermsReader)[] = {
              { Py_tp_methods, t_CompletionsTermsReader__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_CompletionsTermsReader__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(CompletionsTermsReader)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(CompletionsTermsReader, t_CompletionsTermsReader, CompletionsTermsReader);

            void t_CompletionsTermsReader::install(PyObject *module)
            {
              installType(&PY_TYPE(CompletionsTermsReader), &PY_TYPE_DEF(CompletionsTermsReader), module, "CompletionsTermsReader", 0);
            }

            void t_CompletionsTermsReader::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionsTermsReader), "class_", make_descriptor(CompletionsTermsReader::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionsTermsReader), "wrapfn_", make_descriptor(t_CompletionsTermsReader::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionsTermsReader), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CompletionsTermsReader_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CompletionsTermsReader::initializeClass, 1)))
                return NULL;
              return t_CompletionsTermsReader::wrap_Object(CompletionsTermsReader(((t_CompletionsTermsReader *) arg)->object.this$));
            }
            static PyObject *t_CompletionsTermsReader_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CompletionsTermsReader::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CompletionsTermsReader_getChildResources(t_CompletionsTermsReader *self)
            {
              ::java::util::Collection result((jobject) NULL);
              OBJ_CALL(result = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
            }

            static PyObject *t_CompletionsTermsReader_ramBytesUsed(t_CompletionsTermsReader *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_CompletionsTermsReader_suggester(t_CompletionsTermsReader *self)
            {
              ::org::apache::lucene::search::suggest::document::NRTSuggester result((jobject) NULL);
              OBJ_CALL(result = self->object.suggester());
              return ::org::apache::lucene::search::suggest::document::t_NRTSuggester::wrap_Object(result);
            }

            static PyObject *t_CompletionsTermsReader_get__maxWeight(t_CompletionsTermsReader *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object._get_maxWeight());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }

            static PyObject *t_CompletionsTermsReader_get__minWeight(t_CompletionsTermsReader *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object._get_minWeight());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }

            static PyObject *t_CompletionsTermsReader_get__type(t_CompletionsTermsReader *self, void *data)
            {
              jbyte value;
              OBJ_CALL(value = self->object._get_type());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_CompletionsTermsReader_get__childResources(t_CompletionsTermsReader *self, void *data)
            {
              ::java::util::Collection value((jobject) NULL);
              OBJ_CALL(value = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldTermStack::class$ = NULL;
          jmethodID *FieldTermStack::mids$ = NULL;
          bool FieldTermStack::live$ = false;

          jclass FieldTermStack::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldTermStack");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_748a5cc3bcf96d59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldQuery;)V");
              mids$[mid_getFieldName_db9b55ba01e03e4b] = env->getMethodID(cls, "getFieldName", "()Ljava/lang/String;");
              mids$[mid_isEmpty_8454bd5aa23fd11e] = env->getMethodID(cls, "isEmpty", "()Z");
              mids$[mid_pop_211d98576697f671] = env->getMethodID(cls, "pop", "()Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;");
              mids$[mid_push_65a1471a0ccac9aa] = env->getMethodID(cls, "push", "(Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldTermStack::FieldTermStack(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_748a5cc3bcf96d59, a0.this$, a1, a2.this$, a3.this$)) {}

          ::java::lang::String FieldTermStack::getFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldName_db9b55ba01e03e4b]));
          }

          jboolean FieldTermStack::isEmpty() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isEmpty_8454bd5aa23fd11e]);
          }

          ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo FieldTermStack::pop() const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo(env->callObjectMethod(this$, mids$[mid_pop_211d98576697f671]));
          }

          void FieldTermStack::push(const ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_push_65a1471a0ccac9aa], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldTermStack_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldTermStack_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldTermStack_init_(t_FieldTermStack *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldTermStack_getFieldName(t_FieldTermStack *self);
          static PyObject *t_FieldTermStack_isEmpty(t_FieldTermStack *self);
          static PyObject *t_FieldTermStack_pop(t_FieldTermStack *self);
          static PyObject *t_FieldTermStack_push(t_FieldTermStack *self, PyObject *arg);
          static PyObject *t_FieldTermStack_get__empty(t_FieldTermStack *self, void *data);
          static PyObject *t_FieldTermStack_get__fieldName(t_FieldTermStack *self, void *data);
          static PyGetSetDef t_FieldTermStack__fields_[] = {
            DECLARE_GET_FIELD(t_FieldTermStack, empty),
            DECLARE_GET_FIELD(t_FieldTermStack, fieldName),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldTermStack__methods_[] = {
            DECLARE_METHOD(t_FieldTermStack, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldTermStack, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldTermStack, getFieldName, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack, isEmpty, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack, pop, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack, push, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FieldTermStack)[] = {
            { Py_tp_methods, t_FieldTermStack__methods_ },
            { Py_tp_init, (void *) t_FieldTermStack_init_ },
            { Py_tp_getset, t_FieldTermStack__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FieldTermStack)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FieldTermStack, t_FieldTermStack, FieldTermStack);

          void t_FieldTermStack::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldTermStack), &PY_TYPE_DEF(FieldTermStack), module, "FieldTermStack", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldTermStack), "TermInfo", make_descriptor(&PY_TYPE_DEF(FieldTermStack$TermInfo)));
          }

          void t_FieldTermStack::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldTermStack), "class_", make_descriptor(FieldTermStack::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldTermStack), "wrapfn_", make_descriptor(t_FieldTermStack::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldTermStack), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldTermStack_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldTermStack::initializeClass, 1)))
              return NULL;
            return t_FieldTermStack::wrap_Object(FieldTermStack(((t_FieldTermStack *) arg)->object.this$));
          }
          static PyObject *t_FieldTermStack_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldTermStack::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldTermStack_init_(t_FieldTermStack *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::search::vectorhighlight::FieldQuery a3((jobject) NULL);
            FieldTermStack object((jobject) NULL);

            if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = FieldTermStack(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldTermStack_getFieldName(t_FieldTermStack *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getFieldName());
            return j2p(result);
          }

          static PyObject *t_FieldTermStack_isEmpty(t_FieldTermStack *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isEmpty());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FieldTermStack_pop(t_FieldTermStack *self)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo result((jobject) NULL);
            OBJ_CALL(result = self->object.pop());
            return ::org::apache::lucene::search::vectorhighlight::t_FieldTermStack$TermInfo::wrap_Object(result);
          }

          static PyObject *t_FieldTermStack_push(t_FieldTermStack *self, PyObject *arg)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo::initializeClass, &a0))
            {
              OBJ_CALL(self->object.push(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "push", arg);
            return NULL;
          }

          static PyObject *t_FieldTermStack_get__empty(t_FieldTermStack *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isEmpty());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FieldTermStack_get__fieldName(t_FieldTermStack *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanLightStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanLightStemFilterFactory::class$ = NULL;
          jmethodID *GermanLightStemFilterFactory::mids$ = NULL;
          bool GermanLightStemFilterFactory::live$ = false;
          ::java::lang::String *GermanLightStemFilterFactory::NAME = NULL;

          jclass GermanLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanLightStemFilterFactory::GermanLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GermanLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanLightStemFilterFactory_init_(t_GermanLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanLightStemFilterFactory_create(t_GermanLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GermanLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GermanLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GermanLightStemFilterFactory)[] = {
            { Py_tp_methods, t_GermanLightStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_GermanLightStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GermanLightStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(GermanLightStemFilterFactory, t_GermanLightStemFilterFactory, GermanLightStemFilterFactory);

          void t_GermanLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanLightStemFilterFactory), &PY_TYPE_DEF(GermanLightStemFilterFactory), module, "GermanLightStemFilterFactory", 0);
          }

          void t_GermanLightStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanLightStemFilterFactory), "class_", make_descriptor(GermanLightStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanLightStemFilterFactory), "wrapfn_", make_descriptor(t_GermanLightStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanLightStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(GermanLightStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanLightStemFilterFactory), "NAME", make_descriptor(j2p(*GermanLightStemFilterFactory::NAME)));
          }

          static PyObject *t_GermanLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GermanLightStemFilterFactory::wrap_Object(GermanLightStemFilterFactory(((t_GermanLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GermanLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanLightStemFilterFactory_init_(t_GermanLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GermanLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GermanLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanLightStemFilterFactory_create(t_GermanLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(GermanLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie.h"
#include "java/lang/Float.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/util/Locale.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "java/nio/file/Path.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace jaspell {

            ::java::lang::Class *JaspellTernarySearchTrie::class$ = NULL;
            jmethodID *JaspellTernarySearchTrie::mids$ = NULL;
            bool JaspellTernarySearchTrie::live$ = false;

            jclass JaspellTernarySearchTrie::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_8b005052a37adc8a] = env->getMethodID(cls, "<init>", "(Ljava/util/Locale;)V");
                mids$[mid_init$_636077fee54d306c] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;)V");
                mids$[mid_init$_a06445184861073e] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;Z)V");
                mids$[mid_get_02b63332574637fb] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getAndIncrement_7734c9b2a9ee8cc6] = env->getMethodID(cls, "getAndIncrement", "(Ljava/lang/String;)Ljava/lang/Float;");
                mids$[mid_matchAlmost_25278b4b3ab80e37] = env->getMethodID(cls, "matchAlmost", "(Ljava/lang/String;)Ljava/util/List;");
                mids$[mid_matchAlmost_32d21569108f6276] = env->getMethodID(cls, "matchAlmost", "(Ljava/lang/CharSequence;I)Ljava/util/List;");
                mids$[mid_matchPrefix_25278b4b3ab80e37] = env->getMethodID(cls, "matchPrefix", "(Ljava/lang/String;)Ljava/util/List;");
                mids$[mid_matchPrefix_32d21569108f6276] = env->getMethodID(cls, "matchPrefix", "(Ljava/lang/CharSequence;I)Ljava/util/List;");
                mids$[mid_numDataNodes_9972fcc56b44e79d] = env->getMethodID(cls, "numDataNodes", "()I");
                mids$[mid_numNodes_9972fcc56b44e79d] = env->getMethodID(cls, "numNodes", "()I");
                mids$[mid_put_e50af6ee59c80f9f] = env->getMethodID(cls, "put", "(Ljava/lang/CharSequence;Ljava/lang/Object;)V");
                mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_remove_9fd2eb66a64e6f0f] = env->getMethodID(cls, "remove", "(Ljava/lang/String;)V");
                mids$[mid_setMatchAlmostDiff_040c4cd0390c5aff] = env->getMethodID(cls, "setMatchAlmostDiff", "(I)V");
                mids$[mid_setNumReturnValues_040c4cd0390c5aff] = env->getMethodID(cls, "setNumReturnValues", "(I)V");
                mids$[mid_getOrCreateNode_c21a419396baffd6] = env->getMethodID(cls, "getOrCreateNode", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;");
                mids$[mid_numDataNodes_a092785ce5e99615] = env->getMethodID(cls, "numDataNodes", "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;)I");
                mids$[mid_numNodes_a092785ce5e99615] = env->getMethodID(cls, "numNodes", "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;)I");
                mids$[mid_sortKeys_d5e6d1d17075104f] = env->getMethodID(cls, "sortKeys", "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;I)Ljava/util/List;");
                mids$[mid_getKey_bd5806dce24f7387] = env->getMethodID(cls, "getKey", "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;)Ljava/lang/String;");
                mids$[mid_getNode_d87dc29897244538] = env->getMethodID(cls, "getNode", "(Ljava/lang/CharSequence;Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;)Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JaspellTernarySearchTrie::JaspellTernarySearchTrie() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            JaspellTernarySearchTrie::JaspellTernarySearchTrie(const ::java::util::Locale & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8b005052a37adc8a, a0.this$)) {}

            JaspellTernarySearchTrie::JaspellTernarySearchTrie(const ::java::nio::file::Path & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_636077fee54d306c, a0.this$)) {}

            JaspellTernarySearchTrie::JaspellTernarySearchTrie(const ::java::nio::file::Path & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a06445184861073e, a0.this$, a1)) {}

            ::java::lang::Object JaspellTernarySearchTrie::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_02b63332574637fb], a0.this$));
            }

            ::java::lang::Float JaspellTernarySearchTrie::getAndIncrement(const ::java::lang::String & a0) const
            {
              return ::java::lang::Float(env->callObjectMethod(this$, mids$[mid_getAndIncrement_7734c9b2a9ee8cc6], a0.this$));
            }

            ::java::util::List JaspellTernarySearchTrie::matchAlmost(const ::java::lang::String & a0) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_matchAlmost_25278b4b3ab80e37], a0.this$));
            }

            ::java::util::List JaspellTernarySearchTrie::matchAlmost(const ::java::lang::CharSequence & a0, jint a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_matchAlmost_32d21569108f6276], a0.this$, a1));
            }

            ::java::util::List JaspellTernarySearchTrie::matchPrefix(const ::java::lang::String & a0) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_matchPrefix_25278b4b3ab80e37], a0.this$));
            }

            ::java::util::List JaspellTernarySearchTrie::matchPrefix(const ::java::lang::CharSequence & a0, jint a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_matchPrefix_32d21569108f6276], a0.this$, a1));
            }

            jint JaspellTernarySearchTrie::numDataNodes() const
            {
              return env->callIntMethod(this$, mids$[mid_numDataNodes_9972fcc56b44e79d]);
            }

            jint JaspellTernarySearchTrie::numNodes() const
            {
              return env->callIntMethod(this$, mids$[mid_numNodes_9972fcc56b44e79d]);
            }

            void JaspellTernarySearchTrie::put(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_put_e50af6ee59c80f9f], a0.this$, a1.this$);
            }

            jlong JaspellTernarySearchTrie::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
            }

            void JaspellTernarySearchTrie::remove(const ::java::lang::String & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_remove_9fd2eb66a64e6f0f], a0.this$);
            }

            void JaspellTernarySearchTrie::setMatchAlmostDiff(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setMatchAlmostDiff_040c4cd0390c5aff], a0);
            }

            void JaspellTernarySearchTrie::setNumReturnValues(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNumReturnValues_040c4cd0390c5aff], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace jaspell {
            static PyObject *t_JaspellTernarySearchTrie_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_instance_(PyTypeObject *type, PyObject *arg);
            static int t_JaspellTernarySearchTrie_init_(t_JaspellTernarySearchTrie *self, PyObject *args, PyObject *kwds);
            static PyObject *t_JaspellTernarySearchTrie_get(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_getAndIncrement(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_matchAlmost(t_JaspellTernarySearchTrie *self, PyObject *args);
            static PyObject *t_JaspellTernarySearchTrie_matchPrefix(t_JaspellTernarySearchTrie *self, PyObject *args);
            static PyObject *t_JaspellTernarySearchTrie_numDataNodes(t_JaspellTernarySearchTrie *self);
            static PyObject *t_JaspellTernarySearchTrie_numNodes(t_JaspellTernarySearchTrie *self);
            static PyObject *t_JaspellTernarySearchTrie_put(t_JaspellTernarySearchTrie *self, PyObject *args);
            static PyObject *t_JaspellTernarySearchTrie_ramBytesUsed(t_JaspellTernarySearchTrie *self);
            static PyObject *t_JaspellTernarySearchTrie_remove(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_setMatchAlmostDiff(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_setNumReturnValues(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static int t_JaspellTernarySearchTrie_set__matchAlmostDiff(t_JaspellTernarySearchTrie *self, PyObject *arg, void *data);
            static int t_JaspellTernarySearchTrie_set__numReturnValues(t_JaspellTernarySearchTrie *self, PyObject *arg, void *data);
            static PyGetSetDef t_JaspellTernarySearchTrie__fields_[] = {
              DECLARE_SET_FIELD(t_JaspellTernarySearchTrie, matchAlmostDiff),
              DECLARE_SET_FIELD(t_JaspellTernarySearchTrie, numReturnValues),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_JaspellTernarySearchTrie__methods_[] = {
              DECLARE_METHOD(t_JaspellTernarySearchTrie, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, get, METH_O),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, getAndIncrement, METH_O),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, matchAlmost, METH_VARARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, matchPrefix, METH_VARARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, numDataNodes, METH_NOARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, numNodes, METH_NOARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, put, METH_VARARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, ramBytesUsed, METH_NOARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, remove, METH_O),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, setMatchAlmostDiff, METH_O),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, setNumReturnValues, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(JaspellTernarySearchTrie)[] = {
              { Py_tp_methods, t_JaspellTernarySearchTrie__methods_ },
              { Py_tp_init, (void *) t_JaspellTernarySearchTrie_init_ },
              { Py_tp_getset, t_JaspellTernarySearchTrie__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(JaspellTernarySearchTrie)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(JaspellTernarySearchTrie, t_JaspellTernarySearchTrie, JaspellTernarySearchTrie);

            void t_JaspellTernarySearchTrie::install(PyObject *module)
            {
              installType(&PY_TYPE(JaspellTernarySearchTrie), &PY_TYPE_DEF(JaspellTernarySearchTrie), module, "JaspellTernarySearchTrie", 0);
            }

            void t_JaspellTernarySearchTrie::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(JaspellTernarySearchTrie), "class_", make_descriptor(JaspellTernarySearchTrie::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(JaspellTernarySearchTrie), "wrapfn_", make_descriptor(t_JaspellTernarySearchTrie::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(JaspellTernarySearchTrie), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_JaspellTernarySearchTrie_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, JaspellTernarySearchTrie::initializeClass, 1)))
                return NULL;
              return t_JaspellTernarySearchTrie::wrap_Object(JaspellTernarySearchTrie(((t_JaspellTernarySearchTrie *) arg)->object.this$));
            }
            static PyObject *t_JaspellTernarySearchTrie_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, JaspellTernarySearchTrie::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_JaspellTernarySearchTrie_init_(t_JaspellTernarySearchTrie *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  JaspellTernarySearchTrie object((jobject) NULL);

                  INT_CALL(object = JaspellTernarySearchTrie());
                  self->object = object;
                  break;
                }
               case 1:
                {
                  ::java::util::Locale a0((jobject) NULL);
                  JaspellTernarySearchTrie object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                  {
                    INT_CALL(object = JaspellTernarySearchTrie(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::java::nio::file::Path a0((jobject) NULL);
                  JaspellTernarySearchTrie object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::nio::file::Path::initializeClass, &a0))
                  {
                    INT_CALL(object = JaspellTernarySearchTrie(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::nio::file::Path a0((jobject) NULL);
                  jboolean a1;
                  JaspellTernarySearchTrie object((jobject) NULL);

                  if (!parseArgs(args, "kZ", ::java::nio::file::Path::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = JaspellTernarySearchTrie(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_JaspellTernarySearchTrie_get(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_getAndIncrement(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Float result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.getAndIncrement(a0));
                return ::java::lang::t_Float::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getAndIncrement", arg);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_matchAlmost(t_JaspellTernarySearchTrie *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(result = self->object.matchAlmost(a0));
                    return ::java::util::t_List::wrap_Object(result, ::java::lang::PY_TYPE(String));
                  }
                }
                break;
               case 2:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jint a1;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OI", ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                  {
                    OBJ_CALL(result = self->object.matchAlmost(a0, a1));
                    return ::java::util::t_List::wrap_Object(result, ::java::lang::PY_TYPE(String));
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "matchAlmost", args);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_matchPrefix(t_JaspellTernarySearchTrie *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(result = self->object.matchPrefix(a0));
                    return ::java::util::t_List::wrap_Object(result, ::java::lang::PY_TYPE(String));
                  }
                }
                break;
               case 2:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jint a1;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OI", ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                  {
                    OBJ_CALL(result = self->object.matchPrefix(a0, a1));
                    return ::java::util::t_List::wrap_Object(result, ::java::lang::PY_TYPE(String));
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "matchPrefix", args);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_numDataNodes(t_JaspellTernarySearchTrie *self)
            {
              jint result;
              OBJ_CALL(result = self->object.numDataNodes());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_JaspellTernarySearchTrie_numNodes(t_JaspellTernarySearchTrie *self)
            {
              jint result;
              OBJ_CALL(result = self->object.numNodes());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_JaspellTernarySearchTrie_put(t_JaspellTernarySearchTrie *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object a1((jobject) NULL);

              if (!parseArgs(args, "Oo", ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
              {
                OBJ_CALL(self->object.put(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_ramBytesUsed(t_JaspellTernarySearchTrie *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_JaspellTernarySearchTrie_remove(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(self->object.remove(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "remove", arg);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_setMatchAlmostDiff(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setMatchAlmostDiff(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setMatchAlmostDiff", arg);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_setNumReturnValues(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setNumReturnValues(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setNumReturnValues", arg);
              return NULL;
            }

            static int t_JaspellTernarySearchTrie_set__matchAlmostDiff(t_JaspellTernarySearchTrie *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setMatchAlmostDiff(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "matchAlmostDiff", arg);
              return -1;
            }

            static int t_JaspellTernarySearchTrie_set__numReturnValues(t_JaspellTernarySearchTrie *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setNumReturnValues(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "numReturnValues", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Attribute.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeImpl::class$ = NULL;
        jmethodID *AttributeImpl::mids$ = NULL;
        bool AttributeImpl::live$ = false;

        jclass AttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_clone_3e3d10fb1bca89d9] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/AttributeImpl;");
            mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
            mids$[mid_reflectAsString_46a3600c464a391e] = env->getMethodID(cls, "reflectAsString", "(Z)Ljava/lang/String;");
            mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeImpl::AttributeImpl() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void AttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
        }

        AttributeImpl AttributeImpl::clone() const
        {
          return AttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_3e3d10fb1bca89d9]));
        }

        void AttributeImpl::copyTo(const AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_26346c38ebc9c090], a0.this$);
        }

        void AttributeImpl::end() const
        {
          env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
        }

        ::java::lang::String AttributeImpl::reflectAsString(jboolean a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_reflectAsString_46a3600c464a391e], a0));
        }

        void AttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AttributeImpl_init_(t_AttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeImpl_clear(t_AttributeImpl *self);
        static PyObject *t_AttributeImpl_clone(t_AttributeImpl *self);
        static PyObject *t_AttributeImpl_copyTo(t_AttributeImpl *self, PyObject *arg);
        static PyObject *t_AttributeImpl_end(t_AttributeImpl *self);
        static PyObject *t_AttributeImpl_reflectAsString(t_AttributeImpl *self, PyObject *arg);
        static PyObject *t_AttributeImpl_reflectWith(t_AttributeImpl *self, PyObject *arg);

        static PyMethodDef t_AttributeImpl__methods_[] = {
          DECLARE_METHOD(t_AttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeImpl, clear, METH_NOARGS),
          DECLARE_METHOD(t_AttributeImpl, clone, METH_NOARGS),
          DECLARE_METHOD(t_AttributeImpl, copyTo, METH_O),
          DECLARE_METHOD(t_AttributeImpl, end, METH_NOARGS),
          DECLARE_METHOD(t_AttributeImpl, reflectAsString, METH_O),
          DECLARE_METHOD(t_AttributeImpl, reflectWith, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(AttributeImpl)[] = {
          { Py_tp_methods, t_AttributeImpl__methods_ },
          { Py_tp_init, (void *) t_AttributeImpl_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(AttributeImpl)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(AttributeImpl, t_AttributeImpl, AttributeImpl);

        void t_AttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeImpl), &PY_TYPE_DEF(AttributeImpl), module, "AttributeImpl", 0);
        }

        void t_AttributeImpl::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(AttributeImpl), "class_", make_descriptor(AttributeImpl::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(AttributeImpl), "wrapfn_", make_descriptor(t_AttributeImpl::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(AttributeImpl), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeImpl::initializeClass, 1)))
            return NULL;
          return t_AttributeImpl::wrap_Object(AttributeImpl(((t_AttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_AttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AttributeImpl_init_(t_AttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          AttributeImpl object((jobject) NULL);

          INT_CALL(object = AttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_AttributeImpl_clear(t_AttributeImpl *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_AttributeImpl_clone(t_AttributeImpl *self)
        {
          AttributeImpl result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_AttributeImpl::wrap_Object(result);
        }

        static PyObject *t_AttributeImpl_copyTo(t_AttributeImpl *self, PyObject *arg)
        {
          AttributeImpl a0((jobject) NULL);

          if (!parseArg(arg, "k", AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyTo", arg);
          return NULL;
        }

        static PyObject *t_AttributeImpl_end(t_AttributeImpl *self)
        {
          OBJ_CALL(self->object.end());
          Py_RETURN_NONE;
        }

        static PyObject *t_AttributeImpl_reflectAsString(t_AttributeImpl *self, PyObject *arg)
        {
          jboolean a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.reflectAsString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "reflectAsString", arg);
          return NULL;
        }

        static PyObject *t_AttributeImpl_reflectWith(t_AttributeImpl *self, PyObject *arg)
        {
          ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reflectWith(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reflectWith", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonAnalyzer.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonAnalyzer::class$ = NULL;
        jmethodID *PythonAnalyzer::mids$ = NULL;
        bool PythonAnalyzer::live$ = false;

        jclass PythonAnalyzer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonAnalyzer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_initReader_8dbb4487391277c7] = env->getMethodID(cls, "initReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");
            mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonAnalyzer::PythonAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void PythonAnalyzer::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
        }

        ::java::io::Reader PythonAnalyzer::initReader(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
        {
          return ::java::io::Reader(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::analysis::Analyzer::class$->this$, ::org::apache::lucene::analysis::Analyzer::mids$[::org::apache::lucene::analysis::Analyzer::mid_initReader_8dbb4487391277c7], a0.this$, a1.this$));
        }

        jlong PythonAnalyzer::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
        }

        void PythonAnalyzer::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonAnalyzer_init_(t_PythonAnalyzer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonAnalyzer_finalize(t_PythonAnalyzer *self);
        static PyObject *t_PythonAnalyzer_initReader(t_PythonAnalyzer *self, PyObject *args);
        static PyObject *t_PythonAnalyzer_pythonExtension(t_PythonAnalyzer *self, PyObject *args);
        static jobject JNICALL t_PythonAnalyzer_createComponents0(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonAnalyzer_initReader1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
        static void JNICALL t_PythonAnalyzer_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonAnalyzer_get__self(t_PythonAnalyzer *self, void *data);
        static PyGetSetDef t_PythonAnalyzer__fields_[] = {
          DECLARE_GET_FIELD(t_PythonAnalyzer, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonAnalyzer__methods_[] = {
          DECLARE_METHOD(t_PythonAnalyzer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAnalyzer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAnalyzer, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonAnalyzer, initReader, METH_VARARGS),
          DECLARE_METHOD(t_PythonAnalyzer, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PythonAnalyzer)[] = {
          { Py_tp_methods, t_PythonAnalyzer__methods_ },
          { Py_tp_init, (void *) t_PythonAnalyzer_init_ },
          { Py_tp_getset, t_PythonAnalyzer__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PythonAnalyzer)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::analysis::Analyzer),
          NULL
        };

        DEFINE_TYPE(PythonAnalyzer, t_PythonAnalyzer, PythonAnalyzer);

        void t_PythonAnalyzer::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonAnalyzer), &PY_TYPE_DEF(PythonAnalyzer), module, "PythonAnalyzer", 1);
        }

        void t_PythonAnalyzer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonAnalyzer), "class_", make_descriptor(PythonAnalyzer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonAnalyzer), "wrapfn_", make_descriptor(t_PythonAnalyzer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonAnalyzer), "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonAnalyzer::initializeClass);
          JNINativeMethod methods[] = {
            { "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;", (void *) t_PythonAnalyzer_createComponents0 },
            { "initReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;", (void *) t_PythonAnalyzer_initReader1 },
            { "pythonDecRef", "()V", (void *) t_PythonAnalyzer_pythonDecRef2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonAnalyzer::initializeClass, 1)))
            return NULL;
          return t_PythonAnalyzer::wrap_Object(PythonAnalyzer(((t_PythonAnalyzer *) arg)->object.this$));
        }
        static PyObject *t_PythonAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonAnalyzer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonAnalyzer_init_(t_PythonAnalyzer *self, PyObject *args, PyObject *kwds)
        {
          PythonAnalyzer object((jobject) NULL);

          INT_CALL(object = PythonAnalyzer());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonAnalyzer_finalize(t_PythonAnalyzer *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonAnalyzer_initReader(t_PythonAnalyzer *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::io::Reader a1((jobject) NULL);
          ::java::io::Reader result((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.initReader(a0, a1));
            return ::java::io::t_Reader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "initReader", args);
          return NULL;
        }

        static PyObject *t_PythonAnalyzer_pythonExtension(t_PythonAnalyzer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jobject JNICALL t_PythonAnalyzer_createComponents0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAnalyzer::mids$[PythonAnalyzer::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "createComponents", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents::initializeClass, &value))
          {
            throwTypeError("createComponents", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jobject JNICALL t_PythonAnalyzer_initReader1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAnalyzer::mids$[PythonAnalyzer::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::io::Reader value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *o1 = ::java::io::t_Reader::wrap_Object(::java::io::Reader(a1));
          PyObject *result = PyObject_CallMethod(obj, "initReader", "OO", o0, o1);
          Py_DECREF(o0);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::java::io::Reader::initializeClass, &value))
          {
            throwTypeError("initReader", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonAnalyzer_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonAnalyzer::mids$[PythonAnalyzer::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonAnalyzer::mids$[PythonAnalyzer::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonAnalyzer_get__self(t_PythonAnalyzer *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoBaseShape.h"
#include "org/apache/lucene/spatial3d/geom/GeoShape.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/Bounds.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoBaseShape::class$ = NULL;
          jmethodID *GeoBaseShape::mids$ = NULL;
          bool GeoBaseShape::live$ = false;

          jclass GeoBaseShape::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoBaseShape");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fd580b4e02411290] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;)V");
              mids$[mid_getBounds_bbfc0798cb5fe499] = env->getMethodID(cls, "getBounds", "(Lorg/apache/lucene/spatial3d/geom/Bounds;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GeoBaseShape::GeoBaseShape(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0) : ::org::apache::lucene::spatial3d::geom::BasePlanetObject(env->newObject(initializeClass, &mids$, mid_init$_fd580b4e02411290, a0.this$)) {}

          void GeoBaseShape::getBounds(const ::org::apache::lucene::spatial3d::geom::Bounds & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getBounds_bbfc0798cb5fe499], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoBaseShape_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoBaseShape_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GeoBaseShape_init_(t_GeoBaseShape *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GeoBaseShape_getBounds(t_GeoBaseShape *self, PyObject *arg);

          static PyMethodDef t_GeoBaseShape__methods_[] = {
            DECLARE_METHOD(t_GeoBaseShape, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoBaseShape, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoBaseShape, getBounds, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoBaseShape)[] = {
            { Py_tp_methods, t_GeoBaseShape__methods_ },
            { Py_tp_init, (void *) t_GeoBaseShape_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoBaseShape)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::BasePlanetObject),
            NULL
          };

          DEFINE_TYPE(GeoBaseShape, t_GeoBaseShape, GeoBaseShape);

          void t_GeoBaseShape::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoBaseShape), &PY_TYPE_DEF(GeoBaseShape), module, "GeoBaseShape", 0);
          }

          void t_GeoBaseShape::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseShape), "class_", make_descriptor(GeoBaseShape::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseShape), "wrapfn_", make_descriptor(t_GeoBaseShape::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseShape), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoBaseShape_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoBaseShape::initializeClass, 1)))
              return NULL;
            return t_GeoBaseShape::wrap_Object(GeoBaseShape(((t_GeoBaseShape *) arg)->object.this$));
          }
          static PyObject *t_GeoBaseShape_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoBaseShape::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GeoBaseShape_init_(t_GeoBaseShape *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            GeoBaseShape object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0))
            {
              INT_CALL(object = GeoBaseShape(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GeoBaseShape_getBounds(t_GeoBaseShape *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::Bounds a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::Bounds::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getBounds(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getBounds", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LengthFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/miscellaneous/LengthFilter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LengthFilterFactory::class$ = NULL;
          jmethodID *LengthFilterFactory::mids$ = NULL;
          bool LengthFilterFactory::live$ = false;
          ::java::lang::String *LengthFilterFactory::MAX_KEY = NULL;
          ::java::lang::String *LengthFilterFactory::MIN_KEY = NULL;
          ::java::lang::String *LengthFilterFactory::NAME = NULL;

          jclass LengthFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LengthFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6630362781650674] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/LengthFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              MAX_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_KEY", "Ljava/lang/String;"));
              MIN_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MIN_KEY", "Ljava/lang/String;"));
              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LengthFilterFactory::LengthFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::LengthFilter LengthFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::LengthFilter(env->callObjectMethod(this$, mids$[mid_create_6630362781650674], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LengthFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LengthFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LengthFilterFactory_init_(t_LengthFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LengthFilterFactory_create(t_LengthFilterFactory *self, PyObject *args);

          static PyMethodDef t_LengthFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LengthFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LengthFilterFactory)[] = {
            { Py_tp_methods, t_LengthFilterFactory__methods_ },
            { Py_tp_init, (void *) t_LengthFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LengthFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(LengthFilterFactory, t_LengthFilterFactory, LengthFilterFactory);

          void t_LengthFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LengthFilterFactory), &PY_TYPE_DEF(LengthFilterFactory), module, "LengthFilterFactory", 0);
          }

          void t_LengthFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LengthFilterFactory), "class_", make_descriptor(LengthFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LengthFilterFactory), "wrapfn_", make_descriptor(t_LengthFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LengthFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(LengthFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(LengthFilterFactory), "MAX_KEY", make_descriptor(j2p(*LengthFilterFactory::MAX_KEY)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LengthFilterFactory), "MIN_KEY", make_descriptor(j2p(*LengthFilterFactory::MIN_KEY)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LengthFilterFactory), "NAME", make_descriptor(j2p(*LengthFilterFactory::NAME)));
          }

          static PyObject *t_LengthFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LengthFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LengthFilterFactory::wrap_Object(LengthFilterFactory(((t_LengthFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LengthFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LengthFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LengthFilterFactory_init_(t_LengthFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LengthFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LengthFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LengthFilterFactory_create(t_LengthFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::LengthFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_LengthFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(LengthFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/DrillDownQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/facet/DrillDownQuery.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *DrillDownQuery::class$ = NULL;
        jmethodID *DrillDownQuery::mids$ = NULL;
        bool DrillDownQuery::live$ = false;

        jclass DrillDownQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/DrillDownQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0d3b7412b5899d32] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/FacetsConfig;)V");
            mids$[mid_init$_dc4aa9d4f9421600] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/search/Query;)V");
            mids$[mid_add_e15507bf45c25446] = env->getMethodID(cls, "add", "(Ljava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_add_d9e232bc64b71af0] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;)V");
            mids$[mid_clone_a02b694f45580309] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/facet/DrillDownQuery;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_term_69c081e62d1b5d42] = env->getStaticMethodID(cls, "term", "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/index/Term;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DrillDownQuery::DrillDownQuery(const ::org::apache::lucene::facet::FacetsConfig & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_0d3b7412b5899d32, a0.this$)) {}

        DrillDownQuery::DrillDownQuery(const ::org::apache::lucene::facet::FacetsConfig & a0, const ::org::apache::lucene::search::Query & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_dc4aa9d4f9421600, a0.this$, a1.this$)) {}

        void DrillDownQuery::add(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_e15507bf45c25446], a0.this$, a1.this$);
        }

        void DrillDownQuery::add(const ::java::lang::String & a0, const ::org::apache::lucene::search::Query & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_d9e232bc64b71af0], a0.this$, a1.this$);
        }

        DrillDownQuery DrillDownQuery::clone() const
        {
          return DrillDownQuery(env->callObjectMethod(this$, mids$[mid_clone_a02b694f45580309]));
        }

        jboolean DrillDownQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint DrillDownQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::Query DrillDownQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
        }

        ::org::apache::lucene::index::Term DrillDownQuery::term(const ::java::lang::String & a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::Term(env->callStaticObjectMethod(cls, mids$[mid_term_69c081e62d1b5d42], a0.this$, a1.this$, a2.this$));
        }

        ::java::lang::String DrillDownQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void DrillDownQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_DrillDownQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DrillDownQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DrillDownQuery_init_(t_DrillDownQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DrillDownQuery_add(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_clone(t_DrillDownQuery *self);
        static PyObject *t_DrillDownQuery_equals(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_hashCode(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_rewrite(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_term(PyTypeObject *type, PyObject *args);
        static PyObject *t_DrillDownQuery_toString(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_visit(t_DrillDownQuery *self, PyObject *args);

        static PyMethodDef t_DrillDownQuery__methods_[] = {
          DECLARE_METHOD(t_DrillDownQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillDownQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillDownQuery, add, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, clone, METH_NOARGS),
          DECLARE_METHOD(t_DrillDownQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, term, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DrillDownQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DrillDownQuery)[] = {
          { Py_tp_methods, t_DrillDownQuery__methods_ },
          { Py_tp_init, (void *) t_DrillDownQuery_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DrillDownQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(DrillDownQuery, t_DrillDownQuery, DrillDownQuery);

        void t_DrillDownQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(DrillDownQuery), &PY_TYPE_DEF(DrillDownQuery), module, "DrillDownQuery", 0);
        }

        void t_DrillDownQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DrillDownQuery), "class_", make_descriptor(DrillDownQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DrillDownQuery), "wrapfn_", make_descriptor(t_DrillDownQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DrillDownQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DrillDownQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DrillDownQuery::initializeClass, 1)))
            return NULL;
          return t_DrillDownQuery::wrap_Object(DrillDownQuery(((t_DrillDownQuery *) arg)->object.this$));
        }
        static PyObject *t_DrillDownQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DrillDownQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DrillDownQuery_init_(t_DrillDownQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::facet::FacetsConfig a0((jobject) NULL);
              DrillDownQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::facet::FacetsConfig::initializeClass, &a0))
              {
                INT_CALL(object = DrillDownQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::facet::FacetsConfig a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              DrillDownQuery object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DrillDownQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DrillDownQuery_add(t_DrillDownQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);

              if (!parseArgs(args, "s[s", &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_DrillDownQuery_clone(t_DrillDownQuery *self)
        {
          DrillDownQuery result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_DrillDownQuery::wrap_Object(result);
        }

        static PyObject *t_DrillDownQuery_equals(t_DrillDownQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(DrillDownQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DrillDownQuery_hashCode(t_DrillDownQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(DrillDownQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DrillDownQuery_rewrite(t_DrillDownQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(DrillDownQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_DrillDownQuery_term(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::String > a2((jobject) NULL);
          ::org::apache::lucene::index::Term result((jobject) NULL);

          if (!parseArgs(args, "ss[s", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::facet::DrillDownQuery::term(a0, a1, a2));
            return ::org::apache::lucene::index::t_Term::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "term", args);
          return NULL;
        }

        static PyObject *t_DrillDownQuery_toString(t_DrillDownQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(DrillDownQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DrillDownQuery_visit(t_DrillDownQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(DrillDownQuery), (PyObject *) self, "visit", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RAMFile.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RAMFile::class$ = NULL;
        jmethodID *RAMFile::mids$ = NULL;
        bool RAMFile::live$ = false;

        jclass RAMFile::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RAMFile");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getLength_2e5ae9edcb9b072f] = env->getMethodID(cls, "getLength", "()J");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_getBuffer_81fae1e0e2d0070b] = env->getMethodID(cls, "getBuffer", "(I)[B");
            mids$[mid_newBuffer_81fae1e0e2d0070b] = env->getMethodID(cls, "newBuffer", "(I)[B");
            mids$[mid_numBuffers_9972fcc56b44e79d] = env->getMethodID(cls, "numBuffers", "()I");
            mids$[mid_addBuffer_81fae1e0e2d0070b] = env->getMethodID(cls, "addBuffer", "(I)[B");
            mids$[mid_setLength_9c778c9bce6694df] = env->getMethodID(cls, "setLength", "(J)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RAMFile::RAMFile() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean RAMFile::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jlong RAMFile::getLength() const
        {
          return env->callLongMethod(this$, mids$[mid_getLength_2e5ae9edcb9b072f]);
        }

        jint RAMFile::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jlong RAMFile::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        ::java::lang::String RAMFile::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RAMFile_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RAMFile_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RAMFile_init_(t_RAMFile *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RAMFile_equals(t_RAMFile *self, PyObject *args);
        static PyObject *t_RAMFile_getLength(t_RAMFile *self);
        static PyObject *t_RAMFile_hashCode(t_RAMFile *self, PyObject *args);
        static PyObject *t_RAMFile_ramBytesUsed(t_RAMFile *self);
        static PyObject *t_RAMFile_toString(t_RAMFile *self, PyObject *args);
        static PyObject *t_RAMFile_get__length(t_RAMFile *self, void *data);
        static PyGetSetDef t_RAMFile__fields_[] = {
          DECLARE_GET_FIELD(t_RAMFile, length),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RAMFile__methods_[] = {
          DECLARE_METHOD(t_RAMFile, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMFile, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMFile, equals, METH_VARARGS),
          DECLARE_METHOD(t_RAMFile, getLength, METH_NOARGS),
          DECLARE_METHOD(t_RAMFile, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_RAMFile, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_RAMFile, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RAMFile)[] = {
          { Py_tp_methods, t_RAMFile__methods_ },
          { Py_tp_init, (void *) t_RAMFile_init_ },
          { Py_tp_getset, t_RAMFile__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RAMFile)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(RAMFile, t_RAMFile, RAMFile);

        void t_RAMFile::install(PyObject *module)
        {
          installType(&PY_TYPE(RAMFile), &PY_TYPE_DEF(RAMFile), module, "RAMFile", 0);
        }

        void t_RAMFile::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RAMFile), "class_", make_descriptor(RAMFile::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RAMFile), "wrapfn_", make_descriptor(t_RAMFile::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RAMFile), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RAMFile_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RAMFile::initializeClass, 1)))
            return NULL;
          return t_RAMFile::wrap_Object(RAMFile(((t_RAMFile *) arg)->object.this$));
        }
        static PyObject *t_RAMFile_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RAMFile::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RAMFile_init_(t_RAMFile *self, PyObject *args, PyObject *kwds)
        {
          RAMFile object((jobject) NULL);

          INT_CALL(object = RAMFile());
          self->object = object;

          return 0;
        }

        static PyObject *t_RAMFile_equals(t_RAMFile *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(RAMFile), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_RAMFile_getLength(t_RAMFile *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getLength());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RAMFile_hashCode(t_RAMFile *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(RAMFile), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_RAMFile_ramBytesUsed(t_RAMFile *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RAMFile_toString(t_RAMFile *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(RAMFile), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_RAMFile_get__length(t_RAMFile *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getLength());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/SimplePatternTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *SimplePatternTokenizer::class$ = NULL;
          jmethodID *SimplePatternTokenizer::mids$ = NULL;
          bool SimplePatternTokenizer::live$ = false;

          jclass SimplePatternTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/SimplePatternTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_06c1b4541f684199] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_init$_f84c6abc4ac25b63] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_init$_10e85ca44ef866b2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/lang/String;I)V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimplePatternTokenizer::SimplePatternTokenizer(const ::java::lang::String & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

          SimplePatternTokenizer::SimplePatternTokenizer(const ::org::apache::lucene::util::automaton::Automaton & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_06c1b4541f684199, a0.this$)) {}

          SimplePatternTokenizer::SimplePatternTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::org::apache::lucene::util::automaton::Automaton & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_f84c6abc4ac25b63, a0.this$, a1.this$)) {}

          SimplePatternTokenizer::SimplePatternTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::lang::String & a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_10e85ca44ef866b2, a0.this$, a1.this$, a2)) {}

          void SimplePatternTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean SimplePatternTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void SimplePatternTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_SimplePatternTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimplePatternTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimplePatternTokenizer_init_(t_SimplePatternTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimplePatternTokenizer_end(t_SimplePatternTokenizer *self, PyObject *args);
          static PyObject *t_SimplePatternTokenizer_incrementToken(t_SimplePatternTokenizer *self, PyObject *args);
          static PyObject *t_SimplePatternTokenizer_reset(t_SimplePatternTokenizer *self, PyObject *args);

          static PyMethodDef t_SimplePatternTokenizer__methods_[] = {
            DECLARE_METHOD(t_SimplePatternTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimplePatternTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimplePatternTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_SimplePatternTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_SimplePatternTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimplePatternTokenizer)[] = {
            { Py_tp_methods, t_SimplePatternTokenizer__methods_ },
            { Py_tp_init, (void *) t_SimplePatternTokenizer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimplePatternTokenizer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Tokenizer),
            NULL
          };

          DEFINE_TYPE(SimplePatternTokenizer, t_SimplePatternTokenizer, SimplePatternTokenizer);

          void t_SimplePatternTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(SimplePatternTokenizer), &PY_TYPE_DEF(SimplePatternTokenizer), module, "SimplePatternTokenizer", 0);
          }

          void t_SimplePatternTokenizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimplePatternTokenizer), "class_", make_descriptor(SimplePatternTokenizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimplePatternTokenizer), "wrapfn_", make_descriptor(t_SimplePatternTokenizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimplePatternTokenizer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimplePatternTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimplePatternTokenizer::initializeClass, 1)))
              return NULL;
            return t_SimplePatternTokenizer::wrap_Object(SimplePatternTokenizer(((t_SimplePatternTokenizer *) arg)->object.this$));
          }
          static PyObject *t_SimplePatternTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimplePatternTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimplePatternTokenizer_init_(t_SimplePatternTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                SimplePatternTokenizer object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = SimplePatternTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                SimplePatternTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
                {
                  INT_CALL(object = SimplePatternTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
                SimplePatternTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SimplePatternTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                SimplePatternTokenizer object((jobject) NULL);

                if (!parseArgs(args, "ksI", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SimplePatternTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimplePatternTokenizer_end(t_SimplePatternTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimplePatternTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_SimplePatternTokenizer_incrementToken(t_SimplePatternTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SimplePatternTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_SimplePatternTokenizer_reset(t_SimplePatternTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimplePatternTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoPolygon.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoPolygon::class$ = NULL;
          jmethodID *GeoPolygon::mids$ = NULL;
          bool GeoPolygon::live$ = false;

          jclass GeoPolygon::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoPolygon");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoPolygon_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoPolygon_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_GeoPolygon__methods_[] = {
            DECLARE_METHOD(t_GeoPolygon, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoPolygon, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoPolygon)[] = {
            { Py_tp_methods, t_GeoPolygon__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoPolygon)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::GeoAreaShape),
            NULL
          };

          DEFINE_TYPE(GeoPolygon, t_GeoPolygon, GeoPolygon);

          void t_GeoPolygon::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoPolygon), &PY_TYPE_DEF(GeoPolygon), module, "GeoPolygon", 0);
          }

          void t_GeoPolygon::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPolygon), "class_", make_descriptor(GeoPolygon::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPolygon), "wrapfn_", make_descriptor(t_GeoPolygon::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPolygon), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoPolygon_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoPolygon::initializeClass, 1)))
              return NULL;
            return t_GeoPolygon::wrap_Object(GeoPolygon(((t_GeoPolygon *) arg)->object.this$));
          }
          static PyObject *t_GeoPolygon_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoPolygon::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/FixBrokenOffsetsFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *FixBrokenOffsetsFilterFactory::class$ = NULL;
          jmethodID *FixBrokenOffsetsFilterFactory::mids$ = NULL;
          bool FixBrokenOffsetsFilterFactory::live$ = false;
          ::java::lang::String *FixBrokenOffsetsFilterFactory::NAME = NULL;

          jclass FixBrokenOffsetsFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/FixBrokenOffsetsFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FixBrokenOffsetsFilterFactory::FixBrokenOffsetsFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream FixBrokenOffsetsFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_FixBrokenOffsetsFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FixBrokenOffsetsFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FixBrokenOffsetsFilterFactory_init_(t_FixBrokenOffsetsFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FixBrokenOffsetsFilterFactory_create(t_FixBrokenOffsetsFilterFactory *self, PyObject *args);

          static PyMethodDef t_FixBrokenOffsetsFilterFactory__methods_[] = {
            DECLARE_METHOD(t_FixBrokenOffsetsFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FixBrokenOffsetsFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FixBrokenOffsetsFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FixBrokenOffsetsFilterFactory)[] = {
            { Py_tp_methods, t_FixBrokenOffsetsFilterFactory__methods_ },
            { Py_tp_init, (void *) t_FixBrokenOffsetsFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FixBrokenOffsetsFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(FixBrokenOffsetsFilterFactory, t_FixBrokenOffsetsFilterFactory, FixBrokenOffsetsFilterFactory);

          void t_FixBrokenOffsetsFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FixBrokenOffsetsFilterFactory), &PY_TYPE_DEF(FixBrokenOffsetsFilterFactory), module, "FixBrokenOffsetsFilterFactory", 0);
          }

          void t_FixBrokenOffsetsFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FixBrokenOffsetsFilterFactory), "class_", make_descriptor(FixBrokenOffsetsFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FixBrokenOffsetsFilterFactory), "wrapfn_", make_descriptor(t_FixBrokenOffsetsFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FixBrokenOffsetsFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(FixBrokenOffsetsFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FixBrokenOffsetsFilterFactory), "NAME", make_descriptor(j2p(*FixBrokenOffsetsFilterFactory::NAME)));
          }

          static PyObject *t_FixBrokenOffsetsFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FixBrokenOffsetsFilterFactory::initializeClass, 1)))
              return NULL;
            return t_FixBrokenOffsetsFilterFactory::wrap_Object(FixBrokenOffsetsFilterFactory(((t_FixBrokenOffsetsFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_FixBrokenOffsetsFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FixBrokenOffsetsFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FixBrokenOffsetsFilterFactory_init_(t_FixBrokenOffsetsFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            FixBrokenOffsetsFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = FixBrokenOffsetsFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FixBrokenOffsetsFilterFactory_create(t_FixBrokenOffsetsFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FixBrokenOffsetsFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/snowball/SnowballFilter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/tartarus/snowball/SnowballProgram.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {

          ::java::lang::Class *SnowballFilter::class$ = NULL;
          jmethodID *SnowballFilter::mids$ = NULL;
          bool SnowballFilter::live$ = false;

          jclass SnowballFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/snowball/SnowballFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b047379931b7623e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)V");
              mids$[mid_init$_b3a8a384724df4f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/tartarus/snowball/SnowballProgram;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SnowballFilter::SnowballFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_b047379931b7623e, a0.this$, a1.this$)) {}

          SnowballFilter::SnowballFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::tartarus::snowball::SnowballProgram & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_b3a8a384724df4f0, a0.this$, a1.this$)) {}

          jboolean SnowballFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {
          static PyObject *t_SnowballFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SnowballFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SnowballFilter_init_(t_SnowballFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SnowballFilter_incrementToken(t_SnowballFilter *self, PyObject *args);

          static PyMethodDef t_SnowballFilter__methods_[] = {
            DECLARE_METHOD(t_SnowballFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SnowballFilter)[] = {
            { Py_tp_methods, t_SnowballFilter__methods_ },
            { Py_tp_init, (void *) t_SnowballFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SnowballFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(SnowballFilter, t_SnowballFilter, SnowballFilter);

          void t_SnowballFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SnowballFilter), &PY_TYPE_DEF(SnowballFilter), module, "SnowballFilter", 0);
          }

          void t_SnowballFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SnowballFilter), "class_", make_descriptor(SnowballFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SnowballFilter), "wrapfn_", make_descriptor(t_SnowballFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SnowballFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SnowballFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SnowballFilter::initializeClass, 1)))
              return NULL;
            return t_SnowballFilter::wrap_Object(SnowballFilter(((t_SnowballFilter *) arg)->object.this$));
          }
          static PyObject *t_SnowballFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SnowballFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SnowballFilter_init_(t_SnowballFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                SnowballFilter object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SnowballFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::tartarus::snowball::SnowballProgram a1((jobject) NULL);
                SnowballFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::tartarus::snowball::SnowballProgram::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SnowballFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SnowballFilter_incrementToken(t_SnowballFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SnowballFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsFormat::class$ = NULL;
          jmethodID *CompressingStoredFieldsFormat::mids$ = NULL;
          bool CompressingStoredFieldsFormat::live$ = false;

          jclass CompressingStoredFieldsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1b5940461b8aa07f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;III)V");
              mids$[mid_init$_1bd7087d30e64209] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;III)V");
              mids$[mid_fieldsReader_a32861160154ecdb] = env->getMethodID(cls, "fieldsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsReader;");
              mids$[mid_fieldsWriter_e1dda5bd7531bf25] = env->getMethodID(cls, "fieldsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsWriter;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingStoredFieldsFormat::CompressingStoredFieldsFormat(const ::java::lang::String & a0, const ::org::apache::lucene::codecs::compressing::CompressionMode & a1, jint a2, jint a3, jint a4) : ::org::apache::lucene::codecs::StoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_1b5940461b8aa07f, a0.this$, a1.this$, a2, a3, a4)) {}

          CompressingStoredFieldsFormat::CompressingStoredFieldsFormat(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::codecs::compressing::CompressionMode & a2, jint a3, jint a4, jint a5) : ::org::apache::lucene::codecs::StoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_1bd7087d30e64209, a0.this$, a1.this$, a2.this$, a3, a4, a5)) {}

          ::org::apache::lucene::codecs::StoredFieldsReader CompressingStoredFieldsFormat::fieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_fieldsReader_a32861160154ecdb], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::StoredFieldsWriter CompressingStoredFieldsFormat::fieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsWriter(env->callObjectMethod(this$, mids$[mid_fieldsWriter_e1dda5bd7531bf25], a0.this$, a1.this$, a2.this$));
          }

          ::java::lang::String CompressingStoredFieldsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingStoredFieldsFormat_init_(t_CompressingStoredFieldsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingStoredFieldsFormat_fieldsReader(t_CompressingStoredFieldsFormat *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsFormat_fieldsWriter(t_CompressingStoredFieldsFormat *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsFormat_toString(t_CompressingStoredFieldsFormat *self, PyObject *args);

          static PyMethodDef t_CompressingStoredFieldsFormat__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, fieldsReader, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, fieldsWriter, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CompressingStoredFieldsFormat)[] = {
            { Py_tp_methods, t_CompressingStoredFieldsFormat__methods_ },
            { Py_tp_init, (void *) t_CompressingStoredFieldsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CompressingStoredFieldsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::StoredFieldsFormat),
            NULL
          };

          DEFINE_TYPE(CompressingStoredFieldsFormat, t_CompressingStoredFieldsFormat, CompressingStoredFieldsFormat);

          void t_CompressingStoredFieldsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsFormat), &PY_TYPE_DEF(CompressingStoredFieldsFormat), module, "CompressingStoredFieldsFormat", 0);
          }

          void t_CompressingStoredFieldsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingStoredFieldsFormat), "class_", make_descriptor(CompressingStoredFieldsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingStoredFieldsFormat), "wrapfn_", make_descriptor(t_CompressingStoredFieldsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CompressingStoredFieldsFormat), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsFormat::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsFormat::wrap_Object(CompressingStoredFieldsFormat(((t_CompressingStoredFieldsFormat *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingStoredFieldsFormat_init_(t_CompressingStoredFieldsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::codecs::compressing::CompressionMode a1((jobject) NULL);
                jint a2;
                jint a3;
                jint a4;
                CompressingStoredFieldsFormat object((jobject) NULL);

                if (!parseArgs(args, "skIII", ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = CompressingStoredFieldsFormat(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::codecs::compressing::CompressionMode a2((jobject) NULL);
                jint a3;
                jint a4;
                jint a5;
                CompressingStoredFieldsFormat object((jobject) NULL);

                if (!parseArgs(args, "sskIII", ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = CompressingStoredFieldsFormat(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingStoredFieldsFormat_fieldsReader(t_CompressingStoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.fieldsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CompressingStoredFieldsFormat), (PyObject *) self, "fieldsReader", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsFormat_fieldsWriter(t_CompressingStoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.fieldsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_StoredFieldsWriter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CompressingStoredFieldsFormat), (PyObject *) self, "fieldsWriter", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsFormat_toString(t_CompressingStoredFieldsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(CompressingStoredFieldsFormat), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/wikipedia/WikipediaTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/wikipedia/WikipediaTokenizer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace wikipedia {

          ::java::lang::Class *WikipediaTokenizerFactory::class$ = NULL;
          jmethodID *WikipediaTokenizerFactory::mids$ = NULL;
          bool WikipediaTokenizerFactory::live$ = false;
          ::java::lang::String *WikipediaTokenizerFactory::NAME = NULL;
          ::java::lang::String *WikipediaTokenizerFactory::TOKEN_OUTPUT = NULL;
          ::java::lang::String *WikipediaTokenizerFactory::UNTOKENIZED_TYPES = NULL;

          jclass WikipediaTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/wikipedia/WikipediaTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_7456015132de7c2e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;)Lorg/apache/lucene/analysis/wikipedia/WikipediaTokenizer;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              TOKEN_OUTPUT = new ::java::lang::String(env->getStaticObjectField(cls, "TOKEN_OUTPUT", "Ljava/lang/String;"));
              UNTOKENIZED_TYPES = new ::java::lang::String(env->getStaticObjectField(cls, "UNTOKENIZED_TYPES", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WikipediaTokenizerFactory::WikipediaTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::wikipedia::WikipediaTokenizer WikipediaTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0) const
          {
            return ::org::apache::lucene::analysis::wikipedia::WikipediaTokenizer(env->callObjectMethod(this$, mids$[mid_create_7456015132de7c2e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace wikipedia {
          static PyObject *t_WikipediaTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WikipediaTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WikipediaTokenizerFactory_init_(t_WikipediaTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WikipediaTokenizerFactory_create(t_WikipediaTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_WikipediaTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_WikipediaTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WikipediaTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WikipediaTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(WikipediaTokenizerFactory)[] = {
            { Py_tp_methods, t_WikipediaTokenizerFactory__methods_ },
            { Py_tp_init, (void *) t_WikipediaTokenizerFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(WikipediaTokenizerFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenizerFactory),
            NULL
          };

          DEFINE_TYPE(WikipediaTokenizerFactory, t_WikipediaTokenizerFactory, WikipediaTokenizerFactory);

          void t_WikipediaTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(WikipediaTokenizerFactory), &PY_TYPE_DEF(WikipediaTokenizerFactory), module, "WikipediaTokenizerFactory", 0);
          }

          void t_WikipediaTokenizerFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizerFactory), "class_", make_descriptor(WikipediaTokenizerFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizerFactory), "wrapfn_", make_descriptor(t_WikipediaTokenizerFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizerFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(WikipediaTokenizerFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizerFactory), "NAME", make_descriptor(j2p(*WikipediaTokenizerFactory::NAME)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizerFactory), "TOKEN_OUTPUT", make_descriptor(j2p(*WikipediaTokenizerFactory::TOKEN_OUTPUT)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WikipediaTokenizerFactory), "UNTOKENIZED_TYPES", make_descriptor(j2p(*WikipediaTokenizerFactory::UNTOKENIZED_TYPES)));
          }

          static PyObject *t_WikipediaTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WikipediaTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_WikipediaTokenizerFactory::wrap_Object(WikipediaTokenizerFactory(((t_WikipediaTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_WikipediaTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WikipediaTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WikipediaTokenizerFactory_init_(t_WikipediaTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            WikipediaTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = WikipediaTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WikipediaTokenizerFactory_create(t_WikipediaTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::org::apache::lucene::analysis::wikipedia::WikipediaTokenizer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::wikipedia::t_WikipediaTokenizer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(WikipediaTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanMultiTermQueryWrapper::class$ = NULL;
          jmethodID *SpanMultiTermQueryWrapper::mids$ = NULL;
          bool SpanMultiTermQueryWrapper::live$ = false;
          ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod *SpanMultiTermQueryWrapper::SCORING_SPAN_QUERY_REWRITE = NULL;

          jclass SpanMultiTermQueryWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanMultiTermQueryWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_304a6c9d92f0ee27] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/MultiTermQuery;)V");
              mids$[mid_createWeight_5baab4cc5ccc46b6] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/spans/SpanWeight;");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getRewriteMethod_92d032528eebf7d1] = env->getMethodID(cls, "getRewriteMethod", "()Lorg/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod;");
              mids$[mid_getWrappedQuery_cbf839a480265450] = env->getMethodID(cls, "getWrappedQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setRewriteMethod_c3a332ad9b6c0a8a] = env->getMethodID(cls, "setRewriteMethod", "(Lorg/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod;)V");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              SCORING_SPAN_QUERY_REWRITE = new ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod(env->getStaticObjectField(cls, "SCORING_SPAN_QUERY_REWRITE", "Lorg/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanMultiTermQueryWrapper::SpanMultiTermQueryWrapper(const ::org::apache::lucene::search::MultiTermQuery & a0) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_304a6c9d92f0ee27, a0.this$)) {}

          ::org::apache::lucene::search::spans::SpanWeight SpanMultiTermQueryWrapper::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::spans::SpanWeight(env->callObjectMethod(this$, mids$[mid_createWeight_5baab4cc5ccc46b6], a0.this$, a1.this$, a2));
          }

          jboolean SpanMultiTermQueryWrapper::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::java::lang::String SpanMultiTermQueryWrapper::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod SpanMultiTermQueryWrapper::getRewriteMethod() const
          {
            return ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod(env->callObjectMethod(this$, mids$[mid_getRewriteMethod_92d032528eebf7d1]));
          }

          ::org::apache::lucene::search::Query SpanMultiTermQueryWrapper::getWrappedQuery() const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getWrappedQuery_cbf839a480265450]));
          }

          jint SpanMultiTermQueryWrapper::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::search::Query SpanMultiTermQueryWrapper::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
          }

          void SpanMultiTermQueryWrapper::setRewriteMethod(const ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setRewriteMethod_c3a332ad9b6c0a8a], a0.this$);
          }

          ::java::lang::String SpanMultiTermQueryWrapper::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }

          void SpanMultiTermQueryWrapper::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanMultiTermQueryWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper_of_(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static int t_SpanMultiTermQueryWrapper_init_(t_SpanMultiTermQueryWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanMultiTermQueryWrapper_createWeight(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_equals(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_getField(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_getRewriteMethod(t_SpanMultiTermQueryWrapper *self);
          static PyObject *t_SpanMultiTermQueryWrapper_getWrappedQuery(t_SpanMultiTermQueryWrapper *self);
          static PyObject *t_SpanMultiTermQueryWrapper_hashCode(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_rewrite(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_setRewriteMethod(t_SpanMultiTermQueryWrapper *self, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper_toString(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_visit(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_get__field(t_SpanMultiTermQueryWrapper *self, void *data);
          static PyObject *t_SpanMultiTermQueryWrapper_get__rewriteMethod(t_SpanMultiTermQueryWrapper *self, void *data);
          static int t_SpanMultiTermQueryWrapper_set__rewriteMethod(t_SpanMultiTermQueryWrapper *self, PyObject *arg, void *data);
          static PyObject *t_SpanMultiTermQueryWrapper_get__wrappedQuery(t_SpanMultiTermQueryWrapper *self, void *data);
          static PyObject *t_SpanMultiTermQueryWrapper_get__parameters_(t_SpanMultiTermQueryWrapper *self, void *data);
          static PyGetSetDef t_SpanMultiTermQueryWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper, field),
            DECLARE_GETSET_FIELD(t_SpanMultiTermQueryWrapper, rewriteMethod),
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper, wrappedQuery),
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanMultiTermQueryWrapper__methods_[] = {
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, of_, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, getRewriteMethod, METH_NOARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, getWrappedQuery, METH_NOARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, setRewriteMethod, METH_O),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, toString, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanMultiTermQueryWrapper)[] = {
            { Py_tp_methods, t_SpanMultiTermQueryWrapper__methods_ },
            { Py_tp_init, (void *) t_SpanMultiTermQueryWrapper_init_ },
            { Py_tp_getset, t_SpanMultiTermQueryWrapper__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanMultiTermQueryWrapper)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanQuery),
            NULL
          };

          DEFINE_TYPE(SpanMultiTermQueryWrapper, t_SpanMultiTermQueryWrapper, SpanMultiTermQueryWrapper);
          PyObject *t_SpanMultiTermQueryWrapper::wrap_Object(const SpanMultiTermQueryWrapper& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper *self = (t_SpanMultiTermQueryWrapper *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SpanMultiTermQueryWrapper::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper *self = (t_SpanMultiTermQueryWrapper *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SpanMultiTermQueryWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanMultiTermQueryWrapper), &PY_TYPE_DEF(SpanMultiTermQueryWrapper), module, "SpanMultiTermQueryWrapper", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanMultiTermQueryWrapper), "TopTermsSpanBooleanQueryRewrite", make_descriptor(&PY_TYPE_DEF(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanMultiTermQueryWrapper), "SpanRewriteMethod", make_descriptor(&PY_TYPE_DEF(SpanMultiTermQueryWrapper$SpanRewriteMethod)));
          }

          void t_SpanMultiTermQueryWrapper::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanMultiTermQueryWrapper), "class_", make_descriptor(SpanMultiTermQueryWrapper::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanMultiTermQueryWrapper), "wrapfn_", make_descriptor(t_SpanMultiTermQueryWrapper::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanMultiTermQueryWrapper), "boxfn_", make_descriptor(boxObject));
            env->getClass(SpanMultiTermQueryWrapper::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanMultiTermQueryWrapper), "SCORING_SPAN_QUERY_REWRITE", make_descriptor(::org::apache::lucene::search::spans::t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(*SpanMultiTermQueryWrapper::SCORING_SPAN_QUERY_REWRITE)));
          }

          static PyObject *t_SpanMultiTermQueryWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanMultiTermQueryWrapper::initializeClass, 1)))
              return NULL;
            return t_SpanMultiTermQueryWrapper::wrap_Object(SpanMultiTermQueryWrapper(((t_SpanMultiTermQueryWrapper *) arg)->object.this$));
          }
          static PyObject *t_SpanMultiTermQueryWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanMultiTermQueryWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanMultiTermQueryWrapper_of_(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SpanMultiTermQueryWrapper_init_(t_SpanMultiTermQueryWrapper *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::MultiTermQuery a0((jobject) NULL);
            SpanMultiTermQueryWrapper object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0))
            {
              INT_CALL(object = SpanMultiTermQueryWrapper(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanMultiTermQueryWrapper_createWeight(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
            PyTypeObject **p1;
            jfloat a2;
            ::org::apache::lucene::search::spans::SpanWeight result((jobject) NULL);

            if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_SpanWeight::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_equals(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_getField(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_getRewriteMethod(t_SpanMultiTermQueryWrapper *self)
          {
            ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod result((jobject) NULL);
            OBJ_CALL(result = self->object.getRewriteMethod());
            return ::org::apache::lucene::search::spans::t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(result);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_getWrappedQuery(t_SpanMultiTermQueryWrapper *self)
          {
            ::org::apache::lucene::search::Query result((jobject) NULL);
            OBJ_CALL(result = self->object.getWrappedQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_hashCode(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_rewrite(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_setRewriteMethod(t_SpanMultiTermQueryWrapper *self, PyObject *arg)
          {
            ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, &a0, &p0, ::org::apache::lucene::search::spans::t_SpanMultiTermQueryWrapper$SpanRewriteMethod::parameters_))
            {
              OBJ_CALL(self->object.setRewriteMethod(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setRewriteMethod", arg);
            return NULL;
          }

          static PyObject *t_SpanMultiTermQueryWrapper_toString(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_visit(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "visit", args, 2);
          }
          static PyObject *t_SpanMultiTermQueryWrapper_get__parameters_(t_SpanMultiTermQueryWrapper *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SpanMultiTermQueryWrapper_get__field(t_SpanMultiTermQueryWrapper *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_get__rewriteMethod(t_SpanMultiTermQueryWrapper *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod value((jobject) NULL);
            OBJ_CALL(value = self->object.getRewriteMethod());
            return ::org::apache::lucene::search::spans::t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(value);
          }
          static int t_SpanMultiTermQueryWrapper_set__rewriteMethod(t_SpanMultiTermQueryWrapper *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, &value))
              {
                INT_CALL(self->object.setRewriteMethod(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "rewriteMethod", arg);
            return -1;
          }

          static PyObject *t_SpanMultiTermQueryWrapper_get__wrappedQuery(t_SpanMultiTermQueryWrapper *self, void *data)
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            OBJ_CALL(value = self->object.getWrappedQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/XYZBounds.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/spatial3d/geom/Plane.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "java/lang/Double.h"
#include "java/lang/String.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/Bounds.h"
#include "org/apache/lucene/spatial3d/geom/Membership.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *XYZBounds::class$ = NULL;
          jmethodID *XYZBounds::mids$ = NULL;
          bool XYZBounds::live$ = false;

          jclass XYZBounds::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/XYZBounds");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_addHorizontalPlane_de702abaccff8809] = env->getMethodID(cls, "addHorizontalPlane", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DLorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addIntersection_d5756c2a9618cc36] = env->getMethodID(cls, "addIntersection", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addPlane_2c04f33e2d449d53] = env->getMethodID(cls, "addPlane", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addPoint_deac40038f0b88f4] = env->getMethodID(cls, "addPoint", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addVerticalPlane_de702abaccff8809] = env->getMethodID(cls, "addVerticalPlane", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DLorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addXValue_deac40038f0b88f4] = env->getMethodID(cls, "addXValue", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addXValue_0b14e9907b1550eb] = env->getMethodID(cls, "addXValue", "(D)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addYValue_deac40038f0b88f4] = env->getMethodID(cls, "addYValue", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addYValue_0b14e9907b1550eb] = env->getMethodID(cls, "addYValue", "(D)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addZValue_deac40038f0b88f4] = env->getMethodID(cls, "addZValue", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addZValue_0b14e9907b1550eb] = env->getMethodID(cls, "addZValue", "(D)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_getMaximumX_a3794238a110f68c] = env->getMethodID(cls, "getMaximumX", "()Ljava/lang/Double;");
              mids$[mid_getMaximumY_a3794238a110f68c] = env->getMethodID(cls, "getMaximumY", "()Ljava/lang/Double;");
              mids$[mid_getMaximumZ_a3794238a110f68c] = env->getMethodID(cls, "getMaximumZ", "()Ljava/lang/Double;");
              mids$[mid_getMinimumX_a3794238a110f68c] = env->getMethodID(cls, "getMinimumX", "()Ljava/lang/Double;");
              mids$[mid_getMinimumY_a3794238a110f68c] = env->getMethodID(cls, "getMinimumY", "()Ljava/lang/Double;");
              mids$[mid_getMinimumZ_a3794238a110f68c] = env->getMethodID(cls, "getMinimumZ", "()Ljava/lang/Double;");
              mids$[mid_isLargestMaxX_0ce63da7ce8826bc] = env->getMethodID(cls, "isLargestMaxX", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;)Z");
              mids$[mid_isLargestMaxY_0ce63da7ce8826bc] = env->getMethodID(cls, "isLargestMaxY", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;)Z");
              mids$[mid_isLargestMaxZ_0ce63da7ce8826bc] = env->getMethodID(cls, "isLargestMaxZ", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;)Z");
              mids$[mid_isSmallestMinX_0ce63da7ce8826bc] = env->getMethodID(cls, "isSmallestMinX", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;)Z");
              mids$[mid_isSmallestMinY_0ce63da7ce8826bc] = env->getMethodID(cls, "isSmallestMinY", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;)Z");
              mids$[mid_isSmallestMinZ_0ce63da7ce8826bc] = env->getMethodID(cls, "isSmallestMinZ", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;)Z");
              mids$[mid_isWide_6f0a6687d3a83671] = env->getMethodID(cls, "isWide", "()Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_noBottomLatitudeBound_6f0a6687d3a83671] = env->getMethodID(cls, "noBottomLatitudeBound", "()Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_noBound_650181d6a64cb6dd] = env->getMethodID(cls, "noBound", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_noLongitudeBound_6f0a6687d3a83671] = env->getMethodID(cls, "noLongitudeBound", "()Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_noTopLatitudeBound_6f0a6687d3a83671] = env->getMethodID(cls, "noTopLatitudeBound", "()Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          XYZBounds::XYZBounds() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::spatial3d::geom::Bounds XYZBounds::addHorizontalPlane(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, const ::org::apache::lucene::spatial3d::geom::Plane & a2, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a3) const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_addHorizontalPlane_de702abaccff8809], a0.this$, a1, a2.this$, a3.this$));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds XYZBounds::addIntersection(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::Plane & a1, const ::org::apache::lucene::spatial3d::geom::Plane & a2, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a3) const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_addIntersection_d5756c2a9618cc36], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds XYZBounds::addPlane(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::Plane & a1, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a2) const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_addPlane_2c04f33e2d449d53], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds XYZBounds::addPoint(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0) const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_addPoint_deac40038f0b88f4], a0.this$));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds XYZBounds::addVerticalPlane(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, const ::org::apache::lucene::spatial3d::geom::Plane & a2, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a3) const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_addVerticalPlane_de702abaccff8809], a0.this$, a1, a2.this$, a3.this$));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds XYZBounds::addXValue(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0) const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_addXValue_deac40038f0b88f4], a0.this$));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds XYZBounds::addXValue(jdouble a0) const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_addXValue_0b14e9907b1550eb], a0));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds XYZBounds::addYValue(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0) const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_addYValue_deac40038f0b88f4], a0.this$));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds XYZBounds::addYValue(jdouble a0) const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_addYValue_0b14e9907b1550eb], a0));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds XYZBounds::addZValue(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0) const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_addZValue_deac40038f0b88f4], a0.this$));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds XYZBounds::addZValue(jdouble a0) const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_addZValue_0b14e9907b1550eb], a0));
          }

          ::java::lang::Double XYZBounds::getMaximumX() const
          {
            return ::java::lang::Double(env->callObjectMethod(this$, mids$[mid_getMaximumX_a3794238a110f68c]));
          }

          ::java::lang::Double XYZBounds::getMaximumY() const
          {
            return ::java::lang::Double(env->callObjectMethod(this$, mids$[mid_getMaximumY_a3794238a110f68c]));
          }

          ::java::lang::Double XYZBounds::getMaximumZ() const
          {
            return ::java::lang::Double(env->callObjectMethod(this$, mids$[mid_getMaximumZ_a3794238a110f68c]));
          }

          ::java::lang::Double XYZBounds::getMinimumX() const
          {
            return ::java::lang::Double(env->callObjectMethod(this$, mids$[mid_getMinimumX_a3794238a110f68c]));
          }

          ::java::lang::Double XYZBounds::getMinimumY() const
          {
            return ::java::lang::Double(env->callObjectMethod(this$, mids$[mid_getMinimumY_a3794238a110f68c]));
          }

          ::java::lang::Double XYZBounds::getMinimumZ() const
          {
            return ::java::lang::Double(env->callObjectMethod(this$, mids$[mid_getMinimumZ_a3794238a110f68c]));
          }

          jboolean XYZBounds::isLargestMaxX(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isLargestMaxX_0ce63da7ce8826bc], a0.this$);
          }

          jboolean XYZBounds::isLargestMaxY(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isLargestMaxY_0ce63da7ce8826bc], a0.this$);
          }

          jboolean XYZBounds::isLargestMaxZ(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isLargestMaxZ_0ce63da7ce8826bc], a0.this$);
          }

          jboolean XYZBounds::isSmallestMinX(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isSmallestMinX_0ce63da7ce8826bc], a0.this$);
          }

          jboolean XYZBounds::isSmallestMinY(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isSmallestMinY_0ce63da7ce8826bc], a0.this$);
          }

          jboolean XYZBounds::isSmallestMinZ(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isSmallestMinZ_0ce63da7ce8826bc], a0.this$);
          }

          ::org::apache::lucene::spatial3d::geom::Bounds XYZBounds::isWide() const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_isWide_6f0a6687d3a83671]));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds XYZBounds::noBottomLatitudeBound() const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_noBottomLatitudeBound_6f0a6687d3a83671]));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds XYZBounds::noBound(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0) const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_noBound_650181d6a64cb6dd], a0.this$));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds XYZBounds::noLongitudeBound() const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_noLongitudeBound_6f0a6687d3a83671]));
          }

          ::org::apache::lucene::spatial3d::geom::Bounds XYZBounds::noTopLatitudeBound() const
          {
            return ::org::apache::lucene::spatial3d::geom::Bounds(env->callObjectMethod(this$, mids$[mid_noTopLatitudeBound_6f0a6687d3a83671]));
          }

          ::java::lang::String XYZBounds::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_XYZBounds_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_XYZBounds_instance_(PyTypeObject *type, PyObject *arg);
          static int t_XYZBounds_init_(t_XYZBounds *self, PyObject *args, PyObject *kwds);
          static PyObject *t_XYZBounds_addHorizontalPlane(t_XYZBounds *self, PyObject *args);
          static PyObject *t_XYZBounds_addIntersection(t_XYZBounds *self, PyObject *args);
          static PyObject *t_XYZBounds_addPlane(t_XYZBounds *self, PyObject *args);
          static PyObject *t_XYZBounds_addPoint(t_XYZBounds *self, PyObject *arg);
          static PyObject *t_XYZBounds_addVerticalPlane(t_XYZBounds *self, PyObject *args);
          static PyObject *t_XYZBounds_addXValue(t_XYZBounds *self, PyObject *args);
          static PyObject *t_XYZBounds_addYValue(t_XYZBounds *self, PyObject *args);
          static PyObject *t_XYZBounds_addZValue(t_XYZBounds *self, PyObject *args);
          static PyObject *t_XYZBounds_getMaximumX(t_XYZBounds *self);
          static PyObject *t_XYZBounds_getMaximumY(t_XYZBounds *self);
          static PyObject *t_XYZBounds_getMaximumZ(t_XYZBounds *self);
          static PyObject *t_XYZBounds_getMinimumX(t_XYZBounds *self);
          static PyObject *t_XYZBounds_getMinimumY(t_XYZBounds *self);
          static PyObject *t_XYZBounds_getMinimumZ(t_XYZBounds *self);
          static PyObject *t_XYZBounds_isLargestMaxX(t_XYZBounds *self, PyObject *arg);
          static PyObject *t_XYZBounds_isLargestMaxY(t_XYZBounds *self, PyObject *arg);
          static PyObject *t_XYZBounds_isLargestMaxZ(t_XYZBounds *self, PyObject *arg);
          static PyObject *t_XYZBounds_isSmallestMinX(t_XYZBounds *self, PyObject *arg);
          static PyObject *t_XYZBounds_isSmallestMinY(t_XYZBounds *self, PyObject *arg);
          static PyObject *t_XYZBounds_isSmallestMinZ(t_XYZBounds *self, PyObject *arg);
          static PyObject *t_XYZBounds_isWide(t_XYZBounds *self);
          static PyObject *t_XYZBounds_noBottomLatitudeBound(t_XYZBounds *self);
          static PyObject *t_XYZBounds_noBound(t_XYZBounds *self, PyObject *arg);
          static PyObject *t_XYZBounds_noLongitudeBound(t_XYZBounds *self);
          static PyObject *t_XYZBounds_noTopLatitudeBound(t_XYZBounds *self);
          static PyObject *t_XYZBounds_toString(t_XYZBounds *self, PyObject *args);
          static PyObject *t_XYZBounds_get__maximumX(t_XYZBounds *self, void *data);
          static PyObject *t_XYZBounds_get__maximumY(t_XYZBounds *self, void *data);
          static PyObject *t_XYZBounds_get__maximumZ(t_XYZBounds *self, void *data);
          static PyObject *t_XYZBounds_get__minimumX(t_XYZBounds *self, void *data);
          static PyObject *t_XYZBounds_get__minimumY(t_XYZBounds *self, void *data);
          static PyObject *t_XYZBounds_get__minimumZ(t_XYZBounds *self, void *data);
          static PyObject *t_XYZBounds_get__wide(t_XYZBounds *self, void *data);
          static PyGetSetDef t_XYZBounds__fields_[] = {
            DECLARE_GET_FIELD(t_XYZBounds, maximumX),
            DECLARE_GET_FIELD(t_XYZBounds, maximumY),
            DECLARE_GET_FIELD(t_XYZBounds, maximumZ),
            DECLARE_GET_FIELD(t_XYZBounds, minimumX),
            DECLARE_GET_FIELD(t_XYZBounds, minimumY),
            DECLARE_GET_FIELD(t_XYZBounds, minimumZ),
            DECLARE_GET_FIELD(t_XYZBounds, wide),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_XYZBounds__methods_[] = {
            DECLARE_METHOD(t_XYZBounds, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_XYZBounds, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_XYZBounds, addHorizontalPlane, METH_VARARGS),
            DECLARE_METHOD(t_XYZBounds, addIntersection, METH_VARARGS),
            DECLARE_METHOD(t_XYZBounds, addPlane, METH_VARARGS),
            DECLARE_METHOD(t_XYZBounds, addPoint, METH_O),
            DECLARE_METHOD(t_XYZBounds, addVerticalPlane, METH_VARARGS),
            DECLARE_METHOD(t_XYZBounds, addXValue, METH_VARARGS),
            DECLARE_METHOD(t_XYZBounds, addYValue, METH_VARARGS),
            DECLARE_METHOD(t_XYZBounds, addZValue, METH_VARARGS),
            DECLARE_METHOD(t_XYZBounds, getMaximumX, METH_NOARGS),
            DECLARE_METHOD(t_XYZBounds, getMaximumY, METH_NOARGS),
            DECLARE_METHOD(t_XYZBounds, getMaximumZ, METH_NOARGS),
            DECLARE_METHOD(t_XYZBounds, getMinimumX, METH_NOARGS),
            DECLARE_METHOD(t_XYZBounds, getMinimumY, METH_NOARGS),
            DECLARE_METHOD(t_XYZBounds, getMinimumZ, METH_NOARGS),
            DECLARE_METHOD(t_XYZBounds, isLargestMaxX, METH_O),
            DECLARE_METHOD(t_XYZBounds, isLargestMaxY, METH_O),
            DECLARE_METHOD(t_XYZBounds, isLargestMaxZ, METH_O),
            DECLARE_METHOD(t_XYZBounds, isSmallestMinX, METH_O),
            DECLARE_METHOD(t_XYZBounds, isSmallestMinY, METH_O),
            DECLARE_METHOD(t_XYZBounds, isSmallestMinZ, METH_O),
            DECLARE_METHOD(t_XYZBounds, isWide, METH_NOARGS),
            DECLARE_METHOD(t_XYZBounds, noBottomLatitudeBound, METH_NOARGS),
            DECLARE_METHOD(t_XYZBounds, noBound, METH_O),
            DECLARE_METHOD(t_XYZBounds, noLongitudeBound, METH_NOARGS),
            DECLARE_METHOD(t_XYZBounds, noTopLatitudeBound, METH_NOARGS),
            DECLARE_METHOD(t_XYZBounds, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(XYZBounds)[] = {
            { Py_tp_methods, t_XYZBounds__methods_ },
            { Py_tp_init, (void *) t_XYZBounds_init_ },
            { Py_tp_getset, t_XYZBounds__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(XYZBounds)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(XYZBounds, t_XYZBounds, XYZBounds);

          void t_XYZBounds::install(PyObject *module)
          {
            installType(&PY_TYPE(XYZBounds), &PY_TYPE_DEF(XYZBounds), module, "XYZBounds", 0);
          }

          void t_XYZBounds::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(XYZBounds), "class_", make_descriptor(XYZBounds::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(XYZBounds), "wrapfn_", make_descriptor(t_XYZBounds::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(XYZBounds), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_XYZBounds_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, XYZBounds::initializeClass, 1)))
              return NULL;
            return t_XYZBounds::wrap_Object(XYZBounds(((t_XYZBounds *) arg)->object.this$));
          }
          static PyObject *t_XYZBounds_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, XYZBounds::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_XYZBounds_init_(t_XYZBounds *self, PyObject *args, PyObject *kwds)
          {
            XYZBounds object((jobject) NULL);

            INT_CALL(object = XYZBounds());
            self->object = object;

            return 0;
          }

          static PyObject *t_XYZBounds_addHorizontalPlane(t_XYZBounds *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            ::org::apache::lucene::spatial3d::geom::Plane a2((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a3((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);

            if (!parseArgs(args, "kDk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.addHorizontalPlane(a0, a1, a2, a3));
              return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addHorizontalPlane", args);
            return NULL;
          }

          static PyObject *t_XYZBounds_addIntersection(t_XYZBounds *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Plane a1((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Plane a2((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a3((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);

            if (!parseArgs(args, "kkk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.addIntersection(a0, a1, a2, a3));
              return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addIntersection", args);
            return NULL;
          }

          static PyObject *t_XYZBounds_addPlane(t_XYZBounds *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Plane a1((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a2((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);

            if (!parseArgs(args, "kk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.addPlane(a0, a1, a2));
              return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addPlane", args);
            return NULL;
          }

          static PyObject *t_XYZBounds_addPoint(t_XYZBounds *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.addPoint(a0));
              return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addPoint", arg);
            return NULL;
          }

          static PyObject *t_XYZBounds_addVerticalPlane(t_XYZBounds *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            ::org::apache::lucene::spatial3d::geom::Plane a2((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a3((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);

            if (!parseArgs(args, "kDk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.addVerticalPlane(a0, a1, a2, a3));
              return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addVerticalPlane", args);
            return NULL;
          }

          static PyObject *t_XYZBounds_addXValue(t_XYZBounds *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.addXValue(a0));
                  return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
                }
              }
              {
                jdouble a0;
                ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);

                if (!parseArgs(args, "D", &a0))
                {
                  OBJ_CALL(result = self->object.addXValue(a0));
                  return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "addXValue", args);
            return NULL;
          }

          static PyObject *t_XYZBounds_addYValue(t_XYZBounds *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.addYValue(a0));
                  return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
                }
              }
              {
                jdouble a0;
                ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);

                if (!parseArgs(args, "D", &a0))
                {
                  OBJ_CALL(result = self->object.addYValue(a0));
                  return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "addYValue", args);
            return NULL;
          }

          static PyObject *t_XYZBounds_addZValue(t_XYZBounds *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.addZValue(a0));
                  return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
                }
              }
              {
                jdouble a0;
                ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);

                if (!parseArgs(args, "D", &a0))
                {
                  OBJ_CALL(result = self->object.addZValue(a0));
                  return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "addZValue", args);
            return NULL;
          }

          static PyObject *t_XYZBounds_getMaximumX(t_XYZBounds *self)
          {
            ::java::lang::Double result((jobject) NULL);
            OBJ_CALL(result = self->object.getMaximumX());
            return ::java::lang::t_Double::wrap_Object(result);
          }

          static PyObject *t_XYZBounds_getMaximumY(t_XYZBounds *self)
          {
            ::java::lang::Double result((jobject) NULL);
            OBJ_CALL(result = self->object.getMaximumY());
            return ::java::lang::t_Double::wrap_Object(result);
          }

          static PyObject *t_XYZBounds_getMaximumZ(t_XYZBounds *self)
          {
            ::java::lang::Double result((jobject) NULL);
            OBJ_CALL(result = self->object.getMaximumZ());
            return ::java::lang::t_Double::wrap_Object(result);
          }

          static PyObject *t_XYZBounds_getMinimumX(t_XYZBounds *self)
          {
            ::java::lang::Double result((jobject) NULL);
            OBJ_CALL(result = self->object.getMinimumX());
            return ::java::lang::t_Double::wrap_Object(result);
          }

          static PyObject *t_XYZBounds_getMinimumY(t_XYZBounds *self)
          {
            ::java::lang::Double result((jobject) NULL);
            OBJ_CALL(result = self->object.getMinimumY());
            return ::java::lang::t_Double::wrap_Object(result);
          }

          static PyObject *t_XYZBounds_getMinimumZ(t_XYZBounds *self)
          {
            ::java::lang::Double result((jobject) NULL);
            OBJ_CALL(result = self->object.getMinimumZ());
            return ::java::lang::t_Double::wrap_Object(result);
          }

          static PyObject *t_XYZBounds_isLargestMaxX(t_XYZBounds *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isLargestMaxX(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isLargestMaxX", arg);
            return NULL;
          }

          static PyObject *t_XYZBounds_isLargestMaxY(t_XYZBounds *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isLargestMaxY(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isLargestMaxY", arg);
            return NULL;
          }

          static PyObject *t_XYZBounds_isLargestMaxZ(t_XYZBounds *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isLargestMaxZ(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isLargestMaxZ", arg);
            return NULL;
          }

          static PyObject *t_XYZBounds_isSmallestMinX(t_XYZBounds *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isSmallestMinX(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isSmallestMinX", arg);
            return NULL;
          }

          static PyObject *t_XYZBounds_isSmallestMinY(t_XYZBounds *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isSmallestMinY(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isSmallestMinY", arg);
            return NULL;
          }

          static PyObject *t_XYZBounds_isSmallestMinZ(t_XYZBounds *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isSmallestMinZ(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isSmallestMinZ", arg);
            return NULL;
          }

          static PyObject *t_XYZBounds_isWide(t_XYZBounds *self)
          {
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);
            OBJ_CALL(result = self->object.isWide());
            return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
          }

          static PyObject *t_XYZBounds_noBottomLatitudeBound(t_XYZBounds *self)
          {
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);
            OBJ_CALL(result = self->object.noBottomLatitudeBound());
            return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
          }

          static PyObject *t_XYZBounds_noBound(t_XYZBounds *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.noBound(a0));
              return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "noBound", arg);
            return NULL;
          }

          static PyObject *t_XYZBounds_noLongitudeBound(t_XYZBounds *self)
          {
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);
            OBJ_CALL(result = self->object.noLongitudeBound());
            return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
          }

          static PyObject *t_XYZBounds_noTopLatitudeBound(t_XYZBounds *self)
          {
            ::org::apache::lucene::spatial3d::geom::Bounds result((jobject) NULL);
            OBJ_CALL(result = self->object.noTopLatitudeBound());
            return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(result);
          }

          static PyObject *t_XYZBounds_toString(t_XYZBounds *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(XYZBounds), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_XYZBounds_get__maximumX(t_XYZBounds *self, void *data)
          {
            ::java::lang::Double value((jobject) NULL);
            OBJ_CALL(value = self->object.getMaximumX());
            return ::java::lang::t_Double::wrap_Object(value);
          }

          static PyObject *t_XYZBounds_get__maximumY(t_XYZBounds *self, void *data)
          {
            ::java::lang::Double value((jobject) NULL);
            OBJ_CALL(value = self->object.getMaximumY());
            return ::java::lang::t_Double::wrap_Object(value);
          }

          static PyObject *t_XYZBounds_get__maximumZ(t_XYZBounds *self, void *data)
          {
            ::java::lang::Double value((jobject) NULL);
            OBJ_CALL(value = self->object.getMaximumZ());
            return ::java::lang::t_Double::wrap_Object(value);
          }

          static PyObject *t_XYZBounds_get__minimumX(t_XYZBounds *self, void *data)
          {
            ::java::lang::Double value((jobject) NULL);
            OBJ_CALL(value = self->object.getMinimumX());
            return ::java::lang::t_Double::wrap_Object(value);
          }

          static PyObject *t_XYZBounds_get__minimumY(t_XYZBounds *self, void *data)
          {
            ::java::lang::Double value((jobject) NULL);
            OBJ_CALL(value = self->object.getMinimumY());
            return ::java::lang::t_Double::wrap_Object(value);
          }

          static PyObject *t_XYZBounds_get__minimumZ(t_XYZBounds *self, void *data)
          {
            ::java::lang::Double value((jobject) NULL);
            OBJ_CALL(value = self->object.getMinimumZ());
            return ::java::lang::t_Double::wrap_Object(value);
          }

          static PyObject *t_XYZBounds_get__wide(t_XYZBounds *self, void *data)
          {
            ::org::apache::lucene::spatial3d::geom::Bounds value((jobject) NULL);
            OBJ_CALL(value = self->object.isWide());
            return ::org::apache::lucene::spatial3d::geom::t_Bounds::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/custom/CustomAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharFilterFactory.h"
#include "org/apache/lucene/analysis/util/TokenizerFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/custom/CustomAnalyzer$Builder.h"
#include "org/apache/lucene/analysis/util/TokenFilterFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "java/nio/file/Path.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace custom {

          ::java::lang::Class *CustomAnalyzer::class$ = NULL;
          jmethodID *CustomAnalyzer::mids$ = NULL;
          bool CustomAnalyzer::live$ = false;

          jclass CustomAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/custom/CustomAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_builder_ebbca44065426767] = env->getStaticMethodID(cls, "builder", "()Lorg/apache/lucene/analysis/custom/CustomAnalyzer$Builder;");
              mids$[mid_builder_ce21e87fe389a17a] = env->getStaticMethodID(cls, "builder", "(Ljava/nio/file/Path;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$Builder;");
              mids$[mid_builder_c1f751be47b37c61] = env->getStaticMethodID(cls, "builder", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)Lorg/apache/lucene/analysis/custom/CustomAnalyzer$Builder;");
              mids$[mid_getCharFilterFactories_49ec78390f08338a] = env->getMethodID(cls, "getCharFilterFactories", "()Ljava/util/List;");
              mids$[mid_getOffsetGap_a5a7d1128e9e2bb7] = env->getMethodID(cls, "getOffsetGap", "(Ljava/lang/String;)I");
              mids$[mid_getPositionIncrementGap_a5a7d1128e9e2bb7] = env->getMethodID(cls, "getPositionIncrementGap", "(Ljava/lang/String;)I");
              mids$[mid_getTokenFilterFactories_49ec78390f08338a] = env->getMethodID(cls, "getTokenFilterFactories", "()Ljava/util/List;");
              mids$[mid_getTokenizerFactory_df42031a9fdfdfed] = env->getMethodID(cls, "getTokenizerFactory", "()Lorg/apache/lucene/analysis/util/TokenizerFactory;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_initReader_8dbb4487391277c7] = env->getMethodID(cls, "initReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");
              mids$[mid_initReaderForNormalization_8dbb4487391277c7] = env->getMethodID(cls, "initReaderForNormalization", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::analysis::custom::CustomAnalyzer$Builder CustomAnalyzer::builder()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::custom::CustomAnalyzer$Builder(env->callStaticObjectMethod(cls, mids$[mid_builder_ebbca44065426767]));
          }

          ::org::apache::lucene::analysis::custom::CustomAnalyzer$Builder CustomAnalyzer::builder(const ::java::nio::file::Path & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::custom::CustomAnalyzer$Builder(env->callStaticObjectMethod(cls, mids$[mid_builder_ce21e87fe389a17a], a0.this$));
          }

          ::org::apache::lucene::analysis::custom::CustomAnalyzer$Builder CustomAnalyzer::builder(const ::org::apache::lucene::analysis::util::ResourceLoader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::custom::CustomAnalyzer$Builder(env->callStaticObjectMethod(cls, mids$[mid_builder_c1f751be47b37c61], a0.this$));
          }

          ::java::util::List CustomAnalyzer::getCharFilterFactories() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getCharFilterFactories_49ec78390f08338a]));
          }

          jint CustomAnalyzer::getOffsetGap(const ::java::lang::String & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_getOffsetGap_a5a7d1128e9e2bb7], a0.this$);
          }

          jint CustomAnalyzer::getPositionIncrementGap(const ::java::lang::String & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionIncrementGap_a5a7d1128e9e2bb7], a0.this$);
          }

          ::java::util::List CustomAnalyzer::getTokenFilterFactories() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTokenFilterFactories_49ec78390f08338a]));
          }

          ::org::apache::lucene::analysis::util::TokenizerFactory CustomAnalyzer::getTokenizerFactory() const
          {
            return ::org::apache::lucene::analysis::util::TokenizerFactory(env->callObjectMethod(this$, mids$[mid_getTokenizerFactory_df42031a9fdfdfed]));
          }

          ::java::lang::String CustomAnalyzer::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/custom/CustomAnalyzer$ConditionBuilder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace custom {
          static PyObject *t_CustomAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CustomAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CustomAnalyzer_builder(PyTypeObject *type, PyObject *args);
          static PyObject *t_CustomAnalyzer_getCharFilterFactories(t_CustomAnalyzer *self);
          static PyObject *t_CustomAnalyzer_getOffsetGap(t_CustomAnalyzer *self, PyObject *args);
          static PyObject *t_CustomAnalyzer_getPositionIncrementGap(t_CustomAnalyzer *self, PyObject *args);
          static PyObject *t_CustomAnalyzer_getTokenFilterFactories(t_CustomAnalyzer *self);
          static PyObject *t_CustomAnalyzer_getTokenizerFactory(t_CustomAnalyzer *self);
          static PyObject *t_CustomAnalyzer_toString(t_CustomAnalyzer *self, PyObject *args);
          static PyObject *t_CustomAnalyzer_get__charFilterFactories(t_CustomAnalyzer *self, void *data);
          static PyObject *t_CustomAnalyzer_get__tokenFilterFactories(t_CustomAnalyzer *self, void *data);
          static PyObject *t_CustomAnalyzer_get__tokenizerFactory(t_CustomAnalyzer *self, void *data);
          static PyGetSetDef t_CustomAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_CustomAnalyzer, charFilterFactories),
            DECLARE_GET_FIELD(t_CustomAnalyzer, tokenFilterFactories),
            DECLARE_GET_FIELD(t_CustomAnalyzer, tokenizerFactory),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CustomAnalyzer__methods_[] = {
            DECLARE_METHOD(t_CustomAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CustomAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CustomAnalyzer, builder, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CustomAnalyzer, getCharFilterFactories, METH_NOARGS),
            DECLARE_METHOD(t_CustomAnalyzer, getOffsetGap, METH_VARARGS),
            DECLARE_METHOD(t_CustomAnalyzer, getPositionIncrementGap, METH_VARARGS),
            DECLARE_METHOD(t_CustomAnalyzer, getTokenFilterFactories, METH_NOARGS),
            DECLARE_METHOD(t_CustomAnalyzer, getTokenizerFactory, METH_NOARGS),
            DECLARE_METHOD(t_CustomAnalyzer, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CustomAnalyzer)[] = {
            { Py_tp_methods, t_CustomAnalyzer__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_CustomAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CustomAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Analyzer),
            NULL
          };

          DEFINE_TYPE(CustomAnalyzer, t_CustomAnalyzer, CustomAnalyzer);

          void t_CustomAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(CustomAnalyzer), &PY_TYPE_DEF(CustomAnalyzer), module, "CustomAnalyzer", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CustomAnalyzer), "ConditionBuilder", make_descriptor(&PY_TYPE_DEF(CustomAnalyzer$ConditionBuilder)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CustomAnalyzer), "Builder", make_descriptor(&PY_TYPE_DEF(CustomAnalyzer$Builder)));
          }

          void t_CustomAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CustomAnalyzer), "class_", make_descriptor(CustomAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CustomAnalyzer), "wrapfn_", make_descriptor(t_CustomAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CustomAnalyzer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CustomAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CustomAnalyzer::initializeClass, 1)))
              return NULL;
            return t_CustomAnalyzer::wrap_Object(CustomAnalyzer(((t_CustomAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_CustomAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CustomAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CustomAnalyzer_builder(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::org::apache::lucene::analysis::custom::CustomAnalyzer$Builder result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::analysis::custom::CustomAnalyzer::builder());
                return ::org::apache::lucene::analysis::custom::t_CustomAnalyzer$Builder::wrap_Object(result);
              }
              break;
             case 1:
              {
                ::java::nio::file::Path a0((jobject) NULL);
                ::org::apache::lucene::analysis::custom::CustomAnalyzer$Builder result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::nio::file::Path::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::custom::CustomAnalyzer::builder(a0));
                  return ::org::apache::lucene::analysis::custom::t_CustomAnalyzer$Builder::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);
                ::org::apache::lucene::analysis::custom::CustomAnalyzer$Builder result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::custom::CustomAnalyzer::builder(a0));
                  return ::org::apache::lucene::analysis::custom::t_CustomAnalyzer$Builder::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "builder", args);
            return NULL;
          }

          static PyObject *t_CustomAnalyzer_getCharFilterFactories(t_CustomAnalyzer *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getCharFilterFactories());
            return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::analysis::util::PY_TYPE(CharFilterFactory));
          }

          static PyObject *t_CustomAnalyzer_getOffsetGap(t_CustomAnalyzer *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.getOffsetGap(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(CustomAnalyzer), (PyObject *) self, "getOffsetGap", args, 2);
          }

          static PyObject *t_CustomAnalyzer_getPositionIncrementGap(t_CustomAnalyzer *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPositionIncrementGap(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(CustomAnalyzer), (PyObject *) self, "getPositionIncrementGap", args, 2);
          }

          static PyObject *t_CustomAnalyzer_getTokenFilterFactories(t_CustomAnalyzer *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getTokenFilterFactories());
            return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::analysis::util::PY_TYPE(TokenFilterFactory));
          }

          static PyObject *t_CustomAnalyzer_getTokenizerFactory(t_CustomAnalyzer *self)
          {
            ::org::apache::lucene::analysis::util::TokenizerFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getTokenizerFactory());
            return ::org::apache::lucene::analysis::util::t_TokenizerFactory::wrap_Object(result);
          }

          static PyObject *t_CustomAnalyzer_toString(t_CustomAnalyzer *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(CustomAnalyzer), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CustomAnalyzer_get__charFilterFactories(t_CustomAnalyzer *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getCharFilterFactories());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_CustomAnalyzer_get__tokenFilterFactories(t_CustomAnalyzer *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getTokenFilterFactories());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_CustomAnalyzer_get__tokenizerFactory(t_CustomAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::TokenizerFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getTokenizerFactory());
            return ::org::apache::lucene::analysis::util::t_TokenizerFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarity/LegacyBM25Similarity.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarity {

          ::java::lang::Class *LegacyBM25Similarity::class$ = NULL;
          jmethodID *LegacyBM25Similarity::mids$ = NULL;
          bool LegacyBM25Similarity::live$ = false;

          jclass LegacyBM25Similarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarity/LegacyBM25Similarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5a9245193073da7b] = env->getMethodID(cls, "<init>", "(FF)V");
              mids$[mid_computeNorm_6ec3269102920d7a] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_getB_58aec2b64dff50c8] = env->getMethodID(cls, "getB", "()F");
              mids$[mid_getDiscountOverlaps_8454bd5aa23fd11e] = env->getMethodID(cls, "getDiscountOverlaps", "()Z");
              mids$[mid_getK1_58aec2b64dff50c8] = env->getMethodID(cls, "getK1", "()F");
              mids$[mid_scorer_a010a2835e08a10c] = env->getMethodID(cls, "scorer", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");
              mids$[mid_setDiscountOverlaps_9d72768e8fdce2b7] = env->getMethodID(cls, "setDiscountOverlaps", "(Z)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LegacyBM25Similarity::LegacyBM25Similarity() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          LegacyBM25Similarity::LegacyBM25Similarity(jfloat a0, jfloat a1) : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_5a9245193073da7b, a0, a1)) {}

          jlong LegacyBM25Similarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ec3269102920d7a], a0.this$);
          }

          jfloat LegacyBM25Similarity::getB() const
          {
            return env->callFloatMethod(this$, mids$[mid_getB_58aec2b64dff50c8]);
          }

          jboolean LegacyBM25Similarity::getDiscountOverlaps() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getDiscountOverlaps_8454bd5aa23fd11e]);
          }

          jfloat LegacyBM25Similarity::getK1() const
          {
            return env->callFloatMethod(this$, mids$[mid_getK1_58aec2b64dff50c8]);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer LegacyBM25Similarity::scorer(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_scorer_a010a2835e08a10c], a0, a1.this$, a2.this$));
          }

          void LegacyBM25Similarity::setDiscountOverlaps(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDiscountOverlaps_9d72768e8fdce2b7], a0);
          }

          ::java::lang::String LegacyBM25Similarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarity {
          static PyObject *t_LegacyBM25Similarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LegacyBM25Similarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LegacyBM25Similarity_init_(t_LegacyBM25Similarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LegacyBM25Similarity_computeNorm(t_LegacyBM25Similarity *self, PyObject *args);
          static PyObject *t_LegacyBM25Similarity_getB(t_LegacyBM25Similarity *self);
          static PyObject *t_LegacyBM25Similarity_getDiscountOverlaps(t_LegacyBM25Similarity *self);
          static PyObject *t_LegacyBM25Similarity_getK1(t_LegacyBM25Similarity *self);
          static PyObject *t_LegacyBM25Similarity_scorer(t_LegacyBM25Similarity *self, PyObject *args);
          static PyObject *t_LegacyBM25Similarity_setDiscountOverlaps(t_LegacyBM25Similarity *self, PyObject *arg);
          static PyObject *t_LegacyBM25Similarity_toString(t_LegacyBM25Similarity *self, PyObject *args);
          static PyObject *t_LegacyBM25Similarity_get__b(t_LegacyBM25Similarity *self, void *data);
          static PyObject *t_LegacyBM25Similarity_get__discountOverlaps(t_LegacyBM25Similarity *self, void *data);
          static int t_LegacyBM25Similarity_set__discountOverlaps(t_LegacyBM25Similarity *self, PyObject *arg, void *data);
          static PyObject *t_LegacyBM25Similarity_get__k1(t_LegacyBM25Similarity *self, void *data);
          static PyGetSetDef t_LegacyBM25Similarity__fields_[] = {
            DECLARE_GET_FIELD(t_LegacyBM25Similarity, b),
            DECLARE_GETSET_FIELD(t_LegacyBM25Similarity, discountOverlaps),
            DECLARE_GET_FIELD(t_LegacyBM25Similarity, k1),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LegacyBM25Similarity__methods_[] = {
            DECLARE_METHOD(t_LegacyBM25Similarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LegacyBM25Similarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LegacyBM25Similarity, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_LegacyBM25Similarity, getB, METH_NOARGS),
            DECLARE_METHOD(t_LegacyBM25Similarity, getDiscountOverlaps, METH_NOARGS),
            DECLARE_METHOD(t_LegacyBM25Similarity, getK1, METH_NOARGS),
            DECLARE_METHOD(t_LegacyBM25Similarity, scorer, METH_VARARGS),
            DECLARE_METHOD(t_LegacyBM25Similarity, setDiscountOverlaps, METH_O),
            DECLARE_METHOD(t_LegacyBM25Similarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LegacyBM25Similarity)[] = {
            { Py_tp_methods, t_LegacyBM25Similarity__methods_ },
            { Py_tp_init, (void *) t_LegacyBM25Similarity_init_ },
            { Py_tp_getset, t_LegacyBM25Similarity__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LegacyBM25Similarity)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Similarity),
            NULL
          };

          DEFINE_TYPE(LegacyBM25Similarity, t_LegacyBM25Similarity, LegacyBM25Similarity);

          void t_LegacyBM25Similarity::install(PyObject *module)
          {
            installType(&PY_TYPE(LegacyBM25Similarity), &PY_TYPE_DEF(LegacyBM25Similarity), module, "LegacyBM25Similarity", 0);
          }

          void t_LegacyBM25Similarity::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LegacyBM25Similarity), "class_", make_descriptor(LegacyBM25Similarity::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LegacyBM25Similarity), "wrapfn_", make_descriptor(t_LegacyBM25Similarity::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LegacyBM25Similarity), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LegacyBM25Similarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LegacyBM25Similarity::initializeClass, 1)))
              return NULL;
            return t_LegacyBM25Similarity::wrap_Object(LegacyBM25Similarity(((t_LegacyBM25Similarity *) arg)->object.this$));
          }
          static PyObject *t_LegacyBM25Similarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LegacyBM25Similarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LegacyBM25Similarity_init_(t_LegacyBM25Similarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                LegacyBM25Similarity object((jobject) NULL);

                INT_CALL(object = LegacyBM25Similarity());
                self->object = object;
                break;
              }
             case 2:
              {
                jfloat a0;
                jfloat a1;
                LegacyBM25Similarity object((jobject) NULL);

                if (!parseArgs(args, "FF", &a0, &a1))
                {
                  INT_CALL(object = LegacyBM25Similarity(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LegacyBM25Similarity_computeNorm(t_LegacyBM25Similarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(LegacyBM25Similarity), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_LegacyBM25Similarity_getB(t_LegacyBM25Similarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getB());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_LegacyBM25Similarity_getDiscountOverlaps(t_LegacyBM25Similarity *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_LegacyBM25Similarity_getK1(t_LegacyBM25Similarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getK1());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_LegacyBM25Similarity_scorer(t_LegacyBM25Similarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.scorer(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(LegacyBM25Similarity), (PyObject *) self, "scorer", args, 2);
          }

          static PyObject *t_LegacyBM25Similarity_setDiscountOverlaps(t_LegacyBM25Similarity *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDiscountOverlaps(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDiscountOverlaps", arg);
            return NULL;
          }

          static PyObject *t_LegacyBM25Similarity_toString(t_LegacyBM25Similarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(LegacyBM25Similarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_LegacyBM25Similarity_get__b(t_LegacyBM25Similarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getB());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_LegacyBM25Similarity_get__discountOverlaps(t_LegacyBM25Similarity *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(value);
          }
          static int t_LegacyBM25Similarity_set__discountOverlaps(t_LegacyBM25Similarity *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDiscountOverlaps(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "discountOverlaps", arg);
            return -1;
          }

          static PyObject *t_LegacyBM25Similarity_get__k1(t_LegacyBM25Similarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getK1());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/search/DoubleValuesSource.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetSumValueSource::class$ = NULL;
          jmethodID *TaxonomyFacetSumValueSource::mids$ = NULL;
          bool TaxonomyFacetSumValueSource::live$ = false;

          jclass TaxonomyFacetSumValueSource::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_11d4712e49280297] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;Lorg/apache/lucene/search/DoubleValuesSource;)V");
              mids$[mid_init$_19a106d0c81469b3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/OrdinalsReader;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;Lorg/apache/lucene/search/DoubleValuesSource;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetSumValueSource::TaxonomyFacetSumValueSource(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const ::org::apache::lucene::search::DoubleValuesSource & a3) : ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_11d4712e49280297, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          TaxonomyFacetSumValueSource::TaxonomyFacetSumValueSource(const ::org::apache::lucene::facet::taxonomy::OrdinalsReader & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3, const ::org::apache::lucene::search::DoubleValuesSource & a4) : ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_19a106d0c81469b3, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetSumValueSource_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetSumValueSource_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetSumValueSource_init_(t_TaxonomyFacetSumValueSource *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TaxonomyFacetSumValueSource__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TaxonomyFacetSumValueSource)[] = {
            { Py_tp_methods, t_TaxonomyFacetSumValueSource__methods_ },
            { Py_tp_init, (void *) t_TaxonomyFacetSumValueSource_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TaxonomyFacetSumValueSource)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets),
            NULL
          };

          DEFINE_TYPE(TaxonomyFacetSumValueSource, t_TaxonomyFacetSumValueSource, TaxonomyFacetSumValueSource);

          void t_TaxonomyFacetSumValueSource::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetSumValueSource), &PY_TYPE_DEF(TaxonomyFacetSumValueSource), module, "TaxonomyFacetSumValueSource", 0);
          }

          void t_TaxonomyFacetSumValueSource::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyFacetSumValueSource), "class_", make_descriptor(TaxonomyFacetSumValueSource::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyFacetSumValueSource), "wrapfn_", make_descriptor(t_TaxonomyFacetSumValueSource::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyFacetSumValueSource), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetSumValueSource_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetSumValueSource::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetSumValueSource::wrap_Object(TaxonomyFacetSumValueSource(((t_TaxonomyFacetSumValueSource *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetSumValueSource_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetSumValueSource::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetSumValueSource_init_(t_TaxonomyFacetSumValueSource *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                ::org::apache::lucene::search::DoubleValuesSource a3((jobject) NULL);
                TaxonomyFacetSumValueSource object((jobject) NULL);

                if (!parseArgs(args, "kkkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::search::DoubleValuesSource::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = TaxonomyFacetSumValueSource(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::facet::taxonomy::OrdinalsReader a0((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
                ::org::apache::lucene::search::DoubleValuesSource a4((jobject) NULL);
                TaxonomyFacetSumValueSource object((jobject) NULL);

                if (!parseArgs(args, "kkkkk", ::org::apache::lucene::facet::taxonomy::OrdinalsReader::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::search::DoubleValuesSource::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = TaxonomyFacetSumValueSource(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ByteArrayDataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ByteArrayDataOutput::class$ = NULL;
        jmethodID *ByteArrayDataOutput::mids$ = NULL;
        bool ByteArrayDataOutput::live$ = false;

        jclass ByteArrayDataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ByteArrayDataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_9ffdf271836656c4] = env->getMethodID(cls, "<init>", "([B)V");
            mids$[mid_init$_43fdd39c09bb2fad] = env->getMethodID(cls, "<init>", "([BII)V");
            mids$[mid_getPosition_9972fcc56b44e79d] = env->getMethodID(cls, "getPosition", "()I");
            mids$[mid_reset_9ffdf271836656c4] = env->getMethodID(cls, "reset", "([B)V");
            mids$[mid_reset_43fdd39c09bb2fad] = env->getMethodID(cls, "reset", "([BII)V");
            mids$[mid_writeByte_9c36fec3bac1d0c7] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteArrayDataOutput::ByteArrayDataOutput() : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ByteArrayDataOutput::ByteArrayDataOutput(const JArray< jbyte > & a0) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_9ffdf271836656c4, a0.this$)) {}

        ByteArrayDataOutput::ByteArrayDataOutput(const JArray< jbyte > & a0, jint a1, jint a2) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_43fdd39c09bb2fad, a0.this$, a1, a2)) {}

        jint ByteArrayDataOutput::getPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_getPosition_9972fcc56b44e79d]);
        }

        void ByteArrayDataOutput::reset(const JArray< jbyte > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_9ffdf271836656c4], a0.this$);
        }

        void ByteArrayDataOutput::reset(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_43fdd39c09bb2fad], a0.this$, a1, a2);
        }

        void ByteArrayDataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_9c36fec3bac1d0c7], a0);
        }

        void ByteArrayDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ByteArrayDataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteArrayDataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteArrayDataOutput_init_(t_ByteArrayDataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteArrayDataOutput_getPosition(t_ByteArrayDataOutput *self);
        static PyObject *t_ByteArrayDataOutput_reset(t_ByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_ByteArrayDataOutput_writeByte(t_ByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_ByteArrayDataOutput_writeBytes(t_ByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_ByteArrayDataOutput_get__position(t_ByteArrayDataOutput *self, void *data);
        static PyGetSetDef t_ByteArrayDataOutput__fields_[] = {
          DECLARE_GET_FIELD(t_ByteArrayDataOutput, position),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteArrayDataOutput__methods_[] = {
          DECLARE_METHOD(t_ByteArrayDataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteArrayDataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteArrayDataOutput, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataOutput, reset, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ByteArrayDataOutput)[] = {
          { Py_tp_methods, t_ByteArrayDataOutput__methods_ },
          { Py_tp_init, (void *) t_ByteArrayDataOutput_init_ },
          { Py_tp_getset, t_ByteArrayDataOutput__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ByteArrayDataOutput)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::DataOutput),
          NULL
        };

        DEFINE_TYPE(ByteArrayDataOutput, t_ByteArrayDataOutput, ByteArrayDataOutput);

        void t_ByteArrayDataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteArrayDataOutput), &PY_TYPE_DEF(ByteArrayDataOutput), module, "ByteArrayDataOutput", 0);
        }

        void t_ByteArrayDataOutput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteArrayDataOutput), "class_", make_descriptor(ByteArrayDataOutput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteArrayDataOutput), "wrapfn_", make_descriptor(t_ByteArrayDataOutput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteArrayDataOutput), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteArrayDataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteArrayDataOutput::initializeClass, 1)))
            return NULL;
          return t_ByteArrayDataOutput::wrap_Object(ByteArrayDataOutput(((t_ByteArrayDataOutput *) arg)->object.this$));
        }
        static PyObject *t_ByteArrayDataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteArrayDataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteArrayDataOutput_init_(t_ByteArrayDataOutput *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ByteArrayDataOutput object((jobject) NULL);

              INT_CALL(object = ByteArrayDataOutput());
              self->object = object;
              break;
            }
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);
              ByteArrayDataOutput object((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                INT_CALL(object = ByteArrayDataOutput(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              ByteArrayDataOutput object((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                INT_CALL(object = ByteArrayDataOutput(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteArrayDataOutput_getPosition(t_ByteArrayDataOutput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPosition());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_ByteArrayDataOutput_reset(t_ByteArrayDataOutput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(self->object.reset(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.reset(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_ByteArrayDataOutput_writeByte(t_ByteArrayDataOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteArrayDataOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_ByteArrayDataOutput_writeBytes(t_ByteArrayDataOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteArrayDataOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_ByteArrayDataOutput_get__position(t_ByteArrayDataOutput *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPosition());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishPossessiveFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishPossessiveFilter::class$ = NULL;
          jmethodID *EnglishPossessiveFilter::mids$ = NULL;
          bool EnglishPossessiveFilter::live$ = false;

          jclass EnglishPossessiveFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishPossessiveFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishPossessiveFilter::EnglishPossessiveFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean EnglishPossessiveFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishPossessiveFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishPossessiveFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishPossessiveFilter_init_(t_EnglishPossessiveFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishPossessiveFilter_incrementToken(t_EnglishPossessiveFilter *self, PyObject *args);

          static PyMethodDef t_EnglishPossessiveFilter__methods_[] = {
            DECLARE_METHOD(t_EnglishPossessiveFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishPossessiveFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishPossessiveFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(EnglishPossessiveFilter)[] = {
            { Py_tp_methods, t_EnglishPossessiveFilter__methods_ },
            { Py_tp_init, (void *) t_EnglishPossessiveFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(EnglishPossessiveFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(EnglishPossessiveFilter, t_EnglishPossessiveFilter, EnglishPossessiveFilter);

          void t_EnglishPossessiveFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishPossessiveFilter), &PY_TYPE_DEF(EnglishPossessiveFilter), module, "EnglishPossessiveFilter", 0);
          }

          void t_EnglishPossessiveFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishPossessiveFilter), "class_", make_descriptor(EnglishPossessiveFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishPossessiveFilter), "wrapfn_", make_descriptor(t_EnglishPossessiveFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishPossessiveFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishPossessiveFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishPossessiveFilter::initializeClass, 1)))
              return NULL;
            return t_EnglishPossessiveFilter::wrap_Object(EnglishPossessiveFilter(((t_EnglishPossessiveFilter *) arg)->object.this$));
          }
          static PyObject *t_EnglishPossessiveFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishPossessiveFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishPossessiveFilter_init_(t_EnglishPossessiveFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            EnglishPossessiveFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = EnglishPossessiveFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishPossessiveFilter_incrementToken(t_EnglishPossessiveFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(EnglishPossessiveFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/NoChildOptimizationQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *NoChildOptimizationQueryNodeProcessor::class$ = NULL;
              jmethodID *NoChildOptimizationQueryNodeProcessor::mids$ = NULL;
              bool NoChildOptimizationQueryNodeProcessor::live$ = false;

              jclass NoChildOptimizationQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/NoChildOptimizationQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_e420eeaadf0bcd20] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NoChildOptimizationQueryNodeProcessor::NoChildOptimizationQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_NoChildOptimizationQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NoChildOptimizationQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NoChildOptimizationQueryNodeProcessor_init_(t_NoChildOptimizationQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_NoChildOptimizationQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_NoChildOptimizationQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NoChildOptimizationQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(NoChildOptimizationQueryNodeProcessor)[] = {
                { Py_tp_methods, t_NoChildOptimizationQueryNodeProcessor__methods_ },
                { Py_tp_init, (void *) t_NoChildOptimizationQueryNodeProcessor_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(NoChildOptimizationQueryNodeProcessor)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl),
                NULL
              };

              DEFINE_TYPE(NoChildOptimizationQueryNodeProcessor, t_NoChildOptimizationQueryNodeProcessor, NoChildOptimizationQueryNodeProcessor);

              void t_NoChildOptimizationQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(NoChildOptimizationQueryNodeProcessor), &PY_TYPE_DEF(NoChildOptimizationQueryNodeProcessor), module, "NoChildOptimizationQueryNodeProcessor", 0);
              }

              void t_NoChildOptimizationQueryNodeProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(NoChildOptimizationQueryNodeProcessor), "class_", make_descriptor(NoChildOptimizationQueryNodeProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(NoChildOptimizationQueryNodeProcessor), "wrapfn_", make_descriptor(t_NoChildOptimizationQueryNodeProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(NoChildOptimizationQueryNodeProcessor), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NoChildOptimizationQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NoChildOptimizationQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_NoChildOptimizationQueryNodeProcessor::wrap_Object(NoChildOptimizationQueryNodeProcessor(((t_NoChildOptimizationQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_NoChildOptimizationQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NoChildOptimizationQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NoChildOptimizationQueryNodeProcessor_init_(t_NoChildOptimizationQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                NoChildOptimizationQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = NoChildOptimizationQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/TurkishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *TurkishStemmer::class$ = NULL;
        jmethodID *TurkishStemmer::mids$ = NULL;
        bool TurkishStemmer::live$ = false;

        jclass TurkishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/TurkishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TurkishStemmer::TurkishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean TurkishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint TurkishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean TurkishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_TurkishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TurkishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TurkishStemmer_init_(t_TurkishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TurkishStemmer_equals(t_TurkishStemmer *self, PyObject *args);
        static PyObject *t_TurkishStemmer_hashCode(t_TurkishStemmer *self, PyObject *args);
        static PyObject *t_TurkishStemmer_stem(t_TurkishStemmer *self, PyObject *args);

        static PyMethodDef t_TurkishStemmer__methods_[] = {
          DECLARE_METHOD(t_TurkishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TurkishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TurkishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_TurkishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TurkishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TurkishStemmer)[] = {
          { Py_tp_methods, t_TurkishStemmer__methods_ },
          { Py_tp_init, (void *) t_TurkishStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TurkishStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(TurkishStemmer, t_TurkishStemmer, TurkishStemmer);

        void t_TurkishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(TurkishStemmer), &PY_TYPE_DEF(TurkishStemmer), module, "TurkishStemmer", 0);
        }

        void t_TurkishStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TurkishStemmer), "class_", make_descriptor(TurkishStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TurkishStemmer), "wrapfn_", make_descriptor(t_TurkishStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TurkishStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TurkishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TurkishStemmer::initializeClass, 1)))
            return NULL;
          return t_TurkishStemmer::wrap_Object(TurkishStemmer(((t_TurkishStemmer *) arg)->object.this$));
        }
        static PyObject *t_TurkishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TurkishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TurkishStemmer_init_(t_TurkishStemmer *self, PyObject *args, PyObject *kwds)
        {
          TurkishStemmer object((jobject) NULL);

          INT_CALL(object = TurkishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_TurkishStemmer_equals(t_TurkishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(TurkishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TurkishStemmer_hashCode(t_TurkishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(TurkishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TurkishStemmer_stem(t_TurkishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(TurkishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/stempel/StempelPolishStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {

          ::java::lang::Class *StempelPolishStemFilterFactory::class$ = NULL;
          jmethodID *StempelPolishStemFilterFactory::mids$ = NULL;
          bool StempelPolishStemFilterFactory::live$ = false;
          ::java::lang::String *StempelPolishStemFilterFactory::NAME = NULL;

          jclass StempelPolishStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/stempel/StempelPolishStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StempelPolishStemFilterFactory::StempelPolishStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream StempelPolishStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {
          static PyObject *t_StempelPolishStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StempelPolishStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StempelPolishStemFilterFactory_init_(t_StempelPolishStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StempelPolishStemFilterFactory_create(t_StempelPolishStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_StempelPolishStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_StempelPolishStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelPolishStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelPolishStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(StempelPolishStemFilterFactory)[] = {
            { Py_tp_methods, t_StempelPolishStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_StempelPolishStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(StempelPolishStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(StempelPolishStemFilterFactory, t_StempelPolishStemFilterFactory, StempelPolishStemFilterFactory);

          void t_StempelPolishStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StempelPolishStemFilterFactory), &PY_TYPE_DEF(StempelPolishStemFilterFactory), module, "StempelPolishStemFilterFactory", 0);
          }

          void t_StempelPolishStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(StempelPolishStemFilterFactory), "class_", make_descriptor(StempelPolishStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StempelPolishStemFilterFactory), "wrapfn_", make_descriptor(t_StempelPolishStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StempelPolishStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(StempelPolishStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(StempelPolishStemFilterFactory), "NAME", make_descriptor(j2p(*StempelPolishStemFilterFactory::NAME)));
          }

          static PyObject *t_StempelPolishStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StempelPolishStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_StempelPolishStemFilterFactory::wrap_Object(StempelPolishStemFilterFactory(((t_StempelPolishStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_StempelPolishStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StempelPolishStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StempelPolishStemFilterFactory_init_(t_StempelPolishStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StempelPolishStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StempelPolishStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StempelPolishStemFilterFactory_create(t_StempelPolishStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(StempelPolishStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *DataOutput::class$ = NULL;
        jmethodID *DataOutput::mids$ = NULL;
        bool DataOutput::live$ = false;

        jclass DataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/DataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_copyBytes_4833aa1d1f4cf120] = env->getMethodID(cls, "copyBytes", "(Lorg/apache/lucene/store/DataInput;J)V");
            mids$[mid_writeByte_9c36fec3bac1d0c7] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_2a8b02a5adcbf830] = env->getMethodID(cls, "writeBytes", "([BI)V");
            mids$[mid_writeBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "writeBytes", "([BII)V");
            mids$[mid_writeInt_040c4cd0390c5aff] = env->getMethodID(cls, "writeInt", "(I)V");
            mids$[mid_writeLong_9c778c9bce6694df] = env->getMethodID(cls, "writeLong", "(J)V");
            mids$[mid_writeMapOfStrings_408bd889ee3beae5] = env->getMethodID(cls, "writeMapOfStrings", "(Ljava/util/Map;)V");
            mids$[mid_writeSetOfStrings_d5a4a8d4b806f0ba] = env->getMethodID(cls, "writeSetOfStrings", "(Ljava/util/Set;)V");
            mids$[mid_writeShort_265bc0a0a1840315] = env->getMethodID(cls, "writeShort", "(S)V");
            mids$[mid_writeString_9fd2eb66a64e6f0f] = env->getMethodID(cls, "writeString", "(Ljava/lang/String;)V");
            mids$[mid_writeVInt_040c4cd0390c5aff] = env->getMethodID(cls, "writeVInt", "(I)V");
            mids$[mid_writeVLong_9c778c9bce6694df] = env->getMethodID(cls, "writeVLong", "(J)V");
            mids$[mid_writeZInt_040c4cd0390c5aff] = env->getMethodID(cls, "writeZInt", "(I)V");
            mids$[mid_writeZLong_9c778c9bce6694df] = env->getMethodID(cls, "writeZLong", "(J)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DataOutput::DataOutput() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void DataOutput::copyBytes(const ::org::apache::lucene::store::DataInput & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copyBytes_4833aa1d1f4cf120], a0.this$, a1);
        }

        void DataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_9c36fec3bac1d0c7], a0);
        }

        void DataOutput::writeBytes(const JArray< jbyte > & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_2a8b02a5adcbf830], a0.this$, a1);
        }

        void DataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }

        void DataOutput::writeInt(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeInt_040c4cd0390c5aff], a0);
        }

        void DataOutput::writeLong(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeLong_9c778c9bce6694df], a0);
        }

        void DataOutput::writeMapOfStrings(const ::java::util::Map & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeMapOfStrings_408bd889ee3beae5], a0.this$);
        }

        void DataOutput::writeSetOfStrings(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeSetOfStrings_d5a4a8d4b806f0ba], a0.this$);
        }

        void DataOutput::writeShort(jshort a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeShort_265bc0a0a1840315], a0);
        }

        void DataOutput::writeString(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeString_9fd2eb66a64e6f0f], a0.this$);
        }

        void DataOutput::writeVInt(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeVInt_040c4cd0390c5aff], a0);
        }

        void DataOutput::writeVLong(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeVLong_9c778c9bce6694df], a0);
        }

        void DataOutput::writeZInt(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeZInt_040c4cd0390c5aff], a0);
        }

        void DataOutput::writeZLong(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeZLong_9c778c9bce6694df], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_DataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DataOutput_init_(t_DataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DataOutput_copyBytes(t_DataOutput *self, PyObject *args);
        static PyObject *t_DataOutput_writeByte(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeBytes(t_DataOutput *self, PyObject *args);
        static PyObject *t_DataOutput_writeInt(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeLong(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeMapOfStrings(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeSetOfStrings(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeShort(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeString(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeVInt(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeVLong(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeZInt(t_DataOutput *self, PyObject *arg);
        static PyObject *t_DataOutput_writeZLong(t_DataOutput *self, PyObject *arg);

        static PyMethodDef t_DataOutput__methods_[] = {
          DECLARE_METHOD(t_DataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DataOutput, copyBytes, METH_VARARGS),
          DECLARE_METHOD(t_DataOutput, writeByte, METH_O),
          DECLARE_METHOD(t_DataOutput, writeBytes, METH_VARARGS),
          DECLARE_METHOD(t_DataOutput, writeInt, METH_O),
          DECLARE_METHOD(t_DataOutput, writeLong, METH_O),
          DECLARE_METHOD(t_DataOutput, writeMapOfStrings, METH_O),
          DECLARE_METHOD(t_DataOutput, writeSetOfStrings, METH_O),
          DECLARE_METHOD(t_DataOutput, writeShort, METH_O),
          DECLARE_METHOD(t_DataOutput, writeString, METH_O),
          DECLARE_METHOD(t_DataOutput, writeVInt, METH_O),
          DECLARE_METHOD(t_DataOutput, writeVLong, METH_O),
          DECLARE_METHOD(t_DataOutput, writeZInt, METH_O),
          DECLARE_METHOD(t_DataOutput, writeZLong, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DataOutput)[] = {
          { Py_tp_methods, t_DataOutput__methods_ },
          { Py_tp_init, (void *) t_DataOutput_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DataOutput)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DataOutput, t_DataOutput, DataOutput);

        void t_DataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(DataOutput), &PY_TYPE_DEF(DataOutput), module, "DataOutput", 0);
        }

        void t_DataOutput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DataOutput), "class_", make_descriptor(DataOutput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DataOutput), "wrapfn_", make_descriptor(t_DataOutput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DataOutput), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DataOutput::initializeClass, 1)))
            return NULL;
          return t_DataOutput::wrap_Object(DataOutput(((t_DataOutput *) arg)->object.this$));
        }
        static PyObject *t_DataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DataOutput_init_(t_DataOutput *self, PyObject *args, PyObject *kwds)
        {
          DataOutput object((jobject) NULL);

          INT_CALL(object = DataOutput());
          self->object = object;

          return 0;
        }

        static PyObject *t_DataOutput_copyBytes(t_DataOutput *self, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.copyBytes(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyBytes", args);
          return NULL;
        }

        static PyObject *t_DataOutput_writeByte(t_DataOutput *self, PyObject *arg)
        {
          jbyte a0;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeByte", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeBytes(t_DataOutput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(self->object.writeBytes(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.writeBytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "writeBytes", args);
          return NULL;
        }

        static PyObject *t_DataOutput_writeInt(t_DataOutput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.writeInt(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeInt", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeLong(t_DataOutput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.writeLong(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeLong", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeMapOfStrings(t_DataOutput *self, PyObject *arg)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(self->object.writeMapOfStrings(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeMapOfStrings", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeSetOfStrings(t_DataOutput *self, PyObject *arg)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.writeSetOfStrings(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeSetOfStrings", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeShort(t_DataOutput *self, PyObject *arg)
        {
          jshort a0;

          if (!parseArg(arg, "S", &a0))
          {
            OBJ_CALL(self->object.writeShort(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeShort", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeString(t_DataOutput *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.writeString(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeString", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeVInt(t_DataOutput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.writeVInt(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeVInt", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeVLong(t_DataOutput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.writeVLong(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeVLong", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeZInt(t_DataOutput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.writeZInt(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeZInt", arg);
          return NULL;
        }

        static PyObject *t_DataOutput_writeZLong(t_DataOutput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.writeZLong(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeZLong", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TruncateTokenFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TruncateTokenFilterFactory::class$ = NULL;
          jmethodID *TruncateTokenFilterFactory::mids$ = NULL;
          bool TruncateTokenFilterFactory::live$ = false;
          ::java::lang::String *TruncateTokenFilterFactory::NAME = NULL;
          ::java::lang::String *TruncateTokenFilterFactory::PREFIX_LENGTH_KEY = NULL;

          jclass TruncateTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TruncateTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              PREFIX_LENGTH_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PREFIX_LENGTH_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TruncateTokenFilterFactory::TruncateTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream TruncateTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TruncateTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TruncateTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TruncateTokenFilterFactory_init_(t_TruncateTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TruncateTokenFilterFactory_create(t_TruncateTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_TruncateTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TruncateTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TruncateTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TruncateTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TruncateTokenFilterFactory)[] = {
            { Py_tp_methods, t_TruncateTokenFilterFactory__methods_ },
            { Py_tp_init, (void *) t_TruncateTokenFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TruncateTokenFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(TruncateTokenFilterFactory, t_TruncateTokenFilterFactory, TruncateTokenFilterFactory);

          void t_TruncateTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TruncateTokenFilterFactory), &PY_TYPE_DEF(TruncateTokenFilterFactory), module, "TruncateTokenFilterFactory", 0);
          }

          void t_TruncateTokenFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TruncateTokenFilterFactory), "class_", make_descriptor(TruncateTokenFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TruncateTokenFilterFactory), "wrapfn_", make_descriptor(t_TruncateTokenFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TruncateTokenFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(TruncateTokenFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(TruncateTokenFilterFactory), "NAME", make_descriptor(j2p(*TruncateTokenFilterFactory::NAME)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TruncateTokenFilterFactory), "PREFIX_LENGTH_KEY", make_descriptor(j2p(*TruncateTokenFilterFactory::PREFIX_LENGTH_KEY)));
          }

          static PyObject *t_TruncateTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TruncateTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TruncateTokenFilterFactory::wrap_Object(TruncateTokenFilterFactory(((t_TruncateTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TruncateTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TruncateTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TruncateTokenFilterFactory_init_(t_TruncateTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TruncateTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TruncateTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TruncateTokenFilterFactory_create(t_TruncateTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TruncateTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicTokenizer::class$ = NULL;
          jmethodID *ClassicTokenizer::mids$ = NULL;
          bool ClassicTokenizer::live$ = false;
          jint ClassicTokenizer::ACRONYM = (jint) 0;
          jint ClassicTokenizer::ACRONYM_DEP = (jint) 0;
          jint ClassicTokenizer::ALPHANUM = (jint) 0;
          jint ClassicTokenizer::APOSTROPHE = (jint) 0;
          jint ClassicTokenizer::CJ = (jint) 0;
          jint ClassicTokenizer::COMPANY = (jint) 0;
          jint ClassicTokenizer::EMAIL = (jint) 0;
          jint ClassicTokenizer::HOST = (jint) 0;
          jint ClassicTokenizer::NUM = (jint) 0;
          JArray< ::java::lang::String > *ClassicTokenizer::TOKEN_TYPES = NULL;

          jclass ClassicTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_a55a4d78167a7843] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getMaxTokenLength_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setMaxTokenLength_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              ACRONYM = env->getStaticIntField(cls, "ACRONYM");
              ACRONYM_DEP = env->getStaticIntField(cls, "ACRONYM_DEP");
              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              APOSTROPHE = env->getStaticIntField(cls, "APOSTROPHE");
              CJ = env->getStaticIntField(cls, "CJ");
              COMPANY = env->getStaticIntField(cls, "COMPANY");
              EMAIL = env->getStaticIntField(cls, "EMAIL");
              HOST = env->getStaticIntField(cls, "HOST");
              NUM = env->getStaticIntField(cls, "NUM");
              TOKEN_TYPES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "TOKEN_TYPES", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicTokenizer::ClassicTokenizer() : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ClassicTokenizer::ClassicTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_a55a4d78167a7843, a0.this$)) {}

          void ClassicTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void ClassicTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jint ClassicTokenizer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_9972fcc56b44e79d]);
          }

          jboolean ClassicTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void ClassicTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }

          void ClassicTokenizer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicTokenizer_init_(t_ClassicTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicTokenizer_close(t_ClassicTokenizer *self, PyObject *args);
          static PyObject *t_ClassicTokenizer_end(t_ClassicTokenizer *self, PyObject *args);
          static PyObject *t_ClassicTokenizer_getMaxTokenLength(t_ClassicTokenizer *self);
          static PyObject *t_ClassicTokenizer_incrementToken(t_ClassicTokenizer *self, PyObject *args);
          static PyObject *t_ClassicTokenizer_reset(t_ClassicTokenizer *self, PyObject *args);
          static PyObject *t_ClassicTokenizer_setMaxTokenLength(t_ClassicTokenizer *self, PyObject *arg);
          static PyObject *t_ClassicTokenizer_get__maxTokenLength(t_ClassicTokenizer *self, void *data);
          static int t_ClassicTokenizer_set__maxTokenLength(t_ClassicTokenizer *self, PyObject *arg, void *data);
          static PyGetSetDef t_ClassicTokenizer__fields_[] = {
            DECLARE_GETSET_FIELD(t_ClassicTokenizer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ClassicTokenizer__methods_[] = {
            DECLARE_METHOD(t_ClassicTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_ClassicTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_ClassicTokenizer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_ClassicTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ClassicTokenizer, reset, METH_VARARGS),
            DECLARE_METHOD(t_ClassicTokenizer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ClassicTokenizer)[] = {
            { Py_tp_methods, t_ClassicTokenizer__methods_ },
            { Py_tp_init, (void *) t_ClassicTokenizer_init_ },
            { Py_tp_getset, t_ClassicTokenizer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ClassicTokenizer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Tokenizer),
            NULL
          };

          DEFINE_TYPE(ClassicTokenizer, t_ClassicTokenizer, ClassicTokenizer);

          void t_ClassicTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicTokenizer), &PY_TYPE_DEF(ClassicTokenizer), module, "ClassicTokenizer", 0);
          }

          void t_ClassicTokenizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicTokenizer), "class_", make_descriptor(ClassicTokenizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicTokenizer), "wrapfn_", make_descriptor(t_ClassicTokenizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicTokenizer), "boxfn_", make_descriptor(boxObject));
            env->getClass(ClassicTokenizer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicTokenizer), "ACRONYM", make_descriptor(ClassicTokenizer::ACRONYM));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicTokenizer), "ACRONYM_DEP", make_descriptor(ClassicTokenizer::ACRONYM_DEP));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicTokenizer), "ALPHANUM", make_descriptor(ClassicTokenizer::ALPHANUM));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicTokenizer), "APOSTROPHE", make_descriptor(ClassicTokenizer::APOSTROPHE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicTokenizer), "CJ", make_descriptor(ClassicTokenizer::CJ));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicTokenizer), "COMPANY", make_descriptor(ClassicTokenizer::COMPANY));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicTokenizer), "EMAIL", make_descriptor(ClassicTokenizer::EMAIL));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicTokenizer), "HOST", make_descriptor(ClassicTokenizer::HOST));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicTokenizer), "NUM", make_descriptor(ClassicTokenizer::NUM));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicTokenizer), "TOKEN_TYPES", make_descriptor(JArray<jstring>(ClassicTokenizer::TOKEN_TYPES->this$).wrap()));
          }

          static PyObject *t_ClassicTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicTokenizer::initializeClass, 1)))
              return NULL;
            return t_ClassicTokenizer::wrap_Object(ClassicTokenizer(((t_ClassicTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ClassicTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicTokenizer_init_(t_ClassicTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ClassicTokenizer object((jobject) NULL);

                INT_CALL(object = ClassicTokenizer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ClassicTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
                {
                  INT_CALL(object = ClassicTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicTokenizer_close(t_ClassicTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ClassicTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_ClassicTokenizer_end(t_ClassicTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ClassicTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ClassicTokenizer_getMaxTokenLength(t_ClassicTokenizer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_ClassicTokenizer_incrementToken(t_ClassicTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(ClassicTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ClassicTokenizer_reset(t_ClassicTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ClassicTokenizer), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_ClassicTokenizer_setMaxTokenLength(t_ClassicTokenizer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_ClassicTokenizer_get__maxTokenLength(t_ClassicTokenizer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyLong_FromLong((long) value);
          }
          static int t_ClassicTokenizer_set__maxTokenLength(t_ClassicTokenizer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoBaseCompositeAreaShape.h"
#include "org/apache/lucene/spatial3d/geom/GeoShape.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/spatial3d/geom/GeoAreaShape.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoBaseCompositeAreaShape::class$ = NULL;
          jmethodID *GeoBaseCompositeAreaShape::mids$ = NULL;
          bool GeoBaseCompositeAreaShape::live$ = false;

          jclass GeoBaseCompositeAreaShape::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoBaseCompositeAreaShape");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fd580b4e02411290] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;)V");
              mids$[mid_init$_5d2a2bec6164dbe8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Ljava/io/InputStream;Ljava/lang/Class;)V");
              mids$[mid_getRelationship_2e0040c09ede6a59] = env->getMethodID(cls, "getRelationship", "(Lorg/apache/lucene/spatial3d/geom/GeoShape;)I");
              mids$[mid_intersects_19eac5b582956b3c] = env->getMethodID(cls, "intersects", "(Lorg/apache/lucene/spatial3d/geom/GeoShape;)Z");
              mids$[mid_isShapeInsideGeoAreaShape_2e0040c09ede6a59] = env->getMethodID(cls, "isShapeInsideGeoAreaShape", "(Lorg/apache/lucene/spatial3d/geom/GeoShape;)I");
              mids$[mid_isGeoAreaShapeInsideShape_2e0040c09ede6a59] = env->getMethodID(cls, "isGeoAreaShapeInsideShape", "(Lorg/apache/lucene/spatial3d/geom/GeoShape;)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GeoBaseCompositeAreaShape::GeoBaseCompositeAreaShape(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0) : ::org::apache::lucene::spatial3d::geom::GeoBaseCompositeMembershipShape(env->newObject(initializeClass, &mids$, mid_init$_fd580b4e02411290, a0.this$)) {}

          GeoBaseCompositeAreaShape::GeoBaseCompositeAreaShape(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::java::io::InputStream & a1, const ::java::lang::Class & a2) : ::org::apache::lucene::spatial3d::geom::GeoBaseCompositeMembershipShape(env->newObject(initializeClass, &mids$, mid_init$_5d2a2bec6164dbe8, a0.this$, a1.this$, a2.this$)) {}

          jint GeoBaseCompositeAreaShape::getRelationship(const ::org::apache::lucene::spatial3d::geom::GeoShape & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_getRelationship_2e0040c09ede6a59], a0.this$);
          }

          jboolean GeoBaseCompositeAreaShape::intersects(const ::org::apache::lucene::spatial3d::geom::GeoShape & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_intersects_19eac5b582956b3c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoBaseCompositeAreaShape_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoBaseCompositeAreaShape_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoBaseCompositeAreaShape_of_(t_GeoBaseCompositeAreaShape *self, PyObject *args);
          static int t_GeoBaseCompositeAreaShape_init_(t_GeoBaseCompositeAreaShape *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GeoBaseCompositeAreaShape_getRelationship(t_GeoBaseCompositeAreaShape *self, PyObject *arg);
          static PyObject *t_GeoBaseCompositeAreaShape_intersects(t_GeoBaseCompositeAreaShape *self, PyObject *args);
          static PyObject *t_GeoBaseCompositeAreaShape_get__parameters_(t_GeoBaseCompositeAreaShape *self, void *data);
          static PyGetSetDef t_GeoBaseCompositeAreaShape__fields_[] = {
            DECLARE_GET_FIELD(t_GeoBaseCompositeAreaShape, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GeoBaseCompositeAreaShape__methods_[] = {
            DECLARE_METHOD(t_GeoBaseCompositeAreaShape, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoBaseCompositeAreaShape, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoBaseCompositeAreaShape, of_, METH_VARARGS),
            DECLARE_METHOD(t_GeoBaseCompositeAreaShape, getRelationship, METH_O),
            DECLARE_METHOD(t_GeoBaseCompositeAreaShape, intersects, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoBaseCompositeAreaShape)[] = {
            { Py_tp_methods, t_GeoBaseCompositeAreaShape__methods_ },
            { Py_tp_init, (void *) t_GeoBaseCompositeAreaShape_init_ },
            { Py_tp_getset, t_GeoBaseCompositeAreaShape__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoBaseCompositeAreaShape)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::GeoBaseCompositeMembershipShape),
            NULL
          };

          DEFINE_TYPE(GeoBaseCompositeAreaShape, t_GeoBaseCompositeAreaShape, GeoBaseCompositeAreaShape);
          PyObject *t_GeoBaseCompositeAreaShape::wrap_Object(const GeoBaseCompositeAreaShape& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GeoBaseCompositeAreaShape::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GeoBaseCompositeAreaShape *self = (t_GeoBaseCompositeAreaShape *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_GeoBaseCompositeAreaShape::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GeoBaseCompositeAreaShape::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GeoBaseCompositeAreaShape *self = (t_GeoBaseCompositeAreaShape *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_GeoBaseCompositeAreaShape::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoBaseCompositeAreaShape), &PY_TYPE_DEF(GeoBaseCompositeAreaShape), module, "GeoBaseCompositeAreaShape", 0);
          }

          void t_GeoBaseCompositeAreaShape::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseCompositeAreaShape), "class_", make_descriptor(GeoBaseCompositeAreaShape::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseCompositeAreaShape), "wrapfn_", make_descriptor(t_GeoBaseCompositeAreaShape::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseCompositeAreaShape), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoBaseCompositeAreaShape_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoBaseCompositeAreaShape::initializeClass, 1)))
              return NULL;
            return t_GeoBaseCompositeAreaShape::wrap_Object(GeoBaseCompositeAreaShape(((t_GeoBaseCompositeAreaShape *) arg)->object.this$));
          }
          static PyObject *t_GeoBaseCompositeAreaShape_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoBaseCompositeAreaShape::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoBaseCompositeAreaShape_of_(t_GeoBaseCompositeAreaShape *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_GeoBaseCompositeAreaShape_init_(t_GeoBaseCompositeAreaShape *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                GeoBaseCompositeAreaShape object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0))
                {
                  INT_CALL(object = GeoBaseCompositeAreaShape(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::java::io::InputStream a1((jobject) NULL);
                ::java::lang::Class a2((jobject) NULL);
                PyTypeObject **p2;
                GeoBaseCompositeAreaShape object((jobject) NULL);

                if (!parseArgs(args, "kkK", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::java::io::InputStream::initializeClass, ::java::lang::Class::initializeClass, &a0, &a1, &a2, &p2, ::java::lang::t_Class::parameters_))
                {
                  INT_CALL(object = GeoBaseCompositeAreaShape(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GeoBaseCompositeAreaShape_getRelationship(t_GeoBaseCompositeAreaShape *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::GeoShape a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::GeoShape::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getRelationship(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getRelationship", arg);
            return NULL;
          }

          static PyObject *t_GeoBaseCompositeAreaShape_intersects(t_GeoBaseCompositeAreaShape *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::GeoShape a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::GeoShape::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.intersects(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(GeoBaseCompositeAreaShape), (PyObject *) self, "intersects", args, 2);
          }
          static PyObject *t_GeoBaseCompositeAreaShape_get__parameters_(t_GeoBaseCompositeAreaShape *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/KoreanReadingFormFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {

          ::java::lang::Class *KoreanReadingFormFilterFactory::class$ = NULL;
          jmethodID *KoreanReadingFormFilterFactory::mids$ = NULL;
          bool KoreanReadingFormFilterFactory::live$ = false;
          ::java::lang::String *KoreanReadingFormFilterFactory::NAME = NULL;

          jclass KoreanReadingFormFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/KoreanReadingFormFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KoreanReadingFormFilterFactory::KoreanReadingFormFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream KoreanReadingFormFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          static PyObject *t_KoreanReadingFormFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KoreanReadingFormFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KoreanReadingFormFilterFactory_init_(t_KoreanReadingFormFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KoreanReadingFormFilterFactory_create(t_KoreanReadingFormFilterFactory *self, PyObject *args);

          static PyMethodDef t_KoreanReadingFormFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KoreanReadingFormFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanReadingFormFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanReadingFormFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KoreanReadingFormFilterFactory)[] = {
            { Py_tp_methods, t_KoreanReadingFormFilterFactory__methods_ },
            { Py_tp_init, (void *) t_KoreanReadingFormFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KoreanReadingFormFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(KoreanReadingFormFilterFactory, t_KoreanReadingFormFilterFactory, KoreanReadingFormFilterFactory);

          void t_KoreanReadingFormFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KoreanReadingFormFilterFactory), &PY_TYPE_DEF(KoreanReadingFormFilterFactory), module, "KoreanReadingFormFilterFactory", 0);
          }

          void t_KoreanReadingFormFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanReadingFormFilterFactory), "class_", make_descriptor(KoreanReadingFormFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanReadingFormFilterFactory), "wrapfn_", make_descriptor(t_KoreanReadingFormFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanReadingFormFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(KoreanReadingFormFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanReadingFormFilterFactory), "NAME", make_descriptor(j2p(*KoreanReadingFormFilterFactory::NAME)));
          }

          static PyObject *t_KoreanReadingFormFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KoreanReadingFormFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KoreanReadingFormFilterFactory::wrap_Object(KoreanReadingFormFilterFactory(((t_KoreanReadingFormFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KoreanReadingFormFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KoreanReadingFormFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KoreanReadingFormFilterFactory_init_(t_KoreanReadingFormFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KoreanReadingFormFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KoreanReadingFormFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KoreanReadingFormFilterFactory_create(t_KoreanReadingFormFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(KoreanReadingFormFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "org/apache/lucene/util/fst/FSTStore.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "java/nio/file/Path.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FST::class$ = NULL;
          jmethodID *FST::mids$ = NULL;
          jfieldID *FST::fids$ = NULL;
          bool FST::live$ = false;
          jbyte FST::ARCS_FOR_BINARY_SEARCH = (jbyte) 0;
          jint FST::BIT_ARC_HAS_OUTPUT = (jint) 0;
          jint FST::END_LABEL = (jint) 0;

          jclass FST::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FST");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_961b3637509eea1b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/fst/Outputs;)V");
              mids$[mid_init$_316b9676904bfa61] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/fst/Outputs;Lorg/apache/lucene/util/fst/FSTStore;)V");
              mids$[mid_findTargetArc_2899a01db54b2fe5] = env->getMethodID(cls, "findTargetArc", "(ILorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_getBytesReader_79a0688c6e123a32] = env->getMethodID(cls, "getBytesReader", "()Lorg/apache/lucene/util/fst/FST$BytesReader;");
              mids$[mid_getEmptyOutput_d6bcd06f3102c4d9] = env->getMethodID(cls, "getEmptyOutput", "()Ljava/lang/Object;");
              mids$[mid_getFirstArc_bfd8ca0b4a5c83d7] = env->getMethodID(cls, "getFirstArc", "(Lorg/apache/lucene/util/fst/FST$Arc;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_read_18aecd7ac1ec9695] = env->getStaticMethodID(cls, "read", "(Ljava/nio/file/Path;Lorg/apache/lucene/util/fst/Outputs;)Lorg/apache/lucene/util/fst/FST;");
              mids$[mid_readArcByDirectAddressing_3a7781c7a4137df4] = env->getMethodID(cls, "readArcByDirectAddressing", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;I)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readArcByIndex_3a7781c7a4137df4] = env->getMethodID(cls, "readArcByIndex", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;I)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readFirstRealTargetArc_b66b3c9d8a4b347b] = env->getMethodID(cls, "readFirstRealTargetArc", "(JLorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readFirstTargetArc_2b58b0ade86af743] = env->getMethodID(cls, "readFirstTargetArc", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readLabel_0b0c96eca0e3c655] = env->getMethodID(cls, "readLabel", "(Lorg/apache/lucene/store/DataInput;)I");
              mids$[mid_readLastArcByDirectAddressing_665a52d3e97f75b2] = env->getMethodID(cls, "readLastArcByDirectAddressing", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readNextArc_665a52d3e97f75b2] = env->getMethodID(cls, "readNextArc", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readNextRealArc_665a52d3e97f75b2] = env->getMethodID(cls, "readNextRealArc", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_save_636077fee54d306c] = env->getMethodID(cls, "save", "(Ljava/nio/file/Path;)V");
              mids$[mid_save_90bc5695a07a6bd6] = env->getMethodID(cls, "save", "(Lorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_targetHasArcs_55991bca782f4822] = env->getStaticMethodID(cls, "targetHasArcs", "(Lorg/apache/lucene/util/fst/FST$Arc;)Z");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_outputs] = env->getFieldID(cls, "outputs", "Lorg/apache/lucene/util/fst/Outputs;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              ARCS_FOR_BINARY_SEARCH = env->getStaticByteField(cls, "ARCS_FOR_BINARY_SEARCH");
              BIT_ARC_HAS_OUTPUT = env->getStaticIntField(cls, "BIT_ARC_HAS_OUTPUT");
              END_LABEL = env->getStaticIntField(cls, "END_LABEL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FST::FST(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::util::fst::Outputs & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_961b3637509eea1b, a0.this$, a1.this$, a2.this$)) {}

          FST::FST(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::util::fst::Outputs & a2, const ::org::apache::lucene::util::fst::FSTStore & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_316b9676904bfa61, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          ::org::apache::lucene::util::fst::FST$Arc FST::findTargetArc(jint a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::fst::FST$Arc & a2, const ::org::apache::lucene::util::fst::FST$BytesReader & a3) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_findTargetArc_2899a01db54b2fe5], a0, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::util::fst::FST$BytesReader FST::getBytesReader() const
          {
            return ::org::apache::lucene::util::fst::FST$BytesReader(env->callObjectMethod(this$, mids$[mid_getBytesReader_79a0688c6e123a32]));
          }

          ::java::lang::Object FST::getEmptyOutput() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getEmptyOutput_d6bcd06f3102c4d9]));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::getFirstArc(const ::org::apache::lucene::util::fst::FST$Arc & a0) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_getFirstArc_bfd8ca0b4a5c83d7], a0.this$));
          }

          jlong FST::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          FST FST::read(const ::java::nio::file::Path & a0, const ::org::apache::lucene::util::fst::Outputs & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return FST(env->callStaticObjectMethod(cls, mids$[mid_read_18aecd7ac1ec9695], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readArcByDirectAddressing(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$BytesReader & a1, jint a2) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readArcByDirectAddressing_3a7781c7a4137df4], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readArcByIndex(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$BytesReader & a1, jint a2) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readArcByIndex_3a7781c7a4137df4], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readFirstRealTargetArc(jlong a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::fst::FST$BytesReader & a2) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readFirstRealTargetArc_b66b3c9d8a4b347b], a0, a1.this$, a2.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readFirstTargetArc(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::fst::FST$BytesReader & a2) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readFirstTargetArc_2b58b0ade86af743], a0.this$, a1.this$, a2.this$));
          }

          jint FST::readLabel(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_readLabel_0b0c96eca0e3c655], a0.this$);
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readLastArcByDirectAddressing(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$BytesReader & a1) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readLastArcByDirectAddressing_665a52d3e97f75b2], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readNextArc(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$BytesReader & a1) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readNextArc_665a52d3e97f75b2], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readNextRealArc(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$BytesReader & a1) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readNextRealArc_665a52d3e97f75b2], a0.this$, a1.this$));
          }

          void FST::save(const ::java::nio::file::Path & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_save_636077fee54d306c], a0.this$);
          }

          void FST::save(const ::org::apache::lucene::store::DataOutput & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_save_90bc5695a07a6bd6], a0.this$, a1.this$);
          }

          jboolean FST::targetHasArcs(const ::org::apache::lucene::util::fst::FST$Arc & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_targetHasArcs_55991bca782f4822], a0.this$);
          }

          ::java::lang::String FST::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::util::fst::Outputs FST::_get_outputs() const
          {
            return ::org::apache::lucene::util::fst::Outputs(env->getObjectField(this$, fids$[fid_outputs]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/fst/FST$INPUT_TYPE.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FST_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST_of_(t_FST *self, PyObject *args);
          static int t_FST_init_(t_FST *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FST_findTargetArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_getBytesReader(t_FST *self);
          static PyObject *t_FST_getEmptyOutput(t_FST *self);
          static PyObject *t_FST_getFirstArc(t_FST *self, PyObject *arg);
          static PyObject *t_FST_ramBytesUsed(t_FST *self);
          static PyObject *t_FST_read(PyTypeObject *type, PyObject *args);
          static PyObject *t_FST_readArcByDirectAddressing(t_FST *self, PyObject *args);
          static PyObject *t_FST_readArcByIndex(t_FST *self, PyObject *args);
          static PyObject *t_FST_readFirstRealTargetArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readFirstTargetArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readLabel(t_FST *self, PyObject *arg);
          static PyObject *t_FST_readLastArcByDirectAddressing(t_FST *self, PyObject *args);
          static PyObject *t_FST_readNextArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readNextRealArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_save(t_FST *self, PyObject *args);
          static PyObject *t_FST_targetHasArcs(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST_toString(t_FST *self, PyObject *args);
          static PyObject *t_FST_get__outputs(t_FST *self, void *data);

          static PyObject *t_FST_get__bytesReader(t_FST *self, void *data);
          static PyObject *t_FST_get__emptyOutput(t_FST *self, void *data);
          static PyObject *t_FST_get__parameters_(t_FST *self, void *data);
          static PyGetSetDef t_FST__fields_[] = {
            DECLARE_GET_FIELD(t_FST, outputs),
            DECLARE_GET_FIELD(t_FST, bytesReader),
            DECLARE_GET_FIELD(t_FST, emptyOutput),
            DECLARE_GET_FIELD(t_FST, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FST__methods_[] = {
            DECLARE_METHOD(t_FST, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST, of_, METH_VARARGS),
            DECLARE_METHOD(t_FST, findTargetArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, getBytesReader, METH_NOARGS),
            DECLARE_METHOD(t_FST, getEmptyOutput, METH_NOARGS),
            DECLARE_METHOD(t_FST, getFirstArc, METH_O),
            DECLARE_METHOD(t_FST, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_FST, read, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_FST, readArcByDirectAddressing, METH_VARARGS),
            DECLARE_METHOD(t_FST, readArcByIndex, METH_VARARGS),
            DECLARE_METHOD(t_FST, readFirstRealTargetArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readFirstTargetArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readLabel, METH_O),
            DECLARE_METHOD(t_FST, readLastArcByDirectAddressing, METH_VARARGS),
            DECLARE_METHOD(t_FST, readNextArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readNextRealArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, save, METH_VARARGS),
            DECLARE_METHOD(t_FST, targetHasArcs, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FST)[] = {
            { Py_tp_methods, t_FST__methods_ },
            { Py_tp_init, (void *) t_FST_init_ },
            { Py_tp_getset, t_FST__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FST)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FST, t_FST, FST);
          PyObject *t_FST::wrap_Object(const FST& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST *self = (t_FST *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FST::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST *self = (t_FST *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FST::install(PyObject *module)
          {
            installType(&PY_TYPE(FST), &PY_TYPE_DEF(FST), module, "FST", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FST), "BytesReader", make_descriptor(&PY_TYPE_DEF(FST$BytesReader)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FST), "Arc", make_descriptor(&PY_TYPE_DEF(FST$Arc)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FST), "INPUT_TYPE", make_descriptor(&PY_TYPE_DEF(FST$INPUT_TYPE)));
          }

          void t_FST::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FST), "class_", make_descriptor(FST::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FST), "wrapfn_", make_descriptor(t_FST::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FST), "boxfn_", make_descriptor(boxObject));
            env->getClass(FST::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FST), "ARCS_FOR_BINARY_SEARCH", make_descriptor(FST::ARCS_FOR_BINARY_SEARCH));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FST), "BIT_ARC_HAS_OUTPUT", make_descriptor(FST::BIT_ARC_HAS_OUTPUT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FST), "END_LABEL", make_descriptor(FST::END_LABEL));
          }

          static PyObject *t_FST_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FST::initializeClass, 1)))
              return NULL;
            return t_FST::wrap_Object(FST(((t_FST *) arg)->object.this$));
          }
          static PyObject *t_FST_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FST::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FST_of_(t_FST *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_FST_init_(t_FST *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                ::org::apache::lucene::store::DataInput a1((jobject) NULL);
                ::org::apache::lucene::util::fst::Outputs a2((jobject) NULL);
                PyTypeObject **p2;
                FST object((jobject) NULL);

                if (!parseArgs(args, "kkK", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::util::fst::t_Outputs::parameters_))
                {
                  INT_CALL(object = FST(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                ::org::apache::lucene::store::DataInput a1((jobject) NULL);
                ::org::apache::lucene::util::fst::Outputs a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::util::fst::FSTStore a3((jobject) NULL);
                FST object((jobject) NULL);

                if (!parseArgs(args, "kkKk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, ::org::apache::lucene::util::fst::FSTStore::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::util::fst::t_Outputs::parameters_, &a3))
                {
                  INT_CALL(object = FST(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FST_findTargetArc(t_FST *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$Arc a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$BytesReader a3((jobject) NULL);
            PyTypeObject **p3;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "IKKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a3, &p3, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.findTargetArc(a0, a1, a2, a3));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "findTargetArc", args);
            return NULL;
          }

          static PyObject *t_FST_getBytesReader(t_FST *self)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(result);
          }

          static PyObject *t_FST_getEmptyOutput(t_FST *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.getEmptyOutput());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_FST_getFirstArc(t_FST *self, PyObject *arg)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArg(arg, "K", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_))
            {
              OBJ_CALL(result = self->object.getFirstArc(a0));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "getFirstArc", arg);
            return NULL;
          }

          static PyObject *t_FST_ramBytesUsed(t_FST *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST_read(PyTypeObject *type, PyObject *args)
          {
            ::java::nio::file::Path a0((jobject) NULL);
            ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
            PyTypeObject **p1;
            FST result((jobject) NULL);

            if (!parseArgs(args, "kK", ::java::nio::file::Path::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::FST::read(a0, a1));
              return t_FST::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "read", args);
            return NULL;
          }

          static PyObject *t_FST_readArcByDirectAddressing(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$BytesReader a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KKI", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.readArcByDirectAddressing(a0, a1, a2));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readArcByDirectAddressing", args);
            return NULL;
          }

          static PyObject *t_FST_readArcByIndex(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$BytesReader a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KKI", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.readArcByIndex(a0, a1, a2));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readArcByIndex", args);
            return NULL;
          }

          static PyObject *t_FST_readFirstRealTargetArc(t_FST *self, PyObject *args)
          {
            jlong a0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$BytesReader a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "JKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readFirstRealTargetArc(a0, a1, a2));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readFirstRealTargetArc", args);
            return NULL;
          }

          static PyObject *t_FST_readFirstTargetArc(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$BytesReader a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readFirstTargetArc(a0, a1, a2));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readFirstTargetArc", args);
            return NULL;
          }

          static PyObject *t_FST_readLabel(t_FST *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.readLabel(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "readLabel", arg);
            return NULL;
          }

          static PyObject *t_FST_readLastArcByDirectAddressing(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$BytesReader a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readLastArcByDirectAddressing(a0, a1));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readLastArcByDirectAddressing", args);
            return NULL;
          }

          static PyObject *t_FST_readNextArc(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$BytesReader a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readNextArc(a0, a1));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readNextArc", args);
            return NULL;
          }

          static PyObject *t_FST_readNextRealArc(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$BytesReader a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readNextRealArc(a0, a1));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readNextRealArc", args);
            return NULL;
          }

          static PyObject *t_FST_save(t_FST *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::nio::file::Path a0((jobject) NULL);

                if (!parseArgs(args, "k", ::java::nio::file::Path::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.save(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
                ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.save(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "save", args);
            return NULL;
          }

          static PyObject *t_FST_targetHasArcs(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArg(arg, "K", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::FST::targetHasArcs(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "targetHasArcs", arg);
            return NULL;
          }

          static PyObject *t_FST_toString(t_FST *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(FST), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_FST_get__parameters_(t_FST *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_FST_get__outputs(t_FST *self, void *data)
          {
            ::org::apache::lucene::util::fst::Outputs value((jobject) NULL);
            OBJ_CALL(value = self->object._get_outputs());
            return ::org::apache::lucene::util::fst::t_Outputs::wrap_Object(value);
          }

          static PyObject *t_FST_get__bytesReader(t_FST *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(value);
          }

          static PyObject *t_FST_get__emptyOutput(t_FST *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getEmptyOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/XYPolygon.h"
#include "org/apache/lucene/geo/GeoUtils$WindingOrder.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/geo/XYPolygon.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *XYPolygon::class$ = NULL;
        jmethodID *XYPolygon::mids$ = NULL;
        jfieldID *XYPolygon::fids$ = NULL;
        bool XYPolygon::live$ = false;

        jclass XYPolygon::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/XYPolygon");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4da92bbf1eaabf32] = env->getMethodID(cls, "<init>", "([F[F[Lorg/apache/lucene/geo/XYPolygon;)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getHoles_dd3003061a326c0c] = env->getMethodID(cls, "getHoles", "()[Lorg/apache/lucene/geo/XYPolygon;");
            mids$[mid_getPolyX_62fe0e50f01d1bcf] = env->getMethodID(cls, "getPolyX", "()[F");
            mids$[mid_getPolyX_384f078ef4b8f931] = env->getMethodID(cls, "getPolyX", "(I)F");
            mids$[mid_getPolyY_62fe0e50f01d1bcf] = env->getMethodID(cls, "getPolyY", "()[F");
            mids$[mid_getPolyY_384f078ef4b8f931] = env->getMethodID(cls, "getPolyY", "(I)F");
            mids$[mid_getWindingOrder_a9fa70f6c7b7c217] = env->getMethodID(cls, "getWindingOrder", "()Lorg/apache/lucene/geo/GeoUtils$WindingOrder;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_numHoles_9972fcc56b44e79d] = env->getMethodID(cls, "numHoles", "()I");
            mids$[mid_numPoints_9972fcc56b44e79d] = env->getMethodID(cls, "numPoints", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toComponent2D_6fe8ae19c34b6817] = env->getMethodID(cls, "toComponent2D", "()Lorg/apache/lucene/geo/Component2D;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_maxX] = env->getFieldID(cls, "maxX", "F");
            fids$[fid_maxY] = env->getFieldID(cls, "maxY", "F");
            fids$[fid_minX] = env->getFieldID(cls, "minX", "F");
            fids$[fid_minY] = env->getFieldID(cls, "minY", "F");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        XYPolygon::XYPolygon(const JArray< jfloat > & a0, const JArray< jfloat > & a1, const JArray< XYPolygon > & a2) : ::org::apache::lucene::geo::XYGeometry(env->newObject(initializeClass, &mids$, mid_init$_4da92bbf1eaabf32, a0.this$, a1.this$, a2.this$)) {}

        jboolean XYPolygon::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        JArray< XYPolygon > XYPolygon::getHoles() const
        {
          return JArray< XYPolygon >(env->callObjectMethod(this$, mids$[mid_getHoles_dd3003061a326c0c]));
        }

        JArray< jfloat > XYPolygon::getPolyX() const
        {
          return JArray< jfloat >(env->callObjectMethod(this$, mids$[mid_getPolyX_62fe0e50f01d1bcf]));
        }

        jfloat XYPolygon::getPolyX(jint a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_getPolyX_384f078ef4b8f931], a0);
        }

        JArray< jfloat > XYPolygon::getPolyY() const
        {
          return JArray< jfloat >(env->callObjectMethod(this$, mids$[mid_getPolyY_62fe0e50f01d1bcf]));
        }

        jfloat XYPolygon::getPolyY(jint a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_getPolyY_384f078ef4b8f931], a0);
        }

        ::org::apache::lucene::geo::GeoUtils$WindingOrder XYPolygon::getWindingOrder() const
        {
          return ::org::apache::lucene::geo::GeoUtils$WindingOrder(env->callObjectMethod(this$, mids$[mid_getWindingOrder_a9fa70f6c7b7c217]));
        }

        jint XYPolygon::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jint XYPolygon::numHoles() const
        {
          return env->callIntMethod(this$, mids$[mid_numHoles_9972fcc56b44e79d]);
        }

        jint XYPolygon::numPoints() const
        {
          return env->callIntMethod(this$, mids$[mid_numPoints_9972fcc56b44e79d]);
        }

        ::java::lang::String XYPolygon::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jfloat XYPolygon::_get_maxX() const
        {
          return env->getFloatField(this$, fids$[fid_maxX]);
        }

        jfloat XYPolygon::_get_maxY() const
        {
          return env->getFloatField(this$, fids$[fid_maxY]);
        }

        jfloat XYPolygon::_get_minX() const
        {
          return env->getFloatField(this$, fids$[fid_minX]);
        }

        jfloat XYPolygon::_get_minY() const
        {
          return env->getFloatField(this$, fids$[fid_minY]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_XYPolygon_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_XYPolygon_instance_(PyTypeObject *type, PyObject *arg);
        static int t_XYPolygon_init_(t_XYPolygon *self, PyObject *args, PyObject *kwds);
        static PyObject *t_XYPolygon_equals(t_XYPolygon *self, PyObject *args);
        static PyObject *t_XYPolygon_getHoles(t_XYPolygon *self);
        static PyObject *t_XYPolygon_getPolyX(t_XYPolygon *self, PyObject *args);
        static PyObject *t_XYPolygon_getPolyY(t_XYPolygon *self, PyObject *args);
        static PyObject *t_XYPolygon_getWindingOrder(t_XYPolygon *self);
        static PyObject *t_XYPolygon_hashCode(t_XYPolygon *self, PyObject *args);
        static PyObject *t_XYPolygon_numHoles(t_XYPolygon *self);
        static PyObject *t_XYPolygon_numPoints(t_XYPolygon *self);
        static PyObject *t_XYPolygon_toString(t_XYPolygon *self, PyObject *args);
        static PyObject *t_XYPolygon_get__maxX(t_XYPolygon *self, void *data);
        static PyObject *t_XYPolygon_get__maxY(t_XYPolygon *self, void *data);
        static PyObject *t_XYPolygon_get__minX(t_XYPolygon *self, void *data);
        static PyObject *t_XYPolygon_get__minY(t_XYPolygon *self, void *data);

        static PyObject *t_XYPolygon_get__holes(t_XYPolygon *self, void *data);
        static PyObject *t_XYPolygon_get__polyX(t_XYPolygon *self, void *data);
        static PyObject *t_XYPolygon_get__polyY(t_XYPolygon *self, void *data);
        static PyObject *t_XYPolygon_get__windingOrder(t_XYPolygon *self, void *data);
        static PyGetSetDef t_XYPolygon__fields_[] = {
          DECLARE_GET_FIELD(t_XYPolygon, maxX),
          DECLARE_GET_FIELD(t_XYPolygon, maxY),
          DECLARE_GET_FIELD(t_XYPolygon, minX),
          DECLARE_GET_FIELD(t_XYPolygon, minY),
          DECLARE_GET_FIELD(t_XYPolygon, holes),
          DECLARE_GET_FIELD(t_XYPolygon, polyX),
          DECLARE_GET_FIELD(t_XYPolygon, polyY),
          DECLARE_GET_FIELD(t_XYPolygon, windingOrder),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_XYPolygon__methods_[] = {
          DECLARE_METHOD(t_XYPolygon, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYPolygon, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYPolygon, equals, METH_VARARGS),
          DECLARE_METHOD(t_XYPolygon, getHoles, METH_NOARGS),
          DECLARE_METHOD(t_XYPolygon, getPolyX, METH_VARARGS),
          DECLARE_METHOD(t_XYPolygon, getPolyY, METH_VARARGS),
          DECLARE_METHOD(t_XYPolygon, getWindingOrder, METH_NOARGS),
          DECLARE_METHOD(t_XYPolygon, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_XYPolygon, numHoles, METH_NOARGS),
          DECLARE_METHOD(t_XYPolygon, numPoints, METH_NOARGS),
          DECLARE_METHOD(t_XYPolygon, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(XYPolygon)[] = {
          { Py_tp_methods, t_XYPolygon__methods_ },
          { Py_tp_init, (void *) t_XYPolygon_init_ },
          { Py_tp_getset, t_XYPolygon__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(XYPolygon)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::geo::XYGeometry),
          NULL
        };

        DEFINE_TYPE(XYPolygon, t_XYPolygon, XYPolygon);

        void t_XYPolygon::install(PyObject *module)
        {
          installType(&PY_TYPE(XYPolygon), &PY_TYPE_DEF(XYPolygon), module, "XYPolygon", 0);
        }

        void t_XYPolygon::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYPolygon), "class_", make_descriptor(XYPolygon::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYPolygon), "wrapfn_", make_descriptor(t_XYPolygon::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYPolygon), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_XYPolygon_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, XYPolygon::initializeClass, 1)))
            return NULL;
          return t_XYPolygon::wrap_Object(XYPolygon(((t_XYPolygon *) arg)->object.this$));
        }
        static PyObject *t_XYPolygon_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, XYPolygon::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_XYPolygon_init_(t_XYPolygon *self, PyObject *args, PyObject *kwds)
        {
          JArray< jfloat > a0((jobject) NULL);
          JArray< jfloat > a1((jobject) NULL);
          JArray< XYPolygon > a2((jobject) NULL);
          XYPolygon object((jobject) NULL);

          if (!parseArgs(args, "[F[F[k", XYPolygon::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = XYPolygon(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_XYPolygon_equals(t_XYPolygon *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(XYPolygon), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_XYPolygon_getHoles(t_XYPolygon *self)
        {
          JArray< XYPolygon > result((jobject) NULL);
          OBJ_CALL(result = self->object.getHoles());
          return JArray<jobject>(result.this$).wrap(t_XYPolygon::wrap_jobject);
        }

        static PyObject *t_XYPolygon_getPolyX(t_XYPolygon *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              JArray< jfloat > result((jobject) NULL);
              OBJ_CALL(result = self->object.getPolyX());
              return result.wrap();
            }
            break;
           case 1:
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.getPolyX(a0));
                return PyFloat_FromDouble((double) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getPolyX", args);
          return NULL;
        }

        static PyObject *t_XYPolygon_getPolyY(t_XYPolygon *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              JArray< jfloat > result((jobject) NULL);
              OBJ_CALL(result = self->object.getPolyY());
              return result.wrap();
            }
            break;
           case 1:
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.getPolyY(a0));
                return PyFloat_FromDouble((double) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getPolyY", args);
          return NULL;
        }

        static PyObject *t_XYPolygon_getWindingOrder(t_XYPolygon *self)
        {
          ::org::apache::lucene::geo::GeoUtils$WindingOrder result((jobject) NULL);
          OBJ_CALL(result = self->object.getWindingOrder());
          return ::org::apache::lucene::geo::t_GeoUtils$WindingOrder::wrap_Object(result);
        }

        static PyObject *t_XYPolygon_hashCode(t_XYPolygon *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(XYPolygon), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_XYPolygon_numHoles(t_XYPolygon *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numHoles());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_XYPolygon_numPoints(t_XYPolygon *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numPoints());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_XYPolygon_toString(t_XYPolygon *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(XYPolygon), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_XYPolygon_get__maxX(t_XYPolygon *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_maxX());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_XYPolygon_get__maxY(t_XYPolygon *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_maxY());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_XYPolygon_get__minX(t_XYPolygon *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_minX());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_XYPolygon_get__minY(t_XYPolygon *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_minY());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_XYPolygon_get__holes(t_XYPolygon *self, void *data)
        {
          JArray< XYPolygon > value((jobject) NULL);
          OBJ_CALL(value = self->object.getHoles());
          return JArray<jobject>(value.this$).wrap(t_XYPolygon::wrap_jobject);
        }

        static PyObject *t_XYPolygon_get__polyX(t_XYPolygon *self, void *data)
        {
          JArray< jfloat > value((jobject) NULL);
          OBJ_CALL(value = self->object.getPolyX());
          return value.wrap();
        }

        static PyObject *t_XYPolygon_get__polyY(t_XYPolygon *self, void *data)
        {
          JArray< jfloat > value((jobject) NULL);
          OBJ_CALL(value = self->object.getPolyY());
          return value.wrap();
        }

        static PyObject *t_XYPolygon_get__windingOrder(t_XYPolygon *self, void *data)
        {
          ::org::apache::lucene::geo::GeoUtils$WindingOrder value((jobject) NULL);
          OBJ_CALL(value = self->object.getWindingOrder());
          return ::org::apache::lucene::geo::t_GeoUtils$WindingOrder::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.h"
#include "java/util/ArrayList.h"
#include "java/lang/Class.h"
#include "java/io/PrintStream.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternConsumer.h"
#include "org/apache/lucene/analysis/compound/hyphenation/Hyphenation.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *HyphenationTree::class$ = NULL;
            jmethodID *HyphenationTree::mids$ = NULL;
            bool HyphenationTree::live$ = false;

            jclass HyphenationTree::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/HyphenationTree");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_addClass_9fd2eb66a64e6f0f] = env->getMethodID(cls, "addClass", "(Ljava/lang/String;)V");
                mids$[mid_addException_3a761aed8fa9a715] = env->getMethodID(cls, "addException", "(Ljava/lang/String;Ljava/util/ArrayList;)V");
                mids$[mid_addPattern_15b72f6a44ff93f2] = env->getMethodID(cls, "addPattern", "(Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_findPattern_9bfa75c9f141b67f] = env->getMethodID(cls, "findPattern", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_hyphenate_b400df4d0bd7f3cf] = env->getMethodID(cls, "hyphenate", "(Ljava/lang/String;II)Lorg/apache/lucene/analysis/compound/hyphenation/Hyphenation;");
                mids$[mid_hyphenate_07a8454f78cf5417] = env->getMethodID(cls, "hyphenate", "([CIIII)Lorg/apache/lucene/analysis/compound/hyphenation/Hyphenation;");
                mids$[mid_printStats_51d7bcb97eea24e3] = env->getMethodID(cls, "printStats", "(Ljava/io/PrintStream;)V");
                mids$[mid_getValues_81fae1e0e2d0070b] = env->getMethodID(cls, "getValues", "(I)[B");
                mids$[mid_packValues_a5a7d1128e9e2bb7] = env->getMethodID(cls, "packValues", "(Ljava/lang/String;)I");
                mids$[mid_unpackValues_d7593acad64ef635] = env->getMethodID(cls, "unpackValues", "(I)Ljava/lang/String;");
                mids$[mid_searchPatterns_d55deaab6c0860ff] = env->getMethodID(cls, "searchPatterns", "([CI[B)V");
                mids$[mid_hstrcmp_c63051281e11287a] = env->getMethodID(cls, "hstrcmp", "([CI[CI)I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            HyphenationTree::HyphenationTree() : ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            void HyphenationTree::addClass(const ::java::lang::String & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addClass_9fd2eb66a64e6f0f], a0.this$);
            }

            void HyphenationTree::addException(const ::java::lang::String & a0, const ::java::util::ArrayList & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addException_3a761aed8fa9a715], a0.this$, a1.this$);
            }

            void HyphenationTree::addPattern(const ::java::lang::String & a0, const ::java::lang::String & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addPattern_15b72f6a44ff93f2], a0.this$, a1.this$);
            }

            ::java::lang::String HyphenationTree::findPattern(const ::java::lang::String & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_findPattern_9bfa75c9f141b67f], a0.this$));
            }

            ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation HyphenationTree::hyphenate(const ::java::lang::String & a0, jint a1, jint a2) const
            {
              return ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation(env->callObjectMethod(this$, mids$[mid_hyphenate_b400df4d0bd7f3cf], a0.this$, a1, a2));
            }

            ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation HyphenationTree::hyphenate(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4) const
            {
              return ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation(env->callObjectMethod(this$, mids$[mid_hyphenate_07a8454f78cf5417], a0.this$, a1, a2, a3, a4));
            }

            void HyphenationTree::printStats(const ::java::io::PrintStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_printStats_51d7bcb97eea24e3], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_HyphenationTree_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_HyphenationTree_instance_(PyTypeObject *type, PyObject *arg);
            static int t_HyphenationTree_init_(t_HyphenationTree *self, PyObject *args, PyObject *kwds);
            static PyObject *t_HyphenationTree_addClass(t_HyphenationTree *self, PyObject *arg);
            static PyObject *t_HyphenationTree_addException(t_HyphenationTree *self, PyObject *args);
            static PyObject *t_HyphenationTree_addPattern(t_HyphenationTree *self, PyObject *args);
            static PyObject *t_HyphenationTree_findPattern(t_HyphenationTree *self, PyObject *arg);
            static PyObject *t_HyphenationTree_hyphenate(t_HyphenationTree *self, PyObject *args);
            static PyObject *t_HyphenationTree_printStats(t_HyphenationTree *self, PyObject *args);

            static PyMethodDef t_HyphenationTree__methods_[] = {
              DECLARE_METHOD(t_HyphenationTree, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_HyphenationTree, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_HyphenationTree, addClass, METH_O),
              DECLARE_METHOD(t_HyphenationTree, addException, METH_VARARGS),
              DECLARE_METHOD(t_HyphenationTree, addPattern, METH_VARARGS),
              DECLARE_METHOD(t_HyphenationTree, findPattern, METH_O),
              DECLARE_METHOD(t_HyphenationTree, hyphenate, METH_VARARGS),
              DECLARE_METHOD(t_HyphenationTree, printStats, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(HyphenationTree)[] = {
              { Py_tp_methods, t_HyphenationTree__methods_ },
              { Py_tp_init, (void *) t_HyphenationTree_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(HyphenationTree)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::analysis::compound::hyphenation::TernaryTree),
              NULL
            };

            DEFINE_TYPE(HyphenationTree, t_HyphenationTree, HyphenationTree);

            void t_HyphenationTree::install(PyObject *module)
            {
              installType(&PY_TYPE(HyphenationTree), &PY_TYPE_DEF(HyphenationTree), module, "HyphenationTree", 0);
            }

            void t_HyphenationTree::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(HyphenationTree), "class_", make_descriptor(HyphenationTree::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(HyphenationTree), "wrapfn_", make_descriptor(t_HyphenationTree::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(HyphenationTree), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_HyphenationTree_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, HyphenationTree::initializeClass, 1)))
                return NULL;
              return t_HyphenationTree::wrap_Object(HyphenationTree(((t_HyphenationTree *) arg)->object.this$));
            }
            static PyObject *t_HyphenationTree_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, HyphenationTree::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_HyphenationTree_init_(t_HyphenationTree *self, PyObject *args, PyObject *kwds)
            {
              HyphenationTree object((jobject) NULL);

              INT_CALL(object = HyphenationTree());
              self->object = object;

              return 0;
            }

            static PyObject *t_HyphenationTree_addClass(t_HyphenationTree *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(self->object.addClass(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addClass", arg);
              return NULL;
            }

            static PyObject *t_HyphenationTree_addException(t_HyphenationTree *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::ArrayList a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "sK", ::java::util::ArrayList::initializeClass, &a0, &a1, &p1, ::java::util::t_ArrayList::parameters_))
              {
                OBJ_CALL(self->object.addException(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addException", args);
              return NULL;
            }

            static PyObject *t_HyphenationTree_addPattern(t_HyphenationTree *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(self->object.addPattern(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addPattern", args);
              return NULL;
            }

            static PyObject *t_HyphenationTree_findPattern(t_HyphenationTree *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.findPattern(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "findPattern", arg);
              return NULL;
            }

            static PyObject *t_HyphenationTree_hyphenate(t_HyphenationTree *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jint a1;
                  jint a2;
                  ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation result((jobject) NULL);

                  if (!parseArgs(args, "sII", &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = self->object.hyphenate(a0, a1, a2));
                    return ::org::apache::lucene::analysis::compound::hyphenation::t_Hyphenation::wrap_Object(result);
                  }
                }
                break;
               case 5:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  jint a2;
                  jint a3;
                  jint a4;
                  ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation result((jobject) NULL);

                  if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
                  {
                    OBJ_CALL(result = self->object.hyphenate(a0, a1, a2, a3, a4));
                    return ::org::apache::lucene::analysis::compound::hyphenation::t_Hyphenation::wrap_Object(result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "hyphenate", args);
              return NULL;
            }

            static PyObject *t_HyphenationTree_printStats(t_HyphenationTree *self, PyObject *args)
            {
              ::java::io::PrintStream a0((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(self->object.printStats(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(HyphenationTree), (PyObject *) self, "printStats", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/WordnetSynonymParser.h"
#include "java/io/Reader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *WordnetSynonymParser::class$ = NULL;
          jmethodID *WordnetSynonymParser::mids$ = NULL;
          bool WordnetSynonymParser::live$ = false;

          jclass WordnetSynonymParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/WordnetSynonymParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6baf6b3ab76d877e] = env->getMethodID(cls, "<init>", "(ZZLorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_parse_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "parse", "(Ljava/io/Reader;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordnetSynonymParser::WordnetSynonymParser(jboolean a0, jboolean a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::analysis::synonym::SynonymMap$Parser(env->newObject(initializeClass, &mids$, mid_init$_6baf6b3ab76d877e, a0, a1, a2.this$)) {}

          void WordnetSynonymParser::parse(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_parse_b2f3c57f5e6eb3f2], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_WordnetSynonymParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordnetSynonymParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordnetSynonymParser_init_(t_WordnetSynonymParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordnetSynonymParser_parse(t_WordnetSynonymParser *self, PyObject *args);

          static PyMethodDef t_WordnetSynonymParser__methods_[] = {
            DECLARE_METHOD(t_WordnetSynonymParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordnetSynonymParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordnetSynonymParser, parse, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(WordnetSynonymParser)[] = {
            { Py_tp_methods, t_WordnetSynonymParser__methods_ },
            { Py_tp_init, (void *) t_WordnetSynonymParser_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(WordnetSynonymParser)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::synonym::SynonymMap$Parser),
            NULL
          };

          DEFINE_TYPE(WordnetSynonymParser, t_WordnetSynonymParser, WordnetSynonymParser);

          void t_WordnetSynonymParser::install(PyObject *module)
          {
            installType(&PY_TYPE(WordnetSynonymParser), &PY_TYPE_DEF(WordnetSynonymParser), module, "WordnetSynonymParser", 0);
          }

          void t_WordnetSynonymParser::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordnetSynonymParser), "class_", make_descriptor(WordnetSynonymParser::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordnetSynonymParser), "wrapfn_", make_descriptor(t_WordnetSynonymParser::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordnetSynonymParser), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WordnetSynonymParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordnetSynonymParser::initializeClass, 1)))
              return NULL;
            return t_WordnetSynonymParser::wrap_Object(WordnetSynonymParser(((t_WordnetSynonymParser *) arg)->object.this$));
          }
          static PyObject *t_WordnetSynonymParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordnetSynonymParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordnetSynonymParser_init_(t_WordnetSynonymParser *self, PyObject *args, PyObject *kwds)
          {
            jboolean a0;
            jboolean a1;
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            WordnetSynonymParser object((jobject) NULL);

            if (!parseArgs(args, "ZZk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = WordnetSynonymParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WordnetSynonymParser_parse(t_WordnetSynonymParser *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.parse(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(WordnetSynonymParser), (PyObject *) self, "parse", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/GrowableWriter.h"
#include "org/apache/lucene/util/packed/GrowableWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *GrowableWriter::class$ = NULL;
          jmethodID *GrowableWriter::mids$ = NULL;
          bool GrowableWriter::live$ = false;

          jclass GrowableWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/GrowableWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_06b3fb68215ac523] = env->getMethodID(cls, "<init>", "(IIF)V");
              mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_fill_19ffe11235bb45e0] = env->getMethodID(cls, "fill", "(IIJ)V");
              mids$[mid_get_0f1d64a641e8af53] = env->getMethodID(cls, "get", "(I)J");
              mids$[mid_get_4c642cf3a1fd0041] = env->getMethodID(cls, "get", "(I[JII)I");
              mids$[mid_getBitsPerValue_9972fcc56b44e79d] = env->getMethodID(cls, "getBitsPerValue", "()I");
              mids$[mid_getMutable_ef13df3a0c6e16c1] = env->getMethodID(cls, "getMutable", "()Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_resize_65e99d1e4e6b8086] = env->getMethodID(cls, "resize", "(I)Lorg/apache/lucene/util/packed/GrowableWriter;");
              mids$[mid_save_ead2c38342037c59] = env->getMethodID(cls, "save", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_set_7b2f5b9ddfcb9416] = env->getMethodID(cls, "set", "(IJ)V");
              mids$[mid_set_4c642cf3a1fd0041] = env->getMethodID(cls, "set", "(I[JII)I");
              mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GrowableWriter::GrowableWriter(jint a0, jint a1, jfloat a2) : ::org::apache::lucene::util::packed::PackedInts$Mutable(env->newObject(initializeClass, &mids$, mid_init$_06b3fb68215ac523, a0, a1, a2)) {}

          void GrowableWriter::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
          }

          void GrowableWriter::fill(jint a0, jint a1, jlong a2) const
          {
            env->callVoidMethod(this$, mids$[mid_fill_19ffe11235bb45e0], a0, a1, a2);
          }

          jlong GrowableWriter::get(jint a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_0f1d64a641e8af53], a0);
          }

          jint GrowableWriter::get(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_get_4c642cf3a1fd0041], a0, a1.this$, a2, a3);
          }

          jint GrowableWriter::getBitsPerValue() const
          {
            return env->callIntMethod(this$, mids$[mid_getBitsPerValue_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::util::packed::PackedInts$Mutable GrowableWriter::getMutable() const
          {
            return ::org::apache::lucene::util::packed::PackedInts$Mutable(env->callObjectMethod(this$, mids$[mid_getMutable_ef13df3a0c6e16c1]));
          }

          jlong GrowableWriter::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          GrowableWriter GrowableWriter::resize(jint a0) const
          {
            return GrowableWriter(env->callObjectMethod(this$, mids$[mid_resize_65e99d1e4e6b8086], a0));
          }

          void GrowableWriter::save(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_save_ead2c38342037c59], a0.this$);
          }

          void GrowableWriter::set(jint a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_set_7b2f5b9ddfcb9416], a0, a1);
          }

          jint GrowableWriter::set(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_set_4c642cf3a1fd0041], a0, a1.this$, a2, a3);
          }

          jint GrowableWriter::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_GrowableWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GrowableWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GrowableWriter_init_(t_GrowableWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GrowableWriter_clear(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_fill(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_get(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_getBitsPerValue(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_getMutable(t_GrowableWriter *self);
          static PyObject *t_GrowableWriter_ramBytesUsed(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_resize(t_GrowableWriter *self, PyObject *arg);
          static PyObject *t_GrowableWriter_save(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_set(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_size(t_GrowableWriter *self, PyObject *args);
          static PyObject *t_GrowableWriter_get__bitsPerValue(t_GrowableWriter *self, void *data);
          static PyObject *t_GrowableWriter_get__mutable(t_GrowableWriter *self, void *data);
          static PyGetSetDef t_GrowableWriter__fields_[] = {
            DECLARE_GET_FIELD(t_GrowableWriter, bitsPerValue),
            DECLARE_GET_FIELD(t_GrowableWriter, mutable),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GrowableWriter__methods_[] = {
            DECLARE_METHOD(t_GrowableWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GrowableWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GrowableWriter, clear, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, fill, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, get, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, getBitsPerValue, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, getMutable, METH_NOARGS),
            DECLARE_METHOD(t_GrowableWriter, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, resize, METH_O),
            DECLARE_METHOD(t_GrowableWriter, save, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, set, METH_VARARGS),
            DECLARE_METHOD(t_GrowableWriter, size, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GrowableWriter)[] = {
            { Py_tp_methods, t_GrowableWriter__methods_ },
            { Py_tp_init, (void *) t_GrowableWriter_init_ },
            { Py_tp_getset, t_GrowableWriter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GrowableWriter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::packed::PackedInts$Mutable),
            NULL
          };

          DEFINE_TYPE(GrowableWriter, t_GrowableWriter, GrowableWriter);

          void t_GrowableWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(GrowableWriter), &PY_TYPE_DEF(GrowableWriter), module, "GrowableWriter", 0);
          }

          void t_GrowableWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GrowableWriter), "class_", make_descriptor(GrowableWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GrowableWriter), "wrapfn_", make_descriptor(t_GrowableWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GrowableWriter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GrowableWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GrowableWriter::initializeClass, 1)))
              return NULL;
            return t_GrowableWriter::wrap_Object(GrowableWriter(((t_GrowableWriter *) arg)->object.this$));
          }
          static PyObject *t_GrowableWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GrowableWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GrowableWriter_init_(t_GrowableWriter *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            jfloat a2;
            GrowableWriter object((jobject) NULL);

            if (!parseArgs(args, "IIF", &a0, &a1, &a2))
            {
              INT_CALL(object = GrowableWriter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GrowableWriter_clear(t_GrowableWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(GrowableWriter), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_GrowableWriter_fill(t_GrowableWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jlong a2;

            if (!parseArgs(args, "IIJ", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.fill(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(GrowableWriter), (PyObject *) self, "fill", args, 2);
          }

          static PyObject *t_GrowableWriter_get(t_GrowableWriter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jlong result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              break;
             case 4:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
                  return PyLong_FromLong((long) result);
                }
              }
            }

            return callSuper(PY_TYPE(GrowableWriter), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_GrowableWriter_getBitsPerValue(t_GrowableWriter *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getBitsPerValue());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(GrowableWriter), (PyObject *) self, "getBitsPerValue", args, 2);
          }

          static PyObject *t_GrowableWriter_getMutable(t_GrowableWriter *self)
          {
            ::org::apache::lucene::util::packed::PackedInts$Mutable result((jobject) NULL);
            OBJ_CALL(result = self->object.getMutable());
            return ::org::apache::lucene::util::packed::t_PackedInts$Mutable::wrap_Object(result);
          }

          static PyObject *t_GrowableWriter_ramBytesUsed(t_GrowableWriter *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(GrowableWriter), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_GrowableWriter_resize(t_GrowableWriter *self, PyObject *arg)
          {
            jint a0;
            GrowableWriter result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.resize(a0));
              return t_GrowableWriter::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "resize", arg);
            return NULL;
          }

          static PyObject *t_GrowableWriter_save(t_GrowableWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.save(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(GrowableWriter), (PyObject *) self, "save", args, 2);
          }

          static PyObject *t_GrowableWriter_set(t_GrowableWriter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jint a0;
                jlong a1;

                if (!parseArgs(args, "IJ", &a0, &a1))
                {
                  OBJ_CALL(self->object.set(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.set(a0, a1, a2, a3));
                  return PyLong_FromLong((long) result);
                }
              }
            }

            return callSuper(PY_TYPE(GrowableWriter), (PyObject *) self, "set", args, 2);
          }

          static PyObject *t_GrowableWriter_size(t_GrowableWriter *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(GrowableWriter), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_GrowableWriter_get__bitsPerValue(t_GrowableWriter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBitsPerValue());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_GrowableWriter_get__mutable(t_GrowableWriter *self, void *data)
          {
            ::org::apache::lucene::util::packed::PackedInts$Mutable value((jobject) NULL);
            OBJ_CALL(value = self->object.getMutable());
            return ::org::apache::lucene::util::packed::t_PackedInts$Mutable::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Float.h"
#include "java/lang/Float.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/NumberFormatException.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Float::class$ = NULL;
    jmethodID *Float::mids$ = NULL;
    bool Float::live$ = false;
    jint Float::BYTES = (jint) 0;
    jint Float::MAX_EXPONENT = (jint) 0;
    jfloat Float::MAX_VALUE = (jfloat) 0;
    jint Float::MIN_EXPONENT = (jint) 0;
    jfloat Float::MIN_NORMAL = (jfloat) 0;
    jfloat Float::MIN_VALUE = (jfloat) 0;
    jfloat Float::NEGATIVE_INFINITY = (jfloat) 0;
    jfloat Float::NaN = (jfloat) 0;
    jfloat Float::POSITIVE_INFINITY = (jfloat) 0;
    jint Float::SIZE = (jint) 0;
    ::java::lang::Class *Float::TYPE = NULL;

    jclass Float::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Float");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_3c435f10a3b1e038] = env->getMethodID(cls, "<init>", "(D)V");
        mids$[mid_init$_8e1d952dd65cdc3a] = env->getMethodID(cls, "<init>", "(F)V");
        mids$[mid_byteValue_871cd52a74f26213] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_46423f99ab361abc] = env->getStaticMethodID(cls, "compare", "(FF)I");
        mids$[mid_compareTo_76d17c749e694c4c] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Float;)I");
        mids$[mid_doubleValue_8c74b787998ce4bc] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatToIntBits_7db35672babd0b26] = env->getStaticMethodID(cls, "floatToIntBits", "(F)I");
        mids$[mid_floatToRawIntBits_7db35672babd0b26] = env->getStaticMethodID(cls, "floatToRawIntBits", "(F)I");
        mids$[mid_floatValue_58aec2b64dff50c8] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_7db35672babd0b26] = env->getStaticMethodID(cls, "hashCode", "(F)I");
        mids$[mid_intBitsToFloat_384f078ef4b8f931] = env->getStaticMethodID(cls, "intBitsToFloat", "(I)F");
        mids$[mid_intValue_9972fcc56b44e79d] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_isFinite_3e681ff0d6da91d1] = env->getStaticMethodID(cls, "isFinite", "(F)Z");
        mids$[mid_isInfinite_8454bd5aa23fd11e] = env->getMethodID(cls, "isInfinite", "()Z");
        mids$[mid_isInfinite_3e681ff0d6da91d1] = env->getStaticMethodID(cls, "isInfinite", "(F)Z");
        mids$[mid_isNaN_8454bd5aa23fd11e] = env->getMethodID(cls, "isNaN", "()Z");
        mids$[mid_isNaN_3e681ff0d6da91d1] = env->getStaticMethodID(cls, "isNaN", "(F)Z");
        mids$[mid_longValue_2e5ae9edcb9b072f] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_max_a9c39cecc01e4246] = env->getStaticMethodID(cls, "max", "(FF)F");
        mids$[mid_min_a9c39cecc01e4246] = env->getStaticMethodID(cls, "min", "(FF)F");
        mids$[mid_parseFloat_30d197578d63fb9b] = env->getStaticMethodID(cls, "parseFloat", "(Ljava/lang/String;)F");
        mids$[mid_shortValue_ec20af88366b851e] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_sum_a9c39cecc01e4246] = env->getStaticMethodID(cls, "sum", "(FF)F");
        mids$[mid_toHexString_64158b2ec62ced09] = env->getStaticMethodID(cls, "toHexString", "(F)Ljava/lang/String;");
        mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_64158b2ec62ced09] = env->getStaticMethodID(cls, "toString", "(F)Ljava/lang/String;");
        mids$[mid_valueOf_7734c9b2a9ee8cc6] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Float;");
        mids$[mid_valueOf_0759084ccec0372f] = env->getStaticMethodID(cls, "valueOf", "(F)Ljava/lang/Float;");

        class$ = new ::java::lang::Class(cls);
        cls = (jclass) class$->this$;

        BYTES = env->getStaticIntField(cls, "BYTES");
        MAX_EXPONENT = env->getStaticIntField(cls, "MAX_EXPONENT");
        MAX_VALUE = env->getStaticFloatField(cls, "MAX_VALUE");
        MIN_EXPONENT = env->getStaticIntField(cls, "MIN_EXPONENT");
        MIN_NORMAL = env->getStaticFloatField(cls, "MIN_NORMAL");
        MIN_VALUE = env->getStaticFloatField(cls, "MIN_VALUE");
        NEGATIVE_INFINITY = env->getStaticFloatField(cls, "NEGATIVE_INFINITY");
        NaN = env->getStaticFloatField(cls, "NaN");
        POSITIVE_INFINITY = env->getStaticFloatField(cls, "POSITIVE_INFINITY");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Float::Float(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

    Float::Float(jdouble a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_3c435f10a3b1e038, a0)) {}

    Float::Float(jfloat a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_8e1d952dd65cdc3a, a0)) {}

    jbyte Float::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_871cd52a74f26213]);
    }

    jint Float::compare(jfloat a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_46423f99ab361abc], a0, a1);
    }

    jint Float::compareTo(const Float & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_76d17c749e694c4c], a0.this$);
    }

    jdouble Float::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_8c74b787998ce4bc]);
    }

    jboolean Float::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
    }

    jint Float::floatToIntBits(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_floatToIntBits_7db35672babd0b26], a0);
    }

    jint Float::floatToRawIntBits(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_floatToRawIntBits_7db35672babd0b26], a0);
    }

    jfloat Float::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_58aec2b64dff50c8]);
    }

    jint Float::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
    }

    jint Float::hashCode(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_7db35672babd0b26], a0);
    }

    jfloat Float::intBitsToFloat(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticFloatMethod(cls, mids$[mid_intBitsToFloat_384f078ef4b8f931], a0);
    }

    jint Float::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_9972fcc56b44e79d]);
    }

    jboolean Float::isFinite(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isFinite_3e681ff0d6da91d1], a0);
    }

    jboolean Float::isInfinite() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInfinite_8454bd5aa23fd11e]);
    }

    jboolean Float::isInfinite(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isInfinite_3e681ff0d6da91d1], a0);
    }

    jboolean Float::isNaN() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isNaN_8454bd5aa23fd11e]);
    }

    jboolean Float::isNaN(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isNaN_3e681ff0d6da91d1], a0);
    }

    jlong Float::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_2e5ae9edcb9b072f]);
    }

    jfloat Float::max$(jfloat a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticFloatMethod(cls, mids$[mid_max_a9c39cecc01e4246], a0, a1);
    }

    jfloat Float::min$(jfloat a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticFloatMethod(cls, mids$[mid_min_a9c39cecc01e4246], a0, a1);
    }

    jfloat Float::parseFloat(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticFloatMethod(cls, mids$[mid_parseFloat_30d197578d63fb9b], a0.this$);
    }

    jshort Float::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_ec20af88366b851e]);
    }

    jfloat Float::sum(jfloat a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticFloatMethod(cls, mids$[mid_sum_a9c39cecc01e4246], a0, a1);
    }

    ::java::lang::String Float::toHexString(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_64158b2ec62ced09], a0));
    }

    ::java::lang::String Float::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
    }

    ::java::lang::String Float::toString(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_64158b2ec62ced09], a0));
    }

    Float Float::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Float(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7734c9b2a9ee8cc6], a0.this$));
    }

    Float Float::valueOf(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Float(env->callStaticObjectMethod(cls, mids$[mid_valueOf_0759084ccec0372f], a0));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Float_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Float_init_(t_Float *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Float_byteValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_compareTo(t_Float *self, PyObject *arg);
    static PyObject *t_Float_doubleValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_equals(t_Float *self, PyObject *args);
    static PyObject *t_Float_floatToIntBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_floatToRawIntBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_floatValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_hashCode(t_Float *self, PyObject *args);
    static PyObject *t_Float_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_intBitsToFloat(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_intValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_isFinite(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_isInfinite(t_Float *self);
    static PyObject *t_Float_isInfinite_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_isNaN(t_Float *self);
    static PyObject *t_Float_isNaN_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_longValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_max(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_min(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_parseFloat(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_shortValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_sum(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_toHexString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_toString(t_Float *self, PyObject *args);
    static PyObject *t_Float_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_get__infinite(t_Float *self, void *data);
    static PyObject *t_Float_get__naN(t_Float *self, void *data);
    static PyGetSetDef t_Float__fields_[] = {
      DECLARE_GET_FIELD(t_Float, infinite),
      DECLARE_GET_FIELD(t_Float, naN),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Float__methods_[] = {
      DECLARE_METHOD(t_Float, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Float, compareTo, METH_O),
      DECLARE_METHOD(t_Float, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, equals, METH_VARARGS),
      DECLARE_METHOD(t_Float, floatToIntBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, floatToRawIntBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Float, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, intBitsToFloat, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, isFinite, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, isInfinite, METH_NOARGS),
      DECLARE_METHOD(t_Float, isInfinite_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, isNaN, METH_NOARGS),
      DECLARE_METHOD(t_Float, isNaN_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, max, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Float, min, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Float, parseFloat, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, sum, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Float, toHexString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, toString, METH_VARARGS),
      DECLARE_METHOD(t_Float, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Float)[] = {
      { Py_tp_methods, t_Float__methods_ },
      { Py_tp_init, (void *) t_Float_init_ },
      { Py_tp_getset, t_Float__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Float)[] = {
      &PY_TYPE_DEF(::java::lang::Number),
      NULL
    };

    DEFINE_TYPE(Float, t_Float, Float);

    void t_Float::install(PyObject *module)
    {
      installType(&PY_TYPE(Float), &PY_TYPE_DEF(Float), module, "Float", 0);
    }

    void t_Float::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Float), "class_", make_descriptor(Float::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Float), "wrapfn_", make_descriptor(unboxFloat));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Float), "boxfn_", make_descriptor(boxFloat));
      env->getClass(Float::initializeClass);
      PyObject_SetAttrString((PyObject *) PY_TYPE(Float), "BYTES", make_descriptor(Float::BYTES));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Float), "MAX_EXPONENT", make_descriptor(Float::MAX_EXPONENT));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Float), "MAX_VALUE", make_descriptor(Float::MAX_VALUE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Float), "MIN_EXPONENT", make_descriptor(Float::MIN_EXPONENT));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Float), "MIN_NORMAL", make_descriptor(Float::MIN_NORMAL));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Float), "MIN_VALUE", make_descriptor(Float::MIN_VALUE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Float), "NEGATIVE_INFINITY", make_descriptor(Float::NEGATIVE_INFINITY));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Float), "NaN", make_descriptor(Float::NaN));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Float), "POSITIVE_INFINITY", make_descriptor(Float::POSITIVE_INFINITY));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Float), "SIZE", make_descriptor(Float::SIZE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Float), "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Float::TYPE)));
    }

    static PyObject *t_Float_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Float::initializeClass, 1)))
        return NULL;
      return t_Float::wrap_Object(Float(((t_Float *) arg)->object.this$));
    }
    static PyObject *t_Float_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Float::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Float_init_(t_Float *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Float object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Float(a0));
            self->object = object;
            break;
          }
        }
        {
          jdouble a0;
          Float object((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            INT_CALL(object = Float(a0));
            self->object = object;
            break;
          }
        }
        {
          jfloat a0;
          Float object((jobject) NULL);

          if (!parseArgs(args, "F", &a0))
          {
            INT_CALL(object = Float(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Float_byteValue(t_Float *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Float), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Float_compare(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      jfloat a1;
      jint result;

      if (!parseArgs(args, "FF", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Float::compare(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Float_compareTo(t_Float *self, PyObject *arg)
    {
      Float a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", ::java::lang::PY_TYPE(Float), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Float_doubleValue(t_Float *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(PY_TYPE(Float), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Float_equals(t_Float *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(Float), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Float_floatToIntBits(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jint result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::floatToIntBits(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "floatToIntBits", arg);
      return NULL;
    }

    static PyObject *t_Float_floatToRawIntBits(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jint result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::floatToRawIntBits(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "floatToRawIntBits", arg);
      return NULL;
    }

    static PyObject *t_Float_floatValue(t_Float *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(PY_TYPE(Float), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Float_hashCode(t_Float *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Float), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Float_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      jint result;

      if (!parseArgs(args, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::hashCode(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Float_intBitsToFloat(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jfloat result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::intBitsToFloat(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "intBitsToFloat", arg);
      return NULL;
    }

    static PyObject *t_Float_intValue(t_Float *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Float), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Float_isFinite(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jboolean result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::isFinite(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isFinite", arg);
      return NULL;
    }

    static PyObject *t_Float_isInfinite(t_Float *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isInfinite());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Float_isInfinite_(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jboolean result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::isInfinite(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isInfinite_", arg);
      return NULL;
    }

    static PyObject *t_Float_isNaN(t_Float *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isNaN());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Float_isNaN_(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jboolean result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::isNaN(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isNaN_", arg);
      return NULL;
    }

    static PyObject *t_Float_longValue(t_Float *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(PY_TYPE(Float), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Float_max(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      jfloat a1;
      jfloat result;

      if (!parseArgs(args, "FF", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Float::max$(a0, a1));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "max", args);
      return NULL;
    }

    static PyObject *t_Float_min(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      jfloat a1;
      jfloat result;

      if (!parseArgs(args, "FF", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Float::min$(a0, a1));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "min", args);
      return NULL;
    }

    static PyObject *t_Float_parseFloat(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      jfloat result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::parseFloat(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "parseFloat", arg);
      return NULL;
    }

    static PyObject *t_Float_shortValue(t_Float *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Float), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Float_sum(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      jfloat a1;
      jfloat result;

      if (!parseArgs(args, "FF", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Float::sum(a0, a1));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "sum", args);
      return NULL;
    }

    static PyObject *t_Float_toHexString(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::toHexString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toHexString", arg);
      return NULL;
    }

    static PyObject *t_Float_toString(t_Float *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(PY_TYPE(Float), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Float_toString_(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Float_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Float result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Float::valueOf(a0));
            return t_Float::wrap_Object(result);
          }
        }
        {
          jfloat a0;
          Float result((jobject) NULL);

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(result = ::java::lang::Float::valueOf(a0));
            return t_Float::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }

    static PyObject *t_Float_get__infinite(t_Float *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isInfinite());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Float_get__naN(t_Float *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isNaN());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchMinimalStemFilter::class$ = NULL;
          jmethodID *FrenchMinimalStemFilter::mids$ = NULL;
          bool FrenchMinimalStemFilter::live$ = false;

          jclass FrenchMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchMinimalStemFilter::FrenchMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean FrenchMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchMinimalStemFilter_init_(t_FrenchMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchMinimalStemFilter_incrementToken(t_FrenchMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_FrenchMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_FrenchMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FrenchMinimalStemFilter)[] = {
            { Py_tp_methods, t_FrenchMinimalStemFilter__methods_ },
            { Py_tp_init, (void *) t_FrenchMinimalStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FrenchMinimalStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(FrenchMinimalStemFilter, t_FrenchMinimalStemFilter, FrenchMinimalStemFilter);

          void t_FrenchMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchMinimalStemFilter), &PY_TYPE_DEF(FrenchMinimalStemFilter), module, "FrenchMinimalStemFilter", 0);
          }

          void t_FrenchMinimalStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchMinimalStemFilter), "class_", make_descriptor(FrenchMinimalStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchMinimalStemFilter), "wrapfn_", make_descriptor(t_FrenchMinimalStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchMinimalStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_FrenchMinimalStemFilter::wrap_Object(FrenchMinimalStemFilter(((t_FrenchMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_FrenchMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchMinimalStemFilter_init_(t_FrenchMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            FrenchMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = FrenchMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchMinimalStemFilter_incrementToken(t_FrenchMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FrenchMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/SplittingBreakIterator.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *SplittingBreakIterator::class$ = NULL;
          jmethodID *SplittingBreakIterator::mids$ = NULL;
          bool SplittingBreakIterator::live$ = false;

          jclass SplittingBreakIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/SplittingBreakIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c0a8e9b07bc13463] = env->getMethodID(cls, "<init>", "(Ljava/text/BreakIterator;C)V");
              mids$[mid_current_9972fcc56b44e79d] = env->getMethodID(cls, "current", "()I");
              mids$[mid_first_9972fcc56b44e79d] = env->getMethodID(cls, "first", "()I");
              mids$[mid_following_1e143afe1894d213] = env->getMethodID(cls, "following", "(I)I");
              mids$[mid_last_9972fcc56b44e79d] = env->getMethodID(cls, "last", "()I");
              mids$[mid_next_9972fcc56b44e79d] = env->getMethodID(cls, "next", "()I");
              mids$[mid_next_1e143afe1894d213] = env->getMethodID(cls, "next", "(I)I");
              mids$[mid_preceding_1e143afe1894d213] = env->getMethodID(cls, "preceding", "(I)I");
              mids$[mid_previous_9972fcc56b44e79d] = env->getMethodID(cls, "previous", "()I");
              mids$[mid_setText_9fd2eb66a64e6f0f] = env->getMethodID(cls, "setText", "(Ljava/lang/String;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SplittingBreakIterator::SplittingBreakIterator(const ::java::text::BreakIterator & a0, jchar a1) : ::java::text::BreakIterator(env->newObject(initializeClass, &mids$, mid_init$_c0a8e9b07bc13463, a0.this$, a1)) {}

          jint SplittingBreakIterator::current() const
          {
            return env->callIntMethod(this$, mids$[mid_current_9972fcc56b44e79d]);
          }

          jint SplittingBreakIterator::first() const
          {
            return env->callIntMethod(this$, mids$[mid_first_9972fcc56b44e79d]);
          }

          jint SplittingBreakIterator::following(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_following_1e143afe1894d213], a0);
          }

          jint SplittingBreakIterator::last() const
          {
            return env->callIntMethod(this$, mids$[mid_last_9972fcc56b44e79d]);
          }

          jint SplittingBreakIterator::next() const
          {
            return env->callIntMethod(this$, mids$[mid_next_9972fcc56b44e79d]);
          }

          jint SplittingBreakIterator::next(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_next_1e143afe1894d213], a0);
          }

          jint SplittingBreakIterator::preceding(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_preceding_1e143afe1894d213], a0);
          }

          jint SplittingBreakIterator::previous() const
          {
            return env->callIntMethod(this$, mids$[mid_previous_9972fcc56b44e79d]);
          }

          void SplittingBreakIterator::setText(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setText_9fd2eb66a64e6f0f], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_SplittingBreakIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SplittingBreakIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SplittingBreakIterator_init_(t_SplittingBreakIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SplittingBreakIterator_current(t_SplittingBreakIterator *self, PyObject *args);
          static PyObject *t_SplittingBreakIterator_first(t_SplittingBreakIterator *self, PyObject *args);
          static PyObject *t_SplittingBreakIterator_following(t_SplittingBreakIterator *self, PyObject *args);
          static PyObject *t_SplittingBreakIterator_last(t_SplittingBreakIterator *self, PyObject *args);
          static PyObject *t_SplittingBreakIterator_next(t_SplittingBreakIterator *self, PyObject *args);
          static PyObject *t_SplittingBreakIterator_preceding(t_SplittingBreakIterator *self, PyObject *args);
          static PyObject *t_SplittingBreakIterator_previous(t_SplittingBreakIterator *self, PyObject *args);
          static PyObject *t_SplittingBreakIterator_setText(t_SplittingBreakIterator *self, PyObject *args);
          static int t_SplittingBreakIterator_set__text(t_SplittingBreakIterator *self, PyObject *arg, void *data);
          static PyGetSetDef t_SplittingBreakIterator__fields_[] = {
            DECLARE_SET_FIELD(t_SplittingBreakIterator, text),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SplittingBreakIterator__methods_[] = {
            DECLARE_METHOD(t_SplittingBreakIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SplittingBreakIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SplittingBreakIterator, current, METH_VARARGS),
            DECLARE_METHOD(t_SplittingBreakIterator, first, METH_VARARGS),
            DECLARE_METHOD(t_SplittingBreakIterator, following, METH_VARARGS),
            DECLARE_METHOD(t_SplittingBreakIterator, last, METH_VARARGS),
            DECLARE_METHOD(t_SplittingBreakIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_SplittingBreakIterator, preceding, METH_VARARGS),
            DECLARE_METHOD(t_SplittingBreakIterator, previous, METH_VARARGS),
            DECLARE_METHOD(t_SplittingBreakIterator, setText, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SplittingBreakIterator)[] = {
            { Py_tp_methods, t_SplittingBreakIterator__methods_ },
            { Py_tp_init, (void *) t_SplittingBreakIterator_init_ },
            { Py_tp_getset, t_SplittingBreakIterator__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SplittingBreakIterator)[] = {
            &PY_TYPE_DEF(::java::text::BreakIterator),
            NULL
          };

          DEFINE_TYPE(SplittingBreakIterator, t_SplittingBreakIterator, SplittingBreakIterator);

          void t_SplittingBreakIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(SplittingBreakIterator), &PY_TYPE_DEF(SplittingBreakIterator), module, "SplittingBreakIterator", 0);
          }

          void t_SplittingBreakIterator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SplittingBreakIterator), "class_", make_descriptor(SplittingBreakIterator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SplittingBreakIterator), "wrapfn_", make_descriptor(t_SplittingBreakIterator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SplittingBreakIterator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SplittingBreakIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SplittingBreakIterator::initializeClass, 1)))
              return NULL;
            return t_SplittingBreakIterator::wrap_Object(SplittingBreakIterator(((t_SplittingBreakIterator *) arg)->object.this$));
          }
          static PyObject *t_SplittingBreakIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SplittingBreakIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SplittingBreakIterator_init_(t_SplittingBreakIterator *self, PyObject *args, PyObject *kwds)
          {
            ::java::text::BreakIterator a0((jobject) NULL);
            jchar a1;
            SplittingBreakIterator object((jobject) NULL);

            if (!parseArgs(args, "kC", ::java::text::BreakIterator::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SplittingBreakIterator(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SplittingBreakIterator_current(t_SplittingBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.current());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SplittingBreakIterator), (PyObject *) self, "current", args, 2);
          }

          static PyObject *t_SplittingBreakIterator_first(t_SplittingBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.first());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SplittingBreakIterator), (PyObject *) self, "first", args, 2);
          }

          static PyObject *t_SplittingBreakIterator_following(t_SplittingBreakIterator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.following(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SplittingBreakIterator), (PyObject *) self, "following", args, 2);
          }

          static PyObject *t_SplittingBreakIterator_last(t_SplittingBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.last());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SplittingBreakIterator), (PyObject *) self, "last", args, 2);
          }

          static PyObject *t_SplittingBreakIterator_next(t_SplittingBreakIterator *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.next());
                return PyLong_FromLong((long) result);
              }
              break;
             case 1:
              {
                jint a0;
                jint result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.next(a0));
                  return PyLong_FromLong((long) result);
                }
              }
            }

            return callSuper(PY_TYPE(SplittingBreakIterator), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_SplittingBreakIterator_preceding(t_SplittingBreakIterator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.preceding(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SplittingBreakIterator), (PyObject *) self, "preceding", args, 2);
          }

          static PyObject *t_SplittingBreakIterator_previous(t_SplittingBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.previous());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SplittingBreakIterator), (PyObject *) self, "previous", args, 2);
          }

          static PyObject *t_SplittingBreakIterator_setText(t_SplittingBreakIterator *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(self->object.setText(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SplittingBreakIterator), (PyObject *) self, "setText", args, 2);
          }

          static int t_SplittingBreakIterator_set__text(t_SplittingBreakIterator *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setText(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "text", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiTermsEnum.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "org/apache/lucene/index/ImpactsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiTermsEnum::class$ = NULL;
        jmethodID *MultiTermsEnum::mids$ = NULL;
        bool MultiTermsEnum::live$ = false;

        jclass MultiTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1d764134ae29ee4d] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/ReaderSlice;)V");
            mids$[mid_docFreq_9972fcc56b44e79d] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_getMatchCount_9972fcc56b44e79d] = env->getMethodID(cls, "getMatchCount", "()I");
            mids$[mid_impacts_db5ea3c87adc7c65] = env->getMethodID(cls, "impacts", "(I)Lorg/apache/lucene/index/ImpactsEnum;");
            mids$[mid_next_7af2ea2e37ce82b8] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_ord_2e5ae9edcb9b072f] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_postings_bb7f8f714d51176b] = env->getMethodID(cls, "postings", "(Lorg/apache/lucene/index/PostingsEnum;I)Lorg/apache/lucene/index/PostingsEnum;");
            mids$[mid_seekCeil_78824f53cd7bdb8a] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_553d972fe19daaec] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_9c778c9bce6694df] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_term_7af2ea2e37ce82b8] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_totalTermFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "totalTermFreq", "()J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermsEnum::MultiTermsEnum(const JArray< ::org::apache::lucene::index::ReaderSlice > & a0) : ::org::apache::lucene::index::BaseTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_1d764134ae29ee4d, a0.this$)) {}

        jint MultiTermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_9972fcc56b44e79d]);
        }

        jint MultiTermsEnum::getMatchCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getMatchCount_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::ImpactsEnum MultiTermsEnum::impacts(jint a0) const
        {
          return ::org::apache::lucene::index::ImpactsEnum(env->callObjectMethod(this$, mids$[mid_impacts_db5ea3c87adc7c65], a0));
        }

        ::org::apache::lucene::util::BytesRef MultiTermsEnum::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_7af2ea2e37ce82b8]));
        }

        jlong MultiTermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::index::PostingsEnum MultiTermsEnum::postings(const ::org::apache::lucene::index::PostingsEnum & a0, jint a1) const
        {
          return ::org::apache::lucene::index::PostingsEnum(env->callObjectMethod(this$, mids$[mid_postings_bb7f8f714d51176b], a0.this$, a1));
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus MultiTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_78824f53cd7bdb8a], a0.this$));
        }

        jboolean MultiTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_553d972fe19daaec], a0.this$);
        }

        void MultiTermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_9c778c9bce6694df], a0);
        }

        ::org::apache::lucene::util::BytesRef MultiTermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_7af2ea2e37ce82b8]));
        }

        ::java::lang::String MultiTermsEnum::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jlong MultiTermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiTermsEnum_init_(t_MultiTermsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermsEnum_docFreq(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_getMatchCount(t_MultiTermsEnum *self);
        static PyObject *t_MultiTermsEnum_impacts(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_next(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_ord(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_postings(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_seekCeil(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_seekExact(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_term(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_toString(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_totalTermFreq(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_get__matchCount(t_MultiTermsEnum *self, void *data);
        static PyGetSetDef t_MultiTermsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermsEnum, matchCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermsEnum__methods_[] = {
          DECLARE_METHOD(t_MultiTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermsEnum, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, getMatchCount, METH_NOARGS),
          DECLARE_METHOD(t_MultiTermsEnum, impacts, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, next, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, ord, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, postings, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, seekCeil, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, term, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, toString, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiTermsEnum)[] = {
          { Py_tp_methods, t_MultiTermsEnum__methods_ },
          { Py_tp_init, (void *) t_MultiTermsEnum_init_ },
          { Py_tp_getset, t_MultiTermsEnum__fields_ },
          { Py_tp_iter, (void *) PyObject_SelfIter },
          { Py_tp_iternext, (void *) ((PyObject *(*)(t_MultiTermsEnum *)) get_next< t_MultiTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >) },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiTermsEnum)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::BaseTermsEnum),
          NULL
        };

        DEFINE_TYPE(MultiTermsEnum, t_MultiTermsEnum, MultiTermsEnum);

        void t_MultiTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermsEnum), &PY_TYPE_DEF(MultiTermsEnum), module, "MultiTermsEnum", 0);
        }

        void t_MultiTermsEnum::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermsEnum), "class_", make_descriptor(MultiTermsEnum::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermsEnum), "wrapfn_", make_descriptor(t_MultiTermsEnum::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermsEnum), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermsEnum::initializeClass, 1)))
            return NULL;
          return t_MultiTermsEnum::wrap_Object(MultiTermsEnum(((t_MultiTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_MultiTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiTermsEnum_init_(t_MultiTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::ReaderSlice > a0((jobject) NULL);
          MultiTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "[k", ::org::apache::lucene::index::ReaderSlice::initializeClass, &a0))
          {
            INT_CALL(object = MultiTermsEnum(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiTermsEnum_docFreq(t_MultiTermsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docFreq());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MultiTermsEnum), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_MultiTermsEnum_getMatchCount(t_MultiTermsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMatchCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_MultiTermsEnum_impacts(t_MultiTermsEnum *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::ImpactsEnum result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.impacts(a0));
            return ::org::apache::lucene::index::t_ImpactsEnum::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MultiTermsEnum), (PyObject *) self, "impacts", args, 2);
        }

        static PyObject *t_MultiTermsEnum_next(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MultiTermsEnum), (PyObject *) self, "next", args, 2);
        }

        static PyObject *t_MultiTermsEnum_ord(t_MultiTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(MultiTermsEnum), (PyObject *) self, "ord", args, 2);
        }

        static PyObject *t_MultiTermsEnum_postings(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::index::PostingsEnum a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::index::PostingsEnum result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::PostingsEnum::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.postings(a0, a1));
            return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MultiTermsEnum), (PyObject *) self, "postings", args, 2);
        }

        static PyObject *t_MultiTermsEnum_seekCeil(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MultiTermsEnum), (PyObject *) self, "seekCeil", args, 2);
        }

        static PyObject *t_MultiTermsEnum_seekExact(t_MultiTermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.seekExact(a0));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(PY_TYPE(MultiTermsEnum), (PyObject *) self, "seekExact", args, 2);
        }

        static PyObject *t_MultiTermsEnum_term(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MultiTermsEnum), (PyObject *) self, "term", args, 2);
        }

        static PyObject *t_MultiTermsEnum_toString(t_MultiTermsEnum *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(MultiTermsEnum), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiTermsEnum_totalTermFreq(t_MultiTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.totalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(MultiTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_MultiTermsEnum_get__matchCount(t_MultiTermsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMatchCount());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockValidatingDirectoryWrapper.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockValidatingDirectoryWrapper::class$ = NULL;
        jmethodID *LockValidatingDirectoryWrapper::mids$ = NULL;
        bool LockValidatingDirectoryWrapper::live$ = false;

        jclass LockValidatingDirectoryWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockValidatingDirectoryWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_79d7a2fc1d47b5f2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Lock;)V");
            mids$[mid_copyFrom_a0726436aec3a466] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_createOutput_40e6d6dcc3f676b9] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_9fd2eb66a64e6f0f] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_rename_15b72f6a44ff93f2] = env->getMethodID(cls, "rename", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_sync_50bc3ddc62a19f2d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_syncMetaData_f2cc1bce94666404] = env->getMethodID(cls, "syncMetaData", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockValidatingDirectoryWrapper::LockValidatingDirectoryWrapper(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::store::Lock & a1) : ::org::apache::lucene::store::FilterDirectory(env->newObject(initializeClass, &mids$, mid_init$_79d7a2fc1d47b5f2, a0.this$, a1.this$)) {}

        void LockValidatingDirectoryWrapper::copyFrom(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_copyFrom_a0726436aec3a466], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        ::org::apache::lucene::store::IndexOutput LockValidatingDirectoryWrapper::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_40e6d6dcc3f676b9], a0.this$, a1.this$));
        }

        void LockValidatingDirectoryWrapper::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_9fd2eb66a64e6f0f], a0.this$);
        }

        void LockValidatingDirectoryWrapper::rename(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_rename_15b72f6a44ff93f2], a0.this$, a1.this$);
        }

        void LockValidatingDirectoryWrapper::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_50bc3ddc62a19f2d], a0.this$);
        }

        void LockValidatingDirectoryWrapper::syncMetaData() const
        {
          env->callVoidMethod(this$, mids$[mid_syncMetaData_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockValidatingDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockValidatingDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockValidatingDirectoryWrapper_init_(t_LockValidatingDirectoryWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LockValidatingDirectoryWrapper_copyFrom(t_LockValidatingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_LockValidatingDirectoryWrapper_createOutput(t_LockValidatingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_LockValidatingDirectoryWrapper_deleteFile(t_LockValidatingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_LockValidatingDirectoryWrapper_rename(t_LockValidatingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_LockValidatingDirectoryWrapper_sync(t_LockValidatingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_LockValidatingDirectoryWrapper_syncMetaData(t_LockValidatingDirectoryWrapper *self, PyObject *args);

        static PyMethodDef t_LockValidatingDirectoryWrapper__methods_[] = {
          DECLARE_METHOD(t_LockValidatingDirectoryWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockValidatingDirectoryWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockValidatingDirectoryWrapper, copyFrom, METH_VARARGS),
          DECLARE_METHOD(t_LockValidatingDirectoryWrapper, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_LockValidatingDirectoryWrapper, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_LockValidatingDirectoryWrapper, rename, METH_VARARGS),
          DECLARE_METHOD(t_LockValidatingDirectoryWrapper, sync, METH_VARARGS),
          DECLARE_METHOD(t_LockValidatingDirectoryWrapper, syncMetaData, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LockValidatingDirectoryWrapper)[] = {
          { Py_tp_methods, t_LockValidatingDirectoryWrapper__methods_ },
          { Py_tp_init, (void *) t_LockValidatingDirectoryWrapper_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LockValidatingDirectoryWrapper)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::FilterDirectory),
          NULL
        };

        DEFINE_TYPE(LockValidatingDirectoryWrapper, t_LockValidatingDirectoryWrapper, LockValidatingDirectoryWrapper);

        void t_LockValidatingDirectoryWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(LockValidatingDirectoryWrapper), &PY_TYPE_DEF(LockValidatingDirectoryWrapper), module, "LockValidatingDirectoryWrapper", 0);
        }

        void t_LockValidatingDirectoryWrapper::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LockValidatingDirectoryWrapper), "class_", make_descriptor(LockValidatingDirectoryWrapper::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LockValidatingDirectoryWrapper), "wrapfn_", make_descriptor(t_LockValidatingDirectoryWrapper::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LockValidatingDirectoryWrapper), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockValidatingDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockValidatingDirectoryWrapper::initializeClass, 1)))
            return NULL;
          return t_LockValidatingDirectoryWrapper::wrap_Object(LockValidatingDirectoryWrapper(((t_LockValidatingDirectoryWrapper *) arg)->object.this$));
        }
        static PyObject *t_LockValidatingDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockValidatingDirectoryWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockValidatingDirectoryWrapper_init_(t_LockValidatingDirectoryWrapper *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::store::Lock a1((jobject) NULL);
          LockValidatingDirectoryWrapper object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Lock::initializeClass, &a0, &a1))
          {
            INT_CALL(object = LockValidatingDirectoryWrapper(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LockValidatingDirectoryWrapper_copyFrom(t_LockValidatingDirectoryWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);

          if (!parseArgs(args, "kssk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.copyFrom(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(LockValidatingDirectoryWrapper), (PyObject *) self, "copyFrom", args, 2);
        }

        static PyObject *t_LockValidatingDirectoryWrapper_createOutput(t_LockValidatingDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(LockValidatingDirectoryWrapper), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_LockValidatingDirectoryWrapper_deleteFile(t_LockValidatingDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(LockValidatingDirectoryWrapper), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_LockValidatingDirectoryWrapper_rename(t_LockValidatingDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.rename(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(LockValidatingDirectoryWrapper), (PyObject *) self, "rename", args, 2);
        }

        static PyObject *t_LockValidatingDirectoryWrapper_sync(t_LockValidatingDirectoryWrapper *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(LockValidatingDirectoryWrapper), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_LockValidatingDirectoryWrapper_syncMetaData(t_LockValidatingDirectoryWrapper *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.syncMetaData());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(LockValidatingDirectoryWrapper), (PyObject *) self, "syncMetaData", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiFunction$Values.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/valuesource/MultiFunction.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiFunction$Values::class$ = NULL;
            jmethodID *MultiFunction$Values::mids$ = NULL;
            bool MultiFunction$Values::live$ = false;

            jclass MultiFunction$Values::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiFunction$Values");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_aa3a2f93caeb4705] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/valuesource/MultiFunction;[Lorg/apache/lucene/queries/function/FunctionValues;)V");
                mids$[mid_getValueFiller_e87ccfe6e71ebd5e] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_toString_d7593acad64ef635] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiFunction$Values::MultiFunction$Values(const ::org::apache::lucene::queries::function::valuesource::MultiFunction & a0, const JArray< ::org::apache::lucene::queries::function::FunctionValues > & a1) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_aa3a2f93caeb4705, a0.this$, a1.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller MultiFunction$Values::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_e87ccfe6e71ebd5e]));
            }

            ::java::lang::String MultiFunction$Values::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_d7593acad64ef635], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiFunction$Values_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiFunction$Values_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiFunction$Values_init_(t_MultiFunction$Values *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiFunction$Values_getValueFiller(t_MultiFunction$Values *self, PyObject *args);
            static PyObject *t_MultiFunction$Values_toString(t_MultiFunction$Values *self, PyObject *args);
            static PyObject *t_MultiFunction$Values_get__valueFiller(t_MultiFunction$Values *self, void *data);
            static PyGetSetDef t_MultiFunction$Values__fields_[] = {
              DECLARE_GET_FIELD(t_MultiFunction$Values, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_MultiFunction$Values__methods_[] = {
              DECLARE_METHOD(t_MultiFunction$Values, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction$Values, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction$Values, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction$Values, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(MultiFunction$Values)[] = {
              { Py_tp_methods, t_MultiFunction$Values__methods_ },
              { Py_tp_init, (void *) t_MultiFunction$Values_init_ },
              { Py_tp_getset, t_MultiFunction$Values__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(MultiFunction$Values)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::FunctionValues),
              NULL
            };

            DEFINE_TYPE(MultiFunction$Values, t_MultiFunction$Values, MultiFunction$Values);

            void t_MultiFunction$Values::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiFunction$Values), &PY_TYPE_DEF(MultiFunction$Values), module, "MultiFunction$Values", 0);
            }

            void t_MultiFunction$Values::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFunction$Values), "class_", make_descriptor(MultiFunction$Values::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFunction$Values), "wrapfn_", make_descriptor(t_MultiFunction$Values::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFunction$Values), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiFunction$Values_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiFunction$Values::initializeClass, 1)))
                return NULL;
              return t_MultiFunction$Values::wrap_Object(MultiFunction$Values(((t_MultiFunction$Values *) arg)->object.this$));
            }
            static PyObject *t_MultiFunction$Values_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiFunction$Values::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiFunction$Values_init_(t_MultiFunction$Values *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::valuesource::MultiFunction a0((jobject) NULL);
              JArray< ::org::apache::lucene::queries::function::FunctionValues > a1((jobject) NULL);
              MultiFunction$Values object((jobject) NULL);

              if (!parseArgs(args, "k[k", ::org::apache::lucene::queries::function::valuesource::MultiFunction::initializeClass, ::org::apache::lucene::queries::function::FunctionValues::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MultiFunction$Values(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiFunction$Values_getValueFiller(t_MultiFunction$Values *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(PY_TYPE(MultiFunction$Values), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_MultiFunction$Values_toString(t_MultiFunction$Values *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(MultiFunction$Values), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_MultiFunction$Values_get__valueFiller(t_MultiFunction$Values *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserConstants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *StandardSyntaxParserConstants::class$ = NULL;
              jmethodID *StandardSyntaxParserConstants::mids$ = NULL;
              bool StandardSyntaxParserConstants::live$ = false;
              jint StandardSyntaxParserConstants::AND = (jint) 0;
              jint StandardSyntaxParserConstants::Boost = (jint) 0;
              jint StandardSyntaxParserConstants::CARAT = (jint) 0;
              jint StandardSyntaxParserConstants::DEFAULT = (jint) 0;
              jint StandardSyntaxParserConstants::EOF = (jint) 0;
              jint StandardSyntaxParserConstants::FUZZY_SLOP = (jint) 0;
              jint StandardSyntaxParserConstants::LPAREN = (jint) 0;
              jint StandardSyntaxParserConstants::MINUS = (jint) 0;
              jint StandardSyntaxParserConstants::NOT = (jint) 0;
              jint StandardSyntaxParserConstants::NUMBER = (jint) 0;
              jint StandardSyntaxParserConstants::OP_COLON = (jint) 0;
              jint StandardSyntaxParserConstants::OP_EQUAL = (jint) 0;
              jint StandardSyntaxParserConstants::OP_LESSTHAN = (jint) 0;
              jint StandardSyntaxParserConstants::OP_LESSTHANEQ = (jint) 0;
              jint StandardSyntaxParserConstants::OP_MORETHAN = (jint) 0;
              jint StandardSyntaxParserConstants::OP_MORETHANEQ = (jint) 0;
              jint StandardSyntaxParserConstants::OR = (jint) 0;
              jint StandardSyntaxParserConstants::PLUS = (jint) 0;
              jint StandardSyntaxParserConstants::QUOTED = (jint) 0;
              jint StandardSyntaxParserConstants::RANGEEX_END = (jint) 0;
              jint StandardSyntaxParserConstants::RANGEEX_START = (jint) 0;
              jint StandardSyntaxParserConstants::RANGEIN_END = (jint) 0;
              jint StandardSyntaxParserConstants::RANGEIN_START = (jint) 0;
              jint StandardSyntaxParserConstants::RANGE_GOOP = (jint) 0;
              jint StandardSyntaxParserConstants::RANGE_QUOTED = (jint) 0;
              jint StandardSyntaxParserConstants::RANGE_TO = (jint) 0;
              jint StandardSyntaxParserConstants::REGEXPTERM = (jint) 0;
              jint StandardSyntaxParserConstants::RPAREN = (jint) 0;
              jint StandardSyntaxParserConstants::Range = (jint) 0;
              jint StandardSyntaxParserConstants::TERM = (jint) 0;
              jint StandardSyntaxParserConstants::_ESCAPED_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_NUM_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_QUOTED_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_TERM_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_TERM_START_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_WHITESPACE = (jint) 0;
              JArray< ::java::lang::String > *StandardSyntaxParserConstants::tokenImage = NULL;

              jclass StandardSyntaxParserConstants::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserConstants");

                  class$ = new ::java::lang::Class(cls);
                  cls = (jclass) class$->this$;

                  AND = env->getStaticIntField(cls, "AND");
                  Boost = env->getStaticIntField(cls, "Boost");
                  CARAT = env->getStaticIntField(cls, "CARAT");
                  DEFAULT = env->getStaticIntField(cls, "DEFAULT");
                  EOF = env->getStaticIntField(cls, "EOF");
                  FUZZY_SLOP = env->getStaticIntField(cls, "FUZZY_SLOP");
                  LPAREN = env->getStaticIntField(cls, "LPAREN");
                  MINUS = env->getStaticIntField(cls, "MINUS");
                  NOT = env->getStaticIntField(cls, "NOT");
                  NUMBER = env->getStaticIntField(cls, "NUMBER");
                  OP_COLON = env->getStaticIntField(cls, "OP_COLON");
                  OP_EQUAL = env->getStaticIntField(cls, "OP_EQUAL");
                  OP_LESSTHAN = env->getStaticIntField(cls, "OP_LESSTHAN");
                  OP_LESSTHANEQ = env->getStaticIntField(cls, "OP_LESSTHANEQ");
                  OP_MORETHAN = env->getStaticIntField(cls, "OP_MORETHAN");
                  OP_MORETHANEQ = env->getStaticIntField(cls, "OP_MORETHANEQ");
                  OR = env->getStaticIntField(cls, "OR");
                  PLUS = env->getStaticIntField(cls, "PLUS");
                  QUOTED = env->getStaticIntField(cls, "QUOTED");
                  RANGEEX_END = env->getStaticIntField(cls, "RANGEEX_END");
                  RANGEEX_START = env->getStaticIntField(cls, "RANGEEX_START");
                  RANGEIN_END = env->getStaticIntField(cls, "RANGEIN_END");
                  RANGEIN_START = env->getStaticIntField(cls, "RANGEIN_START");
                  RANGE_GOOP = env->getStaticIntField(cls, "RANGE_GOOP");
                  RANGE_QUOTED = env->getStaticIntField(cls, "RANGE_QUOTED");
                  RANGE_TO = env->getStaticIntField(cls, "RANGE_TO");
                  REGEXPTERM = env->getStaticIntField(cls, "REGEXPTERM");
                  RPAREN = env->getStaticIntField(cls, "RPAREN");
                  Range = env->getStaticIntField(cls, "Range");
                  TERM = env->getStaticIntField(cls, "TERM");
                  _ESCAPED_CHAR = env->getStaticIntField(cls, "_ESCAPED_CHAR");
                  _NUM_CHAR = env->getStaticIntField(cls, "_NUM_CHAR");
                  _QUOTED_CHAR = env->getStaticIntField(cls, "_QUOTED_CHAR");
                  _TERM_CHAR = env->getStaticIntField(cls, "_TERM_CHAR");
                  _TERM_START_CHAR = env->getStaticIntField(cls, "_TERM_START_CHAR");
                  _WHITESPACE = env->getStaticIntField(cls, "_WHITESPACE");
                  tokenImage = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "tokenImage", "[Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_StandardSyntaxParserConstants_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardSyntaxParserConstants_instance_(PyTypeObject *type, PyObject *arg);

              static PyMethodDef t_StandardSyntaxParserConstants__methods_[] = {
                DECLARE_METHOD(t_StandardSyntaxParserConstants, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParserConstants, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(StandardSyntaxParserConstants)[] = {
                { Py_tp_methods, t_StandardSyntaxParserConstants__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(StandardSyntaxParserConstants)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(StandardSyntaxParserConstants, t_StandardSyntaxParserConstants, StandardSyntaxParserConstants);

              void t_StandardSyntaxParserConstants::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardSyntaxParserConstants), &PY_TYPE_DEF(StandardSyntaxParserConstants), module, "StandardSyntaxParserConstants", 0);
              }

              void t_StandardSyntaxParserConstants::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "class_", make_descriptor(StandardSyntaxParserConstants::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "wrapfn_", make_descriptor(t_StandardSyntaxParserConstants::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "boxfn_", make_descriptor(boxObject));
                env->getClass(StandardSyntaxParserConstants::initializeClass);
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "AND", make_descriptor(StandardSyntaxParserConstants::AND));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "Boost", make_descriptor(StandardSyntaxParserConstants::Boost));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "CARAT", make_descriptor(StandardSyntaxParserConstants::CARAT));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "DEFAULT", make_descriptor(StandardSyntaxParserConstants::DEFAULT));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "EOF", make_descriptor(StandardSyntaxParserConstants::EOF));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "FUZZY_SLOP", make_descriptor(StandardSyntaxParserConstants::FUZZY_SLOP));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "LPAREN", make_descriptor(StandardSyntaxParserConstants::LPAREN));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "MINUS", make_descriptor(StandardSyntaxParserConstants::MINUS));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "NOT", make_descriptor(StandardSyntaxParserConstants::NOT));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "NUMBER", make_descriptor(StandardSyntaxParserConstants::NUMBER));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "OP_COLON", make_descriptor(StandardSyntaxParserConstants::OP_COLON));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "OP_EQUAL", make_descriptor(StandardSyntaxParserConstants::OP_EQUAL));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "OP_LESSTHAN", make_descriptor(StandardSyntaxParserConstants::OP_LESSTHAN));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "OP_LESSTHANEQ", make_descriptor(StandardSyntaxParserConstants::OP_LESSTHANEQ));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "OP_MORETHAN", make_descriptor(StandardSyntaxParserConstants::OP_MORETHAN));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "OP_MORETHANEQ", make_descriptor(StandardSyntaxParserConstants::OP_MORETHANEQ));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "OR", make_descriptor(StandardSyntaxParserConstants::OR));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "PLUS", make_descriptor(StandardSyntaxParserConstants::PLUS));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "QUOTED", make_descriptor(StandardSyntaxParserConstants::QUOTED));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "RANGEEX_END", make_descriptor(StandardSyntaxParserConstants::RANGEEX_END));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "RANGEEX_START", make_descriptor(StandardSyntaxParserConstants::RANGEEX_START));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "RANGEIN_END", make_descriptor(StandardSyntaxParserConstants::RANGEIN_END));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "RANGEIN_START", make_descriptor(StandardSyntaxParserConstants::RANGEIN_START));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "RANGE_GOOP", make_descriptor(StandardSyntaxParserConstants::RANGE_GOOP));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "RANGE_QUOTED", make_descriptor(StandardSyntaxParserConstants::RANGE_QUOTED));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "RANGE_TO", make_descriptor(StandardSyntaxParserConstants::RANGE_TO));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "REGEXPTERM", make_descriptor(StandardSyntaxParserConstants::REGEXPTERM));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "RPAREN", make_descriptor(StandardSyntaxParserConstants::RPAREN));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "Range", make_descriptor(StandardSyntaxParserConstants::Range));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "TERM", make_descriptor(StandardSyntaxParserConstants::TERM));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "_ESCAPED_CHAR", make_descriptor(StandardSyntaxParserConstants::_ESCAPED_CHAR));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "_NUM_CHAR", make_descriptor(StandardSyntaxParserConstants::_NUM_CHAR));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "_QUOTED_CHAR", make_descriptor(StandardSyntaxParserConstants::_QUOTED_CHAR));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "_TERM_CHAR", make_descriptor(StandardSyntaxParserConstants::_TERM_CHAR));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "_TERM_START_CHAR", make_descriptor(StandardSyntaxParserConstants::_TERM_START_CHAR));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "_WHITESPACE", make_descriptor(StandardSyntaxParserConstants::_WHITESPACE));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserConstants), "tokenImage", make_descriptor(JArray<jstring>(StandardSyntaxParserConstants::tokenImage->this$).wrap()));
              }

              static PyObject *t_StandardSyntaxParserConstants_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardSyntaxParserConstants::initializeClass, 1)))
                  return NULL;
                return t_StandardSyntaxParserConstants::wrap_Object(StandardSyntaxParserConstants(((t_StandardSyntaxParserConstants *) arg)->object.this$));
              }
              static PyObject *t_StandardSyntaxParserConstants_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardSyntaxParserConstants::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/RangeQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *RangeQueryBuilder::class$ = NULL;
            jmethodID *RangeQueryBuilder::mids$ = NULL;
            bool RangeQueryBuilder::live$ = false;

            jclass RangeQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/RangeQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            RangeQueryBuilder::RangeQueryBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_RangeQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RangeQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_RangeQueryBuilder_init_(t_RangeQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_RangeQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_RangeQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RangeQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(RangeQueryBuilder)[] = {
              { Py_tp_methods, t_RangeQueryBuilder__methods_ },
              { Py_tp_init, (void *) t_RangeQueryBuilder_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(RangeQueryBuilder)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(RangeQueryBuilder, t_RangeQueryBuilder, RangeQueryBuilder);

            void t_RangeQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(RangeQueryBuilder), &PY_TYPE_DEF(RangeQueryBuilder), module, "RangeQueryBuilder", 0);
            }

            void t_RangeQueryBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(RangeQueryBuilder), "class_", make_descriptor(RangeQueryBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(RangeQueryBuilder), "wrapfn_", make_descriptor(t_RangeQueryBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(RangeQueryBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RangeQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RangeQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_RangeQueryBuilder::wrap_Object(RangeQueryBuilder(((t_RangeQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_RangeQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RangeQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_RangeQueryBuilder_init_(t_RangeQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              RangeQueryBuilder object((jobject) NULL);

              INT_CALL(object = RangeQueryBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/QueryTimeoutImpl.h"
#include "org/apache/lucene/index/QueryTimeout.h"
#include "java/lang/Long.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *QueryTimeoutImpl::class$ = NULL;
        jmethodID *QueryTimeoutImpl::mids$ = NULL;
        bool QueryTimeoutImpl::live$ = false;

        jclass QueryTimeoutImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/QueryTimeoutImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9c778c9bce6694df] = env->getMethodID(cls, "<init>", "(J)V");
            mids$[mid_getTimeoutAt_24165e10e82b50a8] = env->getMethodID(cls, "getTimeoutAt", "()Ljava/lang/Long;");
            mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_shouldExit_8454bd5aa23fd11e] = env->getMethodID(cls, "shouldExit", "()Z");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        QueryTimeoutImpl::QueryTimeoutImpl(jlong a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9c778c9bce6694df, a0)) {}

        ::java::lang::Long QueryTimeoutImpl::getTimeoutAt() const
        {
          return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_getTimeoutAt_24165e10e82b50a8]));
        }

        void QueryTimeoutImpl::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
        }

        jboolean QueryTimeoutImpl::shouldExit() const
        {
          return env->callBooleanMethod(this$, mids$[mid_shouldExit_8454bd5aa23fd11e]);
        }

        ::java::lang::String QueryTimeoutImpl::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_QueryTimeoutImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryTimeoutImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_QueryTimeoutImpl_init_(t_QueryTimeoutImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_QueryTimeoutImpl_getTimeoutAt(t_QueryTimeoutImpl *self);
        static PyObject *t_QueryTimeoutImpl_reset(t_QueryTimeoutImpl *self);
        static PyObject *t_QueryTimeoutImpl_shouldExit(t_QueryTimeoutImpl *self);
        static PyObject *t_QueryTimeoutImpl_toString(t_QueryTimeoutImpl *self, PyObject *args);
        static PyObject *t_QueryTimeoutImpl_get__timeoutAt(t_QueryTimeoutImpl *self, void *data);
        static PyGetSetDef t_QueryTimeoutImpl__fields_[] = {
          DECLARE_GET_FIELD(t_QueryTimeoutImpl, timeoutAt),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_QueryTimeoutImpl__methods_[] = {
          DECLARE_METHOD(t_QueryTimeoutImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryTimeoutImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryTimeoutImpl, getTimeoutAt, METH_NOARGS),
          DECLARE_METHOD(t_QueryTimeoutImpl, reset, METH_NOARGS),
          DECLARE_METHOD(t_QueryTimeoutImpl, shouldExit, METH_NOARGS),
          DECLARE_METHOD(t_QueryTimeoutImpl, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(QueryTimeoutImpl)[] = {
          { Py_tp_methods, t_QueryTimeoutImpl__methods_ },
          { Py_tp_init, (void *) t_QueryTimeoutImpl_init_ },
          { Py_tp_getset, t_QueryTimeoutImpl__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(QueryTimeoutImpl)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(QueryTimeoutImpl, t_QueryTimeoutImpl, QueryTimeoutImpl);

        void t_QueryTimeoutImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(QueryTimeoutImpl), &PY_TYPE_DEF(QueryTimeoutImpl), module, "QueryTimeoutImpl", 0);
        }

        void t_QueryTimeoutImpl::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryTimeoutImpl), "class_", make_descriptor(QueryTimeoutImpl::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryTimeoutImpl), "wrapfn_", make_descriptor(t_QueryTimeoutImpl::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryTimeoutImpl), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_QueryTimeoutImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, QueryTimeoutImpl::initializeClass, 1)))
            return NULL;
          return t_QueryTimeoutImpl::wrap_Object(QueryTimeoutImpl(((t_QueryTimeoutImpl *) arg)->object.this$));
        }
        static PyObject *t_QueryTimeoutImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, QueryTimeoutImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_QueryTimeoutImpl_init_(t_QueryTimeoutImpl *self, PyObject *args, PyObject *kwds)
        {
          jlong a0;
          QueryTimeoutImpl object((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            INT_CALL(object = QueryTimeoutImpl(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_QueryTimeoutImpl_getTimeoutAt(t_QueryTimeoutImpl *self)
        {
          ::java::lang::Long result((jobject) NULL);
          OBJ_CALL(result = self->object.getTimeoutAt());
          return ::java::lang::t_Long::wrap_Object(result);
        }

        static PyObject *t_QueryTimeoutImpl_reset(t_QueryTimeoutImpl *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }

        static PyObject *t_QueryTimeoutImpl_shouldExit(t_QueryTimeoutImpl *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.shouldExit());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_QueryTimeoutImpl_toString(t_QueryTimeoutImpl *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(QueryTimeoutImpl), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_QueryTimeoutImpl_get__timeoutAt(t_QueryTimeoutImpl *self, void *data)
        {
          ::java::lang::Long value((jobject) NULL);
          OBJ_CALL(value = self->object.getTimeoutAt());
          return ::java::lang::t_Long::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/classification/KNearestFuzzyClassifier.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/classification/Classifier.h"
#include "org/apache/lucene/classification/ClassificationResult.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {

        ::java::lang::Class *KNearestFuzzyClassifier::class$ = NULL;
        jmethodID *KNearestFuzzyClassifier::mids$ = NULL;
        bool KNearestFuzzyClassifier::live$ = false;

        jclass KNearestFuzzyClassifier::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/classification/KNearestFuzzyClassifier");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_3a368c8b96b4f9c1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/similarities/Similarity;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/search/Query;ILjava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_assignClass_5edc036bda71a93d] = env->getMethodID(cls, "assignClass", "(Ljava/lang/String;)Lorg/apache/lucene/classification/ClassificationResult;");
            mids$[mid_getClasses_25278b4b3ab80e37] = env->getMethodID(cls, "getClasses", "(Ljava/lang/String;)Ljava/util/List;");
            mids$[mid_getClasses_a5d57c41d0cd0867] = env->getMethodID(cls, "getClasses", "(Ljava/lang/String;I)Ljava/util/List;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        KNearestFuzzyClassifier::KNearestFuzzyClassifier(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::similarities::Similarity & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::org::apache::lucene::search::Query & a3, jint a4, const ::java::lang::String & a5, const JArray< ::java::lang::String > & a6) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3a368c8b96b4f9c1, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5.this$, a6.this$)) {}

        ::org::apache::lucene::classification::ClassificationResult KNearestFuzzyClassifier::assignClass(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::classification::ClassificationResult(env->callObjectMethod(this$, mids$[mid_assignClass_5edc036bda71a93d], a0.this$));
        }

        ::java::util::List KNearestFuzzyClassifier::getClasses(const ::java::lang::String & a0) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getClasses_25278b4b3ab80e37], a0.this$));
        }

        ::java::util::List KNearestFuzzyClassifier::getClasses(const ::java::lang::String & a0, jint a1) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getClasses_a5d57c41d0cd0867], a0.this$, a1));
        }

        ::java::lang::String KNearestFuzzyClassifier::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        static PyObject *t_KNearestFuzzyClassifier_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_KNearestFuzzyClassifier_instance_(PyTypeObject *type, PyObject *arg);
        static int t_KNearestFuzzyClassifier_init_(t_KNearestFuzzyClassifier *self, PyObject *args, PyObject *kwds);
        static PyObject *t_KNearestFuzzyClassifier_assignClass(t_KNearestFuzzyClassifier *self, PyObject *arg);
        static PyObject *t_KNearestFuzzyClassifier_getClasses(t_KNearestFuzzyClassifier *self, PyObject *args);
        static PyObject *t_KNearestFuzzyClassifier_toString(t_KNearestFuzzyClassifier *self, PyObject *args);

        static PyMethodDef t_KNearestFuzzyClassifier__methods_[] = {
          DECLARE_METHOD(t_KNearestFuzzyClassifier, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KNearestFuzzyClassifier, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KNearestFuzzyClassifier, assignClass, METH_O),
          DECLARE_METHOD(t_KNearestFuzzyClassifier, getClasses, METH_VARARGS),
          DECLARE_METHOD(t_KNearestFuzzyClassifier, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(KNearestFuzzyClassifier)[] = {
          { Py_tp_methods, t_KNearestFuzzyClassifier__methods_ },
          { Py_tp_init, (void *) t_KNearestFuzzyClassifier_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(KNearestFuzzyClassifier)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(KNearestFuzzyClassifier, t_KNearestFuzzyClassifier, KNearestFuzzyClassifier);

        void t_KNearestFuzzyClassifier::install(PyObject *module)
        {
          installType(&PY_TYPE(KNearestFuzzyClassifier), &PY_TYPE_DEF(KNearestFuzzyClassifier), module, "KNearestFuzzyClassifier", 0);
        }

        void t_KNearestFuzzyClassifier::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(KNearestFuzzyClassifier), "class_", make_descriptor(KNearestFuzzyClassifier::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(KNearestFuzzyClassifier), "wrapfn_", make_descriptor(t_KNearestFuzzyClassifier::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(KNearestFuzzyClassifier), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_KNearestFuzzyClassifier_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, KNearestFuzzyClassifier::initializeClass, 1)))
            return NULL;
          return t_KNearestFuzzyClassifier::wrap_Object(KNearestFuzzyClassifier(((t_KNearestFuzzyClassifier *) arg)->object.this$));
        }
        static PyObject *t_KNearestFuzzyClassifier_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, KNearestFuzzyClassifier::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_KNearestFuzzyClassifier_init_(t_KNearestFuzzyClassifier *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::similarities::Similarity a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
          ::org::apache::lucene::search::Query a3((jobject) NULL);
          jint a4;
          ::java::lang::String a5((jobject) NULL);
          JArray< ::java::lang::String > a6((jobject) NULL);
          KNearestFuzzyClassifier object((jobject) NULL);

          if (!parseArgs(args, "kkkkIs[s", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::similarities::Similarity::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
          {
            INT_CALL(object = KNearestFuzzyClassifier(a0, a1, a2, a3, a4, a5, a6));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_KNearestFuzzyClassifier_assignClass(t_KNearestFuzzyClassifier *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::classification::ClassificationResult result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.assignClass(a0));
            return ::org::apache::lucene::classification::t_ClassificationResult::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          PyErr_SetArgsError((PyObject *) self, "assignClass", arg);
          return NULL;
        }

        static PyObject *t_KNearestFuzzyClassifier_getClasses(t_KNearestFuzzyClassifier *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.getClasses(a0));
                return ::java::util::t_List::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                OBJ_CALL(result = self->object.getClasses(a0, a1));
                return ::java::util::t_List::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getClasses", args);
          return NULL;
        }

        static PyObject *t_KNearestFuzzyClassifier_toString(t_KNearestFuzzyClassifier *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(KNearestFuzzyClassifier), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/BooleanSingleChildOptimizationQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *BooleanSingleChildOptimizationQueryNodeProcessor::class$ = NULL;
              jmethodID *BooleanSingleChildOptimizationQueryNodeProcessor::mids$ = NULL;
              bool BooleanSingleChildOptimizationQueryNodeProcessor::live$ = false;

              jclass BooleanSingleChildOptimizationQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/BooleanSingleChildOptimizationQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_e420eeaadf0bcd20] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanSingleChildOptimizationQueryNodeProcessor::BooleanSingleChildOptimizationQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_BooleanSingleChildOptimizationQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanSingleChildOptimizationQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanSingleChildOptimizationQueryNodeProcessor_init_(t_BooleanSingleChildOptimizationQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_BooleanSingleChildOptimizationQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_BooleanSingleChildOptimizationQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanSingleChildOptimizationQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(BooleanSingleChildOptimizationQueryNodeProcessor)[] = {
                { Py_tp_methods, t_BooleanSingleChildOptimizationQueryNodeProcessor__methods_ },
                { Py_tp_init, (void *) t_BooleanSingleChildOptimizationQueryNodeProcessor_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(BooleanSingleChildOptimizationQueryNodeProcessor)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl),
                NULL
              };

              DEFINE_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor, t_BooleanSingleChildOptimizationQueryNodeProcessor, BooleanSingleChildOptimizationQueryNodeProcessor);

              void t_BooleanSingleChildOptimizationQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor), &PY_TYPE_DEF(BooleanSingleChildOptimizationQueryNodeProcessor), module, "BooleanSingleChildOptimizationQueryNodeProcessor", 0);
              }

              void t_BooleanSingleChildOptimizationQueryNodeProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor), "class_", make_descriptor(BooleanSingleChildOptimizationQueryNodeProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor), "wrapfn_", make_descriptor(t_BooleanSingleChildOptimizationQueryNodeProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanSingleChildOptimizationQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanSingleChildOptimizationQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_BooleanSingleChildOptimizationQueryNodeProcessor::wrap_Object(BooleanSingleChildOptimizationQueryNodeProcessor(((t_BooleanSingleChildOptimizationQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_BooleanSingleChildOptimizationQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanSingleChildOptimizationQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanSingleChildOptimizationQueryNodeProcessor_init_(t_BooleanSingleChildOptimizationQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                BooleanSingleChildOptimizationQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = BooleanSingleChildOptimizationQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/MultiFieldQueryParser.h"
#include "java/util/Map.h"
#include "java/lang/Float.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *MultiFieldQueryParser::class$ = NULL;
          jmethodID *MultiFieldQueryParser::mids$ = NULL;
          bool MultiFieldQueryParser::live$ = false;

          jclass MultiFieldQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/MultiFieldQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b575256d5b8b6872] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_2e1d58cf85ba8f14] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map;)V");
              mids$[mid_parse_624f5f0bd2ccc6fd] = env->getStaticMethodID(cls, "parse", "([Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
              mids$[mid_parse_9b8192354815ff88] = env->getStaticMethodID(cls, "parse", "([Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
              mids$[mid_parse_461e1cdcf28c0718] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_da5a988725940811] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_3a5baa20d223c529] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_ee01989124e5cf67] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_e08cfaa30c1cfbe9] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRegexpQuery_e08cfaa30c1cfbe9] = env->getMethodID(cls, "getRegexpQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_e08cfaa30c1cfbe9] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_391b6230ae9c102d] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getMultiFieldQuery_f5d003a5f0f6b381] = env->getMethodID(cls, "getMultiFieldQuery", "(Ljava/util/List;)Lorg/apache/lucene/search/Query;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MultiFieldQueryParser::MultiFieldQueryParser(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_b575256d5b8b6872, a0.this$, a1.this$)) {}

          MultiFieldQueryParser::MultiFieldQueryParser(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::java::util::Map & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_2e1d58cf85ba8f14, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::Query MultiFieldQueryParser::parse(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_624f5f0bd2ccc6fd], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::search::Query MultiFieldQueryParser::parse(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_9b8192354815ff88], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::search::Query MultiFieldQueryParser::parse(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_461e1cdcf28c0718], a0.this$, a1.this$, a2.this$, a3.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_MultiFieldQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MultiFieldQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MultiFieldQueryParser_init_(t_MultiFieldQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MultiFieldQueryParser_parse(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_MultiFieldQueryParser__methods_[] = {
            DECLARE_METHOD(t_MultiFieldQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiFieldQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiFieldQueryParser, parse, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MultiFieldQueryParser)[] = {
            { Py_tp_methods, t_MultiFieldQueryParser__methods_ },
            { Py_tp_init, (void *) t_MultiFieldQueryParser_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MultiFieldQueryParser)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::queryparser::classic::QueryParser),
            NULL
          };

          DEFINE_TYPE(MultiFieldQueryParser, t_MultiFieldQueryParser, MultiFieldQueryParser);

          void t_MultiFieldQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(MultiFieldQueryParser), &PY_TYPE_DEF(MultiFieldQueryParser), module, "MultiFieldQueryParser", 0);
          }

          void t_MultiFieldQueryParser::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFieldQueryParser), "class_", make_descriptor(MultiFieldQueryParser::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFieldQueryParser), "wrapfn_", make_descriptor(t_MultiFieldQueryParser::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFieldQueryParser), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MultiFieldQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MultiFieldQueryParser::initializeClass, 1)))
              return NULL;
            return t_MultiFieldQueryParser::wrap_Object(MultiFieldQueryParser(((t_MultiFieldQueryParser *) arg)->object.this$));
          }
          static PyObject *t_MultiFieldQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MultiFieldQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MultiFieldQueryParser_init_(t_MultiFieldQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                MultiFieldQueryParser object((jobject) NULL);

                if (!parseArgs(args, "[sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = MultiFieldQueryParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ::java::util::Map a2((jobject) NULL);
                PyTypeObject **p2;
                MultiFieldQueryParser object((jobject) NULL);

                if (!parseArgs(args, "[skK", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = MultiFieldQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MultiFieldQueryParser_parse(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "[s[sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::parse(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              break;
             case 4:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                JArray< ::org::apache::lucene::search::BooleanClause$Occur > a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "[s[s[Kk", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::parse(a0, a1, a2, a3));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                JArray< ::org::apache::lucene::search::BooleanClause$Occur > a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "s[s[Kk", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::parse(a0, a1, a2, a3));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
            }

            return callSuper(type, "parse", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/KoreanNumberFilter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {

          ::java::lang::Class *KoreanNumberFilter::class$ = NULL;
          jmethodID *KoreanNumberFilter::mids$ = NULL;
          bool KoreanNumberFilter::live$ = false;

          jclass KoreanNumberFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/KoreanNumberFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_isArabicNumeral_540573ecd04ffc16] = env->getMethodID(cls, "isArabicNumeral", "(C)Z");
              mids$[mid_isNumeral_145b2d0af0c06b93] = env->getMethodID(cls, "isNumeral", "(Ljava/lang/String;)Z");
              mids$[mid_isNumeral_540573ecd04ffc16] = env->getMethodID(cls, "isNumeral", "(C)Z");
              mids$[mid_isNumeralPunctuation_145b2d0af0c06b93] = env->getMethodID(cls, "isNumeralPunctuation", "(Ljava/lang/String;)Z");
              mids$[mid_isNumeralPunctuation_540573ecd04ffc16] = env->getMethodID(cls, "isNumeralPunctuation", "(C)Z");
              mids$[mid_normalizeNumber_9bfa75c9f141b67f] = env->getMethodID(cls, "normalizeNumber", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KoreanNumberFilter::KoreanNumberFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean KoreanNumberFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          jboolean KoreanNumberFilter::isArabicNumeral(jchar a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isArabicNumeral_540573ecd04ffc16], a0);
          }

          jboolean KoreanNumberFilter::isNumeral(const ::java::lang::String & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNumeral_145b2d0af0c06b93], a0.this$);
          }

          jboolean KoreanNumberFilter::isNumeral(jchar a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNumeral_540573ecd04ffc16], a0);
          }

          jboolean KoreanNumberFilter::isNumeralPunctuation(const ::java::lang::String & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNumeralPunctuation_145b2d0af0c06b93], a0.this$);
          }

          jboolean KoreanNumberFilter::isNumeralPunctuation(jchar a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNumeralPunctuation_540573ecd04ffc16], a0);
          }

          ::java::lang::String KoreanNumberFilter::normalizeNumber(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_normalizeNumber_9bfa75c9f141b67f], a0.this$));
          }

          void KoreanNumberFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/ko/KoreanNumberFilter$NumberBuffer.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          static PyObject *t_KoreanNumberFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KoreanNumberFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KoreanNumberFilter_init_(t_KoreanNumberFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KoreanNumberFilter_incrementToken(t_KoreanNumberFilter *self, PyObject *args);
          static PyObject *t_KoreanNumberFilter_isArabicNumeral(t_KoreanNumberFilter *self, PyObject *arg);
          static PyObject *t_KoreanNumberFilter_isNumeral(t_KoreanNumberFilter *self, PyObject *args);
          static PyObject *t_KoreanNumberFilter_isNumeralPunctuation(t_KoreanNumberFilter *self, PyObject *args);
          static PyObject *t_KoreanNumberFilter_normalizeNumber(t_KoreanNumberFilter *self, PyObject *arg);
          static PyObject *t_KoreanNumberFilter_reset(t_KoreanNumberFilter *self, PyObject *args);

          static PyMethodDef t_KoreanNumberFilter__methods_[] = {
            DECLARE_METHOD(t_KoreanNumberFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanNumberFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanNumberFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_KoreanNumberFilter, isArabicNumeral, METH_O),
            DECLARE_METHOD(t_KoreanNumberFilter, isNumeral, METH_VARARGS),
            DECLARE_METHOD(t_KoreanNumberFilter, isNumeralPunctuation, METH_VARARGS),
            DECLARE_METHOD(t_KoreanNumberFilter, normalizeNumber, METH_O),
            DECLARE_METHOD(t_KoreanNumberFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KoreanNumberFilter)[] = {
            { Py_tp_methods, t_KoreanNumberFilter__methods_ },
            { Py_tp_init, (void *) t_KoreanNumberFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KoreanNumberFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(KoreanNumberFilter, t_KoreanNumberFilter, KoreanNumberFilter);

          void t_KoreanNumberFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KoreanNumberFilter), &PY_TYPE_DEF(KoreanNumberFilter), module, "KoreanNumberFilter", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanNumberFilter), "NumberBuffer", make_descriptor(&PY_TYPE_DEF(KoreanNumberFilter$NumberBuffer)));
          }

          void t_KoreanNumberFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanNumberFilter), "class_", make_descriptor(KoreanNumberFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanNumberFilter), "wrapfn_", make_descriptor(t_KoreanNumberFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanNumberFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KoreanNumberFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KoreanNumberFilter::initializeClass, 1)))
              return NULL;
            return t_KoreanNumberFilter::wrap_Object(KoreanNumberFilter(((t_KoreanNumberFilter *) arg)->object.this$));
          }
          static PyObject *t_KoreanNumberFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KoreanNumberFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KoreanNumberFilter_init_(t_KoreanNumberFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            KoreanNumberFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = KoreanNumberFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KoreanNumberFilter_incrementToken(t_KoreanNumberFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(KoreanNumberFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_KoreanNumberFilter_isArabicNumeral(t_KoreanNumberFilter *self, PyObject *arg)
          {
            jchar a0;
            jboolean result;

            if (!parseArg(arg, "C", &a0))
            {
              OBJ_CALL(result = self->object.isArabicNumeral(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isArabicNumeral", arg);
            return NULL;
          }

          static PyObject *t_KoreanNumberFilter_isNumeral(t_KoreanNumberFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.isNumeral(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                jchar a0;
                jboolean result;

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.isNumeral(a0));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "isNumeral", args);
            return NULL;
          }

          static PyObject *t_KoreanNumberFilter_isNumeralPunctuation(t_KoreanNumberFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.isNumeralPunctuation(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                jchar a0;
                jboolean result;

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.isNumeralPunctuation(a0));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "isNumeralPunctuation", args);
            return NULL;
          }

          static PyObject *t_KoreanNumberFilter_normalizeNumber(t_KoreanNumberFilter *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.normalizeNumber(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalizeNumber", arg);
            return NULL;
          }

          static PyObject *t_KoreanNumberFilter_reset(t_KoreanNumberFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(KoreanNumberFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util$TopNSearcher.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/fst/Util$TopResults.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "org/apache/lucene/util/fst/Util$FSTPath.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util$TopNSearcher::class$ = NULL;
          jmethodID *Util$TopNSearcher::mids$ = NULL;
          bool Util$TopNSearcher::live$ = false;

          jclass Util$TopNSearcher::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util$TopNSearcher");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cb6e58731b913692] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;IILjava/util/Comparator;)V");
              mids$[mid_init$_332d6382954dace9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;IILjava/util/Comparator;Ljava/util/Comparator;)V");
              mids$[mid_addStartPaths_251ad13f5f4b702a] = env->getMethodID(cls, "addStartPaths", "(Lorg/apache/lucene/util/fst/FST$Arc;Ljava/lang/Object;ZLorg/apache/lucene/util/IntsRefBuilder;)V");
              mids$[mid_addStartPaths_666ebe32e5906034] = env->getMethodID(cls, "addStartPaths", "(Lorg/apache/lucene/util/fst/FST$Arc;Ljava/lang/Object;ZLorg/apache/lucene/util/IntsRefBuilder;FLjava/lang/CharSequence;I)V");
              mids$[mid_search_d3586e6a5bec2ab4] = env->getMethodID(cls, "search", "()Lorg/apache/lucene/util/fst/Util$TopResults;");
              mids$[mid_addIfCompetitive_4b89866eabcc9027] = env->getMethodID(cls, "addIfCompetitive", "(Lorg/apache/lucene/util/fst/Util$FSTPath;)V");
              mids$[mid_acceptResult_3373b6579afd7d8f] = env->getMethodID(cls, "acceptResult", "(Lorg/apache/lucene/util/fst/Util$FSTPath;)Z");
              mids$[mid_acceptResult_5159d6c2d47d2dff] = env->getMethodID(cls, "acceptResult", "(Lorg/apache/lucene/util/IntsRef;Ljava/lang/Object;)Z");
              mids$[mid_acceptPartialPath_3373b6579afd7d8f] = env->getMethodID(cls, "acceptPartialPath", "(Lorg/apache/lucene/util/fst/Util$FSTPath;)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Util$TopNSearcher::Util$TopNSearcher(const ::org::apache::lucene::util::fst::FST & a0, jint a1, jint a2, const ::java::util::Comparator & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cb6e58731b913692, a0.this$, a1, a2, a3.this$)) {}

          Util$TopNSearcher::Util$TopNSearcher(const ::org::apache::lucene::util::fst::FST & a0, jint a1, jint a2, const ::java::util::Comparator & a3, const ::java::util::Comparator & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_332d6382954dace9, a0.this$, a1, a2, a3.this$, a4.this$)) {}

          void Util$TopNSearcher::addStartPaths(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::java::lang::Object & a1, jboolean a2, const ::org::apache::lucene::util::IntsRefBuilder & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addStartPaths_251ad13f5f4b702a], a0.this$, a1.this$, a2, a3.this$);
          }

          void Util$TopNSearcher::addStartPaths(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::java::lang::Object & a1, jboolean a2, const ::org::apache::lucene::util::IntsRefBuilder & a3, jfloat a4, const ::java::lang::CharSequence & a5, jint a6) const
          {
            env->callVoidMethod(this$, mids$[mid_addStartPaths_666ebe32e5906034], a0.this$, a1.this$, a2, a3.this$, a4, a5.this$, a6);
          }

          ::org::apache::lucene::util::fst::Util$TopResults Util$TopNSearcher::search() const
          {
            return ::org::apache::lucene::util::fst::Util$TopResults(env->callObjectMethod(this$, mids$[mid_search_d3586e6a5bec2ab4]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util$TopNSearcher_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$TopNSearcher_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$TopNSearcher_of_(t_Util$TopNSearcher *self, PyObject *args);
          static int t_Util$TopNSearcher_init_(t_Util$TopNSearcher *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Util$TopNSearcher_addStartPaths(t_Util$TopNSearcher *self, PyObject *args);
          static PyObject *t_Util$TopNSearcher_search(t_Util$TopNSearcher *self);
          static PyObject *t_Util$TopNSearcher_get__parameters_(t_Util$TopNSearcher *self, void *data);
          static PyGetSetDef t_Util$TopNSearcher__fields_[] = {
            DECLARE_GET_FIELD(t_Util$TopNSearcher, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Util$TopNSearcher__methods_[] = {
            DECLARE_METHOD(t_Util$TopNSearcher, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$TopNSearcher, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$TopNSearcher, of_, METH_VARARGS),
            DECLARE_METHOD(t_Util$TopNSearcher, addStartPaths, METH_VARARGS),
            DECLARE_METHOD(t_Util$TopNSearcher, search, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Util$TopNSearcher)[] = {
            { Py_tp_methods, t_Util$TopNSearcher__methods_ },
            { Py_tp_init, (void *) t_Util$TopNSearcher_init_ },
            { Py_tp_getset, t_Util$TopNSearcher__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Util$TopNSearcher)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Util$TopNSearcher, t_Util$TopNSearcher, Util$TopNSearcher);
          PyObject *t_Util$TopNSearcher::wrap_Object(const Util$TopNSearcher& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$TopNSearcher::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$TopNSearcher *self = (t_Util$TopNSearcher *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Util$TopNSearcher::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$TopNSearcher::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$TopNSearcher *self = (t_Util$TopNSearcher *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Util$TopNSearcher::install(PyObject *module)
          {
            installType(&PY_TYPE(Util$TopNSearcher), &PY_TYPE_DEF(Util$TopNSearcher), module, "Util$TopNSearcher", 0);
          }

          void t_Util$TopNSearcher::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Util$TopNSearcher), "class_", make_descriptor(Util$TopNSearcher::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Util$TopNSearcher), "wrapfn_", make_descriptor(t_Util$TopNSearcher::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Util$TopNSearcher), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util$TopNSearcher_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util$TopNSearcher::initializeClass, 1)))
              return NULL;
            return t_Util$TopNSearcher::wrap_Object(Util$TopNSearcher(((t_Util$TopNSearcher *) arg)->object.this$));
          }
          static PyObject *t_Util$TopNSearcher_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util$TopNSearcher::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util$TopNSearcher_of_(t_Util$TopNSearcher *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Util$TopNSearcher_init_(t_Util$TopNSearcher *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                jint a1;
                jint a2;
                ::java::util::Comparator a3((jobject) NULL);
                PyTypeObject **p3;
                Util$TopNSearcher object((jobject) NULL);

                if (!parseArgs(args, "KIIK", ::org::apache::lucene::util::fst::FST::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
                {
                  INT_CALL(object = Util$TopNSearcher(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                jint a1;
                jint a2;
                ::java::util::Comparator a3((jobject) NULL);
                PyTypeObject **p3;
                ::java::util::Comparator a4((jobject) NULL);
                PyTypeObject **p4;
                Util$TopNSearcher object((jobject) NULL);

                if (!parseArgs(args, "KIIKK", ::org::apache::lucene::util::fst::FST::initializeClass, ::java::util::Comparator::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_, &a4, &p4, ::java::util::t_Comparator::parameters_))
                {
                  INT_CALL(object = Util$TopNSearcher(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Util$TopNSearcher_addStartPaths(t_Util$TopNSearcher *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::Object a1((jobject) NULL);
                jboolean a2;
                ::org::apache::lucene::util::IntsRefBuilder a3((jobject) NULL);

                if (!parseArgs(args, "KOZk", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, self->parameters[0], ::org::apache::lucene::util::IntsRefBuilder::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &a2, &a3))
                {
                  OBJ_CALL(self->object.addStartPaths(a0, a1, a2, a3));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 7:
              {
                ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::Object a1((jobject) NULL);
                jboolean a2;
                ::org::apache::lucene::util::IntsRefBuilder a3((jobject) NULL);
                jfloat a4;
                ::java::lang::CharSequence a5((jobject) NULL);
                jint a6;

                if (!parseArgs(args, "KOZkFOI", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, self->parameters[0], ::org::apache::lucene::util::IntsRefBuilder::initializeClass, ::java::lang::PY_TYPE(CharSequence), &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  OBJ_CALL(self->object.addStartPaths(a0, a1, a2, a3, a4, a5, a6));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "addStartPaths", args);
            return NULL;
          }

          static PyObject *t_Util$TopNSearcher_search(t_Util$TopNSearcher *self)
          {
            ::org::apache::lucene::util::fst::Util$TopResults result((jobject) NULL);
            OBJ_CALL(result = self->object.search());
            return ::org::apache::lucene::util::fst::t_Util$TopResults::wrap_Object(result, self->parameters[0]);
          }
          static PyObject *t_Util$TopNSearcher_get__parameters_(t_Util$TopNSearcher *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TokenizedPhraseQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *TokenizedPhraseQueryNode::class$ = NULL;
              jmethodID *TokenizedPhraseQueryNode::mids$ = NULL;
              bool TokenizedPhraseQueryNode::live$ = false;

              jclass TokenizedPhraseQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/TokenizedPhraseQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_7f4134ae4682ace0] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_ba44900ab7d793b9] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_setField_4b7f5e38f806ae55] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TokenizedPhraseQueryNode::TokenizedPhraseQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode TokenizedPhraseQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_7f4134ae4682ace0]));
              }

              ::java::lang::CharSequence TokenizedPhraseQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_ba44900ab7d793b9]));
              }

              void TokenizedPhraseQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_4b7f5e38f806ae55], a0.this$);
              }

              ::java::lang::CharSequence TokenizedPhraseQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String TokenizedPhraseQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_TokenizedPhraseQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TokenizedPhraseQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_TokenizedPhraseQueryNode_init_(t_TokenizedPhraseQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_TokenizedPhraseQueryNode_cloneTree(t_TokenizedPhraseQueryNode *self, PyObject *args);
              static PyObject *t_TokenizedPhraseQueryNode_getField(t_TokenizedPhraseQueryNode *self);
              static PyObject *t_TokenizedPhraseQueryNode_setField(t_TokenizedPhraseQueryNode *self, PyObject *arg);
              static PyObject *t_TokenizedPhraseQueryNode_toQueryString(t_TokenizedPhraseQueryNode *self, PyObject *args);
              static PyObject *t_TokenizedPhraseQueryNode_toString(t_TokenizedPhraseQueryNode *self, PyObject *args);
              static PyObject *t_TokenizedPhraseQueryNode_get__field(t_TokenizedPhraseQueryNode *self, void *data);
              static int t_TokenizedPhraseQueryNode_set__field(t_TokenizedPhraseQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_TokenizedPhraseQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_TokenizedPhraseQueryNode, field),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_TokenizedPhraseQueryNode__methods_[] = {
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, setField, METH_O),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(TokenizedPhraseQueryNode)[] = {
                { Py_tp_methods, t_TokenizedPhraseQueryNode__methods_ },
                { Py_tp_init, (void *) t_TokenizedPhraseQueryNode_init_ },
                { Py_tp_getset, t_TokenizedPhraseQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(TokenizedPhraseQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl),
                NULL
              };

              DEFINE_TYPE(TokenizedPhraseQueryNode, t_TokenizedPhraseQueryNode, TokenizedPhraseQueryNode);

              void t_TokenizedPhraseQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(TokenizedPhraseQueryNode), &PY_TYPE_DEF(TokenizedPhraseQueryNode), module, "TokenizedPhraseQueryNode", 0);
              }

              void t_TokenizedPhraseQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(TokenizedPhraseQueryNode), "class_", make_descriptor(TokenizedPhraseQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(TokenizedPhraseQueryNode), "wrapfn_", make_descriptor(t_TokenizedPhraseQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(TokenizedPhraseQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TokenizedPhraseQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TokenizedPhraseQueryNode::initializeClass, 1)))
                  return NULL;
                return t_TokenizedPhraseQueryNode::wrap_Object(TokenizedPhraseQueryNode(((t_TokenizedPhraseQueryNode *) arg)->object.this$));
              }
              static PyObject *t_TokenizedPhraseQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TokenizedPhraseQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_TokenizedPhraseQueryNode_init_(t_TokenizedPhraseQueryNode *self, PyObject *args, PyObject *kwds)
              {
                TokenizedPhraseQueryNode object((jobject) NULL);

                INT_CALL(object = TokenizedPhraseQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_TokenizedPhraseQueryNode_cloneTree(t_TokenizedPhraseQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(TokenizedPhraseQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_TokenizedPhraseQueryNode_getField(t_TokenizedPhraseQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_TokenizedPhraseQueryNode_setField(t_TokenizedPhraseQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_TokenizedPhraseQueryNode_toQueryString(t_TokenizedPhraseQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(TokenizedPhraseQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_TokenizedPhraseQueryNode_toString(t_TokenizedPhraseQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(TokenizedPhraseQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_TokenizedPhraseQueryNode_get__field(t_TokenizedPhraseQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_TokenizedPhraseQueryNode_set__field(t_TokenizedPhraseQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceSubQuery.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SimpleTerm::class$ = NULL;
            jmethodID *SimpleTerm::mids$ = NULL;
            bool SimpleTerm::live$ = false;

            jclass SimpleTerm::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SimpleTerm");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_9d72768e8fdce2b7] = env->getMethodID(cls, "<init>", "(Z)V");
                mids$[mid_addSpanQueries_121a707f1abd1a95] = env->getMethodID(cls, "addSpanQueries", "(Lorg/apache/lucene/queryparser/surround/query/SpanNearClauseFactory;)V");
                mids$[mid_compareTo_d4ee376ea22394bf] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/queryparser/surround/query/SimpleTerm;)I");
                mids$[mid_distanceSubQueryNotAllowed_db9b55ba01e03e4b] = env->getMethodID(cls, "distanceSubQueryNotAllowed", "()Ljava/lang/String;");
                mids$[mid_getFieldOperator_db9b55ba01e03e4b] = env->getMethodID(cls, "getFieldOperator", "()Ljava/lang/String;");
                mids$[mid_getQuote_db9b55ba01e03e4b] = env->getMethodID(cls, "getQuote", "()Ljava/lang/String;");
                mids$[mid_makeLuceneQueryFieldNoBoost_464e180a5423633e] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_toStringUnquoted_db9b55ba01e03e4b] = env->getMethodID(cls, "toStringUnquoted", "()Ljava/lang/String;");
                mids$[mid_visitMatchingTerms_dbcd50bd393e5e56] = env->getMethodID(cls, "visitMatchingTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor;)V");
                mids$[mid_suffixToString_90aa63c10985f260] = env->getMethodID(cls, "suffixToString", "(Ljava/lang/StringBuilder;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SimpleTerm::SimpleTerm(jboolean a0) : ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->newObject(initializeClass, &mids$, mid_init$_9d72768e8fdce2b7, a0)) {}

            void SimpleTerm::addSpanQueries(const ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQueries_121a707f1abd1a95], a0.this$);
            }

            jint SimpleTerm::compareTo(const SimpleTerm & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_compareTo_d4ee376ea22394bf], a0.this$);
            }

            ::java::lang::String SimpleTerm::distanceSubQueryNotAllowed() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_distanceSubQueryNotAllowed_db9b55ba01e03e4b]));
            }

            ::java::lang::String SimpleTerm::getFieldOperator() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldOperator_db9b55ba01e03e4b]));
            }

            ::java::lang::String SimpleTerm::getQuote() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getQuote_db9b55ba01e03e4b]));
            }

            ::org::apache::lucene::search::Query SimpleTerm::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_464e180a5423633e], a0.this$, a1.this$));
            }

            ::java::lang::String SimpleTerm::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
            }

            ::java::lang::String SimpleTerm::toStringUnquoted() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringUnquoted_db9b55ba01e03e4b]));
            }

            void SimpleTerm::visitMatchingTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerms_dbcd50bd393e5e56], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SimpleTerm_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleTerm_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SimpleTerm_init_(t_SimpleTerm *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SimpleTerm_addSpanQueries(t_SimpleTerm *self, PyObject *arg);
            static PyObject *t_SimpleTerm_compareTo(t_SimpleTerm *self, PyObject *arg);
            static PyObject *t_SimpleTerm_distanceSubQueryNotAllowed(t_SimpleTerm *self);
            static PyObject *t_SimpleTerm_getFieldOperator(t_SimpleTerm *self);
            static PyObject *t_SimpleTerm_getQuote(t_SimpleTerm *self);
            static PyObject *t_SimpleTerm_makeLuceneQueryFieldNoBoost(t_SimpleTerm *self, PyObject *args);
            static PyObject *t_SimpleTerm_toString(t_SimpleTerm *self, PyObject *args);
            static PyObject *t_SimpleTerm_toStringUnquoted(t_SimpleTerm *self);
            static PyObject *t_SimpleTerm_visitMatchingTerms(t_SimpleTerm *self, PyObject *args);
            static PyObject *t_SimpleTerm_get__fieldOperator(t_SimpleTerm *self, void *data);
            static PyObject *t_SimpleTerm_get__quote(t_SimpleTerm *self, void *data);
            static PyGetSetDef t_SimpleTerm__fields_[] = {
              DECLARE_GET_FIELD(t_SimpleTerm, fieldOperator),
              DECLARE_GET_FIELD(t_SimpleTerm, quote),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SimpleTerm__methods_[] = {
              DECLARE_METHOD(t_SimpleTerm, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleTerm, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleTerm, addSpanQueries, METH_O),
              DECLARE_METHOD(t_SimpleTerm, compareTo, METH_O),
              DECLARE_METHOD(t_SimpleTerm, distanceSubQueryNotAllowed, METH_NOARGS),
              DECLARE_METHOD(t_SimpleTerm, getFieldOperator, METH_NOARGS),
              DECLARE_METHOD(t_SimpleTerm, getQuote, METH_NOARGS),
              DECLARE_METHOD(t_SimpleTerm, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              DECLARE_METHOD(t_SimpleTerm, toString, METH_VARARGS),
              DECLARE_METHOD(t_SimpleTerm, toStringUnquoted, METH_NOARGS),
              DECLARE_METHOD(t_SimpleTerm, visitMatchingTerms, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SimpleTerm)[] = {
              { Py_tp_methods, t_SimpleTerm__methods_ },
              { Py_tp_init, (void *) t_SimpleTerm_init_ },
              { Py_tp_getset, t_SimpleTerm__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SimpleTerm)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::surround::query::SrndQuery),
              NULL
            };

            DEFINE_TYPE(SimpleTerm, t_SimpleTerm, SimpleTerm);

            void t_SimpleTerm::install(PyObject *module)
            {
              installType(&PY_TYPE(SimpleTerm), &PY_TYPE_DEF(SimpleTerm), module, "SimpleTerm", 0);
              PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTerm), "MatchingTermVisitor", make_descriptor(&PY_TYPE_DEF(SimpleTerm$MatchingTermVisitor)));
            }

            void t_SimpleTerm::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTerm), "class_", make_descriptor(SimpleTerm::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTerm), "wrapfn_", make_descriptor(t_SimpleTerm::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTerm), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SimpleTerm_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SimpleTerm::initializeClass, 1)))
                return NULL;
              return t_SimpleTerm::wrap_Object(SimpleTerm(((t_SimpleTerm *) arg)->object.this$));
            }
            static PyObject *t_SimpleTerm_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SimpleTerm::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SimpleTerm_init_(t_SimpleTerm *self, PyObject *args, PyObject *kwds)
            {
              jboolean a0;
              SimpleTerm object((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                INT_CALL(object = SimpleTerm(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SimpleTerm_addSpanQueries(t_SimpleTerm *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQueries(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQueries", arg);
              return NULL;
            }

            static PyObject *t_SimpleTerm_compareTo(t_SimpleTerm *self, PyObject *arg)
            {
              SimpleTerm a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", SimpleTerm::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.compareTo(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
              return NULL;
            }

            static PyObject *t_SimpleTerm_distanceSubQueryNotAllowed(t_SimpleTerm *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.distanceSubQueryNotAllowed());
              return j2p(result);
            }

            static PyObject *t_SimpleTerm_getFieldOperator(t_SimpleTerm *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldOperator());
              return j2p(result);
            }

            static PyObject *t_SimpleTerm_getQuote(t_SimpleTerm *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getQuote());
              return j2p(result);
            }

            static PyObject *t_SimpleTerm_makeLuceneQueryFieldNoBoost(t_SimpleTerm *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(PY_TYPE(SimpleTerm), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }

            static PyObject *t_SimpleTerm_toString(t_SimpleTerm *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(PY_TYPE(SimpleTerm), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_SimpleTerm_toStringUnquoted(t_SimpleTerm *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toStringUnquoted());
              return j2p(result);
            }

            static PyObject *t_SimpleTerm_visitMatchingTerms(t_SimpleTerm *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor a2((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.visitMatchingTerms(a0, a1, a2));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "visitMatchingTerms", args);
              return NULL;
            }

            static PyObject *t_SimpleTerm_get__fieldOperator(t_SimpleTerm *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldOperator());
              return j2p(value);
            }

            static PyObject *t_SimpleTerm_get__quote(t_SimpleTerm *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getQuote());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *NumericPayloadTokenFilterFactory::class$ = NULL;
          jmethodID *NumericPayloadTokenFilterFactory::mids$ = NULL;
          bool NumericPayloadTokenFilterFactory::live$ = false;
          ::java::lang::String *NumericPayloadTokenFilterFactory::NAME = NULL;

          jclass NumericPayloadTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_8b01fa03bc1bf766] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/payloads/NumericPayloadTokenFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NumericPayloadTokenFilterFactory::NumericPayloadTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::payloads::NumericPayloadTokenFilter NumericPayloadTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::payloads::NumericPayloadTokenFilter(env->callObjectMethod(this$, mids$[mid_create_8b01fa03bc1bf766], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_NumericPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NumericPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NumericPayloadTokenFilterFactory_init_(t_NumericPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NumericPayloadTokenFilterFactory_create(t_NumericPayloadTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_NumericPayloadTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_NumericPayloadTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericPayloadTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericPayloadTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NumericPayloadTokenFilterFactory)[] = {
            { Py_tp_methods, t_NumericPayloadTokenFilterFactory__methods_ },
            { Py_tp_init, (void *) t_NumericPayloadTokenFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NumericPayloadTokenFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(NumericPayloadTokenFilterFactory, t_NumericPayloadTokenFilterFactory, NumericPayloadTokenFilterFactory);

          void t_NumericPayloadTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NumericPayloadTokenFilterFactory), &PY_TYPE_DEF(NumericPayloadTokenFilterFactory), module, "NumericPayloadTokenFilterFactory", 0);
          }

          void t_NumericPayloadTokenFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NumericPayloadTokenFilterFactory), "class_", make_descriptor(NumericPayloadTokenFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NumericPayloadTokenFilterFactory), "wrapfn_", make_descriptor(t_NumericPayloadTokenFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NumericPayloadTokenFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(NumericPayloadTokenFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(NumericPayloadTokenFilterFactory), "NAME", make_descriptor(j2p(*NumericPayloadTokenFilterFactory::NAME)));
          }

          static PyObject *t_NumericPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NumericPayloadTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_NumericPayloadTokenFilterFactory::wrap_Object(NumericPayloadTokenFilterFactory(((t_NumericPayloadTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_NumericPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NumericPayloadTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NumericPayloadTokenFilterFactory_init_(t_NumericPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NumericPayloadTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NumericPayloadTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NumericPayloadTokenFilterFactory_create(t_NumericPayloadTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::payloads::NumericPayloadTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::payloads::t_NumericPayloadTokenFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(NumericPayloadTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TotalHits$Relation.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/TotalHits$Relation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TotalHits$Relation::class$ = NULL;
        jmethodID *TotalHits$Relation::mids$ = NULL;
        bool TotalHits$Relation::live$ = false;
        TotalHits$Relation *TotalHits$Relation::EQUAL_TO = NULL;
        TotalHits$Relation *TotalHits$Relation::GREATER_THAN_OR_EQUAL_TO = NULL;

        jclass TotalHits$Relation::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TotalHits$Relation");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_7215b1ec30288dbb] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/TotalHits$Relation;");
            mids$[mid_values_df728b48d0b10066] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/TotalHits$Relation;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            EQUAL_TO = new TotalHits$Relation(env->getStaticObjectField(cls, "EQUAL_TO", "Lorg/apache/lucene/search/TotalHits$Relation;"));
            GREATER_THAN_OR_EQUAL_TO = new TotalHits$Relation(env->getStaticObjectField(cls, "GREATER_THAN_OR_EQUAL_TO", "Lorg/apache/lucene/search/TotalHits$Relation;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TotalHits$Relation TotalHits$Relation::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return TotalHits$Relation(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7215b1ec30288dbb], a0.this$));
        }

        JArray< TotalHits$Relation > TotalHits$Relation::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< TotalHits$Relation >(env->callStaticObjectMethod(cls, mids$[mid_values_df728b48d0b10066]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TotalHits$Relation_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TotalHits$Relation_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TotalHits$Relation_of_(t_TotalHits$Relation *self, PyObject *args);
        static PyObject *t_TotalHits$Relation_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_TotalHits$Relation_values(PyTypeObject *type);
        static PyObject *t_TotalHits$Relation_get__parameters_(t_TotalHits$Relation *self, void *data);
        static PyGetSetDef t_TotalHits$Relation__fields_[] = {
          DECLARE_GET_FIELD(t_TotalHits$Relation, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TotalHits$Relation__methods_[] = {
          DECLARE_METHOD(t_TotalHits$Relation, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TotalHits$Relation, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TotalHits$Relation, of_, METH_VARARGS),
          DECLARE_METHOD(t_TotalHits$Relation, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TotalHits$Relation, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TotalHits$Relation)[] = {
          { Py_tp_methods, t_TotalHits$Relation__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_TotalHits$Relation__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TotalHits$Relation)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(TotalHits$Relation, t_TotalHits$Relation, TotalHits$Relation);
        PyObject *t_TotalHits$Relation::wrap_Object(const TotalHits$Relation& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TotalHits$Relation::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TotalHits$Relation *self = (t_TotalHits$Relation *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TotalHits$Relation::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TotalHits$Relation::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TotalHits$Relation *self = (t_TotalHits$Relation *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TotalHits$Relation::install(PyObject *module)
        {
          installType(&PY_TYPE(TotalHits$Relation), &PY_TYPE_DEF(TotalHits$Relation), module, "TotalHits$Relation", 0);
        }

        void t_TotalHits$Relation::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TotalHits$Relation), "class_", make_descriptor(TotalHits$Relation::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TotalHits$Relation), "wrapfn_", make_descriptor(t_TotalHits$Relation::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TotalHits$Relation), "boxfn_", make_descriptor(boxObject));
          env->getClass(TotalHits$Relation::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(TotalHits$Relation), "EQUAL_TO", make_descriptor(t_TotalHits$Relation::wrap_Object(*TotalHits$Relation::EQUAL_TO)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TotalHits$Relation), "GREATER_THAN_OR_EQUAL_TO", make_descriptor(t_TotalHits$Relation::wrap_Object(*TotalHits$Relation::GREATER_THAN_OR_EQUAL_TO)));
        }

        static PyObject *t_TotalHits$Relation_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TotalHits$Relation::initializeClass, 1)))
            return NULL;
          return t_TotalHits$Relation::wrap_Object(TotalHits$Relation(((t_TotalHits$Relation *) arg)->object.this$));
        }
        static PyObject *t_TotalHits$Relation_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TotalHits$Relation::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TotalHits$Relation_of_(t_TotalHits$Relation *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_TotalHits$Relation_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          TotalHits$Relation result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TotalHits$Relation::valueOf(a0));
            return t_TotalHits$Relation::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_TotalHits$Relation_values(PyTypeObject *type)
        {
          JArray< TotalHits$Relation > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::TotalHits$Relation::values());
          return JArray<jobject>(result.this$).wrap(t_TotalHits$Relation::wrap_jobject);
        }
        static PyObject *t_TotalHits$Relation_get__parameters_(t_TotalHits$Relation *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/AbstractEncoder.h"
#include "org/apache/lucene/analysis/payloads/PayloadEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *AbstractEncoder::class$ = NULL;
          jmethodID *AbstractEncoder::mids$ = NULL;
          bool AbstractEncoder::live$ = false;

          jclass AbstractEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/AbstractEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encode_064e0007331fe5ea] = env->getMethodID(cls, "encode", "([C)Lorg/apache/lucene/util/BytesRef;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractEncoder::AbstractEncoder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::util::BytesRef AbstractEncoder::encode(const JArray< jchar > & a0) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_064e0007331fe5ea], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_AbstractEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AbstractEncoder_init_(t_AbstractEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractEncoder_encode(t_AbstractEncoder *self, PyObject *arg);

          static PyMethodDef t_AbstractEncoder__methods_[] = {
            DECLARE_METHOD(t_AbstractEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractEncoder, encode, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(AbstractEncoder)[] = {
            { Py_tp_methods, t_AbstractEncoder__methods_ },
            { Py_tp_init, (void *) t_AbstractEncoder_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(AbstractEncoder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(AbstractEncoder, t_AbstractEncoder, AbstractEncoder);

          void t_AbstractEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractEncoder), &PY_TYPE_DEF(AbstractEncoder), module, "AbstractEncoder", 0);
          }

          void t_AbstractEncoder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractEncoder), "class_", make_descriptor(AbstractEncoder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractEncoder), "wrapfn_", make_descriptor(t_AbstractEncoder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractEncoder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractEncoder::initializeClass, 1)))
              return NULL;
            return t_AbstractEncoder::wrap_Object(AbstractEncoder(((t_AbstractEncoder *) arg)->object.this$));
          }
          static PyObject *t_AbstractEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AbstractEncoder_init_(t_AbstractEncoder *self, PyObject *args, PyObject *kwds)
          {
            AbstractEncoder object((jobject) NULL);

            INT_CALL(object = AbstractEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_AbstractEncoder_encode(t_AbstractEncoder *self, PyObject *arg)
          {
            JArray< jchar > a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "[C", &a0))
            {
              OBJ_CALL(result = self->object.encode(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "encode", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianAnalyzer::class$ = NULL;
          jmethodID *PersianAnalyzer::mids$ = NULL;
          bool PersianAnalyzer::live$ = false;
          ::java::lang::String *PersianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;
          ::java::lang::String *PersianAnalyzer::STOPWORDS_COMMENT = NULL;

          jclass PersianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_initReader_8dbb4487391277c7] = env->getMethodID(cls, "initReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              STOPWORDS_COMMENT = new ::java::lang::String(env->getStaticObjectField(cls, "STOPWORDS_COMMENT", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianAnalyzer::PersianAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          PersianAnalyzer::PersianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet PersianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianAnalyzer_init_(t_PersianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_PersianAnalyzer_get__defaultStopSet(t_PersianAnalyzer *self, void *data);
          static PyGetSetDef t_PersianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_PersianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PersianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_PersianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PersianAnalyzer)[] = {
            { Py_tp_methods, t_PersianAnalyzer__methods_ },
            { Py_tp_init, (void *) t_PersianAnalyzer_init_ },
            { Py_tp_getset, t_PersianAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PersianAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(PersianAnalyzer, t_PersianAnalyzer, PersianAnalyzer);

          void t_PersianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianAnalyzer), &PY_TYPE_DEF(PersianAnalyzer), module, "PersianAnalyzer", 0);
          }

          void t_PersianAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianAnalyzer), "class_", make_descriptor(PersianAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianAnalyzer), "wrapfn_", make_descriptor(t_PersianAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(PersianAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*PersianAnalyzer::DEFAULT_STOPWORD_FILE)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianAnalyzer), "STOPWORDS_COMMENT", make_descriptor(j2p(*PersianAnalyzer::STOPWORDS_COMMENT)));
          }

          static PyObject *t_PersianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_PersianAnalyzer::wrap_Object(PersianAnalyzer(((t_PersianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_PersianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianAnalyzer_init_(t_PersianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                PersianAnalyzer object((jobject) NULL);

                INT_CALL(object = PersianAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                PersianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PersianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::fa::PersianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_PersianAnalyzer_get__defaultStopSet(t_PersianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/payloads/PayloadSpanUtil.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace payloads {

        ::java::lang::Class *PayloadSpanUtil::class$ = NULL;
        jmethodID *PayloadSpanUtil::mids$ = NULL;
        bool PayloadSpanUtil::live$ = false;

        jclass PayloadSpanUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/payloads/PayloadSpanUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_436a8b1eb9db2e88] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;)V");
            mids$[mid_getPayloadsForQuery_9f53d4df54581388] = env->getMethodID(cls, "getPayloadsForQuery", "(Lorg/apache/lucene/search/Query;)Ljava/util/Collection;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PayloadSpanUtil::PayloadSpanUtil(const ::org::apache::lucene::index::IndexReaderContext & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_436a8b1eb9db2e88, a0.this$)) {}

        ::java::util::Collection PayloadSpanUtil::getPayloadsForQuery(const ::org::apache::lucene::search::Query & a0) const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayloadsForQuery_9f53d4df54581388], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace payloads {
        static PyObject *t_PayloadSpanUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PayloadSpanUtil_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PayloadSpanUtil_init_(t_PayloadSpanUtil *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PayloadSpanUtil_getPayloadsForQuery(t_PayloadSpanUtil *self, PyObject *arg);

        static PyMethodDef t_PayloadSpanUtil__methods_[] = {
          DECLARE_METHOD(t_PayloadSpanUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PayloadSpanUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PayloadSpanUtil, getPayloadsForQuery, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PayloadSpanUtil)[] = {
          { Py_tp_methods, t_PayloadSpanUtil__methods_ },
          { Py_tp_init, (void *) t_PayloadSpanUtil_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PayloadSpanUtil)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PayloadSpanUtil, t_PayloadSpanUtil, PayloadSpanUtil);

        void t_PayloadSpanUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(PayloadSpanUtil), &PY_TYPE_DEF(PayloadSpanUtil), module, "PayloadSpanUtil", 0);
        }

        void t_PayloadSpanUtil::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadSpanUtil), "class_", make_descriptor(PayloadSpanUtil::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadSpanUtil), "wrapfn_", make_descriptor(t_PayloadSpanUtil::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadSpanUtil), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PayloadSpanUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PayloadSpanUtil::initializeClass, 1)))
            return NULL;
          return t_PayloadSpanUtil::wrap_Object(PayloadSpanUtil(((t_PayloadSpanUtil *) arg)->object.this$));
        }
        static PyObject *t_PayloadSpanUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PayloadSpanUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PayloadSpanUtil_init_(t_PayloadSpanUtil *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
          PayloadSpanUtil object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReaderContext::initializeClass, &a0))
          {
            INT_CALL(object = PayloadSpanUtil(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PayloadSpanUtil_getPayloadsForQuery(t_PayloadSpanUtil *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::java::util::Collection result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getPayloadsForQuery(a0));
            return ::java::util::t_Collection::wrap_Object(result, ::java::lang::PY_TYPE(Object));
          }

          PyErr_SetArgsError((PyObject *) self, "getPayloadsForQuery", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldPhraseList$WeightedPhraseInfo$Toffs::class$ = NULL;
          jmethodID *FieldPhraseList$WeightedPhraseInfo$Toffs::mids$ = NULL;
          bool FieldPhraseList$WeightedPhraseInfo$Toffs::live$ = false;

          jclass FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_438c62480c481c65] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_compareTo_3ba41fae7bc589a8] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs;)I");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getEndOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getStartOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setEndOffset_040c4cd0390c5aff] = env->getMethodID(cls, "setEndOffset", "(I)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldPhraseList$WeightedPhraseInfo$Toffs::FieldPhraseList$WeightedPhraseInfo$Toffs(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_438c62480c481c65, a0, a1)) {}

          jint FieldPhraseList$WeightedPhraseInfo$Toffs::compareTo(const FieldPhraseList$WeightedPhraseInfo$Toffs & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_3ba41fae7bc589a8], a0.this$);
          }

          jboolean FieldPhraseList$WeightedPhraseInfo$Toffs::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint FieldPhraseList$WeightedPhraseInfo$Toffs::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_9972fcc56b44e79d]);
          }

          jint FieldPhraseList$WeightedPhraseInfo$Toffs::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_9972fcc56b44e79d]);
          }

          jint FieldPhraseList$WeightedPhraseInfo$Toffs::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          void FieldPhraseList$WeightedPhraseInfo$Toffs::setEndOffset(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setEndOffset_040c4cd0390c5aff], a0);
          }

          ::java::lang::String FieldPhraseList$WeightedPhraseInfo$Toffs::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldPhraseList$WeightedPhraseInfo$Toffs_init_(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_compareTo(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_equals(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_getEndOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_getStartOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_hashCode(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_setEndOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_toString(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_get__endOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, void *data);
          static int t_FieldPhraseList$WeightedPhraseInfo$Toffs_set__endOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_get__startOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, void *data);
          static PyGetSetDef t_FieldPhraseList$WeightedPhraseInfo$Toffs__fields_[] = {
            DECLARE_GETSET_FIELD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, endOffset),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, startOffset),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldPhraseList$WeightedPhraseInfo$Toffs__methods_[] = {
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, compareTo, METH_O),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, equals, METH_VARARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, setEndOffset, METH_O),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FieldPhraseList$WeightedPhraseInfo$Toffs)[] = {
            { Py_tp_methods, t_FieldPhraseList$WeightedPhraseInfo$Toffs__methods_ },
            { Py_tp_init, (void *) t_FieldPhraseList$WeightedPhraseInfo$Toffs_init_ },
            { Py_tp_getset, t_FieldPhraseList$WeightedPhraseInfo$Toffs__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FieldPhraseList$WeightedPhraseInfo$Toffs)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs, t_FieldPhraseList$WeightedPhraseInfo$Toffs, FieldPhraseList$WeightedPhraseInfo$Toffs);

          void t_FieldPhraseList$WeightedPhraseInfo$Toffs::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), &PY_TYPE_DEF(FieldPhraseList$WeightedPhraseInfo$Toffs), module, "FieldPhraseList$WeightedPhraseInfo$Toffs", 0);
          }

          void t_FieldPhraseList$WeightedPhraseInfo$Toffs::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), "class_", make_descriptor(FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), "wrapfn_", make_descriptor(t_FieldPhraseList$WeightedPhraseInfo$Toffs::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass, 1)))
              return NULL;
            return t_FieldPhraseList$WeightedPhraseInfo$Toffs::wrap_Object(FieldPhraseList$WeightedPhraseInfo$Toffs(((t_FieldPhraseList$WeightedPhraseInfo$Toffs *) arg)->object.this$));
          }
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldPhraseList$WeightedPhraseInfo$Toffs_init_(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            FieldPhraseList$WeightedPhraseInfo$Toffs object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = FieldPhraseList$WeightedPhraseInfo$Toffs(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_compareTo(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg)
          {
            FieldPhraseList$WeightedPhraseInfo$Toffs a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_equals(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_getEndOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_getStartOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_hashCode(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_setEndOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setEndOffset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setEndOffset", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_toString(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_get__endOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyLong_FromLong((long) value);
          }
          static int t_FieldPhraseList$WeightedPhraseInfo$Toffs_set__endOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setEndOffset(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "endOffset", arg);
            return -1;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_get__startOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MinFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MinFloatFunction::class$ = NULL;
            jmethodID *MinFloatFunction::mids$ = NULL;
            bool MinFloatFunction::live$ = false;

            jclass MinFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MinFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_103f1bad010d62d9] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_func_e36b2f77f3be25c3] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_exists_79d91b981374bcba] = env->getMethodID(cls, "exists", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)Z");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MinFloatFunction::MinFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_103f1bad010d62d9, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MinFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MinFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MinFloatFunction_init_(t_MinFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_MinFloatFunction__methods_[] = {
              DECLARE_METHOD(t_MinFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MinFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(MinFloatFunction)[] = {
              { Py_tp_methods, t_MinFloatFunction__methods_ },
              { Py_tp_init, (void *) t_MinFloatFunction_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(MinFloatFunction)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::MultiFloatFunction),
              NULL
            };

            DEFINE_TYPE(MinFloatFunction, t_MinFloatFunction, MinFloatFunction);

            void t_MinFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MinFloatFunction), &PY_TYPE_DEF(MinFloatFunction), module, "MinFloatFunction", 0);
            }

            void t_MinFloatFunction::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(MinFloatFunction), "class_", make_descriptor(MinFloatFunction::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MinFloatFunction), "wrapfn_", make_descriptor(t_MinFloatFunction::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MinFloatFunction), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MinFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MinFloatFunction::initializeClass, 1)))
                return NULL;
              return t_MinFloatFunction::wrap_Object(MinFloatFunction(((t_MinFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_MinFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MinFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MinFloatFunction_init_(t_MinFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              MinFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = MinFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiRangeQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiRangeQuery::class$ = NULL;
        jmethodID *MultiRangeQuery::mids$ = NULL;
        bool MultiRangeQuery::live$ = false;

        jclass MultiRangeQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiRangeQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getBytesPerDim_9972fcc56b44e79d] = env->getMethodID(cls, "getBytesPerDim", "()I");
            mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getNumDims_9972fcc56b44e79d] = env->getMethodID(cls, "getNumDims", "()I");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");
            mids$[mid_toString_3b5a1335c24253e0] = env->getMethodID(cls, "toString", "(I[B)Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::Weight MultiRangeQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean MultiRangeQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint MultiRangeQuery::getBytesPerDim() const
        {
          return env->callIntMethod(this$, mids$[mid_getBytesPerDim_9972fcc56b44e79d]);
        }

        ::java::lang::String MultiRangeQuery::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
        }

        jint MultiRangeQuery::getNumDims() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumDims_9972fcc56b44e79d]);
        }

        jint MultiRangeQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String MultiRangeQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void MultiRangeQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/MultiRangeQuery$Builder.h"
#include "org/apache/lucene/search/MultiRangeQuery$RangeClause.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiRangeQuery_createWeight(t_MultiRangeQuery *self, PyObject *args);
        static PyObject *t_MultiRangeQuery_equals(t_MultiRangeQuery *self, PyObject *args);
        static PyObject *t_MultiRangeQuery_getBytesPerDim(t_MultiRangeQuery *self);
        static PyObject *t_MultiRangeQuery_getField(t_MultiRangeQuery *self);
        static PyObject *t_MultiRangeQuery_getNumDims(t_MultiRangeQuery *self);
        static PyObject *t_MultiRangeQuery_hashCode(t_MultiRangeQuery *self, PyObject *args);
        static PyObject *t_MultiRangeQuery_toString(t_MultiRangeQuery *self, PyObject *args);
        static PyObject *t_MultiRangeQuery_visit(t_MultiRangeQuery *self, PyObject *args);
        static PyObject *t_MultiRangeQuery_get__bytesPerDim(t_MultiRangeQuery *self, void *data);
        static PyObject *t_MultiRangeQuery_get__field(t_MultiRangeQuery *self, void *data);
        static PyObject *t_MultiRangeQuery_get__numDims(t_MultiRangeQuery *self, void *data);
        static PyGetSetDef t_MultiRangeQuery__fields_[] = {
          DECLARE_GET_FIELD(t_MultiRangeQuery, bytesPerDim),
          DECLARE_GET_FIELD(t_MultiRangeQuery, field),
          DECLARE_GET_FIELD(t_MultiRangeQuery, numDims),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiRangeQuery__methods_[] = {
          DECLARE_METHOD(t_MultiRangeQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiRangeQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiRangeQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_MultiRangeQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_MultiRangeQuery, getBytesPerDim, METH_NOARGS),
          DECLARE_METHOD(t_MultiRangeQuery, getField, METH_NOARGS),
          DECLARE_METHOD(t_MultiRangeQuery, getNumDims, METH_NOARGS),
          DECLARE_METHOD(t_MultiRangeQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MultiRangeQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_MultiRangeQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiRangeQuery)[] = {
          { Py_tp_methods, t_MultiRangeQuery__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_MultiRangeQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiRangeQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(MultiRangeQuery, t_MultiRangeQuery, MultiRangeQuery);

        void t_MultiRangeQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiRangeQuery), &PY_TYPE_DEF(MultiRangeQuery), module, "MultiRangeQuery", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiRangeQuery), "Builder", make_descriptor(&PY_TYPE_DEF(MultiRangeQuery$Builder)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiRangeQuery), "RangeClause", make_descriptor(&PY_TYPE_DEF(MultiRangeQuery$RangeClause)));
        }

        void t_MultiRangeQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiRangeQuery), "class_", make_descriptor(MultiRangeQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiRangeQuery), "wrapfn_", make_descriptor(t_MultiRangeQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiRangeQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiRangeQuery::initializeClass, 1)))
            return NULL;
          return t_MultiRangeQuery::wrap_Object(MultiRangeQuery(((t_MultiRangeQuery *) arg)->object.this$));
        }
        static PyObject *t_MultiRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiRangeQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiRangeQuery_createWeight(t_MultiRangeQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MultiRangeQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_MultiRangeQuery_equals(t_MultiRangeQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(MultiRangeQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MultiRangeQuery_getBytesPerDim(t_MultiRangeQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getBytesPerDim());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_MultiRangeQuery_getField(t_MultiRangeQuery *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_MultiRangeQuery_getNumDims(t_MultiRangeQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumDims());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_MultiRangeQuery_hashCode(t_MultiRangeQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MultiRangeQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MultiRangeQuery_toString(t_MultiRangeQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(MultiRangeQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiRangeQuery_visit(t_MultiRangeQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(MultiRangeQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_MultiRangeQuery_get__bytesPerDim(t_MultiRangeQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getBytesPerDim());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_MultiRangeQuery_get__field(t_MultiRangeQuery *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static PyObject *t_MultiRangeQuery_get__numDims(t_MultiRangeQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumDims());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserConstants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *QueryParserConstants::class$ = NULL;
            jmethodID *QueryParserConstants::mids$ = NULL;
            bool QueryParserConstants::live$ = false;
            jint QueryParserConstants::AND = (jint) 0;
            jint QueryParserConstants::Boost = (jint) 0;
            jint QueryParserConstants::CARAT = (jint) 0;
            jint QueryParserConstants::COLON = (jint) 0;
            jint QueryParserConstants::COMMA = (jint) 0;
            jint QueryParserConstants::DEFAULT = (jint) 0;
            jint QueryParserConstants::EOF = (jint) 0;
            jint QueryParserConstants::LPAREN = (jint) 0;
            jint QueryParserConstants::N = (jint) 0;
            jint QueryParserConstants::NOT = (jint) 0;
            jint QueryParserConstants::NUMBER = (jint) 0;
            jint QueryParserConstants::OR = (jint) 0;
            jint QueryParserConstants::QUOTED = (jint) 0;
            jint QueryParserConstants::RPAREN = (jint) 0;
            jint QueryParserConstants::SUFFIXTERM = (jint) 0;
            jint QueryParserConstants::TERM = (jint) 0;
            jint QueryParserConstants::TRUNCQUOTED = (jint) 0;
            jint QueryParserConstants::TRUNCTERM = (jint) 0;
            jint QueryParserConstants::W = (jint) 0;
            jint QueryParserConstants::_DISTOP_NUM = (jint) 0;
            jint QueryParserConstants::_NUM_CHAR = (jint) 0;
            jint QueryParserConstants::_ONE_CHAR = (jint) 0;
            jint QueryParserConstants::_STAR = (jint) 0;
            jint QueryParserConstants::_TERM_CHAR = (jint) 0;
            jint QueryParserConstants::_WHITESPACE = (jint) 0;
            JArray< ::java::lang::String > *QueryParserConstants::tokenImage = NULL;

            jclass QueryParserConstants::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/QueryParserConstants");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                AND = env->getStaticIntField(cls, "AND");
                Boost = env->getStaticIntField(cls, "Boost");
                CARAT = env->getStaticIntField(cls, "CARAT");
                COLON = env->getStaticIntField(cls, "COLON");
                COMMA = env->getStaticIntField(cls, "COMMA");
                DEFAULT = env->getStaticIntField(cls, "DEFAULT");
                EOF = env->getStaticIntField(cls, "EOF");
                LPAREN = env->getStaticIntField(cls, "LPAREN");
                N = env->getStaticIntField(cls, "N");
                NOT = env->getStaticIntField(cls, "NOT");
                NUMBER = env->getStaticIntField(cls, "NUMBER");
                OR = env->getStaticIntField(cls, "OR");
                QUOTED = env->getStaticIntField(cls, "QUOTED");
                RPAREN = env->getStaticIntField(cls, "RPAREN");
                SUFFIXTERM = env->getStaticIntField(cls, "SUFFIXTERM");
                TERM = env->getStaticIntField(cls, "TERM");
                TRUNCQUOTED = env->getStaticIntField(cls, "TRUNCQUOTED");
                TRUNCTERM = env->getStaticIntField(cls, "TRUNCTERM");
                W = env->getStaticIntField(cls, "W");
                _DISTOP_NUM = env->getStaticIntField(cls, "_DISTOP_NUM");
                _NUM_CHAR = env->getStaticIntField(cls, "_NUM_CHAR");
                _ONE_CHAR = env->getStaticIntField(cls, "_ONE_CHAR");
                _STAR = env->getStaticIntField(cls, "_STAR");
                _TERM_CHAR = env->getStaticIntField(cls, "_TERM_CHAR");
                _WHITESPACE = env->getStaticIntField(cls, "_WHITESPACE");
                tokenImage = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "tokenImage", "[Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_QueryParserConstants_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserConstants_instance_(PyTypeObject *type, PyObject *arg);

            static PyMethodDef t_QueryParserConstants__methods_[] = {
              DECLARE_METHOD(t_QueryParserConstants, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserConstants, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(QueryParserConstants)[] = {
              { Py_tp_methods, t_QueryParserConstants__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(QueryParserConstants)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(QueryParserConstants, t_QueryParserConstants, QueryParserConstants);

            void t_QueryParserConstants::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParserConstants), &PY_TYPE_DEF(QueryParserConstants), module, "QueryParserConstants", 0);
            }

            void t_QueryParserConstants::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "class_", make_descriptor(QueryParserConstants::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "wrapfn_", make_descriptor(t_QueryParserConstants::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "boxfn_", make_descriptor(boxObject));
              env->getClass(QueryParserConstants::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "AND", make_descriptor(QueryParserConstants::AND));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "Boost", make_descriptor(QueryParserConstants::Boost));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "CARAT", make_descriptor(QueryParserConstants::CARAT));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "COLON", make_descriptor(QueryParserConstants::COLON));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "COMMA", make_descriptor(QueryParserConstants::COMMA));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "DEFAULT", make_descriptor(QueryParserConstants::DEFAULT));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "EOF", make_descriptor(QueryParserConstants::EOF));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "LPAREN", make_descriptor(QueryParserConstants::LPAREN));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "N", make_descriptor(QueryParserConstants::N));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "NOT", make_descriptor(QueryParserConstants::NOT));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "NUMBER", make_descriptor(QueryParserConstants::NUMBER));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "OR", make_descriptor(QueryParserConstants::OR));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "QUOTED", make_descriptor(QueryParserConstants::QUOTED));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "RPAREN", make_descriptor(QueryParserConstants::RPAREN));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "SUFFIXTERM", make_descriptor(QueryParserConstants::SUFFIXTERM));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "TERM", make_descriptor(QueryParserConstants::TERM));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "TRUNCQUOTED", make_descriptor(QueryParserConstants::TRUNCQUOTED));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "TRUNCTERM", make_descriptor(QueryParserConstants::TRUNCTERM));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "W", make_descriptor(QueryParserConstants::W));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "_DISTOP_NUM", make_descriptor(QueryParserConstants::_DISTOP_NUM));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "_NUM_CHAR", make_descriptor(QueryParserConstants::_NUM_CHAR));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "_ONE_CHAR", make_descriptor(QueryParserConstants::_ONE_CHAR));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "_STAR", make_descriptor(QueryParserConstants::_STAR));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "_TERM_CHAR", make_descriptor(QueryParserConstants::_TERM_CHAR));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "_WHITESPACE", make_descriptor(QueryParserConstants::_WHITESPACE));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "tokenImage", make_descriptor(JArray<jstring>(QueryParserConstants::tokenImage->this$).wrap()));
            }

            static PyObject *t_QueryParserConstants_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParserConstants::initializeClass, 1)))
                return NULL;
              return t_QueryParserConstants::wrap_Object(QueryParserConstants(((t_QueryParserConstants *) arg)->object.this$));
            }
            static PyObject *t_QueryParserConstants_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParserConstants::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/dict/UserDictionary.h"
#include "org/apache/lucene/analysis/ja/dict/TokenInfoFST.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/ja/dict/UserDictionary.h"
#include "org/apache/lucene/analysis/ja/dict/Dictionary.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace dict {

            ::java::lang::Class *UserDictionary::class$ = NULL;
            jmethodID *UserDictionary::mids$ = NULL;
            bool UserDictionary::live$ = false;
            jint UserDictionary::LEFT_ID = (jint) 0;
            jint UserDictionary::RIGHT_ID = (jint) 0;
            jint UserDictionary::WORD_COST = (jint) 0;

            jclass UserDictionary::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/dict/UserDictionary");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getBaseForm_467f88cdc3f1f7b5] = env->getMethodID(cls, "getBaseForm", "(I[CII)Ljava/lang/String;");
                mids$[mid_getFST_37657c457a0c3bc0] = env->getMethodID(cls, "getFST", "()Lorg/apache/lucene/analysis/ja/dict/TokenInfoFST;");
                mids$[mid_getInflectionForm_d7593acad64ef635] = env->getMethodID(cls, "getInflectionForm", "(I)Ljava/lang/String;");
                mids$[mid_getInflectionType_d7593acad64ef635] = env->getMethodID(cls, "getInflectionType", "(I)Ljava/lang/String;");
                mids$[mid_getLeftId_1e143afe1894d213] = env->getMethodID(cls, "getLeftId", "(I)I");
                mids$[mid_getPartOfSpeech_d7593acad64ef635] = env->getMethodID(cls, "getPartOfSpeech", "(I)Ljava/lang/String;");
                mids$[mid_getPronunciation_467f88cdc3f1f7b5] = env->getMethodID(cls, "getPronunciation", "(I[CII)Ljava/lang/String;");
                mids$[mid_getReading_467f88cdc3f1f7b5] = env->getMethodID(cls, "getReading", "(I[CII)Ljava/lang/String;");
                mids$[mid_getRightId_1e143afe1894d213] = env->getMethodID(cls, "getRightId", "(I)I");
                mids$[mid_getWordCost_1e143afe1894d213] = env->getMethodID(cls, "getWordCost", "(I)I");
                mids$[mid_lookup_00fa12a2772b039f] = env->getMethodID(cls, "lookup", "([CII)[[I");
                mids$[mid_lookupSegmentation_0bb5473d39bfe453] = env->getMethodID(cls, "lookupSegmentation", "(I)[I");
                mids$[mid_open_c6abbfb581ae760e] = env->getStaticMethodID(cls, "open", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/ja/dict/UserDictionary;");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                LEFT_ID = env->getStaticIntField(cls, "LEFT_ID");
                RIGHT_ID = env->getStaticIntField(cls, "RIGHT_ID");
                WORD_COST = env->getStaticIntField(cls, "WORD_COST");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::lang::String UserDictionary::getBaseForm(jint a0, const JArray< jchar > & a1, jint a2, jint a3) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBaseForm_467f88cdc3f1f7b5], a0, a1.this$, a2, a3));
            }

            ::org::apache::lucene::analysis::ja::dict::TokenInfoFST UserDictionary::getFST() const
            {
              return ::org::apache::lucene::analysis::ja::dict::TokenInfoFST(env->callObjectMethod(this$, mids$[mid_getFST_37657c457a0c3bc0]));
            }

            ::java::lang::String UserDictionary::getInflectionForm(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getInflectionForm_d7593acad64ef635], a0));
            }

            ::java::lang::String UserDictionary::getInflectionType(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getInflectionType_d7593acad64ef635], a0));
            }

            jint UserDictionary::getLeftId(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getLeftId_1e143afe1894d213], a0);
            }

            ::java::lang::String UserDictionary::getPartOfSpeech(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPartOfSpeech_d7593acad64ef635], a0));
            }

            ::java::lang::String UserDictionary::getPronunciation(jint a0, const JArray< jchar > & a1, jint a2, jint a3) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPronunciation_467f88cdc3f1f7b5], a0, a1.this$, a2, a3));
            }

            ::java::lang::String UserDictionary::getReading(jint a0, const JArray< jchar > & a1, jint a2, jint a3) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getReading_467f88cdc3f1f7b5], a0, a1.this$, a2, a3));
            }

            jint UserDictionary::getRightId(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getRightId_1e143afe1894d213], a0);
            }

            jint UserDictionary::getWordCost(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getWordCost_1e143afe1894d213], a0);
            }

            JArray< JArray< jint > > UserDictionary::lookup(const JArray< jchar > & a0, jint a1, jint a2) const
            {
              return JArray< JArray< jint > >(env->callObjectMethod(this$, mids$[mid_lookup_00fa12a2772b039f], a0.this$, a1, a2));
            }

            JArray< jint > UserDictionary::lookupSegmentation(jint a0) const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_lookupSegmentation_0bb5473d39bfe453], a0));
            }

            UserDictionary UserDictionary::open(const ::java::io::Reader & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return UserDictionary(env->callStaticObjectMethod(cls, mids$[mid_open_c6abbfb581ae760e], a0.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace dict {
            static PyObject *t_UserDictionary_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UserDictionary_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UserDictionary_getBaseForm(t_UserDictionary *self, PyObject *args);
            static PyObject *t_UserDictionary_getFST(t_UserDictionary *self);
            static PyObject *t_UserDictionary_getInflectionForm(t_UserDictionary *self, PyObject *arg);
            static PyObject *t_UserDictionary_getInflectionType(t_UserDictionary *self, PyObject *arg);
            static PyObject *t_UserDictionary_getLeftId(t_UserDictionary *self, PyObject *arg);
            static PyObject *t_UserDictionary_getPartOfSpeech(t_UserDictionary *self, PyObject *arg);
            static PyObject *t_UserDictionary_getPronunciation(t_UserDictionary *self, PyObject *args);
            static PyObject *t_UserDictionary_getReading(t_UserDictionary *self, PyObject *args);
            static PyObject *t_UserDictionary_getRightId(t_UserDictionary *self, PyObject *arg);
            static PyObject *t_UserDictionary_getWordCost(t_UserDictionary *self, PyObject *arg);
            static PyObject *t_UserDictionary_lookup(t_UserDictionary *self, PyObject *args);
            static PyObject *t_UserDictionary_lookupSegmentation(t_UserDictionary *self, PyObject *arg);
            static PyObject *t_UserDictionary_open(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UserDictionary_get__fST(t_UserDictionary *self, void *data);
            static PyGetSetDef t_UserDictionary__fields_[] = {
              DECLARE_GET_FIELD(t_UserDictionary, fST),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_UserDictionary__methods_[] = {
              DECLARE_METHOD(t_UserDictionary, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UserDictionary, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UserDictionary, getBaseForm, METH_VARARGS),
              DECLARE_METHOD(t_UserDictionary, getFST, METH_NOARGS),
              DECLARE_METHOD(t_UserDictionary, getInflectionForm, METH_O),
              DECLARE_METHOD(t_UserDictionary, getInflectionType, METH_O),
              DECLARE_METHOD(t_UserDictionary, getLeftId, METH_O),
              DECLARE_METHOD(t_UserDictionary, getPartOfSpeech, METH_O),
              DECLARE_METHOD(t_UserDictionary, getPronunciation, METH_VARARGS),
              DECLARE_METHOD(t_UserDictionary, getReading, METH_VARARGS),
              DECLARE_METHOD(t_UserDictionary, getRightId, METH_O),
              DECLARE_METHOD(t_UserDictionary, getWordCost, METH_O),
              DECLARE_METHOD(t_UserDictionary, lookup, METH_VARARGS),
              DECLARE_METHOD(t_UserDictionary, lookupSegmentation, METH_O),
              DECLARE_METHOD(t_UserDictionary, open, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(UserDictionary)[] = {
              { Py_tp_methods, t_UserDictionary__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_UserDictionary__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(UserDictionary)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(UserDictionary, t_UserDictionary, UserDictionary);

            void t_UserDictionary::install(PyObject *module)
            {
              installType(&PY_TYPE(UserDictionary), &PY_TYPE_DEF(UserDictionary), module, "UserDictionary", 0);
            }

            void t_UserDictionary::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(UserDictionary), "class_", make_descriptor(UserDictionary::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(UserDictionary), "wrapfn_", make_descriptor(t_UserDictionary::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(UserDictionary), "boxfn_", make_descriptor(boxObject));
              env->getClass(UserDictionary::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(UserDictionary), "LEFT_ID", make_descriptor(UserDictionary::LEFT_ID));
              PyObject_SetAttrString((PyObject *) PY_TYPE(UserDictionary), "RIGHT_ID", make_descriptor(UserDictionary::RIGHT_ID));
              PyObject_SetAttrString((PyObject *) PY_TYPE(UserDictionary), "WORD_COST", make_descriptor(UserDictionary::WORD_COST));
            }

            static PyObject *t_UserDictionary_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UserDictionary::initializeClass, 1)))
                return NULL;
              return t_UserDictionary::wrap_Object(UserDictionary(((t_UserDictionary *) arg)->object.this$));
            }
            static PyObject *t_UserDictionary_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UserDictionary::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_UserDictionary_getBaseForm(t_UserDictionary *self, PyObject *args)
            {
              jint a0;
              JArray< jchar > a1((jobject) NULL);
              jint a2;
              jint a3;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I[CII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getBaseForm(a0, a1, a2, a3));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getBaseForm", args);
              return NULL;
            }

            static PyObject *t_UserDictionary_getFST(t_UserDictionary *self)
            {
              ::org::apache::lucene::analysis::ja::dict::TokenInfoFST result((jobject) NULL);
              OBJ_CALL(result = self->object.getFST());
              return ::org::apache::lucene::analysis::ja::dict::t_TokenInfoFST::wrap_Object(result);
            }

            static PyObject *t_UserDictionary_getInflectionForm(t_UserDictionary *self, PyObject *arg)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getInflectionForm(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getInflectionForm", arg);
              return NULL;
            }

            static PyObject *t_UserDictionary_getInflectionType(t_UserDictionary *self, PyObject *arg)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getInflectionType(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getInflectionType", arg);
              return NULL;
            }

            static PyObject *t_UserDictionary_getLeftId(t_UserDictionary *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getLeftId(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getLeftId", arg);
              return NULL;
            }

            static PyObject *t_UserDictionary_getPartOfSpeech(t_UserDictionary *self, PyObject *arg)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getPartOfSpeech(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getPartOfSpeech", arg);
              return NULL;
            }

            static PyObject *t_UserDictionary_getPronunciation(t_UserDictionary *self, PyObject *args)
            {
              jint a0;
              JArray< jchar > a1((jobject) NULL);
              jint a2;
              jint a3;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I[CII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getPronunciation(a0, a1, a2, a3));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getPronunciation", args);
              return NULL;
            }

            static PyObject *t_UserDictionary_getReading(t_UserDictionary *self, PyObject *args)
            {
              jint a0;
              JArray< jchar > a1((jobject) NULL);
              jint a2;
              jint a3;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I[CII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getReading(a0, a1, a2, a3));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getReading", args);
              return NULL;
            }

            static PyObject *t_UserDictionary_getRightId(t_UserDictionary *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getRightId(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getRightId", arg);
              return NULL;
            }

            static PyObject *t_UserDictionary_getWordCost(t_UserDictionary *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getWordCost(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getWordCost", arg);
              return NULL;
            }

            static PyObject *t_UserDictionary_lookup(t_UserDictionary *self, PyObject *args)
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< JArray< jint > > result((jobject) NULL);

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2));
                return JArray<jobject>(result.this$).wrap(NULL);
              }

              PyErr_SetArgsError((PyObject *) self, "lookup", args);
              return NULL;
            }

            static PyObject *t_UserDictionary_lookupSegmentation(t_UserDictionary *self, PyObject *arg)
            {
              jint a0;
              JArray< jint > result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.lookupSegmentation(a0));
                return result.wrap();
              }

              PyErr_SetArgsError((PyObject *) self, "lookupSegmentation", arg);
              return NULL;
            }

            static PyObject *t_UserDictionary_open(PyTypeObject *type, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);
              UserDictionary result((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::ja::dict::UserDictionary::open(a0));
                return t_UserDictionary::wrap_Object(result);
              }

              PyErr_SetArgsError(type, "open", arg);
              return NULL;
            }

            static PyObject *t_UserDictionary_get__fST(t_UserDictionary *self, void *data)
            {
              ::org::apache::lucene::analysis::ja::dict::TokenInfoFST value((jobject) NULL);
              OBJ_CALL(value = self->object.getFST());
              return ::org::apache::lucene::analysis::ja::dict::t_TokenInfoFST::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanPositionCheckQuery$SpanPositionCheckWeight.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/SpanWeight$Postings.h"
#include "org/apache/lucene/index/TermStates.h"
#include "org/apache/lucene/search/spans/SpanPositionCheckQuery.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanPositionCheckQuery$SpanPositionCheckWeight::class$ = NULL;
          jmethodID *SpanPositionCheckQuery$SpanPositionCheckWeight::mids$ = NULL;
          bool SpanPositionCheckQuery$SpanPositionCheckWeight::live$ = false;

          jclass SpanPositionCheckQuery$SpanPositionCheckWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanPositionCheckQuery$SpanPositionCheckWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e67b4262c28df825] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanPositionCheckQuery;Lorg/apache/lucene/search/spans/SpanWeight;Lorg/apache/lucene/search/IndexSearcher;Ljava/util/Map;F)V");
              mids$[mid_extractTermStates_408bd889ee3beae5] = env->getMethodID(cls, "extractTermStates", "(Ljava/util/Map;)V");
              mids$[mid_extractTerms_d5a4a8d4b806f0ba] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getSpans_219c078c64a446fd] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/LeafReaderContext;Lorg/apache/lucene/search/spans/SpanWeight$Postings;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_isCacheable_07cae694a8cf1c6d] = env->getMethodID(cls, "isCacheable", "(Lorg/apache/lucene/index/LeafReaderContext;)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanPositionCheckQuery$SpanPositionCheckWeight::SpanPositionCheckQuery$SpanPositionCheckWeight(const ::org::apache::lucene::search::spans::SpanPositionCheckQuery & a0, const ::org::apache::lucene::search::spans::SpanWeight & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const ::java::util::Map & a3, jfloat a4) : ::org::apache::lucene::search::spans::SpanWeight(env->newObject(initializeClass, &mids$, mid_init$_e67b4262c28df825, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

          void SpanPositionCheckQuery$SpanPositionCheckWeight::extractTermStates(const ::java::util::Map & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTermStates_408bd889ee3beae5], a0.this$);
          }

          void SpanPositionCheckQuery$SpanPositionCheckWeight::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_d5a4a8d4b806f0ba], a0.this$);
          }

          ::org::apache::lucene::search::spans::Spans SpanPositionCheckQuery$SpanPositionCheckWeight::getSpans(const ::org::apache::lucene::index::LeafReaderContext & a0, const ::org::apache::lucene::search::spans::SpanWeight$Postings & a1) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_219c078c64a446fd], a0.this$, a1.this$));
          }

          jboolean SpanPositionCheckQuery$SpanPositionCheckWeight::isCacheable(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCacheable_07cae694a8cf1c6d], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanPositionCheckQuery$SpanPositionCheckWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanPositionCheckQuery$SpanPositionCheckWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanPositionCheckQuery$SpanPositionCheckWeight_init_(t_SpanPositionCheckQuery$SpanPositionCheckWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanPositionCheckQuery$SpanPositionCheckWeight_extractTermStates(t_SpanPositionCheckQuery$SpanPositionCheckWeight *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery$SpanPositionCheckWeight_extractTerms(t_SpanPositionCheckQuery$SpanPositionCheckWeight *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery$SpanPositionCheckWeight_getSpans(t_SpanPositionCheckQuery$SpanPositionCheckWeight *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery$SpanPositionCheckWeight_isCacheable(t_SpanPositionCheckQuery$SpanPositionCheckWeight *self, PyObject *args);

          static PyMethodDef t_SpanPositionCheckQuery$SpanPositionCheckWeight__methods_[] = {
            DECLARE_METHOD(t_SpanPositionCheckQuery$SpanPositionCheckWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionCheckQuery$SpanPositionCheckWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionCheckQuery$SpanPositionCheckWeight, extractTermStates, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery$SpanPositionCheckWeight, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery$SpanPositionCheckWeight, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery$SpanPositionCheckWeight, isCacheable, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanPositionCheckQuery$SpanPositionCheckWeight)[] = {
            { Py_tp_methods, t_SpanPositionCheckQuery$SpanPositionCheckWeight__methods_ },
            { Py_tp_init, (void *) t_SpanPositionCheckQuery$SpanPositionCheckWeight_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanPositionCheckQuery$SpanPositionCheckWeight)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanWeight),
            NULL
          };

          DEFINE_TYPE(SpanPositionCheckQuery$SpanPositionCheckWeight, t_SpanPositionCheckQuery$SpanPositionCheckWeight, SpanPositionCheckQuery$SpanPositionCheckWeight);

          void t_SpanPositionCheckQuery$SpanPositionCheckWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanPositionCheckQuery$SpanPositionCheckWeight), &PY_TYPE_DEF(SpanPositionCheckQuery$SpanPositionCheckWeight), module, "SpanPositionCheckQuery$SpanPositionCheckWeight", 0);
          }

          void t_SpanPositionCheckQuery$SpanPositionCheckWeight::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanPositionCheckQuery$SpanPositionCheckWeight), "class_", make_descriptor(SpanPositionCheckQuery$SpanPositionCheckWeight::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanPositionCheckQuery$SpanPositionCheckWeight), "wrapfn_", make_descriptor(t_SpanPositionCheckQuery$SpanPositionCheckWeight::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanPositionCheckQuery$SpanPositionCheckWeight), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanPositionCheckQuery$SpanPositionCheckWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanPositionCheckQuery$SpanPositionCheckWeight::initializeClass, 1)))
              return NULL;
            return t_SpanPositionCheckQuery$SpanPositionCheckWeight::wrap_Object(SpanPositionCheckQuery$SpanPositionCheckWeight(((t_SpanPositionCheckQuery$SpanPositionCheckWeight *) arg)->object.this$));
          }
          static PyObject *t_SpanPositionCheckQuery$SpanPositionCheckWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanPositionCheckQuery$SpanPositionCheckWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanPositionCheckQuery$SpanPositionCheckWeight_init_(t_SpanPositionCheckQuery$SpanPositionCheckWeight *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanPositionCheckQuery a0((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanWeight a1((jobject) NULL);
            ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
            ::java::util::Map a3((jobject) NULL);
            PyTypeObject **p3;
            jfloat a4;
            SpanPositionCheckQuery$SpanPositionCheckWeight object((jobject) NULL);

            if (!parseArgs(args, "kkkKF", ::org::apache::lucene::search::spans::SpanPositionCheckQuery::initializeClass, ::org::apache::lucene::search::spans::SpanWeight::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Map::parameters_, &a4))
            {
              INT_CALL(object = SpanPositionCheckQuery$SpanPositionCheckWeight(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanPositionCheckQuery$SpanPositionCheckWeight_extractTermStates(t_SpanPositionCheckQuery$SpanPositionCheckWeight *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(self->object.extractTermStates(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanPositionCheckQuery$SpanPositionCheckWeight), (PyObject *) self, "extractTermStates", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery$SpanPositionCheckWeight_extractTerms(t_SpanPositionCheckQuery$SpanPositionCheckWeight *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanPositionCheckQuery$SpanPositionCheckWeight), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery$SpanPositionCheckWeight_getSpans(t_SpanPositionCheckQuery$SpanPositionCheckWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanWeight$Postings a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::index::LeafReaderContext::initializeClass, ::org::apache::lucene::search::spans::SpanWeight$Postings::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::spans::t_SpanWeight$Postings::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanPositionCheckQuery$SpanPositionCheckWeight), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery$SpanPositionCheckWeight_isCacheable(t_SpanPositionCheckQuery$SpanPositionCheckWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isCacheable(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SpanPositionCheckQuery$SpanPositionCheckWeight), (PyObject *) self, "isCacheable", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumberDateFormat.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/StringBuffer.h"
#include "java/text/DateFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *NumberDateFormat::class$ = NULL;
              jmethodID *NumberDateFormat::mids$ = NULL;
              bool NumberDateFormat::live$ = false;

              jclass NumberDateFormat::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/NumberDateFormat");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_90c2b1ae19677f13] = env->getMethodID(cls, "<init>", "(Ljava/text/DateFormat;)V");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumberDateFormat::NumberDateFormat(const ::java::text::DateFormat & a0) : ::java::text::NumberFormat(env->newObject(initializeClass, &mids$, mid_init$_90c2b1ae19677f13, a0.this$)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_NumberDateFormat_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumberDateFormat_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumberDateFormat_init_(t_NumberDateFormat *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_NumberDateFormat__methods_[] = {
                DECLARE_METHOD(t_NumberDateFormat, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumberDateFormat, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(NumberDateFormat)[] = {
                { Py_tp_methods, t_NumberDateFormat__methods_ },
                { Py_tp_init, (void *) t_NumberDateFormat_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(NumberDateFormat)[] = {
                &PY_TYPE_DEF(::java::text::NumberFormat),
                NULL
              };

              DEFINE_TYPE(NumberDateFormat, t_NumberDateFormat, NumberDateFormat);

              void t_NumberDateFormat::install(PyObject *module)
              {
                installType(&PY_TYPE(NumberDateFormat), &PY_TYPE_DEF(NumberDateFormat), module, "NumberDateFormat", 0);
              }

              void t_NumberDateFormat::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(NumberDateFormat), "class_", make_descriptor(NumberDateFormat::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(NumberDateFormat), "wrapfn_", make_descriptor(t_NumberDateFormat::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(NumberDateFormat), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumberDateFormat_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumberDateFormat::initializeClass, 1)))
                  return NULL;
                return t_NumberDateFormat::wrap_Object(NumberDateFormat(((t_NumberDateFormat *) arg)->object.this$));
              }
              static PyObject *t_NumberDateFormat_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumberDateFormat::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumberDateFormat_init_(t_NumberDateFormat *self, PyObject *args, PyObject *kwds)
              {
                ::java::text::DateFormat a0((jobject) NULL);
                NumberDateFormat object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::text::DateFormat::initializeClass, &a0))
                {
                  INT_CALL(object = NumberDateFormat(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/LinearFloatFunction.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *LinearFloatFunction::class$ = NULL;
            jmethodID *LinearFloatFunction::mids$ = NULL;
            bool LinearFloatFunction::live$ = false;

            jclass LinearFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/LinearFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_581bf9010c1196d6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FF)V");
                mids$[mid_createWeight_69d322032c5ae159] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LinearFloatFunction::LinearFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_581bf9010c1196d6, a0.this$, a1, a2)) {}

            void LinearFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_69d322032c5ae159], a0.this$, a1.this$);
            }

            ::java::lang::String LinearFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean LinearFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues LinearFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint LinearFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_LinearFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LinearFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LinearFloatFunction_init_(t_LinearFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LinearFloatFunction_createWeight(t_LinearFloatFunction *self, PyObject *args);
            static PyObject *t_LinearFloatFunction_description(t_LinearFloatFunction *self, PyObject *args);
            static PyObject *t_LinearFloatFunction_equals(t_LinearFloatFunction *self, PyObject *args);
            static PyObject *t_LinearFloatFunction_getValues(t_LinearFloatFunction *self, PyObject *args);
            static PyObject *t_LinearFloatFunction_hashCode(t_LinearFloatFunction *self, PyObject *args);

            static PyMethodDef t_LinearFloatFunction__methods_[] = {
              DECLARE_METHOD(t_LinearFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LinearFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LinearFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_LinearFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_LinearFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_LinearFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_LinearFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(LinearFloatFunction)[] = {
              { Py_tp_methods, t_LinearFloatFunction__methods_ },
              { Py_tp_init, (void *) t_LinearFloatFunction_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(LinearFloatFunction)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::ValueSource),
              NULL
            };

            DEFINE_TYPE(LinearFloatFunction, t_LinearFloatFunction, LinearFloatFunction);

            void t_LinearFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(LinearFloatFunction), &PY_TYPE_DEF(LinearFloatFunction), module, "LinearFloatFunction", 0);
            }

            void t_LinearFloatFunction::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(LinearFloatFunction), "class_", make_descriptor(LinearFloatFunction::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(LinearFloatFunction), "wrapfn_", make_descriptor(t_LinearFloatFunction::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(LinearFloatFunction), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LinearFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LinearFloatFunction::initializeClass, 1)))
                return NULL;
              return t_LinearFloatFunction::wrap_Object(LinearFloatFunction(((t_LinearFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_LinearFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LinearFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LinearFloatFunction_init_(t_LinearFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              jfloat a1;
              jfloat a2;
              LinearFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kFF", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = LinearFloatFunction(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LinearFloatFunction_createWeight(t_LinearFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(LinearFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_LinearFloatFunction_description(t_LinearFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(LinearFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_LinearFloatFunction_equals(t_LinearFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(LinearFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_LinearFloatFunction_getValues(t_LinearFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(LinearFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_LinearFloatFunction_hashCode(t_LinearFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(LinearFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SortingCodecReader.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/CodecReader.h"
#include "org/apache/lucene/index/LeafMetaData.h"
#include "org/apache/lucene/codecs/PointsReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexReader$CacheHelper.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SortingCodecReader::class$ = NULL;
        jmethodID *SortingCodecReader::mids$ = NULL;
        bool SortingCodecReader::live$ = false;

        jclass SortingCodecReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SortingCodecReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getCoreCacheHelper_a64c414fea9a8cf6] = env->getMethodID(cls, "getCoreCacheHelper", "()Lorg/apache/lucene/index/IndexReader$CacheHelper;");
            mids$[mid_getDocValuesReader_2703cdf07eabd0a4] = env->getMethodID(cls, "getDocValuesReader", "()Lorg/apache/lucene/codecs/DocValuesProducer;");
            mids$[mid_getFieldsReader_ba629b83d3686969] = env->getMethodID(cls, "getFieldsReader", "()Lorg/apache/lucene/codecs/StoredFieldsReader;");
            mids$[mid_getLiveDocs_ad87da2b626b21cf] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getMetaData_07168aa94cc70619] = env->getMethodID(cls, "getMetaData", "()Lorg/apache/lucene/index/LeafMetaData;");
            mids$[mid_getNormsReader_0502194d89d40c22] = env->getMethodID(cls, "getNormsReader", "()Lorg/apache/lucene/codecs/NormsProducer;");
            mids$[mid_getPointsReader_0a5d82ff6781f22b] = env->getMethodID(cls, "getPointsReader", "()Lorg/apache/lucene/codecs/PointsReader;");
            mids$[mid_getPostingsReader_573c1a94549f7937] = env->getMethodID(cls, "getPostingsReader", "()Lorg/apache/lucene/codecs/FieldsProducer;");
            mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6] = env->getMethodID(cls, "getReaderCacheHelper", "()Lorg/apache/lucene/index/IndexReader$CacheHelper;");
            mids$[mid_getTermVectorsReader_f69eb90f55592154] = env->getMethodID(cls, "getTermVectorsReader", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_wrap_77fdfbdd4d261550] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/index/CodecReader;Lorg/apache/lucene/search/Sort;)Lorg/apache/lucene/index/CodecReader;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::IndexReader$CacheHelper SortingCodecReader::getCoreCacheHelper() const
        {
          return ::org::apache::lucene::index::IndexReader$CacheHelper(env->callObjectMethod(this$, mids$[mid_getCoreCacheHelper_a64c414fea9a8cf6]));
        }

        ::org::apache::lucene::codecs::DocValuesProducer SortingCodecReader::getDocValuesReader() const
        {
          return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_getDocValuesReader_2703cdf07eabd0a4]));
        }

        ::org::apache::lucene::codecs::StoredFieldsReader SortingCodecReader::getFieldsReader() const
        {
          return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_getFieldsReader_ba629b83d3686969]));
        }

        ::org::apache::lucene::util::Bits SortingCodecReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_ad87da2b626b21cf]));
        }

        ::org::apache::lucene::index::LeafMetaData SortingCodecReader::getMetaData() const
        {
          return ::org::apache::lucene::index::LeafMetaData(env->callObjectMethod(this$, mids$[mid_getMetaData_07168aa94cc70619]));
        }

        ::org::apache::lucene::codecs::NormsProducer SortingCodecReader::getNormsReader() const
        {
          return ::org::apache::lucene::codecs::NormsProducer(env->callObjectMethod(this$, mids$[mid_getNormsReader_0502194d89d40c22]));
        }

        ::org::apache::lucene::codecs::PointsReader SortingCodecReader::getPointsReader() const
        {
          return ::org::apache::lucene::codecs::PointsReader(env->callObjectMethod(this$, mids$[mid_getPointsReader_0a5d82ff6781f22b]));
        }

        ::org::apache::lucene::codecs::FieldsProducer SortingCodecReader::getPostingsReader() const
        {
          return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_getPostingsReader_573c1a94549f7937]));
        }

        ::org::apache::lucene::index::IndexReader$CacheHelper SortingCodecReader::getReaderCacheHelper() const
        {
          return ::org::apache::lucene::index::IndexReader$CacheHelper(env->callObjectMethod(this$, mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6]));
        }

        ::org::apache::lucene::codecs::TermVectorsReader SortingCodecReader::getTermVectorsReader() const
        {
          return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_getTermVectorsReader_f69eb90f55592154]));
        }

        ::java::lang::String SortingCodecReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        ::org::apache::lucene::index::CodecReader SortingCodecReader::wrap(const ::org::apache::lucene::index::CodecReader & a0, const ::org::apache::lucene::search::Sort & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CodecReader(env->callStaticObjectMethod(cls, mids$[mid_wrap_77fdfbdd4d261550], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SortingCodecReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortingCodecReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortingCodecReader_getCoreCacheHelper(t_SortingCodecReader *self, PyObject *args);
        static PyObject *t_SortingCodecReader_getDocValuesReader(t_SortingCodecReader *self, PyObject *args);
        static PyObject *t_SortingCodecReader_getFieldsReader(t_SortingCodecReader *self, PyObject *args);
        static PyObject *t_SortingCodecReader_getLiveDocs(t_SortingCodecReader *self, PyObject *args);
        static PyObject *t_SortingCodecReader_getMetaData(t_SortingCodecReader *self, PyObject *args);
        static PyObject *t_SortingCodecReader_getNormsReader(t_SortingCodecReader *self, PyObject *args);
        static PyObject *t_SortingCodecReader_getPointsReader(t_SortingCodecReader *self, PyObject *args);
        static PyObject *t_SortingCodecReader_getPostingsReader(t_SortingCodecReader *self, PyObject *args);
        static PyObject *t_SortingCodecReader_getReaderCacheHelper(t_SortingCodecReader *self, PyObject *args);
        static PyObject *t_SortingCodecReader_getTermVectorsReader(t_SortingCodecReader *self, PyObject *args);
        static PyObject *t_SortingCodecReader_toString(t_SortingCodecReader *self, PyObject *args);
        static PyObject *t_SortingCodecReader_wrap(PyTypeObject *type, PyObject *args);
        static PyObject *t_SortingCodecReader_get__coreCacheHelper(t_SortingCodecReader *self, void *data);
        static PyObject *t_SortingCodecReader_get__docValuesReader(t_SortingCodecReader *self, void *data);
        static PyObject *t_SortingCodecReader_get__fieldsReader(t_SortingCodecReader *self, void *data);
        static PyObject *t_SortingCodecReader_get__liveDocs(t_SortingCodecReader *self, void *data);
        static PyObject *t_SortingCodecReader_get__metaData(t_SortingCodecReader *self, void *data);
        static PyObject *t_SortingCodecReader_get__normsReader(t_SortingCodecReader *self, void *data);
        static PyObject *t_SortingCodecReader_get__pointsReader(t_SortingCodecReader *self, void *data);
        static PyObject *t_SortingCodecReader_get__postingsReader(t_SortingCodecReader *self, void *data);
        static PyObject *t_SortingCodecReader_get__readerCacheHelper(t_SortingCodecReader *self, void *data);
        static PyObject *t_SortingCodecReader_get__termVectorsReader(t_SortingCodecReader *self, void *data);
        static PyGetSetDef t_SortingCodecReader__fields_[] = {
          DECLARE_GET_FIELD(t_SortingCodecReader, coreCacheHelper),
          DECLARE_GET_FIELD(t_SortingCodecReader, docValuesReader),
          DECLARE_GET_FIELD(t_SortingCodecReader, fieldsReader),
          DECLARE_GET_FIELD(t_SortingCodecReader, liveDocs),
          DECLARE_GET_FIELD(t_SortingCodecReader, metaData),
          DECLARE_GET_FIELD(t_SortingCodecReader, normsReader),
          DECLARE_GET_FIELD(t_SortingCodecReader, pointsReader),
          DECLARE_GET_FIELD(t_SortingCodecReader, postingsReader),
          DECLARE_GET_FIELD(t_SortingCodecReader, readerCacheHelper),
          DECLARE_GET_FIELD(t_SortingCodecReader, termVectorsReader),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortingCodecReader__methods_[] = {
          DECLARE_METHOD(t_SortingCodecReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortingCodecReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortingCodecReader, getCoreCacheHelper, METH_VARARGS),
          DECLARE_METHOD(t_SortingCodecReader, getDocValuesReader, METH_VARARGS),
          DECLARE_METHOD(t_SortingCodecReader, getFieldsReader, METH_VARARGS),
          DECLARE_METHOD(t_SortingCodecReader, getLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_SortingCodecReader, getMetaData, METH_VARARGS),
          DECLARE_METHOD(t_SortingCodecReader, getNormsReader, METH_VARARGS),
          DECLARE_METHOD(t_SortingCodecReader, getPointsReader, METH_VARARGS),
          DECLARE_METHOD(t_SortingCodecReader, getPostingsReader, METH_VARARGS),
          DECLARE_METHOD(t_SortingCodecReader, getReaderCacheHelper, METH_VARARGS),
          DECLARE_METHOD(t_SortingCodecReader, getTermVectorsReader, METH_VARARGS),
          DECLARE_METHOD(t_SortingCodecReader, toString, METH_VARARGS),
          DECLARE_METHOD(t_SortingCodecReader, wrap, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SortingCodecReader)[] = {
          { Py_tp_methods, t_SortingCodecReader__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_SortingCodecReader__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SortingCodecReader)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::FilterCodecReader),
          NULL
        };

        DEFINE_TYPE(SortingCodecReader, t_SortingCodecReader, SortingCodecReader);

        void t_SortingCodecReader::install(PyObject *module)
        {
          installType(&PY_TYPE(SortingCodecReader), &PY_TYPE_DEF(SortingCodecReader), module, "SortingCodecReader", 0);
        }

        void t_SortingCodecReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortingCodecReader), "class_", make_descriptor(SortingCodecReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortingCodecReader), "wrapfn_", make_descriptor(t_SortingCodecReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortingCodecReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortingCodecReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortingCodecReader::initializeClass, 1)))
            return NULL;
          return t_SortingCodecReader::wrap_Object(SortingCodecReader(((t_SortingCodecReader *) arg)->object.this$));
        }
        static PyObject *t_SortingCodecReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortingCodecReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortingCodecReader_getCoreCacheHelper(t_SortingCodecReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCoreCacheHelper());
            return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SortingCodecReader), (PyObject *) self, "getCoreCacheHelper", args, 2);
        }

        static PyObject *t_SortingCodecReader_getDocValuesReader(t_SortingCodecReader *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getDocValuesReader());
            return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SortingCodecReader), (PyObject *) self, "getDocValuesReader", args, 2);
        }

        static PyObject *t_SortingCodecReader_getFieldsReader(t_SortingCodecReader *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldsReader());
            return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SortingCodecReader), (PyObject *) self, "getFieldsReader", args, 2);
        }

        static PyObject *t_SortingCodecReader_getLiveDocs(t_SortingCodecReader *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SortingCodecReader), (PyObject *) self, "getLiveDocs", args, 2);
        }

        static PyObject *t_SortingCodecReader_getMetaData(t_SortingCodecReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafMetaData result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMetaData());
            return ::org::apache::lucene::index::t_LeafMetaData::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SortingCodecReader), (PyObject *) self, "getMetaData", args, 2);
        }

        static PyObject *t_SortingCodecReader_getNormsReader(t_SortingCodecReader *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::NormsProducer result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getNormsReader());
            return ::org::apache::lucene::codecs::t_NormsProducer::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SortingCodecReader), (PyObject *) self, "getNormsReader", args, 2);
        }

        static PyObject *t_SortingCodecReader_getPointsReader(t_SortingCodecReader *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::PointsReader result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPointsReader());
            return ::org::apache::lucene::codecs::t_PointsReader::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SortingCodecReader), (PyObject *) self, "getPointsReader", args, 2);
        }

        static PyObject *t_SortingCodecReader_getPostingsReader(t_SortingCodecReader *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPostingsReader());
            return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SortingCodecReader), (PyObject *) self, "getPostingsReader", args, 2);
        }

        static PyObject *t_SortingCodecReader_getReaderCacheHelper(t_SortingCodecReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getReaderCacheHelper());
            return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SortingCodecReader), (PyObject *) self, "getReaderCacheHelper", args, 2);
        }

        static PyObject *t_SortingCodecReader_getTermVectorsReader(t_SortingCodecReader *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getTermVectorsReader());
            return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SortingCodecReader), (PyObject *) self, "getTermVectorsReader", args, 2);
        }

        static PyObject *t_SortingCodecReader_toString(t_SortingCodecReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(SortingCodecReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SortingCodecReader_wrap(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::CodecReader a0((jobject) NULL);
          ::org::apache::lucene::search::Sort a1((jobject) NULL);
          ::org::apache::lucene::index::CodecReader result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::CodecReader::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::SortingCodecReader::wrap(a0, a1));
            return ::org::apache::lucene::index::t_CodecReader::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", args);
          return NULL;
        }

        static PyObject *t_SortingCodecReader_get__coreCacheHelper(t_SortingCodecReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper value((jobject) NULL);
          OBJ_CALL(value = self->object.getCoreCacheHelper());
          return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(value);
        }

        static PyObject *t_SortingCodecReader_get__docValuesReader(t_SortingCodecReader *self, void *data)
        {
          ::org::apache::lucene::codecs::DocValuesProducer value((jobject) NULL);
          OBJ_CALL(value = self->object.getDocValuesReader());
          return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(value);
        }

        static PyObject *t_SortingCodecReader_get__fieldsReader(t_SortingCodecReader *self, void *data)
        {
          ::org::apache::lucene::codecs::StoredFieldsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldsReader());
          return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(value);
        }

        static PyObject *t_SortingCodecReader_get__liveDocs(t_SortingCodecReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }

        static PyObject *t_SortingCodecReader_get__metaData(t_SortingCodecReader *self, void *data)
        {
          ::org::apache::lucene::index::LeafMetaData value((jobject) NULL);
          OBJ_CALL(value = self->object.getMetaData());
          return ::org::apache::lucene::index::t_LeafMetaData::wrap_Object(value);
        }

        static PyObject *t_SortingCodecReader_get__normsReader(t_SortingCodecReader *self, void *data)
        {
          ::org::apache::lucene::codecs::NormsProducer value((jobject) NULL);
          OBJ_CALL(value = self->object.getNormsReader());
          return ::org::apache::lucene::codecs::t_NormsProducer::wrap_Object(value);
        }

        static PyObject *t_SortingCodecReader_get__pointsReader(t_SortingCodecReader *self, void *data)
        {
          ::org::apache::lucene::codecs::PointsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getPointsReader());
          return ::org::apache::lucene::codecs::t_PointsReader::wrap_Object(value);
        }

        static PyObject *t_SortingCodecReader_get__postingsReader(t_SortingCodecReader *self, void *data)
        {
          ::org::apache::lucene::codecs::FieldsProducer value((jobject) NULL);
          OBJ_CALL(value = self->object.getPostingsReader());
          return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(value);
        }

        static PyObject *t_SortingCodecReader_get__readerCacheHelper(t_SortingCodecReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper value((jobject) NULL);
          OBJ_CALL(value = self->object.getReaderCacheHelper());
          return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(value);
        }

        static PyObject *t_SortingCodecReader_get__termVectorsReader(t_SortingCodecReader *self, void *data)
        {
          ::org::apache::lucene::codecs::TermVectorsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getTermVectorsReader());
          return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$NullReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$NullReader::class$ = NULL;
          jmethodID *PackedInts$NullReader::mids$ = NULL;
          bool PackedInts$NullReader::live$ = false;

          jclass PackedInts$NullReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$NullReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_get_0f1d64a641e8af53] = env->getMethodID(cls, "get", "(I)J");
              mids$[mid_get_4c642cf3a1fd0041] = env->getMethodID(cls, "get", "(I[JII)I");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$NullReader::PackedInts$NullReader(jint a0) : ::org::apache::lucene::util::packed::PackedInts$Reader(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          jlong PackedInts$NullReader::get(jint a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_0f1d64a641e8af53], a0);
          }

          jint PackedInts$NullReader::get(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_get_4c642cf3a1fd0041], a0, a1.this$, a2, a3);
          }

          jlong PackedInts$NullReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          jint PackedInts$NullReader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$NullReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$NullReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$NullReader_init_(t_PackedInts$NullReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts$NullReader_get(t_PackedInts$NullReader *self, PyObject *args);
          static PyObject *t_PackedInts$NullReader_ramBytesUsed(t_PackedInts$NullReader *self, PyObject *args);
          static PyObject *t_PackedInts$NullReader_size(t_PackedInts$NullReader *self, PyObject *args);

          static PyMethodDef t_PackedInts$NullReader__methods_[] = {
            DECLARE_METHOD(t_PackedInts$NullReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$NullReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$NullReader, get, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$NullReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$NullReader, size, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PackedInts$NullReader)[] = {
            { Py_tp_methods, t_PackedInts$NullReader__methods_ },
            { Py_tp_init, (void *) t_PackedInts$NullReader_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PackedInts$NullReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::packed::PackedInts$Reader),
            NULL
          };

          DEFINE_TYPE(PackedInts$NullReader, t_PackedInts$NullReader, PackedInts$NullReader);

          void t_PackedInts$NullReader::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$NullReader), &PY_TYPE_DEF(PackedInts$NullReader), module, "PackedInts$NullReader", 0);
          }

          void t_PackedInts$NullReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$NullReader), "class_", make_descriptor(PackedInts$NullReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$NullReader), "wrapfn_", make_descriptor(t_PackedInts$NullReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$NullReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$NullReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$NullReader::initializeClass, 1)))
              return NULL;
            return t_PackedInts$NullReader::wrap_Object(PackedInts$NullReader(((t_PackedInts$NullReader *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$NullReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$NullReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$NullReader_init_(t_PackedInts$NullReader *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            PackedInts$NullReader object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = PackedInts$NullReader(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PackedInts$NullReader_get(t_PackedInts$NullReader *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jlong result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              break;
             case 4:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
                  return PyLong_FromLong((long) result);
                }
              }
            }

            return callSuper(PY_TYPE(PackedInts$NullReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_PackedInts$NullReader_ramBytesUsed(t_PackedInts$NullReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(PackedInts$NullReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_PackedInts$NullReader_size(t_PackedInts$NullReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(PackedInts$NullReader), (PyObject *) self, "size", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RateLimiter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RateLimiter::class$ = NULL;
        jmethodID *RateLimiter::mids$ = NULL;
        bool RateLimiter::live$ = false;

        jclass RateLimiter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RateLimiter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getMBPerSec_8c74b787998ce4bc] = env->getMethodID(cls, "getMBPerSec", "()D");
            mids$[mid_getMinPauseCheckBytes_2e5ae9edcb9b072f] = env->getMethodID(cls, "getMinPauseCheckBytes", "()J");
            mids$[mid_pause_d711eecdc469624a] = env->getMethodID(cls, "pause", "(J)J");
            mids$[mid_setMBPerSec_3c435f10a3b1e038] = env->getMethodID(cls, "setMBPerSec", "(D)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RateLimiter::RateLimiter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jdouble RateLimiter::getMBPerSec() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMBPerSec_8c74b787998ce4bc]);
        }

        jlong RateLimiter::getMinPauseCheckBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_getMinPauseCheckBytes_2e5ae9edcb9b072f]);
        }

        jlong RateLimiter::pause(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_pause_d711eecdc469624a], a0);
        }

        void RateLimiter::setMBPerSec(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMBPerSec_3c435f10a3b1e038], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/store/RateLimiter$SimpleRateLimiter.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RateLimiter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RateLimiter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RateLimiter_init_(t_RateLimiter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RateLimiter_getMBPerSec(t_RateLimiter *self);
        static PyObject *t_RateLimiter_getMinPauseCheckBytes(t_RateLimiter *self);
        static PyObject *t_RateLimiter_pause(t_RateLimiter *self, PyObject *arg);
        static PyObject *t_RateLimiter_setMBPerSec(t_RateLimiter *self, PyObject *arg);
        static PyObject *t_RateLimiter_get__mBPerSec(t_RateLimiter *self, void *data);
        static int t_RateLimiter_set__mBPerSec(t_RateLimiter *self, PyObject *arg, void *data);
        static PyObject *t_RateLimiter_get__minPauseCheckBytes(t_RateLimiter *self, void *data);
        static PyGetSetDef t_RateLimiter__fields_[] = {
          DECLARE_GETSET_FIELD(t_RateLimiter, mBPerSec),
          DECLARE_GET_FIELD(t_RateLimiter, minPauseCheckBytes),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RateLimiter__methods_[] = {
          DECLARE_METHOD(t_RateLimiter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimiter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimiter, getMBPerSec, METH_NOARGS),
          DECLARE_METHOD(t_RateLimiter, getMinPauseCheckBytes, METH_NOARGS),
          DECLARE_METHOD(t_RateLimiter, pause, METH_O),
          DECLARE_METHOD(t_RateLimiter, setMBPerSec, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RateLimiter)[] = {
          { Py_tp_methods, t_RateLimiter__methods_ },
          { Py_tp_init, (void *) t_RateLimiter_init_ },
          { Py_tp_getset, t_RateLimiter__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RateLimiter)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(RateLimiter, t_RateLimiter, RateLimiter);

        void t_RateLimiter::install(PyObject *module)
        {
          installType(&PY_TYPE(RateLimiter), &PY_TYPE_DEF(RateLimiter), module, "RateLimiter", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(RateLimiter), "SimpleRateLimiter", make_descriptor(&PY_TYPE_DEF(RateLimiter$SimpleRateLimiter)));
        }

        void t_RateLimiter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RateLimiter), "class_", make_descriptor(RateLimiter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RateLimiter), "wrapfn_", make_descriptor(t_RateLimiter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RateLimiter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RateLimiter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RateLimiter::initializeClass, 1)))
            return NULL;
          return t_RateLimiter::wrap_Object(RateLimiter(((t_RateLimiter *) arg)->object.this$));
        }
        static PyObject *t_RateLimiter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RateLimiter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RateLimiter_init_(t_RateLimiter *self, PyObject *args, PyObject *kwds)
        {
          RateLimiter object((jobject) NULL);

          INT_CALL(object = RateLimiter());
          self->object = object;

          return 0;
        }

        static PyObject *t_RateLimiter_getMBPerSec(t_RateLimiter *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMBPerSec());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_RateLimiter_getMinPauseCheckBytes(t_RateLimiter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getMinPauseCheckBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RateLimiter_pause(t_RateLimiter *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.pause(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "pause", arg);
          return NULL;
        }

        static PyObject *t_RateLimiter_setMBPerSec(t_RateLimiter *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMBPerSec(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMBPerSec", arg);
          return NULL;
        }

        static PyObject *t_RateLimiter_get__mBPerSec(t_RateLimiter *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMBPerSec());
          return PyFloat_FromDouble((double) value);
        }
        static int t_RateLimiter_set__mBPerSec(t_RateLimiter *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMBPerSec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mBPerSec", arg);
          return -1;
        }

        static PyObject *t_RateLimiter_get__minPauseCheckBytes(t_RateLimiter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getMinPauseCheckBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicStemFilterFactory.h"
#include "org/apache/lucene/analysis/ar/ArabicStemFilter.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicStemFilterFactory::class$ = NULL;
          jmethodID *ArabicStemFilterFactory::mids$ = NULL;
          bool ArabicStemFilterFactory::live$ = false;
          ::java::lang::String *ArabicStemFilterFactory::NAME = NULL;

          jclass ArabicStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_8e6ba8692160f0e8] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ar/ArabicStemFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicStemFilterFactory::ArabicStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::ar::ArabicStemFilter ArabicStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ar::ArabicStemFilter(env->callObjectMethod(this$, mids$[mid_create_8e6ba8692160f0e8], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicStemFilterFactory_init_(t_ArabicStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicStemFilterFactory_create(t_ArabicStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_ArabicStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ArabicStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ArabicStemFilterFactory)[] = {
            { Py_tp_methods, t_ArabicStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_ArabicStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ArabicStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(ArabicStemFilterFactory, t_ArabicStemFilterFactory, ArabicStemFilterFactory);

          void t_ArabicStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicStemFilterFactory), &PY_TYPE_DEF(ArabicStemFilterFactory), module, "ArabicStemFilterFactory", 0);
          }

          void t_ArabicStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemFilterFactory), "class_", make_descriptor(ArabicStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemFilterFactory), "wrapfn_", make_descriptor(t_ArabicStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(ArabicStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemFilterFactory), "NAME", make_descriptor(j2p(*ArabicStemFilterFactory::NAME)));
          }

          static PyObject *t_ArabicStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ArabicStemFilterFactory::wrap_Object(ArabicStemFilterFactory(((t_ArabicStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ArabicStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicStemFilterFactory_init_(t_ArabicStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ArabicStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ArabicStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicStemFilterFactory_create(t_ArabicStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ar::ArabicStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ar::t_ArabicStemFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ArabicStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/LongRangeFactory.h"
#include "org/apache/lucene/search/grouping/LongRange.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *LongRangeFactory::class$ = NULL;
          jmethodID *LongRangeFactory::mids$ = NULL;
          bool LongRangeFactory::live$ = false;

          jclass LongRangeFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/LongRangeFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3b7bfdd1951849aa] = env->getMethodID(cls, "<init>", "(JJJ)V");
              mids$[mid_getRange_23b87b26f6e3676d] = env->getMethodID(cls, "getRange", "(JLorg/apache/lucene/search/grouping/LongRange;)Lorg/apache/lucene/search/grouping/LongRange;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LongRangeFactory::LongRangeFactory(jlong a0, jlong a1, jlong a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3b7bfdd1951849aa, a0, a1, a2)) {}

          ::org::apache::lucene::search::grouping::LongRange LongRangeFactory::getRange(jlong a0, const ::org::apache::lucene::search::grouping::LongRange & a1) const
          {
            return ::org::apache::lucene::search::grouping::LongRange(env->callObjectMethod(this$, mids$[mid_getRange_23b87b26f6e3676d], a0, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_LongRangeFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongRangeFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LongRangeFactory_init_(t_LongRangeFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LongRangeFactory_getRange(t_LongRangeFactory *self, PyObject *args);

          static PyMethodDef t_LongRangeFactory__methods_[] = {
            DECLARE_METHOD(t_LongRangeFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRangeFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRangeFactory, getRange, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LongRangeFactory)[] = {
            { Py_tp_methods, t_LongRangeFactory__methods_ },
            { Py_tp_init, (void *) t_LongRangeFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LongRangeFactory)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(LongRangeFactory, t_LongRangeFactory, LongRangeFactory);

          void t_LongRangeFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LongRangeFactory), &PY_TYPE_DEF(LongRangeFactory), module, "LongRangeFactory", 0);
          }

          void t_LongRangeFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongRangeFactory), "class_", make_descriptor(LongRangeFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongRangeFactory), "wrapfn_", make_descriptor(t_LongRangeFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongRangeFactory), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LongRangeFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LongRangeFactory::initializeClass, 1)))
              return NULL;
            return t_LongRangeFactory::wrap_Object(LongRangeFactory(((t_LongRangeFactory *) arg)->object.this$));
          }
          static PyObject *t_LongRangeFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LongRangeFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LongRangeFactory_init_(t_LongRangeFactory *self, PyObject *args, PyObject *kwds)
          {
            jlong a0;
            jlong a1;
            jlong a2;
            LongRangeFactory object((jobject) NULL);

            if (!parseArgs(args, "JJJ", &a0, &a1, &a2))
            {
              INT_CALL(object = LongRangeFactory(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LongRangeFactory_getRange(t_LongRangeFactory *self, PyObject *args)
          {
            jlong a0;
            ::org::apache::lucene::search::grouping::LongRange a1((jobject) NULL);
            ::org::apache::lucene::search::grouping::LongRange result((jobject) NULL);

            if (!parseArgs(args, "Jk", ::org::apache::lucene::search::grouping::LongRange::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.getRange(a0, a1));
              return ::org::apache::lucene::search::grouping::t_LongRange::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getRange", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/comparators/DocComparator.h"
#include "java/lang/Integer.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/LeafFieldComparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {

          ::java::lang::Class *DocComparator::class$ = NULL;
          jmethodID *DocComparator::mids$ = NULL;
          bool DocComparator::live$ = false;

          jclass DocComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/comparators/DocComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_bb058390899ffbb1] = env->getMethodID(cls, "<init>", "(IZI)V");
              mids$[mid_compare_57a58545eba514db] = env->getMethodID(cls, "compare", "(II)I");
              mids$[mid_getLeafComparator_6183906b7058c4b5] = env->getMethodID(cls, "getLeafComparator", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/LeafFieldComparator;");
              mids$[mid_setTopValue_dbbc1cc0063b348c] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Integer;)V");
              mids$[mid_value_6469c2cb31e18c67] = env->getMethodID(cls, "value", "(I)Ljava/lang/Integer;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DocComparator::DocComparator(jint a0, jboolean a1, jint a2) : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_bb058390899ffbb1, a0, a1, a2)) {}

          jint DocComparator::compare(jint a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_57a58545eba514db], a0, a1);
          }

          ::org::apache::lucene::search::LeafFieldComparator DocComparator::getLeafComparator(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return ::org::apache::lucene::search::LeafFieldComparator(env->callObjectMethod(this$, mids$[mid_getLeafComparator_6183906b7058c4b5], a0.this$));
          }

          void DocComparator::setTopValue(const ::java::lang::Integer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTopValue_dbbc1cc0063b348c], a0.this$);
          }

          ::java::lang::Integer DocComparator::value(jint a0) const
          {
            return ::java::lang::Integer(env->callObjectMethod(this$, mids$[mid_value_6469c2cb31e18c67], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {
          static PyObject *t_DocComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocComparator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocComparator_of_(t_DocComparator *self, PyObject *args);
          static int t_DocComparator_init_(t_DocComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DocComparator_compare(t_DocComparator *self, PyObject *args);
          static PyObject *t_DocComparator_getLeafComparator(t_DocComparator *self, PyObject *args);
          static PyObject *t_DocComparator_setTopValue(t_DocComparator *self, PyObject *args);
          static PyObject *t_DocComparator_value(t_DocComparator *self, PyObject *args);
          static int t_DocComparator_set__topValue(t_DocComparator *self, PyObject *arg, void *data);
          static PyObject *t_DocComparator_get__parameters_(t_DocComparator *self, void *data);
          static PyGetSetDef t_DocComparator__fields_[] = {
            DECLARE_SET_FIELD(t_DocComparator, topValue),
            DECLARE_GET_FIELD(t_DocComparator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DocComparator__methods_[] = {
            DECLARE_METHOD(t_DocComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocComparator, of_, METH_VARARGS),
            DECLARE_METHOD(t_DocComparator, compare, METH_VARARGS),
            DECLARE_METHOD(t_DocComparator, getLeafComparator, METH_VARARGS),
            DECLARE_METHOD(t_DocComparator, setTopValue, METH_VARARGS),
            DECLARE_METHOD(t_DocComparator, value, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DocComparator)[] = {
            { Py_tp_methods, t_DocComparator__methods_ },
            { Py_tp_init, (void *) t_DocComparator_init_ },
            { Py_tp_getset, t_DocComparator__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DocComparator)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::FieldComparator),
            NULL
          };

          DEFINE_TYPE(DocComparator, t_DocComparator, DocComparator);
          PyObject *t_DocComparator::wrap_Object(const DocComparator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DocComparator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DocComparator *self = (t_DocComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_DocComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DocComparator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DocComparator *self = (t_DocComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_DocComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(DocComparator), &PY_TYPE_DEF(DocComparator), module, "DocComparator", 0);
          }

          void t_DocComparator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DocComparator), "class_", make_descriptor(DocComparator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DocComparator), "wrapfn_", make_descriptor(t_DocComparator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DocComparator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DocComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DocComparator::initializeClass, 1)))
              return NULL;
            return t_DocComparator::wrap_Object(DocComparator(((t_DocComparator *) arg)->object.this$));
          }
          static PyObject *t_DocComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DocComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DocComparator_of_(t_DocComparator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_DocComparator_init_(t_DocComparator *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jboolean a1;
            jint a2;
            DocComparator object((jobject) NULL);

            if (!parseArgs(args, "IZI", &a0, &a1, &a2))
            {
              INT_CALL(object = DocComparator(a0, a1, a2));
              self->object = object;
              self->parameters[0] = ::java::lang::PY_TYPE(Integer);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DocComparator_compare(t_DocComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(DocComparator), (PyObject *) self, "compare", args, 2);
          }

          static PyObject *t_DocComparator_getLeafComparator(t_DocComparator *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::LeafFieldComparator result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getLeafComparator(a0));
              return ::org::apache::lucene::search::t_LeafFieldComparator::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DocComparator), (PyObject *) self, "getLeafComparator", args, 2);
          }

          static PyObject *t_DocComparator_setTopValue(t_DocComparator *self, PyObject *args)
          {
            ::java::lang::Integer a0((jobject) NULL);

            if (!parseArgs(args, "O", ::java::lang::PY_TYPE(Integer), &a0))
            {
              OBJ_CALL(self->object.setTopValue(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(DocComparator), (PyObject *) self, "setTopValue", args, 2);
          }

          static PyObject *t_DocComparator_value(t_DocComparator *self, PyObject *args)
          {
            jint a0;
            ::java::lang::Integer result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.value(a0));
              return ::java::lang::t_Integer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DocComparator), (PyObject *) self, "value", args, 2);
          }
          static PyObject *t_DocComparator_get__parameters_(t_DocComparator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_DocComparator_set__topValue(t_DocComparator *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Integer value((jobject) NULL);
              if (!parseArg(arg, "O", ::java::lang::PY_TYPE(Integer), &value))
              {
                INT_CALL(self->object.setTopValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "topValue", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ExitableDirectoryReader$ExitingReaderException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ExitableDirectoryReader$ExitingReaderException::class$ = NULL;
        jmethodID *ExitableDirectoryReader$ExitingReaderException::mids$ = NULL;
        bool ExitableDirectoryReader$ExitingReaderException::live$ = false;

        jclass ExitableDirectoryReader$ExitingReaderException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ExitableDirectoryReader$ExitingReaderException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ExitableDirectoryReader$ExitingReaderException::ExitableDirectoryReader$ExitingReaderException(const ::java::lang::String & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ExitableDirectoryReader$ExitingReaderException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ExitableDirectoryReader$ExitingReaderException_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ExitableDirectoryReader$ExitingReaderException_of_(t_ExitableDirectoryReader$ExitingReaderException *self, PyObject *args);
        static int t_ExitableDirectoryReader$ExitingReaderException_init_(t_ExitableDirectoryReader$ExitingReaderException *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ExitableDirectoryReader$ExitingReaderException_get__parameters_(t_ExitableDirectoryReader$ExitingReaderException *self, void *data);
        static PyGetSetDef t_ExitableDirectoryReader$ExitingReaderException__fields_[] = {
          DECLARE_GET_FIELD(t_ExitableDirectoryReader$ExitingReaderException, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ExitableDirectoryReader$ExitingReaderException__methods_[] = {
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitingReaderException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitingReaderException, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitingReaderException, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ExitableDirectoryReader$ExitingReaderException)[] = {
          { Py_tp_methods, t_ExitableDirectoryReader$ExitingReaderException__methods_ },
          { Py_tp_init, (void *) t_ExitableDirectoryReader$ExitingReaderException_init_ },
          { Py_tp_getset, t_ExitableDirectoryReader$ExitingReaderException__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ExitableDirectoryReader$ExitingReaderException)[] = {
          &PY_TYPE_DEF(::java::lang::RuntimeException),
          NULL
        };

        DEFINE_TYPE(ExitableDirectoryReader$ExitingReaderException, t_ExitableDirectoryReader$ExitingReaderException, ExitableDirectoryReader$ExitingReaderException);
        PyObject *t_ExitableDirectoryReader$ExitingReaderException::wrap_Object(const ExitableDirectoryReader$ExitingReaderException& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ExitableDirectoryReader$ExitingReaderException::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ExitableDirectoryReader$ExitingReaderException *self = (t_ExitableDirectoryReader$ExitingReaderException *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ExitableDirectoryReader$ExitingReaderException::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ExitableDirectoryReader$ExitingReaderException::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ExitableDirectoryReader$ExitingReaderException *self = (t_ExitableDirectoryReader$ExitingReaderException *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ExitableDirectoryReader$ExitingReaderException::install(PyObject *module)
        {
          installType(&PY_TYPE(ExitableDirectoryReader$ExitingReaderException), &PY_TYPE_DEF(ExitableDirectoryReader$ExitingReaderException), module, "ExitableDirectoryReader$ExitingReaderException", 0);
        }

        void t_ExitableDirectoryReader$ExitingReaderException::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader$ExitingReaderException), "class_", make_descriptor(ExitableDirectoryReader$ExitingReaderException::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader$ExitingReaderException), "wrapfn_", make_descriptor(t_ExitableDirectoryReader$ExitingReaderException::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader$ExitingReaderException), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ExitableDirectoryReader$ExitingReaderException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ExitableDirectoryReader$ExitingReaderException::initializeClass, 1)))
            return NULL;
          return t_ExitableDirectoryReader$ExitingReaderException::wrap_Object(ExitableDirectoryReader$ExitingReaderException(((t_ExitableDirectoryReader$ExitingReaderException *) arg)->object.this$));
        }
        static PyObject *t_ExitableDirectoryReader$ExitingReaderException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ExitableDirectoryReader$ExitingReaderException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ExitableDirectoryReader$ExitingReaderException_of_(t_ExitableDirectoryReader$ExitingReaderException *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ExitableDirectoryReader$ExitingReaderException_init_(t_ExitableDirectoryReader$ExitingReaderException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ExitableDirectoryReader$ExitingReaderException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = ExitableDirectoryReader$ExitingReaderException(a0));
            self->object = object;
            self->parameters[0] = ::org::apache::lucene::index::PY_TYPE(LeafReader);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_ExitableDirectoryReader$ExitingReaderException_get__parameters_(t_ExitableDirectoryReader$ExitingReaderException *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blockterms/TermsIndexWriterBase$FieldWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/blockterms/TermsIndexWriterBase.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/TermStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {

          ::java::lang::Class *TermsIndexWriterBase$FieldWriter::class$ = NULL;
          jmethodID *TermsIndexWriterBase$FieldWriter::mids$ = NULL;
          bool TermsIndexWriterBase$FieldWriter::live$ = false;

          jclass TermsIndexWriterBase$FieldWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blockterms/TermsIndexWriterBase$FieldWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8e68a4bc15bece83] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/blockterms/TermsIndexWriterBase;)V");
              mids$[mid_add_b1bd8a4020ad07a2] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/codecs/TermStats;J)V");
              mids$[mid_checkIndexTerm_b105bc98075287ea] = env->getMethodID(cls, "checkIndexTerm", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/codecs/TermStats;)Z");
              mids$[mid_finish_9c778c9bce6694df] = env->getMethodID(cls, "finish", "(J)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TermsIndexWriterBase$FieldWriter::TermsIndexWriterBase$FieldWriter(const ::org::apache::lucene::codecs::blockterms::TermsIndexWriterBase & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8e68a4bc15bece83, a0.this$)) {}

          void TermsIndexWriterBase$FieldWriter::add(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::codecs::TermStats & a1, jlong a2) const
          {
            env->callVoidMethod(this$, mids$[mid_add_b1bd8a4020ad07a2], a0.this$, a1.this$, a2);
          }

          jboolean TermsIndexWriterBase$FieldWriter::checkIndexTerm(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::codecs::TermStats & a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_checkIndexTerm_b105bc98075287ea], a0.this$, a1.this$);
          }

          void TermsIndexWriterBase$FieldWriter::finish(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_finish_9c778c9bce6694df], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {
          static PyObject *t_TermsIndexWriterBase$FieldWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermsIndexWriterBase$FieldWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TermsIndexWriterBase$FieldWriter_init_(t_TermsIndexWriterBase$FieldWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TermsIndexWriterBase$FieldWriter_add(t_TermsIndexWriterBase$FieldWriter *self, PyObject *args);
          static PyObject *t_TermsIndexWriterBase$FieldWriter_checkIndexTerm(t_TermsIndexWriterBase$FieldWriter *self, PyObject *args);
          static PyObject *t_TermsIndexWriterBase$FieldWriter_finish(t_TermsIndexWriterBase$FieldWriter *self, PyObject *arg);

          static PyMethodDef t_TermsIndexWriterBase$FieldWriter__methods_[] = {
            DECLARE_METHOD(t_TermsIndexWriterBase$FieldWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermsIndexWriterBase$FieldWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermsIndexWriterBase$FieldWriter, add, METH_VARARGS),
            DECLARE_METHOD(t_TermsIndexWriterBase$FieldWriter, checkIndexTerm, METH_VARARGS),
            DECLARE_METHOD(t_TermsIndexWriterBase$FieldWriter, finish, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TermsIndexWriterBase$FieldWriter)[] = {
            { Py_tp_methods, t_TermsIndexWriterBase$FieldWriter__methods_ },
            { Py_tp_init, (void *) t_TermsIndexWriterBase$FieldWriter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TermsIndexWriterBase$FieldWriter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(TermsIndexWriterBase$FieldWriter, t_TermsIndexWriterBase$FieldWriter, TermsIndexWriterBase$FieldWriter);

          void t_TermsIndexWriterBase$FieldWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(TermsIndexWriterBase$FieldWriter), &PY_TYPE_DEF(TermsIndexWriterBase$FieldWriter), module, "TermsIndexWriterBase$FieldWriter", 0);
          }

          void t_TermsIndexWriterBase$FieldWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermsIndexWriterBase$FieldWriter), "class_", make_descriptor(TermsIndexWriterBase$FieldWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermsIndexWriterBase$FieldWriter), "wrapfn_", make_descriptor(t_TermsIndexWriterBase$FieldWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermsIndexWriterBase$FieldWriter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermsIndexWriterBase$FieldWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermsIndexWriterBase$FieldWriter::initializeClass, 1)))
              return NULL;
            return t_TermsIndexWriterBase$FieldWriter::wrap_Object(TermsIndexWriterBase$FieldWriter(((t_TermsIndexWriterBase$FieldWriter *) arg)->object.this$));
          }
          static PyObject *t_TermsIndexWriterBase$FieldWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermsIndexWriterBase$FieldWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TermsIndexWriterBase$FieldWriter_init_(t_TermsIndexWriterBase$FieldWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::codecs::blockterms::TermsIndexWriterBase a0((jobject) NULL);
            TermsIndexWriterBase$FieldWriter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::codecs::blockterms::TermsIndexWriterBase::initializeClass, &a0))
            {
              INT_CALL(object = TermsIndexWriterBase$FieldWriter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TermsIndexWriterBase$FieldWriter_add(t_TermsIndexWriterBase$FieldWriter *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::codecs::TermStats a1((jobject) NULL);
            jlong a2;

            if (!parseArgs(args, "kkJ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::codecs::TermStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.add(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_TermsIndexWriterBase$FieldWriter_checkIndexTerm(t_TermsIndexWriterBase$FieldWriter *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::codecs::TermStats a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::codecs::TermStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.checkIndexTerm(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "checkIndexTerm", args);
            return NULL;
          }

          static PyObject *t_TermsIndexWriterBase$FieldWriter_finish(t_TermsIndexWriterBase$FieldWriter *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.finish(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "finish", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/lang/Class.h"
#include "java/io/PrintStream.h"
#include "java/io/DataOutput.h"
#include "org/egothor/stemmer/Reduce.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "org/egothor/stemmer/Trie.h"
#include "org/egothor/stemmer/Row.h"
#include "java/io/DataInput.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Trie::class$ = NULL;
      jmethodID *Trie::mids$ = NULL;
      bool Trie::live$ = false;

      jclass Trie::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Trie");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_9d72768e8fdce2b7] = env->getMethodID(cls, "<init>", "(Z)V");
          mids$[mid_init$_e764c090f1e602d9] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
          mids$[mid_init$_9a72420e60d931d4] = env->getMethodID(cls, "<init>", "(ZILjava/util/List;Ljava/util/List;)V");
          mids$[mid_getAll_c02db7a0b6b95176] = env->getMethodID(cls, "getAll", "(Ljava/lang/CharSequence;)[Ljava/lang/CharSequence;");
          mids$[mid_getCells_9972fcc56b44e79d] = env->getMethodID(cls, "getCells", "()I");
          mids$[mid_getCellsPnt_9972fcc56b44e79d] = env->getMethodID(cls, "getCellsPnt", "()I");
          mids$[mid_getCellsVal_9972fcc56b44e79d] = env->getMethodID(cls, "getCellsVal", "()I");
          mids$[mid_getFully_7239fae546f0688a] = env->getMethodID(cls, "getFully", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_getLastOnPath_7239fae546f0688a] = env->getMethodID(cls, "getLastOnPath", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_printInfo_46845747c362f3cd] = env->getMethodID(cls, "printInfo", "(Ljava/io/PrintStream;Ljava/lang/CharSequence;)V");
          mids$[mid_reduce_6c0a4cfd21a57862] = env->getMethodID(cls, "reduce", "(Lorg/egothor/stemmer/Reduce;)Lorg/egothor/stemmer/Trie;");
          mids$[mid_store_d7f8caf61d54d699] = env->getMethodID(cls, "store", "(Ljava/io/DataOutput;)V");

          class$ = new ::java::lang::Class(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Trie::Trie(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9d72768e8fdce2b7, a0)) {}

      Trie::Trie(const ::java::io::DataInput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e764c090f1e602d9, a0.this$)) {}

      Trie::Trie(jboolean a0, jint a1, const ::java::util::List & a2, const ::java::util::List & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9a72420e60d931d4, a0, a1, a2.this$, a3.this$)) {}

      JArray< ::java::lang::CharSequence > Trie::getAll(const ::java::lang::CharSequence & a0) const
      {
        return JArray< ::java::lang::CharSequence >(env->callObjectMethod(this$, mids$[mid_getAll_c02db7a0b6b95176], a0.this$));
      }

      jint Trie::getCells() const
      {
        return env->callIntMethod(this$, mids$[mid_getCells_9972fcc56b44e79d]);
      }

      jint Trie::getCellsPnt() const
      {
        return env->callIntMethod(this$, mids$[mid_getCellsPnt_9972fcc56b44e79d]);
      }

      jint Trie::getCellsVal() const
      {
        return env->callIntMethod(this$, mids$[mid_getCellsVal_9972fcc56b44e79d]);
      }

      ::java::lang::CharSequence Trie::getFully(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getFully_7239fae546f0688a], a0.this$));
      }

      ::java::lang::CharSequence Trie::getLastOnPath(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getLastOnPath_7239fae546f0688a], a0.this$));
      }

      void Trie::printInfo(const ::java::io::PrintStream & a0, const ::java::lang::CharSequence & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_printInfo_46845747c362f3cd], a0.this$, a1.this$);
      }

      Trie Trie::reduce(const ::org::egothor::stemmer::Reduce & a0) const
      {
        return Trie(env->callObjectMethod(this$, mids$[mid_reduce_6c0a4cfd21a57862], a0.this$));
      }

      void Trie::store(const ::java::io::DataOutput & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_store_d7f8caf61d54d699], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Trie_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Trie_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Trie_init_(t_Trie *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Trie_getAll(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_getCells(t_Trie *self);
      static PyObject *t_Trie_getCellsPnt(t_Trie *self);
      static PyObject *t_Trie_getCellsVal(t_Trie *self);
      static PyObject *t_Trie_getFully(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_getLastOnPath(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_printInfo(t_Trie *self, PyObject *args);
      static PyObject *t_Trie_reduce(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_store(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_get__cells(t_Trie *self, void *data);
      static PyObject *t_Trie_get__cellsPnt(t_Trie *self, void *data);
      static PyObject *t_Trie_get__cellsVal(t_Trie *self, void *data);
      static PyGetSetDef t_Trie__fields_[] = {
        DECLARE_GET_FIELD(t_Trie, cells),
        DECLARE_GET_FIELD(t_Trie, cellsPnt),
        DECLARE_GET_FIELD(t_Trie, cellsVal),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_Trie__methods_[] = {
        DECLARE_METHOD(t_Trie, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Trie, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Trie, getAll, METH_O),
        DECLARE_METHOD(t_Trie, getCells, METH_NOARGS),
        DECLARE_METHOD(t_Trie, getCellsPnt, METH_NOARGS),
        DECLARE_METHOD(t_Trie, getCellsVal, METH_NOARGS),
        DECLARE_METHOD(t_Trie, getFully, METH_O),
        DECLARE_METHOD(t_Trie, getLastOnPath, METH_O),
        DECLARE_METHOD(t_Trie, printInfo, METH_VARARGS),
        DECLARE_METHOD(t_Trie, reduce, METH_O),
        DECLARE_METHOD(t_Trie, store, METH_O),
        { NULL, NULL, 0, NULL }
      };

      static PyType_Slot PY_TYPE_SLOTS(Trie)[] = {
        { Py_tp_methods, t_Trie__methods_ },
        { Py_tp_init, (void *) t_Trie_init_ },
        { Py_tp_getset, t_Trie__fields_ },
        { 0, NULL }
      };

      static PyType_Def *PY_TYPE_BASES(Trie)[] = {
        &PY_TYPE_DEF(::java::lang::Object),
        NULL
      };

      DEFINE_TYPE(Trie, t_Trie, Trie);

      void t_Trie::install(PyObject *module)
      {
        installType(&PY_TYPE(Trie), &PY_TYPE_DEF(Trie), module, "Trie", 0);
      }

      void t_Trie::initialize(PyObject *module)
      {
        PyObject_SetAttrString((PyObject *) PY_TYPE(Trie), "class_", make_descriptor(Trie::initializeClass, 1));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Trie), "wrapfn_", make_descriptor(t_Trie::wrap_jobject));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Trie), "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Trie_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Trie::initializeClass, 1)))
          return NULL;
        return t_Trie::wrap_Object(Trie(((t_Trie *) arg)->object.this$));
      }
      static PyObject *t_Trie_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Trie::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Trie_init_(t_Trie *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            jboolean a0;
            Trie object((jobject) NULL);

            if (!parseArgs(args, "Z", &a0))
            {
              INT_CALL(object = Trie(a0));
              self->object = object;
              break;
            }
          }
          {
            ::java::io::DataInput a0((jobject) NULL);
            Trie object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = Trie(a0));
              self->object = object;
              break;
            }
          }
          goto err;
         case 4:
          {
            jboolean a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;
            ::java::util::List a3((jobject) NULL);
            PyTypeObject **p3;
            Trie object((jobject) NULL);

            if (!parseArgs(args, "ZIKK", ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_, &a3, &p3, ::java::util::t_List::parameters_))
            {
              INT_CALL(object = Trie(a0, a1, a2, a3));
              self->object = object;
              break;
            }
          }
         default:
         err:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Trie_getAll(t_Trie *self, PyObject *arg)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        JArray< ::java::lang::CharSequence > result((jobject) NULL);

        if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getAll(a0));
          return JArray<jobject>(result.this$).wrap(::java::lang::t_CharSequence::wrap_jobject);
        }

        PyErr_SetArgsError((PyObject *) self, "getAll", arg);
        return NULL;
      }

      static PyObject *t_Trie_getCells(t_Trie *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCells());
        return PyLong_FromLong((long) result);
      }

      static PyObject *t_Trie_getCellsPnt(t_Trie *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCellsPnt());
        return PyLong_FromLong((long) result);
      }

      static PyObject *t_Trie_getCellsVal(t_Trie *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCellsVal());
        return PyLong_FromLong((long) result);
      }

      static PyObject *t_Trie_getFully(t_Trie *self, PyObject *arg)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getFully(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "getFully", arg);
        return NULL;
      }

      static PyObject *t_Trie_getLastOnPath(t_Trie *self, PyObject *arg)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getLastOnPath(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "getLastOnPath", arg);
        return NULL;
      }

      static PyObject *t_Trie_printInfo(t_Trie *self, PyObject *args)
      {
        ::java::io::PrintStream a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "kO", ::java::io::PrintStream::initializeClass, ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(self->object.printInfo(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "printInfo", args);
        return NULL;
      }

      static PyObject *t_Trie_reduce(t_Trie *self, PyObject *arg)
      {
        ::org::egothor::stemmer::Reduce a0((jobject) NULL);
        Trie result((jobject) NULL);

        if (!parseArg(arg, "k", ::org::egothor::stemmer::Reduce::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.reduce(a0));
          return t_Trie::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "reduce", arg);
        return NULL;
      }

      static PyObject *t_Trie_store(t_Trie *self, PyObject *arg)
      {
        ::java::io::DataOutput a0((jobject) NULL);

        if (!parseArg(arg, "k", ::java::io::DataOutput::initializeClass, &a0))
        {
          OBJ_CALL(self->object.store(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "store", arg);
        return NULL;
      }

      static PyObject *t_Trie_get__cells(t_Trie *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCells());
        return PyLong_FromLong((long) value);
      }

      static PyObject *t_Trie_get__cellsPnt(t_Trie *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCellsPnt());
        return PyLong_FromLong((long) value);
      }

      static PyObject *t_Trie_get__cellsVal(t_Trie *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCellsVal());
        return PyLong_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/DFRSimilarity.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/Normalization.h"
#include "org/apache/lucene/search/similarities/BasicModel.h"
#include "org/apache/lucene/search/similarities/AfterEffect.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *DFRSimilarity::class$ = NULL;
          jmethodID *DFRSimilarity::mids$ = NULL;
          bool DFRSimilarity::live$ = false;

          jclass DFRSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/DFRSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e7a42c4b30fe58ca] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/BasicModel;Lorg/apache/lucene/search/similarities/AfterEffect;Lorg/apache/lucene/search/similarities/Normalization;)V");
              mids$[mid_getAfterEffect_e807af5453faacc2] = env->getMethodID(cls, "getAfterEffect", "()Lorg/apache/lucene/search/similarities/AfterEffect;");
              mids$[mid_getBasicModel_30af8e1889f30d21] = env->getMethodID(cls, "getBasicModel", "()Lorg/apache/lucene/search/similarities/BasicModel;");
              mids$[mid_getNormalization_c47c4a90a93ef116] = env->getMethodID(cls, "getNormalization", "()Lorg/apache/lucene/search/similarities/Normalization;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_score_761ab1c432346fd0] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_explain_f9756f2482a92b24] = env->getMethodID(cls, "explain", "(Ljava/util/List;Lorg/apache/lucene/search/similarities/BasicStats;DD)V");
              mids$[mid_explain_a84367e35a1ef83b] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;Lorg/apache/lucene/search/Explanation;D)Lorg/apache/lucene/search/Explanation;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DFRSimilarity::DFRSimilarity(const ::org::apache::lucene::search::similarities::BasicModel & a0, const ::org::apache::lucene::search::similarities::AfterEffect & a1, const ::org::apache::lucene::search::similarities::Normalization & a2) : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_e7a42c4b30fe58ca, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::similarities::AfterEffect DFRSimilarity::getAfterEffect() const
          {
            return ::org::apache::lucene::search::similarities::AfterEffect(env->callObjectMethod(this$, mids$[mid_getAfterEffect_e807af5453faacc2]));
          }

          ::org::apache::lucene::search::similarities::BasicModel DFRSimilarity::getBasicModel() const
          {
            return ::org::apache::lucene::search::similarities::BasicModel(env->callObjectMethod(this$, mids$[mid_getBasicModel_30af8e1889f30d21]));
          }

          ::org::apache::lucene::search::similarities::Normalization DFRSimilarity::getNormalization() const
          {
            return ::org::apache::lucene::search::similarities::Normalization(env->callObjectMethod(this$, mids$[mid_getNormalization_c47c4a90a93ef116]));
          }

          ::java::lang::String DFRSimilarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_DFRSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DFRSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DFRSimilarity_init_(t_DFRSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DFRSimilarity_getAfterEffect(t_DFRSimilarity *self);
          static PyObject *t_DFRSimilarity_getBasicModel(t_DFRSimilarity *self);
          static PyObject *t_DFRSimilarity_getNormalization(t_DFRSimilarity *self);
          static PyObject *t_DFRSimilarity_toString(t_DFRSimilarity *self, PyObject *args);
          static PyObject *t_DFRSimilarity_get__afterEffect(t_DFRSimilarity *self, void *data);
          static PyObject *t_DFRSimilarity_get__basicModel(t_DFRSimilarity *self, void *data);
          static PyObject *t_DFRSimilarity_get__normalization(t_DFRSimilarity *self, void *data);
          static PyGetSetDef t_DFRSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_DFRSimilarity, afterEffect),
            DECLARE_GET_FIELD(t_DFRSimilarity, basicModel),
            DECLARE_GET_FIELD(t_DFRSimilarity, normalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DFRSimilarity__methods_[] = {
            DECLARE_METHOD(t_DFRSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DFRSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DFRSimilarity, getAfterEffect, METH_NOARGS),
            DECLARE_METHOD(t_DFRSimilarity, getBasicModel, METH_NOARGS),
            DECLARE_METHOD(t_DFRSimilarity, getNormalization, METH_NOARGS),
            DECLARE_METHOD(t_DFRSimilarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DFRSimilarity)[] = {
            { Py_tp_methods, t_DFRSimilarity__methods_ },
            { Py_tp_init, (void *) t_DFRSimilarity_init_ },
            { Py_tp_getset, t_DFRSimilarity__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DFRSimilarity)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::SimilarityBase),
            NULL
          };

          DEFINE_TYPE(DFRSimilarity, t_DFRSimilarity, DFRSimilarity);

          void t_DFRSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(DFRSimilarity), &PY_TYPE_DEF(DFRSimilarity), module, "DFRSimilarity", 0);
          }

          void t_DFRSimilarity::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DFRSimilarity), "class_", make_descriptor(DFRSimilarity::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DFRSimilarity), "wrapfn_", make_descriptor(t_DFRSimilarity::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DFRSimilarity), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DFRSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DFRSimilarity::initializeClass, 1)))
              return NULL;
            return t_DFRSimilarity::wrap_Object(DFRSimilarity(((t_DFRSimilarity *) arg)->object.this$));
          }
          static PyObject *t_DFRSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DFRSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DFRSimilarity_init_(t_DFRSimilarity *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::similarities::BasicModel a0((jobject) NULL);
            ::org::apache::lucene::search::similarities::AfterEffect a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Normalization a2((jobject) NULL);
            DFRSimilarity object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::search::similarities::BasicModel::initializeClass, ::org::apache::lucene::search::similarities::AfterEffect::initializeClass, ::org::apache::lucene::search::similarities::Normalization::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = DFRSimilarity(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DFRSimilarity_getAfterEffect(t_DFRSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::AfterEffect result((jobject) NULL);
            OBJ_CALL(result = self->object.getAfterEffect());
            return ::org::apache::lucene::search::similarities::t_AfterEffect::wrap_Object(result);
          }

          static PyObject *t_DFRSimilarity_getBasicModel(t_DFRSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::BasicModel result((jobject) NULL);
            OBJ_CALL(result = self->object.getBasicModel());
            return ::org::apache::lucene::search::similarities::t_BasicModel::wrap_Object(result);
          }

          static PyObject *t_DFRSimilarity_getNormalization(t_DFRSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::Normalization result((jobject) NULL);
            OBJ_CALL(result = self->object.getNormalization());
            return ::org::apache::lucene::search::similarities::t_Normalization::wrap_Object(result);
          }

          static PyObject *t_DFRSimilarity_toString(t_DFRSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(DFRSimilarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_DFRSimilarity_get__afterEffect(t_DFRSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::AfterEffect value((jobject) NULL);
            OBJ_CALL(value = self->object.getAfterEffect());
            return ::org::apache::lucene::search::similarities::t_AfterEffect::wrap_Object(value);
          }

          static PyObject *t_DFRSimilarity_get__basicModel(t_DFRSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::BasicModel value((jobject) NULL);
            OBJ_CALL(value = self->object.getBasicModel());
            return ::org::apache::lucene::search::similarities::t_BasicModel::wrap_Object(value);
          }

          static PyObject *t_DFRSimilarity_get__normalization(t_DFRSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::Normalization value((jobject) NULL);
            OBJ_CALL(value = self->object.getNormalization());
            return ::org::apache::lucene::search::similarities::t_Normalization::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/QueryBuilder$TermAndBoost.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *QueryBuilder$TermAndBoost::class$ = NULL;
        jmethodID *QueryBuilder$TermAndBoost::mids$ = NULL;
        jfieldID *QueryBuilder$TermAndBoost::fids$ = NULL;
        bool QueryBuilder$TermAndBoost::live$ = false;

        jclass QueryBuilder$TermAndBoost::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/QueryBuilder$TermAndBoost");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cbd6f15a00eb0d92] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;F)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_boost] = env->getFieldID(cls, "boost", "F");
            fids$[fid_term] = env->getFieldID(cls, "term", "Lorg/apache/lucene/index/Term;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        QueryBuilder$TermAndBoost::QueryBuilder$TermAndBoost(const ::org::apache::lucene::index::Term & a0, jfloat a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cbd6f15a00eb0d92, a0.this$, a1)) {}

        jfloat QueryBuilder$TermAndBoost::_get_boost() const
        {
          return env->getFloatField(this$, fids$[fid_boost]);
        }

        ::org::apache::lucene::index::Term QueryBuilder$TermAndBoost::_get_term() const
        {
          return ::org::apache::lucene::index::Term(env->getObjectField(this$, fids$[fid_term]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_QueryBuilder$TermAndBoost_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryBuilder$TermAndBoost_instance_(PyTypeObject *type, PyObject *arg);
        static int t_QueryBuilder$TermAndBoost_init_(t_QueryBuilder$TermAndBoost *self, PyObject *args, PyObject *kwds);
        static PyObject *t_QueryBuilder$TermAndBoost_get__boost(t_QueryBuilder$TermAndBoost *self, void *data);
        static PyObject *t_QueryBuilder$TermAndBoost_get__term(t_QueryBuilder$TermAndBoost *self, void *data);

        static PyGetSetDef t_QueryBuilder$TermAndBoost__fields_[] = {
          DECLARE_GET_FIELD(t_QueryBuilder$TermAndBoost, boost),
          DECLARE_GET_FIELD(t_QueryBuilder$TermAndBoost, term),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_QueryBuilder$TermAndBoost__methods_[] = {
          DECLARE_METHOD(t_QueryBuilder$TermAndBoost, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryBuilder$TermAndBoost, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(QueryBuilder$TermAndBoost)[] = {
          { Py_tp_methods, t_QueryBuilder$TermAndBoost__methods_ },
          { Py_tp_init, (void *) t_QueryBuilder$TermAndBoost_init_ },
          { Py_tp_getset, t_QueryBuilder$TermAndBoost__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(QueryBuilder$TermAndBoost)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(QueryBuilder$TermAndBoost, t_QueryBuilder$TermAndBoost, QueryBuilder$TermAndBoost);

        void t_QueryBuilder$TermAndBoost::install(PyObject *module)
        {
          installType(&PY_TYPE(QueryBuilder$TermAndBoost), &PY_TYPE_DEF(QueryBuilder$TermAndBoost), module, "QueryBuilder$TermAndBoost", 0);
        }

        void t_QueryBuilder$TermAndBoost::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryBuilder$TermAndBoost), "class_", make_descriptor(QueryBuilder$TermAndBoost::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryBuilder$TermAndBoost), "wrapfn_", make_descriptor(t_QueryBuilder$TermAndBoost::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryBuilder$TermAndBoost), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_QueryBuilder$TermAndBoost_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, QueryBuilder$TermAndBoost::initializeClass, 1)))
            return NULL;
          return t_QueryBuilder$TermAndBoost::wrap_Object(QueryBuilder$TermAndBoost(((t_QueryBuilder$TermAndBoost *) arg)->object.this$));
        }
        static PyObject *t_QueryBuilder$TermAndBoost_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, QueryBuilder$TermAndBoost::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_QueryBuilder$TermAndBoost_init_(t_QueryBuilder$TermAndBoost *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jfloat a1;
          QueryBuilder$TermAndBoost object((jobject) NULL);

          if (!parseArgs(args, "kF", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
          {
            INT_CALL(object = QueryBuilder$TermAndBoost(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_QueryBuilder$TermAndBoost_get__boost(t_QueryBuilder$TermAndBoost *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_boost());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_QueryBuilder$TermAndBoost_get__term(t_QueryBuilder$TermAndBoost *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object._get_term());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/Bounds.h"
#include "org/apache/lucene/spatial3d/geom/Bounds.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/Plane.h"
#include "org/apache/lucene/spatial3d/geom/Membership.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *Bounds::class$ = NULL;
          jmethodID *Bounds::mids$ = NULL;
          bool Bounds::live$ = false;

          jclass Bounds::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/Bounds");

              mids$ = new jmethodID[max_mid];
              mids$[mid_addHorizontalPlane_de702abaccff8809] = env->getMethodID(cls, "addHorizontalPlane", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DLorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addIntersection_d5756c2a9618cc36] = env->getMethodID(cls, "addIntersection", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addPlane_2c04f33e2d449d53] = env->getMethodID(cls, "addPlane", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addPoint_deac40038f0b88f4] = env->getMethodID(cls, "addPoint", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addVerticalPlane_de702abaccff8809] = env->getMethodID(cls, "addVerticalPlane", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DLorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addXValue_deac40038f0b88f4] = env->getMethodID(cls, "addXValue", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addYValue_deac40038f0b88f4] = env->getMethodID(cls, "addYValue", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_addZValue_deac40038f0b88f4] = env->getMethodID(cls, "addZValue", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_isWide_6f0a6687d3a83671] = env->getMethodID(cls, "isWide", "()Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_noBottomLatitudeBound_6f0a6687d3a83671] = env->getMethodID(cls, "noBottomLatitudeBound", "()Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_noBound_650181d6a64cb6dd] = env->getMethodID(cls, "noBound", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;)Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_noLongitudeBound_6f0a6687d3a83671] = env->getMethodID(cls, "noLongitudeBound", "()Lorg/apache/lucene/spatial3d/geom/Bounds;");
              mids$[mid_noTopLatitudeBound_6f0a6687d3a83671] = env->getMethodID(cls, "noTopLatitudeBound", "()Lorg/apache/lucene/spatial3d/geom/Bounds;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Bounds Bounds::addHorizontalPlane(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, const ::org::apache::lucene::spatial3d::geom::Plane & a2, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a3) const
          {
            return Bounds(env->callObjectMethod(this$, mids$[mid_addHorizontalPlane_de702abaccff8809], a0.this$, a1, a2.this$, a3.this$));
          }

          Bounds Bounds::addIntersection(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::Plane & a1, const ::org::apache::lucene::spatial3d::geom::Plane & a2, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a3) const
          {
            return Bounds(env->callObjectMethod(this$, mids$[mid_addIntersection_d5756c2a9618cc36], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          Bounds Bounds::addPlane(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::Plane & a1, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a2) const
          {
            return Bounds(env->callObjectMethod(this$, mids$[mid_addPlane_2c04f33e2d449d53], a0.this$, a1.this$, a2.this$));
          }

          Bounds Bounds::addPoint(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0) const
          {
            return Bounds(env->callObjectMethod(this$, mids$[mid_addPoint_deac40038f0b88f4], a0.this$));
          }

          Bounds Bounds::addVerticalPlane(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, const ::org::apache::lucene::spatial3d::geom::Plane & a2, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a3) const
          {
            return Bounds(env->callObjectMethod(this$, mids$[mid_addVerticalPlane_de702abaccff8809], a0.this$, a1, a2.this$, a3.this$));
          }

          Bounds Bounds::addXValue(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0) const
          {
            return Bounds(env->callObjectMethod(this$, mids$[mid_addXValue_deac40038f0b88f4], a0.this$));
          }

          Bounds Bounds::addYValue(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0) const
          {
            return Bounds(env->callObjectMethod(this$, mids$[mid_addYValue_deac40038f0b88f4], a0.this$));
          }

          Bounds Bounds::addZValue(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0) const
          {
            return Bounds(env->callObjectMethod(this$, mids$[mid_addZValue_deac40038f0b88f4], a0.this$));
          }

          Bounds Bounds::isWide() const
          {
            return Bounds(env->callObjectMethod(this$, mids$[mid_isWide_6f0a6687d3a83671]));
          }

          Bounds Bounds::noBottomLatitudeBound() const
          {
            return Bounds(env->callObjectMethod(this$, mids$[mid_noBottomLatitudeBound_6f0a6687d3a83671]));
          }

          Bounds Bounds::noBound(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0) const
          {
            return Bounds(env->callObjectMethod(this$, mids$[mid_noBound_650181d6a64cb6dd], a0.this$));
          }

          Bounds Bounds::noLongitudeBound() const
          {
            return Bounds(env->callObjectMethod(this$, mids$[mid_noLongitudeBound_6f0a6687d3a83671]));
          }

          Bounds Bounds::noTopLatitudeBound() const
          {
            return Bounds(env->callObjectMethod(this$, mids$[mid_noTopLatitudeBound_6f0a6687d3a83671]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_Bounds_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Bounds_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Bounds_addHorizontalPlane(t_Bounds *self, PyObject *args);
          static PyObject *t_Bounds_addIntersection(t_Bounds *self, PyObject *args);
          static PyObject *t_Bounds_addPlane(t_Bounds *self, PyObject *args);
          static PyObject *t_Bounds_addPoint(t_Bounds *self, PyObject *arg);
          static PyObject *t_Bounds_addVerticalPlane(t_Bounds *self, PyObject *args);
          static PyObject *t_Bounds_addXValue(t_Bounds *self, PyObject *arg);
          static PyObject *t_Bounds_addYValue(t_Bounds *self, PyObject *arg);
          static PyObject *t_Bounds_addZValue(t_Bounds *self, PyObject *arg);
          static PyObject *t_Bounds_isWide(t_Bounds *self);
          static PyObject *t_Bounds_noBottomLatitudeBound(t_Bounds *self);
          static PyObject *t_Bounds_noBound(t_Bounds *self, PyObject *arg);
          static PyObject *t_Bounds_noLongitudeBound(t_Bounds *self);
          static PyObject *t_Bounds_noTopLatitudeBound(t_Bounds *self);
          static PyObject *t_Bounds_get__wide(t_Bounds *self, void *data);
          static PyGetSetDef t_Bounds__fields_[] = {
            DECLARE_GET_FIELD(t_Bounds, wide),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Bounds__methods_[] = {
            DECLARE_METHOD(t_Bounds, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Bounds, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Bounds, addHorizontalPlane, METH_VARARGS),
            DECLARE_METHOD(t_Bounds, addIntersection, METH_VARARGS),
            DECLARE_METHOD(t_Bounds, addPlane, METH_VARARGS),
            DECLARE_METHOD(t_Bounds, addPoint, METH_O),
            DECLARE_METHOD(t_Bounds, addVerticalPlane, METH_VARARGS),
            DECLARE_METHOD(t_Bounds, addXValue, METH_O),
            DECLARE_METHOD(t_Bounds, addYValue, METH_O),
            DECLARE_METHOD(t_Bounds, addZValue, METH_O),
            DECLARE_METHOD(t_Bounds, isWide, METH_NOARGS),
            DECLARE_METHOD(t_Bounds, noBottomLatitudeBound, METH_NOARGS),
            DECLARE_METHOD(t_Bounds, noBound, METH_O),
            DECLARE_METHOD(t_Bounds, noLongitudeBound, METH_NOARGS),
            DECLARE_METHOD(t_Bounds, noTopLatitudeBound, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Bounds)[] = {
            { Py_tp_methods, t_Bounds__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_Bounds__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Bounds)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Bounds, t_Bounds, Bounds);

          void t_Bounds::install(PyObject *module)
          {
            installType(&PY_TYPE(Bounds), &PY_TYPE_DEF(Bounds), module, "Bounds", 0);
          }

          void t_Bounds::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Bounds), "class_", make_descriptor(Bounds::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Bounds), "wrapfn_", make_descriptor(t_Bounds::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Bounds), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Bounds_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Bounds::initializeClass, 1)))
              return NULL;
            return t_Bounds::wrap_Object(Bounds(((t_Bounds *) arg)->object.this$));
          }
          static PyObject *t_Bounds_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Bounds::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Bounds_addHorizontalPlane(t_Bounds *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            ::org::apache::lucene::spatial3d::geom::Plane a2((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a3((jobject) NULL);
            Bounds result((jobject) NULL);

            if (!parseArgs(args, "kDk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.addHorizontalPlane(a0, a1, a2, a3));
              return t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addHorizontalPlane", args);
            return NULL;
          }

          static PyObject *t_Bounds_addIntersection(t_Bounds *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Plane a1((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Plane a2((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a3((jobject) NULL);
            Bounds result((jobject) NULL);

            if (!parseArgs(args, "kkk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.addIntersection(a0, a1, a2, a3));
              return t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addIntersection", args);
            return NULL;
          }

          static PyObject *t_Bounds_addPlane(t_Bounds *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Plane a1((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a2((jobject) NULL);
            Bounds result((jobject) NULL);

            if (!parseArgs(args, "kk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.addPlane(a0, a1, a2));
              return t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addPlane", args);
            return NULL;
          }

          static PyObject *t_Bounds_addPoint(t_Bounds *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
            Bounds result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.addPoint(a0));
              return t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addPoint", arg);
            return NULL;
          }

          static PyObject *t_Bounds_addVerticalPlane(t_Bounds *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            ::org::apache::lucene::spatial3d::geom::Plane a2((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a3((jobject) NULL);
            Bounds result((jobject) NULL);

            if (!parseArgs(args, "kDk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.addVerticalPlane(a0, a1, a2, a3));
              return t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addVerticalPlane", args);
            return NULL;
          }

          static PyObject *t_Bounds_addXValue(t_Bounds *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
            Bounds result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.addXValue(a0));
              return t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addXValue", arg);
            return NULL;
          }

          static PyObject *t_Bounds_addYValue(t_Bounds *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
            Bounds result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.addYValue(a0));
              return t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addYValue", arg);
            return NULL;
          }

          static PyObject *t_Bounds_addZValue(t_Bounds *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
            Bounds result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.addZValue(a0));
              return t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addZValue", arg);
            return NULL;
          }

          static PyObject *t_Bounds_isWide(t_Bounds *self)
          {
            Bounds result((jobject) NULL);
            OBJ_CALL(result = self->object.isWide());
            return t_Bounds::wrap_Object(result);
          }

          static PyObject *t_Bounds_noBottomLatitudeBound(t_Bounds *self)
          {
            Bounds result((jobject) NULL);
            OBJ_CALL(result = self->object.noBottomLatitudeBound());
            return t_Bounds::wrap_Object(result);
          }

          static PyObject *t_Bounds_noBound(t_Bounds *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            Bounds result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.noBound(a0));
              return t_Bounds::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "noBound", arg);
            return NULL;
          }

          static PyObject *t_Bounds_noLongitudeBound(t_Bounds *self)
          {
            Bounds result((jobject) NULL);
            OBJ_CALL(result = self->object.noLongitudeBound());
            return t_Bounds::wrap_Object(result);
          }

          static PyObject *t_Bounds_noTopLatitudeBound(t_Bounds *self)
          {
            Bounds result((jobject) NULL);
            OBJ_CALL(result = self->object.noTopLatitudeBound());
            return t_Bounds::wrap_Object(result);
          }

          static PyObject *t_Bounds_get__wide(t_Bounds *self, void *data)
          {
            Bounds value((jobject) NULL);
            OBJ_CALL(value = self->object.isWide());
            return t_Bounds::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/FSTDictionary.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/uniformsplit/IndexDictionary.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockEncoder.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *FSTDictionary::class$ = NULL;
          jmethodID *FSTDictionary::mids$ = NULL;
          bool FSTDictionary::live$ = false;

          jclass FSTDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/FSTDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_write_3925b6cced37a499] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/codecs/uniformsplit/BlockEncoder;)V");
              mids$[mid_read_30c0fdc97b45c420] = env->getStaticMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/codecs/uniformsplit/BlockDecoder;Z)Lorg/apache/lucene/codecs/uniformsplit/FSTDictionary;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jlong FSTDictionary::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          void FSTDictionary::write(const ::org::apache::lucene::store::DataOutput & a0, const ::org::apache::lucene::codecs::uniformsplit::BlockEncoder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_3925b6cced37a499], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/codecs/uniformsplit/FSTDictionary$Builder.h"
#include "org/apache/lucene/codecs/uniformsplit/FSTDictionary$BrowserSupplier.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_FSTDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FSTDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FSTDictionary_ramBytesUsed(t_FSTDictionary *self);
          static PyObject *t_FSTDictionary_write(t_FSTDictionary *self, PyObject *args);

          static PyMethodDef t_FSTDictionary__methods_[] = {
            DECLARE_METHOD(t_FSTDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTDictionary, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_FSTDictionary, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FSTDictionary)[] = {
            { Py_tp_methods, t_FSTDictionary__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FSTDictionary)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FSTDictionary, t_FSTDictionary, FSTDictionary);

          void t_FSTDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(FSTDictionary), &PY_TYPE_DEF(FSTDictionary), module, "FSTDictionary", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTDictionary), "Builder", make_descriptor(&PY_TYPE_DEF(FSTDictionary$Builder)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTDictionary), "BrowserSupplier", make_descriptor(&PY_TYPE_DEF(FSTDictionary$BrowserSupplier)));
          }

          void t_FSTDictionary::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTDictionary), "class_", make_descriptor(FSTDictionary::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTDictionary), "wrapfn_", make_descriptor(t_FSTDictionary::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTDictionary), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FSTDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FSTDictionary::initializeClass, 1)))
              return NULL;
            return t_FSTDictionary::wrap_Object(FSTDictionary(((t_FSTDictionary *) arg)->object.this$));
          }
          static PyObject *t_FSTDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FSTDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FSTDictionary_ramBytesUsed(t_FSTDictionary *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FSTDictionary_write(t_FSTDictionary *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            ::org::apache::lucene::codecs::uniformsplit::BlockEncoder a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockEncoder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "write", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {

            ::java::lang::Class *CommonQueryParserConfiguration::class$ = NULL;
            jmethodID *CommonQueryParserConfiguration::mids$ = NULL;
            bool CommonQueryParserConfiguration::live$ = false;

            jclass CommonQueryParserConfiguration::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getAllowLeadingWildcard_8454bd5aa23fd11e] = env->getMethodID(cls, "getAllowLeadingWildcard", "()Z");
                mids$[mid_getAnalyzer_75a99b097bd64493] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
                mids$[mid_getEnablePositionIncrements_8454bd5aa23fd11e] = env->getMethodID(cls, "getEnablePositionIncrements", "()Z");
                mids$[mid_getFuzzyMinSim_58aec2b64dff50c8] = env->getMethodID(cls, "getFuzzyMinSim", "()F");
                mids$[mid_getFuzzyPrefixLength_9972fcc56b44e79d] = env->getMethodID(cls, "getFuzzyPrefixLength", "()I");
                mids$[mid_getLocale_bd9770023d5e622d] = env->getMethodID(cls, "getLocale", "()Ljava/util/Locale;");
                mids$[mid_getMultiTermRewriteMethod_aed18a8b23332eb7] = env->getMethodID(cls, "getMultiTermRewriteMethod", "()Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;");
                mids$[mid_getPhraseSlop_9972fcc56b44e79d] = env->getMethodID(cls, "getPhraseSlop", "()I");
                mids$[mid_getTimeZone_a00e8b2cc21b09d1] = env->getMethodID(cls, "getTimeZone", "()Ljava/util/TimeZone;");
                mids$[mid_setAllowLeadingWildcard_9d72768e8fdce2b7] = env->getMethodID(cls, "setAllowLeadingWildcard", "(Z)V");
                mids$[mid_setDateResolution_51afa6f891f6b9d8] = env->getMethodID(cls, "setDateResolution", "(Lorg/apache/lucene/document/DateTools$Resolution;)V");
                mids$[mid_setEnablePositionIncrements_9d72768e8fdce2b7] = env->getMethodID(cls, "setEnablePositionIncrements", "(Z)V");
                mids$[mid_setFuzzyMinSim_8e1d952dd65cdc3a] = env->getMethodID(cls, "setFuzzyMinSim", "(F)V");
                mids$[mid_setFuzzyPrefixLength_040c4cd0390c5aff] = env->getMethodID(cls, "setFuzzyPrefixLength", "(I)V");
                mids$[mid_setLocale_8b005052a37adc8a] = env->getMethodID(cls, "setLocale", "(Ljava/util/Locale;)V");
                mids$[mid_setMultiTermRewriteMethod_4bd3a81cb6936220] = env->getMethodID(cls, "setMultiTermRewriteMethod", "(Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;)V");
                mids$[mid_setPhraseSlop_040c4cd0390c5aff] = env->getMethodID(cls, "setPhraseSlop", "(I)V");
                mids$[mid_setTimeZone_62cba443b119095c] = env->getMethodID(cls, "setTimeZone", "(Ljava/util/TimeZone;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jboolean CommonQueryParserConfiguration::getAllowLeadingWildcard() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getAllowLeadingWildcard_8454bd5aa23fd11e]);
            }

            ::org::apache::lucene::analysis::Analyzer CommonQueryParserConfiguration::getAnalyzer() const
            {
              return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_75a99b097bd64493]));
            }

            jboolean CommonQueryParserConfiguration::getEnablePositionIncrements() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getEnablePositionIncrements_8454bd5aa23fd11e]);
            }

            jfloat CommonQueryParserConfiguration::getFuzzyMinSim() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFuzzyMinSim_58aec2b64dff50c8]);
            }

            jint CommonQueryParserConfiguration::getFuzzyPrefixLength() const
            {
              return env->callIntMethod(this$, mids$[mid_getFuzzyPrefixLength_9972fcc56b44e79d]);
            }

            ::java::util::Locale CommonQueryParserConfiguration::getLocale() const
            {
              return ::java::util::Locale(env->callObjectMethod(this$, mids$[mid_getLocale_bd9770023d5e622d]));
            }

            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod CommonQueryParserConfiguration::getMultiTermRewriteMethod() const
            {
              return ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->callObjectMethod(this$, mids$[mid_getMultiTermRewriteMethod_aed18a8b23332eb7]));
            }

            jint CommonQueryParserConfiguration::getPhraseSlop() const
            {
              return env->callIntMethod(this$, mids$[mid_getPhraseSlop_9972fcc56b44e79d]);
            }

            ::java::util::TimeZone CommonQueryParserConfiguration::getTimeZone() const
            {
              return ::java::util::TimeZone(env->callObjectMethod(this$, mids$[mid_getTimeZone_a00e8b2cc21b09d1]));
            }

            void CommonQueryParserConfiguration::setAllowLeadingWildcard(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setAllowLeadingWildcard_9d72768e8fdce2b7], a0);
            }

            void CommonQueryParserConfiguration::setDateResolution(const ::org::apache::lucene::document::DateTools$Resolution & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDateResolution_51afa6f891f6b9d8], a0.this$);
            }

            void CommonQueryParserConfiguration::setEnablePositionIncrements(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setEnablePositionIncrements_9d72768e8fdce2b7], a0);
            }

            void CommonQueryParserConfiguration::setFuzzyMinSim(jfloat a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFuzzyMinSim_8e1d952dd65cdc3a], a0);
            }

            void CommonQueryParserConfiguration::setFuzzyPrefixLength(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFuzzyPrefixLength_040c4cd0390c5aff], a0);
            }

            void CommonQueryParserConfiguration::setLocale(const ::java::util::Locale & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setLocale_8b005052a37adc8a], a0.this$);
            }

            void CommonQueryParserConfiguration::setMultiTermRewriteMethod(const ::org::apache::lucene::search::MultiTermQuery$RewriteMethod & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setMultiTermRewriteMethod_4bd3a81cb6936220], a0.this$);
            }

            void CommonQueryParserConfiguration::setPhraseSlop(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setPhraseSlop_040c4cd0390c5aff], a0);
            }

            void CommonQueryParserConfiguration::setTimeZone(const ::java::util::TimeZone & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setTimeZone_62cba443b119095c], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            static PyObject *t_CommonQueryParserConfiguration_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_getAllowLeadingWildcard(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getAnalyzer(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getEnablePositionIncrements(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getFuzzyMinSim(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getFuzzyPrefixLength(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getLocale(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getMultiTermRewriteMethod(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getPhraseSlop(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getTimeZone(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_setAllowLeadingWildcard(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setDateResolution(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setEnablePositionIncrements(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setFuzzyMinSim(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setFuzzyPrefixLength(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setLocale(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setMultiTermRewriteMethod(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setPhraseSlop(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setTimeZone(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_get__allowLeadingWildcard(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__allowLeadingWildcard(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__analyzer(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__dateResolution(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__enablePositionIncrements(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__enablePositionIncrements(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__fuzzyMinSim(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__fuzzyMinSim(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__fuzzyPrefixLength(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__fuzzyPrefixLength(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__locale(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__locale(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__multiTermRewriteMethod(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__multiTermRewriteMethod(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__phraseSlop(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__phraseSlop(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__timeZone(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__timeZone(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyGetSetDef t_CommonQueryParserConfiguration__fields_[] = {
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, allowLeadingWildcard),
              DECLARE_GET_FIELD(t_CommonQueryParserConfiguration, analyzer),
              DECLARE_SET_FIELD(t_CommonQueryParserConfiguration, dateResolution),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, enablePositionIncrements),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, fuzzyMinSim),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, fuzzyPrefixLength),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, locale),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, multiTermRewriteMethod),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, phraseSlop),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, timeZone),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CommonQueryParserConfiguration__methods_[] = {
              DECLARE_METHOD(t_CommonQueryParserConfiguration, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getAllowLeadingWildcard, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getAnalyzer, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getEnablePositionIncrements, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getFuzzyMinSim, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getFuzzyPrefixLength, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getLocale, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getMultiTermRewriteMethod, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getPhraseSlop, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getTimeZone, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setAllowLeadingWildcard, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setDateResolution, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setEnablePositionIncrements, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setFuzzyMinSim, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setFuzzyPrefixLength, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setLocale, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setMultiTermRewriteMethod, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setPhraseSlop, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setTimeZone, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(CommonQueryParserConfiguration)[] = {
              { Py_tp_methods, t_CommonQueryParserConfiguration__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_CommonQueryParserConfiguration__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(CommonQueryParserConfiguration)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(CommonQueryParserConfiguration, t_CommonQueryParserConfiguration, CommonQueryParserConfiguration);

            void t_CommonQueryParserConfiguration::install(PyObject *module)
            {
              installType(&PY_TYPE(CommonQueryParserConfiguration), &PY_TYPE_DEF(CommonQueryParserConfiguration), module, "CommonQueryParserConfiguration", 0);
            }

            void t_CommonQueryParserConfiguration::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(CommonQueryParserConfiguration), "class_", make_descriptor(CommonQueryParserConfiguration::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CommonQueryParserConfiguration), "wrapfn_", make_descriptor(t_CommonQueryParserConfiguration::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CommonQueryParserConfiguration), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CommonQueryParserConfiguration_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CommonQueryParserConfiguration::initializeClass, 1)))
                return NULL;
              return t_CommonQueryParserConfiguration::wrap_Object(CommonQueryParserConfiguration(((t_CommonQueryParserConfiguration *) arg)->object.this$));
            }
            static PyObject *t_CommonQueryParserConfiguration_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CommonQueryParserConfiguration::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CommonQueryParserConfiguration_getAllowLeadingWildcard(t_CommonQueryParserConfiguration *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getAllowLeadingWildcard());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getAnalyzer(t_CommonQueryParserConfiguration *self)
            {
              ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
              OBJ_CALL(result = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getEnablePositionIncrements(t_CommonQueryParserConfiguration *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getEnablePositionIncrements());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getFuzzyMinSim(t_CommonQueryParserConfiguration *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getFuzzyMinSim());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getFuzzyPrefixLength(t_CommonQueryParserConfiguration *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getFuzzyPrefixLength());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getLocale(t_CommonQueryParserConfiguration *self)
            {
              ::java::util::Locale result((jobject) NULL);
              OBJ_CALL(result = self->object.getLocale());
              return ::java::util::t_Locale::wrap_Object(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getMultiTermRewriteMethod(t_CommonQueryParserConfiguration *self)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod result((jobject) NULL);
              OBJ_CALL(result = self->object.getMultiTermRewriteMethod());
              return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getPhraseSlop(t_CommonQueryParserConfiguration *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getPhraseSlop());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getTimeZone(t_CommonQueryParserConfiguration *self)
            {
              ::java::util::TimeZone result((jobject) NULL);
              OBJ_CALL(result = self->object.getTimeZone());
              return ::java::util::t_TimeZone::wrap_Object(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_setAllowLeadingWildcard(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setAllowLeadingWildcard(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setAllowLeadingWildcard", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setDateResolution(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              ::org::apache::lucene::document::DateTools$Resolution a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
              {
                OBJ_CALL(self->object.setDateResolution(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDateResolution", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setEnablePositionIncrements(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setEnablePositionIncrements(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setEnablePositionIncrements", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setFuzzyMinSim(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jfloat a0;

              if (!parseArg(arg, "F", &a0))
              {
                OBJ_CALL(self->object.setFuzzyMinSim(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFuzzyMinSim", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setFuzzyPrefixLength(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setFuzzyPrefixLength(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFuzzyPrefixLength", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setLocale(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              ::java::util::Locale a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setLocale(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setLocale", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setMultiTermRewriteMethod(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setMultiTermRewriteMethod(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setMultiTermRewriteMethod", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setPhraseSlop(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setPhraseSlop(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setPhraseSlop", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setTimeZone(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              ::java::util::TimeZone a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setTimeZone(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setTimeZone", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__allowLeadingWildcard(t_CommonQueryParserConfiguration *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getAllowLeadingWildcard());
              Py_RETURN_BOOL(value);
            }
            static int t_CommonQueryParserConfiguration_set__allowLeadingWildcard(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setAllowLeadingWildcard(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "allowLeadingWildcard", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__analyzer(t_CommonQueryParserConfiguration *self, void *data)
            {
              ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
              OBJ_CALL(value = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
            }

            static int t_CommonQueryParserConfiguration_set__dateResolution(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::document::DateTools$Resolution value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &value))
                {
                  INT_CALL(self->object.setDateResolution(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "dateResolution", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__enablePositionIncrements(t_CommonQueryParserConfiguration *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getEnablePositionIncrements());
              Py_RETURN_BOOL(value);
            }
            static int t_CommonQueryParserConfiguration_set__enablePositionIncrements(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setEnablePositionIncrements(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "enablePositionIncrements", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__fuzzyMinSim(t_CommonQueryParserConfiguration *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFuzzyMinSim());
              return PyFloat_FromDouble((double) value);
            }
            static int t_CommonQueryParserConfiguration_set__fuzzyMinSim(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jfloat value;
                if (!parseArg(arg, "F", &value))
                {
                  INT_CALL(self->object.setFuzzyMinSim(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fuzzyMinSim", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__fuzzyPrefixLength(t_CommonQueryParserConfiguration *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getFuzzyPrefixLength());
              return PyLong_FromLong((long) value);
            }
            static int t_CommonQueryParserConfiguration_set__fuzzyPrefixLength(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setFuzzyPrefixLength(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fuzzyPrefixLength", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__locale(t_CommonQueryParserConfiguration *self, void *data)
            {
              ::java::util::Locale value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocale());
              return ::java::util::t_Locale::wrap_Object(value);
            }
            static int t_CommonQueryParserConfiguration_set__locale(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Locale value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &value))
                {
                  INT_CALL(self->object.setLocale(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "locale", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__multiTermRewriteMethod(t_CommonQueryParserConfiguration *self, void *data)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
              OBJ_CALL(value = self->object.getMultiTermRewriteMethod());
              return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(value);
            }
            static int t_CommonQueryParserConfiguration_set__multiTermRewriteMethod(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &value))
                {
                  INT_CALL(self->object.setMultiTermRewriteMethod(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "multiTermRewriteMethod", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__phraseSlop(t_CommonQueryParserConfiguration *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getPhraseSlop());
              return PyLong_FromLong((long) value);
            }
            static int t_CommonQueryParserConfiguration_set__phraseSlop(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setPhraseSlop(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "phraseSlop", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__timeZone(t_CommonQueryParserConfiguration *self, void *data)
            {
              ::java::util::TimeZone value((jobject) NULL);
              OBJ_CALL(value = self->object.getTimeZone());
              return ::java::util::t_TimeZone::wrap_Object(value);
            }
            static int t_CommonQueryParserConfiguration_set__timeZone(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                ::java::util::TimeZone value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &value))
                {
                  INT_CALL(self->object.setTimeZone(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "timeZone", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/StemmerUtil.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *StemmerUtil::class$ = NULL;
          jmethodID *StemmerUtil::mids$ = NULL;
          bool StemmerUtil::live$ = false;

          jclass StemmerUtil::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/StemmerUtil");

              mids$ = new jmethodID[max_mid];
              mids$[mid_delete_644fc0bf0aa7fb26] = env->getStaticMethodID(cls, "delete", "([CII)I");
              mids$[mid_deleteN_16ffb1617e12e391] = env->getStaticMethodID(cls, "deleteN", "([CIII)I");
              mids$[mid_endsWith_b55d00dce4b84991] = env->getStaticMethodID(cls, "endsWith", "([CI[C)Z");
              mids$[mid_endsWith_caddca5adfc9c3e4] = env->getStaticMethodID(cls, "endsWith", "([CILjava/lang/String;)Z");
              mids$[mid_startsWith_caddca5adfc9c3e4] = env->getStaticMethodID(cls, "startsWith", "([CILjava/lang/String;)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint StemmerUtil::delete$(const JArray< jchar > & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_delete_644fc0bf0aa7fb26], a0.this$, a1, a2);
          }

          jint StemmerUtil::deleteN(const JArray< jchar > & a0, jint a1, jint a2, jint a3)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_deleteN_16ffb1617e12e391], a0.this$, a1, a2, a3);
          }

          jboolean StemmerUtil::endsWith(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_endsWith_b55d00dce4b84991], a0.this$, a1, a2.this$);
          }

          jboolean StemmerUtil::endsWith(const JArray< jchar > & a0, jint a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_endsWith_caddca5adfc9c3e4], a0.this$, a1, a2.this$);
          }

          jboolean StemmerUtil::startsWith(const JArray< jchar > & a0, jint a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_startsWith_caddca5adfc9c3e4], a0.this$, a1, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_StemmerUtil_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerUtil_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerUtil_delete(PyTypeObject *type, PyObject *args);
          static PyObject *t_StemmerUtil_deleteN(PyTypeObject *type, PyObject *args);
          static PyObject *t_StemmerUtil_endsWith(PyTypeObject *type, PyObject *args);
          static PyObject *t_StemmerUtil_startsWith(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_StemmerUtil__methods_[] = {
            DECLARE_METHOD(t_StemmerUtil, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, delete, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, deleteN, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, endsWith, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, startsWith, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(StemmerUtil)[] = {
            { Py_tp_methods, t_StemmerUtil__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(StemmerUtil)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(StemmerUtil, t_StemmerUtil, StemmerUtil);

          void t_StemmerUtil::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerUtil), &PY_TYPE_DEF(StemmerUtil), module, "StemmerUtil", 0);
          }

          void t_StemmerUtil::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(StemmerUtil), "class_", make_descriptor(StemmerUtil::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StemmerUtil), "wrapfn_", make_descriptor(t_StemmerUtil::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StemmerUtil), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerUtil_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerUtil::initializeClass, 1)))
              return NULL;
            return t_StemmerUtil::wrap_Object(StemmerUtil(((t_StemmerUtil *) arg)->object.this$));
          }
          static PyObject *t_StemmerUtil_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerUtil::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_StemmerUtil_delete(PyTypeObject *type, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            jint result;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::delete$(a0, a1, a2));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "delete", args);
            return NULL;
          }

          static PyObject *t_StemmerUtil_deleteN(PyTypeObject *type, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jint result;

            if (!parseArgs(args, "[CIII", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::deleteN(a0, a1, a2, a3));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "deleteN", args);
            return NULL;
          }

          static PyObject *t_StemmerUtil_endsWith(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                JArray< jchar > a2((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "[CI[C", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::endsWith(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "[CIs", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::endsWith(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError(type, "endsWith", args);
            return NULL;
          }

          static PyObject *t_StemmerUtil_startsWith(PyTypeObject *type, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "[CIs", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::startsWith(a0, a1, a2));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "startsWith", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanOrQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanOrQuery::class$ = NULL;
          jmethodID *SpanOrQuery::mids$ = NULL;
          bool SpanOrQuery::live$ = false;

          jclass SpanOrQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanOrQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_01ea881f06a641d8] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_createWeight_5baab4cc5ccc46b6] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/spans/SpanWeight;");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getClauses_55969f275130ff39] = env->getMethodID(cls, "getClauses", "()[Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanOrQuery::SpanOrQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_01ea881f06a641d8, a0.this$)) {}

          ::org::apache::lucene::search::spans::SpanWeight SpanOrQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::spans::SpanWeight(env->callObjectMethod(this$, mids$[mid_createWeight_5baab4cc5ccc46b6], a0.this$, a1.this$, a2));
          }

          jboolean SpanOrQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          JArray< ::org::apache::lucene::search::spans::SpanQuery > SpanOrQuery::getClauses() const
          {
            return JArray< ::org::apache::lucene::search::spans::SpanQuery >(env->callObjectMethod(this$, mids$[mid_getClauses_55969f275130ff39]));
          }

          ::java::lang::String SpanOrQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
          }

          jint SpanOrQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::search::Query SpanOrQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
          }

          ::java::lang::String SpanOrQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }

          void SpanOrQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanOrQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanOrQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanOrQuery_init_(t_SpanOrQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanOrQuery_createWeight(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_equals(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_getClauses(t_SpanOrQuery *self);
          static PyObject *t_SpanOrQuery_getField(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_hashCode(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_rewrite(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_toString(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_visit(t_SpanOrQuery *self, PyObject *args);
          static PyObject *t_SpanOrQuery_get__clauses(t_SpanOrQuery *self, void *data);
          static PyObject *t_SpanOrQuery_get__field(t_SpanOrQuery *self, void *data);
          static PyGetSetDef t_SpanOrQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanOrQuery, clauses),
            DECLARE_GET_FIELD(t_SpanOrQuery, field),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanOrQuery__methods_[] = {
            DECLARE_METHOD(t_SpanOrQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanOrQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanOrQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, getClauses, METH_NOARGS),
            DECLARE_METHOD(t_SpanOrQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, toString, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanOrQuery)[] = {
            { Py_tp_methods, t_SpanOrQuery__methods_ },
            { Py_tp_init, (void *) t_SpanOrQuery_init_ },
            { Py_tp_getset, t_SpanOrQuery__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanOrQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanQuery),
            NULL
          };

          DEFINE_TYPE(SpanOrQuery, t_SpanOrQuery, SpanOrQuery);

          void t_SpanOrQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanOrQuery), &PY_TYPE_DEF(SpanOrQuery), module, "SpanOrQuery", 0);
          }

          void t_SpanOrQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanOrQuery), "class_", make_descriptor(SpanOrQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanOrQuery), "wrapfn_", make_descriptor(t_SpanOrQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanOrQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanOrQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanOrQuery::initializeClass, 1)))
              return NULL;
            return t_SpanOrQuery::wrap_Object(SpanOrQuery(((t_SpanOrQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanOrQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanOrQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanOrQuery_init_(t_SpanOrQuery *self, PyObject *args, PyObject *kwds)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
            SpanOrQuery object((jobject) NULL);

            if (!parseArgs(args, "[k", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0))
            {
              INT_CALL(object = SpanOrQuery(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanOrQuery_createWeight(t_SpanOrQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
            PyTypeObject **p1;
            jfloat a2;
            ::org::apache::lucene::search::spans::SpanWeight result((jobject) NULL);

            if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_SpanWeight::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanOrQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_SpanOrQuery_equals(t_SpanOrQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SpanOrQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanOrQuery_getClauses(t_SpanOrQuery *self)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > result((jobject) NULL);
            OBJ_CALL(result = self->object.getClauses());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spans::t_SpanQuery::wrap_jobject);
          }

          static PyObject *t_SpanOrQuery_getField(t_SpanOrQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(PY_TYPE(SpanOrQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanOrQuery_hashCode(t_SpanOrQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SpanOrQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanOrQuery_rewrite(t_SpanOrQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanOrQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanOrQuery_toString(t_SpanOrQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(SpanOrQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanOrQuery_visit(t_SpanOrQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanOrQuery), (PyObject *) self, "visit", args, 2);
          }

          static PyObject *t_SpanOrQuery_get__clauses(t_SpanOrQuery *self, void *data)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > value((jobject) NULL);
            OBJ_CALL(value = self->object.getClauses());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::spans::t_SpanQuery::wrap_jobject);
          }

          static PyObject *t_SpanOrQuery_get__field(t_SpanOrQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorable.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/Collector.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/TopFieldDocs.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/facet/FacetsCollector$MatchingDocs.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsCollector::class$ = NULL;
        jmethodID *FacetsCollector::mids$ = NULL;
        bool FacetsCollector::live$ = false;

        jclass FacetsCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_9d72768e8fdce2b7] = env->getMethodID(cls, "<init>", "(Z)V");
            mids$[mid_collect_040c4cd0390c5aff] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_getKeepScores_8454bd5aa23fd11e] = env->getMethodID(cls, "getKeepScores", "()Z");
            mids$[mid_getMatchingDocs_49ec78390f08338a] = env->getMethodID(cls, "getMatchingDocs", "()Ljava/util/List;");
            mids$[mid_scoreMode_8a35254b82ee8276] = env->getMethodID(cls, "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;");
            mids$[mid_search_6b46ba651c1a9ba5] = env->getStaticMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_f0ba998406c03a71] = env->getStaticMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_518228ac10df3047] = env->getStaticMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Sort;ZLorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_searchAfter_1e43a62344b61bb5] = env->getStaticMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_6d1e24e3174f1100] = env->getStaticMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_00a809821dadd39a] = env->getStaticMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Sort;ZLorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");
            mids$[mid_doSetNextReader_8747e0e89febf88d] = env->getMethodID(cls, "doSetNextReader", "(Lorg/apache/lucene/index/LeafReaderContext;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsCollector::FacetsCollector() : ::org::apache::lucene::search::SimpleCollector(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        FacetsCollector::FacetsCollector(jboolean a0) : ::org::apache::lucene::search::SimpleCollector(env->newObject(initializeClass, &mids$, mid_init$_9d72768e8fdce2b7, a0)) {}

        void FacetsCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_040c4cd0390c5aff], a0);
        }

        jboolean FacetsCollector::getKeepScores() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getKeepScores_8454bd5aa23fd11e]);
        }

        ::java::util::List FacetsCollector::getMatchingDocs() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getMatchingDocs_49ec78390f08338a]));
        }

        ::org::apache::lucene::search::ScoreMode FacetsCollector::scoreMode() const
        {
          return ::org::apache::lucene::search::ScoreMode(env->callObjectMethod(this$, mids$[mid_scoreMode_8a35254b82ee8276]));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, jint a2, const ::org::apache::lucene::search::Collector & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_search_6b46ba651c1a9ba5], a0.this$, a1.this$, a2, a3.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs FacetsCollector::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, jint a2, const ::org::apache::lucene::search::Sort & a3, const ::org::apache::lucene::search::Collector & a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopFieldDocs(env->callStaticObjectMethod(cls, mids$[mid_search_f0ba998406c03a71], a0.this$, a1.this$, a2, a3.this$, a4.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs FacetsCollector::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, jint a2, const ::org::apache::lucene::search::Sort & a3, jboolean a4, const ::org::apache::lucene::search::Collector & a5)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopFieldDocs(env->callStaticObjectMethod(cls, mids$[mid_search_518228ac10df3047], a0.this$, a1.this$, a2, a3.this$, a4, a5.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::searchAfter(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreDoc & a1, const ::org::apache::lucene::search::Query & a2, jint a3, const ::org::apache::lucene::search::Collector & a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_searchAfter_1e43a62344b61bb5], a0.this$, a1.this$, a2.this$, a3, a4.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::searchAfter(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreDoc & a1, const ::org::apache::lucene::search::Query & a2, jint a3, const ::org::apache::lucene::search::Sort & a4, const ::org::apache::lucene::search::Collector & a5)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_searchAfter_6d1e24e3174f1100], a0.this$, a1.this$, a2.this$, a3, a4.this$, a5.this$));
        }

        ::org::apache::lucene::search::TopDocs FacetsCollector::searchAfter(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreDoc & a1, const ::org::apache::lucene::search::Query & a2, jint a3, const ::org::apache::lucene::search::Sort & a4, jboolean a5, const ::org::apache::lucene::search::Collector & a6)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_searchAfter_00a809821dadd39a], a0.this$, a1.this$, a2.this$, a3, a4.this$, a5, a6.this$));
        }

        void FacetsCollector::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetsCollector_init_(t_FacetsCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetsCollector_collect(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_getKeepScores(t_FacetsCollector *self);
        static PyObject *t_FacetsCollector_getMatchingDocs(t_FacetsCollector *self);
        static PyObject *t_FacetsCollector_scoreMode(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_search(PyTypeObject *type, PyObject *args);
        static PyObject *t_FacetsCollector_searchAfter(PyTypeObject *type, PyObject *args);
        static PyObject *t_FacetsCollector_setScorer(t_FacetsCollector *self, PyObject *args);
        static PyObject *t_FacetsCollector_get__keepScores(t_FacetsCollector *self, void *data);
        static PyObject *t_FacetsCollector_get__matchingDocs(t_FacetsCollector *self, void *data);
        static int t_FacetsCollector_set__scorer(t_FacetsCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_FacetsCollector__fields_[] = {
          DECLARE_GET_FIELD(t_FacetsCollector, keepScores),
          DECLARE_GET_FIELD(t_FacetsCollector, matchingDocs),
          DECLARE_SET_FIELD(t_FacetsCollector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetsCollector__methods_[] = {
          DECLARE_METHOD(t_FacetsCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_FacetsCollector, getKeepScores, METH_NOARGS),
          DECLARE_METHOD(t_FacetsCollector, getMatchingDocs, METH_NOARGS),
          DECLARE_METHOD(t_FacetsCollector, scoreMode, METH_VARARGS),
          DECLARE_METHOD(t_FacetsCollector, search, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector, searchAfter, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FacetsCollector)[] = {
          { Py_tp_methods, t_FacetsCollector__methods_ },
          { Py_tp_init, (void *) t_FacetsCollector_init_ },
          { Py_tp_getset, t_FacetsCollector__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FacetsCollector)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::SimpleCollector),
          NULL
        };

        DEFINE_TYPE(FacetsCollector, t_FacetsCollector, FacetsCollector);

        void t_FacetsCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsCollector), &PY_TYPE_DEF(FacetsCollector), module, "FacetsCollector", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsCollector), "MatchingDocs", make_descriptor(&PY_TYPE_DEF(FacetsCollector$MatchingDocs)));
        }

        void t_FacetsCollector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsCollector), "class_", make_descriptor(FacetsCollector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsCollector), "wrapfn_", make_descriptor(t_FacetsCollector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsCollector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetsCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsCollector::initializeClass, 1)))
            return NULL;
          return t_FacetsCollector::wrap_Object(FacetsCollector(((t_FacetsCollector *) arg)->object.this$));
        }
        static PyObject *t_FacetsCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetsCollector_init_(t_FacetsCollector *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              FacetsCollector object((jobject) NULL);

              INT_CALL(object = FacetsCollector());
              self->object = object;
              break;
            }
           case 1:
            {
              jboolean a0;
              FacetsCollector object((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                INT_CALL(object = FacetsCollector(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FacetsCollector_collect(t_FacetsCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FacetsCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_FacetsCollector_getKeepScores(t_FacetsCollector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getKeepScores());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FacetsCollector_getMatchingDocs(t_FacetsCollector *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getMatchingDocs());
          return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::facet::PY_TYPE(FacetsCollector$MatchingDocs));
        }

        static PyObject *t_FacetsCollector_scoreMode(t_FacetsCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::ScoreMode result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.scoreMode());
            return ::org::apache::lucene::search::t_ScoreMode::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FacetsCollector), (PyObject *) self, "scoreMode", args, 2);
        }

        static PyObject *t_FacetsCollector_search(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Collector a3((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkIk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::search(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Sort a3((jobject) NULL);
              ::org::apache::lucene::search::Collector a4((jobject) NULL);
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kkIkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::search(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
            break;
           case 6:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Sort a3((jobject) NULL);
              jboolean a4;
              ::org::apache::lucene::search::Collector a5((jobject) NULL);
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kkIkZk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::search(a0, a1, a2, a3, a4, a5));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "search", args);
          return NULL;
        }

        static PyObject *t_FacetsCollector_searchAfter(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
              ::org::apache::lucene::search::Query a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Collector a4((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::searchAfter(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 6:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
              ::org::apache::lucene::search::Query a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              ::org::apache::lucene::search::Collector a5((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIkk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::searchAfter(a0, a1, a2, a3, a4, a5));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 7:
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
              ::org::apache::lucene::search::Query a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              jboolean a5;
              ::org::apache::lucene::search::Collector a6((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIkZk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsCollector::searchAfter(a0, a1, a2, a3, a4, a5, a6));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "searchAfter", args);
          return NULL;
        }

        static PyObject *t_FacetsCollector_setScorer(t_FacetsCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorable a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FacetsCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static PyObject *t_FacetsCollector_get__keepScores(t_FacetsCollector *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getKeepScores());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_FacetsCollector_get__matchingDocs(t_FacetsCollector *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getMatchingDocs());
          return ::java::util::t_List::wrap_Object(value);
        }

        static int t_FacetsCollector_set__scorer(t_FacetsCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorable value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/ConjunctionSpans.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/TwoPhaseIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *ConjunctionSpans::class$ = NULL;
          jmethodID *ConjunctionSpans::mids$ = NULL;
          bool ConjunctionSpans::live$ = false;

          jclass ConjunctionSpans::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/ConjunctionSpans");

              mids$ = new jmethodID[max_mid];
              mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
              mids$[mid_asTwoPhaseIterator_6458a12a224a1c8a] = env->getMethodID(cls, "asTwoPhaseIterator", "()Lorg/apache/lucene/search/TwoPhaseIterator;");
              mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
              mids$[mid_getSubSpans_28b3d0f8ac88aead] = env->getMethodID(cls, "getSubSpans", "()[Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");
              mids$[mid_positionsCost_58aec2b64dff50c8] = env->getMethodID(cls, "positionsCost", "()F");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint ConjunctionSpans::advance(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
          }

          ::org::apache::lucene::search::TwoPhaseIterator ConjunctionSpans::asTwoPhaseIterator() const
          {
            return ::org::apache::lucene::search::TwoPhaseIterator(env->callObjectMethod(this$, mids$[mid_asTwoPhaseIterator_6458a12a224a1c8a]));
          }

          jlong ConjunctionSpans::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
          }

          jint ConjunctionSpans::docID() const
          {
            return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
          }

          JArray< ::org::apache::lucene::search::spans::Spans > ConjunctionSpans::getSubSpans() const
          {
            return JArray< ::org::apache::lucene::search::spans::Spans >(env->callObjectMethod(this$, mids$[mid_getSubSpans_28b3d0f8ac88aead]));
          }

          jint ConjunctionSpans::nextDoc() const
          {
            return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
          }

          jfloat ConjunctionSpans::positionsCost() const
          {
            return env->callFloatMethod(this$, mids$[mid_positionsCost_58aec2b64dff50c8]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_ConjunctionSpans_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ConjunctionSpans_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ConjunctionSpans_advance(t_ConjunctionSpans *self, PyObject *args);
          static PyObject *t_ConjunctionSpans_asTwoPhaseIterator(t_ConjunctionSpans *self, PyObject *args);
          static PyObject *t_ConjunctionSpans_cost(t_ConjunctionSpans *self, PyObject *args);
          static PyObject *t_ConjunctionSpans_docID(t_ConjunctionSpans *self, PyObject *args);
          static PyObject *t_ConjunctionSpans_getSubSpans(t_ConjunctionSpans *self);
          static PyObject *t_ConjunctionSpans_nextDoc(t_ConjunctionSpans *self, PyObject *args);
          static PyObject *t_ConjunctionSpans_positionsCost(t_ConjunctionSpans *self, PyObject *args);
          static PyObject *t_ConjunctionSpans_get__subSpans(t_ConjunctionSpans *self, void *data);
          static PyGetSetDef t_ConjunctionSpans__fields_[] = {
            DECLARE_GET_FIELD(t_ConjunctionSpans, subSpans),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ConjunctionSpans__methods_[] = {
            DECLARE_METHOD(t_ConjunctionSpans, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConjunctionSpans, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConjunctionSpans, advance, METH_VARARGS),
            DECLARE_METHOD(t_ConjunctionSpans, asTwoPhaseIterator, METH_VARARGS),
            DECLARE_METHOD(t_ConjunctionSpans, cost, METH_VARARGS),
            DECLARE_METHOD(t_ConjunctionSpans, docID, METH_VARARGS),
            DECLARE_METHOD(t_ConjunctionSpans, getSubSpans, METH_NOARGS),
            DECLARE_METHOD(t_ConjunctionSpans, nextDoc, METH_VARARGS),
            DECLARE_METHOD(t_ConjunctionSpans, positionsCost, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ConjunctionSpans)[] = {
            { Py_tp_methods, t_ConjunctionSpans__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_ConjunctionSpans__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ConjunctionSpans)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::Spans),
            NULL
          };

          DEFINE_TYPE(ConjunctionSpans, t_ConjunctionSpans, ConjunctionSpans);

          void t_ConjunctionSpans::install(PyObject *module)
          {
            installType(&PY_TYPE(ConjunctionSpans), &PY_TYPE_DEF(ConjunctionSpans), module, "ConjunctionSpans", 0);
          }

          void t_ConjunctionSpans::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConjunctionSpans), "class_", make_descriptor(ConjunctionSpans::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConjunctionSpans), "wrapfn_", make_descriptor(t_ConjunctionSpans::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConjunctionSpans), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ConjunctionSpans_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ConjunctionSpans::initializeClass, 1)))
              return NULL;
            return t_ConjunctionSpans::wrap_Object(ConjunctionSpans(((t_ConjunctionSpans *) arg)->object.this$));
          }
          static PyObject *t_ConjunctionSpans_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ConjunctionSpans::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ConjunctionSpans_advance(t_ConjunctionSpans *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.advance(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(ConjunctionSpans), (PyObject *) self, "advance", args, 2);
          }

          static PyObject *t_ConjunctionSpans_asTwoPhaseIterator(t_ConjunctionSpans *self, PyObject *args)
          {
            ::org::apache::lucene::search::TwoPhaseIterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.asTwoPhaseIterator());
              return ::org::apache::lucene::search::t_TwoPhaseIterator::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ConjunctionSpans), (PyObject *) self, "asTwoPhaseIterator", args, 2);
          }

          static PyObject *t_ConjunctionSpans_cost(t_ConjunctionSpans *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(ConjunctionSpans), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_ConjunctionSpans_docID(t_ConjunctionSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docID());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(ConjunctionSpans), (PyObject *) self, "docID", args, 2);
          }

          static PyObject *t_ConjunctionSpans_getSubSpans(t_ConjunctionSpans *self)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > result((jobject) NULL);
            OBJ_CALL(result = self->object.getSubSpans());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spans::t_Spans::wrap_jobject);
          }

          static PyObject *t_ConjunctionSpans_nextDoc(t_ConjunctionSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextDoc());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(ConjunctionSpans), (PyObject *) self, "nextDoc", args, 2);
          }

          static PyObject *t_ConjunctionSpans_positionsCost(t_ConjunctionSpans *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.positionsCost());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(ConjunctionSpans), (PyObject *) self, "positionsCost", args, 2);
          }

          static PyObject *t_ConjunctionSpans_get__subSpans(t_ConjunctionSpans *self, void *data)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > value((jobject) NULL);
            OBJ_CALL(value = self->object.getSubSpans());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::spans::t_Spans::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/lang/Class.h"
#include "java/lang/Character.h"
#include "java/util/Set.h"
#include "java/lang/StringBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SimpleBoundaryScanner::class$ = NULL;
          jmethodID *SimpleBoundaryScanner::mids$ = NULL;
          bool SimpleBoundaryScanner::live$ = false;
          JArray< ::java::lang::Character > *SimpleBoundaryScanner::DEFAULT_BOUNDARY_CHARS = NULL;
          jint SimpleBoundaryScanner::DEFAULT_MAX_SCAN = (jint) 0;

          jclass SimpleBoundaryScanner::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_75d35f5f59af2667] = env->getMethodID(cls, "<init>", "([Ljava/lang/Character;)V");
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_6bd37c13847148fa] = env->getMethodID(cls, "<init>", "(I[Ljava/lang/Character;)V");
              mids$[mid_init$_d503e4aa074a3bd8] = env->getMethodID(cls, "<init>", "(ILjava/util/Set;)V");
              mids$[mid_findEndOffset_5c64028204964247] = env->getMethodID(cls, "findEndOffset", "(Ljava/lang/StringBuilder;I)I");
              mids$[mid_findStartOffset_5c64028204964247] = env->getMethodID(cls, "findStartOffset", "(Ljava/lang/StringBuilder;I)I");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_BOUNDARY_CHARS = new JArray< ::java::lang::Character >(env->getStaticObjectField(cls, "DEFAULT_BOUNDARY_CHARS", "[Ljava/lang/Character;"));
              DEFAULT_MAX_SCAN = env->getStaticIntField(cls, "DEFAULT_MAX_SCAN");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleBoundaryScanner::SimpleBoundaryScanner() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          SimpleBoundaryScanner::SimpleBoundaryScanner(const JArray< ::java::lang::Character > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_75d35f5f59af2667, a0.this$)) {}

          SimpleBoundaryScanner::SimpleBoundaryScanner(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          SimpleBoundaryScanner::SimpleBoundaryScanner(jint a0, const JArray< ::java::lang::Character > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6bd37c13847148fa, a0, a1.this$)) {}

          SimpleBoundaryScanner::SimpleBoundaryScanner(jint a0, const ::java::util::Set & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d503e4aa074a3bd8, a0, a1.this$)) {}

          jint SimpleBoundaryScanner::findEndOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findEndOffset_5c64028204964247], a0.this$, a1);
          }

          jint SimpleBoundaryScanner::findStartOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findStartOffset_5c64028204964247], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SimpleBoundaryScanner_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleBoundaryScanner_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleBoundaryScanner_init_(t_SimpleBoundaryScanner *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleBoundaryScanner_findEndOffset(t_SimpleBoundaryScanner *self, PyObject *args);
          static PyObject *t_SimpleBoundaryScanner_findStartOffset(t_SimpleBoundaryScanner *self, PyObject *args);

          static PyMethodDef t_SimpleBoundaryScanner__methods_[] = {
            DECLARE_METHOD(t_SimpleBoundaryScanner, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleBoundaryScanner, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleBoundaryScanner, findEndOffset, METH_VARARGS),
            DECLARE_METHOD(t_SimpleBoundaryScanner, findStartOffset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleBoundaryScanner)[] = {
            { Py_tp_methods, t_SimpleBoundaryScanner__methods_ },
            { Py_tp_init, (void *) t_SimpleBoundaryScanner_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleBoundaryScanner)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SimpleBoundaryScanner, t_SimpleBoundaryScanner, SimpleBoundaryScanner);

          void t_SimpleBoundaryScanner::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleBoundaryScanner), &PY_TYPE_DEF(SimpleBoundaryScanner), module, "SimpleBoundaryScanner", 0);
          }

          void t_SimpleBoundaryScanner::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleBoundaryScanner), "class_", make_descriptor(SimpleBoundaryScanner::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleBoundaryScanner), "wrapfn_", make_descriptor(t_SimpleBoundaryScanner::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleBoundaryScanner), "boxfn_", make_descriptor(boxObject));
            env->getClass(SimpleBoundaryScanner::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleBoundaryScanner), "DEFAULT_BOUNDARY_CHARS", make_descriptor(JArray<jobject>(SimpleBoundaryScanner::DEFAULT_BOUNDARY_CHARS->this$).wrap(::java::lang::t_Character::wrap_jobject)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleBoundaryScanner), "DEFAULT_MAX_SCAN", make_descriptor(SimpleBoundaryScanner::DEFAULT_MAX_SCAN));
          }

          static PyObject *t_SimpleBoundaryScanner_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleBoundaryScanner::initializeClass, 1)))
              return NULL;
            return t_SimpleBoundaryScanner::wrap_Object(SimpleBoundaryScanner(((t_SimpleBoundaryScanner *) arg)->object.this$));
          }
          static PyObject *t_SimpleBoundaryScanner_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleBoundaryScanner::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleBoundaryScanner_init_(t_SimpleBoundaryScanner *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleBoundaryScanner object((jobject) NULL);

                INT_CALL(object = SimpleBoundaryScanner());
                self->object = object;
                break;
              }
             case 1:
              {
                JArray< ::java::lang::Character > a0((jobject) NULL);
                SimpleBoundaryScanner object((jobject) NULL);

                if (!parseArgs(args, "[O", ::java::lang::PY_TYPE(Character), &a0))
                {
                  INT_CALL(object = SimpleBoundaryScanner(a0));
                  self->object = object;
                  break;
                }
              }
              {
                jint a0;
                SimpleBoundaryScanner object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = SimpleBoundaryScanner(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                jint a0;
                JArray< ::java::lang::Character > a1((jobject) NULL);
                SimpleBoundaryScanner object((jobject) NULL);

                if (!parseArgs(args, "I[O", ::java::lang::PY_TYPE(Character), &a0, &a1))
                {
                  INT_CALL(object = SimpleBoundaryScanner(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                jint a0;
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                SimpleBoundaryScanner object((jobject) NULL);

                if (!parseArgs(args, "IK", ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = SimpleBoundaryScanner(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleBoundaryScanner_findEndOffset(t_SimpleBoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findEndOffset(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findEndOffset", args);
            return NULL;
          }

          static PyObject *t_SimpleBoundaryScanner_findStartOffset(t_SimpleBoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findStartOffset(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findStartOffset", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene87/Lucene87Codec.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/CompoundFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/lucene87/Lucene87Codec$Mode.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/PointsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene87 {

          ::java::lang::Class *Lucene87Codec::class$ = NULL;
          jmethodID *Lucene87Codec::mids$ = NULL;
          bool Lucene87Codec::live$ = false;

          jclass Lucene87Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene87/Lucene87Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_cab424022a56459e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/lucene87/Lucene87Codec$Mode;)V");
              mids$[mid_compoundFormat_1641e3035b5e7063] = env->getMethodID(cls, "compoundFormat", "()Lorg/apache/lucene/codecs/CompoundFormat;");
              mids$[mid_docValuesFormat_a9c08d7c2b76eed3] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_48c0c59677397219] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocValuesFormatForField_6b92af620136a934] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_getPostingsFormatForField_62d8049c839a109a] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_3c23f7d462a4a754] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_913a021834acbf93] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_pointsFormat_b24443532b28970b] = env->getMethodID(cls, "pointsFormat", "()Lorg/apache/lucene/codecs/PointsFormat;");
              mids$[mid_postingsFormat_1a5e16ceada7aa64] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_579fd0b88c210118] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_a6cbef21a6c483b7] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_ae08b71ce8366567] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene87Codec::Lucene87Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          Lucene87Codec::Lucene87Codec(const ::org::apache::lucene::codecs::lucene87::Lucene87Codec$Mode & a0) : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_cab424022a56459e, a0.this$)) {}

          ::org::apache::lucene::codecs::CompoundFormat Lucene87Codec::compoundFormat() const
          {
            return ::org::apache::lucene::codecs::CompoundFormat(env->callObjectMethod(this$, mids$[mid_compoundFormat_1641e3035b5e7063]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene87Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_a9c08d7c2b76eed3]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene87Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_48c0c59677397219]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene87Codec::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_6b92af620136a934], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene87Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_62d8049c839a109a], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene87Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_3c23f7d462a4a754]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene87Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_913a021834acbf93]));
          }

          ::org::apache::lucene::codecs::PointsFormat Lucene87Codec::pointsFormat() const
          {
            return ::org::apache::lucene::codecs::PointsFormat(env->callObjectMethod(this$, mids$[mid_pointsFormat_b24443532b28970b]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene87Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_1a5e16ceada7aa64]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene87Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_579fd0b88c210118]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene87Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_a6cbef21a6c483b7]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene87Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_ae08b71ce8366567]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene87 {
          static PyObject *t_Lucene87Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene87Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene87Codec_init_(t_Lucene87Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene87Codec_compoundFormat(t_Lucene87Codec *self, PyObject *args);
          static PyObject *t_Lucene87Codec_docValuesFormat(t_Lucene87Codec *self, PyObject *args);
          static PyObject *t_Lucene87Codec_fieldInfosFormat(t_Lucene87Codec *self, PyObject *args);
          static PyObject *t_Lucene87Codec_getDocValuesFormatForField(t_Lucene87Codec *self, PyObject *arg);
          static PyObject *t_Lucene87Codec_getPostingsFormatForField(t_Lucene87Codec *self, PyObject *arg);
          static PyObject *t_Lucene87Codec_liveDocsFormat(t_Lucene87Codec *self, PyObject *args);
          static PyObject *t_Lucene87Codec_normsFormat(t_Lucene87Codec *self, PyObject *args);
          static PyObject *t_Lucene87Codec_pointsFormat(t_Lucene87Codec *self, PyObject *args);
          static PyObject *t_Lucene87Codec_postingsFormat(t_Lucene87Codec *self, PyObject *args);
          static PyObject *t_Lucene87Codec_segmentInfoFormat(t_Lucene87Codec *self, PyObject *args);
          static PyObject *t_Lucene87Codec_storedFieldsFormat(t_Lucene87Codec *self, PyObject *args);
          static PyObject *t_Lucene87Codec_termVectorsFormat(t_Lucene87Codec *self, PyObject *args);

          static PyMethodDef t_Lucene87Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene87Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene87Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene87Codec, compoundFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene87Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene87Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene87Codec, getDocValuesFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene87Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene87Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene87Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene87Codec, pointsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene87Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene87Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene87Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene87Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene87Codec)[] = {
            { Py_tp_methods, t_Lucene87Codec__methods_ },
            { Py_tp_init, (void *) t_Lucene87Codec_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene87Codec)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::Codec),
            NULL
          };

          DEFINE_TYPE(Lucene87Codec, t_Lucene87Codec, Lucene87Codec);

          void t_Lucene87Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene87Codec), &PY_TYPE_DEF(Lucene87Codec), module, "Lucene87Codec", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene87Codec), "Mode", make_descriptor(&PY_TYPE_DEF(Lucene87Codec$Mode)));
          }

          void t_Lucene87Codec::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene87Codec), "class_", make_descriptor(Lucene87Codec::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene87Codec), "wrapfn_", make_descriptor(t_Lucene87Codec::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene87Codec), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene87Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene87Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene87Codec::wrap_Object(Lucene87Codec(((t_Lucene87Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene87Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene87Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene87Codec_init_(t_Lucene87Codec *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Lucene87Codec object((jobject) NULL);

                INT_CALL(object = Lucene87Codec());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::codecs::lucene87::Lucene87Codec$Mode a0((jobject) NULL);
                PyTypeObject **p0;
                Lucene87Codec object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::codecs::lucene87::Lucene87Codec$Mode::initializeClass, &a0, &p0, ::org::apache::lucene::codecs::lucene87::t_Lucene87Codec$Mode::parameters_))
                {
                  INT_CALL(object = Lucene87Codec(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene87Codec_compoundFormat(t_Lucene87Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::CompoundFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.compoundFormat());
              return ::org::apache::lucene::codecs::t_CompoundFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene87Codec), (PyObject *) self, "compoundFormat", args, 2);
          }

          static PyObject *t_Lucene87Codec_docValuesFormat(t_Lucene87Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene87Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene87Codec_fieldInfosFormat(t_Lucene87Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene87Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene87Codec_getDocValuesFormatForField(t_Lucene87Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene87Codec_getPostingsFormatForField(t_Lucene87Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene87Codec_liveDocsFormat(t_Lucene87Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene87Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene87Codec_normsFormat(t_Lucene87Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene87Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene87Codec_pointsFormat(t_Lucene87Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PointsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.pointsFormat());
              return ::org::apache::lucene::codecs::t_PointsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene87Codec), (PyObject *) self, "pointsFormat", args, 2);
          }

          static PyObject *t_Lucene87Codec_postingsFormat(t_Lucene87Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene87Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene87Codec_segmentInfoFormat(t_Lucene87Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene87Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene87Codec_storedFieldsFormat(t_Lucene87Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene87Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene87Codec_termVectorsFormat(t_Lucene87Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene87Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Map$Entry.h"
#include "java/util/Map$Entry.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Map$Entry::class$ = NULL;
    jmethodID *Map$Entry::mids$ = NULL;
    bool Map$Entry::live$ = false;

    jclass Map$Entry::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Map$Entry");

        mids$ = new jmethodID[max_mid];
        mids$[mid_comparingByKey_beb0414e0ec1de00] = env->getStaticMethodID(cls, "comparingByKey", "()Ljava/util/Comparator;");
        mids$[mid_comparingByKey_5cea92c6ee384471] = env->getStaticMethodID(cls, "comparingByKey", "(Ljava/util/Comparator;)Ljava/util/Comparator;");
        mids$[mid_comparingByValue_beb0414e0ec1de00] = env->getStaticMethodID(cls, "comparingByValue", "()Ljava/util/Comparator;");
        mids$[mid_comparingByValue_5cea92c6ee384471] = env->getStaticMethodID(cls, "comparingByValue", "(Ljava/util/Comparator;)Ljava/util/Comparator;");
        mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getKey_d6bcd06f3102c4d9] = env->getMethodID(cls, "getKey", "()Ljava/lang/Object;");
        mids$[mid_getValue_d6bcd06f3102c4d9] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
        mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_setValue_e5ae0f8c04795fa9] = env->getMethodID(cls, "setValue", "(Ljava/lang/Object;)Ljava/lang/Object;");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::util::Comparator Map$Entry::comparingByKey()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_comparingByKey_beb0414e0ec1de00]));
    }

    ::java::util::Comparator Map$Entry::comparingByKey(const ::java::util::Comparator & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_comparingByKey_5cea92c6ee384471], a0.this$));
    }

    ::java::util::Comparator Map$Entry::comparingByValue()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_comparingByValue_beb0414e0ec1de00]));
    }

    ::java::util::Comparator Map$Entry::comparingByValue(const ::java::util::Comparator & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_comparingByValue_5cea92c6ee384471], a0.this$));
    }

    jboolean Map$Entry::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
    }

    ::java::lang::Object Map$Entry::getKey() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getKey_d6bcd06f3102c4d9]));
    }

    ::java::lang::Object Map$Entry::getValue() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_d6bcd06f3102c4d9]));
    }

    jint Map$Entry::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
    }

    ::java::lang::Object Map$Entry::setValue(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_setValue_e5ae0f8c04795fa9], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Map$Entry_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Map$Entry_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Map$Entry_of_(t_Map$Entry *self, PyObject *args);
    static PyObject *t_Map$Entry_comparingByKey(PyTypeObject *type, PyObject *args);
    static PyObject *t_Map$Entry_comparingByValue(PyTypeObject *type, PyObject *args);
    static PyObject *t_Map$Entry_equals(t_Map$Entry *self, PyObject *args);
    static PyObject *t_Map$Entry_getKey(t_Map$Entry *self);
    static PyObject *t_Map$Entry_getValue(t_Map$Entry *self);
    static PyObject *t_Map$Entry_hashCode(t_Map$Entry *self, PyObject *args);
    static PyObject *t_Map$Entry_setValue(t_Map$Entry *self, PyObject *arg);
    static PyObject *t_Map$Entry_get__key(t_Map$Entry *self, void *data);
    static PyObject *t_Map$Entry_get__value(t_Map$Entry *self, void *data);
    static int t_Map$Entry_set__value(t_Map$Entry *self, PyObject *arg, void *data);
    static PyObject *t_Map$Entry_get__parameters_(t_Map$Entry *self, void *data);
    static PyGetSetDef t_Map$Entry__fields_[] = {
      DECLARE_GET_FIELD(t_Map$Entry, key),
      DECLARE_GETSET_FIELD(t_Map$Entry, value),
      DECLARE_GET_FIELD(t_Map$Entry, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Map$Entry__methods_[] = {
      DECLARE_METHOD(t_Map$Entry, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Map$Entry, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Map$Entry, of_, METH_VARARGS),
      DECLARE_METHOD(t_Map$Entry, comparingByKey, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Map$Entry, comparingByValue, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Map$Entry, equals, METH_VARARGS),
      DECLARE_METHOD(t_Map$Entry, getKey, METH_NOARGS),
      DECLARE_METHOD(t_Map$Entry, getValue, METH_NOARGS),
      DECLARE_METHOD(t_Map$Entry, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Map$Entry, setValue, METH_O),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Map$Entry)[] = {
      { Py_tp_methods, t_Map$Entry__methods_ },
      { Py_tp_init, (void *) abstract_init },
      { Py_tp_getset, t_Map$Entry__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Map$Entry)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(Map$Entry, t_Map$Entry, Map$Entry);
    PyObject *t_Map$Entry::wrap_Object(const Map$Entry& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_Map$Entry::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Map$Entry *self = (t_Map$Entry *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    PyObject *t_Map$Entry::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_Map$Entry::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Map$Entry *self = (t_Map$Entry *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    void t_Map$Entry::install(PyObject *module)
    {
      installType(&PY_TYPE(Map$Entry), &PY_TYPE_DEF(Map$Entry), module, "Map$Entry", 0);
    }

    void t_Map$Entry::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Map$Entry), "class_", make_descriptor(Map$Entry::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Map$Entry), "wrapfn_", make_descriptor(t_Map$Entry::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Map$Entry), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Map$Entry_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Map$Entry::initializeClass, 1)))
        return NULL;
      return t_Map$Entry::wrap_Object(Map$Entry(((t_Map$Entry *) arg)->object.this$));
    }
    static PyObject *t_Map$Entry_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Map$Entry::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Map$Entry_of_(t_Map$Entry *self, PyObject *args)
    {
      if (!parseArg(args, "T", 2, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Map$Entry_comparingByKey(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::java::util::Map$Entry::comparingByKey());
          return ::java::util::t_Comparator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Map$Entry::comparingByKey(a0));
            return ::java::util::t_Comparator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "comparingByKey", args);
      return NULL;
    }

    static PyObject *t_Map$Entry_comparingByValue(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::java::util::Map$Entry::comparingByValue());
          return ::java::util::t_Comparator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Map$Entry::comparingByValue(a0));
            return ::java::util::t_Comparator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "comparingByValue", args);
      return NULL;
    }

    static PyObject *t_Map$Entry_equals(t_Map$Entry *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(Map$Entry), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Map$Entry_getKey(t_Map$Entry *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.getKey());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Map$Entry_getValue(t_Map$Entry *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.getValue());
      return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Map$Entry_hashCode(t_Map$Entry *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Map$Entry), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Map$Entry_setValue(t_Map$Entry *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[1], &a0))
      {
        OBJ_CALL(result = self->object.setValue(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "setValue", arg);
      return NULL;
    }
    static PyObject *t_Map$Entry_get__parameters_(t_Map$Entry *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_Map$Entry_get__key(t_Map$Entry *self, void *data)
    {
      ::java::lang::Object value((jobject) NULL);
      OBJ_CALL(value = self->object.getKey());
      return ::java::lang::t_Object::wrap_Object(value);
    }

    static PyObject *t_Map$Entry_get__value(t_Map$Entry *self, void *data)
    {
      ::java::lang::Object value((jobject) NULL);
      OBJ_CALL(value = self->object.getValue());
      return ::java::lang::t_Object::wrap_Object(value);
    }
    static int t_Map$Entry_set__value(t_Map$Entry *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::Object value((jobject) NULL);
        if (!parseArg(arg, "o", &value))
        {
          INT_CALL(self->object.setValue(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "value", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/comparators/MinDocIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {

          ::java::lang::Class *MinDocIterator::class$ = NULL;
          jmethodID *MinDocIterator::mids$ = NULL;
          bool MinDocIterator::live$ = false;

          jclass MinDocIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/comparators/MinDocIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
              mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
              mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint MinDocIterator::advance(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
          }

          jlong MinDocIterator::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
          }

          jint MinDocIterator::docID() const
          {
            return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
          }

          jint MinDocIterator::nextDoc() const
          {
            return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {
          static PyObject *t_MinDocIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinDocIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinDocIterator_advance(t_MinDocIterator *self, PyObject *args);
          static PyObject *t_MinDocIterator_cost(t_MinDocIterator *self, PyObject *args);
          static PyObject *t_MinDocIterator_docID(t_MinDocIterator *self, PyObject *args);
          static PyObject *t_MinDocIterator_nextDoc(t_MinDocIterator *self, PyObject *args);

          static PyMethodDef t_MinDocIterator__methods_[] = {
            DECLARE_METHOD(t_MinDocIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinDocIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinDocIterator, advance, METH_VARARGS),
            DECLARE_METHOD(t_MinDocIterator, cost, METH_VARARGS),
            DECLARE_METHOD(t_MinDocIterator, docID, METH_VARARGS),
            DECLARE_METHOD(t_MinDocIterator, nextDoc, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MinDocIterator)[] = {
            { Py_tp_methods, t_MinDocIterator__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MinDocIterator)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::DocIdSetIterator),
            NULL
          };

          DEFINE_TYPE(MinDocIterator, t_MinDocIterator, MinDocIterator);

          void t_MinDocIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(MinDocIterator), &PY_TYPE_DEF(MinDocIterator), module, "MinDocIterator", 0);
          }

          void t_MinDocIterator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MinDocIterator), "class_", make_descriptor(MinDocIterator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MinDocIterator), "wrapfn_", make_descriptor(t_MinDocIterator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MinDocIterator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MinDocIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MinDocIterator::initializeClass, 1)))
              return NULL;
            return t_MinDocIterator::wrap_Object(MinDocIterator(((t_MinDocIterator *) arg)->object.this$));
          }
          static PyObject *t_MinDocIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MinDocIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_MinDocIterator_advance(t_MinDocIterator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.advance(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(MinDocIterator), (PyObject *) self, "advance", args, 2);
          }

          static PyObject *t_MinDocIterator_cost(t_MinDocIterator *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(MinDocIterator), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_MinDocIterator_docID(t_MinDocIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docID());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(MinDocIterator), (PyObject *) self, "docID", args, 2);
          }

          static PyObject *t_MinDocIterator_nextDoc(t_MinDocIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextDoc());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(MinDocIterator), (PyObject *) self, "nextDoc", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/bkd/BKDWriter.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/util/bkd/BKDReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/util/bkd/BKDConfig.h"
#include "java/io/Closeable.h"
#include "java/lang/Runnable.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/MergeState$DocMap.h"
#include "org/apache/lucene/codecs/MutablePointValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {

          ::java::lang::Class *BKDWriter::class$ = NULL;
          jmethodID *BKDWriter::mids$ = NULL;
          bool BKDWriter::live$ = false;
          ::java::lang::String *BKDWriter::CODEC_NAME = NULL;
          jfloat BKDWriter::DEFAULT_MAX_MB_SORT_IN_HEAP = (jfloat) 0;
          jint BKDWriter::VERSION_CURRENT = (jint) 0;
          jint BKDWriter::VERSION_LEAF_STORES_BOUNDS = (jint) 0;
          jint BKDWriter::VERSION_LOW_CARDINALITY_LEAVES = (jint) 0;
          jint BKDWriter::VERSION_META_FILE = (jint) 0;
          jint BKDWriter::VERSION_SELECTIVE_INDEXING = (jint) 0;
          jint BKDWriter::VERSION_START = (jint) 0;

          jclass BKDWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/bkd/BKDWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_874a69cfbdf26ce0] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/util/bkd/BKDConfig;DJ)V");
              mids$[mid_add_2a8b02a5adcbf830] = env->getMethodID(cls, "add", "([BI)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_322db56b13c6465e] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/store/IndexOutput;Lorg/apache/lucene/store/IndexOutput;Lorg/apache/lucene/store/IndexOutput;)Ljava/lang/Runnable;");
              mids$[mid_merge_709351e38be71bf0] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/store/IndexOutput;Lorg/apache/lucene/store/IndexOutput;Lorg/apache/lucene/store/IndexOutput;Ljava/util/List;Ljava/util/List;)Ljava/lang/Runnable;");
              mids$[mid_writeField_750ab25e7139f476] = env->getMethodID(cls, "writeField", "(Lorg/apache/lucene/store/IndexOutput;Lorg/apache/lucene/store/IndexOutput;Lorg/apache/lucene/store/IndexOutput;Ljava/lang/String;Lorg/apache/lucene/codecs/MutablePointValues;)Ljava/lang/Runnable;");
              mids$[mid_split_4b1769c6ea166762] = env->getMethodID(cls, "split", "([B[B[I)I");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              CODEC_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "CODEC_NAME", "Ljava/lang/String;"));
              DEFAULT_MAX_MB_SORT_IN_HEAP = env->getStaticFloatField(cls, "DEFAULT_MAX_MB_SORT_IN_HEAP");
              VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
              VERSION_LEAF_STORES_BOUNDS = env->getStaticIntField(cls, "VERSION_LEAF_STORES_BOUNDS");
              VERSION_LOW_CARDINALITY_LEAVES = env->getStaticIntField(cls, "VERSION_LOW_CARDINALITY_LEAVES");
              VERSION_META_FILE = env->getStaticIntField(cls, "VERSION_META_FILE");
              VERSION_SELECTIVE_INDEXING = env->getStaticIntField(cls, "VERSION_SELECTIVE_INDEXING");
              VERSION_START = env->getStaticIntField(cls, "VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BKDWriter::BKDWriter(jint a0, const ::org::apache::lucene::store::Directory & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::bkd::BKDConfig & a3, jdouble a4, jlong a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_874a69cfbdf26ce0, a0, a1.this$, a2.this$, a3.this$, a4, a5)) {}

          void BKDWriter::add(const JArray< jbyte > & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_add_2a8b02a5adcbf830], a0.this$, a1);
          }

          void BKDWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          ::java::lang::Runnable BKDWriter::finish(const ::org::apache::lucene::store::IndexOutput & a0, const ::org::apache::lucene::store::IndexOutput & a1, const ::org::apache::lucene::store::IndexOutput & a2) const
          {
            return ::java::lang::Runnable(env->callObjectMethod(this$, mids$[mid_finish_322db56b13c6465e], a0.this$, a1.this$, a2.this$));
          }

          ::java::lang::Runnable BKDWriter::merge(const ::org::apache::lucene::store::IndexOutput & a0, const ::org::apache::lucene::store::IndexOutput & a1, const ::org::apache::lucene::store::IndexOutput & a2, const ::java::util::List & a3, const ::java::util::List & a4) const
          {
            return ::java::lang::Runnable(env->callObjectMethod(this$, mids$[mid_merge_709351e38be71bf0], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$));
          }

          ::java::lang::Runnable BKDWriter::writeField(const ::org::apache::lucene::store::IndexOutput & a0, const ::org::apache::lucene::store::IndexOutput & a1, const ::org::apache::lucene::store::IndexOutput & a2, const ::java::lang::String & a3, const ::org::apache::lucene::codecs::MutablePointValues & a4) const
          {
            return ::java::lang::Runnable(env->callObjectMethod(this$, mids$[mid_writeField_750ab25e7139f476], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {
          static PyObject *t_BKDWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BKDWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BKDWriter_init_(t_BKDWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BKDWriter_add(t_BKDWriter *self, PyObject *args);
          static PyObject *t_BKDWriter_close(t_BKDWriter *self);
          static PyObject *t_BKDWriter_finish(t_BKDWriter *self, PyObject *args);
          static PyObject *t_BKDWriter_merge(t_BKDWriter *self, PyObject *args);
          static PyObject *t_BKDWriter_writeField(t_BKDWriter *self, PyObject *args);

          static PyMethodDef t_BKDWriter__methods_[] = {
            DECLARE_METHOD(t_BKDWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BKDWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BKDWriter, add, METH_VARARGS),
            DECLARE_METHOD(t_BKDWriter, close, METH_NOARGS),
            DECLARE_METHOD(t_BKDWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_BKDWriter, merge, METH_VARARGS),
            DECLARE_METHOD(t_BKDWriter, writeField, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BKDWriter)[] = {
            { Py_tp_methods, t_BKDWriter__methods_ },
            { Py_tp_init, (void *) t_BKDWriter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BKDWriter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BKDWriter, t_BKDWriter, BKDWriter);

          void t_BKDWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(BKDWriter), &PY_TYPE_DEF(BKDWriter), module, "BKDWriter", 0);
          }

          void t_BKDWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDWriter), "class_", make_descriptor(BKDWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDWriter), "wrapfn_", make_descriptor(t_BKDWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDWriter), "boxfn_", make_descriptor(boxObject));
            env->getClass(BKDWriter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDWriter), "CODEC_NAME", make_descriptor(j2p(*BKDWriter::CODEC_NAME)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDWriter), "DEFAULT_MAX_MB_SORT_IN_HEAP", make_descriptor(BKDWriter::DEFAULT_MAX_MB_SORT_IN_HEAP));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDWriter), "VERSION_CURRENT", make_descriptor(BKDWriter::VERSION_CURRENT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDWriter), "VERSION_LEAF_STORES_BOUNDS", make_descriptor(BKDWriter::VERSION_LEAF_STORES_BOUNDS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDWriter), "VERSION_LOW_CARDINALITY_LEAVES", make_descriptor(BKDWriter::VERSION_LOW_CARDINALITY_LEAVES));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDWriter), "VERSION_META_FILE", make_descriptor(BKDWriter::VERSION_META_FILE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDWriter), "VERSION_SELECTIVE_INDEXING", make_descriptor(BKDWriter::VERSION_SELECTIVE_INDEXING));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDWriter), "VERSION_START", make_descriptor(BKDWriter::VERSION_START));
          }

          static PyObject *t_BKDWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BKDWriter::initializeClass, 1)))
              return NULL;
            return t_BKDWriter::wrap_Object(BKDWriter(((t_BKDWriter *) arg)->object.this$));
          }
          static PyObject *t_BKDWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BKDWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BKDWriter_init_(t_BKDWriter *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::org::apache::lucene::store::Directory a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::util::bkd::BKDConfig a3((jobject) NULL);
            jdouble a4;
            jlong a5;
            BKDWriter object((jobject) NULL);

            if (!parseArgs(args, "IkskDJ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::util::bkd::BKDConfig::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = BKDWriter(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BKDWriter_add(t_BKDWriter *self, PyObject *args)
          {
            JArray< jbyte > a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "[BI", &a0, &a1))
            {
              OBJ_CALL(self->object.add(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_BKDWriter_close(t_BKDWriter *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          static PyObject *t_BKDWriter_finish(t_BKDWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);
            ::org::apache::lucene::store::IndexOutput a1((jobject) NULL);
            ::org::apache::lucene::store::IndexOutput a2((jobject) NULL);
            ::java::lang::Runnable result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::IndexOutput::initializeClass, ::org::apache::lucene::store::IndexOutput::initializeClass, ::org::apache::lucene::store::IndexOutput::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.finish(a0, a1, a2));
              return ::java::lang::t_Runnable::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "finish", args);
            return NULL;
          }

          static PyObject *t_BKDWriter_merge(t_BKDWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);
            ::org::apache::lucene::store::IndexOutput a1((jobject) NULL);
            ::org::apache::lucene::store::IndexOutput a2((jobject) NULL);
            ::java::util::List a3((jobject) NULL);
            PyTypeObject **p3;
            ::java::util::List a4((jobject) NULL);
            PyTypeObject **p4;
            ::java::lang::Runnable result((jobject) NULL);

            if (!parseArgs(args, "kkkKK", ::org::apache::lucene::store::IndexOutput::initializeClass, ::org::apache::lucene::store::IndexOutput::initializeClass, ::org::apache::lucene::store::IndexOutput::initializeClass, ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_List::parameters_, &a4, &p4, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.merge(a0, a1, a2, a3, a4));
              return ::java::lang::t_Runnable::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "merge", args);
            return NULL;
          }

          static PyObject *t_BKDWriter_writeField(t_BKDWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);
            ::org::apache::lucene::store::IndexOutput a1((jobject) NULL);
            ::org::apache::lucene::store::IndexOutput a2((jobject) NULL);
            ::java::lang::String a3((jobject) NULL);
            ::org::apache::lucene::codecs::MutablePointValues a4((jobject) NULL);
            ::java::lang::Runnable result((jobject) NULL);

            if (!parseArgs(args, "kkksk", ::org::apache::lucene::store::IndexOutput::initializeClass, ::org::apache::lucene::store::IndexOutput::initializeClass, ::org::apache::lucene::store::IndexOutput::initializeClass, ::org::apache::lucene::codecs::MutablePointValues::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.writeField(a0, a1, a2, a3, a4));
              return ::java::lang::t_Runnable::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "writeField", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/BlockPackedReaderIterator.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/util/LongsRef.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *BlockPackedReaderIterator::class$ = NULL;
          jmethodID *BlockPackedReaderIterator::mids$ = NULL;
          bool BlockPackedReaderIterator::live$ = false;

          jclass BlockPackedReaderIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/BlockPackedReaderIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_833e222fae0993d8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;IIJ)V");
              mids$[mid_next_2e5ae9edcb9b072f] = env->getMethodID(cls, "next", "()J");
              mids$[mid_next_3d317fe777ddb931] = env->getMethodID(cls, "next", "(I)Lorg/apache/lucene/util/LongsRef;");
              mids$[mid_ord_2e5ae9edcb9b072f] = env->getMethodID(cls, "ord", "()J");
              mids$[mid_reset_4833aa1d1f4cf120] = env->getMethodID(cls, "reset", "(Lorg/apache/lucene/store/DataInput;J)V");
              mids$[mid_skip_9c778c9bce6694df] = env->getMethodID(cls, "skip", "(J)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockPackedReaderIterator::BlockPackedReaderIterator(const ::org::apache::lucene::store::DataInput & a0, jint a1, jint a2, jlong a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_833e222fae0993d8, a0.this$, a1, a2, a3)) {}

          jlong BlockPackedReaderIterator::next() const
          {
            return env->callLongMethod(this$, mids$[mid_next_2e5ae9edcb9b072f]);
          }

          ::org::apache::lucene::util::LongsRef BlockPackedReaderIterator::next(jint a0) const
          {
            return ::org::apache::lucene::util::LongsRef(env->callObjectMethod(this$, mids$[mid_next_3d317fe777ddb931], a0));
          }

          jlong BlockPackedReaderIterator::ord() const
          {
            return env->callLongMethod(this$, mids$[mid_ord_2e5ae9edcb9b072f]);
          }

          void BlockPackedReaderIterator::reset(const ::org::apache::lucene::store::DataInput & a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_reset_4833aa1d1f4cf120], a0.this$, a1);
          }

          void BlockPackedReaderIterator::skip(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skip_9c778c9bce6694df], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_BlockPackedReaderIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockPackedReaderIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockPackedReaderIterator_init_(t_BlockPackedReaderIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockPackedReaderIterator_next(t_BlockPackedReaderIterator *self, PyObject *args);
          static PyObject *t_BlockPackedReaderIterator_ord(t_BlockPackedReaderIterator *self);
          static PyObject *t_BlockPackedReaderIterator_reset(t_BlockPackedReaderIterator *self, PyObject *args);
          static PyObject *t_BlockPackedReaderIterator_skip(t_BlockPackedReaderIterator *self, PyObject *arg);

          static PyMethodDef t_BlockPackedReaderIterator__methods_[] = {
            DECLARE_METHOD(t_BlockPackedReaderIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, ord, METH_NOARGS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, reset, METH_VARARGS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, skip, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BlockPackedReaderIterator)[] = {
            { Py_tp_methods, t_BlockPackedReaderIterator__methods_ },
            { Py_tp_init, (void *) t_BlockPackedReaderIterator_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BlockPackedReaderIterator)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BlockPackedReaderIterator, t_BlockPackedReaderIterator, BlockPackedReaderIterator);

          void t_BlockPackedReaderIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockPackedReaderIterator), &PY_TYPE_DEF(BlockPackedReaderIterator), module, "BlockPackedReaderIterator", 0);
          }

          void t_BlockPackedReaderIterator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockPackedReaderIterator), "class_", make_descriptor(BlockPackedReaderIterator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockPackedReaderIterator), "wrapfn_", make_descriptor(t_BlockPackedReaderIterator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockPackedReaderIterator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockPackedReaderIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockPackedReaderIterator::initializeClass, 1)))
              return NULL;
            return t_BlockPackedReaderIterator::wrap_Object(BlockPackedReaderIterator(((t_BlockPackedReaderIterator *) arg)->object.this$));
          }
          static PyObject *t_BlockPackedReaderIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockPackedReaderIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockPackedReaderIterator_init_(t_BlockPackedReaderIterator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jint a1;
            jint a2;
            jlong a3;
            BlockPackedReaderIterator object((jobject) NULL);

            if (!parseArgs(args, "kIIJ", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = BlockPackedReaderIterator(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockPackedReaderIterator_next(t_BlockPackedReaderIterator *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.next());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::LongsRef result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.next(a0));
                  return ::org::apache::lucene::util::t_LongsRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "next", args);
            return NULL;
          }

          static PyObject *t_BlockPackedReaderIterator_ord(t_BlockPackedReaderIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BlockPackedReaderIterator_reset(t_BlockPackedReaderIterator *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jlong a1;

            if (!parseArgs(args, "kJ", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.reset(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "reset", args);
            return NULL;
          }

          static PyObject *t_BlockPackedReaderIterator_skip(t_BlockPackedReaderIterator *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.skip(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "skip", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/NoMergeScheduler.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "org/apache/lucene/index/MergeScheduler$MergeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *NoMergeScheduler::class$ = NULL;
        jmethodID *NoMergeScheduler::mids$ = NULL;
        bool NoMergeScheduler::live$ = false;
        ::org::apache::lucene::index::MergeScheduler *NoMergeScheduler::INSTANCE = NULL;

        jclass NoMergeScheduler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/NoMergeScheduler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_5b8711e0a4a13251] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/MergeScheduler;");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_merge_d538047dffd358b1] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeScheduler$MergeSource;Lorg/apache/lucene/index/MergeTrigger;)V");
            mids$[mid_wrapForMerge_44a548f62b1a07fc] = env->getMethodID(cls, "wrapForMerge", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;Lorg/apache/lucene/store/Directory;)Lorg/apache/lucene/store/Directory;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            INSTANCE = new ::org::apache::lucene::index::MergeScheduler(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/index/MergeScheduler;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::MergeScheduler NoMergeScheduler::clone() const
        {
          return ::org::apache::lucene::index::MergeScheduler(env->callObjectMethod(this$, mids$[mid_clone_5b8711e0a4a13251]));
        }

        void NoMergeScheduler::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        void NoMergeScheduler::merge(const ::org::apache::lucene::index::MergeScheduler$MergeSource & a0, const ::org::apache::lucene::index::MergeTrigger & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_d538047dffd358b1], a0.this$, a1.this$);
        }

        ::org::apache::lucene::store::Directory NoMergeScheduler::wrapForMerge(const ::org::apache::lucene::index::MergePolicy$OneMerge & a0, const ::org::apache::lucene::store::Directory & a1) const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_wrapForMerge_44a548f62b1a07fc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_NoMergeScheduler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoMergeScheduler_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoMergeScheduler_clone(t_NoMergeScheduler *self);
        static PyObject *t_NoMergeScheduler_close(t_NoMergeScheduler *self, PyObject *args);
        static PyObject *t_NoMergeScheduler_merge(t_NoMergeScheduler *self, PyObject *args);
        static PyObject *t_NoMergeScheduler_wrapForMerge(t_NoMergeScheduler *self, PyObject *args);

        static PyMethodDef t_NoMergeScheduler__methods_[] = {
          DECLARE_METHOD(t_NoMergeScheduler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoMergeScheduler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoMergeScheduler, clone, METH_NOARGS),
          DECLARE_METHOD(t_NoMergeScheduler, close, METH_VARARGS),
          DECLARE_METHOD(t_NoMergeScheduler, merge, METH_VARARGS),
          DECLARE_METHOD(t_NoMergeScheduler, wrapForMerge, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NoMergeScheduler)[] = {
          { Py_tp_methods, t_NoMergeScheduler__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NoMergeScheduler)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::MergeScheduler),
          NULL
        };

        DEFINE_TYPE(NoMergeScheduler, t_NoMergeScheduler, NoMergeScheduler);

        void t_NoMergeScheduler::install(PyObject *module)
        {
          installType(&PY_TYPE(NoMergeScheduler), &PY_TYPE_DEF(NoMergeScheduler), module, "NoMergeScheduler", 0);
        }

        void t_NoMergeScheduler::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NoMergeScheduler), "class_", make_descriptor(NoMergeScheduler::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NoMergeScheduler), "wrapfn_", make_descriptor(t_NoMergeScheduler::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NoMergeScheduler), "boxfn_", make_descriptor(boxObject));
          env->getClass(NoMergeScheduler::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(NoMergeScheduler), "INSTANCE", make_descriptor(::org::apache::lucene::index::t_MergeScheduler::wrap_Object(*NoMergeScheduler::INSTANCE)));
        }

        static PyObject *t_NoMergeScheduler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoMergeScheduler::initializeClass, 1)))
            return NULL;
          return t_NoMergeScheduler::wrap_Object(NoMergeScheduler(((t_NoMergeScheduler *) arg)->object.this$));
        }
        static PyObject *t_NoMergeScheduler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoMergeScheduler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NoMergeScheduler_clone(t_NoMergeScheduler *self)
        {
          ::org::apache::lucene::index::MergeScheduler result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(result);
        }

        static PyObject *t_NoMergeScheduler_close(t_NoMergeScheduler *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(NoMergeScheduler), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_NoMergeScheduler_merge(t_NoMergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeScheduler$MergeSource a0((jobject) NULL);
          ::org::apache::lucene::index::MergeTrigger a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::index::MergeScheduler$MergeSource::initializeClass, ::org::apache::lucene::index::MergeTrigger::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_MergeTrigger::parameters_))
          {
            OBJ_CALL(self->object.merge(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(NoMergeScheduler), (PyObject *) self, "merge", args, 2);
        }

        static PyObject *t_NoMergeScheduler_wrapForMerge(t_NoMergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge a0((jobject) NULL);
          ::org::apache::lucene::store::Directory a1((jobject) NULL);
          ::org::apache::lucene::store::Directory result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::MergePolicy$OneMerge::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.wrapForMerge(a0, a1));
            return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
          }

          return callSuper(PY_TYPE(NoMergeScheduler), (PyObject *) self, "wrapForMerge", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/DictionaryToken.h"
#include "org/apache/lucene/analysis/ko/dict/Dictionary$Morpheme.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ko/dict/Dictionary.h"
#include "org/apache/lucene/analysis/ko/POS$Type.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ko/POS$Tag.h"
#include "org/apache/lucene/analysis/ko/KoreanTokenizer$Type.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {

          ::java::lang::Class *DictionaryToken::class$ = NULL;
          jmethodID *DictionaryToken::mids$ = NULL;
          bool DictionaryToken::live$ = false;

          jclass DictionaryToken::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/DictionaryToken");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c04bcab320147d7e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/ko/KoreanTokenizer$Type;Lorg/apache/lucene/analysis/ko/dict/Dictionary;I[CIIII)V");
              mids$[mid_getLeftPOS_6d27d9f5e0d7f31a] = env->getMethodID(cls, "getLeftPOS", "()Lorg/apache/lucene/analysis/ko/POS$Tag;");
              mids$[mid_getMorphemes_82c5e27eed5fc4af] = env->getMethodID(cls, "getMorphemes", "()[Lorg/apache/lucene/analysis/ko/dict/Dictionary$Morpheme;");
              mids$[mid_getPOSType_6e8b69211f216c5e] = env->getMethodID(cls, "getPOSType", "()Lorg/apache/lucene/analysis/ko/POS$Type;");
              mids$[mid_getReading_db9b55ba01e03e4b] = env->getMethodID(cls, "getReading", "()Ljava/lang/String;");
              mids$[mid_getRightPOS_6d27d9f5e0d7f31a] = env->getMethodID(cls, "getRightPOS", "()Lorg/apache/lucene/analysis/ko/POS$Tag;");
              mids$[mid_getType_3e090cda568d96dd] = env->getMethodID(cls, "getType", "()Lorg/apache/lucene/analysis/ko/KoreanTokenizer$Type;");
              mids$[mid_isKnown_8454bd5aa23fd11e] = env->getMethodID(cls, "isKnown", "()Z");
              mids$[mid_isUnknown_8454bd5aa23fd11e] = env->getMethodID(cls, "isUnknown", "()Z");
              mids$[mid_isUser_8454bd5aa23fd11e] = env->getMethodID(cls, "isUser", "()Z");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DictionaryToken::DictionaryToken(const ::org::apache::lucene::analysis::ko::KoreanTokenizer$Type & a0, const ::org::apache::lucene::analysis::ko::dict::Dictionary & a1, jint a2, const JArray< jchar > & a3, jint a4, jint a5, jint a6, jint a7) : ::org::apache::lucene::analysis::ko::Token(env->newObject(initializeClass, &mids$, mid_init$_c04bcab320147d7e, a0.this$, a1.this$, a2, a3.this$, a4, a5, a6, a7)) {}

          ::org::apache::lucene::analysis::ko::POS$Tag DictionaryToken::getLeftPOS() const
          {
            return ::org::apache::lucene::analysis::ko::POS$Tag(env->callObjectMethod(this$, mids$[mid_getLeftPOS_6d27d9f5e0d7f31a]));
          }

          JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > DictionaryToken::getMorphemes() const
          {
            return JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme >(env->callObjectMethod(this$, mids$[mid_getMorphemes_82c5e27eed5fc4af]));
          }

          ::org::apache::lucene::analysis::ko::POS$Type DictionaryToken::getPOSType() const
          {
            return ::org::apache::lucene::analysis::ko::POS$Type(env->callObjectMethod(this$, mids$[mid_getPOSType_6e8b69211f216c5e]));
          }

          ::java::lang::String DictionaryToken::getReading() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getReading_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::analysis::ko::POS$Tag DictionaryToken::getRightPOS() const
          {
            return ::org::apache::lucene::analysis::ko::POS$Tag(env->callObjectMethod(this$, mids$[mid_getRightPOS_6d27d9f5e0d7f31a]));
          }

          ::org::apache::lucene::analysis::ko::KoreanTokenizer$Type DictionaryToken::getType() const
          {
            return ::org::apache::lucene::analysis::ko::KoreanTokenizer$Type(env->callObjectMethod(this$, mids$[mid_getType_3e090cda568d96dd]));
          }

          jboolean DictionaryToken::isKnown() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isKnown_8454bd5aa23fd11e]);
          }

          jboolean DictionaryToken::isUnknown() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isUnknown_8454bd5aa23fd11e]);
          }

          jboolean DictionaryToken::isUser() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isUser_8454bd5aa23fd11e]);
          }

          ::java::lang::String DictionaryToken::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          static PyObject *t_DictionaryToken_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DictionaryToken_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DictionaryToken_init_(t_DictionaryToken *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DictionaryToken_getLeftPOS(t_DictionaryToken *self, PyObject *args);
          static PyObject *t_DictionaryToken_getMorphemes(t_DictionaryToken *self, PyObject *args);
          static PyObject *t_DictionaryToken_getPOSType(t_DictionaryToken *self, PyObject *args);
          static PyObject *t_DictionaryToken_getReading(t_DictionaryToken *self, PyObject *args);
          static PyObject *t_DictionaryToken_getRightPOS(t_DictionaryToken *self, PyObject *args);
          static PyObject *t_DictionaryToken_getType(t_DictionaryToken *self);
          static PyObject *t_DictionaryToken_isKnown(t_DictionaryToken *self);
          static PyObject *t_DictionaryToken_isUnknown(t_DictionaryToken *self);
          static PyObject *t_DictionaryToken_isUser(t_DictionaryToken *self);
          static PyObject *t_DictionaryToken_toString(t_DictionaryToken *self, PyObject *args);
          static PyObject *t_DictionaryToken_get__known(t_DictionaryToken *self, void *data);
          static PyObject *t_DictionaryToken_get__leftPOS(t_DictionaryToken *self, void *data);
          static PyObject *t_DictionaryToken_get__morphemes(t_DictionaryToken *self, void *data);
          static PyObject *t_DictionaryToken_get__pOSType(t_DictionaryToken *self, void *data);
          static PyObject *t_DictionaryToken_get__reading(t_DictionaryToken *self, void *data);
          static PyObject *t_DictionaryToken_get__rightPOS(t_DictionaryToken *self, void *data);
          static PyObject *t_DictionaryToken_get__type(t_DictionaryToken *self, void *data);
          static PyObject *t_DictionaryToken_get__unknown(t_DictionaryToken *self, void *data);
          static PyObject *t_DictionaryToken_get__user(t_DictionaryToken *self, void *data);
          static PyGetSetDef t_DictionaryToken__fields_[] = {
            DECLARE_GET_FIELD(t_DictionaryToken, known),
            DECLARE_GET_FIELD(t_DictionaryToken, leftPOS),
            DECLARE_GET_FIELD(t_DictionaryToken, morphemes),
            DECLARE_GET_FIELD(t_DictionaryToken, pOSType),
            DECLARE_GET_FIELD(t_DictionaryToken, reading),
            DECLARE_GET_FIELD(t_DictionaryToken, rightPOS),
            DECLARE_GET_FIELD(t_DictionaryToken, type),
            DECLARE_GET_FIELD(t_DictionaryToken, unknown),
            DECLARE_GET_FIELD(t_DictionaryToken, user),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DictionaryToken__methods_[] = {
            DECLARE_METHOD(t_DictionaryToken, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DictionaryToken, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DictionaryToken, getLeftPOS, METH_VARARGS),
            DECLARE_METHOD(t_DictionaryToken, getMorphemes, METH_VARARGS),
            DECLARE_METHOD(t_DictionaryToken, getPOSType, METH_VARARGS),
            DECLARE_METHOD(t_DictionaryToken, getReading, METH_VARARGS),
            DECLARE_METHOD(t_DictionaryToken, getRightPOS, METH_VARARGS),
            DECLARE_METHOD(t_DictionaryToken, getType, METH_NOARGS),
            DECLARE_METHOD(t_DictionaryToken, isKnown, METH_NOARGS),
            DECLARE_METHOD(t_DictionaryToken, isUnknown, METH_NOARGS),
            DECLARE_METHOD(t_DictionaryToken, isUser, METH_NOARGS),
            DECLARE_METHOD(t_DictionaryToken, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DictionaryToken)[] = {
            { Py_tp_methods, t_DictionaryToken__methods_ },
            { Py_tp_init, (void *) t_DictionaryToken_init_ },
            { Py_tp_getset, t_DictionaryToken__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DictionaryToken)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::ko::Token),
            NULL
          };

          DEFINE_TYPE(DictionaryToken, t_DictionaryToken, DictionaryToken);

          void t_DictionaryToken::install(PyObject *module)
          {
            installType(&PY_TYPE(DictionaryToken), &PY_TYPE_DEF(DictionaryToken), module, "DictionaryToken", 0);
          }

          void t_DictionaryToken::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryToken), "class_", make_descriptor(DictionaryToken::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryToken), "wrapfn_", make_descriptor(t_DictionaryToken::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryToken), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DictionaryToken_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DictionaryToken::initializeClass, 1)))
              return NULL;
            return t_DictionaryToken::wrap_Object(DictionaryToken(((t_DictionaryToken *) arg)->object.this$));
          }
          static PyObject *t_DictionaryToken_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DictionaryToken::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DictionaryToken_init_(t_DictionaryToken *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::ko::KoreanTokenizer$Type a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::ko::dict::Dictionary a1((jobject) NULL);
            jint a2;
            JArray< jchar > a3((jobject) NULL);
            jint a4;
            jint a5;
            jint a6;
            jint a7;
            DictionaryToken object((jobject) NULL);

            if (!parseArgs(args, "KkI[CIIII", ::org::apache::lucene::analysis::ko::KoreanTokenizer$Type::initializeClass, ::org::apache::lucene::analysis::ko::dict::Dictionary::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::ko::t_KoreanTokenizer$Type::parameters_, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
            {
              INT_CALL(object = DictionaryToken(a0, a1, a2, a3, a4, a5, a6, a7));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DictionaryToken_getLeftPOS(t_DictionaryToken *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::ko::POS$Tag result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getLeftPOS());
              return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DictionaryToken), (PyObject *) self, "getLeftPOS", args, 2);
          }

          static PyObject *t_DictionaryToken_getMorphemes(t_DictionaryToken *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMorphemes());
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::analysis::ko::dict::t_Dictionary$Morpheme::wrap_jobject);
            }

            return callSuper(PY_TYPE(DictionaryToken), (PyObject *) self, "getMorphemes", args, 2);
          }

          static PyObject *t_DictionaryToken_getPOSType(t_DictionaryToken *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::ko::POS$Type result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getPOSType());
              return ::org::apache::lucene::analysis::ko::t_POS$Type::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DictionaryToken), (PyObject *) self, "getPOSType", args, 2);
          }

          static PyObject *t_DictionaryToken_getReading(t_DictionaryToken *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getReading());
              return j2p(result);
            }

            return callSuper(PY_TYPE(DictionaryToken), (PyObject *) self, "getReading", args, 2);
          }

          static PyObject *t_DictionaryToken_getRightPOS(t_DictionaryToken *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::ko::POS$Tag result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getRightPOS());
              return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DictionaryToken), (PyObject *) self, "getRightPOS", args, 2);
          }

          static PyObject *t_DictionaryToken_getType(t_DictionaryToken *self)
          {
            ::org::apache::lucene::analysis::ko::KoreanTokenizer$Type result((jobject) NULL);
            OBJ_CALL(result = self->object.getType());
            return ::org::apache::lucene::analysis::ko::t_KoreanTokenizer$Type::wrap_Object(result);
          }

          static PyObject *t_DictionaryToken_isKnown(t_DictionaryToken *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isKnown());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_DictionaryToken_isUnknown(t_DictionaryToken *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isUnknown());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_DictionaryToken_isUser(t_DictionaryToken *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isUser());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_DictionaryToken_toString(t_DictionaryToken *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(DictionaryToken), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_DictionaryToken_get__known(t_DictionaryToken *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isKnown());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_DictionaryToken_get__leftPOS(t_DictionaryToken *self, void *data)
          {
            ::org::apache::lucene::analysis::ko::POS$Tag value((jobject) NULL);
            OBJ_CALL(value = self->object.getLeftPOS());
            return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(value);
          }

          static PyObject *t_DictionaryToken_get__morphemes(t_DictionaryToken *self, void *data)
          {
            JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMorphemes());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::analysis::ko::dict::t_Dictionary$Morpheme::wrap_jobject);
          }

          static PyObject *t_DictionaryToken_get__pOSType(t_DictionaryToken *self, void *data)
          {
            ::org::apache::lucene::analysis::ko::POS$Type value((jobject) NULL);
            OBJ_CALL(value = self->object.getPOSType());
            return ::org::apache::lucene::analysis::ko::t_POS$Type::wrap_Object(value);
          }

          static PyObject *t_DictionaryToken_get__reading(t_DictionaryToken *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getReading());
            return j2p(value);
          }

          static PyObject *t_DictionaryToken_get__rightPOS(t_DictionaryToken *self, void *data)
          {
            ::org::apache::lucene::analysis::ko::POS$Tag value((jobject) NULL);
            OBJ_CALL(value = self->object.getRightPOS());
            return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(value);
          }

          static PyObject *t_DictionaryToken_get__type(t_DictionaryToken *self, void *data)
          {
            ::org::apache::lucene::analysis::ko::KoreanTokenizer$Type value((jobject) NULL);
            OBJ_CALL(value = self->object.getType());
            return ::org::apache::lucene::analysis::ko::t_KoreanTokenizer$Type::wrap_Object(value);
          }

          static PyObject *t_DictionaryToken_get__unknown(t_DictionaryToken *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isUnknown());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_DictionaryToken_get__user(t_DictionaryToken *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isUser());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanPositionRangeBuilder.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanPositionRangeBuilder::class$ = NULL;
            jmethodID *SpanPositionRangeBuilder::mids$ = NULL;
            bool SpanPositionRangeBuilder::live$ = false;

            jclass SpanPositionRangeBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanPositionRangeBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_a59cd39e7afcbd2c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanPositionRangeBuilder::SpanPositionRangeBuilder(const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_a59cd39e7afcbd2c, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanPositionRangeBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanPositionRangeBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanPositionRangeBuilder_init_(t_SpanPositionRangeBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanPositionRangeBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanPositionRangeBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanPositionRangeBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SpanPositionRangeBuilder)[] = {
              { Py_tp_methods, t_SpanPositionRangeBuilder__methods_ },
              { Py_tp_init, (void *) t_SpanPositionRangeBuilder_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SpanPositionRangeBuilder)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase),
              NULL
            };

            DEFINE_TYPE(SpanPositionRangeBuilder, t_SpanPositionRangeBuilder, SpanPositionRangeBuilder);

            void t_SpanPositionRangeBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanPositionRangeBuilder), &PY_TYPE_DEF(SpanPositionRangeBuilder), module, "SpanPositionRangeBuilder", 0);
            }

            void t_SpanPositionRangeBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanPositionRangeBuilder), "class_", make_descriptor(SpanPositionRangeBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanPositionRangeBuilder), "wrapfn_", make_descriptor(t_SpanPositionRangeBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanPositionRangeBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanPositionRangeBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanPositionRangeBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanPositionRangeBuilder::wrap_Object(SpanPositionRangeBuilder(((t_SpanPositionRangeBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanPositionRangeBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanPositionRangeBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanPositionRangeBuilder_init_(t_SpanPositionRangeBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a0((jobject) NULL);
              SpanPositionRangeBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = SpanPositionRangeBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/intervals/IntervalsSource.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/intervals/IntervalIterator.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/intervals/IntervalsSource.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/queries/intervals/IntervalMatchesIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace intervals {

          ::java::lang::Class *IntervalsSource::class$ = NULL;
          jmethodID *IntervalsSource::mids$ = NULL;
          bool IntervalsSource::live$ = false;

          jclass IntervalsSource::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/intervals/IntervalsSource");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_intervals_80ec7682f3d26944] = env->getMethodID(cls, "intervals", "(Ljava/lang/String;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/intervals/IntervalIterator;");
              mids$[mid_matches_d5980412d2357d19] = env->getMethodID(cls, "matches", "(Ljava/lang/String;Lorg/apache/lucene/index/LeafReaderContext;I)Lorg/apache/lucene/queries/intervals/IntervalMatchesIterator;");
              mids$[mid_minExtent_9972fcc56b44e79d] = env->getMethodID(cls, "minExtent", "()I");
              mids$[mid_pullUpDisjunctions_d4dfbf7a26ff41df] = env->getMethodID(cls, "pullUpDisjunctions", "()Ljava/util/Collection;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_visit_1a0587fdd01f6343] = env->getMethodID(cls, "visit", "(Ljava/lang/String;Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntervalsSource::IntervalsSource() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jboolean IntervalsSource::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint IntervalsSource::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::queries::intervals::IntervalIterator IntervalsSource::intervals(const ::java::lang::String & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
          {
            return ::org::apache::lucene::queries::intervals::IntervalIterator(env->callObjectMethod(this$, mids$[mid_intervals_80ec7682f3d26944], a0.this$, a1.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalMatchesIterator IntervalsSource::matches(const ::java::lang::String & a0, const ::org::apache::lucene::index::LeafReaderContext & a1, jint a2) const
          {
            return ::org::apache::lucene::queries::intervals::IntervalMatchesIterator(env->callObjectMethod(this$, mids$[mid_matches_d5980412d2357d19], a0.this$, a1.this$, a2));
          }

          jint IntervalsSource::minExtent() const
          {
            return env->callIntMethod(this$, mids$[mid_minExtent_9972fcc56b44e79d]);
          }

          ::java::util::Collection IntervalsSource::pullUpDisjunctions() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_pullUpDisjunctions_d4dfbf7a26ff41df]));
          }

          ::java::lang::String IntervalsSource::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          void IntervalsSource::visit(const ::java::lang::String & a0, const ::org::apache::lucene::search::QueryVisitor & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_1a0587fdd01f6343], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace intervals {
          static PyObject *t_IntervalsSource_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntervalsSource_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IntervalsSource_init_(t_IntervalsSource *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntervalsSource_equals(t_IntervalsSource *self, PyObject *args);
          static PyObject *t_IntervalsSource_hashCode(t_IntervalsSource *self, PyObject *args);
          static PyObject *t_IntervalsSource_intervals(t_IntervalsSource *self, PyObject *args);
          static PyObject *t_IntervalsSource_matches(t_IntervalsSource *self, PyObject *args);
          static PyObject *t_IntervalsSource_minExtent(t_IntervalsSource *self);
          static PyObject *t_IntervalsSource_pullUpDisjunctions(t_IntervalsSource *self);
          static PyObject *t_IntervalsSource_toString(t_IntervalsSource *self, PyObject *args);
          static PyObject *t_IntervalsSource_visit(t_IntervalsSource *self, PyObject *args);

          static PyMethodDef t_IntervalsSource__methods_[] = {
            DECLARE_METHOD(t_IntervalsSource, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntervalsSource, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntervalsSource, equals, METH_VARARGS),
            DECLARE_METHOD(t_IntervalsSource, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_IntervalsSource, intervals, METH_VARARGS),
            DECLARE_METHOD(t_IntervalsSource, matches, METH_VARARGS),
            DECLARE_METHOD(t_IntervalsSource, minExtent, METH_NOARGS),
            DECLARE_METHOD(t_IntervalsSource, pullUpDisjunctions, METH_NOARGS),
            DECLARE_METHOD(t_IntervalsSource, toString, METH_VARARGS),
            DECLARE_METHOD(t_IntervalsSource, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IntervalsSource)[] = {
            { Py_tp_methods, t_IntervalsSource__methods_ },
            { Py_tp_init, (void *) t_IntervalsSource_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IntervalsSource)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(IntervalsSource, t_IntervalsSource, IntervalsSource);

          void t_IntervalsSource::install(PyObject *module)
          {
            installType(&PY_TYPE(IntervalsSource), &PY_TYPE_DEF(IntervalsSource), module, "IntervalsSource", 0);
          }

          void t_IntervalsSource::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntervalsSource), "class_", make_descriptor(IntervalsSource::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntervalsSource), "wrapfn_", make_descriptor(t_IntervalsSource::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntervalsSource), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntervalsSource_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntervalsSource::initializeClass, 1)))
              return NULL;
            return t_IntervalsSource::wrap_Object(IntervalsSource(((t_IntervalsSource *) arg)->object.this$));
          }
          static PyObject *t_IntervalsSource_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntervalsSource::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IntervalsSource_init_(t_IntervalsSource *self, PyObject *args, PyObject *kwds)
          {
            IntervalsSource object((jobject) NULL);

            INT_CALL(object = IntervalsSource());
            self->object = object;

            return 0;
          }

          static PyObject *t_IntervalsSource_equals(t_IntervalsSource *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(IntervalsSource), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_IntervalsSource_hashCode(t_IntervalsSource *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(IntervalsSource), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_IntervalsSource_intervals(t_IntervalsSource *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalIterator result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.intervals(a0, a1));
              return ::org::apache::lucene::queries::intervals::t_IntervalIterator::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "intervals", args);
            return NULL;
          }

          static PyObject *t_IntervalsSource_matches(t_IntervalsSource *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::queries::intervals::IntervalMatchesIterator result((jobject) NULL);

            if (!parseArgs(args, "skI", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.matches(a0, a1, a2));
              return ::org::apache::lucene::queries::intervals::t_IntervalMatchesIterator::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "matches", args);
            return NULL;
          }

          static PyObject *t_IntervalsSource_minExtent(t_IntervalsSource *self)
          {
            jint result;
            OBJ_CALL(result = self->object.minExtent());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_IntervalsSource_pullUpDisjunctions(t_IntervalsSource *self)
          {
            ::java::util::Collection result((jobject) NULL);
            OBJ_CALL(result = self->object.pullUpDisjunctions());
            return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::queries::intervals::PY_TYPE(IntervalsSource));
          }

          static PyObject *t_IntervalsSource_toString(t_IntervalsSource *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(IntervalsSource), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_IntervalsSource_visit(t_IntervalsSource *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::QueryVisitor a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.visit(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "visit", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocValuesStats$DoubleDocValuesStats.h"
#include "java/lang/String.h"
#include "java/lang/Double.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocValuesStats$DoubleDocValuesStats::class$ = NULL;
        jmethodID *DocValuesStats$DoubleDocValuesStats::mids$ = NULL;
        bool DocValuesStats$DoubleDocValuesStats::live$ = false;

        jclass DocValuesStats$DoubleDocValuesStats::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocValuesStats$DoubleDocValuesStats");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_sum_a3794238a110f68c] = env->getMethodID(cls, "sum", "()Ljava/lang/Double;");
            mids$[mid_doAccumulate_040c4cd0390c5aff] = env->getMethodID(cls, "doAccumulate", "(I)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocValuesStats$DoubleDocValuesStats::DocValuesStats$DoubleDocValuesStats(const ::java::lang::String & a0) : ::org::apache::lucene::search::DocValuesStats$NumericDocValuesStats(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

        ::java::lang::Double DocValuesStats$DoubleDocValuesStats::sum() const
        {
          return ::java::lang::Double(env->callObjectMethod(this$, mids$[mid_sum_a3794238a110f68c]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocValuesStats$DoubleDocValuesStats_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesStats$DoubleDocValuesStats_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesStats$DoubleDocValuesStats_of_(t_DocValuesStats$DoubleDocValuesStats *self, PyObject *args);
        static int t_DocValuesStats$DoubleDocValuesStats_init_(t_DocValuesStats$DoubleDocValuesStats *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocValuesStats$DoubleDocValuesStats_sum(t_DocValuesStats$DoubleDocValuesStats *self, PyObject *args);
        static PyObject *t_DocValuesStats$DoubleDocValuesStats_get__parameters_(t_DocValuesStats$DoubleDocValuesStats *self, void *data);
        static PyGetSetDef t_DocValuesStats$DoubleDocValuesStats__fields_[] = {
          DECLARE_GET_FIELD(t_DocValuesStats$DoubleDocValuesStats, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocValuesStats$DoubleDocValuesStats__methods_[] = {
          DECLARE_METHOD(t_DocValuesStats$DoubleDocValuesStats, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesStats$DoubleDocValuesStats, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesStats$DoubleDocValuesStats, of_, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesStats$DoubleDocValuesStats, sum, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocValuesStats$DoubleDocValuesStats)[] = {
          { Py_tp_methods, t_DocValuesStats$DoubleDocValuesStats__methods_ },
          { Py_tp_init, (void *) t_DocValuesStats$DoubleDocValuesStats_init_ },
          { Py_tp_getset, t_DocValuesStats$DoubleDocValuesStats__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocValuesStats$DoubleDocValuesStats)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::DocValuesStats$NumericDocValuesStats),
          NULL
        };

        DEFINE_TYPE(DocValuesStats$DoubleDocValuesStats, t_DocValuesStats$DoubleDocValuesStats, DocValuesStats$DoubleDocValuesStats);
        PyObject *t_DocValuesStats$DoubleDocValuesStats::wrap_Object(const DocValuesStats$DoubleDocValuesStats& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocValuesStats$DoubleDocValuesStats::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocValuesStats$DoubleDocValuesStats *self = (t_DocValuesStats$DoubleDocValuesStats *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DocValuesStats$DoubleDocValuesStats::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocValuesStats$DoubleDocValuesStats::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocValuesStats$DoubleDocValuesStats *self = (t_DocValuesStats$DoubleDocValuesStats *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DocValuesStats$DoubleDocValuesStats::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesStats$DoubleDocValuesStats), &PY_TYPE_DEF(DocValuesStats$DoubleDocValuesStats), module, "DocValuesStats$DoubleDocValuesStats", 0);
        }

        void t_DocValuesStats$DoubleDocValuesStats::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$DoubleDocValuesStats), "class_", make_descriptor(DocValuesStats$DoubleDocValuesStats::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$DoubleDocValuesStats), "wrapfn_", make_descriptor(t_DocValuesStats$DoubleDocValuesStats::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$DoubleDocValuesStats), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesStats$DoubleDocValuesStats_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesStats$DoubleDocValuesStats::initializeClass, 1)))
            return NULL;
          return t_DocValuesStats$DoubleDocValuesStats::wrap_Object(DocValuesStats$DoubleDocValuesStats(((t_DocValuesStats$DoubleDocValuesStats *) arg)->object.this$));
        }
        static PyObject *t_DocValuesStats$DoubleDocValuesStats_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesStats$DoubleDocValuesStats::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesStats$DoubleDocValuesStats_of_(t_DocValuesStats$DoubleDocValuesStats *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_DocValuesStats$DoubleDocValuesStats_init_(t_DocValuesStats$DoubleDocValuesStats *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          DocValuesStats$DoubleDocValuesStats object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = DocValuesStats$DoubleDocValuesStats(a0));
            self->object = object;
            self->parameters[0] = ::java::lang::PY_TYPE(Double);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocValuesStats$DoubleDocValuesStats_sum(t_DocValuesStats$DoubleDocValuesStats *self, PyObject *args)
        {
          ::java::lang::Double result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.sum());
            return ::java::lang::t_Double::wrap_Object(result);
          }

          return callSuper(PY_TYPE(DocValuesStats$DoubleDocValuesStats), (PyObject *) self, "sum", args, 2);
        }
        static PyObject *t_DocValuesStats$DoubleDocValuesStats_get__parameters_(t_DocValuesStats$DoubleDocValuesStats *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/GrowableByteArrayDataOutput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *GrowableByteArrayDataOutput::class$ = NULL;
        jmethodID *GrowableByteArrayDataOutput::mids$ = NULL;
        bool GrowableByteArrayDataOutput::live$ = false;

        jclass GrowableByteArrayDataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/GrowableByteArrayDataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_getBytes_cf386cdb1bbd339f] = env->getMethodID(cls, "getBytes", "()[B");
            mids$[mid_getPosition_9972fcc56b44e79d] = env->getMethodID(cls, "getPosition", "()I");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_writeByte_9c36fec3bac1d0c7] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "writeBytes", "([BII)V");
            mids$[mid_writeString_9fd2eb66a64e6f0f] = env->getMethodID(cls, "writeString", "(Ljava/lang/String;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        GrowableByteArrayDataOutput::GrowableByteArrayDataOutput(jint a0) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        JArray< jbyte > GrowableByteArrayDataOutput::getBytes() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getBytes_cf386cdb1bbd339f]));
        }

        jint GrowableByteArrayDataOutput::getPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_getPosition_9972fcc56b44e79d]);
        }

        jlong GrowableByteArrayDataOutput::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        void GrowableByteArrayDataOutput::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
        }

        void GrowableByteArrayDataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_9c36fec3bac1d0c7], a0);
        }

        void GrowableByteArrayDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }

        void GrowableByteArrayDataOutput::writeString(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeString_9fd2eb66a64e6f0f], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_GrowableByteArrayDataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GrowableByteArrayDataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_GrowableByteArrayDataOutput_init_(t_GrowableByteArrayDataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_GrowableByteArrayDataOutput_getBytes(t_GrowableByteArrayDataOutput *self);
        static PyObject *t_GrowableByteArrayDataOutput_getPosition(t_GrowableByteArrayDataOutput *self);
        static PyObject *t_GrowableByteArrayDataOutput_ramBytesUsed(t_GrowableByteArrayDataOutput *self);
        static PyObject *t_GrowableByteArrayDataOutput_reset(t_GrowableByteArrayDataOutput *self);
        static PyObject *t_GrowableByteArrayDataOutput_writeByte(t_GrowableByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_GrowableByteArrayDataOutput_writeBytes(t_GrowableByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_GrowableByteArrayDataOutput_writeString(t_GrowableByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_GrowableByteArrayDataOutput_get__bytes(t_GrowableByteArrayDataOutput *self, void *data);
        static PyObject *t_GrowableByteArrayDataOutput_get__position(t_GrowableByteArrayDataOutput *self, void *data);
        static PyGetSetDef t_GrowableByteArrayDataOutput__fields_[] = {
          DECLARE_GET_FIELD(t_GrowableByteArrayDataOutput, bytes),
          DECLARE_GET_FIELD(t_GrowableByteArrayDataOutput, position),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_GrowableByteArrayDataOutput__methods_[] = {
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, getBytes, METH_NOARGS),
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, reset, METH_NOARGS),
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, writeBytes, METH_VARARGS),
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, writeString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(GrowableByteArrayDataOutput)[] = {
          { Py_tp_methods, t_GrowableByteArrayDataOutput__methods_ },
          { Py_tp_init, (void *) t_GrowableByteArrayDataOutput_init_ },
          { Py_tp_getset, t_GrowableByteArrayDataOutput__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(GrowableByteArrayDataOutput)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::DataOutput),
          NULL
        };

        DEFINE_TYPE(GrowableByteArrayDataOutput, t_GrowableByteArrayDataOutput, GrowableByteArrayDataOutput);

        void t_GrowableByteArrayDataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(GrowableByteArrayDataOutput), &PY_TYPE_DEF(GrowableByteArrayDataOutput), module, "GrowableByteArrayDataOutput", 0);
        }

        void t_GrowableByteArrayDataOutput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(GrowableByteArrayDataOutput), "class_", make_descriptor(GrowableByteArrayDataOutput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GrowableByteArrayDataOutput), "wrapfn_", make_descriptor(t_GrowableByteArrayDataOutput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GrowableByteArrayDataOutput), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_GrowableByteArrayDataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, GrowableByteArrayDataOutput::initializeClass, 1)))
            return NULL;
          return t_GrowableByteArrayDataOutput::wrap_Object(GrowableByteArrayDataOutput(((t_GrowableByteArrayDataOutput *) arg)->object.this$));
        }
        static PyObject *t_GrowableByteArrayDataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, GrowableByteArrayDataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_GrowableByteArrayDataOutput_init_(t_GrowableByteArrayDataOutput *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          GrowableByteArrayDataOutput object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = GrowableByteArrayDataOutput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_GrowableByteArrayDataOutput_getBytes(t_GrowableByteArrayDataOutput *self)
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBytes());
          return result.wrap();
        }

        static PyObject *t_GrowableByteArrayDataOutput_getPosition(t_GrowableByteArrayDataOutput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPosition());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_GrowableByteArrayDataOutput_ramBytesUsed(t_GrowableByteArrayDataOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_GrowableByteArrayDataOutput_reset(t_GrowableByteArrayDataOutput *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }

        static PyObject *t_GrowableByteArrayDataOutput_writeByte(t_GrowableByteArrayDataOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(GrowableByteArrayDataOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_GrowableByteArrayDataOutput_writeBytes(t_GrowableByteArrayDataOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(GrowableByteArrayDataOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_GrowableByteArrayDataOutput_writeString(t_GrowableByteArrayDataOutput *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.writeString(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(GrowableByteArrayDataOutput), (PyObject *) self, "writeString", args, 2);
        }

        static PyObject *t_GrowableByteArrayDataOutput_get__bytes(t_GrowableByteArrayDataOutput *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getBytes());
          return value.wrap();
        }

        static PyObject *t_GrowableByteArrayDataOutput_get__position(t_GrowableByteArrayDataOutput *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPosition());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/PrefixWildcardQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/PrefixWildcardQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *PrefixWildcardQueryNode::class$ = NULL;
              jmethodID *PrefixWildcardQueryNode::mids$ = NULL;
              bool PrefixWildcardQueryNode::live$ = false;

              jclass PrefixWildcardQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/PrefixWildcardQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_67dc800ef31d2ab2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;)V");
                  mids$[mid_init$_9cb0cd96f3795799] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_7e82dea5d5b2b9da] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/standard/nodes/PrefixWildcardQueryNode;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PrefixWildcardQueryNode::PrefixWildcardQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode & a0) : ::org::apache::lucene::queryparser::flexible::standard::nodes::WildcardQueryNode(env->newObject(initializeClass, &mids$, mid_init$_67dc800ef31d2ab2, a0.this$)) {}

              PrefixWildcardQueryNode::PrefixWildcardQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::standard::nodes::WildcardQueryNode(env->newObject(initializeClass, &mids$, mid_init$_9cb0cd96f3795799, a0.this$, a1.this$, a2, a3)) {}

              PrefixWildcardQueryNode PrefixWildcardQueryNode::cloneTree() const
              {
                return PrefixWildcardQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_7e82dea5d5b2b9da]));
              }

              ::java::lang::String PrefixWildcardQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_PrefixWildcardQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PrefixWildcardQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PrefixWildcardQueryNode_init_(t_PrefixWildcardQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PrefixWildcardQueryNode_cloneTree(t_PrefixWildcardQueryNode *self, PyObject *args);
              static PyObject *t_PrefixWildcardQueryNode_toString(t_PrefixWildcardQueryNode *self, PyObject *args);

              static PyMethodDef t_PrefixWildcardQueryNode__methods_[] = {
                DECLARE_METHOD(t_PrefixWildcardQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrefixWildcardQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrefixWildcardQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_PrefixWildcardQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(PrefixWildcardQueryNode)[] = {
                { Py_tp_methods, t_PrefixWildcardQueryNode__methods_ },
                { Py_tp_init, (void *) t_PrefixWildcardQueryNode_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(PrefixWildcardQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::standard::nodes::WildcardQueryNode),
                NULL
              };

              DEFINE_TYPE(PrefixWildcardQueryNode, t_PrefixWildcardQueryNode, PrefixWildcardQueryNode);

              void t_PrefixWildcardQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(PrefixWildcardQueryNode), &PY_TYPE_DEF(PrefixWildcardQueryNode), module, "PrefixWildcardQueryNode", 0);
              }

              void t_PrefixWildcardQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixWildcardQueryNode), "class_", make_descriptor(PrefixWildcardQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixWildcardQueryNode), "wrapfn_", make_descriptor(t_PrefixWildcardQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixWildcardQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PrefixWildcardQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PrefixWildcardQueryNode::initializeClass, 1)))
                  return NULL;
                return t_PrefixWildcardQueryNode::wrap_Object(PrefixWildcardQueryNode(((t_PrefixWildcardQueryNode *) arg)->object.this$));
              }
              static PyObject *t_PrefixWildcardQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PrefixWildcardQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PrefixWildcardQueryNode_init_(t_PrefixWildcardQueryNode *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode a0((jobject) NULL);
                    PrefixWildcardQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode::initializeClass, &a0))
                    {
                      INT_CALL(object = PrefixWildcardQueryNode(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 4:
                  {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    ::java::lang::CharSequence a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    PrefixWildcardQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "OOII", ::java::lang::PY_TYPE(CharSequence), ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                    {
                      INT_CALL(object = PrefixWildcardQueryNode(a0, a1, a2, a3));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PrefixWildcardQueryNode_cloneTree(t_PrefixWildcardQueryNode *self, PyObject *args)
              {
                PrefixWildcardQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_PrefixWildcardQueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(PrefixWildcardQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_PrefixWildcardQueryNode_toString(t_PrefixWildcardQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(PrefixWildcardQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/Class.h"
#include "java/util/Locale.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLSException.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {

            ::java::lang::Class *QueryNodeException::class$ = NULL;
            jmethodID *QueryNodeException::mids$ = NULL;
            bool QueryNodeException::live$ = false;

            jclass QueryNodeException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/QueryNodeException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_471cfbdb800444a7] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
                mids$[mid_init$_26a7a119e2ed968d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                mids$[mid_init$_84e3b301d273e601] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;Ljava/lang/Throwable;)V");
                mids$[mid_getLocalizedMessage_db9b55ba01e03e4b] = env->getMethodID(cls, "getLocalizedMessage", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_8cbdae2bb55ad99c] = env->getMethodID(cls, "getLocalizedMessage", "(Ljava/util/Locale;)Ljava/lang/String;");
                mids$[mid_getMessage_db9b55ba01e03e4b] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
                mids$[mid_getMessageObject_daa3e60103dc49c2] = env->getMethodID(cls, "getMessageObject", "()Lorg/apache/lucene/queryparser/flexible/messages/Message;");
                mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryNodeException::QueryNodeException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_471cfbdb800444a7, a0.this$)) {}

            QueryNodeException::QueryNodeException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_26a7a119e2ed968d, a0.this$)) {}

            QueryNodeException::QueryNodeException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_84e3b301d273e601, a0.this$, a1.this$)) {}

            ::java::lang::String QueryNodeException::getLocalizedMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_db9b55ba01e03e4b]));
            }

            ::java::lang::String QueryNodeException::getLocalizedMessage(const ::java::util::Locale & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_8cbdae2bb55ad99c], a0.this$));
            }

            ::java::lang::String QueryNodeException::getMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_db9b55ba01e03e4b]));
            }

            ::org::apache::lucene::queryparser::flexible::messages::Message QueryNodeException::getMessageObject() const
            {
              return ::org::apache::lucene::queryparser::flexible::messages::Message(env->callObjectMethod(this$, mids$[mid_getMessageObject_daa3e60103dc49c2]));
            }

            ::java::lang::String QueryNodeException::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            static PyObject *t_QueryNodeException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryNodeException_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryNodeException_init_(t_QueryNodeException *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryNodeException_getLocalizedMessage(t_QueryNodeException *self, PyObject *args);
            static PyObject *t_QueryNodeException_getMessage(t_QueryNodeException *self, PyObject *args);
            static PyObject *t_QueryNodeException_getMessageObject(t_QueryNodeException *self);
            static PyObject *t_QueryNodeException_toString(t_QueryNodeException *self, PyObject *args);
            static PyObject *t_QueryNodeException_get__localizedMessage(t_QueryNodeException *self, void *data);
            static PyObject *t_QueryNodeException_get__message(t_QueryNodeException *self, void *data);
            static PyObject *t_QueryNodeException_get__messageObject(t_QueryNodeException *self, void *data);
            static PyGetSetDef t_QueryNodeException__fields_[] = {
              DECLARE_GET_FIELD(t_QueryNodeException, localizedMessage),
              DECLARE_GET_FIELD(t_QueryNodeException, message),
              DECLARE_GET_FIELD(t_QueryNodeException, messageObject),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryNodeException__methods_[] = {
              DECLARE_METHOD(t_QueryNodeException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeException, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeException, getLocalizedMessage, METH_VARARGS),
              DECLARE_METHOD(t_QueryNodeException, getMessage, METH_VARARGS),
              DECLARE_METHOD(t_QueryNodeException, getMessageObject, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeException, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(QueryNodeException)[] = {
              { Py_tp_methods, t_QueryNodeException__methods_ },
              { Py_tp_init, (void *) t_QueryNodeException_init_ },
              { Py_tp_getset, t_QueryNodeException__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(QueryNodeException)[] = {
              &PY_TYPE_DEF(::java::lang::Exception),
              NULL
            };

            DEFINE_TYPE(QueryNodeException, t_QueryNodeException, QueryNodeException);

            void t_QueryNodeException::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryNodeException), &PY_TYPE_DEF(QueryNodeException), module, "QueryNodeException", 0);
            }

            void t_QueryNodeException::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeException), "class_", make_descriptor(QueryNodeException::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeException), "wrapfn_", make_descriptor(t_QueryNodeException::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeException), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryNodeException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryNodeException::initializeClass, 1)))
                return NULL;
              return t_QueryNodeException::wrap_Object(QueryNodeException(((t_QueryNodeException *) arg)->object.this$));
            }
            static PyObject *t_QueryNodeException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryNodeException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryNodeException_init_(t_QueryNodeException *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::Throwable a0((jobject) NULL);
                  QueryNodeException object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeException(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  QueryNodeException object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeException(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  ::java::lang::Throwable a1((jobject) NULL);
                  QueryNodeException object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, ::java::lang::Throwable::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = QueryNodeException(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryNodeException_getLocalizedMessage(t_QueryNodeException *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ::java::lang::String result((jobject) NULL);
                  OBJ_CALL(result = self->object.getLocalizedMessage());
                  return j2p(result);
                }
                break;
               case 1:
                {
                  ::java::util::Locale a0((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                  {
                    OBJ_CALL(result = self->object.getLocalizedMessage(a0));
                    return j2p(result);
                  }
                }
              }

              return callSuper(PY_TYPE(QueryNodeException), (PyObject *) self, "getLocalizedMessage", args, 2);
            }

            static PyObject *t_QueryNodeException_getMessage(t_QueryNodeException *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getMessage());
                return j2p(result);
              }

              return callSuper(PY_TYPE(QueryNodeException), (PyObject *) self, "getMessage", args, 2);
            }

            static PyObject *t_QueryNodeException_getMessageObject(t_QueryNodeException *self)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message result((jobject) NULL);
              OBJ_CALL(result = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(result);
            }

            static PyObject *t_QueryNodeException_toString(t_QueryNodeException *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(PY_TYPE(QueryNodeException), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_QueryNodeException_get__localizedMessage(t_QueryNodeException *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocalizedMessage());
              return j2p(value);
            }

            static PyObject *t_QueryNodeException_get__message(t_QueryNodeException *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessage());
              return j2p(value);
            }

            static PyObject *t_QueryNodeException_get__messageObject(t_QueryNodeException *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/LRUHashMap.h"
#include "org/apache/lucene/facet/taxonomy/LRUHashMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *LRUHashMap::class$ = NULL;
          jmethodID *LRUHashMap::mids$ = NULL;
          bool LRUHashMap::live$ = false;

          jclass LRUHashMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/LRUHashMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_clone_fbb44dcade3199a6] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/facet/taxonomy/LRUHashMap;");
              mids$[mid_getMaxSize_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxSize", "()I");
              mids$[mid_setMaxSize_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxSize", "(I)V");
              mids$[mid_removeEldestEntry_7076d39f0bf8c708] = env->getMethodID(cls, "removeEldestEntry", "(Ljava/util/Map$Entry;)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LRUHashMap::LRUHashMap(jint a0) : ::java::util::LinkedHashMap(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          LRUHashMap LRUHashMap::clone() const
          {
            return LRUHashMap(env->callObjectMethod(this$, mids$[mid_clone_fbb44dcade3199a6]));
          }

          jint LRUHashMap::getMaxSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxSize_9972fcc56b44e79d]);
          }

          void LRUHashMap::setMaxSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxSize_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_LRUHashMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LRUHashMap_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LRUHashMap_of_(t_LRUHashMap *self, PyObject *args);
          static int t_LRUHashMap_init_(t_LRUHashMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LRUHashMap_clone(t_LRUHashMap *self, PyObject *args);
          static PyObject *t_LRUHashMap_getMaxSize(t_LRUHashMap *self);
          static PyObject *t_LRUHashMap_setMaxSize(t_LRUHashMap *self, PyObject *arg);
          static PyObject *t_LRUHashMap_get__maxSize(t_LRUHashMap *self, void *data);
          static int t_LRUHashMap_set__maxSize(t_LRUHashMap *self, PyObject *arg, void *data);
          static PyObject *t_LRUHashMap_get__parameters_(t_LRUHashMap *self, void *data);
          static PyGetSetDef t_LRUHashMap__fields_[] = {
            DECLARE_GETSET_FIELD(t_LRUHashMap, maxSize),
            DECLARE_GET_FIELD(t_LRUHashMap, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LRUHashMap__methods_[] = {
            DECLARE_METHOD(t_LRUHashMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LRUHashMap, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LRUHashMap, of_, METH_VARARGS),
            DECLARE_METHOD(t_LRUHashMap, clone, METH_VARARGS),
            DECLARE_METHOD(t_LRUHashMap, getMaxSize, METH_NOARGS),
            DECLARE_METHOD(t_LRUHashMap, setMaxSize, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LRUHashMap)[] = {
            { Py_tp_methods, t_LRUHashMap__methods_ },
            { Py_tp_init, (void *) t_LRUHashMap_init_ },
            { Py_tp_getset, t_LRUHashMap__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LRUHashMap)[] = {
            &PY_TYPE_DEF(::java::util::LinkedHashMap),
            NULL
          };

          DEFINE_TYPE(LRUHashMap, t_LRUHashMap, LRUHashMap);
          PyObject *t_LRUHashMap::wrap_Object(const LRUHashMap& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_LRUHashMap::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_LRUHashMap *self = (t_LRUHashMap *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_LRUHashMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_LRUHashMap::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_LRUHashMap *self = (t_LRUHashMap *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_LRUHashMap::install(PyObject *module)
          {
            installType(&PY_TYPE(LRUHashMap), &PY_TYPE_DEF(LRUHashMap), module, "LRUHashMap", 0);
          }

          void t_LRUHashMap::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LRUHashMap), "class_", make_descriptor(LRUHashMap::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LRUHashMap), "wrapfn_", make_descriptor(t_LRUHashMap::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LRUHashMap), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LRUHashMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LRUHashMap::initializeClass, 1)))
              return NULL;
            return t_LRUHashMap::wrap_Object(LRUHashMap(((t_LRUHashMap *) arg)->object.this$));
          }
          static PyObject *t_LRUHashMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LRUHashMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_LRUHashMap_of_(t_LRUHashMap *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_LRUHashMap_init_(t_LRUHashMap *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            LRUHashMap object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = LRUHashMap(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LRUHashMap_clone(t_LRUHashMap *self, PyObject *args)
          {
            LRUHashMap result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_LRUHashMap::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(PY_TYPE(LRUHashMap), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_LRUHashMap_getMaxSize(t_LRUHashMap *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxSize());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_LRUHashMap_setMaxSize(t_LRUHashMap *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxSize", arg);
            return NULL;
          }
          static PyObject *t_LRUHashMap_get__parameters_(t_LRUHashMap *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_LRUHashMap_get__maxSize(t_LRUHashMap *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxSize());
            return PyLong_FromLong((long) value);
          }
          static int t_LRUHashMap_set__maxSize(t_LRUHashMap *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxSize", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ExitableDirectoryReader$ExitableSubReaderWrapper.h"
#include "org/apache/lucene/index/QueryTimeout.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ExitableDirectoryReader$ExitableSubReaderWrapper::class$ = NULL;
        jmethodID *ExitableDirectoryReader$ExitableSubReaderWrapper::mids$ = NULL;
        bool ExitableDirectoryReader$ExitableSubReaderWrapper::live$ = false;

        jclass ExitableDirectoryReader$ExitableSubReaderWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ExitableDirectoryReader$ExitableSubReaderWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f41b94f71519ae1d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/QueryTimeout;)V");
            mids$[mid_wrap_c175952bcee17188] = env->getMethodID(cls, "wrap", "(Lorg/apache/lucene/index/LeafReader;)Lorg/apache/lucene/index/LeafReader;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ExitableDirectoryReader$ExitableSubReaderWrapper::ExitableDirectoryReader$ExitableSubReaderWrapper(const ::org::apache::lucene::index::QueryTimeout & a0) : ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper(env->newObject(initializeClass, &mids$, mid_init$_f41b94f71519ae1d, a0.this$)) {}

        ::org::apache::lucene::index::LeafReader ExitableDirectoryReader$ExitableSubReaderWrapper::wrap(const ::org::apache::lucene::index::LeafReader & a0) const
        {
          return ::org::apache::lucene::index::LeafReader(env->callObjectMethod(this$, mids$[mid_wrap_c175952bcee17188], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ExitableDirectoryReader$ExitableSubReaderWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ExitableDirectoryReader$ExitableSubReaderWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ExitableDirectoryReader$ExitableSubReaderWrapper_of_(t_ExitableDirectoryReader$ExitableSubReaderWrapper *self, PyObject *args);
        static int t_ExitableDirectoryReader$ExitableSubReaderWrapper_init_(t_ExitableDirectoryReader$ExitableSubReaderWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ExitableDirectoryReader$ExitableSubReaderWrapper_wrap(t_ExitableDirectoryReader$ExitableSubReaderWrapper *self, PyObject *args);
        static PyObject *t_ExitableDirectoryReader$ExitableSubReaderWrapper_get__parameters_(t_ExitableDirectoryReader$ExitableSubReaderWrapper *self, void *data);
        static PyGetSetDef t_ExitableDirectoryReader$ExitableSubReaderWrapper__fields_[] = {
          DECLARE_GET_FIELD(t_ExitableDirectoryReader$ExitableSubReaderWrapper, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ExitableDirectoryReader$ExitableSubReaderWrapper__methods_[] = {
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableSubReaderWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableSubReaderWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableSubReaderWrapper, of_, METH_VARARGS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableSubReaderWrapper, wrap, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ExitableDirectoryReader$ExitableSubReaderWrapper)[] = {
          { Py_tp_methods, t_ExitableDirectoryReader$ExitableSubReaderWrapper__methods_ },
          { Py_tp_init, (void *) t_ExitableDirectoryReader$ExitableSubReaderWrapper_init_ },
          { Py_tp_getset, t_ExitableDirectoryReader$ExitableSubReaderWrapper__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ExitableDirectoryReader$ExitableSubReaderWrapper)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper),
          NULL
        };

        DEFINE_TYPE(ExitableDirectoryReader$ExitableSubReaderWrapper, t_ExitableDirectoryReader$ExitableSubReaderWrapper, ExitableDirectoryReader$ExitableSubReaderWrapper);
        PyObject *t_ExitableDirectoryReader$ExitableSubReaderWrapper::wrap_Object(const ExitableDirectoryReader$ExitableSubReaderWrapper& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ExitableDirectoryReader$ExitableSubReaderWrapper::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ExitableDirectoryReader$ExitableSubReaderWrapper *self = (t_ExitableDirectoryReader$ExitableSubReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ExitableDirectoryReader$ExitableSubReaderWrapper::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ExitableDirectoryReader$ExitableSubReaderWrapper::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ExitableDirectoryReader$ExitableSubReaderWrapper *self = (t_ExitableDirectoryReader$ExitableSubReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ExitableDirectoryReader$ExitableSubReaderWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(ExitableDirectoryReader$ExitableSubReaderWrapper), &PY_TYPE_DEF(ExitableDirectoryReader$ExitableSubReaderWrapper), module, "ExitableDirectoryReader$ExitableSubReaderWrapper", 0);
        }

        void t_ExitableDirectoryReader$ExitableSubReaderWrapper::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader$ExitableSubReaderWrapper), "class_", make_descriptor(ExitableDirectoryReader$ExitableSubReaderWrapper::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader$ExitableSubReaderWrapper), "wrapfn_", make_descriptor(t_ExitableDirectoryReader$ExitableSubReaderWrapper::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader$ExitableSubReaderWrapper), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ExitableDirectoryReader$ExitableSubReaderWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ExitableDirectoryReader$ExitableSubReaderWrapper::initializeClass, 1)))
            return NULL;
          return t_ExitableDirectoryReader$ExitableSubReaderWrapper::wrap_Object(ExitableDirectoryReader$ExitableSubReaderWrapper(((t_ExitableDirectoryReader$ExitableSubReaderWrapper *) arg)->object.this$));
        }
        static PyObject *t_ExitableDirectoryReader$ExitableSubReaderWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ExitableDirectoryReader$ExitableSubReaderWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ExitableDirectoryReader$ExitableSubReaderWrapper_of_(t_ExitableDirectoryReader$ExitableSubReaderWrapper *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ExitableDirectoryReader$ExitableSubReaderWrapper_init_(t_ExitableDirectoryReader$ExitableSubReaderWrapper *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::QueryTimeout a0((jobject) NULL);
          ExitableDirectoryReader$ExitableSubReaderWrapper object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::QueryTimeout::initializeClass, &a0))
          {
            INT_CALL(object = ExitableDirectoryReader$ExitableSubReaderWrapper(a0));
            self->object = object;
            self->parameters[0] = ::org::apache::lucene::index::PY_TYPE(LeafReader);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ExitableDirectoryReader$ExitableSubReaderWrapper_wrap(t_ExitableDirectoryReader$ExitableSubReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
          ::org::apache::lucene::index::LeafReader result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.wrap(a0));
            return ::org::apache::lucene::index::t_LeafReader::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ExitableDirectoryReader$ExitableSubReaderWrapper), (PyObject *) self, "wrap", args, 2);
        }
        static PyObject *t_ExitableDirectoryReader$ExitableSubReaderWrapper_get__parameters_(t_ExitableDirectoryReader$ExitableSubReaderWrapper *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PagedBytes$Reader.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PagedBytes$Reader::class$ = NULL;
        jmethodID *PagedBytes$Reader::mids$ = NULL;
        bool PagedBytes$Reader::live$ = false;

        jclass PagedBytes$Reader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PagedBytes$Reader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_fill_c61df66683b6c9c2] = env->getMethodID(cls, "fill", "(Lorg/apache/lucene/util/BytesRef;J)V");
            mids$[mid_fillSlice_4841f9777f8b20c4] = env->getMethodID(cls, "fillSlice", "(Lorg/apache/lucene/util/BytesRef;JI)V");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PagedBytes$Reader::fill(const ::org::apache::lucene::util::BytesRef & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_fill_c61df66683b6c9c2], a0.this$, a1);
        }

        void PagedBytes$Reader::fillSlice(const ::org::apache::lucene::util::BytesRef & a0, jlong a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_fillSlice_4841f9777f8b20c4], a0.this$, a1, a2);
        }

        jlong PagedBytes$Reader::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        ::java::lang::String PagedBytes$Reader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PagedBytes$Reader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$Reader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$Reader_fill(t_PagedBytes$Reader *self, PyObject *args);
        static PyObject *t_PagedBytes$Reader_fillSlice(t_PagedBytes$Reader *self, PyObject *args);
        static PyObject *t_PagedBytes$Reader_ramBytesUsed(t_PagedBytes$Reader *self);
        static PyObject *t_PagedBytes$Reader_toString(t_PagedBytes$Reader *self, PyObject *args);

        static PyMethodDef t_PagedBytes$Reader__methods_[] = {
          DECLARE_METHOD(t_PagedBytes$Reader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$Reader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$Reader, fill, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$Reader, fillSlice, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$Reader, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes$Reader, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PagedBytes$Reader)[] = {
          { Py_tp_methods, t_PagedBytes$Reader__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PagedBytes$Reader)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PagedBytes$Reader, t_PagedBytes$Reader, PagedBytes$Reader);

        void t_PagedBytes$Reader::install(PyObject *module)
        {
          installType(&PY_TYPE(PagedBytes$Reader), &PY_TYPE_DEF(PagedBytes$Reader), module, "PagedBytes$Reader", 0);
        }

        void t_PagedBytes$Reader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PagedBytes$Reader), "class_", make_descriptor(PagedBytes$Reader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PagedBytes$Reader), "wrapfn_", make_descriptor(t_PagedBytes$Reader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PagedBytes$Reader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PagedBytes$Reader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PagedBytes$Reader::initializeClass, 1)))
            return NULL;
          return t_PagedBytes$Reader::wrap_Object(PagedBytes$Reader(((t_PagedBytes$Reader *) arg)->object.this$));
        }
        static PyObject *t_PagedBytes$Reader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PagedBytes$Reader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PagedBytes$Reader_fill(t_PagedBytes$Reader *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.fill(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "fill", args);
          return NULL;
        }

        static PyObject *t_PagedBytes$Reader_fillSlice(t_PagedBytes$Reader *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong a1;
          jint a2;

          if (!parseArgs(args, "kJI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.fillSlice(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "fillSlice", args);
          return NULL;
        }

        static PyObject *t_PagedBytes$Reader_ramBytesUsed(t_PagedBytes$Reader *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PagedBytes$Reader_toString(t_PagedBytes$Reader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(PagedBytes$Reader), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/QueryScorer.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/highlight/Scorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTerm.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *QueryScorer::class$ = NULL;
          jmethodID *QueryScorer::mids$ = NULL;
          bool QueryScorer::live$ = false;

          jclass QueryScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/QueryScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_35bdbb282e32f43f] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/highlight/WeightedSpanTerm;)V");
              mids$[mid_init$_ede25bb9d48237ac] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
              mids$[mid_init$_e3c97842bfe33454] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Ljava/lang/String;)V");
              mids$[mid_init$_67d9978716244d9f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_init$_c5ae5fd35d2e5a2f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)V");
              mids$[mid_init$_4c52c3898f0a83a4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_getFragmentScore_58aec2b64dff50c8] = env->getMethodID(cls, "getFragmentScore", "()F");
              mids$[mid_getMaxTermWeight_58aec2b64dff50c8] = env->getMethodID(cls, "getMaxTermWeight", "()F");
              mids$[mid_getTokenScore_58aec2b64dff50c8] = env->getMethodID(cls, "getTokenScore", "()F");
              mids$[mid_getWeightedSpanTerm_7ce6a30676779b3c] = env->getMethodID(cls, "getWeightedSpanTerm", "(Ljava/lang/String;)Lorg/apache/lucene/search/highlight/WeightedSpanTerm;");
              mids$[mid_init_6de1e28d9d10cd9e] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_isExpandMultiTermQuery_8454bd5aa23fd11e] = env->getMethodID(cls, "isExpandMultiTermQuery", "()Z");
              mids$[mid_isUsePayloads_8454bd5aa23fd11e] = env->getMethodID(cls, "isUsePayloads", "()Z");
              mids$[mid_setExpandMultiTermQuery_9d72768e8fdce2b7] = env->getMethodID(cls, "setExpandMultiTermQuery", "(Z)V");
              mids$[mid_setMaxDocCharsToAnalyze_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxDocCharsToAnalyze", "(I)V");
              mids$[mid_setUsePayloads_9d72768e8fdce2b7] = env->getMethodID(cls, "setUsePayloads", "(Z)V");
              mids$[mid_setWrapIfNotCachingTokenFilter_9d72768e8fdce2b7] = env->getMethodID(cls, "setWrapIfNotCachingTokenFilter", "(Z)V");
              mids$[mid_startFragment_786a99056c1d5c74] = env->getMethodID(cls, "startFragment", "(Lorg/apache/lucene/search/highlight/TextFragment;)V");
              mids$[mid_newTermExtractor_48cd2e241cf5cbe2] = env->getMethodID(cls, "newTermExtractor", "(Ljava/lang/String;)Lorg/apache/lucene/search/highlight/WeightedSpanTermExtractor;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryScorer::QueryScorer(const JArray< ::org::apache::lucene::search::highlight::WeightedSpanTerm > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_35bdbb282e32f43f, a0.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ede25bb9d48237ac, a0.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e3c97842bfe33454, a0.this$, a1.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_67d9978716244d9f, a0.this$, a1.this$, a2.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c5ae5fd35d2e5a2f, a0.this$, a1.this$, a2.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::lang::String & a2, const ::java::lang::String & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4c52c3898f0a83a4, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          jfloat QueryScorer::getFragmentScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getFragmentScore_58aec2b64dff50c8]);
          }

          jfloat QueryScorer::getMaxTermWeight() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMaxTermWeight_58aec2b64dff50c8]);
          }

          jfloat QueryScorer::getTokenScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTokenScore_58aec2b64dff50c8]);
          }

          ::org::apache::lucene::search::highlight::WeightedSpanTerm QueryScorer::getWeightedSpanTerm(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::highlight::WeightedSpanTerm(env->callObjectMethod(this$, mids$[mid_getWeightedSpanTerm_7ce6a30676779b3c], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream QueryScorer::init(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_init_6de1e28d9d10cd9e], a0.this$));
          }

          jboolean QueryScorer::isExpandMultiTermQuery() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isExpandMultiTermQuery_8454bd5aa23fd11e]);
          }

          jboolean QueryScorer::isUsePayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isUsePayloads_8454bd5aa23fd11e]);
          }

          void QueryScorer::setExpandMultiTermQuery(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setExpandMultiTermQuery_9d72768e8fdce2b7], a0);
          }

          void QueryScorer::setMaxDocCharsToAnalyze(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxDocCharsToAnalyze_040c4cd0390c5aff], a0);
          }

          void QueryScorer::setUsePayloads(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setUsePayloads_9d72768e8fdce2b7], a0);
          }

          void QueryScorer::setWrapIfNotCachingTokenFilter(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setWrapIfNotCachingTokenFilter_9d72768e8fdce2b7], a0);
          }

          void QueryScorer::startFragment(const ::org::apache::lucene::search::highlight::TextFragment & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startFragment_786a99056c1d5c74], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_QueryScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryScorer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryScorer_init_(t_QueryScorer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryScorer_getFragmentScore(t_QueryScorer *self);
          static PyObject *t_QueryScorer_getMaxTermWeight(t_QueryScorer *self);
          static PyObject *t_QueryScorer_getTokenScore(t_QueryScorer *self);
          static PyObject *t_QueryScorer_getWeightedSpanTerm(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_init(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_isExpandMultiTermQuery(t_QueryScorer *self);
          static PyObject *t_QueryScorer_isUsePayloads(t_QueryScorer *self);
          static PyObject *t_QueryScorer_setExpandMultiTermQuery(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_setMaxDocCharsToAnalyze(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_setUsePayloads(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_setWrapIfNotCachingTokenFilter(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_startFragment(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_get__expandMultiTermQuery(t_QueryScorer *self, void *data);
          static int t_QueryScorer_set__expandMultiTermQuery(t_QueryScorer *self, PyObject *arg, void *data);
          static PyObject *t_QueryScorer_get__fragmentScore(t_QueryScorer *self, void *data);
          static int t_QueryScorer_set__maxDocCharsToAnalyze(t_QueryScorer *self, PyObject *arg, void *data);
          static PyObject *t_QueryScorer_get__maxTermWeight(t_QueryScorer *self, void *data);
          static PyObject *t_QueryScorer_get__tokenScore(t_QueryScorer *self, void *data);
          static PyObject *t_QueryScorer_get__usePayloads(t_QueryScorer *self, void *data);
          static int t_QueryScorer_set__usePayloads(t_QueryScorer *self, PyObject *arg, void *data);
          static int t_QueryScorer_set__wrapIfNotCachingTokenFilter(t_QueryScorer *self, PyObject *arg, void *data);
          static PyGetSetDef t_QueryScorer__fields_[] = {
            DECLARE_GETSET_FIELD(t_QueryScorer, expandMultiTermQuery),
            DECLARE_GET_FIELD(t_QueryScorer, fragmentScore),
            DECLARE_SET_FIELD(t_QueryScorer, maxDocCharsToAnalyze),
            DECLARE_GET_FIELD(t_QueryScorer, maxTermWeight),
            DECLARE_GET_FIELD(t_QueryScorer, tokenScore),
            DECLARE_GETSET_FIELD(t_QueryScorer, usePayloads),
            DECLARE_SET_FIELD(t_QueryScorer, wrapIfNotCachingTokenFilter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryScorer__methods_[] = {
            DECLARE_METHOD(t_QueryScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryScorer, getFragmentScore, METH_NOARGS),
            DECLARE_METHOD(t_QueryScorer, getMaxTermWeight, METH_NOARGS),
            DECLARE_METHOD(t_QueryScorer, getTokenScore, METH_NOARGS),
            DECLARE_METHOD(t_QueryScorer, getWeightedSpanTerm, METH_O),
            DECLARE_METHOD(t_QueryScorer, init, METH_O),
            DECLARE_METHOD(t_QueryScorer, isExpandMultiTermQuery, METH_NOARGS),
            DECLARE_METHOD(t_QueryScorer, isUsePayloads, METH_NOARGS),
            DECLARE_METHOD(t_QueryScorer, setExpandMultiTermQuery, METH_O),
            DECLARE_METHOD(t_QueryScorer, setMaxDocCharsToAnalyze, METH_O),
            DECLARE_METHOD(t_QueryScorer, setUsePayloads, METH_O),
            DECLARE_METHOD(t_QueryScorer, setWrapIfNotCachingTokenFilter, METH_O),
            DECLARE_METHOD(t_QueryScorer, startFragment, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(QueryScorer)[] = {
            { Py_tp_methods, t_QueryScorer__methods_ },
            { Py_tp_init, (void *) t_QueryScorer_init_ },
            { Py_tp_getset, t_QueryScorer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(QueryScorer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(QueryScorer, t_QueryScorer, QueryScorer);

          void t_QueryScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryScorer), &PY_TYPE_DEF(QueryScorer), module, "QueryScorer", 0);
          }

          void t_QueryScorer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryScorer), "class_", make_descriptor(QueryScorer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryScorer), "wrapfn_", make_descriptor(t_QueryScorer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryScorer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryScorer::initializeClass, 1)))
              return NULL;
            return t_QueryScorer::wrap_Object(QueryScorer(((t_QueryScorer *) arg)->object.this$));
          }
          static PyObject *t_QueryScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryScorer_init_(t_QueryScorer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::org::apache::lucene::search::highlight::WeightedSpanTerm > a0((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "[k", ::org::apache::lucene::search::highlight::WeightedSpanTerm::initializeClass, &a0))
                {
                  INT_CALL(object = QueryScorer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
                {
                  INT_CALL(object = QueryScorer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = QueryScorer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "kss", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = QueryScorer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "kks", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = QueryScorer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "kkss", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = QueryScorer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryScorer_getFragmentScore(t_QueryScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryScorer_getMaxTermWeight(t_QueryScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMaxTermWeight());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryScorer_getTokenScore(t_QueryScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTokenScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryScorer_getWeightedSpanTerm(t_QueryScorer *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::WeightedSpanTerm result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getWeightedSpanTerm(a0));
              return ::org::apache::lucene::search::highlight::t_WeightedSpanTerm::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getWeightedSpanTerm", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_init(t_QueryScorer *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.init(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "init", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_isExpandMultiTermQuery(t_QueryScorer *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isExpandMultiTermQuery());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryScorer_isUsePayloads(t_QueryScorer *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isUsePayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryScorer_setExpandMultiTermQuery(t_QueryScorer *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setExpandMultiTermQuery(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setExpandMultiTermQuery", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_setMaxDocCharsToAnalyze(t_QueryScorer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxDocCharsToAnalyze(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxDocCharsToAnalyze", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_setUsePayloads(t_QueryScorer *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setUsePayloads(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setUsePayloads", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_setWrapIfNotCachingTokenFilter(t_QueryScorer *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setWrapIfNotCachingTokenFilter(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setWrapIfNotCachingTokenFilter", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_startFragment(t_QueryScorer *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::TextFragment a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(self->object.startFragment(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "startFragment", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_get__expandMultiTermQuery(t_QueryScorer *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isExpandMultiTermQuery());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryScorer_set__expandMultiTermQuery(t_QueryScorer *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setExpandMultiTermQuery(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "expandMultiTermQuery", arg);
            return -1;
          }

          static PyObject *t_QueryScorer_get__fragmentScore(t_QueryScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) value);
          }

          static int t_QueryScorer_set__maxDocCharsToAnalyze(t_QueryScorer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxDocCharsToAnalyze(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxDocCharsToAnalyze", arg);
            return -1;
          }

          static PyObject *t_QueryScorer_get__maxTermWeight(t_QueryScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMaxTermWeight());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_QueryScorer_get__tokenScore(t_QueryScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTokenScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_QueryScorer_get__usePayloads(t_QueryScorer *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isUsePayloads());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryScorer_set__usePayloads(t_QueryScorer *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setUsePayloads(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "usePayloads", arg);
            return -1;
          }

          static int t_QueryScorer_set__wrapIfNotCachingTokenFilter(t_QueryScorer *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setWrapIfNotCachingTokenFilter(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "wrapIfNotCachingTokenFilter", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiValueSource::class$ = NULL;
            jmethodID *MultiValueSource::mids$ = NULL;
            bool MultiValueSource::live$ = false;

            jclass MultiValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_dimension_9972fcc56b44e79d] = env->getMethodID(cls, "dimension", "()I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiValueSource::MultiValueSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            jint MultiValueSource::dimension() const
            {
              return env->callIntMethod(this$, mids$[mid_dimension_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiValueSource_init_(t_MultiValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiValueSource_dimension(t_MultiValueSource *self);

            static PyMethodDef t_MultiValueSource__methods_[] = {
              DECLARE_METHOD(t_MultiValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiValueSource, dimension, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(MultiValueSource)[] = {
              { Py_tp_methods, t_MultiValueSource__methods_ },
              { Py_tp_init, (void *) t_MultiValueSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(MultiValueSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::ValueSource),
              NULL
            };

            DEFINE_TYPE(MultiValueSource, t_MultiValueSource, MultiValueSource);

            void t_MultiValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiValueSource), &PY_TYPE_DEF(MultiValueSource), module, "MultiValueSource", 0);
            }

            void t_MultiValueSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiValueSource), "class_", make_descriptor(MultiValueSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiValueSource), "wrapfn_", make_descriptor(t_MultiValueSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiValueSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiValueSource::initializeClass, 1)))
                return NULL;
              return t_MultiValueSource::wrap_Object(MultiValueSource(((t_MultiValueSource *) arg)->object.this$));
            }
            static PyObject *t_MultiValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiValueSource_init_(t_MultiValueSource *self, PyObject *args, PyObject *kwds)
            {
              MultiValueSource object((jobject) NULL);

              INT_CALL(object = MultiValueSource());
              self->object = object;

              return 0;
            }

            static PyObject *t_MultiValueSource_dimension(t_MultiValueSource *self)
            {
              jint result;
              OBJ_CALL(result = self->object.dimension());
              return PyLong_FromLong((long) result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool$DirectAllocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool$DirectAllocator::class$ = NULL;
        jmethodID *IntBlockPool$DirectAllocator::mids$ = NULL;
        bool IntBlockPool$DirectAllocator::live$ = false;

        jclass IntBlockPool$DirectAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool$DirectAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_recycleIntBlocks_8cce81c663fcf6f9] = env->getMethodID(cls, "recycleIntBlocks", "([[III)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool$DirectAllocator::IntBlockPool$DirectAllocator() : ::org::apache::lucene::util::IntBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void IntBlockPool$DirectAllocator::recycleIntBlocks(const JArray< JArray< jint > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleIntBlocks_8cce81c663fcf6f9], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool$DirectAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool$DirectAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool$DirectAllocator_init_(t_IntBlockPool$DirectAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool$DirectAllocator_recycleIntBlocks(t_IntBlockPool$DirectAllocator *self, PyObject *args);

        static PyMethodDef t_IntBlockPool$DirectAllocator__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool$DirectAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$DirectAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$DirectAllocator, recycleIntBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IntBlockPool$DirectAllocator)[] = {
          { Py_tp_methods, t_IntBlockPool$DirectAllocator__methods_ },
          { Py_tp_init, (void *) t_IntBlockPool$DirectAllocator_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IntBlockPool$DirectAllocator)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::IntBlockPool$Allocator),
          NULL
        };

        DEFINE_TYPE(IntBlockPool$DirectAllocator, t_IntBlockPool$DirectAllocator, IntBlockPool$DirectAllocator);

        void t_IntBlockPool$DirectAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool$DirectAllocator), &PY_TYPE_DEF(IntBlockPool$DirectAllocator), module, "IntBlockPool$DirectAllocator", 0);
        }

        void t_IntBlockPool$DirectAllocator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool$DirectAllocator), "class_", make_descriptor(IntBlockPool$DirectAllocator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool$DirectAllocator), "wrapfn_", make_descriptor(t_IntBlockPool$DirectAllocator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool$DirectAllocator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntBlockPool$DirectAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool$DirectAllocator::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool$DirectAllocator::wrap_Object(IntBlockPool$DirectAllocator(((t_IntBlockPool$DirectAllocator *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool$DirectAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool$DirectAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool$DirectAllocator_init_(t_IntBlockPool$DirectAllocator *self, PyObject *args, PyObject *kwds)
        {
          IntBlockPool$DirectAllocator object((jobject) NULL);

          INT_CALL(object = IntBlockPool$DirectAllocator());
          self->object = object;

          return 0;
        }

        static PyObject *t_IntBlockPool$DirectAllocator_recycleIntBlocks(t_IntBlockPool$DirectAllocator *self, PyObject *args)
        {
          JArray< JArray< jint > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[III", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleIntBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(IntBlockPool$DirectAllocator), (PyObject *) self, "recycleIntBlocks", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/GeoEncodingUtils$Component2DPredicate.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *GeoEncodingUtils$Component2DPredicate::class$ = NULL;
        jmethodID *GeoEncodingUtils$Component2DPredicate::mids$ = NULL;
        bool GeoEncodingUtils$Component2DPredicate::live$ = false;

        jclass GeoEncodingUtils$Component2DPredicate::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/GeoEncodingUtils$Component2DPredicate");

            mids$ = new jmethodID[max_mid];
            mids$[mid_test_fd32c163183a36f2] = env->getMethodID(cls, "test", "(II)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean GeoEncodingUtils$Component2DPredicate::test(jint a0, jint a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_test_fd32c163183a36f2], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_GeoEncodingUtils$Component2DPredicate_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GeoEncodingUtils$Component2DPredicate_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GeoEncodingUtils$Component2DPredicate_test(t_GeoEncodingUtils$Component2DPredicate *self, PyObject *args);

        static PyMethodDef t_GeoEncodingUtils$Component2DPredicate__methods_[] = {
          DECLARE_METHOD(t_GeoEncodingUtils$Component2DPredicate, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GeoEncodingUtils$Component2DPredicate, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GeoEncodingUtils$Component2DPredicate, test, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(GeoEncodingUtils$Component2DPredicate)[] = {
          { Py_tp_methods, t_GeoEncodingUtils$Component2DPredicate__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(GeoEncodingUtils$Component2DPredicate)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::geo::GeoEncodingUtils$Grid),
          NULL
        };

        DEFINE_TYPE(GeoEncodingUtils$Component2DPredicate, t_GeoEncodingUtils$Component2DPredicate, GeoEncodingUtils$Component2DPredicate);

        void t_GeoEncodingUtils$Component2DPredicate::install(PyObject *module)
        {
          installType(&PY_TYPE(GeoEncodingUtils$Component2DPredicate), &PY_TYPE_DEF(GeoEncodingUtils$Component2DPredicate), module, "GeoEncodingUtils$Component2DPredicate", 0);
        }

        void t_GeoEncodingUtils$Component2DPredicate::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoEncodingUtils$Component2DPredicate), "class_", make_descriptor(GeoEncodingUtils$Component2DPredicate::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoEncodingUtils$Component2DPredicate), "wrapfn_", make_descriptor(t_GeoEncodingUtils$Component2DPredicate::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoEncodingUtils$Component2DPredicate), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_GeoEncodingUtils$Component2DPredicate_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, GeoEncodingUtils$Component2DPredicate::initializeClass, 1)))
            return NULL;
          return t_GeoEncodingUtils$Component2DPredicate::wrap_Object(GeoEncodingUtils$Component2DPredicate(((t_GeoEncodingUtils$Component2DPredicate *) arg)->object.this$));
        }
        static PyObject *t_GeoEncodingUtils$Component2DPredicate_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, GeoEncodingUtils$Component2DPredicate::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_GeoEncodingUtils$Component2DPredicate_test(t_GeoEncodingUtils$Component2DPredicate *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jboolean result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.test(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "test", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekLowerCaseFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekLowerCaseFilter::class$ = NULL;
          jmethodID *GreekLowerCaseFilter::mids$ = NULL;
          bool GreekLowerCaseFilter::live$ = false;

          jclass GreekLowerCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekLowerCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekLowerCaseFilter::GreekLowerCaseFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean GreekLowerCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekLowerCaseFilter_init_(t_GreekLowerCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekLowerCaseFilter_incrementToken(t_GreekLowerCaseFilter *self, PyObject *args);

          static PyMethodDef t_GreekLowerCaseFilter__methods_[] = {
            DECLARE_METHOD(t_GreekLowerCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekLowerCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekLowerCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GreekLowerCaseFilter)[] = {
            { Py_tp_methods, t_GreekLowerCaseFilter__methods_ },
            { Py_tp_init, (void *) t_GreekLowerCaseFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GreekLowerCaseFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(GreekLowerCaseFilter, t_GreekLowerCaseFilter, GreekLowerCaseFilter);

          void t_GreekLowerCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekLowerCaseFilter), &PY_TYPE_DEF(GreekLowerCaseFilter), module, "GreekLowerCaseFilter", 0);
          }

          void t_GreekLowerCaseFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GreekLowerCaseFilter), "class_", make_descriptor(GreekLowerCaseFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GreekLowerCaseFilter), "wrapfn_", make_descriptor(t_GreekLowerCaseFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GreekLowerCaseFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekLowerCaseFilter::initializeClass, 1)))
              return NULL;
            return t_GreekLowerCaseFilter::wrap_Object(GreekLowerCaseFilter(((t_GreekLowerCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_GreekLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekLowerCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekLowerCaseFilter_init_(t_GreekLowerCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GreekLowerCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GreekLowerCaseFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekLowerCaseFilter_incrementToken(t_GreekLowerCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(GreekLowerCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttributeImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PositionLengthAttributeImpl::class$ = NULL;
          jmethodID *PositionLengthAttributeImpl::mids$ = NULL;
          bool PositionLengthAttributeImpl::live$ = false;

          jclass PositionLengthAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PositionLengthAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getPositionLength_9972fcc56b44e79d] = env->getMethodID(cls, "getPositionLength", "()I");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
              mids$[mid_setPositionLength_040c4cd0390c5aff] = env->getMethodID(cls, "setPositionLength", "(I)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionLengthAttributeImpl::PositionLengthAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void PositionLengthAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
          }

          void PositionLengthAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_26346c38ebc9c090], a0.this$);
          }

          jboolean PositionLengthAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint PositionLengthAttributeImpl::getPositionLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionLength_9972fcc56b44e79d]);
          }

          jint PositionLengthAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          void PositionLengthAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
          }

          void PositionLengthAttributeImpl::setPositionLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionLength_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PositionLengthAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionLengthAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionLengthAttributeImpl_init_(t_PositionLengthAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PositionLengthAttributeImpl_clear(t_PositionLengthAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionLengthAttributeImpl_copyTo(t_PositionLengthAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionLengthAttributeImpl_equals(t_PositionLengthAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionLengthAttributeImpl_getPositionLength(t_PositionLengthAttributeImpl *self);
          static PyObject *t_PositionLengthAttributeImpl_hashCode(t_PositionLengthAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionLengthAttributeImpl_reflectWith(t_PositionLengthAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionLengthAttributeImpl_setPositionLength(t_PositionLengthAttributeImpl *self, PyObject *arg);
          static PyObject *t_PositionLengthAttributeImpl_get__positionLength(t_PositionLengthAttributeImpl *self, void *data);
          static int t_PositionLengthAttributeImpl_set__positionLength(t_PositionLengthAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_PositionLengthAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_PositionLengthAttributeImpl, positionLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositionLengthAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_PositionLengthAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, getPositionLength, METH_NOARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, reflectWith, METH_VARARGS),
            DECLARE_METHOD(t_PositionLengthAttributeImpl, setPositionLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PositionLengthAttributeImpl)[] = {
            { Py_tp_methods, t_PositionLengthAttributeImpl__methods_ },
            { Py_tp_init, (void *) t_PositionLengthAttributeImpl_init_ },
            { Py_tp_getset, t_PositionLengthAttributeImpl__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PositionLengthAttributeImpl)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::AttributeImpl),
            NULL
          };

          DEFINE_TYPE(PositionLengthAttributeImpl, t_PositionLengthAttributeImpl, PositionLengthAttributeImpl);

          void t_PositionLengthAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionLengthAttributeImpl), &PY_TYPE_DEF(PositionLengthAttributeImpl), module, "PositionLengthAttributeImpl", 0);
          }

          void t_PositionLengthAttributeImpl::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PositionLengthAttributeImpl), "class_", make_descriptor(PositionLengthAttributeImpl::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PositionLengthAttributeImpl), "wrapfn_", make_descriptor(t_PositionLengthAttributeImpl::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PositionLengthAttributeImpl), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionLengthAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionLengthAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_PositionLengthAttributeImpl::wrap_Object(PositionLengthAttributeImpl(((t_PositionLengthAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_PositionLengthAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionLengthAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionLengthAttributeImpl_init_(t_PositionLengthAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            PositionLengthAttributeImpl object((jobject) NULL);

            INT_CALL(object = PositionLengthAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_PositionLengthAttributeImpl_clear(t_PositionLengthAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PositionLengthAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_PositionLengthAttributeImpl_copyTo(t_PositionLengthAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PositionLengthAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_PositionLengthAttributeImpl_equals(t_PositionLengthAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(PositionLengthAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PositionLengthAttributeImpl_getPositionLength(t_PositionLengthAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PositionLengthAttributeImpl_hashCode(t_PositionLengthAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(PositionLengthAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PositionLengthAttributeImpl_reflectWith(t_PositionLengthAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reflectWith(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PositionLengthAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
          }

          static PyObject *t_PositionLengthAttributeImpl_setPositionLength(t_PositionLengthAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionLength", arg);
            return NULL;
          }

          static PyObject *t_PositionLengthAttributeImpl_get__positionLength(t_PositionLengthAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionLength());
            return PyLong_FromLong((long) value);
          }
          static int t_PositionLengthAttributeImpl_set__positionLength(t_PositionLengthAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/CollationDocValuesField.h"
#include "java/lang/String.h"
#include "java/text/Collator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {

        ::java::lang::Class *CollationDocValuesField::class$ = NULL;
        jmethodID *CollationDocValuesField::mids$ = NULL;
        bool CollationDocValuesField::live$ = false;

        jclass CollationDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/collation/CollationDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c9290e3eaf3a6635] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/text/Collator;)V");
            mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
            mids$[mid_setStringValue_9fd2eb66a64e6f0f] = env->getMethodID(cls, "setStringValue", "(Ljava/lang/String;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollationDocValuesField::CollationDocValuesField(const ::java::lang::String & a0, const ::java::text::Collator & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_c9290e3eaf3a6635, a0.this$, a1.this$)) {}

        ::java::lang::String CollationDocValuesField::name() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_db9b55ba01e03e4b]));
        }

        void CollationDocValuesField::setStringValue(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStringValue_9fd2eb66a64e6f0f], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        static PyObject *t_CollationDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollationDocValuesField_init_(t_CollationDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CollationDocValuesField_name(t_CollationDocValuesField *self, PyObject *args);
        static PyObject *t_CollationDocValuesField_setStringValue(t_CollationDocValuesField *self, PyObject *args);
        static int t_CollationDocValuesField_set__stringValue(t_CollationDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_CollationDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_CollationDocValuesField, stringValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CollationDocValuesField__methods_[] = {
          DECLARE_METHOD(t_CollationDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationDocValuesField, name, METH_VARARGS),
          DECLARE_METHOD(t_CollationDocValuesField, setStringValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CollationDocValuesField)[] = {
          { Py_tp_methods, t_CollationDocValuesField__methods_ },
          { Py_tp_init, (void *) t_CollationDocValuesField_init_ },
          { Py_tp_getset, t_CollationDocValuesField__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CollationDocValuesField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(CollationDocValuesField, t_CollationDocValuesField, CollationDocValuesField);

        void t_CollationDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(CollationDocValuesField), &PY_TYPE_DEF(CollationDocValuesField), module, "CollationDocValuesField", 0);
        }

        void t_CollationDocValuesField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollationDocValuesField), "class_", make_descriptor(CollationDocValuesField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollationDocValuesField), "wrapfn_", make_descriptor(t_CollationDocValuesField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollationDocValuesField), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollationDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollationDocValuesField::initializeClass, 1)))
            return NULL;
          return t_CollationDocValuesField::wrap_Object(CollationDocValuesField(((t_CollationDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_CollationDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollationDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollationDocValuesField_init_(t_CollationDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::text::Collator a1((jobject) NULL);
          CollationDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::text::Collator::initializeClass, &a0, &a1))
          {
            INT_CALL(object = CollationDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CollationDocValuesField_name(t_CollationDocValuesField *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.name());
            return j2p(result);
          }

          return callSuper(PY_TYPE(CollationDocValuesField), (PyObject *) self, "name", args, 2);
        }

        static PyObject *t_CollationDocValuesField_setStringValue(t_CollationDocValuesField *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.setStringValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(CollationDocValuesField), (PyObject *) self, "setStringValue", args, 2);
        }

        static int t_CollationDocValuesField_set__stringValue(t_CollationDocValuesField *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object.setStringValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "stringValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/bkd/PointValue.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {

          ::java::lang::Class *PointValue::class$ = NULL;
          jmethodID *PointValue::mids$ = NULL;
          bool PointValue::live$ = false;

          jclass PointValue::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/bkd/PointValue");

              mids$ = new jmethodID[max_mid];
              mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
              mids$[mid_packedValue_7af2ea2e37ce82b8] = env->getMethodID(cls, "packedValue", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_packedValueDocIDBytes_7af2ea2e37ce82b8] = env->getMethodID(cls, "packedValueDocIDBytes", "()Lorg/apache/lucene/util/BytesRef;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PointValue::docID() const
          {
            return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::util::BytesRef PointValue::packedValue() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_packedValue_7af2ea2e37ce82b8]));
          }

          ::org::apache::lucene::util::BytesRef PointValue::packedValueDocIDBytes() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_packedValueDocIDBytes_7af2ea2e37ce82b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {
          static PyObject *t_PointValue_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PointValue_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PointValue_docID(t_PointValue *self);
          static PyObject *t_PointValue_packedValue(t_PointValue *self);
          static PyObject *t_PointValue_packedValueDocIDBytes(t_PointValue *self);

          static PyMethodDef t_PointValue__methods_[] = {
            DECLARE_METHOD(t_PointValue, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PointValue, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PointValue, docID, METH_NOARGS),
            DECLARE_METHOD(t_PointValue, packedValue, METH_NOARGS),
            DECLARE_METHOD(t_PointValue, packedValueDocIDBytes, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PointValue)[] = {
            { Py_tp_methods, t_PointValue__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PointValue)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PointValue, t_PointValue, PointValue);

          void t_PointValue::install(PyObject *module)
          {
            installType(&PY_TYPE(PointValue), &PY_TYPE_DEF(PointValue), module, "PointValue", 0);
          }

          void t_PointValue::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PointValue), "class_", make_descriptor(PointValue::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PointValue), "wrapfn_", make_descriptor(t_PointValue::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PointValue), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PointValue_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PointValue::initializeClass, 1)))
              return NULL;
            return t_PointValue::wrap_Object(PointValue(((t_PointValue *) arg)->object.this$));
          }
          static PyObject *t_PointValue_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PointValue::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PointValue_docID(t_PointValue *self)
          {
            jint result;
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PointValue_packedValue(t_PointValue *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.packedValue());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_PointValue_packedValueDocIDBytes(t_PointValue *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.packedValueDocIDBytes());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/SimplePatternSplitTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *SimplePatternSplitTokenizer::class$ = NULL;
          jmethodID *SimplePatternSplitTokenizer::mids$ = NULL;
          bool SimplePatternSplitTokenizer::live$ = false;

          jclass SimplePatternSplitTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/SimplePatternSplitTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_06c1b4541f684199] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_init$_f84c6abc4ac25b63] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_init$_10e85ca44ef866b2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/lang/String;I)V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimplePatternSplitTokenizer::SimplePatternSplitTokenizer(const ::java::lang::String & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

          SimplePatternSplitTokenizer::SimplePatternSplitTokenizer(const ::org::apache::lucene::util::automaton::Automaton & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_06c1b4541f684199, a0.this$)) {}

          SimplePatternSplitTokenizer::SimplePatternSplitTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::org::apache::lucene::util::automaton::Automaton & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_f84c6abc4ac25b63, a0.this$, a1.this$)) {}

          SimplePatternSplitTokenizer::SimplePatternSplitTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::lang::String & a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_10e85ca44ef866b2, a0.this$, a1.this$, a2)) {}

          void SimplePatternSplitTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean SimplePatternSplitTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void SimplePatternSplitTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_SimplePatternSplitTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimplePatternSplitTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimplePatternSplitTokenizer_init_(t_SimplePatternSplitTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimplePatternSplitTokenizer_end(t_SimplePatternSplitTokenizer *self, PyObject *args);
          static PyObject *t_SimplePatternSplitTokenizer_incrementToken(t_SimplePatternSplitTokenizer *self, PyObject *args);
          static PyObject *t_SimplePatternSplitTokenizer_reset(t_SimplePatternSplitTokenizer *self, PyObject *args);

          static PyMethodDef t_SimplePatternSplitTokenizer__methods_[] = {
            DECLARE_METHOD(t_SimplePatternSplitTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimplePatternSplitTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimplePatternSplitTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_SimplePatternSplitTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_SimplePatternSplitTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimplePatternSplitTokenizer)[] = {
            { Py_tp_methods, t_SimplePatternSplitTokenizer__methods_ },
            { Py_tp_init, (void *) t_SimplePatternSplitTokenizer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimplePatternSplitTokenizer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Tokenizer),
            NULL
          };

          DEFINE_TYPE(SimplePatternSplitTokenizer, t_SimplePatternSplitTokenizer, SimplePatternSplitTokenizer);

          void t_SimplePatternSplitTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(SimplePatternSplitTokenizer), &PY_TYPE_DEF(SimplePatternSplitTokenizer), module, "SimplePatternSplitTokenizer", 0);
          }

          void t_SimplePatternSplitTokenizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimplePatternSplitTokenizer), "class_", make_descriptor(SimplePatternSplitTokenizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimplePatternSplitTokenizer), "wrapfn_", make_descriptor(t_SimplePatternSplitTokenizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimplePatternSplitTokenizer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimplePatternSplitTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimplePatternSplitTokenizer::initializeClass, 1)))
              return NULL;
            return t_SimplePatternSplitTokenizer::wrap_Object(SimplePatternSplitTokenizer(((t_SimplePatternSplitTokenizer *) arg)->object.this$));
          }
          static PyObject *t_SimplePatternSplitTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimplePatternSplitTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimplePatternSplitTokenizer_init_(t_SimplePatternSplitTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                SimplePatternSplitTokenizer object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = SimplePatternSplitTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                SimplePatternSplitTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
                {
                  INT_CALL(object = SimplePatternSplitTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
                SimplePatternSplitTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SimplePatternSplitTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                SimplePatternSplitTokenizer object((jobject) NULL);

                if (!parseArgs(args, "ksI", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SimplePatternSplitTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimplePatternSplitTokenizer_end(t_SimplePatternSplitTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimplePatternSplitTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_SimplePatternSplitTokenizer_incrementToken(t_SimplePatternSplitTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SimplePatternSplitTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_SimplePatternSplitTokenizer_reset(t_SimplePatternSplitTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimplePatternSplitTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig.h"
#include "org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *AbstractQueryConfig::class$ = NULL;
              jmethodID *AbstractQueryConfig::mids$ = NULL;
              bool AbstractQueryConfig::live$ = false;

              jclass AbstractQueryConfig::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_get_3cdb1f4eafd3fdd7] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;)Ljava/lang/Object;");
                  mids$[mid_has_d7e66a8c157386b6] = env->getMethodID(cls, "has", "(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;)Z");
                  mids$[mid_set_9649488516718ea8] = env->getMethodID(cls, "set", "(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;Ljava/lang/Object;)V");
                  mids$[mid_unset_d7e66a8c157386b6] = env->getMethodID(cls, "unset", "(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;)Z");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::Object AbstractQueryConfig::get(const ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_3cdb1f4eafd3fdd7], a0.this$));
              }

              jboolean AbstractQueryConfig::has(const ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_has_d7e66a8c157386b6], a0.this$);
              }

              void AbstractQueryConfig::set(const ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey & a0, const ::java::lang::Object & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_set_9649488516718ea8], a0.this$, a1.this$);
              }

              jboolean AbstractQueryConfig::unset(const ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_unset_d7e66a8c157386b6], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_AbstractQueryConfig_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AbstractQueryConfig_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AbstractQueryConfig_get(t_AbstractQueryConfig *self, PyObject *arg);
              static PyObject *t_AbstractQueryConfig_has(t_AbstractQueryConfig *self, PyObject *arg);
              static PyObject *t_AbstractQueryConfig_set(t_AbstractQueryConfig *self, PyObject *args);
              static PyObject *t_AbstractQueryConfig_unset(t_AbstractQueryConfig *self, PyObject *arg);

              static PyMethodDef t_AbstractQueryConfig__methods_[] = {
                DECLARE_METHOD(t_AbstractQueryConfig, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AbstractQueryConfig, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AbstractQueryConfig, get, METH_O),
                DECLARE_METHOD(t_AbstractQueryConfig, has, METH_O),
                DECLARE_METHOD(t_AbstractQueryConfig, set, METH_VARARGS),
                DECLARE_METHOD(t_AbstractQueryConfig, unset, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(AbstractQueryConfig)[] = {
                { Py_tp_methods, t_AbstractQueryConfig__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(AbstractQueryConfig)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(AbstractQueryConfig, t_AbstractQueryConfig, AbstractQueryConfig);

              void t_AbstractQueryConfig::install(PyObject *module)
              {
                installType(&PY_TYPE(AbstractQueryConfig), &PY_TYPE_DEF(AbstractQueryConfig), module, "AbstractQueryConfig", 0);
              }

              void t_AbstractQueryConfig::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractQueryConfig), "class_", make_descriptor(AbstractQueryConfig::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractQueryConfig), "wrapfn_", make_descriptor(t_AbstractQueryConfig::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractQueryConfig), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AbstractQueryConfig_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AbstractQueryConfig::initializeClass, 1)))
                  return NULL;
                return t_AbstractQueryConfig::wrap_Object(AbstractQueryConfig(((t_AbstractQueryConfig *) arg)->object.this$));
              }
              static PyObject *t_AbstractQueryConfig_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AbstractQueryConfig::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_AbstractQueryConfig_get(t_AbstractQueryConfig *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::parameters_))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "get", arg);
                return NULL;
              }

              static PyObject *t_AbstractQueryConfig_has(t_AbstractQueryConfig *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::parameters_))
                {
                  OBJ_CALL(result = self->object.has(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "has", arg);
                return NULL;
              }

              static PyObject *t_AbstractQueryConfig_set(t_AbstractQueryConfig *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::Object a1((jobject) NULL);

                if (!parseArgs(args, "Ko", ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::parameters_, &a1))
                {
                  OBJ_CALL(self->object.set(a0, a1));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "set", args);
                return NULL;
              }

              static PyObject *t_AbstractQueryConfig_unset(t_AbstractQueryConfig *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::parameters_))
                {
                  OBJ_CALL(result = self->object.unset(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "unset", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentReadState::class$ = NULL;
        jmethodID *SegmentReadState::mids$ = NULL;
        jfieldID *SegmentReadState::fids$ = NULL;
        bool SegmentReadState::live$ = false;

        jclass SegmentReadState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentReadState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_e382509c18f9eb2d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentReadState;Ljava/lang/String;)V");
            mids$[mid_init$_5ab8220dbafb2f4c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_init$_86136a9057db4e1a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_context] = env->getFieldID(cls, "context", "Lorg/apache/lucene/store/IOContext;");
            fids$[fid_directory] = env->getFieldID(cls, "directory", "Lorg/apache/lucene/store/Directory;");
            fids$[fid_fieldInfos] = env->getFieldID(cls, "fieldInfos", "Lorg/apache/lucene/index/FieldInfos;");
            fids$[fid_segmentInfo] = env->getFieldID(cls, "segmentInfo", "Lorg/apache/lucene/index/SegmentInfo;");
            fids$[fid_segmentSuffix] = env->getFieldID(cls, "segmentSuffix", "Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentReadState::SegmentReadState(const SegmentReadState & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e382509c18f9eb2d, a0.this$, a1.this$)) {}

        SegmentReadState::SegmentReadState(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5ab8220dbafb2f4c, a0.this$, a1.this$, a2.this$, a3.this$)) {}

        SegmentReadState::SegmentReadState(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3, const ::java::lang::String & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_86136a9057db4e1a, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

        ::org::apache::lucene::store::IOContext SegmentReadState::_get_context() const
        {
          return ::org::apache::lucene::store::IOContext(env->getObjectField(this$, fids$[fid_context]));
        }

        ::org::apache::lucene::store::Directory SegmentReadState::_get_directory() const
        {
          return ::org::apache::lucene::store::Directory(env->getObjectField(this$, fids$[fid_directory]));
        }

        ::org::apache::lucene::index::FieldInfos SegmentReadState::_get_fieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->getObjectField(this$, fids$[fid_fieldInfos]));
        }

        ::org::apache::lucene::index::SegmentInfo SegmentReadState::_get_segmentInfo() const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->getObjectField(this$, fids$[fid_segmentInfo]));
        }

        ::java::lang::String SegmentReadState::_get_segmentSuffix() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_segmentSuffix]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentReadState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentReadState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentReadState_init_(t_SegmentReadState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentReadState_get__context(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__directory(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__fieldInfos(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__segmentInfo(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__segmentSuffix(t_SegmentReadState *self, void *data);

        static PyGetSetDef t_SegmentReadState__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentReadState, context),
          DECLARE_GET_FIELD(t_SegmentReadState, directory),
          DECLARE_GET_FIELD(t_SegmentReadState, fieldInfos),
          DECLARE_GET_FIELD(t_SegmentReadState, segmentInfo),
          DECLARE_GET_FIELD(t_SegmentReadState, segmentSuffix),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentReadState__methods_[] = {
          DECLARE_METHOD(t_SegmentReadState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentReadState, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SegmentReadState)[] = {
          { Py_tp_methods, t_SegmentReadState__methods_ },
          { Py_tp_init, (void *) t_SegmentReadState_init_ },
          { Py_tp_getset, t_SegmentReadState__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SegmentReadState)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SegmentReadState, t_SegmentReadState, SegmentReadState);

        void t_SegmentReadState::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentReadState), &PY_TYPE_DEF(SegmentReadState), module, "SegmentReadState", 0);
        }

        void t_SegmentReadState::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentReadState), "class_", make_descriptor(SegmentReadState::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentReadState), "wrapfn_", make_descriptor(t_SegmentReadState::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentReadState), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentReadState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentReadState::initializeClass, 1)))
            return NULL;
          return t_SegmentReadState::wrap_Object(SegmentReadState(((t_SegmentReadState *) arg)->object.this$));
        }
        static PyObject *t_SegmentReadState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentReadState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentReadState_init_(t_SegmentReadState *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              SegmentReadState a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              SegmentReadState object((jobject) NULL);

              if (!parseArgs(args, "ks", SegmentReadState::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SegmentReadState(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
              ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
              ::org::apache::lucene::store::IOContext a3((jobject) NULL);
              SegmentReadState object((jobject) NULL);

              if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = SegmentReadState(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
              ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
              ::org::apache::lucene::store::IOContext a3((jobject) NULL);
              ::java::lang::String a4((jobject) NULL);
              SegmentReadState object((jobject) NULL);

              if (!parseArgs(args, "kkkks", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = SegmentReadState(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentReadState_get__context(t_SegmentReadState *self, void *data)
        {
          ::org::apache::lucene::store::IOContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_context());
          return ::org::apache::lucene::store::t_IOContext::wrap_Object(value);
        }

        static PyObject *t_SegmentReadState_get__directory(t_SegmentReadState *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object._get_directory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_SegmentReadState_get__fieldInfos(t_SegmentReadState *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_SegmentReadState_get__segmentInfo(t_SegmentReadState *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentInfo());
          return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(value);
        }

        static PyObject *t_SegmentReadState_get__segmentSuffix(t_SegmentReadState *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentSuffix());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/IndriAndScorer.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *IndriAndScorer::class$ = NULL;
        jmethodID *IndriAndScorer::mids$ = NULL;
        bool IndriAndScorer::live$ = false;

        jclass IndriAndScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/IndriAndScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_score_b5f371d4f0acc23c] = env->getMethodID(cls, "score", "(Ljava/util/List;)F");
            mids$[mid_smoothingScore_5c128e5051334904] = env->getMethodID(cls, "smoothingScore", "(Ljava/util/List;I)F");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jfloat IndriAndScorer::score(const ::java::util::List & a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_score_b5f371d4f0acc23c], a0.this$);
        }

        jfloat IndriAndScorer::smoothingScore(const ::java::util::List & a0, jint a1) const
        {
          return env->callFloatMethod(this$, mids$[mid_smoothingScore_5c128e5051334904], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_IndriAndScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndriAndScorer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndriAndScorer_score(t_IndriAndScorer *self, PyObject *args);
        static PyObject *t_IndriAndScorer_smoothingScore(t_IndriAndScorer *self, PyObject *args);

        static PyMethodDef t_IndriAndScorer__methods_[] = {
          DECLARE_METHOD(t_IndriAndScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndriAndScorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndriAndScorer, score, METH_VARARGS),
          DECLARE_METHOD(t_IndriAndScorer, smoothingScore, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndriAndScorer)[] = {
          { Py_tp_methods, t_IndriAndScorer__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndriAndScorer)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::IndriDisjunctionScorer),
          NULL
        };

        DEFINE_TYPE(IndriAndScorer, t_IndriAndScorer, IndriAndScorer);

        void t_IndriAndScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(IndriAndScorer), &PY_TYPE_DEF(IndriAndScorer), module, "IndriAndScorer", 0);
        }

        void t_IndriAndScorer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndriAndScorer), "class_", make_descriptor(IndriAndScorer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndriAndScorer), "wrapfn_", make_descriptor(t_IndriAndScorer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndriAndScorer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndriAndScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndriAndScorer::initializeClass, 1)))
            return NULL;
          return t_IndriAndScorer::wrap_Object(IndriAndScorer(((t_IndriAndScorer *) arg)->object.this$));
        }
        static PyObject *t_IndriAndScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndriAndScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndriAndScorer_score(t_IndriAndScorer *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          jfloat result;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(result = self->object.score(a0));
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(PY_TYPE(IndriAndScorer), (PyObject *) self, "score", args, 2);
        }

        static PyObject *t_IndriAndScorer_smoothingScore(t_IndriAndScorer *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          jint a1;
          jfloat result;

          if (!parseArgs(args, "KI", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
          {
            OBJ_CALL(result = self->object.smoothingScore(a0, a1));
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(PY_TYPE(IndriAndScorer), (PyObject *) self, "smoothingScore", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/PairOutputs$Pair.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *PairOutputs$Pair::class$ = NULL;
          jmethodID *PairOutputs$Pair::mids$ = NULL;
          jfieldID *PairOutputs$Pair::fids$ = NULL;
          bool PairOutputs$Pair::live$ = false;

          jclass PairOutputs$Pair::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/PairOutputs$Pair");

              mids$ = new jmethodID[max_mid];
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_output1] = env->getFieldID(cls, "output1", "Ljava/lang/Object;");
              fids$[fid_output2] = env->getFieldID(cls, "output2", "Ljava/lang/Object;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean PairOutputs$Pair::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint PairOutputs$Pair::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::String PairOutputs$Pair::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          ::java::lang::Object PairOutputs$Pair::_get_output1() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output1]));
          }

          ::java::lang::Object PairOutputs$Pair::_get_output2() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output2]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_PairOutputs$Pair_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PairOutputs$Pair_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PairOutputs$Pair_of_(t_PairOutputs$Pair *self, PyObject *args);
          static PyObject *t_PairOutputs$Pair_equals(t_PairOutputs$Pair *self, PyObject *args);
          static PyObject *t_PairOutputs$Pair_hashCode(t_PairOutputs$Pair *self, PyObject *args);
          static PyObject *t_PairOutputs$Pair_toString(t_PairOutputs$Pair *self, PyObject *args);
          static PyObject *t_PairOutputs$Pair_get__output1(t_PairOutputs$Pair *self, void *data);
          static PyObject *t_PairOutputs$Pair_get__output2(t_PairOutputs$Pair *self, void *data);

          static PyObject *t_PairOutputs$Pair_get__parameters_(t_PairOutputs$Pair *self, void *data);
          static PyGetSetDef t_PairOutputs$Pair__fields_[] = {
            DECLARE_GET_FIELD(t_PairOutputs$Pair, output1),
            DECLARE_GET_FIELD(t_PairOutputs$Pair, output2),
            DECLARE_GET_FIELD(t_PairOutputs$Pair, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PairOutputs$Pair__methods_[] = {
            DECLARE_METHOD(t_PairOutputs$Pair, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PairOutputs$Pair, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PairOutputs$Pair, of_, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs$Pair, equals, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs$Pair, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs$Pair, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PairOutputs$Pair)[] = {
            { Py_tp_methods, t_PairOutputs$Pair__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_PairOutputs$Pair__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PairOutputs$Pair)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PairOutputs$Pair, t_PairOutputs$Pair, PairOutputs$Pair);
          PyObject *t_PairOutputs$Pair::wrap_Object(const PairOutputs$Pair& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_PairOutputs$Pair::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PairOutputs$Pair *self = (t_PairOutputs$Pair *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_PairOutputs$Pair::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_PairOutputs$Pair::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PairOutputs$Pair *self = (t_PairOutputs$Pair *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_PairOutputs$Pair::install(PyObject *module)
          {
            installType(&PY_TYPE(PairOutputs$Pair), &PY_TYPE_DEF(PairOutputs$Pair), module, "PairOutputs$Pair", 0);
          }

          void t_PairOutputs$Pair::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PairOutputs$Pair), "class_", make_descriptor(PairOutputs$Pair::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PairOutputs$Pair), "wrapfn_", make_descriptor(t_PairOutputs$Pair::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PairOutputs$Pair), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PairOutputs$Pair_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PairOutputs$Pair::initializeClass, 1)))
              return NULL;
            return t_PairOutputs$Pair::wrap_Object(PairOutputs$Pair(((t_PairOutputs$Pair *) arg)->object.this$));
          }
          static PyObject *t_PairOutputs$Pair_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PairOutputs$Pair::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PairOutputs$Pair_of_(t_PairOutputs$Pair *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_PairOutputs$Pair_equals(t_PairOutputs$Pair *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(PairOutputs$Pair), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PairOutputs$Pair_hashCode(t_PairOutputs$Pair *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(PairOutputs$Pair), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PairOutputs$Pair_toString(t_PairOutputs$Pair *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(PairOutputs$Pair), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_PairOutputs$Pair_get__parameters_(t_PairOutputs$Pair *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_PairOutputs$Pair_get__output1(t_PairOutputs$Pair *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output1());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_PairOutputs$Pair_get__output2(t_PairOutputs$Pair *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output2());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/SimplePatternTokenizerFactory.h"
#include "org/apache/lucene/analysis/pattern/SimplePatternTokenizer.h"
#include "java/util/Map.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *SimplePatternTokenizerFactory::class$ = NULL;
          jmethodID *SimplePatternTokenizerFactory::mids$ = NULL;
          bool SimplePatternTokenizerFactory::live$ = false;
          ::java::lang::String *SimplePatternTokenizerFactory::NAME = NULL;
          ::java::lang::String *SimplePatternTokenizerFactory::PATTERN = NULL;

          jclass SimplePatternTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/SimplePatternTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_1c9cfe01a5024f33] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;)Lorg/apache/lucene/analysis/pattern/SimplePatternTokenizer;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              PATTERN = new ::java::lang::String(env->getStaticObjectField(cls, "PATTERN", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimplePatternTokenizerFactory::SimplePatternTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::pattern::SimplePatternTokenizer SimplePatternTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0) const
          {
            return ::org::apache::lucene::analysis::pattern::SimplePatternTokenizer(env->callObjectMethod(this$, mids$[mid_create_1c9cfe01a5024f33], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_SimplePatternTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimplePatternTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimplePatternTokenizerFactory_init_(t_SimplePatternTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimplePatternTokenizerFactory_create(t_SimplePatternTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_SimplePatternTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_SimplePatternTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimplePatternTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimplePatternTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimplePatternTokenizerFactory)[] = {
            { Py_tp_methods, t_SimplePatternTokenizerFactory__methods_ },
            { Py_tp_init, (void *) t_SimplePatternTokenizerFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimplePatternTokenizerFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenizerFactory),
            NULL
          };

          DEFINE_TYPE(SimplePatternTokenizerFactory, t_SimplePatternTokenizerFactory, SimplePatternTokenizerFactory);

          void t_SimplePatternTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SimplePatternTokenizerFactory), &PY_TYPE_DEF(SimplePatternTokenizerFactory), module, "SimplePatternTokenizerFactory", 0);
          }

          void t_SimplePatternTokenizerFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimplePatternTokenizerFactory), "class_", make_descriptor(SimplePatternTokenizerFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimplePatternTokenizerFactory), "wrapfn_", make_descriptor(t_SimplePatternTokenizerFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimplePatternTokenizerFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(SimplePatternTokenizerFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimplePatternTokenizerFactory), "NAME", make_descriptor(j2p(*SimplePatternTokenizerFactory::NAME)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimplePatternTokenizerFactory), "PATTERN", make_descriptor(j2p(*SimplePatternTokenizerFactory::PATTERN)));
          }

          static PyObject *t_SimplePatternTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimplePatternTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_SimplePatternTokenizerFactory::wrap_Object(SimplePatternTokenizerFactory(((t_SimplePatternTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_SimplePatternTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimplePatternTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimplePatternTokenizerFactory_init_(t_SimplePatternTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SimplePatternTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SimplePatternTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimplePatternTokenizerFactory_create(t_SimplePatternTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::org::apache::lucene::analysis::pattern::SimplePatternTokenizer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::pattern::t_SimplePatternTokenizer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimplePatternTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Document.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "java/lang/Class.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Document::class$ = NULL;
        jmethodID *Document::mids$ = NULL;
        bool Document::live$ = false;

        jclass Document::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Document");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_6ebcd75dd680ded9] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/IndexableField;)V");
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_get_9bfa75c9f141b67f] = env->getMethodID(cls, "get", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getBinaryValue_29a6127792bdfe91] = env->getMethodID(cls, "getBinaryValue", "(Ljava/lang/String;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getBinaryValues_53172187d6bf2b69] = env->getMethodID(cls, "getBinaryValues", "(Ljava/lang/String;)[Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getField_e251e299bb4c419b] = env->getMethodID(cls, "getField", "(Ljava/lang/String;)Lorg/apache/lucene/index/IndexableField;");
            mids$[mid_getFields_49ec78390f08338a] = env->getMethodID(cls, "getFields", "()Ljava/util/List;");
            mids$[mid_getFields_a88868a017442168] = env->getMethodID(cls, "getFields", "(Ljava/lang/String;)[Lorg/apache/lucene/index/IndexableField;");
            mids$[mid_getValues_1606e23a23a4a8e5] = env->getMethodID(cls, "getValues", "(Ljava/lang/String;)[Ljava/lang/String;");
            mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_removeField_9fd2eb66a64e6f0f] = env->getMethodID(cls, "removeField", "(Ljava/lang/String;)V");
            mids$[mid_removeFields_9fd2eb66a64e6f0f] = env->getMethodID(cls, "removeFields", "(Ljava/lang/String;)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Document::Document() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void Document::add(const ::org::apache::lucene::index::IndexableField & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_6ebcd75dd680ded9], a0.this$);
        }

        void Document::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
        }

        ::java::lang::String Document::get(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_9bfa75c9f141b67f], a0.this$));
        }

        ::org::apache::lucene::util::BytesRef Document::getBinaryValue(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBinaryValue_29a6127792bdfe91], a0.this$));
        }

        JArray< ::org::apache::lucene::util::BytesRef > Document::getBinaryValues(const ::java::lang::String & a0) const
        {
          return JArray< ::org::apache::lucene::util::BytesRef >(env->callObjectMethod(this$, mids$[mid_getBinaryValues_53172187d6bf2b69], a0.this$));
        }

        ::org::apache::lucene::index::IndexableField Document::getField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::IndexableField(env->callObjectMethod(this$, mids$[mid_getField_e251e299bb4c419b], a0.this$));
        }

        ::java::util::List Document::getFields() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getFields_49ec78390f08338a]));
        }

        JArray< ::org::apache::lucene::index::IndexableField > Document::getFields(const ::java::lang::String & a0) const
        {
          return JArray< ::org::apache::lucene::index::IndexableField >(env->callObjectMethod(this$, mids$[mid_getFields_a88868a017442168], a0.this$));
        }

        JArray< ::java::lang::String > Document::getValues(const ::java::lang::String & a0) const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getValues_1606e23a23a4a8e5], a0.this$));
        }

        ::java::util::Iterator Document::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
        }

        void Document::removeField(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeField_9fd2eb66a64e6f0f], a0.this$);
        }

        void Document::removeFields(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeFields_9fd2eb66a64e6f0f], a0.this$);
        }

        ::java::lang::String Document::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Document_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Document_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Document_init_(t_Document *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Document_add(t_Document *self, PyObject *arg);
        static PyObject *t_Document_clear(t_Document *self);
        static PyObject *t_Document_get(t_Document *self, PyObject *arg);
        static PyObject *t_Document_getBinaryValue(t_Document *self, PyObject *arg);
        static PyObject *t_Document_getBinaryValues(t_Document *self, PyObject *arg);
        static PyObject *t_Document_getField(t_Document *self, PyObject *arg);
        static PyObject *t_Document_getFields(t_Document *self, PyObject *args);
        static PyObject *t_Document_getValues(t_Document *self, PyObject *arg);
        static PyObject *t_Document_iterator(t_Document *self);
        static PyObject *t_Document_removeField(t_Document *self, PyObject *arg);
        static PyObject *t_Document_removeFields(t_Document *self, PyObject *arg);
        static PyObject *t_Document_toString(t_Document *self, PyObject *args);
        static PyObject *t_Document_get__fields(t_Document *self, void *data);
        static PyGetSetDef t_Document__fields_[] = {
          DECLARE_GET_FIELD(t_Document, fields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Document__methods_[] = {
          DECLARE_METHOD(t_Document, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Document, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Document, add, METH_O),
          DECLARE_METHOD(t_Document, clear, METH_NOARGS),
          DECLARE_METHOD(t_Document, get, METH_O),
          DECLARE_METHOD(t_Document, getBinaryValue, METH_O),
          DECLARE_METHOD(t_Document, getBinaryValues, METH_O),
          DECLARE_METHOD(t_Document, getField, METH_O),
          DECLARE_METHOD(t_Document, getFields, METH_VARARGS),
          DECLARE_METHOD(t_Document, getValues, METH_O),
          DECLARE_METHOD(t_Document, iterator, METH_NOARGS),
          DECLARE_METHOD(t_Document, removeField, METH_O),
          DECLARE_METHOD(t_Document, removeFields, METH_O),
          DECLARE_METHOD(t_Document, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Document)[] = {
          { Py_tp_methods, t_Document__methods_ },
          { Py_tp_init, (void *) t_Document_init_ },
          { Py_tp_getset, t_Document__fields_ },
          { Py_tp_iter, (void *) ((PyObject *(*)(t_Document *)) get_iterator< t_Document >) },
          { Py_tp_iternext, (void *) 0 },
          { Py_mp_subscript, (void *) t_Document_get },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Document)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Document, t_Document, Document);

        void t_Document::install(PyObject *module)
        {
          installType(&PY_TYPE(Document), &PY_TYPE_DEF(Document), module, "Document", 0);
        }

        void t_Document::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Document), "class_", make_descriptor(Document::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Document), "wrapfn_", make_descriptor(t_Document::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Document), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Document_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Document::initializeClass, 1)))
            return NULL;
          return t_Document::wrap_Object(Document(((t_Document *) arg)->object.this$));
        }
        static PyObject *t_Document_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Document::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Document_init_(t_Document *self, PyObject *args, PyObject *kwds)
        {
          Document object((jobject) NULL);

          INT_CALL(object = Document());
          self->object = object;

          return 0;
        }

        static PyObject *t_Document_add(t_Document *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexableField a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexableField::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_Document_clear(t_Document *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_Document_get(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_Document_getBinaryValue(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryValue(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getBinaryValue", arg);
          return NULL;
        }

        static PyObject *t_Document_getBinaryValues(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::org::apache::lucene::util::BytesRef > result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryValues(a0));
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_BytesRef::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "getBinaryValues", arg);
          return NULL;
        }

        static PyObject *t_Document_getField(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::IndexableField result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getField(a0));
            return ::org::apache::lucene::index::t_IndexableField::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getField", arg);
          return NULL;
        }

        static PyObject *t_Document_getFields(t_Document *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::util::List result((jobject) NULL);
              OBJ_CALL(result = self->object.getFields());
              return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(IndexableField));
            }
            break;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::org::apache::lucene::index::IndexableField > result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.getFields(a0));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_IndexableField::wrap_jobject);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getFields", args);
          return NULL;
        }

        static PyObject *t_Document_getValues(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getValues(a0));
            return JArray<jstring>(result.this$).wrap();
          }

          PyErr_SetArgsError((PyObject *) self, "getValues", arg);
          return NULL;
        }

        static PyObject *t_Document_iterator(t_Document *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(IndexableField));
        }

        static PyObject *t_Document_removeField(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.removeField(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeField", arg);
          return NULL;
        }

        static PyObject *t_Document_removeFields(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.removeFields(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeFields", arg);
          return NULL;
        }

        static PyObject *t_Document_toString(t_Document *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(Document), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Document_get__fields(t_Document *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getFields());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/DirectWriter.h"
#include "org/apache/lucene/util/packed/DirectWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *DirectWriter::class$ = NULL;
          jmethodID *DirectWriter::mids$ = NULL;
          bool DirectWriter::live$ = false;

          jclass DirectWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/DirectWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_9c778c9bce6694df] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_bitsRequired_694afffd0eb7dc3c] = env->getStaticMethodID(cls, "bitsRequired", "(J)I");
              mids$[mid_finish_f2cc1bce94666404] = env->getMethodID(cls, "finish", "()V");
              mids$[mid_getInstance_3d6128d9b8d37f02] = env->getStaticMethodID(cls, "getInstance", "(Lorg/apache/lucene/store/DataOutput;JI)Lorg/apache/lucene/util/packed/DirectWriter;");
              mids$[mid_unsignedBitsRequired_694afffd0eb7dc3c] = env->getStaticMethodID(cls, "unsignedBitsRequired", "(J)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void DirectWriter::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_9c778c9bce6694df], a0);
          }

          jint DirectWriter::bitsRequired(jlong a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_bitsRequired_694afffd0eb7dc3c], a0);
          }

          void DirectWriter::finish() const
          {
            env->callVoidMethod(this$, mids$[mid_finish_f2cc1bce94666404]);
          }

          DirectWriter DirectWriter::getInstance(const ::org::apache::lucene::store::DataOutput & a0, jlong a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return DirectWriter(env->callStaticObjectMethod(cls, mids$[mid_getInstance_3d6128d9b8d37f02], a0.this$, a1, a2));
          }

          jint DirectWriter::unsignedBitsRequired(jlong a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_unsignedBitsRequired_694afffd0eb7dc3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_DirectWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectWriter_add(t_DirectWriter *self, PyObject *arg);
          static PyObject *t_DirectWriter_bitsRequired(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectWriter_finish(t_DirectWriter *self);
          static PyObject *t_DirectWriter_getInstance(PyTypeObject *type, PyObject *args);
          static PyObject *t_DirectWriter_unsignedBitsRequired(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_DirectWriter__methods_[] = {
            DECLARE_METHOD(t_DirectWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectWriter, add, METH_O),
            DECLARE_METHOD(t_DirectWriter, bitsRequired, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectWriter, finish, METH_NOARGS),
            DECLARE_METHOD(t_DirectWriter, getInstance, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_DirectWriter, unsignedBitsRequired, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DirectWriter)[] = {
            { Py_tp_methods, t_DirectWriter__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DirectWriter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(DirectWriter, t_DirectWriter, DirectWriter);

          void t_DirectWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(DirectWriter), &PY_TYPE_DEF(DirectWriter), module, "DirectWriter", 0);
          }

          void t_DirectWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectWriter), "class_", make_descriptor(DirectWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectWriter), "wrapfn_", make_descriptor(t_DirectWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectWriter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DirectWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DirectWriter::initializeClass, 1)))
              return NULL;
            return t_DirectWriter::wrap_Object(DirectWriter(((t_DirectWriter *) arg)->object.this$));
          }
          static PyObject *t_DirectWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DirectWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DirectWriter_add(t_DirectWriter *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_DirectWriter_bitsRequired(PyTypeObject *type, PyObject *arg)
          {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectWriter::bitsRequired(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "bitsRequired", arg);
            return NULL;
          }

          static PyObject *t_DirectWriter_finish(t_DirectWriter *self)
          {
            OBJ_CALL(self->object.finish());
            Py_RETURN_NONE;
          }

          static PyObject *t_DirectWriter_getInstance(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            jlong a1;
            jint a2;
            DirectWriter result((jobject) NULL);

            if (!parseArgs(args, "kJI", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectWriter::getInstance(a0, a1, a2));
              return t_DirectWriter::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getInstance", args);
            return NULL;
          }

          static PyObject *t_DirectWriter_unsignedBitsRequired(PyTypeObject *type, PyObject *arg)
          {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectWriter::unsignedBitsRequired(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "unsignedBitsRequired", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *IOException::class$ = NULL;
    jmethodID *IOException::mids$ = NULL;
    bool IOException::live$ = false;

    jclass IOException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/IOException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_471cfbdb800444a7] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_2e9d196dc293ffe6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    IOException::IOException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

    IOException::IOException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

    IOException::IOException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_471cfbdb800444a7, a0.this$)) {}

    IOException::IOException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_2e9d196dc293ffe6, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_IOException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_IOException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_IOException_init_(t_IOException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_IOException__methods_[] = {
      DECLARE_METHOD(t_IOException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_IOException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(IOException)[] = {
      { Py_tp_methods, t_IOException__methods_ },
      { Py_tp_init, (void *) t_IOException_init_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(IOException)[] = {
      &PY_TYPE_DEF(::java::lang::Exception),
      NULL
    };

    DEFINE_TYPE(IOException, t_IOException, IOException);

    void t_IOException::install(PyObject *module)
    {
      installType(&PY_TYPE(IOException), &PY_TYPE_DEF(IOException), module, "IOException", 0);
    }

    void t_IOException::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(IOException), "class_", make_descriptor(IOException::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(IOException), "wrapfn_", make_descriptor(t_IOException::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(IOException), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_IOException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, IOException::initializeClass, 1)))
        return NULL;
      return t_IOException::wrap_Object(IOException(((t_IOException *) arg)->object.this$));
    }
    static PyObject *t_IOException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, IOException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_IOException_init_(t_IOException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          IOException object((jobject) NULL);

          INT_CALL(object = IOException());
          self->object = object;
          break;
        }
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          IOException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = IOException(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::Throwable a0((jobject) NULL);
          IOException object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = IOException(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          IOException object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = IOException(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/SimplePatternSplitTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/pattern/SimplePatternSplitTokenizer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *SimplePatternSplitTokenizerFactory::class$ = NULL;
          jmethodID *SimplePatternSplitTokenizerFactory::mids$ = NULL;
          bool SimplePatternSplitTokenizerFactory::live$ = false;
          ::java::lang::String *SimplePatternSplitTokenizerFactory::NAME = NULL;
          ::java::lang::String *SimplePatternSplitTokenizerFactory::PATTERN = NULL;

          jclass SimplePatternSplitTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/SimplePatternSplitTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ab7ac4ff3bcc2a68] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;)Lorg/apache/lucene/analysis/pattern/SimplePatternSplitTokenizer;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              PATTERN = new ::java::lang::String(env->getStaticObjectField(cls, "PATTERN", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimplePatternSplitTokenizerFactory::SimplePatternSplitTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::pattern::SimplePatternSplitTokenizer SimplePatternSplitTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0) const
          {
            return ::org::apache::lucene::analysis::pattern::SimplePatternSplitTokenizer(env->callObjectMethod(this$, mids$[mid_create_ab7ac4ff3bcc2a68], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_SimplePatternSplitTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimplePatternSplitTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimplePatternSplitTokenizerFactory_init_(t_SimplePatternSplitTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimplePatternSplitTokenizerFactory_create(t_SimplePatternSplitTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_SimplePatternSplitTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_SimplePatternSplitTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimplePatternSplitTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimplePatternSplitTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimplePatternSplitTokenizerFactory)[] = {
            { Py_tp_methods, t_SimplePatternSplitTokenizerFactory__methods_ },
            { Py_tp_init, (void *) t_SimplePatternSplitTokenizerFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimplePatternSplitTokenizerFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenizerFactory),
            NULL
          };

          DEFINE_TYPE(SimplePatternSplitTokenizerFactory, t_SimplePatternSplitTokenizerFactory, SimplePatternSplitTokenizerFactory);

          void t_SimplePatternSplitTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SimplePatternSplitTokenizerFactory), &PY_TYPE_DEF(SimplePatternSplitTokenizerFactory), module, "SimplePatternSplitTokenizerFactory", 0);
          }

          void t_SimplePatternSplitTokenizerFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimplePatternSplitTokenizerFactory), "class_", make_descriptor(SimplePatternSplitTokenizerFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimplePatternSplitTokenizerFactory), "wrapfn_", make_descriptor(t_SimplePatternSplitTokenizerFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimplePatternSplitTokenizerFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(SimplePatternSplitTokenizerFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimplePatternSplitTokenizerFactory), "NAME", make_descriptor(j2p(*SimplePatternSplitTokenizerFactory::NAME)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimplePatternSplitTokenizerFactory), "PATTERN", make_descriptor(j2p(*SimplePatternSplitTokenizerFactory::PATTERN)));
          }

          static PyObject *t_SimplePatternSplitTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimplePatternSplitTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_SimplePatternSplitTokenizerFactory::wrap_Object(SimplePatternSplitTokenizerFactory(((t_SimplePatternSplitTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_SimplePatternSplitTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimplePatternSplitTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimplePatternSplitTokenizerFactory_init_(t_SimplePatternSplitTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SimplePatternSplitTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SimplePatternSplitTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimplePatternSplitTokenizerFactory_create(t_SimplePatternSplitTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::org::apache::lucene::analysis::pattern::SimplePatternSplitTokenizer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::pattern::t_SimplePatternSplitTokenizer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimplePatternSplitTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "org/apache/lucene/index/ImpactsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {

          ::java::lang::Class *IDVersionSegmentTermsEnum::class$ = NULL;
          jmethodID *IDVersionSegmentTermsEnum::mids$ = NULL;
          bool IDVersionSegmentTermsEnum::live$ = false;

          jclass IDVersionSegmentTermsEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_docFreq_9972fcc56b44e79d] = env->getMethodID(cls, "docFreq", "()I");
              mids$[mid_getVersion_2e5ae9edcb9b072f] = env->getMethodID(cls, "getVersion", "()J");
              mids$[mid_impacts_db5ea3c87adc7c65] = env->getMethodID(cls, "impacts", "(I)Lorg/apache/lucene/index/ImpactsEnum;");
              mids$[mid_next_7af2ea2e37ce82b8] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_ord_2e5ae9edcb9b072f] = env->getMethodID(cls, "ord", "()J");
              mids$[mid_postings_bb7f8f714d51176b] = env->getMethodID(cls, "postings", "(Lorg/apache/lucene/index/PostingsEnum;I)Lorg/apache/lucene/index/PostingsEnum;");
              mids$[mid_seekCeil_78824f53cd7bdb8a] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
              mids$[mid_seekExact_553d972fe19daaec] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
              mids$[mid_seekExact_9c778c9bce6694df] = env->getMethodID(cls, "seekExact", "(J)V");
              mids$[mid_seekExact_59a5c9565dacabef] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
              mids$[mid_seekExact_70c1ccb4f1d27d02] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;J)Z");
              mids$[mid_term_7af2ea2e37ce82b8] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_termState_774a8ebb2c222d2d] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_totalTermFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "totalTermFreq", "()J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint IDVersionSegmentTermsEnum::docFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_docFreq_9972fcc56b44e79d]);
          }

          jlong IDVersionSegmentTermsEnum::getVersion() const
          {
            return env->callLongMethod(this$, mids$[mid_getVersion_2e5ae9edcb9b072f]);
          }

          ::org::apache::lucene::index::ImpactsEnum IDVersionSegmentTermsEnum::impacts(jint a0) const
          {
            return ::org::apache::lucene::index::ImpactsEnum(env->callObjectMethod(this$, mids$[mid_impacts_db5ea3c87adc7c65], a0));
          }

          ::org::apache::lucene::util::BytesRef IDVersionSegmentTermsEnum::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_7af2ea2e37ce82b8]));
          }

          jlong IDVersionSegmentTermsEnum::ord() const
          {
            return env->callLongMethod(this$, mids$[mid_ord_2e5ae9edcb9b072f]);
          }

          ::org::apache::lucene::index::PostingsEnum IDVersionSegmentTermsEnum::postings(const ::org::apache::lucene::index::PostingsEnum & a0, jint a1) const
          {
            return ::org::apache::lucene::index::PostingsEnum(env->callObjectMethod(this$, mids$[mid_postings_bb7f8f714d51176b], a0.this$, a1));
          }

          ::org::apache::lucene::index::TermsEnum$SeekStatus IDVersionSegmentTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_78824f53cd7bdb8a], a0.this$));
          }

          jboolean IDVersionSegmentTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_seekExact_553d972fe19daaec], a0.this$);
          }

          void IDVersionSegmentTermsEnum::seekExact(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_seekExact_9c778c9bce6694df], a0);
          }

          void IDVersionSegmentTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_seekExact_59a5c9565dacabef], a0.this$, a1.this$);
          }

          jboolean IDVersionSegmentTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, jlong a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_seekExact_70c1ccb4f1d27d02], a0.this$, a1);
          }

          ::org::apache::lucene::util::BytesRef IDVersionSegmentTermsEnum::term() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_7af2ea2e37ce82b8]));
          }

          ::org::apache::lucene::index::TermState IDVersionSegmentTermsEnum::termState() const
          {
            return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_774a8ebb2c222d2d]));
          }

          ::java::lang::String IDVersionSegmentTermsEnum::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          jlong IDVersionSegmentTermsEnum::totalTermFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_totalTermFreq_2e5ae9edcb9b072f]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {
          static PyObject *t_IDVersionSegmentTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IDVersionSegmentTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IDVersionSegmentTermsEnum_docFreq(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_getVersion(t_IDVersionSegmentTermsEnum *self);
          static PyObject *t_IDVersionSegmentTermsEnum_impacts(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_next(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_ord(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_postings(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_seekCeil(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_seekExact(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_term(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_termState(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_toString(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_totalTermFreq(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_get__version(t_IDVersionSegmentTermsEnum *self, void *data);
          static PyGetSetDef t_IDVersionSegmentTermsEnum__fields_[] = {
            DECLARE_GET_FIELD(t_IDVersionSegmentTermsEnum, version),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IDVersionSegmentTermsEnum__methods_[] = {
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, docFreq, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, getVersion, METH_NOARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, impacts, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, next, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, ord, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, postings, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, seekCeil, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, seekExact, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, term, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, termState, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, toString, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, totalTermFreq, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IDVersionSegmentTermsEnum)[] = {
            { Py_tp_methods, t_IDVersionSegmentTermsEnum__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_IDVersionSegmentTermsEnum__fields_ },
            { Py_tp_iter, (void *) PyObject_SelfIter },
            { Py_tp_iternext, (void *) ((PyObject *(*)(t_IDVersionSegmentTermsEnum *)) get_next< t_IDVersionSegmentTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >) },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IDVersionSegmentTermsEnum)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::index::BaseTermsEnum),
            NULL
          };

          DEFINE_TYPE(IDVersionSegmentTermsEnum, t_IDVersionSegmentTermsEnum, IDVersionSegmentTermsEnum);

          void t_IDVersionSegmentTermsEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(IDVersionSegmentTermsEnum), &PY_TYPE_DEF(IDVersionSegmentTermsEnum), module, "IDVersionSegmentTermsEnum", 0);
          }

          void t_IDVersionSegmentTermsEnum::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IDVersionSegmentTermsEnum), "class_", make_descriptor(IDVersionSegmentTermsEnum::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IDVersionSegmentTermsEnum), "wrapfn_", make_descriptor(t_IDVersionSegmentTermsEnum::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IDVersionSegmentTermsEnum), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IDVersionSegmentTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IDVersionSegmentTermsEnum::initializeClass, 1)))
              return NULL;
            return t_IDVersionSegmentTermsEnum::wrap_Object(IDVersionSegmentTermsEnum(((t_IDVersionSegmentTermsEnum *) arg)->object.this$));
          }
          static PyObject *t_IDVersionSegmentTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IDVersionSegmentTermsEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IDVersionSegmentTermsEnum_docFreq(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docFreq());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "docFreq", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_getVersion(t_IDVersionSegmentTermsEnum *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getVersion());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_impacts(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::ImpactsEnum result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.impacts(a0));
              return ::org::apache::lucene::index::t_ImpactsEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "impacts", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_next(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_ord(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ord());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "ord", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_postings(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::index::PostingsEnum a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::index::PostingsEnum result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::PostingsEnum::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.postings(a0, a1));
              return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "postings", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_seekCeil(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekCeil(a0));
              return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "seekCeil", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_seekExact(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.seekExact(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.seekExact(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                ::org::apache::lucene::index::TermState a1((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.seekExact(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                jlong a1;
                jboolean result;

                if (!parseArgs(args, "kJ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.seekExact(a0, a1));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            return callSuper(PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "seekExact", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_term(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.term());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "term", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_termState(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::index::TermState result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termState());
              return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "termState", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_toString(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_totalTermFreq(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.totalTermFreq());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_get__version(t_IDVersionSegmentTermsEnum *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getVersion());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParserBase.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "java/util/Locale.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/TimeZone.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/queryparser/classic/QueryParser$Operator.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParserBase::class$ = NULL;
          jmethodID *QueryParserBase::mids$ = NULL;
          bool QueryParserBase::live$ = false;
          ::org::apache::lucene::queryparser::classic::QueryParser$Operator *QueryParserBase::AND_OPERATOR = NULL;
          ::org::apache::lucene::queryparser::classic::QueryParser$Operator *QueryParserBase::OR_OPERATOR = NULL;

          jclass QueryParserBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParserBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_ReInit_94838218118d13bf] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_TopLevelQuery_1cf26fcf5e3c5839] = env->getMethodID(cls, "TopLevelQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_escape_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "escape", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getAllowLeadingWildcard_8454bd5aa23fd11e] = env->getMethodID(cls, "getAllowLeadingWildcard", "()Z");
              mids$[mid_getAutoGeneratePhraseQueries_8454bd5aa23fd11e] = env->getMethodID(cls, "getAutoGeneratePhraseQueries", "()Z");
              mids$[mid_getDateResolution_29edadd05c3fc82d] = env->getMethodID(cls, "getDateResolution", "(Ljava/lang/String;)Lorg/apache/lucene/document/DateTools$Resolution;");
              mids$[mid_getDefaultOperator_f75dce5b73b81afc] = env->getMethodID(cls, "getDefaultOperator", "()Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;");
              mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getFuzzyMinSim_58aec2b64dff50c8] = env->getMethodID(cls, "getFuzzyMinSim", "()F");
              mids$[mid_getFuzzyPrefixLength_9972fcc56b44e79d] = env->getMethodID(cls, "getFuzzyPrefixLength", "()I");
              mids$[mid_getLocale_bd9770023d5e622d] = env->getMethodID(cls, "getLocale", "()Ljava/util/Locale;");
              mids$[mid_getMaxDeterminizedStates_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxDeterminizedStates", "()I");
              mids$[mid_getMultiTermRewriteMethod_aed18a8b23332eb7] = env->getMethodID(cls, "getMultiTermRewriteMethod", "()Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;");
              mids$[mid_getPhraseSlop_9972fcc56b44e79d] = env->getMethodID(cls, "getPhraseSlop", "()I");
              mids$[mid_getTimeZone_a00e8b2cc21b09d1] = env->getMethodID(cls, "getTimeZone", "()Ljava/util/TimeZone;");
              mids$[mid_init_32cb72731c50a536] = env->getMethodID(cls, "init", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_parse_1cf26fcf5e3c5839] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setAllowLeadingWildcard_9d72768e8fdce2b7] = env->getMethodID(cls, "setAllowLeadingWildcard", "(Z)V");
              mids$[mid_setAutoGeneratePhraseQueries_9d72768e8fdce2b7] = env->getMethodID(cls, "setAutoGeneratePhraseQueries", "(Z)V");
              mids$[mid_setDateResolution_51afa6f891f6b9d8] = env->getMethodID(cls, "setDateResolution", "(Lorg/apache/lucene/document/DateTools$Resolution;)V");
              mids$[mid_setDateResolution_5efef36934bee10d] = env->getMethodID(cls, "setDateResolution", "(Ljava/lang/String;Lorg/apache/lucene/document/DateTools$Resolution;)V");
              mids$[mid_setDefaultOperator_8591fd0669654a9b] = env->getMethodID(cls, "setDefaultOperator", "(Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;)V");
              mids$[mid_setFuzzyMinSim_8e1d952dd65cdc3a] = env->getMethodID(cls, "setFuzzyMinSim", "(F)V");
              mids$[mid_setFuzzyPrefixLength_040c4cd0390c5aff] = env->getMethodID(cls, "setFuzzyPrefixLength", "(I)V");
              mids$[mid_setLocale_8b005052a37adc8a] = env->getMethodID(cls, "setLocale", "(Ljava/util/Locale;)V");
              mids$[mid_setMaxDeterminizedStates_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxDeterminizedStates", "(I)V");
              mids$[mid_setMultiTermRewriteMethod_4bd3a81cb6936220] = env->getMethodID(cls, "setMultiTermRewriteMethod", "(Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;)V");
              mids$[mid_setPhraseSlop_040c4cd0390c5aff] = env->getMethodID(cls, "setPhraseSlop", "(I)V");
              mids$[mid_setTimeZone_62cba443b119095c] = env->getMethodID(cls, "setTimeZone", "(Ljava/util/TimeZone;)V");
              mids$[mid_newRangeQuery_ee01989124e5cf67] = env->getMethodID(cls, "newRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_3a5baa20d223c529] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_da5a988725940811] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_addClause_6872b640a77a7c4d] = env->getMethodID(cls, "addClause", "(Ljava/util/List;IILorg/apache/lucene/search/Query;)V");
              mids$[mid_getBooleanQuery_f5d003a5f0f6b381] = env->getMethodID(cls, "getBooleanQuery", "(Ljava/util/List;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_ee01989124e5cf67] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_addMultiTermClauses_e896b45ee1b538e8] = env->getMethodID(cls, "addMultiTermClauses", "(Ljava/util/List;Lorg/apache/lucene/search/Query;)V");
              mids$[mid_newFieldQuery_be0607dbd1a7c1bc] = env->getMethodID(cls, "newFieldQuery", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_newBooleanClause_a8cf61d39c989140] = env->getMethodID(cls, "newBooleanClause", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/BooleanClause$Occur;)Lorg/apache/lucene/search/BooleanClause;");
              mids$[mid_newPrefixQuery_562b92ffa59b5a82] = env->getMethodID(cls, "newPrefixQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newRegexpQuery_562b92ffa59b5a82] = env->getMethodID(cls, "newRegexpQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newFuzzyQuery_9efc00f4c0804abe] = env->getMethodID(cls, "newFuzzyQuery", "(Lorg/apache/lucene/index/Term;FI)Lorg/apache/lucene/search/Query;");
              mids$[mid_newMatchAllDocsQuery_cbf839a480265450] = env->getMethodID(cls, "newMatchAllDocsQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_newWildcardQuery_562b92ffa59b5a82] = env->getMethodID(cls, "newWildcardQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_e08cfaa30c1cfbe9] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRegexpQuery_e08cfaa30c1cfbe9] = env->getMethodID(cls, "getRegexpQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_e08cfaa30c1cfbe9] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_391b6230ae9c102d] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              AND_OPERATOR = new ::org::apache::lucene::queryparser::classic::QueryParser$Operator(env->getStaticObjectField(cls, "AND_OPERATOR", "Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;"));
              OR_OPERATOR = new ::org::apache::lucene::queryparser::classic::QueryParser$Operator(env->getStaticObjectField(cls, "OR_OPERATOR", "Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void QueryParserBase::ReInit(const ::org::apache::lucene::queryparser::classic::CharStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_94838218118d13bf], a0.this$);
          }

          ::org::apache::lucene::search::Query QueryParserBase::TopLevelQuery(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_TopLevelQuery_1cf26fcf5e3c5839], a0.this$));
          }

          ::java::lang::String QueryParserBase::escape(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_escape_9bfa75c9f141b67f], a0.this$));
          }

          jboolean QueryParserBase::getAllowLeadingWildcard() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getAllowLeadingWildcard_8454bd5aa23fd11e]);
          }

          jboolean QueryParserBase::getAutoGeneratePhraseQueries() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getAutoGeneratePhraseQueries_8454bd5aa23fd11e]);
          }

          ::org::apache::lucene::document::DateTools$Resolution QueryParserBase::getDateResolution(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::document::DateTools$Resolution(env->callObjectMethod(this$, mids$[mid_getDateResolution_29edadd05c3fc82d], a0.this$));
          }

          ::org::apache::lucene::queryparser::classic::QueryParser$Operator QueryParserBase::getDefaultOperator() const
          {
            return ::org::apache::lucene::queryparser::classic::QueryParser$Operator(env->callObjectMethod(this$, mids$[mid_getDefaultOperator_f75dce5b73b81afc]));
          }

          ::java::lang::String QueryParserBase::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
          }

          jfloat QueryParserBase::getFuzzyMinSim() const
          {
            return env->callFloatMethod(this$, mids$[mid_getFuzzyMinSim_58aec2b64dff50c8]);
          }

          jint QueryParserBase::getFuzzyPrefixLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getFuzzyPrefixLength_9972fcc56b44e79d]);
          }

          ::java::util::Locale QueryParserBase::getLocale() const
          {
            return ::java::util::Locale(env->callObjectMethod(this$, mids$[mid_getLocale_bd9770023d5e622d]));
          }

          jint QueryParserBase::getMaxDeterminizedStates() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxDeterminizedStates_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::search::MultiTermQuery$RewriteMethod QueryParserBase::getMultiTermRewriteMethod() const
          {
            return ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->callObjectMethod(this$, mids$[mid_getMultiTermRewriteMethod_aed18a8b23332eb7]));
          }

          jint QueryParserBase::getPhraseSlop() const
          {
            return env->callIntMethod(this$, mids$[mid_getPhraseSlop_9972fcc56b44e79d]);
          }

          ::java::util::TimeZone QueryParserBase::getTimeZone() const
          {
            return ::java::util::TimeZone(env->callObjectMethod(this$, mids$[mid_getTimeZone_a00e8b2cc21b09d1]));
          }

          void QueryParserBase::init(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_init_32cb72731c50a536], a0.this$, a1.this$);
          }

          ::org::apache::lucene::search::Query QueryParserBase::parse(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_1cf26fcf5e3c5839], a0.this$));
          }

          void QueryParserBase::setAllowLeadingWildcard(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAllowLeadingWildcard_9d72768e8fdce2b7], a0);
          }

          void QueryParserBase::setAutoGeneratePhraseQueries(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAutoGeneratePhraseQueries_9d72768e8fdce2b7], a0);
          }

          void QueryParserBase::setDateResolution(const ::org::apache::lucene::document::DateTools$Resolution & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDateResolution_51afa6f891f6b9d8], a0.this$);
          }

          void QueryParserBase::setDateResolution(const ::java::lang::String & a0, const ::org::apache::lucene::document::DateTools$Resolution & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setDateResolution_5efef36934bee10d], a0.this$, a1.this$);
          }

          void QueryParserBase::setDefaultOperator(const ::org::apache::lucene::queryparser::classic::QueryParser$Operator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDefaultOperator_8591fd0669654a9b], a0.this$);
          }

          void QueryParserBase::setFuzzyMinSim(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFuzzyMinSim_8e1d952dd65cdc3a], a0);
          }

          void QueryParserBase::setFuzzyPrefixLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFuzzyPrefixLength_040c4cd0390c5aff], a0);
          }

          void QueryParserBase::setLocale(const ::java::util::Locale & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLocale_8b005052a37adc8a], a0.this$);
          }

          void QueryParserBase::setMaxDeterminizedStates(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxDeterminizedStates_040c4cd0390c5aff], a0);
          }

          void QueryParserBase::setMultiTermRewriteMethod(const ::org::apache::lucene::search::MultiTermQuery$RewriteMethod & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMultiTermRewriteMethod_4bd3a81cb6936220], a0.this$);
          }

          void QueryParserBase::setPhraseSlop(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPhraseSlop_040c4cd0390c5aff], a0);
          }

          void QueryParserBase::setTimeZone(const ::java::util::TimeZone & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTimeZone_62cba443b119095c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParserBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserBase_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserBase_ReInit(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_TopLevelQuery(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_escape(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserBase_getAllowLeadingWildcard(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getAutoGeneratePhraseQueries(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getDateResolution(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_getDefaultOperator(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getField(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getFuzzyMinSim(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getFuzzyPrefixLength(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getLocale(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getMaxDeterminizedStates(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getMultiTermRewriteMethod(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getPhraseSlop(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_getTimeZone(t_QueryParserBase *self);
          static PyObject *t_QueryParserBase_init(t_QueryParserBase *self, PyObject *args);
          static PyObject *t_QueryParserBase_parse(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setAllowLeadingWildcard(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setAutoGeneratePhraseQueries(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setDateResolution(t_QueryParserBase *self, PyObject *args);
          static PyObject *t_QueryParserBase_setDefaultOperator(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setFuzzyMinSim(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setFuzzyPrefixLength(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setLocale(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setMaxDeterminizedStates(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setMultiTermRewriteMethod(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setPhraseSlop(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_setTimeZone(t_QueryParserBase *self, PyObject *arg);
          static PyObject *t_QueryParserBase_get__allowLeadingWildcard(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__allowLeadingWildcard(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__autoGeneratePhraseQueries(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__autoGeneratePhraseQueries(t_QueryParserBase *self, PyObject *arg, void *data);
          static int t_QueryParserBase_set__dateResolution(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__defaultOperator(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__defaultOperator(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__field(t_QueryParserBase *self, void *data);
          static PyObject *t_QueryParserBase_get__fuzzyMinSim(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__fuzzyMinSim(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__fuzzyPrefixLength(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__fuzzyPrefixLength(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__locale(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__locale(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__maxDeterminizedStates(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__maxDeterminizedStates(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__multiTermRewriteMethod(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__multiTermRewriteMethod(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__phraseSlop(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__phraseSlop(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserBase_get__timeZone(t_QueryParserBase *self, void *data);
          static int t_QueryParserBase_set__timeZone(t_QueryParserBase *self, PyObject *arg, void *data);
          static PyGetSetDef t_QueryParserBase__fields_[] = {
            DECLARE_GETSET_FIELD(t_QueryParserBase, allowLeadingWildcard),
            DECLARE_GETSET_FIELD(t_QueryParserBase, autoGeneratePhraseQueries),
            DECLARE_SET_FIELD(t_QueryParserBase, dateResolution),
            DECLARE_GETSET_FIELD(t_QueryParserBase, defaultOperator),
            DECLARE_GET_FIELD(t_QueryParserBase, field),
            DECLARE_GETSET_FIELD(t_QueryParserBase, fuzzyMinSim),
            DECLARE_GETSET_FIELD(t_QueryParserBase, fuzzyPrefixLength),
            DECLARE_GETSET_FIELD(t_QueryParserBase, locale),
            DECLARE_GETSET_FIELD(t_QueryParserBase, maxDeterminizedStates),
            DECLARE_GETSET_FIELD(t_QueryParserBase, multiTermRewriteMethod),
            DECLARE_GETSET_FIELD(t_QueryParserBase, phraseSlop),
            DECLARE_GETSET_FIELD(t_QueryParserBase, timeZone),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryParserBase__methods_[] = {
            DECLARE_METHOD(t_QueryParserBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserBase, ReInit, METH_O),
            DECLARE_METHOD(t_QueryParserBase, TopLevelQuery, METH_O),
            DECLARE_METHOD(t_QueryParserBase, escape, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserBase, getAllowLeadingWildcard, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getAutoGeneratePhraseQueries, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getDateResolution, METH_O),
            DECLARE_METHOD(t_QueryParserBase, getDefaultOperator, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getField, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getFuzzyMinSim, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getFuzzyPrefixLength, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getLocale, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getMaxDeterminizedStates, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getMultiTermRewriteMethod, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getPhraseSlop, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, getTimeZone, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserBase, init, METH_VARARGS),
            DECLARE_METHOD(t_QueryParserBase, parse, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setAllowLeadingWildcard, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setAutoGeneratePhraseQueries, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setDateResolution, METH_VARARGS),
            DECLARE_METHOD(t_QueryParserBase, setDefaultOperator, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setFuzzyMinSim, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setFuzzyPrefixLength, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setLocale, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setMaxDeterminizedStates, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setMultiTermRewriteMethod, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setPhraseSlop, METH_O),
            DECLARE_METHOD(t_QueryParserBase, setTimeZone, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(QueryParserBase)[] = {
            { Py_tp_methods, t_QueryParserBase__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_QueryParserBase__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(QueryParserBase)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::QueryBuilder),
            NULL
          };

          DEFINE_TYPE(QueryParserBase, t_QueryParserBase, QueryParserBase);

          void t_QueryParserBase::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParserBase), &PY_TYPE_DEF(QueryParserBase), module, "QueryParserBase", 0);
          }

          void t_QueryParserBase::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserBase), "class_", make_descriptor(QueryParserBase::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserBase), "wrapfn_", make_descriptor(t_QueryParserBase::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserBase), "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryParserBase::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserBase), "AND_OPERATOR", make_descriptor(::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::wrap_Object(*QueryParserBase::AND_OPERATOR)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserBase), "OR_OPERATOR", make_descriptor(::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::wrap_Object(*QueryParserBase::OR_OPERATOR)));
          }

          static PyObject *t_QueryParserBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParserBase::initializeClass, 1)))
              return NULL;
            return t_QueryParserBase::wrap_Object(QueryParserBase(((t_QueryParserBase *) arg)->object.this$));
          }
          static PyObject *t_QueryParserBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParserBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_QueryParserBase_ReInit(t_QueryParserBase *self, PyObject *arg)
          {
            ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.ReInit(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "ReInit", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_TopLevelQuery(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.TopLevelQuery(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "TopLevelQuery", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_escape(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::QueryParserBase::escape(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "escape", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_getAllowLeadingWildcard(t_QueryParserBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getAllowLeadingWildcard());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryParserBase_getAutoGeneratePhraseQueries(t_QueryParserBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getAutoGeneratePhraseQueries());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryParserBase_getDateResolution(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::document::DateTools$Resolution result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDateResolution(a0));
              return ::org::apache::lucene::document::t_DateTools$Resolution::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDateResolution", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_getDefaultOperator(t_QueryParserBase *self)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser$Operator result((jobject) NULL);
            OBJ_CALL(result = self->object.getDefaultOperator());
            return ::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::wrap_Object(result);
          }

          static PyObject *t_QueryParserBase_getField(t_QueryParserBase *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_QueryParserBase_getFuzzyMinSim(t_QueryParserBase *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getFuzzyMinSim());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryParserBase_getFuzzyPrefixLength(t_QueryParserBase *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFuzzyPrefixLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_QueryParserBase_getLocale(t_QueryParserBase *self)
          {
            ::java::util::Locale result((jobject) NULL);
            OBJ_CALL(result = self->object.getLocale());
            return ::java::util::t_Locale::wrap_Object(result);
          }

          static PyObject *t_QueryParserBase_getMaxDeterminizedStates(t_QueryParserBase *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxDeterminizedStates());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_QueryParserBase_getMultiTermRewriteMethod(t_QueryParserBase *self)
          {
            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermRewriteMethod());
            return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(result);
          }

          static PyObject *t_QueryParserBase_getPhraseSlop(t_QueryParserBase *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPhraseSlop());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_QueryParserBase_getTimeZone(t_QueryParserBase *self)
          {
            ::java::util::TimeZone result((jobject) NULL);
            OBJ_CALL(result = self->object.getTimeZone());
            return ::java::util::t_TimeZone::wrap_Object(result);
          }

          static PyObject *t_QueryParserBase_init(t_QueryParserBase *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.init(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "init", args);
            return NULL;
          }

          static PyObject *t_QueryParserBase_parse(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setAllowLeadingWildcard(t_QueryParserBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setAllowLeadingWildcard(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAllowLeadingWildcard", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setAutoGeneratePhraseQueries(t_QueryParserBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setAutoGeneratePhraseQueries(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAutoGeneratePhraseQueries", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setDateResolution(t_QueryParserBase *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::document::DateTools$Resolution a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArgs(args, "K", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
                {
                  OBJ_CALL(self->object.setDateResolution(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
                PyTypeObject **p1;

                if (!parseArgs(args, "sK", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
                {
                  OBJ_CALL(self->object.setDateResolution(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "setDateResolution", args);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setDefaultOperator(t_QueryParserBase *self, PyObject *arg)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser$Operator a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::classic::QueryParser$Operator::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::parameters_))
            {
              OBJ_CALL(self->object.setDefaultOperator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDefaultOperator", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setFuzzyMinSim(t_QueryParserBase *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setFuzzyMinSim(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFuzzyMinSim", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setFuzzyPrefixLength(t_QueryParserBase *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setFuzzyPrefixLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFuzzyPrefixLength", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setLocale(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::util::Locale a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setLocale(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLocale", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setMaxDeterminizedStates(t_QueryParserBase *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxDeterminizedStates(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxDeterminizedStates", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setMultiTermRewriteMethod(t_QueryParserBase *self, PyObject *arg)
          {
            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setMultiTermRewriteMethod(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMultiTermRewriteMethod", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setPhraseSlop(t_QueryParserBase *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPhraseSlop(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPhraseSlop", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_setTimeZone(t_QueryParserBase *self, PyObject *arg)
          {
            ::java::util::TimeZone a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setTimeZone(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTimeZone", arg);
            return NULL;
          }

          static PyObject *t_QueryParserBase_get__allowLeadingWildcard(t_QueryParserBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getAllowLeadingWildcard());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryParserBase_set__allowLeadingWildcard(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAllowLeadingWildcard(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "allowLeadingWildcard", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__autoGeneratePhraseQueries(t_QueryParserBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getAutoGeneratePhraseQueries());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryParserBase_set__autoGeneratePhraseQueries(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAutoGeneratePhraseQueries(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "autoGeneratePhraseQueries", arg);
            return -1;
          }

          static int t_QueryParserBase_set__dateResolution(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::document::DateTools$Resolution value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &value))
              {
                INT_CALL(self->object.setDateResolution(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "dateResolution", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__defaultOperator(t_QueryParserBase *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser$Operator value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultOperator());
            return ::org::apache::lucene::queryparser::classic::t_QueryParser$Operator::wrap_Object(value);
          }
          static int t_QueryParserBase_set__defaultOperator(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::queryparser::classic::QueryParser$Operator value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::QueryParser$Operator::initializeClass, &value))
              {
                INT_CALL(self->object.setDefaultOperator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "defaultOperator", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__field(t_QueryParserBase *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_QueryParserBase_get__fuzzyMinSim(t_QueryParserBase *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getFuzzyMinSim());
            return PyFloat_FromDouble((double) value);
          }
          static int t_QueryParserBase_set__fuzzyMinSim(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setFuzzyMinSim(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fuzzyMinSim", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__fuzzyPrefixLength(t_QueryParserBase *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFuzzyPrefixLength());
            return PyLong_FromLong((long) value);
          }
          static int t_QueryParserBase_set__fuzzyPrefixLength(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setFuzzyPrefixLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fuzzyPrefixLength", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__locale(t_QueryParserBase *self, void *data)
          {
            ::java::util::Locale value((jobject) NULL);
            OBJ_CALL(value = self->object.getLocale());
            return ::java::util::t_Locale::wrap_Object(value);
          }
          static int t_QueryParserBase_set__locale(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Locale value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &value))
              {
                INT_CALL(self->object.setLocale(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "locale", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__maxDeterminizedStates(t_QueryParserBase *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxDeterminizedStates());
            return PyLong_FromLong((long) value);
          }
          static int t_QueryParserBase_set__maxDeterminizedStates(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxDeterminizedStates(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxDeterminizedStates", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__multiTermRewriteMethod(t_QueryParserBase *self, void *data)
          {
            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermRewriteMethod());
            return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(value);
          }
          static int t_QueryParserBase_set__multiTermRewriteMethod(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &value))
              {
                INT_CALL(self->object.setMultiTermRewriteMethod(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "multiTermRewriteMethod", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__phraseSlop(t_QueryParserBase *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPhraseSlop());
            return PyLong_FromLong((long) value);
          }
          static int t_QueryParserBase_set__phraseSlop(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPhraseSlop(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "phraseSlop", arg);
            return -1;
          }

          static PyObject *t_QueryParserBase_get__timeZone(t_QueryParserBase *self, void *data)
          {
            ::java::util::TimeZone value((jobject) NULL);
            OBJ_CALL(value = self->object.getTimeZone());
            return ::java::util::t_TimeZone::wrap_Object(value);
          }
          static int t_QueryParserBase_set__timeZone(t_QueryParserBase *self, PyObject *arg, void *data)
          {
            {
              ::java::util::TimeZone value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &value))
              {
                INT_CALL(self->object.setTimeZone(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "timeZone", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/regex/Pattern.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternTokenizer::class$ = NULL;
          jmethodID *PatternTokenizer::mids$ = NULL;
          bool PatternTokenizer::live$ = false;

          jclass PatternTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8fa1cc631c2c023] = env->getMethodID(cls, "<init>", "(Ljava/util/regex/Pattern;I)V");
              mids$[mid_init$_a7db70ba99aa25ad] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/util/regex/Pattern;I)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternTokenizer::PatternTokenizer(const ::java::util::regex::Pattern & a0, jint a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_d8fa1cc631c2c023, a0.this$, a1)) {}

          PatternTokenizer::PatternTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::util::regex::Pattern & a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_a7db70ba99aa25ad, a0.this$, a1.this$, a2)) {}

          void PatternTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void PatternTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean PatternTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void PatternTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternTokenizer_init_(t_PatternTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternTokenizer_close(t_PatternTokenizer *self, PyObject *args);
          static PyObject *t_PatternTokenizer_end(t_PatternTokenizer *self, PyObject *args);
          static PyObject *t_PatternTokenizer_incrementToken(t_PatternTokenizer *self, PyObject *args);
          static PyObject *t_PatternTokenizer_reset(t_PatternTokenizer *self, PyObject *args);

          static PyMethodDef t_PatternTokenizer__methods_[] = {
            DECLARE_METHOD(t_PatternTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_PatternTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_PatternTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PatternTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PatternTokenizer)[] = {
            { Py_tp_methods, t_PatternTokenizer__methods_ },
            { Py_tp_init, (void *) t_PatternTokenizer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PatternTokenizer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Tokenizer),
            NULL
          };

          DEFINE_TYPE(PatternTokenizer, t_PatternTokenizer, PatternTokenizer);

          void t_PatternTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternTokenizer), &PY_TYPE_DEF(PatternTokenizer), module, "PatternTokenizer", 0);
          }

          void t_PatternTokenizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternTokenizer), "class_", make_descriptor(PatternTokenizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternTokenizer), "wrapfn_", make_descriptor(t_PatternTokenizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternTokenizer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternTokenizer::initializeClass, 1)))
              return NULL;
            return t_PatternTokenizer::wrap_Object(PatternTokenizer(((t_PatternTokenizer *) arg)->object.this$));
          }
          static PyObject *t_PatternTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternTokenizer_init_(t_PatternTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::util::regex::Pattern a0((jobject) NULL);
                jint a1;
                PatternTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::java::util::regex::Pattern::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = PatternTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::util::regex::Pattern a1((jobject) NULL);
                jint a2;
                PatternTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PatternTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternTokenizer_close(t_PatternTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PatternTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_PatternTokenizer_end(t_PatternTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PatternTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_PatternTokenizer_incrementToken(t_PatternTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(PatternTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PatternTokenizer_reset(t_PatternTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PatternTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SimpleHTMLEncoder.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SimpleHTMLEncoder::class$ = NULL;
          jmethodID *SimpleHTMLEncoder::mids$ = NULL;
          bool SimpleHTMLEncoder::live$ = false;

          jclass SimpleHTMLEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SimpleHTMLEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encodeText_9bfa75c9f141b67f] = env->getMethodID(cls, "encodeText", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_htmlEncode_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "htmlEncode", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleHTMLEncoder::SimpleHTMLEncoder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::java::lang::String SimpleHTMLEncoder::encodeText(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_encodeText_9bfa75c9f141b67f], a0.this$));
          }

          ::java::lang::String SimpleHTMLEncoder::htmlEncode(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_htmlEncode_9bfa75c9f141b67f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SimpleHTMLEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleHTMLEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleHTMLEncoder_init_(t_SimpleHTMLEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleHTMLEncoder_encodeText(t_SimpleHTMLEncoder *self, PyObject *arg);
          static PyObject *t_SimpleHTMLEncoder_htmlEncode(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_SimpleHTMLEncoder__methods_[] = {
            DECLARE_METHOD(t_SimpleHTMLEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleHTMLEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleHTMLEncoder, encodeText, METH_O),
            DECLARE_METHOD(t_SimpleHTMLEncoder, htmlEncode, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleHTMLEncoder)[] = {
            { Py_tp_methods, t_SimpleHTMLEncoder__methods_ },
            { Py_tp_init, (void *) t_SimpleHTMLEncoder_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleHTMLEncoder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SimpleHTMLEncoder, t_SimpleHTMLEncoder, SimpleHTMLEncoder);

          void t_SimpleHTMLEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleHTMLEncoder), &PY_TYPE_DEF(SimpleHTMLEncoder), module, "SimpleHTMLEncoder", 0);
          }

          void t_SimpleHTMLEncoder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleHTMLEncoder), "class_", make_descriptor(SimpleHTMLEncoder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleHTMLEncoder), "wrapfn_", make_descriptor(t_SimpleHTMLEncoder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleHTMLEncoder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleHTMLEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleHTMLEncoder::initializeClass, 1)))
              return NULL;
            return t_SimpleHTMLEncoder::wrap_Object(SimpleHTMLEncoder(((t_SimpleHTMLEncoder *) arg)->object.this$));
          }
          static PyObject *t_SimpleHTMLEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleHTMLEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleHTMLEncoder_init_(t_SimpleHTMLEncoder *self, PyObject *args, PyObject *kwds)
          {
            SimpleHTMLEncoder object((jobject) NULL);

            INT_CALL(object = SimpleHTMLEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_SimpleHTMLEncoder_encodeText(t_SimpleHTMLEncoder *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.encodeText(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "encodeText", arg);
            return NULL;
          }

          static PyObject *t_SimpleHTMLEncoder_htmlEncode(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::highlight::SimpleHTMLEncoder::htmlEncode(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "htmlEncode", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/PointRangeQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *PointRangeQueryBuilder::class$ = NULL;
            jmethodID *PointRangeQueryBuilder::mids$ = NULL;
            bool PointRangeQueryBuilder::live$ = false;

            jclass PointRangeQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/PointRangeQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            PointRangeQueryBuilder::PointRangeQueryBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_PointRangeQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PointRangeQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_PointRangeQueryBuilder_init_(t_PointRangeQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_PointRangeQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_PointRangeQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PointRangeQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(PointRangeQueryBuilder)[] = {
              { Py_tp_methods, t_PointRangeQueryBuilder__methods_ },
              { Py_tp_init, (void *) t_PointRangeQueryBuilder_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(PointRangeQueryBuilder)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(PointRangeQueryBuilder, t_PointRangeQueryBuilder, PointRangeQueryBuilder);

            void t_PointRangeQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(PointRangeQueryBuilder), &PY_TYPE_DEF(PointRangeQueryBuilder), module, "PointRangeQueryBuilder", 0);
            }

            void t_PointRangeQueryBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(PointRangeQueryBuilder), "class_", make_descriptor(PointRangeQueryBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(PointRangeQueryBuilder), "wrapfn_", make_descriptor(t_PointRangeQueryBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(PointRangeQueryBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PointRangeQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PointRangeQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_PointRangeQueryBuilder::wrap_Object(PointRangeQueryBuilder(((t_PointRangeQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_PointRangeQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PointRangeQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_PointRangeQueryBuilder_init_(t_PointRangeQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              PointRangeQueryBuilder object((jobject) NULL);

              INT_CALL(object = PointRangeQueryBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/AndQuery.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *AndQuery::class$ = NULL;
            jmethodID *AndQuery::mids$ = NULL;
            bool AndQuery::live$ = false;

            jclass AndQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/AndQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f3e5aa525cb56d41] = env->getMethodID(cls, "<init>", "(Ljava/util/List;ZLjava/lang/String;)V");
                mids$[mid_makeLuceneQueryFieldNoBoost_464e180a5423633e] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            AndQuery::AndQuery(const ::java::util::List & a0, jboolean a1, const ::java::lang::String & a2) : ::org::apache::lucene::queryparser::surround::query::ComposedQuery(env->newObject(initializeClass, &mids$, mid_init$_f3e5aa525cb56d41, a0.this$, a1, a2.this$)) {}

            ::org::apache::lucene::search::Query AndQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_464e180a5423633e], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_AndQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_AndQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_AndQuery_init_(t_AndQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_AndQuery_makeLuceneQueryFieldNoBoost(t_AndQuery *self, PyObject *args);

            static PyMethodDef t_AndQuery__methods_[] = {
              DECLARE_METHOD(t_AndQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AndQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AndQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(AndQuery)[] = {
              { Py_tp_methods, t_AndQuery__methods_ },
              { Py_tp_init, (void *) t_AndQuery_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(AndQuery)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::surround::query::ComposedQuery),
              NULL
            };

            DEFINE_TYPE(AndQuery, t_AndQuery, AndQuery);

            void t_AndQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(AndQuery), &PY_TYPE_DEF(AndQuery), module, "AndQuery", 0);
            }

            void t_AndQuery::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(AndQuery), "class_", make_descriptor(AndQuery::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(AndQuery), "wrapfn_", make_descriptor(t_AndQuery::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(AndQuery), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_AndQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, AndQuery::initializeClass, 1)))
                return NULL;
              return t_AndQuery::wrap_Object(AndQuery(((t_AndQuery *) arg)->object.this$));
            }
            static PyObject *t_AndQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, AndQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_AndQuery_init_(t_AndQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              ::java::lang::String a2((jobject) NULL);
              AndQuery object((jobject) NULL);

              if (!parseArgs(args, "KZs", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
              {
                INT_CALL(object = AndQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_AndQuery_makeLuceneQueryFieldNoBoost(t_AndQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(PY_TYPE(AndQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocValuesStats$SortedDoubleDocValuesStats.h"
#include "java/lang/String.h"
#include "java/lang/Double.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocValuesStats$SortedDoubleDocValuesStats::class$ = NULL;
        jmethodID *DocValuesStats$SortedDoubleDocValuesStats::mids$ = NULL;
        bool DocValuesStats$SortedDoubleDocValuesStats::live$ = false;

        jclass DocValuesStats$SortedDoubleDocValuesStats::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocValuesStats$SortedDoubleDocValuesStats");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_sum_a3794238a110f68c] = env->getMethodID(cls, "sum", "()Ljava/lang/Double;");
            mids$[mid_doAccumulate_040c4cd0390c5aff] = env->getMethodID(cls, "doAccumulate", "(I)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocValuesStats$SortedDoubleDocValuesStats::DocValuesStats$SortedDoubleDocValuesStats(const ::java::lang::String & a0) : ::org::apache::lucene::search::DocValuesStats$SortedNumericDocValuesStats(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

        ::java::lang::Double DocValuesStats$SortedDoubleDocValuesStats::sum() const
        {
          return ::java::lang::Double(env->callObjectMethod(this$, mids$[mid_sum_a3794238a110f68c]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocValuesStats$SortedDoubleDocValuesStats_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesStats$SortedDoubleDocValuesStats_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesStats$SortedDoubleDocValuesStats_of_(t_DocValuesStats$SortedDoubleDocValuesStats *self, PyObject *args);
        static int t_DocValuesStats$SortedDoubleDocValuesStats_init_(t_DocValuesStats$SortedDoubleDocValuesStats *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocValuesStats$SortedDoubleDocValuesStats_sum(t_DocValuesStats$SortedDoubleDocValuesStats *self, PyObject *args);
        static PyObject *t_DocValuesStats$SortedDoubleDocValuesStats_get__parameters_(t_DocValuesStats$SortedDoubleDocValuesStats *self, void *data);
        static PyGetSetDef t_DocValuesStats$SortedDoubleDocValuesStats__fields_[] = {
          DECLARE_GET_FIELD(t_DocValuesStats$SortedDoubleDocValuesStats, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocValuesStats$SortedDoubleDocValuesStats__methods_[] = {
          DECLARE_METHOD(t_DocValuesStats$SortedDoubleDocValuesStats, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesStats$SortedDoubleDocValuesStats, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesStats$SortedDoubleDocValuesStats, of_, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesStats$SortedDoubleDocValuesStats, sum, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocValuesStats$SortedDoubleDocValuesStats)[] = {
          { Py_tp_methods, t_DocValuesStats$SortedDoubleDocValuesStats__methods_ },
          { Py_tp_init, (void *) t_DocValuesStats$SortedDoubleDocValuesStats_init_ },
          { Py_tp_getset, t_DocValuesStats$SortedDoubleDocValuesStats__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocValuesStats$SortedDoubleDocValuesStats)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::DocValuesStats$SortedNumericDocValuesStats),
          NULL
        };

        DEFINE_TYPE(DocValuesStats$SortedDoubleDocValuesStats, t_DocValuesStats$SortedDoubleDocValuesStats, DocValuesStats$SortedDoubleDocValuesStats);
        PyObject *t_DocValuesStats$SortedDoubleDocValuesStats::wrap_Object(const DocValuesStats$SortedDoubleDocValuesStats& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocValuesStats$SortedDoubleDocValuesStats::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocValuesStats$SortedDoubleDocValuesStats *self = (t_DocValuesStats$SortedDoubleDocValuesStats *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DocValuesStats$SortedDoubleDocValuesStats::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocValuesStats$SortedDoubleDocValuesStats::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocValuesStats$SortedDoubleDocValuesStats *self = (t_DocValuesStats$SortedDoubleDocValuesStats *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DocValuesStats$SortedDoubleDocValuesStats::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesStats$SortedDoubleDocValuesStats), &PY_TYPE_DEF(DocValuesStats$SortedDoubleDocValuesStats), module, "DocValuesStats$SortedDoubleDocValuesStats", 0);
        }

        void t_DocValuesStats$SortedDoubleDocValuesStats::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$SortedDoubleDocValuesStats), "class_", make_descriptor(DocValuesStats$SortedDoubleDocValuesStats::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$SortedDoubleDocValuesStats), "wrapfn_", make_descriptor(t_DocValuesStats$SortedDoubleDocValuesStats::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$SortedDoubleDocValuesStats), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesStats$SortedDoubleDocValuesStats_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesStats$SortedDoubleDocValuesStats::initializeClass, 1)))
            return NULL;
          return t_DocValuesStats$SortedDoubleDocValuesStats::wrap_Object(DocValuesStats$SortedDoubleDocValuesStats(((t_DocValuesStats$SortedDoubleDocValuesStats *) arg)->object.this$));
        }
        static PyObject *t_DocValuesStats$SortedDoubleDocValuesStats_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesStats$SortedDoubleDocValuesStats::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesStats$SortedDoubleDocValuesStats_of_(t_DocValuesStats$SortedDoubleDocValuesStats *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_DocValuesStats$SortedDoubleDocValuesStats_init_(t_DocValuesStats$SortedDoubleDocValuesStats *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          DocValuesStats$SortedDoubleDocValuesStats object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = DocValuesStats$SortedDoubleDocValuesStats(a0));
            self->object = object;
            self->parameters[0] = ::java::lang::PY_TYPE(Double);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocValuesStats$SortedDoubleDocValuesStats_sum(t_DocValuesStats$SortedDoubleDocValuesStats *self, PyObject *args)
        {
          ::java::lang::Double result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.sum());
            return ::java::lang::t_Double::wrap_Object(result);
          }

          return callSuper(PY_TYPE(DocValuesStats$SortedDoubleDocValuesStats), (PyObject *) self, "sum", args, 2);
        }
        static PyObject *t_DocValuesStats$SortedDoubleDocValuesStats_get__parameters_(t_DocValuesStats$SortedDoubleDocValuesStats *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramFilterFactory::class$ = NULL;
          jmethodID *EdgeNGramFilterFactory::mids$ = NULL;
          bool EdgeNGramFilterFactory::live$ = false;
          ::java::lang::String *EdgeNGramFilterFactory::NAME = NULL;

          jclass EdgeNGramFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4366615ad7077dae] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EdgeNGramFilterFactory::EdgeNGramFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter EdgeNGramFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_4366615ad7077dae], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EdgeNGramFilterFactory_init_(t_EdgeNGramFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EdgeNGramFilterFactory_create(t_EdgeNGramFilterFactory *self, PyObject *args);

          static PyMethodDef t_EdgeNGramFilterFactory__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(EdgeNGramFilterFactory)[] = {
            { Py_tp_methods, t_EdgeNGramFilterFactory__methods_ },
            { Py_tp_init, (void *) t_EdgeNGramFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(EdgeNGramFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(EdgeNGramFilterFactory, t_EdgeNGramFilterFactory, EdgeNGramFilterFactory);

          void t_EdgeNGramFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramFilterFactory), &PY_TYPE_DEF(EdgeNGramFilterFactory), module, "EdgeNGramFilterFactory", 0);
          }

          void t_EdgeNGramFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(EdgeNGramFilterFactory), "class_", make_descriptor(EdgeNGramFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EdgeNGramFilterFactory), "wrapfn_", make_descriptor(t_EdgeNGramFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EdgeNGramFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(EdgeNGramFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(EdgeNGramFilterFactory), "NAME", make_descriptor(j2p(*EdgeNGramFilterFactory::NAME)));
          }

          static PyObject *t_EdgeNGramFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramFilterFactory::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramFilterFactory::wrap_Object(EdgeNGramFilterFactory(((t_EdgeNGramFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EdgeNGramFilterFactory_init_(t_EdgeNGramFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            EdgeNGramFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = EdgeNGramFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EdgeNGramFilterFactory_create(t_EdgeNGramFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(EdgeNGramFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/RangeMapFloatFunction.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Float.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *RangeMapFloatFunction::class$ = NULL;
            jmethodID *RangeMapFloatFunction::mids$ = NULL;
            bool RangeMapFloatFunction::live$ = false;

            jclass RangeMapFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/RangeMapFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_25a3c2185bdd2047] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FFFLjava/lang/Float;)V");
                mids$[mid_init$_7c552d49315c0fa3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FFLorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_69d322032c5ae159] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            RangeMapFloatFunction::RangeMapFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2, jfloat a3, const ::java::lang::Float & a4) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_25a3c2185bdd2047, a0.this$, a1, a2, a3, a4.this$)) {}

            RangeMapFloatFunction::RangeMapFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2, const ::org::apache::lucene::queries::function::ValueSource & a3, const ::org::apache::lucene::queries::function::ValueSource & a4) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_7c552d49315c0fa3, a0.this$, a1, a2, a3.this$, a4.this$)) {}

            void RangeMapFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_69d322032c5ae159], a0.this$, a1.this$);
            }

            ::java::lang::String RangeMapFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean RangeMapFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues RangeMapFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint RangeMapFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_RangeMapFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RangeMapFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_RangeMapFloatFunction_init_(t_RangeMapFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_RangeMapFloatFunction_createWeight(t_RangeMapFloatFunction *self, PyObject *args);
            static PyObject *t_RangeMapFloatFunction_description(t_RangeMapFloatFunction *self, PyObject *args);
            static PyObject *t_RangeMapFloatFunction_equals(t_RangeMapFloatFunction *self, PyObject *args);
            static PyObject *t_RangeMapFloatFunction_getValues(t_RangeMapFloatFunction *self, PyObject *args);
            static PyObject *t_RangeMapFloatFunction_hashCode(t_RangeMapFloatFunction *self, PyObject *args);

            static PyMethodDef t_RangeMapFloatFunction__methods_[] = {
              DECLARE_METHOD(t_RangeMapFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RangeMapFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RangeMapFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_RangeMapFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_RangeMapFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_RangeMapFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_RangeMapFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(RangeMapFloatFunction)[] = {
              { Py_tp_methods, t_RangeMapFloatFunction__methods_ },
              { Py_tp_init, (void *) t_RangeMapFloatFunction_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(RangeMapFloatFunction)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::ValueSource),
              NULL
            };

            DEFINE_TYPE(RangeMapFloatFunction, t_RangeMapFloatFunction, RangeMapFloatFunction);

            void t_RangeMapFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(RangeMapFloatFunction), &PY_TYPE_DEF(RangeMapFloatFunction), module, "RangeMapFloatFunction", 0);
            }

            void t_RangeMapFloatFunction::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(RangeMapFloatFunction), "class_", make_descriptor(RangeMapFloatFunction::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(RangeMapFloatFunction), "wrapfn_", make_descriptor(t_RangeMapFloatFunction::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(RangeMapFloatFunction), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RangeMapFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RangeMapFloatFunction::initializeClass, 1)))
                return NULL;
              return t_RangeMapFloatFunction::wrap_Object(RangeMapFloatFunction(((t_RangeMapFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_RangeMapFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RangeMapFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_RangeMapFloatFunction_init_(t_RangeMapFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 5:
                {
                  ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
                  jfloat a1;
                  jfloat a2;
                  jfloat a3;
                  ::java::lang::Float a4((jobject) NULL);
                  RangeMapFloatFunction object((jobject) NULL);

                  if (!parseArgs(args, "kFFFO", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4))
                  {
                    INT_CALL(object = RangeMapFloatFunction(a0, a1, a2, a3, a4));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
                  jfloat a1;
                  jfloat a2;
                  ::org::apache::lucene::queries::function::ValueSource a3((jobject) NULL);
                  ::org::apache::lucene::queries::function::ValueSource a4((jobject) NULL);
                  RangeMapFloatFunction object((jobject) NULL);

                  if (!parseArgs(args, "kFFkk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3, &a4))
                  {
                    INT_CALL(object = RangeMapFloatFunction(a0, a1, a2, a3, a4));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_RangeMapFloatFunction_createWeight(t_RangeMapFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_RangeMapFloatFunction_description(t_RangeMapFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_RangeMapFloatFunction_equals(t_RangeMapFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_RangeMapFloatFunction_getValues(t_RangeMapFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_RangeMapFloatFunction_hashCode(t_RangeMapFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/dict/TokenInfoDictionary.h"
#include "org/apache/lucene/analysis/ja/dict/TokenInfoFST.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ja/dict/TokenInfoDictionary.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/ja/dict/BinaryDictionary$ResourceScheme.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace dict {

            ::java::lang::Class *TokenInfoDictionary::class$ = NULL;
            jmethodID *TokenInfoDictionary::mids$ = NULL;
            bool TokenInfoDictionary::live$ = false;
            ::java::lang::String *TokenInfoDictionary::FST_FILENAME_SUFFIX = NULL;

            jclass TokenInfoDictionary::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/dict/TokenInfoDictionary");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1548dd30612cf831] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/ja/dict/BinaryDictionary$ResourceScheme;Ljava/lang/String;)V");
                mids$[mid_getFST_37657c457a0c3bc0] = env->getMethodID(cls, "getFST", "()Lorg/apache/lucene/analysis/ja/dict/TokenInfoFST;");
                mids$[mid_getInstance_f38de2d0f0120df3] = env->getStaticMethodID(cls, "getInstance", "()Lorg/apache/lucene/analysis/ja/dict/TokenInfoDictionary;");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                FST_FILENAME_SUFFIX = new ::java::lang::String(env->getStaticObjectField(cls, "FST_FILENAME_SUFFIX", "Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TokenInfoDictionary::TokenInfoDictionary(const ::org::apache::lucene::analysis::ja::dict::BinaryDictionary$ResourceScheme & a0, const ::java::lang::String & a1) : ::org::apache::lucene::analysis::ja::dict::BinaryDictionary(env->newObject(initializeClass, &mids$, mid_init$_1548dd30612cf831, a0.this$, a1.this$)) {}

            ::org::apache::lucene::analysis::ja::dict::TokenInfoFST TokenInfoDictionary::getFST() const
            {
              return ::org::apache::lucene::analysis::ja::dict::TokenInfoFST(env->callObjectMethod(this$, mids$[mid_getFST_37657c457a0c3bc0]));
            }

            TokenInfoDictionary TokenInfoDictionary::getInstance()
            {
              jclass cls = env->getClass(initializeClass);
              return TokenInfoDictionary(env->callStaticObjectMethod(cls, mids$[mid_getInstance_f38de2d0f0120df3]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace dict {
            static PyObject *t_TokenInfoDictionary_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TokenInfoDictionary_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TokenInfoDictionary_init_(t_TokenInfoDictionary *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TokenInfoDictionary_getFST(t_TokenInfoDictionary *self);
            static PyObject *t_TokenInfoDictionary_getInstance(PyTypeObject *type);
            static PyObject *t_TokenInfoDictionary_get__fST(t_TokenInfoDictionary *self, void *data);
            static PyObject *t_TokenInfoDictionary_get__instance(t_TokenInfoDictionary *self, void *data);
            static PyGetSetDef t_TokenInfoDictionary__fields_[] = {
              DECLARE_GET_FIELD(t_TokenInfoDictionary, fST),
              DECLARE_GET_FIELD(t_TokenInfoDictionary, instance),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TokenInfoDictionary__methods_[] = {
              DECLARE_METHOD(t_TokenInfoDictionary, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TokenInfoDictionary, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TokenInfoDictionary, getFST, METH_NOARGS),
              DECLARE_METHOD(t_TokenInfoDictionary, getInstance, METH_NOARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(TokenInfoDictionary)[] = {
              { Py_tp_methods, t_TokenInfoDictionary__methods_ },
              { Py_tp_init, (void *) t_TokenInfoDictionary_init_ },
              { Py_tp_getset, t_TokenInfoDictionary__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(TokenInfoDictionary)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::analysis::ja::dict::BinaryDictionary),
              NULL
            };

            DEFINE_TYPE(TokenInfoDictionary, t_TokenInfoDictionary, TokenInfoDictionary);

            void t_TokenInfoDictionary::install(PyObject *module)
            {
              installType(&PY_TYPE(TokenInfoDictionary), &PY_TYPE_DEF(TokenInfoDictionary), module, "TokenInfoDictionary", 0);
            }

            void t_TokenInfoDictionary::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(TokenInfoDictionary), "class_", make_descriptor(TokenInfoDictionary::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TokenInfoDictionary), "wrapfn_", make_descriptor(t_TokenInfoDictionary::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TokenInfoDictionary), "boxfn_", make_descriptor(boxObject));
              env->getClass(TokenInfoDictionary::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(TokenInfoDictionary), "FST_FILENAME_SUFFIX", make_descriptor(j2p(*TokenInfoDictionary::FST_FILENAME_SUFFIX)));
            }

            static PyObject *t_TokenInfoDictionary_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TokenInfoDictionary::initializeClass, 1)))
                return NULL;
              return t_TokenInfoDictionary::wrap_Object(TokenInfoDictionary(((t_TokenInfoDictionary *) arg)->object.this$));
            }
            static PyObject *t_TokenInfoDictionary_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TokenInfoDictionary::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TokenInfoDictionary_init_(t_TokenInfoDictionary *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::ja::dict::BinaryDictionary$ResourceScheme a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String a1((jobject) NULL);
              TokenInfoDictionary object((jobject) NULL);

              if (!parseArgs(args, "Ks", ::org::apache::lucene::analysis::ja::dict::BinaryDictionary$ResourceScheme::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::ja::dict::t_BinaryDictionary$ResourceScheme::parameters_, &a1))
              {
                INT_CALL(object = TokenInfoDictionary(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TokenInfoDictionary_getFST(t_TokenInfoDictionary *self)
            {
              ::org::apache::lucene::analysis::ja::dict::TokenInfoFST result((jobject) NULL);
              OBJ_CALL(result = self->object.getFST());
              return ::org::apache::lucene::analysis::ja::dict::t_TokenInfoFST::wrap_Object(result);
            }

            static PyObject *t_TokenInfoDictionary_getInstance(PyTypeObject *type)
            {
              TokenInfoDictionary result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::analysis::ja::dict::TokenInfoDictionary::getInstance());
              return t_TokenInfoDictionary::wrap_Object(result);
            }

            static PyObject *t_TokenInfoDictionary_get__fST(t_TokenInfoDictionary *self, void *data)
            {
              ::org::apache::lucene::analysis::ja::dict::TokenInfoFST value((jobject) NULL);
              OBJ_CALL(value = self->object.getFST());
              return ::org::apache::lucene::analysis::ja::dict::t_TokenInfoFST::wrap_Object(value);
            }

            static PyObject *t_TokenInfoDictionary_get__instance(t_TokenInfoDictionary *self, void *data)
            {
              TokenInfoDictionary value((jobject) NULL);
              OBJ_CALL(value = self->object.getInstance());
              return t_TokenInfoDictionary::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopDocsCollector.h"
#include "org/apache/lucene/search/Collector.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopDocsCollector::class$ = NULL;
        jmethodID *TopDocsCollector::mids$ = NULL;
        bool TopDocsCollector::live$ = false;

        jclass TopDocsCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopDocsCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getTotalHits_9972fcc56b44e79d] = env->getMethodID(cls, "getTotalHits", "()I");
            mids$[mid_topDocs_45154c559b39de4e] = env->getMethodID(cls, "topDocs", "()Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_topDocs_a28828dc6b19e268] = env->getMethodID(cls, "topDocs", "(I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_topDocs_147fb0db3e29666e] = env->getMethodID(cls, "topDocs", "(II)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_populateResults_22b73975846c3758] = env->getMethodID(cls, "populateResults", "([Lorg/apache/lucene/search/ScoreDoc;I)V");
            mids$[mid_newTopDocs_89238c61a7db05c2] = env->getMethodID(cls, "newTopDocs", "([Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_topDocsSize_9972fcc56b44e79d] = env->getMethodID(cls, "topDocsSize", "()I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint TopDocsCollector::getTotalHits() const
        {
          return env->callIntMethod(this$, mids$[mid_getTotalHits_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::TopDocs TopDocsCollector::topDocs() const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_topDocs_45154c559b39de4e]));
        }

        ::org::apache::lucene::search::TopDocs TopDocsCollector::topDocs(jint a0) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_topDocs_a28828dc6b19e268], a0));
        }

        ::org::apache::lucene::search::TopDocs TopDocsCollector::topDocs(jint a0, jint a1) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_topDocs_147fb0db3e29666e], a0, a1));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopDocsCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopDocsCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopDocsCollector_of_(t_TopDocsCollector *self, PyObject *args);
        static PyObject *t_TopDocsCollector_getTotalHits(t_TopDocsCollector *self);
        static PyObject *t_TopDocsCollector_topDocs(t_TopDocsCollector *self, PyObject *args);
        static PyObject *t_TopDocsCollector_get__totalHits(t_TopDocsCollector *self, void *data);
        static PyObject *t_TopDocsCollector_get__parameters_(t_TopDocsCollector *self, void *data);
        static PyGetSetDef t_TopDocsCollector__fields_[] = {
          DECLARE_GET_FIELD(t_TopDocsCollector, totalHits),
          DECLARE_GET_FIELD(t_TopDocsCollector, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopDocsCollector__methods_[] = {
          DECLARE_METHOD(t_TopDocsCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopDocsCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopDocsCollector, of_, METH_VARARGS),
          DECLARE_METHOD(t_TopDocsCollector, getTotalHits, METH_NOARGS),
          DECLARE_METHOD(t_TopDocsCollector, topDocs, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TopDocsCollector)[] = {
          { Py_tp_methods, t_TopDocsCollector__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_TopDocsCollector__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TopDocsCollector)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(TopDocsCollector, t_TopDocsCollector, TopDocsCollector);
        PyObject *t_TopDocsCollector::wrap_Object(const TopDocsCollector& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopDocsCollector::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopDocsCollector *self = (t_TopDocsCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopDocsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopDocsCollector::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopDocsCollector *self = (t_TopDocsCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopDocsCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TopDocsCollector), &PY_TYPE_DEF(TopDocsCollector), module, "TopDocsCollector", 0);
        }

        void t_TopDocsCollector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopDocsCollector), "class_", make_descriptor(TopDocsCollector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopDocsCollector), "wrapfn_", make_descriptor(t_TopDocsCollector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopDocsCollector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopDocsCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopDocsCollector::initializeClass, 1)))
            return NULL;
          return t_TopDocsCollector::wrap_Object(TopDocsCollector(((t_TopDocsCollector *) arg)->object.this$));
        }
        static PyObject *t_TopDocsCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopDocsCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopDocsCollector_of_(t_TopDocsCollector *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_TopDocsCollector_getTotalHits(t_TopDocsCollector *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTotalHits());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_TopDocsCollector_topDocs(t_TopDocsCollector *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);
              OBJ_CALL(result = self->object.topDocs());
              return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
            }
            break;
           case 1:
            {
              jint a0;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.topDocs(a0));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              jint a0;
              jint a1;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(result = self->object.topDocs(a0, a1));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "topDocs", args);
          return NULL;
        }
        static PyObject *t_TopDocsCollector_get__parameters_(t_TopDocsCollector *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TopDocsCollector_get__totalHits(t_TopDocsCollector *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTotalHits());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "java/lang/CharSequence.h"
#include "java/lang/StringBuilder.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *CharTermAttributeImpl::class$ = NULL;
          jmethodID *CharTermAttributeImpl::mids$ = NULL;
          bool CharTermAttributeImpl::live$ = false;

          jclass CharTermAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_append_08b07ebb2001b248] = env->getMethodID(cls, "append", "(Ljava/lang/StringBuilder;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_d85521f0e70da213] = env->getMethodID(cls, "append", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_b1f80b30aeff72d6] = env->getMethodID(cls, "append", "(C)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_20585f004b528d2a] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_82412d869dba58e5] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_be0c00cc88f7d758] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_buffer_e11cf13c9a887534] = env->getMethodID(cls, "buffer", "()[C");
              mids$[mid_charAt_ebc61ec1e57770d1] = env->getMethodID(cls, "charAt", "(I)C");
              mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_clone_69b6f7d483ff3ab1] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl;");
              mids$[mid_copyBuffer_d5128be76a214037] = env->getMethodID(cls, "copyBuffer", "([CII)V");
              mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getBytesRef_7af2ea2e37ce82b8] = env->getMethodID(cls, "getBytesRef", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_length_9972fcc56b44e79d] = env->getMethodID(cls, "length", "()I");
              mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
              mids$[mid_resizeBuffer_4a35a620830b94db] = env->getMethodID(cls, "resizeBuffer", "(I)[C");
              mids$[mid_setEmpty_ef58197fb96ec4fc] = env->getMethodID(cls, "setEmpty", "()Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_setLength_85969a49670f0d6d] = env->getMethodID(cls, "setLength", "(I)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_subSequence_26d6f5be97bcdc38] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharTermAttributeImpl::CharTermAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::java::lang::StringBuilder & a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_08b07ebb2001b248], a0.this$));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_d85521f0e70da213], a0.this$));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(jchar a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_b1f80b30aeff72d6], a0));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::java::lang::CharSequence & a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_20585f004b528d2a], a0.this$));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_82412d869dba58e5], a0.this$));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_be0c00cc88f7d758], a0.this$, a1, a2));
          }

          JArray< jchar > CharTermAttributeImpl::buffer() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_buffer_e11cf13c9a887534]));
          }

          jchar CharTermAttributeImpl::charAt(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_charAt_ebc61ec1e57770d1], a0);
          }

          void CharTermAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
          }

          CharTermAttributeImpl CharTermAttributeImpl::clone() const
          {
            return CharTermAttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_69b6f7d483ff3ab1]));
          }

          void CharTermAttributeImpl::copyBuffer(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_copyBuffer_d5128be76a214037], a0.this$, a1, a2);
          }

          void CharTermAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_26346c38ebc9c090], a0.this$);
          }

          jboolean CharTermAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef CharTermAttributeImpl::getBytesRef() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBytesRef_7af2ea2e37ce82b8]));
          }

          jint CharTermAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          jint CharTermAttributeImpl::length() const
          {
            return env->callIntMethod(this$, mids$[mid_length_9972fcc56b44e79d]);
          }

          void CharTermAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
          }

          JArray< jchar > CharTermAttributeImpl::resizeBuffer(jint a0) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_resizeBuffer_4a35a620830b94db], a0));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::setEmpty() const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_setEmpty_ef58197fb96ec4fc]));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::setLength(jint a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_setLength_85969a49670f0d6d], a0));
          }

          ::java::lang::CharSequence CharTermAttributeImpl::subSequence(jint a0, jint a1) const
          {
            return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_26d6f5be97bcdc38], a0, a1));
          }

          ::java::lang::String CharTermAttributeImpl::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_CharTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharTermAttributeImpl_init_(t_CharTermAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharTermAttributeImpl_append(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_buffer(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_charAt(t_CharTermAttributeImpl *self, PyObject *arg);
          static PyObject *t_CharTermAttributeImpl_clear(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_clone(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_copyBuffer(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_copyTo(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_equals(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_getBytesRef(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_hashCode(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_length(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_reflectWith(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_resizeBuffer(t_CharTermAttributeImpl *self, PyObject *arg);
          static PyObject *t_CharTermAttributeImpl_setEmpty(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_setLength(t_CharTermAttributeImpl *self, PyObject *arg);
          static PyObject *t_CharTermAttributeImpl_subSequence(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_toString(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_get__bytesRef(t_CharTermAttributeImpl *self, void *data);
          static PyGetSetDef t_CharTermAttributeImpl__fields_[] = {
            DECLARE_GET_FIELD(t_CharTermAttributeImpl, bytesRef),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharTermAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_CharTermAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTermAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTermAttributeImpl, append, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, buffer, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, charAt, METH_O),
            DECLARE_METHOD(t_CharTermAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, clone, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, copyBuffer, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, getBytesRef, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, length, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, reflectWith, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, resizeBuffer, METH_O),
            DECLARE_METHOD(t_CharTermAttributeImpl, setEmpty, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, setLength, METH_O),
            DECLARE_METHOD(t_CharTermAttributeImpl, subSequence, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CharTermAttributeImpl)[] = {
            { Py_tp_methods, t_CharTermAttributeImpl__methods_ },
            { Py_tp_init, (void *) t_CharTermAttributeImpl_init_ },
            { Py_tp_getset, t_CharTermAttributeImpl__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CharTermAttributeImpl)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::AttributeImpl),
            NULL
          };

          DEFINE_TYPE(CharTermAttributeImpl, t_CharTermAttributeImpl, CharTermAttributeImpl);

          void t_CharTermAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(CharTermAttributeImpl), &PY_TYPE_DEF(CharTermAttributeImpl), module, "CharTermAttributeImpl", 0);
          }

          void t_CharTermAttributeImpl::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharTermAttributeImpl), "class_", make_descriptor(CharTermAttributeImpl::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharTermAttributeImpl), "wrapfn_", make_descriptor(t_CharTermAttributeImpl::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharTermAttributeImpl), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharTermAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_CharTermAttributeImpl::wrap_Object(CharTermAttributeImpl(((t_CharTermAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_CharTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharTermAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharTermAttributeImpl_init_(t_CharTermAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            CharTermAttributeImpl object((jobject) NULL);

            INT_CALL(object = CharTermAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_CharTermAttributeImpl_append(t_CharTermAttributeImpl *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::StringBuilder a0((jobject) NULL);
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::lang::StringBuilder::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                jchar a0;
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "OII", ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.append(a0, a1, a2));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_buffer(t_CharTermAttributeImpl *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.buffer());
            return result.wrap();
          }

          static PyObject *t_CharTermAttributeImpl_charAt(t_CharTermAttributeImpl *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.charAt(a0));
              return c2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "charAt", arg);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_clear(t_CharTermAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_clone(t_CharTermAttributeImpl *self, PyObject *args)
          {
            CharTermAttributeImpl result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_CharTermAttributeImpl::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_copyBuffer(t_CharTermAttributeImpl *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.copyBuffer(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copyBuffer", args);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_copyTo(t_CharTermAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_equals(t_CharTermAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_getBytesRef(t_CharTermAttributeImpl *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_CharTermAttributeImpl_hashCode(t_CharTermAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_length(t_CharTermAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.length());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_CharTermAttributeImpl_reflectWith(t_CharTermAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reflectWith(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_resizeBuffer(t_CharTermAttributeImpl *self, PyObject *arg)
          {
            jint a0;
            JArray< jchar > result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.resizeBuffer(a0));
              return result.wrap();
            }

            PyErr_SetArgsError((PyObject *) self, "resizeBuffer", arg);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_setEmpty(t_CharTermAttributeImpl *self)
          {
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);
            OBJ_CALL(result = self->object.setEmpty());
            return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
          }

          static PyObject *t_CharTermAttributeImpl_setLength(t_CharTermAttributeImpl *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setLength(a0));
              return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setLength", arg);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_subSequence(t_CharTermAttributeImpl *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::lang::CharSequence result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.subSequence(a0, a1));
              return ::java::lang::t_CharSequence::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subSequence", args);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_toString(t_CharTermAttributeImpl *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_get__bytesRef(t_CharTermAttributeImpl *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ReferenceManager.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ReferenceManager$RefreshListener.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ReferenceManager::class$ = NULL;
        jmethodID *ReferenceManager::mids$ = NULL;
        bool ReferenceManager::live$ = false;

        jclass ReferenceManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ReferenceManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acquire_d6bcd06f3102c4d9] = env->getMethodID(cls, "acquire", "()Ljava/lang/Object;");
            mids$[mid_addListener_995291342c906072] = env->getMethodID(cls, "addListener", "(Lorg/apache/lucene/search/ReferenceManager$RefreshListener;)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_maybeRefresh_8454bd5aa23fd11e] = env->getMethodID(cls, "maybeRefresh", "()Z");
            mids$[mid_maybeRefreshBlocking_f2cc1bce94666404] = env->getMethodID(cls, "maybeRefreshBlocking", "()V");
            mids$[mid_release_d20f626183f72f7d] = env->getMethodID(cls, "release", "(Ljava/lang/Object;)V");
            mids$[mid_removeListener_995291342c906072] = env->getMethodID(cls, "removeListener", "(Lorg/apache/lucene/search/ReferenceManager$RefreshListener;)V");
            mids$[mid_afterClose_f2cc1bce94666404] = env->getMethodID(cls, "afterClose", "()V");
            mids$[mid_afterMaybeRefresh_f2cc1bce94666404] = env->getMethodID(cls, "afterMaybeRefresh", "()V");
            mids$[mid_refreshIfNeeded_e5ae0f8c04795fa9] = env->getMethodID(cls, "refreshIfNeeded", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_tryIncRef_8b72f2dcdde6fd1d] = env->getMethodID(cls, "tryIncRef", "(Ljava/lang/Object;)Z");
            mids$[mid_decRef_d20f626183f72f7d] = env->getMethodID(cls, "decRef", "(Ljava/lang/Object;)V");
            mids$[mid_getRefCount_5a4805a36cf611e7] = env->getMethodID(cls, "getRefCount", "(Ljava/lang/Object;)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ReferenceManager::ReferenceManager() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::java::lang::Object ReferenceManager::acquire() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_acquire_d6bcd06f3102c4d9]));
        }

        void ReferenceManager::addListener(const ::org::apache::lucene::search::ReferenceManager$RefreshListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addListener_995291342c906072], a0.this$);
        }

        void ReferenceManager::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        jboolean ReferenceManager::maybeRefresh() const
        {
          return env->callBooleanMethod(this$, mids$[mid_maybeRefresh_8454bd5aa23fd11e]);
        }

        void ReferenceManager::maybeRefreshBlocking() const
        {
          env->callVoidMethod(this$, mids$[mid_maybeRefreshBlocking_f2cc1bce94666404]);
        }

        void ReferenceManager::release(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_d20f626183f72f7d], a0.this$);
        }

        void ReferenceManager::removeListener(const ::org::apache::lucene::search::ReferenceManager$RefreshListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeListener_995291342c906072], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ReferenceManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReferenceManager_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReferenceManager_of_(t_ReferenceManager *self, PyObject *args);
        static int t_ReferenceManager_init_(t_ReferenceManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ReferenceManager_acquire(t_ReferenceManager *self);
        static PyObject *t_ReferenceManager_addListener(t_ReferenceManager *self, PyObject *arg);
        static PyObject *t_ReferenceManager_close(t_ReferenceManager *self);
        static PyObject *t_ReferenceManager_maybeRefresh(t_ReferenceManager *self);
        static PyObject *t_ReferenceManager_maybeRefreshBlocking(t_ReferenceManager *self);
        static PyObject *t_ReferenceManager_release(t_ReferenceManager *self, PyObject *arg);
        static PyObject *t_ReferenceManager_removeListener(t_ReferenceManager *self, PyObject *arg);
        static PyObject *t_ReferenceManager_get__parameters_(t_ReferenceManager *self, void *data);
        static PyGetSetDef t_ReferenceManager__fields_[] = {
          DECLARE_GET_FIELD(t_ReferenceManager, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ReferenceManager__methods_[] = {
          DECLARE_METHOD(t_ReferenceManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReferenceManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReferenceManager, of_, METH_VARARGS),
          DECLARE_METHOD(t_ReferenceManager, acquire, METH_NOARGS),
          DECLARE_METHOD(t_ReferenceManager, addListener, METH_O),
          DECLARE_METHOD(t_ReferenceManager, close, METH_NOARGS),
          DECLARE_METHOD(t_ReferenceManager, maybeRefresh, METH_NOARGS),
          DECLARE_METHOD(t_ReferenceManager, maybeRefreshBlocking, METH_NOARGS),
          DECLARE_METHOD(t_ReferenceManager, release, METH_O),
          DECLARE_METHOD(t_ReferenceManager, removeListener, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ReferenceManager)[] = {
          { Py_tp_methods, t_ReferenceManager__methods_ },
          { Py_tp_init, (void *) t_ReferenceManager_init_ },
          { Py_tp_getset, t_ReferenceManager__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ReferenceManager)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(ReferenceManager, t_ReferenceManager, ReferenceManager);
        PyObject *t_ReferenceManager::wrap_Object(const ReferenceManager& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReferenceManager::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReferenceManager *self = (t_ReferenceManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ReferenceManager::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReferenceManager::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReferenceManager *self = (t_ReferenceManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ReferenceManager::install(PyObject *module)
        {
          installType(&PY_TYPE(ReferenceManager), &PY_TYPE_DEF(ReferenceManager), module, "ReferenceManager", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(ReferenceManager), "RefreshListener", make_descriptor(&PY_TYPE_DEF(ReferenceManager$RefreshListener)));
        }

        void t_ReferenceManager::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ReferenceManager), "class_", make_descriptor(ReferenceManager::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ReferenceManager), "wrapfn_", make_descriptor(t_ReferenceManager::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ReferenceManager), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ReferenceManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReferenceManager::initializeClass, 1)))
            return NULL;
          return t_ReferenceManager::wrap_Object(ReferenceManager(((t_ReferenceManager *) arg)->object.this$));
        }
        static PyObject *t_ReferenceManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReferenceManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ReferenceManager_of_(t_ReferenceManager *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ReferenceManager_init_(t_ReferenceManager *self, PyObject *args, PyObject *kwds)
        {
          ReferenceManager object((jobject) NULL);

          INT_CALL(object = ReferenceManager());
          self->object = object;

          return 0;
        }

        static PyObject *t_ReferenceManager_acquire(t_ReferenceManager *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.acquire());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_ReferenceManager_addListener(t_ReferenceManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::ReferenceManager$RefreshListener a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::search::ReferenceManager$RefreshListener::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_ReferenceManager$RefreshListener::parameters_))
          {
            OBJ_CALL(self->object.addListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addListener", arg);
          return NULL;
        }

        static PyObject *t_ReferenceManager_close(t_ReferenceManager *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_ReferenceManager_maybeRefresh(t_ReferenceManager *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.maybeRefresh());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_ReferenceManager_maybeRefreshBlocking(t_ReferenceManager *self)
        {
          OBJ_CALL(self->object.maybeRefreshBlocking());
          Py_RETURN_NONE;
        }

        static PyObject *t_ReferenceManager_release(t_ReferenceManager *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(self->object.release(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "release", arg);
          return NULL;
        }

        static PyObject *t_ReferenceManager_removeListener(t_ReferenceManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::ReferenceManager$RefreshListener a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::search::ReferenceManager$RefreshListener::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_ReferenceManager$RefreshListener::parameters_))
          {
            OBJ_CALL(self->object.removeListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeListener", arg);
          return NULL;
        }
        static PyObject *t_ReferenceManager_get__parameters_(t_ReferenceManager *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/classification/SimpleNaiveBayesClassifier.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/classification/Classifier.h"
#include "org/apache/lucene/classification/ClassificationResult.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {

        ::java::lang::Class *SimpleNaiveBayesClassifier::class$ = NULL;
        jmethodID *SimpleNaiveBayesClassifier::mids$ = NULL;
        bool SimpleNaiveBayesClassifier::live$ = false;

        jclass SimpleNaiveBayesClassifier::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/classification/SimpleNaiveBayesClassifier");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e4936342c09a71e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/search/Query;Ljava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_assignClass_5edc036bda71a93d] = env->getMethodID(cls, "assignClass", "(Ljava/lang/String;)Lorg/apache/lucene/classification/ClassificationResult;");
            mids$[mid_getClasses_25278b4b3ab80e37] = env->getMethodID(cls, "getClasses", "(Ljava/lang/String;)Ljava/util/List;");
            mids$[mid_getClasses_a5d57c41d0cd0867] = env->getMethodID(cls, "getClasses", "(Ljava/lang/String;I)Ljava/util/List;");
            mids$[mid_assignClassNormalizedList_25278b4b3ab80e37] = env->getMethodID(cls, "assignClassNormalizedList", "(Ljava/lang/String;)Ljava/util/List;");
            mids$[mid_normClassificationResults_7080e5eb22c84295] = env->getMethodID(cls, "normClassificationResults", "(Ljava/util/List;)Ljava/util/ArrayList;");
            mids$[mid_tokenize_1606e23a23a4a8e5] = env->getMethodID(cls, "tokenize", "(Ljava/lang/String;)[Ljava/lang/String;");
            mids$[mid_countDocsWithClass_9972fcc56b44e79d] = env->getMethodID(cls, "countDocsWithClass", "()I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleNaiveBayesClassifier::SimpleNaiveBayesClassifier(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::search::Query & a2, const ::java::lang::String & a3, const JArray< ::java::lang::String > & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6e4936342c09a71e, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

        ::org::apache::lucene::classification::ClassificationResult SimpleNaiveBayesClassifier::assignClass(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::classification::ClassificationResult(env->callObjectMethod(this$, mids$[mid_assignClass_5edc036bda71a93d], a0.this$));
        }

        ::java::util::List SimpleNaiveBayesClassifier::getClasses(const ::java::lang::String & a0) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getClasses_25278b4b3ab80e37], a0.this$));
        }

        ::java::util::List SimpleNaiveBayesClassifier::getClasses(const ::java::lang::String & a0, jint a1) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getClasses_a5d57c41d0cd0867], a0.this$, a1));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        static PyObject *t_SimpleNaiveBayesClassifier_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleNaiveBayesClassifier_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SimpleNaiveBayesClassifier_init_(t_SimpleNaiveBayesClassifier *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleNaiveBayesClassifier_assignClass(t_SimpleNaiveBayesClassifier *self, PyObject *arg);
        static PyObject *t_SimpleNaiveBayesClassifier_getClasses(t_SimpleNaiveBayesClassifier *self, PyObject *args);

        static PyMethodDef t_SimpleNaiveBayesClassifier__methods_[] = {
          DECLARE_METHOD(t_SimpleNaiveBayesClassifier, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleNaiveBayesClassifier, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleNaiveBayesClassifier, assignClass, METH_O),
          DECLARE_METHOD(t_SimpleNaiveBayesClassifier, getClasses, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SimpleNaiveBayesClassifier)[] = {
          { Py_tp_methods, t_SimpleNaiveBayesClassifier__methods_ },
          { Py_tp_init, (void *) t_SimpleNaiveBayesClassifier_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SimpleNaiveBayesClassifier)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SimpleNaiveBayesClassifier, t_SimpleNaiveBayesClassifier, SimpleNaiveBayesClassifier);

        void t_SimpleNaiveBayesClassifier::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleNaiveBayesClassifier), &PY_TYPE_DEF(SimpleNaiveBayesClassifier), module, "SimpleNaiveBayesClassifier", 0);
        }

        void t_SimpleNaiveBayesClassifier::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleNaiveBayesClassifier), "class_", make_descriptor(SimpleNaiveBayesClassifier::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleNaiveBayesClassifier), "wrapfn_", make_descriptor(t_SimpleNaiveBayesClassifier::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleNaiveBayesClassifier), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleNaiveBayesClassifier_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleNaiveBayesClassifier::initializeClass, 1)))
            return NULL;
          return t_SimpleNaiveBayesClassifier::wrap_Object(SimpleNaiveBayesClassifier(((t_SimpleNaiveBayesClassifier *) arg)->object.this$));
        }
        static PyObject *t_SimpleNaiveBayesClassifier_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleNaiveBayesClassifier::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SimpleNaiveBayesClassifier_init_(t_SimpleNaiveBayesClassifier *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
          ::org::apache::lucene::search::Query a2((jobject) NULL);
          ::java::lang::String a3((jobject) NULL);
          JArray< ::java::lang::String > a4((jobject) NULL);
          SimpleNaiveBayesClassifier object((jobject) NULL);

          if (!parseArgs(args, "kkks[s", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = SimpleNaiveBayesClassifier(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SimpleNaiveBayesClassifier_assignClass(t_SimpleNaiveBayesClassifier *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::classification::ClassificationResult result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.assignClass(a0));
            return ::org::apache::lucene::classification::t_ClassificationResult::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          PyErr_SetArgsError((PyObject *) self, "assignClass", arg);
          return NULL;
        }

        static PyObject *t_SimpleNaiveBayesClassifier_getClasses(t_SimpleNaiveBayesClassifier *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.getClasses(a0));
                return ::java::util::t_List::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                OBJ_CALL(result = self->object.getClasses(a0, a1));
                return ::java::util::t_List::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getClasses", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Accountable::class$ = NULL;
        jmethodID *Accountable::mids$ = NULL;
        bool Accountable::live$ = false;
        Accountable *Accountable::NULL_ACCOUNTABLE = NULL;

        jclass Accountable::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Accountable");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            NULL_ACCOUNTABLE = new Accountable(env->getStaticObjectField(cls, "NULL_ACCOUNTABLE", "Lorg/apache/lucene/util/Accountable;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Collection Accountable::getChildResources() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
        }

        jlong Accountable::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Accountable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Accountable_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Accountable_getChildResources(t_Accountable *self);
        static PyObject *t_Accountable_ramBytesUsed(t_Accountable *self);
        static PyObject *t_Accountable_get__childResources(t_Accountable *self, void *data);
        static PyGetSetDef t_Accountable__fields_[] = {
          DECLARE_GET_FIELD(t_Accountable, childResources),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Accountable__methods_[] = {
          DECLARE_METHOD(t_Accountable, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Accountable, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Accountable, getChildResources, METH_NOARGS),
          DECLARE_METHOD(t_Accountable, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Accountable)[] = {
          { Py_tp_methods, t_Accountable__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_Accountable__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Accountable)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Accountable, t_Accountable, Accountable);

        void t_Accountable::install(PyObject *module)
        {
          installType(&PY_TYPE(Accountable), &PY_TYPE_DEF(Accountable), module, "Accountable", 0);
        }

        void t_Accountable::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Accountable), "class_", make_descriptor(Accountable::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Accountable), "wrapfn_", make_descriptor(t_Accountable::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Accountable), "boxfn_", make_descriptor(boxObject));
          env->getClass(Accountable::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(Accountable), "NULL_ACCOUNTABLE", make_descriptor(t_Accountable::wrap_Object(*Accountable::NULL_ACCOUNTABLE)));
        }

        static PyObject *t_Accountable_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Accountable::initializeClass, 1)))
            return NULL;
          return t_Accountable::wrap_Object(Accountable(((t_Accountable *) arg)->object.this$));
        }
        static PyObject *t_Accountable_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Accountable::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Accountable_getChildResources(t_Accountable *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getChildResources());
          return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
        }

        static PyObject *t_Accountable_ramBytesUsed(t_Accountable *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Accountable_get__childResources(t_Accountable *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildResources());
          return ::java::util::t_Collection::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/concurrent/Executors.h"
#include "java/lang/Class.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/lang/Runnable.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "JArray.h"

namespace java {
  namespace util {
    namespace concurrent {

      ::java::lang::Class *Executors::class$ = NULL;
      jmethodID *Executors::mids$ = NULL;
      bool Executors::live$ = false;

      jclass Executors::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("java/util/concurrent/Executors");

          mids$ = new jmethodID[max_mid];
          mids$[mid_callable_de15a97452a52363] = env->getStaticMethodID(cls, "callable", "(Ljava/lang/Runnable;)Ljava/util/concurrent/Callable;");
          mids$[mid_callable_e7506d15877165e4] = env->getStaticMethodID(cls, "callable", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Callable;");
          mids$[mid_defaultThreadFactory_09fdd6f85c9842aa] = env->getStaticMethodID(cls, "defaultThreadFactory", "()Ljava/util/concurrent/ThreadFactory;");
          mids$[mid_newCachedThreadPool_5a7e38a80c9a352f] = env->getStaticMethodID(cls, "newCachedThreadPool", "()Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newCachedThreadPool_c107c3b99f9591e0] = env->getStaticMethodID(cls, "newCachedThreadPool", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newFixedThreadPool_7c8c126d38cff000] = env->getStaticMethodID(cls, "newFixedThreadPool", "(I)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newFixedThreadPool_b830323109b9157a] = env->getStaticMethodID(cls, "newFixedThreadPool", "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newScheduledThreadPool_f26a5b9c99e7ae6e] = env->getStaticMethodID(cls, "newScheduledThreadPool", "(I)Ljava/util/concurrent/ScheduledExecutorService;");
          mids$[mid_newScheduledThreadPool_6f8baae544eb4d1c] = env->getStaticMethodID(cls, "newScheduledThreadPool", "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;");
          mids$[mid_newSingleThreadExecutor_5a7e38a80c9a352f] = env->getStaticMethodID(cls, "newSingleThreadExecutor", "()Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newSingleThreadExecutor_c107c3b99f9591e0] = env->getStaticMethodID(cls, "newSingleThreadExecutor", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newSingleThreadScheduledExecutor_2db92c6a9e18c0c4] = env->getStaticMethodID(cls, "newSingleThreadScheduledExecutor", "()Ljava/util/concurrent/ScheduledExecutorService;");
          mids$[mid_newSingleThreadScheduledExecutor_ef8e7850ead2e158] = env->getStaticMethodID(cls, "newSingleThreadScheduledExecutor", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;");
          mids$[mid_newWorkStealingPool_5a7e38a80c9a352f] = env->getStaticMethodID(cls, "newWorkStealingPool", "()Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newWorkStealingPool_7c8c126d38cff000] = env->getStaticMethodID(cls, "newWorkStealingPool", "(I)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_privilegedCallable_fc79c0d8da3e4575] = env->getStaticMethodID(cls, "privilegedCallable", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;");
          mids$[mid_privilegedCallableUsingCurrentClassLoader_fc79c0d8da3e4575] = env->getStaticMethodID(cls, "privilegedCallableUsingCurrentClassLoader", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;");
          mids$[mid_privilegedThreadFactory_09fdd6f85c9842aa] = env->getStaticMethodID(cls, "privilegedThreadFactory", "()Ljava/util/concurrent/ThreadFactory;");
          mids$[mid_unconfigurableExecutorService_95da0c7a50527427] = env->getStaticMethodID(cls, "unconfigurableExecutorService", "(Ljava/util/concurrent/ExecutorService;)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_unconfigurableScheduledExecutorService_ff46e4a302ec396e] = env->getStaticMethodID(cls, "unconfigurableScheduledExecutorService", "(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;");

          class$ = new ::java::lang::Class(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::java::util::concurrent::Callable Executors::callable(const ::java::lang::Runnable & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::Callable(env->callStaticObjectMethod(cls, mids$[mid_callable_de15a97452a52363], a0.this$));
      }

      ::java::util::concurrent::Callable Executors::callable(const ::java::lang::Runnable & a0, const ::java::lang::Object & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::Callable(env->callStaticObjectMethod(cls, mids$[mid_callable_e7506d15877165e4], a0.this$, a1.this$));
      }

      ::java::util::concurrent::ThreadFactory Executors::defaultThreadFactory()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ThreadFactory(env->callStaticObjectMethod(cls, mids$[mid_defaultThreadFactory_09fdd6f85c9842aa]));
      }

      ::java::util::concurrent::ExecutorService Executors::newCachedThreadPool()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newCachedThreadPool_5a7e38a80c9a352f]));
      }

      ::java::util::concurrent::ExecutorService Executors::newCachedThreadPool(const ::java::util::concurrent::ThreadFactory & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newCachedThreadPool_c107c3b99f9591e0], a0.this$));
      }

      ::java::util::concurrent::ExecutorService Executors::newFixedThreadPool(jint a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newFixedThreadPool_7c8c126d38cff000], a0));
      }

      ::java::util::concurrent::ExecutorService Executors::newFixedThreadPool(jint a0, const ::java::util::concurrent::ThreadFactory & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newFixedThreadPool_b830323109b9157a], a0, a1.this$));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::newScheduledThreadPool(jint a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newScheduledThreadPool_f26a5b9c99e7ae6e], a0));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::newScheduledThreadPool(jint a0, const ::java::util::concurrent::ThreadFactory & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newScheduledThreadPool_6f8baae544eb4d1c], a0, a1.this$));
      }

      ::java::util::concurrent::ExecutorService Executors::newSingleThreadExecutor()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newSingleThreadExecutor_5a7e38a80c9a352f]));
      }

      ::java::util::concurrent::ExecutorService Executors::newSingleThreadExecutor(const ::java::util::concurrent::ThreadFactory & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newSingleThreadExecutor_c107c3b99f9591e0], a0.this$));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::newSingleThreadScheduledExecutor()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newSingleThreadScheduledExecutor_2db92c6a9e18c0c4]));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::newSingleThreadScheduledExecutor(const ::java::util::concurrent::ThreadFactory & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newSingleThreadScheduledExecutor_ef8e7850ead2e158], a0.this$));
      }

      ::java::util::concurrent::ExecutorService Executors::newWorkStealingPool()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newWorkStealingPool_5a7e38a80c9a352f]));
      }

      ::java::util::concurrent::ExecutorService Executors::newWorkStealingPool(jint a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newWorkStealingPool_7c8c126d38cff000], a0));
      }

      ::java::util::concurrent::Callable Executors::privilegedCallable(const ::java::util::concurrent::Callable & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::Callable(env->callStaticObjectMethod(cls, mids$[mid_privilegedCallable_fc79c0d8da3e4575], a0.this$));
      }

      ::java::util::concurrent::Callable Executors::privilegedCallableUsingCurrentClassLoader(const ::java::util::concurrent::Callable & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::Callable(env->callStaticObjectMethod(cls, mids$[mid_privilegedCallableUsingCurrentClassLoader_fc79c0d8da3e4575], a0.this$));
      }

      ::java::util::concurrent::ThreadFactory Executors::privilegedThreadFactory()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ThreadFactory(env->callStaticObjectMethod(cls, mids$[mid_privilegedThreadFactory_09fdd6f85c9842aa]));
      }

      ::java::util::concurrent::ExecutorService Executors::unconfigurableExecutorService(const ::java::util::concurrent::ExecutorService & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_unconfigurableExecutorService_95da0c7a50527427], a0.this$));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::unconfigurableScheduledExecutorService(const ::java::util::concurrent::ScheduledExecutorService & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_unconfigurableScheduledExecutorService_ff46e4a302ec396e], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    namespace concurrent {
      static PyObject *t_Executors_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_callable(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_defaultThreadFactory(PyTypeObject *type);
      static PyObject *t_Executors_newCachedThreadPool(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newFixedThreadPool(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newScheduledThreadPool(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newSingleThreadExecutor(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newSingleThreadScheduledExecutor(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newWorkStealingPool(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_privilegedCallable(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_privilegedCallableUsingCurrentClassLoader(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_privilegedThreadFactory(PyTypeObject *type);
      static PyObject *t_Executors_unconfigurableExecutorService(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_unconfigurableScheduledExecutorService(PyTypeObject *type, PyObject *arg);

      static PyMethodDef t_Executors__methods_[] = {
        DECLARE_METHOD(t_Executors, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, callable, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, defaultThreadFactory, METH_NOARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newCachedThreadPool, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newFixedThreadPool, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newScheduledThreadPool, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newSingleThreadExecutor, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newSingleThreadScheduledExecutor, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newWorkStealingPool, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, privilegedCallable, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, privilegedCallableUsingCurrentClassLoader, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, privilegedThreadFactory, METH_NOARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, unconfigurableExecutorService, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, unconfigurableScheduledExecutorService, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      static PyType_Slot PY_TYPE_SLOTS(Executors)[] = {
        { Py_tp_methods, t_Executors__methods_ },
        { Py_tp_init, (void *) abstract_init },
        { 0, NULL }
      };

      static PyType_Def *PY_TYPE_BASES(Executors)[] = {
        &PY_TYPE_DEF(::java::lang::Object),
        NULL
      };

      DEFINE_TYPE(Executors, t_Executors, Executors);

      void t_Executors::install(PyObject *module)
      {
        installType(&PY_TYPE(Executors), &PY_TYPE_DEF(Executors), module, "Executors", 0);
      }

      void t_Executors::initialize(PyObject *module)
      {
        PyObject_SetAttrString((PyObject *) PY_TYPE(Executors), "class_", make_descriptor(Executors::initializeClass, 1));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Executors), "wrapfn_", make_descriptor(t_Executors::wrap_jobject));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Executors), "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Executors_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Executors::initializeClass, 1)))
          return NULL;
        return t_Executors::wrap_Object(Executors(((t_Executors *) arg)->object.this$));
      }
      static PyObject *t_Executors_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Executors::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_Executors_callable(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::lang::Runnable a0((jobject) NULL);
            ::java::util::concurrent::Callable result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::lang::Runnable::initializeClass, &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::callable(a0));
              return ::java::util::concurrent::t_Callable::wrap_Object(result, ::java::lang::PY_TYPE(Object));
            }
          }
          break;
         case 2:
          {
            ::java::lang::Runnable a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::util::concurrent::Callable result((jobject) NULL);

            if (!parseArgs(args, "ko", ::java::lang::Runnable::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::callable(a0, a1));
              return ::java::util::concurrent::t_Callable::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "callable", args);
        return NULL;
      }

      static PyObject *t_Executors_defaultThreadFactory(PyTypeObject *type)
      {
        ::java::util::concurrent::ThreadFactory result((jobject) NULL);
        OBJ_CALL(result = ::java::util::concurrent::Executors::defaultThreadFactory());
        return ::java::util::concurrent::t_ThreadFactory::wrap_Object(result);
      }

      static PyObject *t_Executors_newCachedThreadPool(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::java::util::concurrent::ExecutorService result((jobject) NULL);
            OBJ_CALL(result = ::java::util::concurrent::Executors::newCachedThreadPool());
            return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
          }
          break;
         case 1:
          {
            ::java::util::concurrent::ThreadFactory a0((jobject) NULL);
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::util::concurrent::ThreadFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newCachedThreadPool(a0));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newCachedThreadPool", args);
        return NULL;
      }

      static PyObject *t_Executors_newFixedThreadPool(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            jint a0;
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newFixedThreadPool(a0));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
          break;
         case 2:
          {
            jint a0;
            ::java::util::concurrent::ThreadFactory a1((jobject) NULL);
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "Ik", ::java::util::concurrent::ThreadFactory::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newFixedThreadPool(a0, a1));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newFixedThreadPool", args);
        return NULL;
      }

      static PyObject *t_Executors_newScheduledThreadPool(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            jint a0;
            ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newScheduledThreadPool(a0));
              return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
            }
          }
          break;
         case 2:
          {
            jint a0;
            ::java::util::concurrent::ThreadFactory a1((jobject) NULL);
            ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);

            if (!parseArgs(args, "Ik", ::java::util::concurrent::ThreadFactory::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newScheduledThreadPool(a0, a1));
              return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newScheduledThreadPool", args);
        return NULL;
      }

      static PyObject *t_Executors_newSingleThreadExecutor(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::java::util::concurrent::ExecutorService result((jobject) NULL);
            OBJ_CALL(result = ::java::util::concurrent::Executors::newSingleThreadExecutor());
            return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
          }
          break;
         case 1:
          {
            ::java::util::concurrent::ThreadFactory a0((jobject) NULL);
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::util::concurrent::ThreadFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newSingleThreadExecutor(a0));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newSingleThreadExecutor", args);
        return NULL;
      }

      static PyObject *t_Executors_newSingleThreadScheduledExecutor(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);
            OBJ_CALL(result = ::java::util::concurrent::Executors::newSingleThreadScheduledExecutor());
            return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
          }
          break;
         case 1:
          {
            ::java::util::concurrent::ThreadFactory a0((jobject) NULL);
            ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::util::concurrent::ThreadFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newSingleThreadScheduledExecutor(a0));
              return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newSingleThreadScheduledExecutor", args);
        return NULL;
      }

      static PyObject *t_Executors_newWorkStealingPool(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::java::util::concurrent::ExecutorService result((jobject) NULL);
            OBJ_CALL(result = ::java::util::concurrent::Executors::newWorkStealingPool());
            return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
          }
          break;
         case 1:
          {
            jint a0;
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newWorkStealingPool(a0));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newWorkStealingPool", args);
        return NULL;
      }

      static PyObject *t_Executors_privilegedCallable(PyTypeObject *type, PyObject *arg)
      {
        ::java::util::concurrent::Callable a0((jobject) NULL);
        PyTypeObject **p0;
        ::java::util::concurrent::Callable result((jobject) NULL);

        if (!parseArg(arg, "K", ::java::util::concurrent::Callable::initializeClass, &a0, &p0, ::java::util::concurrent::t_Callable::parameters_))
        {
          OBJ_CALL(result = ::java::util::concurrent::Executors::privilegedCallable(a0));
          return ::java::util::concurrent::t_Callable::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "privilegedCallable", arg);
        return NULL;
      }

      static PyObject *t_Executors_privilegedCallableUsingCurrentClassLoader(PyTypeObject *type, PyObject *arg)
      {
        ::java::util::concurrent::Callable a0((jobject) NULL);
        PyTypeObject **p0;
        ::java::util::concurrent::Callable result((jobject) NULL);

        if (!parseArg(arg, "K", ::java::util::concurrent::Callable::initializeClass, &a0, &p0, ::java::util::concurrent::t_Callable::parameters_))
        {
          OBJ_CALL(result = ::java::util::concurrent::Executors::privilegedCallableUsingCurrentClassLoader(a0));
          return ::java::util::concurrent::t_Callable::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "privilegedCallableUsingCurrentClassLoader", arg);
        return NULL;
      }

      static PyObject *t_Executors_privilegedThreadFactory(PyTypeObject *type)
      {
        ::java::util::concurrent::ThreadFactory result((jobject) NULL);
        OBJ_CALL(result = ::java::util::concurrent::Executors::privilegedThreadFactory());
        return ::java::util::concurrent::t_ThreadFactory::wrap_Object(result);
      }

      static PyObject *t_Executors_unconfigurableExecutorService(PyTypeObject *type, PyObject *arg)
      {
        ::java::util::concurrent::ExecutorService a0((jobject) NULL);
        ::java::util::concurrent::ExecutorService result((jobject) NULL);

        if (!parseArg(arg, "k", ::java::util::concurrent::ExecutorService::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::util::concurrent::Executors::unconfigurableExecutorService(a0));
          return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "unconfigurableExecutorService", arg);
        return NULL;
      }

      static PyObject *t_Executors_unconfigurableScheduledExecutorService(PyTypeObject *type, PyObject *arg)
      {
        ::java::util::concurrent::ScheduledExecutorService a0((jobject) NULL);
        ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);

        if (!parseArg(arg, "k", ::java::util::concurrent::ScheduledExecutorService::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::util::concurrent::Executors::unconfigurableScheduledExecutorService(a0));
          return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "unconfigurableScheduledExecutorService", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockEncoder$WritableBytes.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *BlockEncoder$WritableBytes::class$ = NULL;
          jmethodID *BlockEncoder$WritableBytes::mids$ = NULL;
          bool BlockEncoder$WritableBytes::live$ = false;

          jclass BlockEncoder$WritableBytes::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/BlockEncoder$WritableBytes");

              mids$ = new jmethodID[max_mid];
              mids$[mid_size_2e5ae9edcb9b072f] = env->getMethodID(cls, "size", "()J");
              mids$[mid_writeTo_ead2c38342037c59] = env->getMethodID(cls, "writeTo", "(Lorg/apache/lucene/store/DataOutput;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jlong BlockEncoder$WritableBytes::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_2e5ae9edcb9b072f]);
          }

          void BlockEncoder$WritableBytes::writeTo(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_writeTo_ead2c38342037c59], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_BlockEncoder$WritableBytes_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockEncoder$WritableBytes_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockEncoder$WritableBytes_size(t_BlockEncoder$WritableBytes *self);
          static PyObject *t_BlockEncoder$WritableBytes_writeTo(t_BlockEncoder$WritableBytes *self, PyObject *arg);

          static PyMethodDef t_BlockEncoder$WritableBytes__methods_[] = {
            DECLARE_METHOD(t_BlockEncoder$WritableBytes, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockEncoder$WritableBytes, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockEncoder$WritableBytes, size, METH_NOARGS),
            DECLARE_METHOD(t_BlockEncoder$WritableBytes, writeTo, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BlockEncoder$WritableBytes)[] = {
            { Py_tp_methods, t_BlockEncoder$WritableBytes__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BlockEncoder$WritableBytes)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BlockEncoder$WritableBytes, t_BlockEncoder$WritableBytes, BlockEncoder$WritableBytes);

          void t_BlockEncoder$WritableBytes::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockEncoder$WritableBytes), &PY_TYPE_DEF(BlockEncoder$WritableBytes), module, "BlockEncoder$WritableBytes", 0);
          }

          void t_BlockEncoder$WritableBytes::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockEncoder$WritableBytes), "class_", make_descriptor(BlockEncoder$WritableBytes::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockEncoder$WritableBytes), "wrapfn_", make_descriptor(t_BlockEncoder$WritableBytes::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockEncoder$WritableBytes), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockEncoder$WritableBytes_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockEncoder$WritableBytes::initializeClass, 1)))
              return NULL;
            return t_BlockEncoder$WritableBytes::wrap_Object(BlockEncoder$WritableBytes(((t_BlockEncoder$WritableBytes *) arg)->object.this$));
          }
          static PyObject *t_BlockEncoder$WritableBytes_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockEncoder$WritableBytes::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BlockEncoder$WritableBytes_size(t_BlockEncoder$WritableBytes *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BlockEncoder$WritableBytes_writeTo(t_BlockEncoder$WritableBytes *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.writeTo(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "writeTo", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/TokenMgrError.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *TokenMgrError::class$ = NULL;
            jmethodID *TokenMgrError::mids$ = NULL;
            bool TokenMgrError::live$ = false;

            jclass TokenMgrError::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/TokenMgrError");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_3fb1dae8d4037984] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
                mids$[mid_init$_995f32485faba072] = env->getMethodID(cls, "<init>", "(ZIIILjava/lang/String;CI)V");
                mids$[mid_getMessage_db9b55ba01e03e4b] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
                mids$[mid_addEscapes_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "addEscapes", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_LexicalError_22e55ea20d3997c4] = env->getStaticMethodID(cls, "LexicalError", "(ZIIILjava/lang/String;C)Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TokenMgrError::TokenMgrError() : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            TokenMgrError::TokenMgrError(const ::java::lang::String & a0, jint a1) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_3fb1dae8d4037984, a0.this$, a1)) {}

            TokenMgrError::TokenMgrError(jboolean a0, jint a1, jint a2, jint a3, const ::java::lang::String & a4, jchar a5, jint a6) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_995f32485faba072, a0, a1, a2, a3, a4.this$, a5, a6)) {}

            ::java::lang::String TokenMgrError::getMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_db9b55ba01e03e4b]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args);
            static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data);
            static PyGetSetDef t_TokenMgrError__fields_[] = {
              DECLARE_GET_FIELD(t_TokenMgrError, message),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TokenMgrError__methods_[] = {
              DECLARE_METHOD(t_TokenMgrError, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TokenMgrError, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TokenMgrError, getMessage, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(TokenMgrError)[] = {
              { Py_tp_methods, t_TokenMgrError__methods_ },
              { Py_tp_init, (void *) t_TokenMgrError_init_ },
              { Py_tp_getset, t_TokenMgrError__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(TokenMgrError)[] = {
              &PY_TYPE_DEF(::java::lang::Error),
              NULL
            };

            DEFINE_TYPE(TokenMgrError, t_TokenMgrError, TokenMgrError);

            void t_TokenMgrError::install(PyObject *module)
            {
              installType(&PY_TYPE(TokenMgrError), &PY_TYPE_DEF(TokenMgrError), module, "TokenMgrError", 0);
            }

            void t_TokenMgrError::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(TokenMgrError), "class_", make_descriptor(TokenMgrError::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TokenMgrError), "wrapfn_", make_descriptor(t_TokenMgrError::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TokenMgrError), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TokenMgrError::initializeClass, 1)))
                return NULL;
              return t_TokenMgrError::wrap_Object(TokenMgrError(((t_TokenMgrError *) arg)->object.this$));
            }
            static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TokenMgrError::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  TokenMgrError object((jobject) NULL);

                  INT_CALL(object = TokenMgrError());
                  self->object = object;
                  break;
                }
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jint a1;
                  TokenMgrError object((jobject) NULL);

                  if (!parseArgs(args, "sI", &a0, &a1))
                  {
                    INT_CALL(object = TokenMgrError(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 7:
                {
                  jboolean a0;
                  jint a1;
                  jint a2;
                  jint a3;
                  ::java::lang::String a4((jobject) NULL);
                  jchar a5;
                  jint a6;
                  TokenMgrError object((jobject) NULL);

                  if (!parseArgs(args, "ZIIIsCI", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                  {
                    INT_CALL(object = TokenMgrError(a0, a1, a2, a3, a4, a5, a6));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getMessage());
                return j2p(result);
              }

              return callSuper(PY_TYPE(TokenMgrError), (PyObject *) self, "getMessage", args, 2);
            }

            static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessage());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/DutchStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *DutchStemmer::class$ = NULL;
        jmethodID *DutchStemmer::mids$ = NULL;
        bool DutchStemmer::live$ = false;

        jclass DutchStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/DutchStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DutchStemmer::DutchStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean DutchStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint DutchStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean DutchStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_DutchStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DutchStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DutchStemmer_init_(t_DutchStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DutchStemmer_equals(t_DutchStemmer *self, PyObject *args);
        static PyObject *t_DutchStemmer_hashCode(t_DutchStemmer *self, PyObject *args);
        static PyObject *t_DutchStemmer_stem(t_DutchStemmer *self, PyObject *args);

        static PyMethodDef t_DutchStemmer__methods_[] = {
          DECLARE_METHOD(t_DutchStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DutchStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DutchStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_DutchStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DutchStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DutchStemmer)[] = {
          { Py_tp_methods, t_DutchStemmer__methods_ },
          { Py_tp_init, (void *) t_DutchStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DutchStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(DutchStemmer, t_DutchStemmer, DutchStemmer);

        void t_DutchStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(DutchStemmer), &PY_TYPE_DEF(DutchStemmer), module, "DutchStemmer", 0);
        }

        void t_DutchStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DutchStemmer), "class_", make_descriptor(DutchStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DutchStemmer), "wrapfn_", make_descriptor(t_DutchStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DutchStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DutchStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DutchStemmer::initializeClass, 1)))
            return NULL;
          return t_DutchStemmer::wrap_Object(DutchStemmer(((t_DutchStemmer *) arg)->object.this$));
        }
        static PyObject *t_DutchStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DutchStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DutchStemmer_init_(t_DutchStemmer *self, PyObject *args, PyObject *kwds)
        {
          DutchStemmer object((jobject) NULL);

          INT_CALL(object = DutchStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_DutchStemmer_equals(t_DutchStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(DutchStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DutchStemmer_hashCode(t_DutchStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(DutchStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DutchStemmer_stem(t_DutchStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(DutchStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NIOFSDirectory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/nio/file/Path.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NIOFSDirectory::class$ = NULL;
        jmethodID *NIOFSDirectory::mids$ = NULL;
        bool NIOFSDirectory::live$ = false;

        jclass NIOFSDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NIOFSDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_636077fee54d306c] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;)V");
            mids$[mid_init$_71c9ab2266463084] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_openInput_cc9a9aabe8db93df] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NIOFSDirectory::NIOFSDirectory(const ::java::nio::file::Path & a0) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_636077fee54d306c, a0.this$)) {}

        NIOFSDirectory::NIOFSDirectory(const ::java::nio::file::Path & a0, const ::org::apache::lucene::store::LockFactory & a1) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_71c9ab2266463084, a0.this$, a1.this$)) {}

        ::org::apache::lucene::store::IndexInput NIOFSDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_cc9a9aabe8db93df], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NIOFSDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NIOFSDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NIOFSDirectory_init_(t_NIOFSDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NIOFSDirectory_openInput(t_NIOFSDirectory *self, PyObject *args);

        static PyMethodDef t_NIOFSDirectory__methods_[] = {
          DECLARE_METHOD(t_NIOFSDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NIOFSDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NIOFSDirectory, openInput, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NIOFSDirectory)[] = {
          { Py_tp_methods, t_NIOFSDirectory__methods_ },
          { Py_tp_init, (void *) t_NIOFSDirectory_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NIOFSDirectory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::FSDirectory),
          NULL
        };

        DEFINE_TYPE(NIOFSDirectory, t_NIOFSDirectory, NIOFSDirectory);

        void t_NIOFSDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(NIOFSDirectory), &PY_TYPE_DEF(NIOFSDirectory), module, "NIOFSDirectory", 0);
        }

        void t_NIOFSDirectory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NIOFSDirectory), "class_", make_descriptor(NIOFSDirectory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NIOFSDirectory), "wrapfn_", make_descriptor(t_NIOFSDirectory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NIOFSDirectory), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NIOFSDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NIOFSDirectory::initializeClass, 1)))
            return NULL;
          return t_NIOFSDirectory::wrap_Object(NIOFSDirectory(((t_NIOFSDirectory *) arg)->object.this$));
        }
        static PyObject *t_NIOFSDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NIOFSDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NIOFSDirectory_init_(t_NIOFSDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::nio::file::Path a0((jobject) NULL);
              NIOFSDirectory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::nio::file::Path::initializeClass, &a0))
              {
                INT_CALL(object = NIOFSDirectory(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::nio::file::Path a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              NIOFSDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::nio::file::Path::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = NIOFSDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NIOFSDirectory_openInput(t_NIOFSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(NIOFSDirectory), (PyObject *) self, "openInput", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/NormalizationH2.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *NormalizationH2::class$ = NULL;
          jmethodID *NormalizationH2::mids$ = NULL;
          bool NormalizationH2::live$ = false;

          jclass NormalizationH2::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/NormalizationH2");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_8e1d952dd65cdc3a] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_explain_77a68ba236144920] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_getC_58aec2b64dff50c8] = env->getMethodID(cls, "getC", "()F");
              mids$[mid_tfn_761ab1c432346fd0] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizationH2::NormalizationH2() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          NormalizationH2::NormalizationH2(jfloat a0) : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_8e1d952dd65cdc3a, a0)) {}

          ::org::apache::lucene::search::Explanation NormalizationH2::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_77a68ba236144920], a0.this$, a1, a2));
          }

          jfloat NormalizationH2::getC() const
          {
            return env->callFloatMethod(this$, mids$[mid_getC_58aec2b64dff50c8]);
          }

          jdouble NormalizationH2::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_tfn_761ab1c432346fd0], a0.this$, a1, a2);
          }

          ::java::lang::String NormalizationH2::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_NormalizationH2_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizationH2_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizationH2_init_(t_NormalizationH2 *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizationH2_explain(t_NormalizationH2 *self, PyObject *args);
          static PyObject *t_NormalizationH2_getC(t_NormalizationH2 *self);
          static PyObject *t_NormalizationH2_tfn(t_NormalizationH2 *self, PyObject *args);
          static PyObject *t_NormalizationH2_toString(t_NormalizationH2 *self, PyObject *args);
          static PyObject *t_NormalizationH2_get__c(t_NormalizationH2 *self, void *data);
          static PyGetSetDef t_NormalizationH2__fields_[] = {
            DECLARE_GET_FIELD(t_NormalizationH2, c),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NormalizationH2__methods_[] = {
            DECLARE_METHOD(t_NormalizationH2, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH2, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH2, explain, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationH2, getC, METH_NOARGS),
            DECLARE_METHOD(t_NormalizationH2, tfn, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationH2, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NormalizationH2)[] = {
            { Py_tp_methods, t_NormalizationH2__methods_ },
            { Py_tp_init, (void *) t_NormalizationH2_init_ },
            { Py_tp_getset, t_NormalizationH2__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NormalizationH2)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Normalization),
            NULL
          };

          DEFINE_TYPE(NormalizationH2, t_NormalizationH2, NormalizationH2);

          void t_NormalizationH2::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizationH2), &PY_TYPE_DEF(NormalizationH2), module, "NormalizationH2", 0);
          }

          void t_NormalizationH2::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalizationH2), "class_", make_descriptor(NormalizationH2::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalizationH2), "wrapfn_", make_descriptor(t_NormalizationH2::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalizationH2), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizationH2_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizationH2::initializeClass, 1)))
              return NULL;
            return t_NormalizationH2::wrap_Object(NormalizationH2(((t_NormalizationH2 *) arg)->object.this$));
          }
          static PyObject *t_NormalizationH2_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizationH2::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizationH2_init_(t_NormalizationH2 *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NormalizationH2 object((jobject) NULL);

                INT_CALL(object = NormalizationH2());
                self->object = object;
                break;
              }
             case 1:
              {
                jfloat a0;
                NormalizationH2 object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = NormalizationH2(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NormalizationH2_explain(t_NormalizationH2 *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(PY_TYPE(NormalizationH2), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_NormalizationH2_getC(t_NormalizationH2 *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getC());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_NormalizationH2_tfn(t_NormalizationH2 *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            jdouble result;

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(NormalizationH2), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_NormalizationH2_toString(t_NormalizationH2 *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(NormalizationH2), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NormalizationH2_get__c(t_NormalizationH2 *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getC());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *RuntimeException::class$ = NULL;
    jmethodID *RuntimeException::mids$ = NULL;
    bool RuntimeException::live$ = false;

    jclass RuntimeException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/RuntimeException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_471cfbdb800444a7] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_2e9d196dc293ffe6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    RuntimeException::RuntimeException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

    RuntimeException::RuntimeException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

    RuntimeException::RuntimeException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_471cfbdb800444a7, a0.this$)) {}

    RuntimeException::RuntimeException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_2e9d196dc293ffe6, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_RuntimeException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_RuntimeException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_RuntimeException_init_(t_RuntimeException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_RuntimeException__methods_[] = {
      DECLARE_METHOD(t_RuntimeException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_RuntimeException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(RuntimeException)[] = {
      { Py_tp_methods, t_RuntimeException__methods_ },
      { Py_tp_init, (void *) t_RuntimeException_init_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(RuntimeException)[] = {
      &PY_TYPE_DEF(::java::lang::Exception),
      NULL
    };

    DEFINE_TYPE(RuntimeException, t_RuntimeException, RuntimeException);

    void t_RuntimeException::install(PyObject *module)
    {
      installType(&PY_TYPE(RuntimeException), &PY_TYPE_DEF(RuntimeException), module, "RuntimeException", 0);
    }

    void t_RuntimeException::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(RuntimeException), "class_", make_descriptor(RuntimeException::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(RuntimeException), "wrapfn_", make_descriptor(t_RuntimeException::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(RuntimeException), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_RuntimeException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, RuntimeException::initializeClass, 1)))
        return NULL;
      return t_RuntimeException::wrap_Object(RuntimeException(((t_RuntimeException *) arg)->object.this$));
    }
    static PyObject *t_RuntimeException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, RuntimeException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_RuntimeException_init_(t_RuntimeException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          RuntimeException object((jobject) NULL);

          INT_CALL(object = RuntimeException());
          self->object = object;
          break;
        }
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          RuntimeException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = RuntimeException(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::Throwable a0((jobject) NULL);
          RuntimeException object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = RuntimeException(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          RuntimeException object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = RuntimeException(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/GroupReducer.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorable.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Collector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *GroupReducer::class$ = NULL;
          jmethodID *GroupReducer::mids$ = NULL;
          bool GroupReducer::live$ = false;

          jclass GroupReducer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/GroupReducer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_collect_7290374200b677dd] = env->getMethodID(cls, "collect", "(Ljava/lang/Object;I)V");
              mids$[mid_getCollector_2d94a26e18c3a6e4] = env->getMethodID(cls, "getCollector", "(Ljava/lang/Object;)Lorg/apache/lucene/search/Collector;");
              mids$[mid_needsScores_8454bd5aa23fd11e] = env->getMethodID(cls, "needsScores", "()Z");
              mids$[mid_setGroups_50bc3ddc62a19f2d] = env->getMethodID(cls, "setGroups", "(Ljava/util/Collection;)V");
              mids$[mid_setNextReader_8747e0e89febf88d] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/LeafReaderContext;)V");
              mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");
              mids$[mid_newCollector_3c6c359421e4bebc] = env->getMethodID(cls, "newCollector", "()Lorg/apache/lucene/search/Collector;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GroupReducer::GroupReducer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void GroupReducer::collect(const ::java::lang::Object & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_7290374200b677dd], a0.this$, a1);
          }

          ::org::apache::lucene::search::Collector GroupReducer::getCollector(const ::java::lang::Object & a0) const
          {
            return ::org::apache::lucene::search::Collector(env->callObjectMethod(this$, mids$[mid_getCollector_2d94a26e18c3a6e4], a0.this$));
          }

          jboolean GroupReducer::needsScores() const
          {
            return env->callBooleanMethod(this$, mids$[mid_needsScores_8454bd5aa23fd11e]);
          }

          void GroupReducer::setGroups(const ::java::util::Collection & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setGroups_50bc3ddc62a19f2d], a0.this$);
          }

          void GroupReducer::setNextReader(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_8747e0e89febf88d], a0.this$);
          }

          void GroupReducer::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_GroupReducer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupReducer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupReducer_of_(t_GroupReducer *self, PyObject *args);
          static int t_GroupReducer_init_(t_GroupReducer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GroupReducer_collect(t_GroupReducer *self, PyObject *args);
          static PyObject *t_GroupReducer_getCollector(t_GroupReducer *self, PyObject *arg);
          static PyObject *t_GroupReducer_needsScores(t_GroupReducer *self);
          static PyObject *t_GroupReducer_setGroups(t_GroupReducer *self, PyObject *arg);
          static PyObject *t_GroupReducer_setNextReader(t_GroupReducer *self, PyObject *arg);
          static PyObject *t_GroupReducer_setScorer(t_GroupReducer *self, PyObject *arg);
          static int t_GroupReducer_set__groups(t_GroupReducer *self, PyObject *arg, void *data);
          static int t_GroupReducer_set__nextReader(t_GroupReducer *self, PyObject *arg, void *data);
          static int t_GroupReducer_set__scorer(t_GroupReducer *self, PyObject *arg, void *data);
          static PyObject *t_GroupReducer_get__parameters_(t_GroupReducer *self, void *data);
          static PyGetSetDef t_GroupReducer__fields_[] = {
            DECLARE_SET_FIELD(t_GroupReducer, groups),
            DECLARE_SET_FIELD(t_GroupReducer, nextReader),
            DECLARE_SET_FIELD(t_GroupReducer, scorer),
            DECLARE_GET_FIELD(t_GroupReducer, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GroupReducer__methods_[] = {
            DECLARE_METHOD(t_GroupReducer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupReducer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupReducer, of_, METH_VARARGS),
            DECLARE_METHOD(t_GroupReducer, collect, METH_VARARGS),
            DECLARE_METHOD(t_GroupReducer, getCollector, METH_O),
            DECLARE_METHOD(t_GroupReducer, needsScores, METH_NOARGS),
            DECLARE_METHOD(t_GroupReducer, setGroups, METH_O),
            DECLARE_METHOD(t_GroupReducer, setNextReader, METH_O),
            DECLARE_METHOD(t_GroupReducer, setScorer, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GroupReducer)[] = {
            { Py_tp_methods, t_GroupReducer__methods_ },
            { Py_tp_init, (void *) t_GroupReducer_init_ },
            { Py_tp_getset, t_GroupReducer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GroupReducer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GroupReducer, t_GroupReducer, GroupReducer);
          PyObject *t_GroupReducer::wrap_Object(const GroupReducer& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_GroupReducer::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GroupReducer *self = (t_GroupReducer *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_GroupReducer::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_GroupReducer::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GroupReducer *self = (t_GroupReducer *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_GroupReducer::install(PyObject *module)
          {
            installType(&PY_TYPE(GroupReducer), &PY_TYPE_DEF(GroupReducer), module, "GroupReducer", 0);
          }

          void t_GroupReducer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupReducer), "class_", make_descriptor(GroupReducer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupReducer), "wrapfn_", make_descriptor(t_GroupReducer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupReducer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GroupReducer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GroupReducer::initializeClass, 1)))
              return NULL;
            return t_GroupReducer::wrap_Object(GroupReducer(((t_GroupReducer *) arg)->object.this$));
          }
          static PyObject *t_GroupReducer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GroupReducer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GroupReducer_of_(t_GroupReducer *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_GroupReducer_init_(t_GroupReducer *self, PyObject *args, PyObject *kwds)
          {
            GroupReducer object((jobject) NULL);

            INT_CALL(object = GroupReducer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GroupReducer_collect(t_GroupReducer *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "OI", self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(self->object.collect(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "collect", args);
            return NULL;
          }

          static PyObject *t_GroupReducer_getCollector(t_GroupReducer *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::search::Collector result((jobject) NULL);

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
              OBJ_CALL(result = self->object.getCollector(a0));
              return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::org::apache::lucene::search::t_Collector::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getCollector", arg);
            return NULL;
          }

          static PyObject *t_GroupReducer_needsScores(t_GroupReducer *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.needsScores());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_GroupReducer_setGroups(t_GroupReducer *self, PyObject *arg)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(self->object.setGroups(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setGroups", arg);
            return NULL;
          }

          static PyObject *t_GroupReducer_setNextReader(t_GroupReducer *self, PyObject *arg)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setNextReader", arg);
            return NULL;
          }

          static PyObject *t_GroupReducer_setScorer(t_GroupReducer *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Scorable a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setScorer", arg);
            return NULL;
          }
          static PyObject *t_GroupReducer_get__parameters_(t_GroupReducer *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_GroupReducer_set__groups(t_GroupReducer *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Collection value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Collection::initializeClass, &value))
              {
                INT_CALL(self->object.setGroups(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "groups", arg);
            return -1;
          }

          static int t_GroupReducer_set__nextReader(t_GroupReducer *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::LeafReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_GroupReducer_set__scorer(t_GroupReducer *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorable value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/Bindings.h"
#include "org/apache/lucene/search/DoubleValuesSource.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {

        ::java::lang::Class *Bindings::class$ = NULL;
        jmethodID *Bindings::mids$ = NULL;
        bool Bindings::live$ = false;

        jclass Bindings::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/Bindings");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getDoubleValuesSource_ff23b83f44e75cdf] = env->getMethodID(cls, "getDoubleValuesSource", "(Ljava/lang/String;)Lorg/apache/lucene/search/DoubleValuesSource;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::DoubleValuesSource Bindings::getDoubleValuesSource(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::search::DoubleValuesSource(env->callObjectMethod(this$, mids$[mid_getDoubleValuesSource_ff23b83f44e75cdf], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        static PyObject *t_Bindings_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bindings_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bindings_getDoubleValuesSource(t_Bindings *self, PyObject *arg);

        static PyMethodDef t_Bindings__methods_[] = {
          DECLARE_METHOD(t_Bindings, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bindings, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bindings, getDoubleValuesSource, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Bindings)[] = {
          { Py_tp_methods, t_Bindings__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Bindings)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Bindings, t_Bindings, Bindings);

        void t_Bindings::install(PyObject *module)
        {
          installType(&PY_TYPE(Bindings), &PY_TYPE_DEF(Bindings), module, "Bindings", 0);
        }

        void t_Bindings::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Bindings), "class_", make_descriptor(Bindings::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Bindings), "wrapfn_", make_descriptor(t_Bindings::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Bindings), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Bindings_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Bindings::initializeClass, 1)))
            return NULL;
          return t_Bindings::wrap_Object(Bindings(((t_Bindings *) arg)->object.this$));
        }
        static PyObject *t_Bindings_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Bindings::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Bindings_getDoubleValuesSource(t_Bindings *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::search::DoubleValuesSource result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDoubleValuesSource(a0));
            return ::org::apache::lucene::search::t_DoubleValuesSource::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDoubleValuesSource", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/classification/document/DocumentClassifier.h"
#include "org/apache/lucene/classification/ClassificationResult.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/document/Document.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        namespace document {

          ::java::lang::Class *DocumentClassifier::class$ = NULL;
          jmethodID *DocumentClassifier::mids$ = NULL;
          bool DocumentClassifier::live$ = false;

          jclass DocumentClassifier::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/classification/document/DocumentClassifier");

              mids$ = new jmethodID[max_mid];
              mids$[mid_assignClass_7ffc5762e9e5efc8] = env->getMethodID(cls, "assignClass", "(Lorg/apache/lucene/document/Document;)Lorg/apache/lucene/classification/ClassificationResult;");
              mids$[mid_getClasses_f88498c88ae02b70] = env->getMethodID(cls, "getClasses", "(Lorg/apache/lucene/document/Document;)Ljava/util/List;");
              mids$[mid_getClasses_3c35cce6258f355e] = env->getMethodID(cls, "getClasses", "(Lorg/apache/lucene/document/Document;I)Ljava/util/List;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::classification::ClassificationResult DocumentClassifier::assignClass(const ::org::apache::lucene::document::Document & a0) const
          {
            return ::org::apache::lucene::classification::ClassificationResult(env->callObjectMethod(this$, mids$[mid_assignClass_7ffc5762e9e5efc8], a0.this$));
          }

          ::java::util::List DocumentClassifier::getClasses(const ::org::apache::lucene::document::Document & a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getClasses_f88498c88ae02b70], a0.this$));
          }

          ::java::util::List DocumentClassifier::getClasses(const ::org::apache::lucene::document::Document & a0, jint a1) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getClasses_3c35cce6258f355e], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        namespace document {
          static PyObject *t_DocumentClassifier_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocumentClassifier_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocumentClassifier_of_(t_DocumentClassifier *self, PyObject *args);
          static PyObject *t_DocumentClassifier_assignClass(t_DocumentClassifier *self, PyObject *arg);
          static PyObject *t_DocumentClassifier_getClasses(t_DocumentClassifier *self, PyObject *args);
          static PyObject *t_DocumentClassifier_get__parameters_(t_DocumentClassifier *self, void *data);
          static PyGetSetDef t_DocumentClassifier__fields_[] = {
            DECLARE_GET_FIELD(t_DocumentClassifier, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DocumentClassifier__methods_[] = {
            DECLARE_METHOD(t_DocumentClassifier, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentClassifier, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentClassifier, of_, METH_VARARGS),
            DECLARE_METHOD(t_DocumentClassifier, assignClass, METH_O),
            DECLARE_METHOD(t_DocumentClassifier, getClasses, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DocumentClassifier)[] = {
            { Py_tp_methods, t_DocumentClassifier__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_DocumentClassifier__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DocumentClassifier)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(DocumentClassifier, t_DocumentClassifier, DocumentClassifier);
          PyObject *t_DocumentClassifier::wrap_Object(const DocumentClassifier& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DocumentClassifier::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DocumentClassifier *self = (t_DocumentClassifier *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_DocumentClassifier::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DocumentClassifier::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DocumentClassifier *self = (t_DocumentClassifier *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_DocumentClassifier::install(PyObject *module)
          {
            installType(&PY_TYPE(DocumentClassifier), &PY_TYPE_DEF(DocumentClassifier), module, "DocumentClassifier", 0);
          }

          void t_DocumentClassifier::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DocumentClassifier), "class_", make_descriptor(DocumentClassifier::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DocumentClassifier), "wrapfn_", make_descriptor(t_DocumentClassifier::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DocumentClassifier), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DocumentClassifier_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DocumentClassifier::initializeClass, 1)))
              return NULL;
            return t_DocumentClassifier::wrap_Object(DocumentClassifier(((t_DocumentClassifier *) arg)->object.this$));
          }
          static PyObject *t_DocumentClassifier_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DocumentClassifier::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DocumentClassifier_of_(t_DocumentClassifier *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_DocumentClassifier_assignClass(t_DocumentClassifier *self, PyObject *arg)
          {
            ::org::apache::lucene::document::Document a0((jobject) NULL);
            ::org::apache::lucene::classification::ClassificationResult result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::document::Document::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.assignClass(a0));
              return ::org::apache::lucene::classification::t_ClassificationResult::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "assignClass", arg);
            return NULL;
          }

          static PyObject *t_DocumentClassifier_getClasses(t_DocumentClassifier *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::document::Document a0((jobject) NULL);
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::document::Document::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.getClasses(a0));
                  return ::java::util::t_List::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::document::Document a0((jobject) NULL);
                jint a1;
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::document::Document::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getClasses(a0, a1));
                  return ::java::util::t_List::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getClasses", args);
            return NULL;
          }
          static PyObject *t_DocumentClassifier_get__parameters_(t_DocumentClassifier *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/DistributionLL.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *DistributionLL::class$ = NULL;
          jmethodID *DistributionLL::mids$ = NULL;
          bool DistributionLL::live$ = false;

          jclass DistributionLL::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/DistributionLL");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_761ab1c432346fd0] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DistributionLL::DistributionLL() : ::org::apache::lucene::search::similarities::Distribution(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jdouble DistributionLL::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_score_761ab1c432346fd0], a0.this$, a1, a2);
          }

          ::java::lang::String DistributionLL::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_DistributionLL_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DistributionLL_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DistributionLL_init_(t_DistributionLL *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DistributionLL_score(t_DistributionLL *self, PyObject *args);
          static PyObject *t_DistributionLL_toString(t_DistributionLL *self, PyObject *args);

          static PyMethodDef t_DistributionLL__methods_[] = {
            DECLARE_METHOD(t_DistributionLL, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistributionLL, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistributionLL, score, METH_VARARGS),
            DECLARE_METHOD(t_DistributionLL, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DistributionLL)[] = {
            { Py_tp_methods, t_DistributionLL__methods_ },
            { Py_tp_init, (void *) t_DistributionLL_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DistributionLL)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Distribution),
            NULL
          };

          DEFINE_TYPE(DistributionLL, t_DistributionLL, DistributionLL);

          void t_DistributionLL::install(PyObject *module)
          {
            installType(&PY_TYPE(DistributionLL), &PY_TYPE_DEF(DistributionLL), module, "DistributionLL", 0);
          }

          void t_DistributionLL::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DistributionLL), "class_", make_descriptor(DistributionLL::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DistributionLL), "wrapfn_", make_descriptor(t_DistributionLL::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DistributionLL), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DistributionLL_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DistributionLL::initializeClass, 1)))
              return NULL;
            return t_DistributionLL::wrap_Object(DistributionLL(((t_DistributionLL *) arg)->object.this$));
          }
          static PyObject *t_DistributionLL_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DistributionLL::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DistributionLL_init_(t_DistributionLL *self, PyObject *args, PyObject *kwds)
          {
            DistributionLL object((jobject) NULL);

            INT_CALL(object = DistributionLL());
            self->object = object;

            return 0;
          }

          static PyObject *t_DistributionLL_score(t_DistributionLL *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            jdouble result;

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.score(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(DistributionLL), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_DistributionLL_toString(t_DistributionLL *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(DistributionLL), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/QueryRescorer.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *QueryRescorer::class$ = NULL;
        jmethodID *QueryRescorer::mids$ = NULL;
        bool QueryRescorer::live$ = false;

        jclass QueryRescorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/QueryRescorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ede25bb9d48237ac] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_explain_57f4be869b47d9c5] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Explanation;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_rescore_41c4bd8204dbae81] = env->getMethodID(cls, "rescore", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_rescore_6927e19024ac020c] = env->getStaticMethodID(cls, "rescore", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;Lorg/apache/lucene/search/Query;DI)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_combine_8b8005792ed8e10d] = env->getMethodID(cls, "combine", "(FZF)F");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        QueryRescorer::QueryRescorer(const ::org::apache::lucene::search::Query & a0) : ::org::apache::lucene::search::Rescorer(env->newObject(initializeClass, &mids$, mid_init$_ede25bb9d48237ac, a0.this$)) {}

        ::org::apache::lucene::search::Explanation QueryRescorer::explain(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Explanation & a1, jint a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_57f4be869b47d9c5], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs QueryRescorer::rescore(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::TopDocs & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_rescore_41c4bd8204dbae81], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs QueryRescorer::rescore(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::TopDocs & a1, const ::org::apache::lucene::search::Query & a2, jdouble a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_rescore_6927e19024ac020c], a0.this$, a1.this$, a2.this$, a3, a4));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_QueryRescorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryRescorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_QueryRescorer_init_(t_QueryRescorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_QueryRescorer_explain(t_QueryRescorer *self, PyObject *args);
        static PyObject *t_QueryRescorer_rescore(t_QueryRescorer *self, PyObject *args);
        static PyObject *t_QueryRescorer_rescore_(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_QueryRescorer__methods_[] = {
          DECLARE_METHOD(t_QueryRescorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryRescorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryRescorer, explain, METH_VARARGS),
          DECLARE_METHOD(t_QueryRescorer, rescore, METH_VARARGS),
          DECLARE_METHOD(t_QueryRescorer, rescore_, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(QueryRescorer)[] = {
          { Py_tp_methods, t_QueryRescorer__methods_ },
          { Py_tp_init, (void *) t_QueryRescorer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(QueryRescorer)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Rescorer),
          NULL
        };

        DEFINE_TYPE(QueryRescorer, t_QueryRescorer, QueryRescorer);

        void t_QueryRescorer::install(PyObject *module)
        {
          installType(&PY_TYPE(QueryRescorer), &PY_TYPE_DEF(QueryRescorer), module, "QueryRescorer", 0);
        }

        void t_QueryRescorer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryRescorer), "class_", make_descriptor(QueryRescorer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryRescorer), "wrapfn_", make_descriptor(t_QueryRescorer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryRescorer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_QueryRescorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, QueryRescorer::initializeClass, 1)))
            return NULL;
          return t_QueryRescorer::wrap_Object(QueryRescorer(((t_QueryRescorer *) arg)->object.this$));
        }
        static PyObject *t_QueryRescorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, QueryRescorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_QueryRescorer_init_(t_QueryRescorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          QueryRescorer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            INT_CALL(object = QueryRescorer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_QueryRescorer_explain(t_QueryRescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Explanation a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.explain(a0, a1, a2));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          return callSuper(PY_TYPE(QueryRescorer), (PyObject *) self, "explain", args, 2);
        }

        static PyObject *t_QueryRescorer_rescore(t_QueryRescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.rescore(a0, a1, a2));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          return callSuper(PY_TYPE(QueryRescorer), (PyObject *) self, "rescore", args, 2);
        }

        static PyObject *t_QueryRescorer_rescore_(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          ::org::apache::lucene::search::Query a2((jobject) NULL);
          jdouble a3;
          jint a4;
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkkDI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::QueryRescorer::rescore(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "rescore_", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/intervals/IntervalMatchesIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace intervals {

          ::java::lang::Class *IntervalMatchesIterator::class$ = NULL;
          jmethodID *IntervalMatchesIterator::mids$ = NULL;
          bool IntervalMatchesIterator::live$ = false;

          jclass IntervalMatchesIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/intervals/IntervalMatchesIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_gaps_9972fcc56b44e79d] = env->getMethodID(cls, "gaps", "()I");
              mids$[mid_width_9972fcc56b44e79d] = env->getMethodID(cls, "width", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint IntervalMatchesIterator::gaps() const
          {
            return env->callIntMethod(this$, mids$[mid_gaps_9972fcc56b44e79d]);
          }

          jint IntervalMatchesIterator::width() const
          {
            return env->callIntMethod(this$, mids$[mid_width_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace intervals {
          static PyObject *t_IntervalMatchesIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntervalMatchesIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntervalMatchesIterator_gaps(t_IntervalMatchesIterator *self);
          static PyObject *t_IntervalMatchesIterator_width(t_IntervalMatchesIterator *self);

          static PyMethodDef t_IntervalMatchesIterator__methods_[] = {
            DECLARE_METHOD(t_IntervalMatchesIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntervalMatchesIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntervalMatchesIterator, gaps, METH_NOARGS),
            DECLARE_METHOD(t_IntervalMatchesIterator, width, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IntervalMatchesIterator)[] = {
            { Py_tp_methods, t_IntervalMatchesIterator__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IntervalMatchesIterator)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::MatchesIterator),
            NULL
          };

          DEFINE_TYPE(IntervalMatchesIterator, t_IntervalMatchesIterator, IntervalMatchesIterator);

          void t_IntervalMatchesIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(IntervalMatchesIterator), &PY_TYPE_DEF(IntervalMatchesIterator), module, "IntervalMatchesIterator", 0);
          }

          void t_IntervalMatchesIterator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntervalMatchesIterator), "class_", make_descriptor(IntervalMatchesIterator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntervalMatchesIterator), "wrapfn_", make_descriptor(t_IntervalMatchesIterator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntervalMatchesIterator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntervalMatchesIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntervalMatchesIterator::initializeClass, 1)))
              return NULL;
            return t_IntervalMatchesIterator::wrap_Object(IntervalMatchesIterator(((t_IntervalMatchesIterator *) arg)->object.this$));
          }
          static PyObject *t_IntervalMatchesIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntervalMatchesIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntervalMatchesIterator_gaps(t_IntervalMatchesIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.gaps());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_IntervalMatchesIterator_width(t_IntervalMatchesIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.width());
            return PyLong_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/Circle.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *Circle::class$ = NULL;
        jmethodID *Circle::mids$ = NULL;
        bool Circle::live$ = false;

        jclass Circle::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/Circle");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2a4b7af5c9ed138c] = env->getMethodID(cls, "<init>", "(DDD)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getLat_8c74b787998ce4bc] = env->getMethodID(cls, "getLat", "()D");
            mids$[mid_getLon_8c74b787998ce4bc] = env->getMethodID(cls, "getLon", "()D");
            mids$[mid_getRadius_8c74b787998ce4bc] = env->getMethodID(cls, "getRadius", "()D");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toComponent2D_6fe8ae19c34b6817] = env->getMethodID(cls, "toComponent2D", "()Lorg/apache/lucene/geo/Component2D;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Circle::Circle(jdouble a0, jdouble a1, jdouble a2) : ::org::apache::lucene::geo::LatLonGeometry(env->newObject(initializeClass, &mids$, mid_init$_2a4b7af5c9ed138c, a0, a1, a2)) {}

        jboolean Circle::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jdouble Circle::getLat() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getLat_8c74b787998ce4bc]);
        }

        jdouble Circle::getLon() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getLon_8c74b787998ce4bc]);
        }

        jdouble Circle::getRadius() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getRadius_8c74b787998ce4bc]);
        }

        jint Circle::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String Circle::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_Circle_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Circle_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Circle_init_(t_Circle *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Circle_equals(t_Circle *self, PyObject *args);
        static PyObject *t_Circle_getLat(t_Circle *self);
        static PyObject *t_Circle_getLon(t_Circle *self);
        static PyObject *t_Circle_getRadius(t_Circle *self);
        static PyObject *t_Circle_hashCode(t_Circle *self, PyObject *args);
        static PyObject *t_Circle_toString(t_Circle *self, PyObject *args);
        static PyObject *t_Circle_get__lat(t_Circle *self, void *data);
        static PyObject *t_Circle_get__lon(t_Circle *self, void *data);
        static PyObject *t_Circle_get__radius(t_Circle *self, void *data);
        static PyGetSetDef t_Circle__fields_[] = {
          DECLARE_GET_FIELD(t_Circle, lat),
          DECLARE_GET_FIELD(t_Circle, lon),
          DECLARE_GET_FIELD(t_Circle, radius),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Circle__methods_[] = {
          DECLARE_METHOD(t_Circle, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Circle, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Circle, equals, METH_VARARGS),
          DECLARE_METHOD(t_Circle, getLat, METH_NOARGS),
          DECLARE_METHOD(t_Circle, getLon, METH_NOARGS),
          DECLARE_METHOD(t_Circle, getRadius, METH_NOARGS),
          DECLARE_METHOD(t_Circle, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Circle, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Circle)[] = {
          { Py_tp_methods, t_Circle__methods_ },
          { Py_tp_init, (void *) t_Circle_init_ },
          { Py_tp_getset, t_Circle__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Circle)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::geo::LatLonGeometry),
          NULL
        };

        DEFINE_TYPE(Circle, t_Circle, Circle);

        void t_Circle::install(PyObject *module)
        {
          installType(&PY_TYPE(Circle), &PY_TYPE_DEF(Circle), module, "Circle", 0);
        }

        void t_Circle::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Circle), "class_", make_descriptor(Circle::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Circle), "wrapfn_", make_descriptor(t_Circle::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Circle), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Circle_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Circle::initializeClass, 1)))
            return NULL;
          return t_Circle::wrap_Object(Circle(((t_Circle *) arg)->object.this$));
        }
        static PyObject *t_Circle_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Circle::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Circle_init_(t_Circle *self, PyObject *args, PyObject *kwds)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          Circle object((jobject) NULL);

          if (!parseArgs(args, "DDD", &a0, &a1, &a2))
          {
            INT_CALL(object = Circle(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Circle_equals(t_Circle *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(Circle), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Circle_getLat(t_Circle *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getLat());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Circle_getLon(t_Circle *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getLon());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Circle_getRadius(t_Circle *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getRadius());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Circle_hashCode(t_Circle *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(Circle), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Circle_toString(t_Circle *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(Circle), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Circle_get__lat(t_Circle *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getLat());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_Circle_get__lon(t_Circle *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getLon());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_Circle_get__radius(t_Circle *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getRadius());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/standard/ClassicTokenizer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicTokenizerFactory::class$ = NULL;
          jmethodID *ClassicTokenizerFactory::mids$ = NULL;
          bool ClassicTokenizerFactory::live$ = false;
          ::java::lang::String *ClassicTokenizerFactory::NAME = NULL;

          jclass ClassicTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_fa8cc467004411a0] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;)Lorg/apache/lucene/analysis/standard/ClassicTokenizer;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicTokenizerFactory::ClassicTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::standard::ClassicTokenizer ClassicTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0) const
          {
            return ::org::apache::lucene::analysis::standard::ClassicTokenizer(env->callObjectMethod(this$, mids$[mid_create_fa8cc467004411a0], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicTokenizerFactory_init_(t_ClassicTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicTokenizerFactory_create(t_ClassicTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_ClassicTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_ClassicTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ClassicTokenizerFactory)[] = {
            { Py_tp_methods, t_ClassicTokenizerFactory__methods_ },
            { Py_tp_init, (void *) t_ClassicTokenizerFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ClassicTokenizerFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenizerFactory),
            NULL
          };

          DEFINE_TYPE(ClassicTokenizerFactory, t_ClassicTokenizerFactory, ClassicTokenizerFactory);

          void t_ClassicTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicTokenizerFactory), &PY_TYPE_DEF(ClassicTokenizerFactory), module, "ClassicTokenizerFactory", 0);
          }

          void t_ClassicTokenizerFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicTokenizerFactory), "class_", make_descriptor(ClassicTokenizerFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicTokenizerFactory), "wrapfn_", make_descriptor(t_ClassicTokenizerFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicTokenizerFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(ClassicTokenizerFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicTokenizerFactory), "NAME", make_descriptor(j2p(*ClassicTokenizerFactory::NAME)));
          }

          static PyObject *t_ClassicTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_ClassicTokenizerFactory::wrap_Object(ClassicTokenizerFactory(((t_ClassicTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_ClassicTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicTokenizerFactory_init_(t_ClassicTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ClassicTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ClassicTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicTokenizerFactory_create(t_ClassicTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::org::apache::lucene::analysis::standard::ClassicTokenizer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::standard::t_ClassicTokenizer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ClassicTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/FSTDictionary$Builder.h"
#include "org/apache/lucene/codecs/uniformsplit/IndexDictionary$Builder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/uniformsplit/FSTDictionary.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *FSTDictionary$Builder::class$ = NULL;
          jmethodID *FSTDictionary$Builder::mids$ = NULL;
          bool FSTDictionary$Builder::live$ = false;

          jclass FSTDictionary$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/FSTDictionary$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_add_c61df66683b6c9c2] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;J)V");
              mids$[mid_build_3e292abbe69bc54a] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/codecs/uniformsplit/FSTDictionary;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FSTDictionary$Builder::FSTDictionary$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void FSTDictionary$Builder::add(const ::org::apache::lucene::util::BytesRef & a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_add_c61df66683b6c9c2], a0.this$, a1);
          }

          ::org::apache::lucene::codecs::uniformsplit::FSTDictionary FSTDictionary$Builder::build() const
          {
            return ::org::apache::lucene::codecs::uniformsplit::FSTDictionary(env->callObjectMethod(this$, mids$[mid_build_3e292abbe69bc54a]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_FSTDictionary$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FSTDictionary$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FSTDictionary$Builder_init_(t_FSTDictionary$Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FSTDictionary$Builder_add(t_FSTDictionary$Builder *self, PyObject *args);
          static PyObject *t_FSTDictionary$Builder_build(t_FSTDictionary$Builder *self);

          static PyMethodDef t_FSTDictionary$Builder__methods_[] = {
            DECLARE_METHOD(t_FSTDictionary$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTDictionary$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTDictionary$Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_FSTDictionary$Builder, build, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FSTDictionary$Builder)[] = {
            { Py_tp_methods, t_FSTDictionary$Builder__methods_ },
            { Py_tp_init, (void *) t_FSTDictionary$Builder_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FSTDictionary$Builder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FSTDictionary$Builder, t_FSTDictionary$Builder, FSTDictionary$Builder);

          void t_FSTDictionary$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(FSTDictionary$Builder), &PY_TYPE_DEF(FSTDictionary$Builder), module, "FSTDictionary$Builder", 0);
          }

          void t_FSTDictionary$Builder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTDictionary$Builder), "class_", make_descriptor(FSTDictionary$Builder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTDictionary$Builder), "wrapfn_", make_descriptor(t_FSTDictionary$Builder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTDictionary$Builder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FSTDictionary$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FSTDictionary$Builder::initializeClass, 1)))
              return NULL;
            return t_FSTDictionary$Builder::wrap_Object(FSTDictionary$Builder(((t_FSTDictionary$Builder *) arg)->object.this$));
          }
          static PyObject *t_FSTDictionary$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FSTDictionary$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FSTDictionary$Builder_init_(t_FSTDictionary$Builder *self, PyObject *args, PyObject *kwds)
          {
            FSTDictionary$Builder object((jobject) NULL);

            INT_CALL(object = FSTDictionary$Builder());
            self->object = object;

            return 0;
          }

          static PyObject *t_FSTDictionary$Builder_add(t_FSTDictionary$Builder *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jlong a1;

            if (!parseArgs(args, "kJ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.add(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_FSTDictionary$Builder_build(t_FSTDictionary$Builder *self)
          {
            ::org::apache::lucene::codecs::uniformsplit::FSTDictionary result((jobject) NULL);
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::codecs::uniformsplit::t_FSTDictionary::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CompositeReaderContext.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/CompositeReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CompositeReaderContext::class$ = NULL;
        jmethodID *CompositeReaderContext::mids$ = NULL;
        bool CompositeReaderContext::live$ = false;

        jclass CompositeReaderContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CompositeReaderContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_children_49ec78390f08338a] = env->getMethodID(cls, "children", "()Ljava/util/List;");
            mids$[mid_leaves_49ec78390f08338a] = env->getMethodID(cls, "leaves", "()Ljava/util/List;");
            mids$[mid_reader_a7183b90f90f645f] = env->getMethodID(cls, "reader", "()Lorg/apache/lucene/index/CompositeReader;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List CompositeReaderContext::children() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_children_49ec78390f08338a]));
        }

        ::java::util::List CompositeReaderContext::leaves() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_leaves_49ec78390f08338a]));
        }

        ::org::apache::lucene::index::CompositeReader CompositeReaderContext::reader() const
        {
          return ::org::apache::lucene::index::CompositeReader(env->callObjectMethod(this$, mids$[mid_reader_a7183b90f90f645f]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CompositeReaderContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompositeReaderContext_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompositeReaderContext_children(t_CompositeReaderContext *self, PyObject *args);
        static PyObject *t_CompositeReaderContext_leaves(t_CompositeReaderContext *self, PyObject *args);
        static PyObject *t_CompositeReaderContext_reader(t_CompositeReaderContext *self, PyObject *args);

        static PyMethodDef t_CompositeReaderContext__methods_[] = {
          DECLARE_METHOD(t_CompositeReaderContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompositeReaderContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompositeReaderContext, children, METH_VARARGS),
          DECLARE_METHOD(t_CompositeReaderContext, leaves, METH_VARARGS),
          DECLARE_METHOD(t_CompositeReaderContext, reader, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CompositeReaderContext)[] = {
          { Py_tp_methods, t_CompositeReaderContext__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CompositeReaderContext)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::IndexReaderContext),
          NULL
        };

        DEFINE_TYPE(CompositeReaderContext, t_CompositeReaderContext, CompositeReaderContext);

        void t_CompositeReaderContext::install(PyObject *module)
        {
          installType(&PY_TYPE(CompositeReaderContext), &PY_TYPE_DEF(CompositeReaderContext), module, "CompositeReaderContext", 0);
        }

        void t_CompositeReaderContext::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CompositeReaderContext), "class_", make_descriptor(CompositeReaderContext::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CompositeReaderContext), "wrapfn_", make_descriptor(t_CompositeReaderContext::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CompositeReaderContext), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompositeReaderContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompositeReaderContext::initializeClass, 1)))
            return NULL;
          return t_CompositeReaderContext::wrap_Object(CompositeReaderContext(((t_CompositeReaderContext *) arg)->object.this$));
        }
        static PyObject *t_CompositeReaderContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompositeReaderContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CompositeReaderContext_children(t_CompositeReaderContext *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.children());
            return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(IndexReaderContext));
          }

          return callSuper(PY_TYPE(CompositeReaderContext), (PyObject *) self, "children", args, 2);
        }

        static PyObject *t_CompositeReaderContext_leaves(t_CompositeReaderContext *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.leaves());
            return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(LeafReaderContext));
          }

          return callSuper(PY_TYPE(CompositeReaderContext), (PyObject *) self, "leaves", args, 2);
        }

        static PyObject *t_CompositeReaderContext_reader(t_CompositeReaderContext *self, PyObject *args)
        {
          ::org::apache::lucene::index::CompositeReader result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.reader());
            return ::org::apache::lucene::index::t_CompositeReader::wrap_Object(result);
          }

          return callSuper(PY_TYPE(CompositeReaderContext), (PyObject *) self, "reader", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SimpleSpanFragmenter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/highlight/QueryScorer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SimpleSpanFragmenter::class$ = NULL;
          jmethodID *SimpleSpanFragmenter::mids$ = NULL;
          bool SimpleSpanFragmenter::live$ = false;

          jclass SimpleSpanFragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SimpleSpanFragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_856425164711f893] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/QueryScorer;)V");
              mids$[mid_init$_88068c992b4d669e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/QueryScorer;I)V");
              mids$[mid_isNewFragment_8454bd5aa23fd11e] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_start_c5ab6d211d8d31bc] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleSpanFragmenter::SimpleSpanFragmenter(const ::org::apache::lucene::search::highlight::QueryScorer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_856425164711f893, a0.this$)) {}

          SimpleSpanFragmenter::SimpleSpanFragmenter(const ::org::apache::lucene::search::highlight::QueryScorer & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_88068c992b4d669e, a0.this$, a1)) {}

          jboolean SimpleSpanFragmenter::isNewFragment() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNewFragment_8454bd5aa23fd11e]);
          }

          void SimpleSpanFragmenter::start(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_start_c5ab6d211d8d31bc], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SimpleSpanFragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleSpanFragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleSpanFragmenter_init_(t_SimpleSpanFragmenter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleSpanFragmenter_isNewFragment(t_SimpleSpanFragmenter *self);
          static PyObject *t_SimpleSpanFragmenter_start(t_SimpleSpanFragmenter *self, PyObject *args);
          static PyObject *t_SimpleSpanFragmenter_get__newFragment(t_SimpleSpanFragmenter *self, void *data);
          static PyGetSetDef t_SimpleSpanFragmenter__fields_[] = {
            DECLARE_GET_FIELD(t_SimpleSpanFragmenter, newFragment),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SimpleSpanFragmenter__methods_[] = {
            DECLARE_METHOD(t_SimpleSpanFragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleSpanFragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleSpanFragmenter, isNewFragment, METH_NOARGS),
            DECLARE_METHOD(t_SimpleSpanFragmenter, start, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleSpanFragmenter)[] = {
            { Py_tp_methods, t_SimpleSpanFragmenter__methods_ },
            { Py_tp_init, (void *) t_SimpleSpanFragmenter_init_ },
            { Py_tp_getset, t_SimpleSpanFragmenter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleSpanFragmenter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SimpleSpanFragmenter, t_SimpleSpanFragmenter, SimpleSpanFragmenter);

          void t_SimpleSpanFragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleSpanFragmenter), &PY_TYPE_DEF(SimpleSpanFragmenter), module, "SimpleSpanFragmenter", 0);
          }

          void t_SimpleSpanFragmenter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleSpanFragmenter), "class_", make_descriptor(SimpleSpanFragmenter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleSpanFragmenter), "wrapfn_", make_descriptor(t_SimpleSpanFragmenter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleSpanFragmenter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleSpanFragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleSpanFragmenter::initializeClass, 1)))
              return NULL;
            return t_SimpleSpanFragmenter::wrap_Object(SimpleSpanFragmenter(((t_SimpleSpanFragmenter *) arg)->object.this$));
          }
          static PyObject *t_SimpleSpanFragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleSpanFragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleSpanFragmenter_init_(t_SimpleSpanFragmenter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::highlight::QueryScorer a0((jobject) NULL);
                SimpleSpanFragmenter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::highlight::QueryScorer::initializeClass, &a0))
                {
                  INT_CALL(object = SimpleSpanFragmenter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::highlight::QueryScorer a0((jobject) NULL);
                jint a1;
                SimpleSpanFragmenter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::search::highlight::QueryScorer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SimpleSpanFragmenter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleSpanFragmenter_isNewFragment(t_SimpleSpanFragmenter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isNewFragment());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SimpleSpanFragmenter_start(t_SimpleSpanFragmenter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.start(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "start", args);
            return NULL;
          }

          static PyObject *t_SimpleSpanFragmenter_get__newFragment(t_SimpleSpanFragmenter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isNewFragment());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {

          ::java::lang::Class *SimpleTextStoredFieldsFormat::class$ = NULL;
          jmethodID *SimpleTextStoredFieldsFormat::mids$ = NULL;
          bool SimpleTextStoredFieldsFormat::live$ = false;

          jclass SimpleTextStoredFieldsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsReader_a32861160154ecdb] = env->getMethodID(cls, "fieldsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsReader;");
              mids$[mid_fieldsWriter_e1dda5bd7531bf25] = env->getMethodID(cls, "fieldsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsWriter;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleTextStoredFieldsFormat::SimpleTextStoredFieldsFormat() : ::org::apache::lucene::codecs::StoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::StoredFieldsReader SimpleTextStoredFieldsFormat::fieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_fieldsReader_a32861160154ecdb], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::StoredFieldsWriter SimpleTextStoredFieldsFormat::fieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsWriter(env->callObjectMethod(this$, mids$[mid_fieldsWriter_e1dda5bd7531bf25], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {
          static PyObject *t_SimpleTextStoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleTextStoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleTextStoredFieldsFormat_init_(t_SimpleTextStoredFieldsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleTextStoredFieldsFormat_fieldsReader(t_SimpleTextStoredFieldsFormat *self, PyObject *args);
          static PyObject *t_SimpleTextStoredFieldsFormat_fieldsWriter(t_SimpleTextStoredFieldsFormat *self, PyObject *args);

          static PyMethodDef t_SimpleTextStoredFieldsFormat__methods_[] = {
            DECLARE_METHOD(t_SimpleTextStoredFieldsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextStoredFieldsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextStoredFieldsFormat, fieldsReader, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextStoredFieldsFormat, fieldsWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleTextStoredFieldsFormat)[] = {
            { Py_tp_methods, t_SimpleTextStoredFieldsFormat__methods_ },
            { Py_tp_init, (void *) t_SimpleTextStoredFieldsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleTextStoredFieldsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::StoredFieldsFormat),
            NULL
          };

          DEFINE_TYPE(SimpleTextStoredFieldsFormat, t_SimpleTextStoredFieldsFormat, SimpleTextStoredFieldsFormat);

          void t_SimpleTextStoredFieldsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleTextStoredFieldsFormat), &PY_TYPE_DEF(SimpleTextStoredFieldsFormat), module, "SimpleTextStoredFieldsFormat", 0);
          }

          void t_SimpleTextStoredFieldsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextStoredFieldsFormat), "class_", make_descriptor(SimpleTextStoredFieldsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextStoredFieldsFormat), "wrapfn_", make_descriptor(t_SimpleTextStoredFieldsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextStoredFieldsFormat), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleTextStoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleTextStoredFieldsFormat::initializeClass, 1)))
              return NULL;
            return t_SimpleTextStoredFieldsFormat::wrap_Object(SimpleTextStoredFieldsFormat(((t_SimpleTextStoredFieldsFormat *) arg)->object.this$));
          }
          static PyObject *t_SimpleTextStoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleTextStoredFieldsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleTextStoredFieldsFormat_init_(t_SimpleTextStoredFieldsFormat *self, PyObject *args, PyObject *kwds)
          {
            SimpleTextStoredFieldsFormat object((jobject) NULL);

            INT_CALL(object = SimpleTextStoredFieldsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_SimpleTextStoredFieldsFormat_fieldsReader(t_SimpleTextStoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.fieldsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextStoredFieldsFormat), (PyObject *) self, "fieldsReader", args, 2);
          }

          static PyObject *t_SimpleTextStoredFieldsFormat_fieldsWriter(t_SimpleTextStoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.fieldsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_StoredFieldsWriter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextStoredFieldsFormat), (PyObject *) self, "fieldsWriter", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoDistanceShape.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/spatial3d/geom/DistanceStyle.h"
#include "org/apache/lucene/spatial3d/geom/GeoDistance.h"
#include "org/apache/lucene/spatial3d/geom/Bounds.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoDistanceShape::class$ = NULL;
          jmethodID *GeoDistanceShape::mids$ = NULL;
          bool GeoDistanceShape::live$ = false;

          jclass GeoDistanceShape::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoDistanceShape");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getDistanceBounds_24291086d3fa4f8c] = env->getMethodID(cls, "getDistanceBounds", "(Lorg/apache/lucene/spatial3d/geom/Bounds;Lorg/apache/lucene/spatial3d/geom/DistanceStyle;D)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void GeoDistanceShape::getDistanceBounds(const ::org::apache::lucene::spatial3d::geom::Bounds & a0, const ::org::apache::lucene::spatial3d::geom::DistanceStyle & a1, jdouble a2) const
          {
            env->callVoidMethod(this$, mids$[mid_getDistanceBounds_24291086d3fa4f8c], a0.this$, a1.this$, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoDistanceShape_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoDistanceShape_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoDistanceShape_getDistanceBounds(t_GeoDistanceShape *self, PyObject *args);

          static PyMethodDef t_GeoDistanceShape__methods_[] = {
            DECLARE_METHOD(t_GeoDistanceShape, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoDistanceShape, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoDistanceShape, getDistanceBounds, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoDistanceShape)[] = {
            { Py_tp_methods, t_GeoDistanceShape__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoDistanceShape)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::GeoAreaShape),
            NULL
          };

          DEFINE_TYPE(GeoDistanceShape, t_GeoDistanceShape, GeoDistanceShape);

          void t_GeoDistanceShape::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoDistanceShape), &PY_TYPE_DEF(GeoDistanceShape), module, "GeoDistanceShape", 0);
          }

          void t_GeoDistanceShape::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoDistanceShape), "class_", make_descriptor(GeoDistanceShape::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoDistanceShape), "wrapfn_", make_descriptor(t_GeoDistanceShape::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoDistanceShape), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoDistanceShape_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoDistanceShape::initializeClass, 1)))
              return NULL;
            return t_GeoDistanceShape::wrap_Object(GeoDistanceShape(((t_GeoDistanceShape *) arg)->object.this$));
          }
          static PyObject *t_GeoDistanceShape_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoDistanceShape::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoDistanceShape_getDistanceBounds(t_GeoDistanceShape *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::Bounds a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::DistanceStyle a1((jobject) NULL);
            jdouble a2;

            if (!parseArgs(args, "kkD", ::org::apache::lucene::spatial3d::geom::Bounds::initializeClass, ::org::apache::lucene::spatial3d::geom::DistanceStyle::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.getDistanceBounds(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getDistanceBounds", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/WholeBreakIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *WholeBreakIterator::class$ = NULL;
          jmethodID *WholeBreakIterator::mids$ = NULL;
          bool WholeBreakIterator::live$ = false;

          jclass WholeBreakIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/WholeBreakIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_current_9972fcc56b44e79d] = env->getMethodID(cls, "current", "()I");
              mids$[mid_first_9972fcc56b44e79d] = env->getMethodID(cls, "first", "()I");
              mids$[mid_following_1e143afe1894d213] = env->getMethodID(cls, "following", "(I)I");
              mids$[mid_last_9972fcc56b44e79d] = env->getMethodID(cls, "last", "()I");
              mids$[mid_next_9972fcc56b44e79d] = env->getMethodID(cls, "next", "()I");
              mids$[mid_next_1e143afe1894d213] = env->getMethodID(cls, "next", "(I)I");
              mids$[mid_preceding_1e143afe1894d213] = env->getMethodID(cls, "preceding", "(I)I");
              mids$[mid_previous_9972fcc56b44e79d] = env->getMethodID(cls, "previous", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WholeBreakIterator::WholeBreakIterator() : ::java::text::BreakIterator(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint WholeBreakIterator::current() const
          {
            return env->callIntMethod(this$, mids$[mid_current_9972fcc56b44e79d]);
          }

          jint WholeBreakIterator::first() const
          {
            return env->callIntMethod(this$, mids$[mid_first_9972fcc56b44e79d]);
          }

          jint WholeBreakIterator::following(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_following_1e143afe1894d213], a0);
          }

          jint WholeBreakIterator::last() const
          {
            return env->callIntMethod(this$, mids$[mid_last_9972fcc56b44e79d]);
          }

          jint WholeBreakIterator::next() const
          {
            return env->callIntMethod(this$, mids$[mid_next_9972fcc56b44e79d]);
          }

          jint WholeBreakIterator::next(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_next_1e143afe1894d213], a0);
          }

          jint WholeBreakIterator::preceding(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_preceding_1e143afe1894d213], a0);
          }

          jint WholeBreakIterator::previous() const
          {
            return env->callIntMethod(this$, mids$[mid_previous_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_WholeBreakIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WholeBreakIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WholeBreakIterator_init_(t_WholeBreakIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WholeBreakIterator_current(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_first(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_following(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_last(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_next(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_preceding(t_WholeBreakIterator *self, PyObject *args);
          static PyObject *t_WholeBreakIterator_previous(t_WholeBreakIterator *self, PyObject *args);

          static PyMethodDef t_WholeBreakIterator__methods_[] = {
            DECLARE_METHOD(t_WholeBreakIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WholeBreakIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WholeBreakIterator, current, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, first, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, following, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, last, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, preceding, METH_VARARGS),
            DECLARE_METHOD(t_WholeBreakIterator, previous, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(WholeBreakIterator)[] = {
            { Py_tp_methods, t_WholeBreakIterator__methods_ },
            { Py_tp_init, (void *) t_WholeBreakIterator_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(WholeBreakIterator)[] = {
            &PY_TYPE_DEF(::java::text::BreakIterator),
            NULL
          };

          DEFINE_TYPE(WholeBreakIterator, t_WholeBreakIterator, WholeBreakIterator);

          void t_WholeBreakIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(WholeBreakIterator), &PY_TYPE_DEF(WholeBreakIterator), module, "WholeBreakIterator", 0);
          }

          void t_WholeBreakIterator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(WholeBreakIterator), "class_", make_descriptor(WholeBreakIterator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WholeBreakIterator), "wrapfn_", make_descriptor(t_WholeBreakIterator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WholeBreakIterator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WholeBreakIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WholeBreakIterator::initializeClass, 1)))
              return NULL;
            return t_WholeBreakIterator::wrap_Object(WholeBreakIterator(((t_WholeBreakIterator *) arg)->object.this$));
          }
          static PyObject *t_WholeBreakIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WholeBreakIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WholeBreakIterator_init_(t_WholeBreakIterator *self, PyObject *args, PyObject *kwds)
          {
            WholeBreakIterator object((jobject) NULL);

            INT_CALL(object = WholeBreakIterator());
            self->object = object;

            return 0;
          }

          static PyObject *t_WholeBreakIterator_current(t_WholeBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.current());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(WholeBreakIterator), (PyObject *) self, "current", args, 2);
          }

          static PyObject *t_WholeBreakIterator_first(t_WholeBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.first());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(WholeBreakIterator), (PyObject *) self, "first", args, 2);
          }

          static PyObject *t_WholeBreakIterator_following(t_WholeBreakIterator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.following(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(WholeBreakIterator), (PyObject *) self, "following", args, 2);
          }

          static PyObject *t_WholeBreakIterator_last(t_WholeBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.last());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(WholeBreakIterator), (PyObject *) self, "last", args, 2);
          }

          static PyObject *t_WholeBreakIterator_next(t_WholeBreakIterator *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.next());
                return PyLong_FromLong((long) result);
              }
              break;
             case 1:
              {
                jint a0;
                jint result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.next(a0));
                  return PyLong_FromLong((long) result);
                }
              }
            }

            return callSuper(PY_TYPE(WholeBreakIterator), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_WholeBreakIterator_preceding(t_WholeBreakIterator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.preceding(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(WholeBreakIterator), (PyObject *) self, "preceding", args, 2);
          }

          static PyObject *t_WholeBreakIterator_previous(t_WholeBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.previous());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(WholeBreakIterator), (PyObject *) self, "previous", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexSorter$DocComparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexSorter$DocComparator::class$ = NULL;
        jmethodID *IndexSorter$DocComparator::mids$ = NULL;
        bool IndexSorter$DocComparator::live$ = false;

        jclass IndexSorter$DocComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexSorter$DocComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_57a58545eba514db] = env->getMethodID(cls, "compare", "(II)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint IndexSorter$DocComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_57a58545eba514db], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexSorter$DocComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSorter$DocComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSorter$DocComparator_compare(t_IndexSorter$DocComparator *self, PyObject *args);

        static PyMethodDef t_IndexSorter$DocComparator__methods_[] = {
          DECLARE_METHOD(t_IndexSorter$DocComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSorter$DocComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSorter$DocComparator, compare, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexSorter$DocComparator)[] = {
          { Py_tp_methods, t_IndexSorter$DocComparator__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexSorter$DocComparator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexSorter$DocComparator, t_IndexSorter$DocComparator, IndexSorter$DocComparator);

        void t_IndexSorter$DocComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSorter$DocComparator), &PY_TYPE_DEF(IndexSorter$DocComparator), module, "IndexSorter$DocComparator", 0);
        }

        void t_IndexSorter$DocComparator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$DocComparator), "class_", make_descriptor(IndexSorter$DocComparator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$DocComparator), "wrapfn_", make_descriptor(t_IndexSorter$DocComparator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$DocComparator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSorter$DocComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSorter$DocComparator::initializeClass, 1)))
            return NULL;
          return t_IndexSorter$DocComparator::wrap_Object(IndexSorter$DocComparator(((t_IndexSorter$DocComparator *) arg)->object.this$));
        }
        static PyObject *t_IndexSorter$DocComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSorter$DocComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexSorter$DocComparator_compare(t_IndexSorter$DocComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compare", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/CorePlusExtensionsParser.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *CorePlusExtensionsParser::class$ = NULL;
          jmethodID *CorePlusExtensionsParser::mids$ = NULL;
          bool CorePlusExtensionsParser::live$ = false;

          jclass CorePlusExtensionsParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/CorePlusExtensionsParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d79fd8049d19a29e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/queryparser/classic/QueryParser;)V");
              mids$[mid_init$_32cb72731c50a536] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CorePlusExtensionsParser::CorePlusExtensionsParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::queryparser::classic::QueryParser & a1) : ::org::apache::lucene::queryparser::xml::CorePlusQueriesParser(env->newObject(initializeClass, &mids$, mid_init$_d79fd8049d19a29e, a0.this$, a1.this$)) {}

          CorePlusExtensionsParser::CorePlusExtensionsParser(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::queryparser::xml::CorePlusQueriesParser(env->newObject(initializeClass, &mids$, mid_init$_32cb72731c50a536, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_CorePlusExtensionsParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CorePlusExtensionsParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CorePlusExtensionsParser_init_(t_CorePlusExtensionsParser *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_CorePlusExtensionsParser__methods_[] = {
            DECLARE_METHOD(t_CorePlusExtensionsParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CorePlusExtensionsParser, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CorePlusExtensionsParser)[] = {
            { Py_tp_methods, t_CorePlusExtensionsParser__methods_ },
            { Py_tp_init, (void *) t_CorePlusExtensionsParser_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CorePlusExtensionsParser)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::queryparser::xml::CorePlusQueriesParser),
            NULL
          };

          DEFINE_TYPE(CorePlusExtensionsParser, t_CorePlusExtensionsParser, CorePlusExtensionsParser);

          void t_CorePlusExtensionsParser::install(PyObject *module)
          {
            installType(&PY_TYPE(CorePlusExtensionsParser), &PY_TYPE_DEF(CorePlusExtensionsParser), module, "CorePlusExtensionsParser", 0);
          }

          void t_CorePlusExtensionsParser::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CorePlusExtensionsParser), "class_", make_descriptor(CorePlusExtensionsParser::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CorePlusExtensionsParser), "wrapfn_", make_descriptor(t_CorePlusExtensionsParser::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CorePlusExtensionsParser), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CorePlusExtensionsParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CorePlusExtensionsParser::initializeClass, 1)))
              return NULL;
            return t_CorePlusExtensionsParser::wrap_Object(CorePlusExtensionsParser(((t_CorePlusExtensionsParser *) arg)->object.this$));
          }
          static PyObject *t_CorePlusExtensionsParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CorePlusExtensionsParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CorePlusExtensionsParser_init_(t_CorePlusExtensionsParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::org::apache::lucene::queryparser::classic::QueryParser a1((jobject) NULL);
                CorePlusExtensionsParser object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::queryparser::classic::QueryParser::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CorePlusExtensionsParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                CorePlusExtensionsParser object((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CorePlusExtensionsParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$DiskOrdinalMap.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "java/nio/file/Path.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyWriter$DiskOrdinalMap::class$ = NULL;
            jmethodID *DirectoryTaxonomyWriter$DiskOrdinalMap::mids$ = NULL;
            bool DirectoryTaxonomyWriter$DiskOrdinalMap::live$ = false;

            jclass DirectoryTaxonomyWriter$DiskOrdinalMap::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$DiskOrdinalMap");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_636077fee54d306c] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;)V");
                mids$[mid_addDone_f2cc1bce94666404] = env->getMethodID(cls, "addDone", "()V");
                mids$[mid_addMapping_438c62480c481c65] = env->getMethodID(cls, "addMapping", "(II)V");
                mids$[mid_getMap_d2c45ef07a322466] = env->getMethodID(cls, "getMap", "()[I");
                mids$[mid_setSize_040c4cd0390c5aff] = env->getMethodID(cls, "setSize", "(I)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DirectoryTaxonomyWriter$DiskOrdinalMap::DirectoryTaxonomyWriter$DiskOrdinalMap(const ::java::nio::file::Path & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_636077fee54d306c, a0.this$)) {}

            void DirectoryTaxonomyWriter$DiskOrdinalMap::addDone() const
            {
              env->callVoidMethod(this$, mids$[mid_addDone_f2cc1bce94666404]);
            }

            void DirectoryTaxonomyWriter$DiskOrdinalMap::addMapping(jint a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addMapping_438c62480c481c65], a0, a1);
            }

            JArray< jint > DirectoryTaxonomyWriter$DiskOrdinalMap::getMap() const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMap_d2c45ef07a322466]));
            }

            void DirectoryTaxonomyWriter$DiskOrdinalMap::setSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setSize_040c4cd0390c5aff], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyWriter$DiskOrdinalMap_init_(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_addDone(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_addMapping(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_getMap(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_setSize(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_get__map(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, void *data);
            static int t_DirectoryTaxonomyWriter$DiskOrdinalMap_set__size(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *arg, void *data);
            static PyGetSetDef t_DirectoryTaxonomyWriter$DiskOrdinalMap__fields_[] = {
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, map),
              DECLARE_SET_FIELD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyWriter$DiskOrdinalMap__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, addDone, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, addMapping, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, getMap, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, setSize, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(DirectoryTaxonomyWriter$DiskOrdinalMap)[] = {
              { Py_tp_methods, t_DirectoryTaxonomyWriter$DiskOrdinalMap__methods_ },
              { Py_tp_init, (void *) t_DirectoryTaxonomyWriter$DiskOrdinalMap_init_ },
              { Py_tp_getset, t_DirectoryTaxonomyWriter$DiskOrdinalMap__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(DirectoryTaxonomyWriter$DiskOrdinalMap)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap, t_DirectoryTaxonomyWriter$DiskOrdinalMap, DirectoryTaxonomyWriter$DiskOrdinalMap);

            void t_DirectoryTaxonomyWriter$DiskOrdinalMap::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap), &PY_TYPE_DEF(DirectoryTaxonomyWriter$DiskOrdinalMap), module, "DirectoryTaxonomyWriter$DiskOrdinalMap", 0);
            }

            void t_DirectoryTaxonomyWriter$DiskOrdinalMap::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap), "class_", make_descriptor(DirectoryTaxonomyWriter$DiskOrdinalMap::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap), "wrapfn_", make_descriptor(t_DirectoryTaxonomyWriter$DiskOrdinalMap::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyWriter$DiskOrdinalMap::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyWriter$DiskOrdinalMap::wrap_Object(DirectoryTaxonomyWriter$DiskOrdinalMap(((t_DirectoryTaxonomyWriter$DiskOrdinalMap *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyWriter$DiskOrdinalMap::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DirectoryTaxonomyWriter$DiskOrdinalMap_init_(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *args, PyObject *kwds)
            {
              ::java::nio::file::Path a0((jobject) NULL);
              DirectoryTaxonomyWriter$DiskOrdinalMap object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::nio::file::Path::initializeClass, &a0))
              {
                INT_CALL(object = DirectoryTaxonomyWriter$DiskOrdinalMap(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_addDone(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self)
            {
              OBJ_CALL(self->object.addDone());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_addMapping(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *args)
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.addMapping(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addMapping", args);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_getMap(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self)
            {
              JArray< jint > result((jobject) NULL);
              OBJ_CALL(result = self->object.getMap());
              return result.wrap();
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_setSize(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setSize", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_get__map(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, void *data)
            {
              JArray< jint > value((jobject) NULL);
              OBJ_CALL(value = self->object.getMap());
              return value.wrap();
            }

            static int t_DirectoryTaxonomyWriter$DiskOrdinalMap_set__size(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "size", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ToStringUtils.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ToStringUtils::class$ = NULL;
        jmethodID *ToStringUtils::mids$ = NULL;
        bool ToStringUtils::live$ = false;

        jclass ToStringUtils::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ToStringUtils");

            mids$ = new jmethodID[max_mid];
            mids$[mid_byteArray_135358c50a942e4a] = env->getStaticMethodID(cls, "byteArray", "(Ljava/lang/StringBuilder;[B)V");
            mids$[mid_longHex_55e776ffac018431] = env->getStaticMethodID(cls, "longHex", "(J)Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void ToStringUtils::byteArray(const ::java::lang::StringBuilder & a0, const JArray< jbyte > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_byteArray_135358c50a942e4a], a0.this$, a1.this$);
        }

        ::java::lang::String ToStringUtils::longHex(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_longHex_55e776ffac018431], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ToStringUtils_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ToStringUtils_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ToStringUtils_byteArray(PyTypeObject *type, PyObject *args);
        static PyObject *t_ToStringUtils_longHex(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_ToStringUtils__methods_[] = {
          DECLARE_METHOD(t_ToStringUtils, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ToStringUtils, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ToStringUtils, byteArray, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ToStringUtils, longHex, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ToStringUtils)[] = {
          { Py_tp_methods, t_ToStringUtils__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ToStringUtils)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(ToStringUtils, t_ToStringUtils, ToStringUtils);

        void t_ToStringUtils::install(PyObject *module)
        {
          installType(&PY_TYPE(ToStringUtils), &PY_TYPE_DEF(ToStringUtils), module, "ToStringUtils", 0);
        }

        void t_ToStringUtils::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ToStringUtils), "class_", make_descriptor(ToStringUtils::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ToStringUtils), "wrapfn_", make_descriptor(t_ToStringUtils::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ToStringUtils), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ToStringUtils_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ToStringUtils::initializeClass, 1)))
            return NULL;
          return t_ToStringUtils::wrap_Object(ToStringUtils(((t_ToStringUtils *) arg)->object.this$));
        }
        static PyObject *t_ToStringUtils_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ToStringUtils::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ToStringUtils_byteArray(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::StringBuilder a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);

          if (!parseArgs(args, "k[B", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::util::ToStringUtils::byteArray(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "byteArray", args);
          return NULL;
        }

        static PyObject *t_ToStringUtils_longHex(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ToStringUtils::longHex(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "longHex", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/IntegerEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *IntegerEncoder::class$ = NULL;
          jmethodID *IntegerEncoder::mids$ = NULL;
          bool IntegerEncoder::live$ = false;

          jclass IntegerEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/IntegerEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encode_785adfa8e7d32a0b] = env->getMethodID(cls, "encode", "([CII)Lorg/apache/lucene/util/BytesRef;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntegerEncoder::IntegerEncoder() : ::org::apache::lucene::analysis::payloads::AbstractEncoder(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::util::BytesRef IntegerEncoder::encode(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_785adfa8e7d32a0b], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_IntegerEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntegerEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IntegerEncoder_init_(t_IntegerEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntegerEncoder_encode(t_IntegerEncoder *self, PyObject *args);

          static PyMethodDef t_IntegerEncoder__methods_[] = {
            DECLARE_METHOD(t_IntegerEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntegerEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntegerEncoder, encode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IntegerEncoder)[] = {
            { Py_tp_methods, t_IntegerEncoder__methods_ },
            { Py_tp_init, (void *) t_IntegerEncoder_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IntegerEncoder)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::payloads::AbstractEncoder),
            NULL
          };

          DEFINE_TYPE(IntegerEncoder, t_IntegerEncoder, IntegerEncoder);

          void t_IntegerEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(IntegerEncoder), &PY_TYPE_DEF(IntegerEncoder), module, "IntegerEncoder", 0);
          }

          void t_IntegerEncoder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntegerEncoder), "class_", make_descriptor(IntegerEncoder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntegerEncoder), "wrapfn_", make_descriptor(t_IntegerEncoder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntegerEncoder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntegerEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntegerEncoder::initializeClass, 1)))
              return NULL;
            return t_IntegerEncoder::wrap_Object(IntegerEncoder(((t_IntegerEncoder *) arg)->object.this$));
          }
          static PyObject *t_IntegerEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntegerEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IntegerEncoder_init_(t_IntegerEncoder *self, PyObject *args, PyObject *kwds)
          {
            IntegerEncoder object((jobject) NULL);

            INT_CALL(object = IntegerEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_IntegerEncoder_encode(t_IntegerEncoder *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.encode(a0, a1, a2));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IntegerEncoder), (PyObject *) self, "encode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *QueryConfigHandler::class$ = NULL;
              jmethodID *QueryConfigHandler::mids$ = NULL;
              bool QueryConfigHandler::live$ = false;

              jclass QueryConfigHandler::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_addFieldConfigListener_1c210f8c0421f193] = env->getMethodID(cls, "addFieldConfigListener", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfigListener;)V");
                  mids$[mid_getFieldConfig_c33c204ddc075507] = env->getMethodID(cls, "getFieldConfig", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryConfigHandler::QueryConfigHandler() : ::org::apache::lucene::queryparser::flexible::core::config::AbstractQueryConfig(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              void QueryConfigHandler::addFieldConfigListener(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfigListener & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_addFieldConfigListener_1c210f8c0421f193], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig QueryConfigHandler::getFieldConfig(const ::java::lang::String & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig(env->callObjectMethod(this$, mids$[mid_getFieldConfig_c33c204ddc075507], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_QueryConfigHandler_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryConfigHandler_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryConfigHandler_init_(t_QueryConfigHandler *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryConfigHandler_addFieldConfigListener(t_QueryConfigHandler *self, PyObject *arg);
              static PyObject *t_QueryConfigHandler_getFieldConfig(t_QueryConfigHandler *self, PyObject *arg);

              static PyMethodDef t_QueryConfigHandler__methods_[] = {
                DECLARE_METHOD(t_QueryConfigHandler, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryConfigHandler, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryConfigHandler, addFieldConfigListener, METH_O),
                DECLARE_METHOD(t_QueryConfigHandler, getFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(QueryConfigHandler)[] = {
                { Py_tp_methods, t_QueryConfigHandler__methods_ },
                { Py_tp_init, (void *) t_QueryConfigHandler_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(QueryConfigHandler)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::config::AbstractQueryConfig),
                NULL
              };

              DEFINE_TYPE(QueryConfigHandler, t_QueryConfigHandler, QueryConfigHandler);

              void t_QueryConfigHandler::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryConfigHandler), &PY_TYPE_DEF(QueryConfigHandler), module, "QueryConfigHandler", 0);
              }

              void t_QueryConfigHandler::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryConfigHandler), "class_", make_descriptor(QueryConfigHandler::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryConfigHandler), "wrapfn_", make_descriptor(t_QueryConfigHandler::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryConfigHandler), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryConfigHandler_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryConfigHandler::initializeClass, 1)))
                  return NULL;
                return t_QueryConfigHandler::wrap_Object(QueryConfigHandler(((t_QueryConfigHandler *) arg)->object.this$));
              }
              static PyObject *t_QueryConfigHandler_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryConfigHandler::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryConfigHandler_init_(t_QueryConfigHandler *self, PyObject *args, PyObject *kwds)
              {
                QueryConfigHandler object((jobject) NULL);

                INT_CALL(object = QueryConfigHandler());
                self->object = object;

                return 0;
              }

              static PyObject *t_QueryConfigHandler_addFieldConfigListener(t_QueryConfigHandler *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfigListener a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfigListener::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.addFieldConfigListener(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "addFieldConfigListener", arg);
                return NULL;
              }

              static PyObject *t_QueryConfigHandler_getFieldConfig(t_QueryConfigHandler *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig result((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getFieldConfig(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::config::t_FieldConfig::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeFactory$StaticImplementationAttributeFactory.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/Attribute.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeFactory$StaticImplementationAttributeFactory::class$ = NULL;
        jmethodID *AttributeFactory$StaticImplementationAttributeFactory::mids$ = NULL;
        bool AttributeFactory$StaticImplementationAttributeFactory::live$ = false;

        jclass AttributeFactory$StaticImplementationAttributeFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeFactory$StaticImplementationAttributeFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_eec81095620003c1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/lang/Class;)V");
            mids$[mid_createAttributeInstance_735d71ec4c74ee78] = env->getMethodID(cls, "createAttributeInstance", "(Ljava/lang/Class;)Lorg/apache/lucene/util/AttributeImpl;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_createInstance_3e3d10fb1bca89d9] = env->getMethodID(cls, "createInstance", "()Lorg/apache/lucene/util/AttributeImpl;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeFactory$StaticImplementationAttributeFactory::AttributeFactory$StaticImplementationAttributeFactory(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::lang::Class & a1) : ::org::apache::lucene::util::AttributeFactory(env->newObject(initializeClass, &mids$, mid_init$_eec81095620003c1, a0.this$, a1.this$)) {}

        ::org::apache::lucene::util::AttributeImpl AttributeFactory$StaticImplementationAttributeFactory::createAttributeInstance(const ::java::lang::Class & a0) const
        {
          return ::org::apache::lucene::util::AttributeImpl(env->callObjectMethod(this$, mids$[mid_createAttributeInstance_735d71ec4c74ee78], a0.this$));
        }

        jboolean AttributeFactory$StaticImplementationAttributeFactory::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint AttributeFactory$StaticImplementationAttributeFactory::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_of_(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args);
        static int t_AttributeFactory$StaticImplementationAttributeFactory_init_(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_createAttributeInstance(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_equals(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_hashCode(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_get__parameters_(t_AttributeFactory$StaticImplementationAttributeFactory *self, void *data);
        static PyGetSetDef t_AttributeFactory$StaticImplementationAttributeFactory__fields_[] = {
          DECLARE_GET_FIELD(t_AttributeFactory$StaticImplementationAttributeFactory, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AttributeFactory$StaticImplementationAttributeFactory__methods_[] = {
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, of_, METH_VARARGS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, createAttributeInstance, METH_VARARGS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, equals, METH_VARARGS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, hashCode, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(AttributeFactory$StaticImplementationAttributeFactory)[] = {
          { Py_tp_methods, t_AttributeFactory$StaticImplementationAttributeFactory__methods_ },
          { Py_tp_init, (void *) t_AttributeFactory$StaticImplementationAttributeFactory_init_ },
          { Py_tp_getset, t_AttributeFactory$StaticImplementationAttributeFactory__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(AttributeFactory$StaticImplementationAttributeFactory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::AttributeFactory),
          NULL
        };

        DEFINE_TYPE(AttributeFactory$StaticImplementationAttributeFactory, t_AttributeFactory$StaticImplementationAttributeFactory, AttributeFactory$StaticImplementationAttributeFactory);
        PyObject *t_AttributeFactory$StaticImplementationAttributeFactory::wrap_Object(const AttributeFactory$StaticImplementationAttributeFactory& object, PyTypeObject *p0)
        {
          PyObject *obj = t_AttributeFactory$StaticImplementationAttributeFactory::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_AttributeFactory$StaticImplementationAttributeFactory *self = (t_AttributeFactory$StaticImplementationAttributeFactory *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_AttributeFactory$StaticImplementationAttributeFactory::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_AttributeFactory$StaticImplementationAttributeFactory::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_AttributeFactory$StaticImplementationAttributeFactory *self = (t_AttributeFactory$StaticImplementationAttributeFactory *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_AttributeFactory$StaticImplementationAttributeFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), &PY_TYPE_DEF(AttributeFactory$StaticImplementationAttributeFactory), module, "AttributeFactory$StaticImplementationAttributeFactory", 0);
        }

        void t_AttributeFactory$StaticImplementationAttributeFactory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), "class_", make_descriptor(AttributeFactory$StaticImplementationAttributeFactory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), "wrapfn_", make_descriptor(t_AttributeFactory$StaticImplementationAttributeFactory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeFactory$StaticImplementationAttributeFactory::initializeClass, 1)))
            return NULL;
          return t_AttributeFactory$StaticImplementationAttributeFactory::wrap_Object(AttributeFactory$StaticImplementationAttributeFactory(((t_AttributeFactory$StaticImplementationAttributeFactory *) arg)->object.this$));
        }
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeFactory$StaticImplementationAttributeFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_of_(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_AttributeFactory$StaticImplementationAttributeFactory_init_(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
          ::java::lang::Class a1((jobject) NULL);
          PyTypeObject **p1;
          AttributeFactory$StaticImplementationAttributeFactory object((jobject) NULL);

          if (!parseArgs(args, "kK", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
          {
            INT_CALL(object = AttributeFactory$StaticImplementationAttributeFactory(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_createAttributeInstance(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::util::AttributeImpl result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.createAttributeInstance(a0));
            return ::org::apache::lucene::util::t_AttributeImpl::wrap_Object(result);
          }

          return callSuper(PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), (PyObject *) self, "createAttributeInstance", args, 2);
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_equals(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_hashCode(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), (PyObject *) self, "hashCode", args, 2);
        }
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_get__parameters_(t_AttributeFactory$StaticImplementationAttributeFactory *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/IndexDictionary$BrowserSupplier.h"
#include "org/apache/lucene/codecs/uniformsplit/IndexDictionary$Browser.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *IndexDictionary$BrowserSupplier::class$ = NULL;
          jmethodID *IndexDictionary$BrowserSupplier::mids$ = NULL;
          bool IndexDictionary$BrowserSupplier::live$ = false;

          jclass IndexDictionary$BrowserSupplier::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/IndexDictionary$BrowserSupplier");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_IndexDictionary$BrowserSupplier_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndexDictionary$BrowserSupplier_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_IndexDictionary$BrowserSupplier__methods_[] = {
            DECLARE_METHOD(t_IndexDictionary$BrowserSupplier, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndexDictionary$BrowserSupplier, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IndexDictionary$BrowserSupplier)[] = {
            { Py_tp_methods, t_IndexDictionary$BrowserSupplier__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IndexDictionary$BrowserSupplier)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::IOSupplier),
            NULL
          };

          DEFINE_TYPE(IndexDictionary$BrowserSupplier, t_IndexDictionary$BrowserSupplier, IndexDictionary$BrowserSupplier);

          void t_IndexDictionary$BrowserSupplier::install(PyObject *module)
          {
            installType(&PY_TYPE(IndexDictionary$BrowserSupplier), &PY_TYPE_DEF(IndexDictionary$BrowserSupplier), module, "IndexDictionary$BrowserSupplier", 0);
          }

          void t_IndexDictionary$BrowserSupplier::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexDictionary$BrowserSupplier), "class_", make_descriptor(IndexDictionary$BrowserSupplier::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexDictionary$BrowserSupplier), "wrapfn_", make_descriptor(t_IndexDictionary$BrowserSupplier::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexDictionary$BrowserSupplier), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndexDictionary$BrowserSupplier_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndexDictionary$BrowserSupplier::initializeClass, 1)))
              return NULL;
            return t_IndexDictionary$BrowserSupplier::wrap_Object(IndexDictionary$BrowserSupplier(((t_IndexDictionary$BrowserSupplier *) arg)->object.this$));
          }
          static PyObject *t_IndexDictionary$BrowserSupplier_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndexDictionary$BrowserSupplier::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/NGramTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *NGramTokenFilter::class$ = NULL;
          jmethodID *NGramTokenFilter::mids$ = NULL;
          bool NGramTokenFilter::live$ = false;
          jboolean NGramTokenFilter::DEFAULT_PRESERVE_ORIGINAL = (jboolean) 0;

          jclass NGramTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/NGramTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ec84dcad1ccbb797] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_90f95d18f5f2d791] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;IIZ)V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_PRESERVE_ORIGINAL = env->getStaticBooleanField(cls, "DEFAULT_PRESERVE_ORIGINAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramTokenFilter::NGramTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ec84dcad1ccbb797, a0.this$, a1)) {}

          NGramTokenFilter::NGramTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jint a2, jboolean a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_90f95d18f5f2d791, a0.this$, a1, a2, a3)) {}

          void NGramTokenFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean NGramTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void NGramTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_NGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramTokenFilter_init_(t_NGramTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramTokenFilter_end(t_NGramTokenFilter *self, PyObject *args);
          static PyObject *t_NGramTokenFilter_incrementToken(t_NGramTokenFilter *self, PyObject *args);
          static PyObject *t_NGramTokenFilter_reset(t_NGramTokenFilter *self, PyObject *args);

          static PyMethodDef t_NGramTokenFilter__methods_[] = {
            DECLARE_METHOD(t_NGramTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_NGramTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_NGramTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NGramTokenFilter)[] = {
            { Py_tp_methods, t_NGramTokenFilter__methods_ },
            { Py_tp_init, (void *) t_NGramTokenFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NGramTokenFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(NGramTokenFilter, t_NGramTokenFilter, NGramTokenFilter);

          void t_NGramTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramTokenFilter), &PY_TYPE_DEF(NGramTokenFilter), module, "NGramTokenFilter", 0);
          }

          void t_NGramTokenFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NGramTokenFilter), "class_", make_descriptor(NGramTokenFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NGramTokenFilter), "wrapfn_", make_descriptor(t_NGramTokenFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NGramTokenFilter), "boxfn_", make_descriptor(boxObject));
            env->getClass(NGramTokenFilter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(NGramTokenFilter), "DEFAULT_PRESERVE_ORIGINAL", make_descriptor(NGramTokenFilter::DEFAULT_PRESERVE_ORIGINAL));
          }

          static PyObject *t_NGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramTokenFilter::initializeClass, 1)))
              return NULL;
            return t_NGramTokenFilter::wrap_Object(NGramTokenFilter(((t_NGramTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_NGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramTokenFilter_init_(t_NGramTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                NGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = NGramTokenFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jint a2;
                jboolean a3;
                NGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kIIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = NGramTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramTokenFilter_end(t_NGramTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(NGramTokenFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_NGramTokenFilter_incrementToken(t_NGramTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(NGramTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_NGramTokenFilter_reset(t_NGramTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(NGramTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/lt/LithuanianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lt {

          ::java::lang::Class *LithuanianAnalyzer::class$ = NULL;
          jmethodID *LithuanianAnalyzer::mids$ = NULL;
          bool LithuanianAnalyzer::live$ = false;
          ::java::lang::String *LithuanianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass LithuanianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/lt/LithuanianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LithuanianAnalyzer::LithuanianAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          LithuanianAnalyzer::LithuanianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          LithuanianAnalyzer::LithuanianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet LithuanianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lt {
          static PyObject *t_LithuanianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LithuanianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LithuanianAnalyzer_init_(t_LithuanianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LithuanianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_LithuanianAnalyzer_get__defaultStopSet(t_LithuanianAnalyzer *self, void *data);
          static PyGetSetDef t_LithuanianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_LithuanianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LithuanianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_LithuanianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LithuanianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LithuanianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LithuanianAnalyzer)[] = {
            { Py_tp_methods, t_LithuanianAnalyzer__methods_ },
            { Py_tp_init, (void *) t_LithuanianAnalyzer_init_ },
            { Py_tp_getset, t_LithuanianAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LithuanianAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(LithuanianAnalyzer, t_LithuanianAnalyzer, LithuanianAnalyzer);

          void t_LithuanianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(LithuanianAnalyzer), &PY_TYPE_DEF(LithuanianAnalyzer), module, "LithuanianAnalyzer", 0);
          }

          void t_LithuanianAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LithuanianAnalyzer), "class_", make_descriptor(LithuanianAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LithuanianAnalyzer), "wrapfn_", make_descriptor(t_LithuanianAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LithuanianAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(LithuanianAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(LithuanianAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*LithuanianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_LithuanianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LithuanianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_LithuanianAnalyzer::wrap_Object(LithuanianAnalyzer(((t_LithuanianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_LithuanianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LithuanianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LithuanianAnalyzer_init_(t_LithuanianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                LithuanianAnalyzer object((jobject) NULL);

                INT_CALL(object = LithuanianAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                LithuanianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = LithuanianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                LithuanianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = LithuanianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LithuanianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::lt::LithuanianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_LithuanianAnalyzer_get__defaultStopSet(t_LithuanianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LogDocMergePolicy.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LogDocMergePolicy::class$ = NULL;
        jmethodID *LogDocMergePolicy::mids$ = NULL;
        bool LogDocMergePolicy::live$ = false;
        jint LogDocMergePolicy::DEFAULT_MIN_MERGE_DOCS = (jint) 0;

        jclass LogDocMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LogDocMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getMinMergeDocs_9972fcc56b44e79d] = env->getMethodID(cls, "getMinMergeDocs", "()I");
            mids$[mid_setMinMergeDocs_040c4cd0390c5aff] = env->getMethodID(cls, "setMinMergeDocs", "(I)V");
            mids$[mid_size_ad7dad42a292eb83] = env->getMethodID(cls, "size", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/MergePolicy$MergeContext;)J");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MIN_MERGE_DOCS = env->getStaticIntField(cls, "DEFAULT_MIN_MERGE_DOCS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LogDocMergePolicy::LogDocMergePolicy() : ::org::apache::lucene::index::LogMergePolicy(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jint LogDocMergePolicy::getMinMergeDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_getMinMergeDocs_9972fcc56b44e79d]);
        }

        void LogDocMergePolicy::setMinMergeDocs(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMinMergeDocs_040c4cd0390c5aff], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LogDocMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LogDocMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LogDocMergePolicy_init_(t_LogDocMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LogDocMergePolicy_getMinMergeDocs(t_LogDocMergePolicy *self);
        static PyObject *t_LogDocMergePolicy_setMinMergeDocs(t_LogDocMergePolicy *self, PyObject *arg);
        static PyObject *t_LogDocMergePolicy_get__minMergeDocs(t_LogDocMergePolicy *self, void *data);
        static int t_LogDocMergePolicy_set__minMergeDocs(t_LogDocMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_LogDocMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_LogDocMergePolicy, minMergeDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LogDocMergePolicy__methods_[] = {
          DECLARE_METHOD(t_LogDocMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogDocMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogDocMergePolicy, getMinMergeDocs, METH_NOARGS),
          DECLARE_METHOD(t_LogDocMergePolicy, setMinMergeDocs, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LogDocMergePolicy)[] = {
          { Py_tp_methods, t_LogDocMergePolicy__methods_ },
          { Py_tp_init, (void *) t_LogDocMergePolicy_init_ },
          { Py_tp_getset, t_LogDocMergePolicy__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LogDocMergePolicy)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::LogMergePolicy),
          NULL
        };

        DEFINE_TYPE(LogDocMergePolicy, t_LogDocMergePolicy, LogDocMergePolicy);

        void t_LogDocMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(LogDocMergePolicy), &PY_TYPE_DEF(LogDocMergePolicy), module, "LogDocMergePolicy", 0);
        }

        void t_LogDocMergePolicy::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LogDocMergePolicy), "class_", make_descriptor(LogDocMergePolicy::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LogDocMergePolicy), "wrapfn_", make_descriptor(t_LogDocMergePolicy::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LogDocMergePolicy), "boxfn_", make_descriptor(boxObject));
          env->getClass(LogDocMergePolicy::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(LogDocMergePolicy), "DEFAULT_MIN_MERGE_DOCS", make_descriptor(LogDocMergePolicy::DEFAULT_MIN_MERGE_DOCS));
        }

        static PyObject *t_LogDocMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LogDocMergePolicy::initializeClass, 1)))
            return NULL;
          return t_LogDocMergePolicy::wrap_Object(LogDocMergePolicy(((t_LogDocMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_LogDocMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LogDocMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LogDocMergePolicy_init_(t_LogDocMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          LogDocMergePolicy object((jobject) NULL);

          INT_CALL(object = LogDocMergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_LogDocMergePolicy_getMinMergeDocs(t_LogDocMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMinMergeDocs());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_LogDocMergePolicy_setMinMergeDocs(t_LogDocMergePolicy *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMinMergeDocs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMinMergeDocs", arg);
          return NULL;
        }

        static PyObject *t_LogDocMergePolicy_get__minMergeDocs(t_LogDocMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMinMergeDocs());
          return PyLong_FromLong((long) value);
        }
        static int t_LogDocMergePolicy_set__minMergeDocs(t_LogDocMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMinMergeDocs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "minMergeDocs", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BoostQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BoostQuery::class$ = NULL;
        jmethodID *BoostQuery::mids$ = NULL;
        bool BoostQuery::live$ = false;

        jclass BoostQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BoostQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2d949d9faf0fc5a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;F)V");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getBoost_58aec2b64dff50c8] = env->getMethodID(cls, "getBoost", "()F");
            mids$[mid_getQuery_cbf839a480265450] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BoostQuery::BoostQuery(const ::org::apache::lucene::search::Query & a0, jfloat a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_f2d949d9faf0fc5a, a0.this$, a1)) {}

        ::org::apache::lucene::search::Weight BoostQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean BoostQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jfloat BoostQuery::getBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getBoost_58aec2b64dff50c8]);
        }

        ::org::apache::lucene::search::Query BoostQuery::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_cbf839a480265450]));
        }

        jint BoostQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::Query BoostQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
        }

        ::java::lang::String BoostQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void BoostQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BoostQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BoostQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BoostQuery_init_(t_BoostQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BoostQuery_createWeight(t_BoostQuery *self, PyObject *args);
        static PyObject *t_BoostQuery_equals(t_BoostQuery *self, PyObject *args);
        static PyObject *t_BoostQuery_getBoost(t_BoostQuery *self);
        static PyObject *t_BoostQuery_getQuery(t_BoostQuery *self);
        static PyObject *t_BoostQuery_hashCode(t_BoostQuery *self, PyObject *args);
        static PyObject *t_BoostQuery_rewrite(t_BoostQuery *self, PyObject *args);
        static PyObject *t_BoostQuery_toString(t_BoostQuery *self, PyObject *args);
        static PyObject *t_BoostQuery_visit(t_BoostQuery *self, PyObject *args);
        static PyObject *t_BoostQuery_get__boost(t_BoostQuery *self, void *data);
        static PyObject *t_BoostQuery_get__query(t_BoostQuery *self, void *data);
        static PyGetSetDef t_BoostQuery__fields_[] = {
          DECLARE_GET_FIELD(t_BoostQuery, boost),
          DECLARE_GET_FIELD(t_BoostQuery, query),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BoostQuery__methods_[] = {
          DECLARE_METHOD(t_BoostQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_BoostQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_BoostQuery, getBoost, METH_NOARGS),
          DECLARE_METHOD(t_BoostQuery, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_BoostQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BoostQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_BoostQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_BoostQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BoostQuery)[] = {
          { Py_tp_methods, t_BoostQuery__methods_ },
          { Py_tp_init, (void *) t_BoostQuery_init_ },
          { Py_tp_getset, t_BoostQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BoostQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(BoostQuery, t_BoostQuery, BoostQuery);

        void t_BoostQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(BoostQuery), &PY_TYPE_DEF(BoostQuery), module, "BoostQuery", 0);
        }

        void t_BoostQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BoostQuery), "class_", make_descriptor(BoostQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BoostQuery), "wrapfn_", make_descriptor(t_BoostQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BoostQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BoostQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BoostQuery::initializeClass, 1)))
            return NULL;
          return t_BoostQuery::wrap_Object(BoostQuery(((t_BoostQuery *) arg)->object.this$));
        }
        static PyObject *t_BoostQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BoostQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BoostQuery_init_(t_BoostQuery *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          jfloat a1;
          BoostQuery object((jobject) NULL);

          if (!parseArgs(args, "kF", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
          {
            INT_CALL(object = BoostQuery(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BoostQuery_createWeight(t_BoostQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(BoostQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_BoostQuery_equals(t_BoostQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(BoostQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BoostQuery_getBoost(t_BoostQuery *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_BoostQuery_getQuery(t_BoostQuery *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_BoostQuery_hashCode(t_BoostQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(BoostQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BoostQuery_rewrite(t_BoostQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(BoostQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_BoostQuery_toString(t_BoostQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(BoostQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BoostQuery_visit(t_BoostQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(BoostQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_BoostQuery_get__boost(t_BoostQuery *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getBoost());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_BoostQuery_get__query(t_BoostQuery *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *BinaryDocValues::class$ = NULL;
        jmethodID *BinaryDocValues::mids$ = NULL;
        bool BinaryDocValues::live$ = false;

        jclass BinaryDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/BinaryDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_binaryValue_7af2ea2e37ce82b8] = env->getMethodID(cls, "binaryValue", "()Lorg/apache/lucene/util/BytesRef;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef BinaryDocValues::binaryValue() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_binaryValue_7af2ea2e37ce82b8]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_BinaryDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BinaryDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BinaryDocValues_binaryValue(t_BinaryDocValues *self);

        static PyMethodDef t_BinaryDocValues__methods_[] = {
          DECLARE_METHOD(t_BinaryDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BinaryDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BinaryDocValues, binaryValue, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BinaryDocValues)[] = {
          { Py_tp_methods, t_BinaryDocValues__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BinaryDocValues)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::DocValuesIterator),
          NULL
        };

        DEFINE_TYPE(BinaryDocValues, t_BinaryDocValues, BinaryDocValues);

        void t_BinaryDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(BinaryDocValues), &PY_TYPE_DEF(BinaryDocValues), module, "BinaryDocValues", 0);
        }

        void t_BinaryDocValues::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDocValues), "class_", make_descriptor(BinaryDocValues::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDocValues), "wrapfn_", make_descriptor(t_BinaryDocValues::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDocValues), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BinaryDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BinaryDocValues::initializeClass, 1)))
            return NULL;
          return t_BinaryDocValues::wrap_Object(BinaryDocValues(((t_BinaryDocValues *) arg)->object.this$));
        }
        static PyObject *t_BinaryDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BinaryDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BinaryDocValues_binaryValue(t_BinaryDocValues *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.binaryValue());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "java/lang/Iterable.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *DocValuesConsumer::class$ = NULL;
        jmethodID *DocValuesConsumer::mids$ = NULL;
        bool DocValuesConsumer::live$ = false;

        jclass DocValuesConsumer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/DocValuesConsumer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addBinaryField_a3ba0999f60cc939] = env->getMethodID(cls, "addBinaryField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/DocValuesProducer;)V");
            mids$[mid_addNumericField_a3ba0999f60cc939] = env->getMethodID(cls, "addNumericField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/DocValuesProducer;)V");
            mids$[mid_addSortedField_a3ba0999f60cc939] = env->getMethodID(cls, "addSortedField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/DocValuesProducer;)V");
            mids$[mid_addSortedNumericField_a3ba0999f60cc939] = env->getMethodID(cls, "addSortedNumericField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/DocValuesProducer;)V");
            mids$[mid_addSortedSetField_a3ba0999f60cc939] = env->getMethodID(cls, "addSortedSetField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/DocValuesProducer;)V");
            mids$[mid_isSingleValued_105e8c4f434a40d1] = env->getStaticMethodID(cls, "isSingleValued", "(Ljava/lang/Iterable;)Z");
            mids$[mid_merge_747cb13f783c9b42] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)V");
            mids$[mid_mergeBinaryField_b32f9072de285d65] = env->getMethodID(cls, "mergeBinaryField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;)V");
            mids$[mid_mergeNumericField_b32f9072de285d65] = env->getMethodID(cls, "mergeNumericField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;)V");
            mids$[mid_mergeSortedField_b32f9072de285d65] = env->getMethodID(cls, "mergeSortedField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;)V");
            mids$[mid_mergeSortedNumericField_b32f9072de285d65] = env->getMethodID(cls, "mergeSortedNumericField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;)V");
            mids$[mid_mergeSortedSetField_b32f9072de285d65] = env->getMethodID(cls, "mergeSortedSetField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;)V");
            mids$[mid_singletonView_434153c7ec861238] = env->getStaticMethodID(cls, "singletonView", "(Ljava/lang/Iterable;Ljava/lang/Iterable;Ljava/lang/Number;)Ljava/lang/Iterable;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void DocValuesConsumer::addBinaryField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::DocValuesProducer & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addBinaryField_a3ba0999f60cc939], a0.this$, a1.this$);
        }

        void DocValuesConsumer::addNumericField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::DocValuesProducer & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addNumericField_a3ba0999f60cc939], a0.this$, a1.this$);
        }

        void DocValuesConsumer::addSortedField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::DocValuesProducer & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addSortedField_a3ba0999f60cc939], a0.this$, a1.this$);
        }

        void DocValuesConsumer::addSortedNumericField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::DocValuesProducer & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addSortedNumericField_a3ba0999f60cc939], a0.this$, a1.this$);
        }

        void DocValuesConsumer::addSortedSetField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::DocValuesProducer & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addSortedSetField_a3ba0999f60cc939], a0.this$, a1.this$);
        }

        jboolean DocValuesConsumer::isSingleValued(const ::java::lang::Iterable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_isSingleValued_105e8c4f434a40d1], a0.this$);
        }

        void DocValuesConsumer::merge(const ::org::apache::lucene::index::MergeState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_747cb13f783c9b42], a0.this$);
        }

        void DocValuesConsumer::mergeBinaryField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeBinaryField_b32f9072de285d65], a0.this$, a1.this$);
        }

        void DocValuesConsumer::mergeNumericField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeNumericField_b32f9072de285d65], a0.this$, a1.this$);
        }

        void DocValuesConsumer::mergeSortedField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeSortedField_b32f9072de285d65], a0.this$, a1.this$);
        }

        void DocValuesConsumer::mergeSortedNumericField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeSortedNumericField_b32f9072de285d65], a0.this$, a1.this$);
        }

        void DocValuesConsumer::mergeSortedSetField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeSortedSetField_b32f9072de285d65], a0.this$, a1.this$);
        }

        ::java::lang::Iterable DocValuesConsumer::singletonView(const ::java::lang::Iterable & a0, const ::java::lang::Iterable & a1, const ::java::lang::Number & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::Iterable(env->callStaticObjectMethod(cls, mids$[mid_singletonView_434153c7ec861238], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_DocValuesConsumer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesConsumer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesConsumer_addBinaryField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_addNumericField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_addSortedField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_addSortedNumericField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_addSortedSetField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_isSingleValued(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesConsumer_merge(t_DocValuesConsumer *self, PyObject *arg);
        static PyObject *t_DocValuesConsumer_mergeBinaryField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_mergeNumericField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_mergeSortedField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_mergeSortedNumericField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_mergeSortedSetField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_singletonView(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_DocValuesConsumer__methods_[] = {
          DECLARE_METHOD(t_DocValuesConsumer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesConsumer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesConsumer, addBinaryField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, addNumericField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, addSortedField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, addSortedNumericField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, addSortedSetField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, isSingleValued, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesConsumer, merge, METH_O),
          DECLARE_METHOD(t_DocValuesConsumer, mergeBinaryField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeNumericField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeSortedField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeSortedNumericField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeSortedSetField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, singletonView, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocValuesConsumer)[] = {
          { Py_tp_methods, t_DocValuesConsumer__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocValuesConsumer)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DocValuesConsumer, t_DocValuesConsumer, DocValuesConsumer);

        void t_DocValuesConsumer::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesConsumer), &PY_TYPE_DEF(DocValuesConsumer), module, "DocValuesConsumer", 0);
        }

        void t_DocValuesConsumer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesConsumer), "class_", make_descriptor(DocValuesConsumer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesConsumer), "wrapfn_", make_descriptor(t_DocValuesConsumer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesConsumer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesConsumer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesConsumer::initializeClass, 1)))
            return NULL;
          return t_DocValuesConsumer::wrap_Object(DocValuesConsumer(((t_DocValuesConsumer *) arg)->object.this$));
        }
        static PyObject *t_DocValuesConsumer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesConsumer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesConsumer_addBinaryField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesProducer a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::DocValuesProducer::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.addBinaryField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addBinaryField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_addNumericField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesProducer a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::DocValuesProducer::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.addNumericField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addNumericField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_addSortedField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesProducer a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::DocValuesProducer::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.addSortedField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addSortedField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_addSortedNumericField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesProducer a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::DocValuesProducer::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.addSortedNumericField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addSortedNumericField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_addSortedSetField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesProducer a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::DocValuesProducer::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.addSortedSetField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addSortedSetField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_isSingleValued(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::Iterable a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArg(arg, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::DocValuesConsumer::isSingleValued(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "isSingleValued", arg);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_merge(t_DocValuesConsumer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.merge(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", arg);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeBinaryField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.mergeBinaryField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeBinaryField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeNumericField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.mergeNumericField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeNumericField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeSortedField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.mergeSortedField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeSortedField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeSortedNumericField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.mergeSortedNumericField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeSortedNumericField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeSortedSetField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.mergeSortedSetField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeSortedSetField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_singletonView(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::Iterable a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Number a2((jobject) NULL);
          ::java::lang::Iterable result((jobject) NULL);

          if (!parseArgs(args, "KKO", ::java::lang::Iterable::initializeClass, ::java::lang::Iterable::initializeClass, ::java::lang::PY_TYPE(Number), &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::DocValuesConsumer::singletonView(a0, a1, a2));
            return ::java::lang::t_Iterable::wrap_Object(result, ::java::lang::PY_TYPE(Number));
          }

          PyErr_SetArgsError(type, "singletonView", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTermExtractor.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTerm.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *WeightedSpanTermExtractor::class$ = NULL;
          jmethodID *WeightedSpanTermExtractor::mids$ = NULL;
          bool WeightedSpanTermExtractor::live$ = false;

          jclass WeightedSpanTermExtractor::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/WeightedSpanTermExtractor");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_getExpandMultiTermQuery_8454bd5aa23fd11e] = env->getMethodID(cls, "getExpandMultiTermQuery", "()Z");
              mids$[mid_getTokenStream_53a594dacf37f73d] = env->getMethodID(cls, "getTokenStream", "()Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getWeightedSpanTerms_f9503d31d7a9e97f] = env->getMethodID(cls, "getWeightedSpanTerms", "(Lorg/apache/lucene/search/Query;FLorg/apache/lucene/analysis/TokenStream;)Ljava/util/Map;");
              mids$[mid_getWeightedSpanTerms_af15e3109c3c9b91] = env->getMethodID(cls, "getWeightedSpanTerms", "(Lorg/apache/lucene/search/Query;FLorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)Ljava/util/Map;");
              mids$[mid_getWeightedSpanTermsWithScores_82ac601150f7f1bc] = env->getMethodID(cls, "getWeightedSpanTermsWithScores", "(Lorg/apache/lucene/search/Query;FLorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;Lorg/apache/lucene/index/IndexReader;)Ljava/util/Map;");
              mids$[mid_isCachedTokenStream_8454bd5aa23fd11e] = env->getMethodID(cls, "isCachedTokenStream", "()Z");
              mids$[mid_isUsePayloads_8454bd5aa23fd11e] = env->getMethodID(cls, "isUsePayloads", "()Z");
              mids$[mid_setExpandMultiTermQuery_9d72768e8fdce2b7] = env->getMethodID(cls, "setExpandMultiTermQuery", "(Z)V");
              mids$[mid_setUsePayloads_9d72768e8fdce2b7] = env->getMethodID(cls, "setUsePayloads", "(Z)V");
              mids$[mid_setWrapIfNotCachingTokenFilter_9d72768e8fdce2b7] = env->getMethodID(cls, "setWrapIfNotCachingTokenFilter", "(Z)V");
              mids$[mid_isQueryUnsupported_a895c7f53785ebe6] = env->getMethodID(cls, "isQueryUnsupported", "(Ljava/lang/Class;)Z");
              mids$[mid_extractWeightedTerms_598e5dfa39a5661f] = env->getMethodID(cls, "extractWeightedTerms", "(Ljava/util/Map;Lorg/apache/lucene/search/Query;F)V");
              mids$[mid_extract_7d69c9d67bb3f6f1] = env->getMethodID(cls, "extract", "(Lorg/apache/lucene/search/Query;FLjava/util/Map;)V");
              mids$[mid_extractWeightedSpanTerms_866cbf06e72a1d01] = env->getMethodID(cls, "extractWeightedSpanTerms", "(Ljava/util/Map;Lorg/apache/lucene/search/spans/SpanQuery;F)V");
              mids$[mid_mustRewriteQuery_4fe20db295dace53] = env->getMethodID(cls, "mustRewriteQuery", "(Lorg/apache/lucene/search/spans/SpanQuery;)Z");
              mids$[mid_collectSpanQueryFields_01ed0dbd15b78229] = env->getMethodID(cls, "collectSpanQueryFields", "(Lorg/apache/lucene/search/spans/SpanQuery;Ljava/util/Set;)V");
              mids$[mid_extractUnknownQuery_66cecb3d21bca6df] = env->getMethodID(cls, "extractUnknownQuery", "(Lorg/apache/lucene/search/Query;Ljava/util/Map;)V");
              mids$[mid_fieldNameComparator_145b2d0af0c06b93] = env->getMethodID(cls, "fieldNameComparator", "(Ljava/lang/String;)Z");
              mids$[mid_getLeafContext_fb87af9aadb3c2c5] = env->getMethodID(cls, "getLeafContext", "()Lorg/apache/lucene/index/LeafReaderContext;");
              mids$[mid_setMaxDocCharsToAnalyze_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxDocCharsToAnalyze", "(I)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedSpanTermExtractor::WeightedSpanTermExtractor() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          WeightedSpanTermExtractor::WeightedSpanTermExtractor(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

          jboolean WeightedSpanTermExtractor::getExpandMultiTermQuery() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getExpandMultiTermQuery_8454bd5aa23fd11e]);
          }

          ::org::apache::lucene::analysis::TokenStream WeightedSpanTermExtractor::getTokenStream() const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_getTokenStream_53a594dacf37f73d]));
          }

          ::java::util::Map WeightedSpanTermExtractor::getWeightedSpanTerms(const ::org::apache::lucene::search::Query & a0, jfloat a1, const ::org::apache::lucene::analysis::TokenStream & a2) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getWeightedSpanTerms_f9503d31d7a9e97f], a0.this$, a1, a2.this$));
          }

          ::java::util::Map WeightedSpanTermExtractor::getWeightedSpanTerms(const ::org::apache::lucene::search::Query & a0, jfloat a1, const ::org::apache::lucene::analysis::TokenStream & a2, const ::java::lang::String & a3) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getWeightedSpanTerms_af15e3109c3c9b91], a0.this$, a1, a2.this$, a3.this$));
          }

          ::java::util::Map WeightedSpanTermExtractor::getWeightedSpanTermsWithScores(const ::org::apache::lucene::search::Query & a0, jfloat a1, const ::org::apache::lucene::analysis::TokenStream & a2, const ::java::lang::String & a3, const ::org::apache::lucene::index::IndexReader & a4) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getWeightedSpanTermsWithScores_82ac601150f7f1bc], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          jboolean WeightedSpanTermExtractor::isCachedTokenStream() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCachedTokenStream_8454bd5aa23fd11e]);
          }

          jboolean WeightedSpanTermExtractor::isUsePayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isUsePayloads_8454bd5aa23fd11e]);
          }

          void WeightedSpanTermExtractor::setExpandMultiTermQuery(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setExpandMultiTermQuery_9d72768e8fdce2b7], a0);
          }

          void WeightedSpanTermExtractor::setUsePayloads(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setUsePayloads_9d72768e8fdce2b7], a0);
          }

          void WeightedSpanTermExtractor::setWrapIfNotCachingTokenFilter(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setWrapIfNotCachingTokenFilter_9d72768e8fdce2b7], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_WeightedSpanTermExtractor_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedSpanTermExtractor_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedSpanTermExtractor_init_(t_WeightedSpanTermExtractor *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedSpanTermExtractor_getExpandMultiTermQuery(t_WeightedSpanTermExtractor *self);
          static PyObject *t_WeightedSpanTermExtractor_getTokenStream(t_WeightedSpanTermExtractor *self);
          static PyObject *t_WeightedSpanTermExtractor_getWeightedSpanTerms(t_WeightedSpanTermExtractor *self, PyObject *args);
          static PyObject *t_WeightedSpanTermExtractor_getWeightedSpanTermsWithScores(t_WeightedSpanTermExtractor *self, PyObject *args);
          static PyObject *t_WeightedSpanTermExtractor_isCachedTokenStream(t_WeightedSpanTermExtractor *self);
          static PyObject *t_WeightedSpanTermExtractor_isUsePayloads(t_WeightedSpanTermExtractor *self);
          static PyObject *t_WeightedSpanTermExtractor_setExpandMultiTermQuery(t_WeightedSpanTermExtractor *self, PyObject *arg);
          static PyObject *t_WeightedSpanTermExtractor_setUsePayloads(t_WeightedSpanTermExtractor *self, PyObject *arg);
          static PyObject *t_WeightedSpanTermExtractor_setWrapIfNotCachingTokenFilter(t_WeightedSpanTermExtractor *self, PyObject *arg);
          static PyObject *t_WeightedSpanTermExtractor_get__cachedTokenStream(t_WeightedSpanTermExtractor *self, void *data);
          static PyObject *t_WeightedSpanTermExtractor_get__expandMultiTermQuery(t_WeightedSpanTermExtractor *self, void *data);
          static int t_WeightedSpanTermExtractor_set__expandMultiTermQuery(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data);
          static PyObject *t_WeightedSpanTermExtractor_get__tokenStream(t_WeightedSpanTermExtractor *self, void *data);
          static PyObject *t_WeightedSpanTermExtractor_get__usePayloads(t_WeightedSpanTermExtractor *self, void *data);
          static int t_WeightedSpanTermExtractor_set__usePayloads(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data);
          static int t_WeightedSpanTermExtractor_set__wrapIfNotCachingTokenFilter(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data);
          static PyGetSetDef t_WeightedSpanTermExtractor__fields_[] = {
            DECLARE_GET_FIELD(t_WeightedSpanTermExtractor, cachedTokenStream),
            DECLARE_GETSET_FIELD(t_WeightedSpanTermExtractor, expandMultiTermQuery),
            DECLARE_GET_FIELD(t_WeightedSpanTermExtractor, tokenStream),
            DECLARE_GETSET_FIELD(t_WeightedSpanTermExtractor, usePayloads),
            DECLARE_SET_FIELD(t_WeightedSpanTermExtractor, wrapIfNotCachingTokenFilter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WeightedSpanTermExtractor__methods_[] = {
            DECLARE_METHOD(t_WeightedSpanTermExtractor, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, getExpandMultiTermQuery, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, getTokenStream, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, getWeightedSpanTerms, METH_VARARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, getWeightedSpanTermsWithScores, METH_VARARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, isCachedTokenStream, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, isUsePayloads, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, setExpandMultiTermQuery, METH_O),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, setUsePayloads, METH_O),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, setWrapIfNotCachingTokenFilter, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(WeightedSpanTermExtractor)[] = {
            { Py_tp_methods, t_WeightedSpanTermExtractor__methods_ },
            { Py_tp_init, (void *) t_WeightedSpanTermExtractor_init_ },
            { Py_tp_getset, t_WeightedSpanTermExtractor__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(WeightedSpanTermExtractor)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(WeightedSpanTermExtractor, t_WeightedSpanTermExtractor, WeightedSpanTermExtractor);

          void t_WeightedSpanTermExtractor::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedSpanTermExtractor), &PY_TYPE_DEF(WeightedSpanTermExtractor), module, "WeightedSpanTermExtractor", 0);
          }

          void t_WeightedSpanTermExtractor::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(WeightedSpanTermExtractor), "class_", make_descriptor(WeightedSpanTermExtractor::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WeightedSpanTermExtractor), "wrapfn_", make_descriptor(t_WeightedSpanTermExtractor::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WeightedSpanTermExtractor), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedSpanTermExtractor_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedSpanTermExtractor::initializeClass, 1)))
              return NULL;
            return t_WeightedSpanTermExtractor::wrap_Object(WeightedSpanTermExtractor(((t_WeightedSpanTermExtractor *) arg)->object.this$));
          }
          static PyObject *t_WeightedSpanTermExtractor_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedSpanTermExtractor::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedSpanTermExtractor_init_(t_WeightedSpanTermExtractor *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                WeightedSpanTermExtractor object((jobject) NULL);

                INT_CALL(object = WeightedSpanTermExtractor());
                self->object = object;
                break;
              }
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                WeightedSpanTermExtractor object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = WeightedSpanTermExtractor(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedSpanTermExtractor_getExpandMultiTermQuery(t_WeightedSpanTermExtractor *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getExpandMultiTermQuery());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_WeightedSpanTermExtractor_getTokenStream(t_WeightedSpanTermExtractor *self)
          {
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
            OBJ_CALL(result = self->object.getTokenStream());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          static PyObject *t_WeightedSpanTermExtractor_getWeightedSpanTerms(t_WeightedSpanTermExtractor *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                jfloat a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "kFk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getWeightedSpanTerms(a0, a1, a2));
                  return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::org::apache::lucene::search::highlight::PY_TYPE(WeightedSpanTerm));
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                jfloat a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "kFks", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.getWeightedSpanTerms(a0, a1, a2, a3));
                  return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::org::apache::lucene::search::highlight::PY_TYPE(WeightedSpanTerm));
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getWeightedSpanTerms", args);
            return NULL;
          }

          static PyObject *t_WeightedSpanTermExtractor_getWeightedSpanTermsWithScores(t_WeightedSpanTermExtractor *self, PyObject *args)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
            ::java::lang::String a3((jobject) NULL);
            ::org::apache::lucene::index::IndexReader a4((jobject) NULL);
            ::java::util::Map result((jobject) NULL);

            if (!parseArgs(args, "kFksk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getWeightedSpanTermsWithScores(a0, a1, a2, a3, a4));
              return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::org::apache::lucene::search::highlight::PY_TYPE(WeightedSpanTerm));
            }

            PyErr_SetArgsError((PyObject *) self, "getWeightedSpanTermsWithScores", args);
            return NULL;
          }

          static PyObject *t_WeightedSpanTermExtractor_isCachedTokenStream(t_WeightedSpanTermExtractor *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isCachedTokenStream());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_WeightedSpanTermExtractor_isUsePayloads(t_WeightedSpanTermExtractor *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isUsePayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_WeightedSpanTermExtractor_setExpandMultiTermQuery(t_WeightedSpanTermExtractor *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setExpandMultiTermQuery(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setExpandMultiTermQuery", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTermExtractor_setUsePayloads(t_WeightedSpanTermExtractor *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setUsePayloads(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setUsePayloads", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTermExtractor_setWrapIfNotCachingTokenFilter(t_WeightedSpanTermExtractor *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setWrapIfNotCachingTokenFilter(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setWrapIfNotCachingTokenFilter", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTermExtractor_get__cachedTokenStream(t_WeightedSpanTermExtractor *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isCachedTokenStream());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_WeightedSpanTermExtractor_get__expandMultiTermQuery(t_WeightedSpanTermExtractor *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getExpandMultiTermQuery());
            Py_RETURN_BOOL(value);
          }
          static int t_WeightedSpanTermExtractor_set__expandMultiTermQuery(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setExpandMultiTermQuery(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "expandMultiTermQuery", arg);
            return -1;
          }

          static PyObject *t_WeightedSpanTermExtractor_get__tokenStream(t_WeightedSpanTermExtractor *self, void *data)
          {
            ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
            OBJ_CALL(value = self->object.getTokenStream());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(value);
          }

          static PyObject *t_WeightedSpanTermExtractor_get__usePayloads(t_WeightedSpanTermExtractor *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isUsePayloads());
            Py_RETURN_BOOL(value);
          }
          static int t_WeightedSpanTermExtractor_set__usePayloads(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setUsePayloads(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "usePayloads", arg);
            return -1;
          }

          static int t_WeightedSpanTermExtractor_set__wrapIfNotCachingTokenFilter(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setWrapIfNotCachingTokenFilter(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "wrapIfNotCachingTokenFilter", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/MultiLevelSkipListReader.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *MultiLevelSkipListReader::class$ = NULL;
        jmethodID *MultiLevelSkipListReader::mids$ = NULL;
        bool MultiLevelSkipListReader::live$ = false;

        jclass MultiLevelSkipListReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/MultiLevelSkipListReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getDoc_9972fcc56b44e79d] = env->getMethodID(cls, "getDoc", "()I");
            mids$[mid_init_7cbcb52ba5068aff] = env->getMethodID(cls, "init", "(JI)V");
            mids$[mid_skipTo_1e143afe1894d213] = env->getMethodID(cls, "skipTo", "(I)I");
            mids$[mid_seekChild_040c4cd0390c5aff] = env->getMethodID(cls, "seekChild", "(I)V");
            mids$[mid_setLastSkipData_040c4cd0390c5aff] = env->getMethodID(cls, "setLastSkipData", "(I)V");
            mids$[mid_readSkipData_d92727cc8c1d9954] = env->getMethodID(cls, "readSkipData", "(ILorg/apache/lucene/store/IndexInput;)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void MultiLevelSkipListReader::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        jint MultiLevelSkipListReader::getDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_getDoc_9972fcc56b44e79d]);
        }

        void MultiLevelSkipListReader::init(jlong a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_init_7cbcb52ba5068aff], a0, a1);
        }

        jint MultiLevelSkipListReader::skipTo(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_skipTo_1e143afe1894d213], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_MultiLevelSkipListReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiLevelSkipListReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiLevelSkipListReader_close(t_MultiLevelSkipListReader *self);
        static PyObject *t_MultiLevelSkipListReader_getDoc(t_MultiLevelSkipListReader *self);
        static PyObject *t_MultiLevelSkipListReader_init(t_MultiLevelSkipListReader *self, PyObject *args);
        static PyObject *t_MultiLevelSkipListReader_skipTo(t_MultiLevelSkipListReader *self, PyObject *arg);
        static PyObject *t_MultiLevelSkipListReader_get__doc(t_MultiLevelSkipListReader *self, void *data);
        static PyGetSetDef t_MultiLevelSkipListReader__fields_[] = {
          DECLARE_GET_FIELD(t_MultiLevelSkipListReader, doc),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiLevelSkipListReader__methods_[] = {
          DECLARE_METHOD(t_MultiLevelSkipListReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, close, METH_NOARGS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, getDoc, METH_NOARGS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, init, METH_VARARGS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, skipTo, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiLevelSkipListReader)[] = {
          { Py_tp_methods, t_MultiLevelSkipListReader__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_MultiLevelSkipListReader__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiLevelSkipListReader)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MultiLevelSkipListReader, t_MultiLevelSkipListReader, MultiLevelSkipListReader);

        void t_MultiLevelSkipListReader::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiLevelSkipListReader), &PY_TYPE_DEF(MultiLevelSkipListReader), module, "MultiLevelSkipListReader", 0);
        }

        void t_MultiLevelSkipListReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiLevelSkipListReader), "class_", make_descriptor(MultiLevelSkipListReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiLevelSkipListReader), "wrapfn_", make_descriptor(t_MultiLevelSkipListReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiLevelSkipListReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiLevelSkipListReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiLevelSkipListReader::initializeClass, 1)))
            return NULL;
          return t_MultiLevelSkipListReader::wrap_Object(MultiLevelSkipListReader(((t_MultiLevelSkipListReader *) arg)->object.this$));
        }
        static PyObject *t_MultiLevelSkipListReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiLevelSkipListReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiLevelSkipListReader_close(t_MultiLevelSkipListReader *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_MultiLevelSkipListReader_getDoc(t_MultiLevelSkipListReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getDoc());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_MultiLevelSkipListReader_init(t_MultiLevelSkipListReader *self, PyObject *args)
        {
          jlong a0;
          jint a1;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(self->object.init(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", args);
          return NULL;
        }

        static PyObject *t_MultiLevelSkipListReader_skipTo(t_MultiLevelSkipListReader *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.skipTo(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "skipTo", arg);
          return NULL;
        }

        static PyObject *t_MultiLevelSkipListReader_get__doc(t_MultiLevelSkipListReader *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDoc());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/POS$Type.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ko/POS$Type.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {

          ::java::lang::Class *POS$Type::class$ = NULL;
          jmethodID *POS$Type::mids$ = NULL;
          bool POS$Type::live$ = false;
          POS$Type *POS$Type::COMPOUND = NULL;
          POS$Type *POS$Type::INFLECT = NULL;
          POS$Type *POS$Type::MORPHEME = NULL;
          POS$Type *POS$Type::PREANALYSIS = NULL;

          jclass POS$Type::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/POS$Type");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_6c89cd379c969f98] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ko/POS$Type;");
              mids$[mid_values_baad864b4f439dae] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/analysis/ko/POS$Type;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              COMPOUND = new POS$Type(env->getStaticObjectField(cls, "COMPOUND", "Lorg/apache/lucene/analysis/ko/POS$Type;"));
              INFLECT = new POS$Type(env->getStaticObjectField(cls, "INFLECT", "Lorg/apache/lucene/analysis/ko/POS$Type;"));
              MORPHEME = new POS$Type(env->getStaticObjectField(cls, "MORPHEME", "Lorg/apache/lucene/analysis/ko/POS$Type;"));
              PREANALYSIS = new POS$Type(env->getStaticObjectField(cls, "PREANALYSIS", "Lorg/apache/lucene/analysis/ko/POS$Type;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          POS$Type POS$Type::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return POS$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_6c89cd379c969f98], a0.this$));
          }

          JArray< POS$Type > POS$Type::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< POS$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_baad864b4f439dae]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          static PyObject *t_POS$Type_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_POS$Type_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_POS$Type_of_(t_POS$Type *self, PyObject *args);
          static PyObject *t_POS$Type_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_POS$Type_values(PyTypeObject *type);
          static PyObject *t_POS$Type_get__parameters_(t_POS$Type *self, void *data);
          static PyGetSetDef t_POS$Type__fields_[] = {
            DECLARE_GET_FIELD(t_POS$Type, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_POS$Type__methods_[] = {
            DECLARE_METHOD(t_POS$Type, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_POS$Type, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_POS$Type, of_, METH_VARARGS),
            DECLARE_METHOD(t_POS$Type, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_POS$Type, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(POS$Type)[] = {
            { Py_tp_methods, t_POS$Type__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_POS$Type__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(POS$Type)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(POS$Type, t_POS$Type, POS$Type);
          PyObject *t_POS$Type::wrap_Object(const POS$Type& object, PyTypeObject *p0)
          {
            PyObject *obj = t_POS$Type::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_POS$Type *self = (t_POS$Type *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_POS$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_POS$Type::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_POS$Type *self = (t_POS$Type *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_POS$Type::install(PyObject *module)
          {
            installType(&PY_TYPE(POS$Type), &PY_TYPE_DEF(POS$Type), module, "POS$Type", 0);
          }

          void t_POS$Type::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Type), "class_", make_descriptor(POS$Type::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Type), "wrapfn_", make_descriptor(t_POS$Type::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Type), "boxfn_", make_descriptor(boxObject));
            env->getClass(POS$Type::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Type), "COMPOUND", make_descriptor(t_POS$Type::wrap_Object(*POS$Type::COMPOUND)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Type), "INFLECT", make_descriptor(t_POS$Type::wrap_Object(*POS$Type::INFLECT)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Type), "MORPHEME", make_descriptor(t_POS$Type::wrap_Object(*POS$Type::MORPHEME)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(POS$Type), "PREANALYSIS", make_descriptor(t_POS$Type::wrap_Object(*POS$Type::PREANALYSIS)));
          }

          static PyObject *t_POS$Type_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, POS$Type::initializeClass, 1)))
              return NULL;
            return t_POS$Type::wrap_Object(POS$Type(((t_POS$Type *) arg)->object.this$));
          }
          static PyObject *t_POS$Type_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, POS$Type::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_POS$Type_of_(t_POS$Type *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_POS$Type_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            POS$Type result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ko::POS$Type::valueOf(a0));
              return t_POS$Type::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_POS$Type_values(PyTypeObject *type)
          {
            JArray< POS$Type > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ko::POS$Type::values());
            return JArray<jobject>(result.this$).wrap(t_POS$Type::wrap_jobject);
          }
          static PyObject *t_POS$Type_get__parameters_(t_POS$Type *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CollectionTerminatedException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CollectionTerminatedException::class$ = NULL;
        jmethodID *CollectionTerminatedException::mids$ = NULL;
        bool CollectionTerminatedException::live$ = false;

        jclass CollectionTerminatedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CollectionTerminatedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollectionTerminatedException::CollectionTerminatedException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CollectionTerminatedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectionTerminatedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollectionTerminatedException_init_(t_CollectionTerminatedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_CollectionTerminatedException__methods_[] = {
          DECLARE_METHOD(t_CollectionTerminatedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionTerminatedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CollectionTerminatedException)[] = {
          { Py_tp_methods, t_CollectionTerminatedException__methods_ },
          { Py_tp_init, (void *) t_CollectionTerminatedException_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CollectionTerminatedException)[] = {
          &PY_TYPE_DEF(::java::lang::RuntimeException),
          NULL
        };

        DEFINE_TYPE(CollectionTerminatedException, t_CollectionTerminatedException, CollectionTerminatedException);

        void t_CollectionTerminatedException::install(PyObject *module)
        {
          installType(&PY_TYPE(CollectionTerminatedException), &PY_TYPE_DEF(CollectionTerminatedException), module, "CollectionTerminatedException", 0);
        }

        void t_CollectionTerminatedException::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollectionTerminatedException), "class_", make_descriptor(CollectionTerminatedException::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollectionTerminatedException), "wrapfn_", make_descriptor(t_CollectionTerminatedException::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollectionTerminatedException), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollectionTerminatedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollectionTerminatedException::initializeClass, 1)))
            return NULL;
          return t_CollectionTerminatedException::wrap_Object(CollectionTerminatedException(((t_CollectionTerminatedException *) arg)->object.this$));
        }
        static PyObject *t_CollectionTerminatedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollectionTerminatedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollectionTerminatedException_init_(t_CollectionTerminatedException *self, PyObject *args, PyObject *kwds)
        {
          CollectionTerminatedException object((jobject) NULL);

          INT_CALL(object = CollectionTerminatedException());
          self->object = object;

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ExitableDirectoryReader$ExitableTerms.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/QueryTimeout.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ExitableDirectoryReader$ExitableTerms::class$ = NULL;
        jmethodID *ExitableDirectoryReader$ExitableTerms::mids$ = NULL;
        bool ExitableDirectoryReader$ExitableTerms::live$ = false;

        jclass ExitableDirectoryReader$ExitableTerms::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ExitableDirectoryReader$ExitableTerms");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1a6b9c31362293ed] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/index/QueryTimeout;)V");
            mids$[mid_intersect_20ab83ddd033f0a8] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_iterator_3f9a21827903a65f] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/index/TermsEnum;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ExitableDirectoryReader$ExitableTerms::ExitableDirectoryReader$ExitableTerms(const ::org::apache::lucene::index::Terms & a0, const ::org::apache::lucene::index::QueryTimeout & a1) : ::org::apache::lucene::index::FilterLeafReader$FilterTerms(env->newObject(initializeClass, &mids$, mid_init$_1a6b9c31362293ed, a0.this$, a1.this$)) {}

        ::org::apache::lucene::index::TermsEnum ExitableDirectoryReader$ExitableTerms::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_20ab83ddd033f0a8], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::TermsEnum ExitableDirectoryReader$ExitableTerms::iterator() const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_3f9a21827903a65f]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ExitableDirectoryReader$ExitableTerms_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ExitableDirectoryReader$ExitableTerms_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ExitableDirectoryReader$ExitableTerms_of_(t_ExitableDirectoryReader$ExitableTerms *self, PyObject *args);
        static int t_ExitableDirectoryReader$ExitableTerms_init_(t_ExitableDirectoryReader$ExitableTerms *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ExitableDirectoryReader$ExitableTerms_intersect(t_ExitableDirectoryReader$ExitableTerms *self, PyObject *args);
        static PyObject *t_ExitableDirectoryReader$ExitableTerms_iterator(t_ExitableDirectoryReader$ExitableTerms *self, PyObject *args);
        static PyObject *t_ExitableDirectoryReader$ExitableTerms_get__parameters_(t_ExitableDirectoryReader$ExitableTerms *self, void *data);
        static PyGetSetDef t_ExitableDirectoryReader$ExitableTerms__fields_[] = {
          DECLARE_GET_FIELD(t_ExitableDirectoryReader$ExitableTerms, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ExitableDirectoryReader$ExitableTerms__methods_[] = {
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableTerms, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableTerms, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableTerms, of_, METH_VARARGS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableTerms, intersect, METH_VARARGS),
          DECLARE_METHOD(t_ExitableDirectoryReader$ExitableTerms, iterator, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ExitableDirectoryReader$ExitableTerms)[] = {
          { Py_tp_methods, t_ExitableDirectoryReader$ExitableTerms__methods_ },
          { Py_tp_init, (void *) t_ExitableDirectoryReader$ExitableTerms_init_ },
          { Py_tp_getset, t_ExitableDirectoryReader$ExitableTerms__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ExitableDirectoryReader$ExitableTerms)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::FilterLeafReader$FilterTerms),
          NULL
        };

        DEFINE_TYPE(ExitableDirectoryReader$ExitableTerms, t_ExitableDirectoryReader$ExitableTerms, ExitableDirectoryReader$ExitableTerms);
        PyObject *t_ExitableDirectoryReader$ExitableTerms::wrap_Object(const ExitableDirectoryReader$ExitableTerms& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ExitableDirectoryReader$ExitableTerms::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ExitableDirectoryReader$ExitableTerms *self = (t_ExitableDirectoryReader$ExitableTerms *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ExitableDirectoryReader$ExitableTerms::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ExitableDirectoryReader$ExitableTerms::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ExitableDirectoryReader$ExitableTerms *self = (t_ExitableDirectoryReader$ExitableTerms *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ExitableDirectoryReader$ExitableTerms::install(PyObject *module)
        {
          installType(&PY_TYPE(ExitableDirectoryReader$ExitableTerms), &PY_TYPE_DEF(ExitableDirectoryReader$ExitableTerms), module, "ExitableDirectoryReader$ExitableTerms", 0);
        }

        void t_ExitableDirectoryReader$ExitableTerms::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader$ExitableTerms), "class_", make_descriptor(ExitableDirectoryReader$ExitableTerms::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader$ExitableTerms), "wrapfn_", make_descriptor(t_ExitableDirectoryReader$ExitableTerms::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ExitableDirectoryReader$ExitableTerms), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ExitableDirectoryReader$ExitableTerms_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ExitableDirectoryReader$ExitableTerms::initializeClass, 1)))
            return NULL;
          return t_ExitableDirectoryReader$ExitableTerms::wrap_Object(ExitableDirectoryReader$ExitableTerms(((t_ExitableDirectoryReader$ExitableTerms *) arg)->object.this$));
        }
        static PyObject *t_ExitableDirectoryReader$ExitableTerms_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ExitableDirectoryReader$ExitableTerms::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ExitableDirectoryReader$ExitableTerms_of_(t_ExitableDirectoryReader$ExitableTerms *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ExitableDirectoryReader$ExitableTerms_init_(t_ExitableDirectoryReader$ExitableTerms *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          ::org::apache::lucene::index::QueryTimeout a1((jobject) NULL);
          ExitableDirectoryReader$ExitableTerms object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::Terms::initializeClass, ::org::apache::lucene::index::QueryTimeout::initializeClass, &a0, &a1))
          {
            INT_CALL(object = ExitableDirectoryReader$ExitableTerms(a0, a1));
            self->object = object;
            self->parameters[0] = ::org::apache::lucene::index::PY_TYPE(LeafReader);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ExitableDirectoryReader$ExitableTerms_intersect(t_ExitableDirectoryReader$ExitableTerms *self, PyObject *args)
        {
          ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.intersect(a0, a1));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ExitableDirectoryReader$ExitableTerms), (PyObject *) self, "intersect", args, 2);
        }

        static PyObject *t_ExitableDirectoryReader$ExitableTerms_iterator(t_ExitableDirectoryReader$ExitableTerms *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ExitableDirectoryReader$ExitableTerms), (PyObject *) self, "iterator", args, 2);
        }
        static PyObject *t_ExitableDirectoryReader$ExitableTerms_get__parameters_(t_ExitableDirectoryReader$ExitableTerms *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ckb/SoraniStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniStemFilterFactory::class$ = NULL;
          jmethodID *SoraniStemFilterFactory::mids$ = NULL;
          bool SoraniStemFilterFactory::live$ = false;
          ::java::lang::String *SoraniStemFilterFactory::NAME = NULL;

          jclass SoraniStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a21c839b5fd7fef3] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ckb/SoraniStemFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniStemFilterFactory::SoraniStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::ckb::SoraniStemFilter SoraniStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ckb::SoraniStemFilter(env->callObjectMethod(this$, mids$[mid_create_a21c839b5fd7fef3], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniStemFilterFactory_init_(t_SoraniStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniStemFilterFactory_create(t_SoraniStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_SoraniStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SoraniStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SoraniStemFilterFactory)[] = {
            { Py_tp_methods, t_SoraniStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_SoraniStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SoraniStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(SoraniStemFilterFactory, t_SoraniStemFilterFactory, SoraniStemFilterFactory);

          void t_SoraniStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniStemFilterFactory), &PY_TYPE_DEF(SoraniStemFilterFactory), module, "SoraniStemFilterFactory", 0);
          }

          void t_SoraniStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniStemFilterFactory), "class_", make_descriptor(SoraniStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniStemFilterFactory), "wrapfn_", make_descriptor(t_SoraniStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(SoraniStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniStemFilterFactory), "NAME", make_descriptor(j2p(*SoraniStemFilterFactory::NAME)));
          }

          static PyObject *t_SoraniStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SoraniStemFilterFactory::wrap_Object(SoraniStemFilterFactory(((t_SoraniStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SoraniStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniStemFilterFactory_init_(t_SoraniStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SoraniStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SoraniStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniStemFilterFactory_create(t_SoraniStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ckb::SoraniStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ckb::t_SoraniStemFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SoraniStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianNormalizationFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianNormalizationFilterFactory::class$ = NULL;
          jmethodID *PersianNormalizationFilterFactory::mids$ = NULL;
          bool PersianNormalizationFilterFactory::live$ = false;
          ::java::lang::String *PersianNormalizationFilterFactory::NAME = NULL;

          jclass PersianNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_normalize_6de1e28d9d10cd9e] = env->getMethodID(cls, "normalize", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianNormalizationFilterFactory::PersianNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream PersianNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream PersianNormalizationFilterFactory::normalize(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_normalize_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianNormalizationFilterFactory_init_(t_PersianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianNormalizationFilterFactory_create(t_PersianNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_PersianNormalizationFilterFactory_normalize(t_PersianNormalizationFilterFactory *self, PyObject *args);

          static PyMethodDef t_PersianNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PersianNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_PersianNormalizationFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PersianNormalizationFilterFactory)[] = {
            { Py_tp_methods, t_PersianNormalizationFilterFactory__methods_ },
            { Py_tp_init, (void *) t_PersianNormalizationFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PersianNormalizationFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(PersianNormalizationFilterFactory, t_PersianNormalizationFilterFactory, PersianNormalizationFilterFactory);

          void t_PersianNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianNormalizationFilterFactory), &PY_TYPE_DEF(PersianNormalizationFilterFactory), module, "PersianNormalizationFilterFactory", 0);
          }

          void t_PersianNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianNormalizationFilterFactory), "class_", make_descriptor(PersianNormalizationFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianNormalizationFilterFactory), "wrapfn_", make_descriptor(t_PersianNormalizationFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianNormalizationFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(PersianNormalizationFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianNormalizationFilterFactory), "NAME", make_descriptor(j2p(*PersianNormalizationFilterFactory::NAME)));
          }

          static PyObject *t_PersianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PersianNormalizationFilterFactory::wrap_Object(PersianNormalizationFilterFactory(((t_PersianNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PersianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianNormalizationFilterFactory_init_(t_PersianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PersianNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PersianNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianNormalizationFilterFactory_create(t_PersianNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PersianNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_PersianNormalizationFilterFactory_normalize(t_PersianNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PersianNormalizationFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$MergeContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$MergeContext::class$ = NULL;
        jmethodID *MergePolicy$MergeContext::mids$ = NULL;
        bool MergePolicy$MergeContext::live$ = false;

        jclass MergePolicy$MergeContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$MergeContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getInfoStream_05a6766ae71db614] = env->getMethodID(cls, "getInfoStream", "()Lorg/apache/lucene/util/InfoStream;");
            mids$[mid_getMergingSegments_7dcf4034c6d1a92a] = env->getMethodID(cls, "getMergingSegments", "()Ljava/util/Set;");
            mids$[mid_numDeletedDocs_a14757c1f6c5c9ec] = env->getMethodID(cls, "numDeletedDocs", "(Lorg/apache/lucene/index/SegmentCommitInfo;)I");
            mids$[mid_numDeletesToMerge_a14757c1f6c5c9ec] = env->getMethodID(cls, "numDeletesToMerge", "(Lorg/apache/lucene/index/SegmentCommitInfo;)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::InfoStream MergePolicy$MergeContext::getInfoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->callObjectMethod(this$, mids$[mid_getInfoStream_05a6766ae71db614]));
        }

        ::java::util::Set MergePolicy$MergeContext::getMergingSegments() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getMergingSegments_7dcf4034c6d1a92a]));
        }

        jint MergePolicy$MergeContext::numDeletedDocs(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_numDeletedDocs_a14757c1f6c5c9ec], a0.this$);
        }

        jint MergePolicy$MergeContext::numDeletesToMerge(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_numDeletesToMerge_a14757c1f6c5c9ec], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$MergeContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$MergeContext_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$MergeContext_getInfoStream(t_MergePolicy$MergeContext *self);
        static PyObject *t_MergePolicy$MergeContext_getMergingSegments(t_MergePolicy$MergeContext *self);
        static PyObject *t_MergePolicy$MergeContext_numDeletedDocs(t_MergePolicy$MergeContext *self, PyObject *arg);
        static PyObject *t_MergePolicy$MergeContext_numDeletesToMerge(t_MergePolicy$MergeContext *self, PyObject *arg);
        static PyObject *t_MergePolicy$MergeContext_get__infoStream(t_MergePolicy$MergeContext *self, void *data);
        static PyObject *t_MergePolicy$MergeContext_get__mergingSegments(t_MergePolicy$MergeContext *self, void *data);
        static PyGetSetDef t_MergePolicy$MergeContext__fields_[] = {
          DECLARE_GET_FIELD(t_MergePolicy$MergeContext, infoStream),
          DECLARE_GET_FIELD(t_MergePolicy$MergeContext, mergingSegments),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy$MergeContext__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$MergeContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeContext, getInfoStream, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$MergeContext, getMergingSegments, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$MergeContext, numDeletedDocs, METH_O),
          DECLARE_METHOD(t_MergePolicy$MergeContext, numDeletesToMerge, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MergePolicy$MergeContext)[] = {
          { Py_tp_methods, t_MergePolicy$MergeContext__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_MergePolicy$MergeContext__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MergePolicy$MergeContext)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MergePolicy$MergeContext, t_MergePolicy$MergeContext, MergePolicy$MergeContext);

        void t_MergePolicy$MergeContext::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$MergeContext), &PY_TYPE_DEF(MergePolicy$MergeContext), module, "MergePolicy$MergeContext", 0);
        }

        void t_MergePolicy$MergeContext::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$MergeContext), "class_", make_descriptor(MergePolicy$MergeContext::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$MergeContext), "wrapfn_", make_descriptor(t_MergePolicy$MergeContext::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy$MergeContext), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$MergeContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$MergeContext::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$MergeContext::wrap_Object(MergePolicy$MergeContext(((t_MergePolicy$MergeContext *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$MergeContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$MergeContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergePolicy$MergeContext_getInfoStream(t_MergePolicy$MergeContext *self)
        {
          ::org::apache::lucene::util::InfoStream result((jobject) NULL);
          OBJ_CALL(result = self->object.getInfoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(result);
        }

        static PyObject *t_MergePolicy$MergeContext_getMergingSegments(t_MergePolicy$MergeContext *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergingSegments());
          return ::java::util::t_Set::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(SegmentCommitInfo));
        }

        static PyObject *t_MergePolicy$MergeContext_numDeletedDocs(t_MergePolicy$MergeContext *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.numDeletedDocs(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "numDeletedDocs", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$MergeContext_numDeletesToMerge(t_MergePolicy$MergeContext *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.numDeletesToMerge(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "numDeletesToMerge", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$MergeContext_get__infoStream(t_MergePolicy$MergeContext *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getInfoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }

        static PyObject *t_MergePolicy$MergeContext_get__mergingSegments(t_MergePolicy$MergeContext *self, void *data)
        {
          ::java::util::Set value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergingSegments());
          return ::java::util::t_Set::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/SortedDocValuesField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *SortedDocValuesField::class$ = NULL;
        jmethodID *SortedDocValuesField::mids$ = NULL;
        bool SortedDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *SortedDocValuesField::TYPE = NULL;

        jclass SortedDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/SortedDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_63a59e248b245c2c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_newSlowExactQuery_25fa5bedbb29bf17] = env->getStaticMethodID(cls, "newSlowExactQuery", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSlowRangeQuery_dcd0792dba0b1a5a] = env->getStaticMethodID(cls, "newSlowRangeQuery", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)Lorg/apache/lucene/search/Query;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedDocValuesField::SortedDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_63a59e248b245c2c, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::Query SortedDocValuesField::newSlowExactQuery(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSlowExactQuery_25fa5bedbb29bf17], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query SortedDocValuesField::newSlowRangeQuery(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSlowRangeQuery_dcd0792dba0b1a5a], a0.this$, a1.this$, a2.this$, a3, a4));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_SortedDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedDocValuesField_init_(t_SortedDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortedDocValuesField_newSlowExactQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_SortedDocValuesField_newSlowRangeQuery(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_SortedDocValuesField__methods_[] = {
          DECLARE_METHOD(t_SortedDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedDocValuesField, newSlowExactQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SortedDocValuesField, newSlowRangeQuery, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SortedDocValuesField)[] = {
          { Py_tp_methods, t_SortedDocValuesField__methods_ },
          { Py_tp_init, (void *) t_SortedDocValuesField_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SortedDocValuesField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(SortedDocValuesField, t_SortedDocValuesField, SortedDocValuesField);

        void t_SortedDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedDocValuesField), &PY_TYPE_DEF(SortedDocValuesField), module, "SortedDocValuesField", 0);
        }

        void t_SortedDocValuesField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedDocValuesField), "class_", make_descriptor(SortedDocValuesField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedDocValuesField), "wrapfn_", make_descriptor(t_SortedDocValuesField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedDocValuesField), "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedDocValuesField::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedDocValuesField), "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedDocValuesField::TYPE)));
        }

        static PyObject *t_SortedDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedDocValuesField::initializeClass, 1)))
            return NULL;
          return t_SortedDocValuesField::wrap_Object(SortedDocValuesField(((t_SortedDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_SortedDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedDocValuesField_init_(t_SortedDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          SortedDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SortedDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SortedDocValuesField_newSlowExactQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::SortedDocValuesField::newSlowExactQuery(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSlowExactQuery", args);
          return NULL;
        }

        static PyObject *t_SortedDocValuesField_newSlowRangeQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "skkZZ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::SortedDocValuesField::newSlowRangeQuery(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSlowRangeQuery", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/FloatTaxonomyFacets.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *FloatTaxonomyFacets::class$ = NULL;
          jmethodID *FloatTaxonomyFacets::mids$ = NULL;
          bool FloatTaxonomyFacets::live$ = false;

          jclass FloatTaxonomyFacets::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/FloatTaxonomyFacets");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getSpecificValue_aaf99af6028dc803] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
              mids$[mid_getTopChildren_8be156db8a3c742c] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");
              mids$[mid_rollup_f2cc1bce94666404] = env->getMethodID(cls, "rollup", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Number FloatTaxonomyFacets::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_aaf99af6028dc803], a0.this$, a1.this$));
          }

          ::org::apache::lucene::facet::FacetResult FloatTaxonomyFacets::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
          {
            return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_8be156db8a3c742c], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_FloatTaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatTaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatTaxonomyFacets_getSpecificValue(t_FloatTaxonomyFacets *self, PyObject *args);
          static PyObject *t_FloatTaxonomyFacets_getTopChildren(t_FloatTaxonomyFacets *self, PyObject *args);

          static PyMethodDef t_FloatTaxonomyFacets__methods_[] = {
            DECLARE_METHOD(t_FloatTaxonomyFacets, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatTaxonomyFacets, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatTaxonomyFacets, getSpecificValue, METH_VARARGS),
            DECLARE_METHOD(t_FloatTaxonomyFacets, getTopChildren, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FloatTaxonomyFacets)[] = {
            { Py_tp_methods, t_FloatTaxonomyFacets__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FloatTaxonomyFacets)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::facet::taxonomy::TaxonomyFacets),
            NULL
          };

          DEFINE_TYPE(FloatTaxonomyFacets, t_FloatTaxonomyFacets, FloatTaxonomyFacets);

          void t_FloatTaxonomyFacets::install(PyObject *module)
          {
            installType(&PY_TYPE(FloatTaxonomyFacets), &PY_TYPE_DEF(FloatTaxonomyFacets), module, "FloatTaxonomyFacets", 0);
          }

          void t_FloatTaxonomyFacets::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FloatTaxonomyFacets), "class_", make_descriptor(FloatTaxonomyFacets::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FloatTaxonomyFacets), "wrapfn_", make_descriptor(t_FloatTaxonomyFacets::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FloatTaxonomyFacets), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FloatTaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FloatTaxonomyFacets::initializeClass, 1)))
              return NULL;
            return t_FloatTaxonomyFacets::wrap_Object(FloatTaxonomyFacets(((t_FloatTaxonomyFacets *) arg)->object.this$));
          }
          static PyObject *t_FloatTaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FloatTaxonomyFacets::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FloatTaxonomyFacets_getSpecificValue(t_FloatTaxonomyFacets *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::java::lang::Number result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
              return ::java::lang::t_Number::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FloatTaxonomyFacets), (PyObject *) self, "getSpecificValue", args, 2);
          }

          static PyObject *t_FloatTaxonomyFacets_getTopChildren(t_FloatTaxonomyFacets *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
              return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FloatTaxonomyFacets), (PyObject *) self, "getTopChildren", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/nio/file/Path.h"
#include "java/nio/file/LinkOption.h"
#include "java/nio/file/FileSystem.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/Iterable.h"
#include "java/nio/file/Watchable.h"
#include "java/lang/String.h"
#include "java/nio/file/WatchKey.h"
#include "java/util/Iterator.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/nio/file/Path.h"
#include "java/nio/file/WatchEvent$Kind.h"
#include "java/nio/file/WatchService.h"
#include "java/nio/file/WatchEvent$Modifier.h"
#include "JArray.h"

namespace java {
  namespace nio {
    namespace file {

      ::java::lang::Class *Path::class$ = NULL;
      jmethodID *Path::mids$ = NULL;
      bool Path::live$ = false;

      jclass Path::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("java/nio/file/Path");

          mids$ = new jmethodID[max_mid];
          mids$[mid_compareTo_71facc4e9e47eb6d] = env->getMethodID(cls, "compareTo", "(Ljava/nio/file/Path;)I");
          mids$[mid_endsWith_145b2d0af0c06b93] = env->getMethodID(cls, "endsWith", "(Ljava/lang/String;)Z");
          mids$[mid_endsWith_64eb4236a3fd11dc] = env->getMethodID(cls, "endsWith", "(Ljava/nio/file/Path;)Z");
          mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
          mids$[mid_getFileName_7f94726bf5834528] = env->getMethodID(cls, "getFileName", "()Ljava/nio/file/Path;");
          mids$[mid_getFileSystem_fb4bd28848b3c56b] = env->getMethodID(cls, "getFileSystem", "()Ljava/nio/file/FileSystem;");
          mids$[mid_getName_66c670d6f466a442] = env->getMethodID(cls, "getName", "(I)Ljava/nio/file/Path;");
          mids$[mid_getNameCount_9972fcc56b44e79d] = env->getMethodID(cls, "getNameCount", "()I");
          mids$[mid_getParent_7f94726bf5834528] = env->getMethodID(cls, "getParent", "()Ljava/nio/file/Path;");
          mids$[mid_getRoot_7f94726bf5834528] = env->getMethodID(cls, "getRoot", "()Ljava/nio/file/Path;");
          mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
          mids$[mid_isAbsolute_8454bd5aa23fd11e] = env->getMethodID(cls, "isAbsolute", "()Z");
          mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
          mids$[mid_normalize_7f94726bf5834528] = env->getMethodID(cls, "normalize", "()Ljava/nio/file/Path;");
          mids$[mid_register_6cfc9d5463561f8d] = env->getMethodID(cls, "register", "(Ljava/nio/file/WatchService;[Ljava/nio/file/WatchEvent$Kind;)Ljava/nio/file/WatchKey;");
          mids$[mid_register_b4bf47bf477ac77c] = env->getMethodID(cls, "register", "(Ljava/nio/file/WatchService;[Ljava/nio/file/WatchEvent$Kind;[Ljava/nio/file/WatchEvent$Modifier;)Ljava/nio/file/WatchKey;");
          mids$[mid_relativize_0068ab41d9b1e17a] = env->getMethodID(cls, "relativize", "(Ljava/nio/file/Path;)Ljava/nio/file/Path;");
          mids$[mid_resolve_f2d24b721e336119] = env->getMethodID(cls, "resolve", "(Ljava/lang/String;)Ljava/nio/file/Path;");
          mids$[mid_resolve_0068ab41d9b1e17a] = env->getMethodID(cls, "resolve", "(Ljava/nio/file/Path;)Ljava/nio/file/Path;");
          mids$[mid_resolveSibling_f2d24b721e336119] = env->getMethodID(cls, "resolveSibling", "(Ljava/lang/String;)Ljava/nio/file/Path;");
          mids$[mid_resolveSibling_0068ab41d9b1e17a] = env->getMethodID(cls, "resolveSibling", "(Ljava/nio/file/Path;)Ljava/nio/file/Path;");
          mids$[mid_startsWith_145b2d0af0c06b93] = env->getMethodID(cls, "startsWith", "(Ljava/lang/String;)Z");
          mids$[mid_startsWith_64eb4236a3fd11dc] = env->getMethodID(cls, "startsWith", "(Ljava/nio/file/Path;)Z");
          mids$[mid_subpath_577c5679cffa723d] = env->getMethodID(cls, "subpath", "(II)Ljava/nio/file/Path;");
          mids$[mid_toAbsolutePath_7f94726bf5834528] = env->getMethodID(cls, "toAbsolutePath", "()Ljava/nio/file/Path;");
          mids$[mid_toFile_117a3aa19a964e9c] = env->getMethodID(cls, "toFile", "()Ljava/io/File;");
          mids$[mid_toRealPath_d7713122873943ce] = env->getMethodID(cls, "toRealPath", "([Ljava/nio/file/LinkOption;)Ljava/nio/file/Path;");
          mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

          class$ = new ::java::lang::Class(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      jint Path::compareTo(const Path & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_compareTo_71facc4e9e47eb6d], a0.this$);
      }

      jboolean Path::endsWith(const ::java::lang::String & a0) const
      {
        return env->callBooleanMethod(this$, mids$[mid_endsWith_145b2d0af0c06b93], a0.this$);
      }

      jboolean Path::endsWith(const Path & a0) const
      {
        return env->callBooleanMethod(this$, mids$[mid_endsWith_64eb4236a3fd11dc], a0.this$);
      }

      jboolean Path::equals(const ::java::lang::Object & a0) const
      {
        return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
      }

      Path Path::getFileName() const
      {
        return Path(env->callObjectMethod(this$, mids$[mid_getFileName_7f94726bf5834528]));
      }

      ::java::nio::file::FileSystem Path::getFileSystem() const
      {
        return ::java::nio::file::FileSystem(env->callObjectMethod(this$, mids$[mid_getFileSystem_fb4bd28848b3c56b]));
      }

      Path Path::getName(jint a0) const
      {
        return Path(env->callObjectMethod(this$, mids$[mid_getName_66c670d6f466a442], a0));
      }

      jint Path::getNameCount() const
      {
        return env->callIntMethod(this$, mids$[mid_getNameCount_9972fcc56b44e79d]);
      }

      Path Path::getParent() const
      {
        return Path(env->callObjectMethod(this$, mids$[mid_getParent_7f94726bf5834528]));
      }

      Path Path::getRoot() const
      {
        return Path(env->callObjectMethod(this$, mids$[mid_getRoot_7f94726bf5834528]));
      }

      jint Path::hashCode() const
      {
        return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
      }

      jboolean Path::isAbsolute() const
      {
        return env->callBooleanMethod(this$, mids$[mid_isAbsolute_8454bd5aa23fd11e]);
      }

      ::java::util::Iterator Path::iterator() const
      {
        return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
      }

      Path Path::normalize() const
      {
        return Path(env->callObjectMethod(this$, mids$[mid_normalize_7f94726bf5834528]));
      }

      ::java::nio::file::WatchKey Path::register$(const ::java::nio::file::WatchService & a0, const JArray< ::java::nio::file::WatchEvent$Kind > & a1) const
      {
        return ::java::nio::file::WatchKey(env->callObjectMethod(this$, mids$[mid_register_6cfc9d5463561f8d], a0.this$, a1.this$));
      }

      ::java::nio::file::WatchKey Path::register$(const ::java::nio::file::WatchService & a0, const JArray< ::java::nio::file::WatchEvent$Kind > & a1, const JArray< ::java::nio::file::WatchEvent$Modifier > & a2) const
      {
        return ::java::nio::file::WatchKey(env->callObjectMethod(this$, mids$[mid_register_b4bf47bf477ac77c], a0.this$, a1.this$, a2.this$));
      }

      Path Path::relativize(const Path & a0) const
      {
        return Path(env->callObjectMethod(this$, mids$[mid_relativize_0068ab41d9b1e17a], a0.this$));
      }

      Path Path::resolve(const ::java::lang::String & a0) const
      {
        return Path(env->callObjectMethod(this$, mids$[mid_resolve_f2d24b721e336119], a0.this$));
      }

      Path Path::resolve(const Path & a0) const
      {
        return Path(env->callObjectMethod(this$, mids$[mid_resolve_0068ab41d9b1e17a], a0.this$));
      }

      Path Path::resolveSibling(const ::java::lang::String & a0) const
      {
        return Path(env->callObjectMethod(this$, mids$[mid_resolveSibling_f2d24b721e336119], a0.this$));
      }

      Path Path::resolveSibling(const Path & a0) const
      {
        return Path(env->callObjectMethod(this$, mids$[mid_resolveSibling_0068ab41d9b1e17a], a0.this$));
      }

      jboolean Path::startsWith(const ::java::lang::String & a0) const
      {
        return env->callBooleanMethod(this$, mids$[mid_startsWith_145b2d0af0c06b93], a0.this$);
      }

      jboolean Path::startsWith(const Path & a0) const
      {
        return env->callBooleanMethod(this$, mids$[mid_startsWith_64eb4236a3fd11dc], a0.this$);
      }

      Path Path::subpath(jint a0, jint a1) const
      {
        return Path(env->callObjectMethod(this$, mids$[mid_subpath_577c5679cffa723d], a0, a1));
      }

      Path Path::toAbsolutePath() const
      {
        return Path(env->callObjectMethod(this$, mids$[mid_toAbsolutePath_7f94726bf5834528]));
      }

      ::java::io::File Path::toFile() const
      {
        return ::java::io::File(env->callObjectMethod(this$, mids$[mid_toFile_117a3aa19a964e9c]));
      }

      Path Path::toRealPath(const JArray< ::java::nio::file::LinkOption > & a0) const
      {
        return Path(env->callObjectMethod(this$, mids$[mid_toRealPath_d7713122873943ce], a0.this$));
      }

      ::java::lang::String Path::toString() const
      {
        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace nio {
    namespace file {
      static PyObject *t_Path_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Path_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Path_compareTo(t_Path *self, PyObject *args);
      static PyObject *t_Path_endsWith(t_Path *self, PyObject *args);
      static PyObject *t_Path_equals(t_Path *self, PyObject *arg);
      static PyObject *t_Path_getFileName(t_Path *self);
      static PyObject *t_Path_getFileSystem(t_Path *self);
      static PyObject *t_Path_getName(t_Path *self, PyObject *arg);
      static PyObject *t_Path_getNameCount(t_Path *self);
      static PyObject *t_Path_getParent(t_Path *self);
      static PyObject *t_Path_getRoot(t_Path *self);
      static PyObject *t_Path_hashCode(t_Path *self);
      static PyObject *t_Path_isAbsolute(t_Path *self);
      static PyObject *t_Path_iterator(t_Path *self);
      static PyObject *t_Path_normalize(t_Path *self);
      static PyObject *t_Path_register(t_Path *self, PyObject *args);
      static PyObject *t_Path_relativize(t_Path *self, PyObject *arg);
      static PyObject *t_Path_resolve(t_Path *self, PyObject *args);
      static PyObject *t_Path_resolveSibling(t_Path *self, PyObject *args);
      static PyObject *t_Path_startsWith(t_Path *self, PyObject *args);
      static PyObject *t_Path_subpath(t_Path *self, PyObject *args);
      static PyObject *t_Path_toAbsolutePath(t_Path *self);
      static PyObject *t_Path_toFile(t_Path *self);
      static PyObject *t_Path_toRealPath(t_Path *self, PyObject *arg);
      static PyObject *t_Path_toString(t_Path *self);
      static PyObject *t_Path_get__absolute(t_Path *self, void *data);
      static PyObject *t_Path_get__fileName(t_Path *self, void *data);
      static PyObject *t_Path_get__fileSystem(t_Path *self, void *data);
      static PyObject *t_Path_get__nameCount(t_Path *self, void *data);
      static PyObject *t_Path_get__parent(t_Path *self, void *data);
      static PyObject *t_Path_get__root(t_Path *self, void *data);
      static PyGetSetDef t_Path__fields_[] = {
        DECLARE_GET_FIELD(t_Path, absolute),
        DECLARE_GET_FIELD(t_Path, fileName),
        DECLARE_GET_FIELD(t_Path, fileSystem),
        DECLARE_GET_FIELD(t_Path, nameCount),
        DECLARE_GET_FIELD(t_Path, parent),
        DECLARE_GET_FIELD(t_Path, root),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_Path__methods_[] = {
        DECLARE_METHOD(t_Path, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Path, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Path, compareTo, METH_VARARGS),
        DECLARE_METHOD(t_Path, endsWith, METH_VARARGS),
        DECLARE_METHOD(t_Path, equals, METH_O),
        DECLARE_METHOD(t_Path, getFileName, METH_NOARGS),
        DECLARE_METHOD(t_Path, getFileSystem, METH_NOARGS),
        DECLARE_METHOD(t_Path, getName, METH_O),
        DECLARE_METHOD(t_Path, getNameCount, METH_NOARGS),
        DECLARE_METHOD(t_Path, getParent, METH_NOARGS),
        DECLARE_METHOD(t_Path, getRoot, METH_NOARGS),
        DECLARE_METHOD(t_Path, hashCode, METH_NOARGS),
        DECLARE_METHOD(t_Path, isAbsolute, METH_NOARGS),
        DECLARE_METHOD(t_Path, iterator, METH_NOARGS),
        DECLARE_METHOD(t_Path, normalize, METH_NOARGS),
        DECLARE_METHOD(t_Path, register, METH_VARARGS),
        DECLARE_METHOD(t_Path, relativize, METH_O),
        DECLARE_METHOD(t_Path, resolve, METH_VARARGS),
        DECLARE_METHOD(t_Path, resolveSibling, METH_VARARGS),
        DECLARE_METHOD(t_Path, startsWith, METH_VARARGS),
        DECLARE_METHOD(t_Path, subpath, METH_VARARGS),
        DECLARE_METHOD(t_Path, toAbsolutePath, METH_NOARGS),
        DECLARE_METHOD(t_Path, toFile, METH_NOARGS),
        DECLARE_METHOD(t_Path, toRealPath, METH_O),
        DECLARE_METHOD(t_Path, toString, METH_NOARGS),
        { NULL, NULL, 0, NULL }
      };

      static PyType_Slot PY_TYPE_SLOTS(Path)[] = {
        { Py_tp_methods, t_Path__methods_ },
        { Py_tp_init, (void *) abstract_init },
        { Py_tp_getset, t_Path__fields_ },
        { Py_tp_iter, (void *) ((PyObject *(*)(t_Path *)) get_iterator< t_Path >) },
        { Py_tp_iternext, (void *) 0 },
        { 0, NULL }
      };

      static PyType_Def *PY_TYPE_BASES(Path)[] = {
        &PY_TYPE_DEF(::java::lang::Comparable),
        NULL
      };

      DEFINE_TYPE(Path, t_Path, Path);

      void t_Path::install(PyObject *module)
      {
        installType(&PY_TYPE(Path), &PY_TYPE_DEF(Path), module, "Path", 0);
      }

      void t_Path::initialize(PyObject *module)
      {
        PyObject_SetAttrString((PyObject *) PY_TYPE(Path), "class_", make_descriptor(Path::initializeClass, 1));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Path), "wrapfn_", make_descriptor(t_Path::wrap_jobject));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Path), "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Path_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Path::initializeClass, 1)))
          return NULL;
        return t_Path::wrap_Object(Path(((t_Path *) arg)->object.this$));
      }
      static PyObject *t_Path_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Path::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_Path_compareTo(t_Path *self, PyObject *args)
      {
        Path a0((jobject) NULL);
        jint result;

        if (!parseArgs(args, "k", Path::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.compareTo(a0));
          return PyLong_FromLong((long) result);
        }

        return callSuper(PY_TYPE(Path), (PyObject *) self, "compareTo", args, 2);
      }

      static PyObject *t_Path_endsWith(t_Path *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::lang::String a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.endsWith(a0));
              Py_RETURN_BOOL(result);
            }
          }
          {
            Path a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", Path::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.endsWith(a0));
              Py_RETURN_BOOL(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "endsWith", args);
        return NULL;
      }

      static PyObject *t_Path_equals(t_Path *self, PyObject *arg)
      {
        ::java::lang::Object a0((jobject) NULL);
        jboolean result;

        if (!parseArg(arg, "o", &a0))
        {
          OBJ_CALL(result = self->object.equals(a0));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError((PyObject *) self, "equals", arg);
        return NULL;
      }

      static PyObject *t_Path_getFileName(t_Path *self)
      {
        Path result((jobject) NULL);
        OBJ_CALL(result = self->object.getFileName());
        return t_Path::wrap_Object(result);
      }

      static PyObject *t_Path_getFileSystem(t_Path *self)
      {
        ::java::nio::file::FileSystem result((jobject) NULL);
        OBJ_CALL(result = self->object.getFileSystem());
        return ::java::nio::file::t_FileSystem::wrap_Object(result);
      }

      static PyObject *t_Path_getName(t_Path *self, PyObject *arg)
      {
        jint a0;
        Path result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.getName(a0));
          return t_Path::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "getName", arg);
        return NULL;
      }

      static PyObject *t_Path_getNameCount(t_Path *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getNameCount());
        return PyLong_FromLong((long) result);
      }

      static PyObject *t_Path_getParent(t_Path *self)
      {
        Path result((jobject) NULL);
        OBJ_CALL(result = self->object.getParent());
        return t_Path::wrap_Object(result);
      }

      static PyObject *t_Path_getRoot(t_Path *self)
      {
        Path result((jobject) NULL);
        OBJ_CALL(result = self->object.getRoot());
        return t_Path::wrap_Object(result);
      }

      static PyObject *t_Path_hashCode(t_Path *self)
      {
        jint result;
        OBJ_CALL(result = self->object.hashCode());
        return PyLong_FromLong((long) result);
      }

      static PyObject *t_Path_isAbsolute(t_Path *self)
      {
        jboolean result;
        OBJ_CALL(result = self->object.isAbsolute());
        Py_RETURN_BOOL(result);
      }

      static PyObject *t_Path_iterator(t_Path *self)
      {
        ::java::util::Iterator result((jobject) NULL);
        OBJ_CALL(result = self->object.iterator());
        return ::java::util::t_Iterator::wrap_Object(result, ::java::nio::file::PY_TYPE(Path));
      }

      static PyObject *t_Path_normalize(t_Path *self)
      {
        Path result((jobject) NULL);
        OBJ_CALL(result = self->object.normalize());
        return t_Path::wrap_Object(result);
      }

      static PyObject *t_Path_register(t_Path *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::java::nio::file::WatchService a0((jobject) NULL);
            JArray< ::java::nio::file::WatchEvent$Kind > a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::nio::file::WatchKey result((jobject) NULL);

            if (!parseArgs(args, "k[K", ::java::nio::file::WatchService::initializeClass, ::java::nio::file::WatchEvent$Kind::initializeClass, &a0, &a1, &p1, ::java::nio::file::t_WatchEvent$Kind::parameters_))
            {
              OBJ_CALL(result = self->object.register$(a0, a1));
              return ::java::nio::file::t_WatchKey::wrap_Object(result);
            }
          }
          break;
         case 3:
          {
            ::java::nio::file::WatchService a0((jobject) NULL);
            JArray< ::java::nio::file::WatchEvent$Kind > a1((jobject) NULL);
            PyTypeObject **p1;
            JArray< ::java::nio::file::WatchEvent$Modifier > a2((jobject) NULL);
            PyTypeObject **p2;
            ::java::nio::file::WatchKey result((jobject) NULL);

            if (!parseArgs(args, "k[K[K", ::java::nio::file::WatchService::initializeClass, ::java::nio::file::WatchEvent$Kind::initializeClass, ::java::nio::file::WatchEvent$Modifier::initializeClass, &a0, &a1, &p1, ::java::nio::file::t_WatchEvent$Kind::parameters_, &a2, &p2, ::java::nio::file::t_WatchEvent$Modifier::parameters_))
            {
              OBJ_CALL(result = self->object.register$(a0, a1, a2));
              return ::java::nio::file::t_WatchKey::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "register", args);
        return NULL;
      }

      static PyObject *t_Path_relativize(t_Path *self, PyObject *arg)
      {
        Path a0((jobject) NULL);
        Path result((jobject) NULL);

        if (!parseArg(arg, "k", Path::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.relativize(a0));
          return t_Path::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "relativize", arg);
        return NULL;
      }

      static PyObject *t_Path_resolve(t_Path *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::lang::String a0((jobject) NULL);
            Path result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.resolve(a0));
              return t_Path::wrap_Object(result);
            }
          }
          {
            Path a0((jobject) NULL);
            Path result((jobject) NULL);

            if (!parseArgs(args, "k", Path::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.resolve(a0));
              return t_Path::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "resolve", args);
        return NULL;
      }

      static PyObject *t_Path_resolveSibling(t_Path *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::lang::String a0((jobject) NULL);
            Path result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.resolveSibling(a0));
              return t_Path::wrap_Object(result);
            }
          }
          {
            Path a0((jobject) NULL);
            Path result((jobject) NULL);

            if (!parseArgs(args, "k", Path::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.resolveSibling(a0));
              return t_Path::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "resolveSibling", args);
        return NULL;
      }

      static PyObject *t_Path_startsWith(t_Path *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::lang::String a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.startsWith(a0));
              Py_RETURN_BOOL(result);
            }
          }
          {
            Path a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", Path::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.startsWith(a0));
              Py_RETURN_BOOL(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "startsWith", args);
        return NULL;
      }

      static PyObject *t_Path_subpath(t_Path *self, PyObject *args)
      {
        jint a0;
        jint a1;
        Path result((jobject) NULL);

        if (!parseArgs(args, "II", &a0, &a1))
        {
          OBJ_CALL(result = self->object.subpath(a0, a1));
          return t_Path::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "subpath", args);
        return NULL;
      }

      static PyObject *t_Path_toAbsolutePath(t_Path *self)
      {
        Path result((jobject) NULL);
        OBJ_CALL(result = self->object.toAbsolutePath());
        return t_Path::wrap_Object(result);
      }

      static PyObject *t_Path_toFile(t_Path *self)
      {
        ::java::io::File result((jobject) NULL);
        OBJ_CALL(result = self->object.toFile());
        return ::java::io::t_File::wrap_Object(result);
      }

      static PyObject *t_Path_toRealPath(t_Path *self, PyObject *arg)
      {
        JArray< ::java::nio::file::LinkOption > a0((jobject) NULL);
        PyTypeObject **p0;
        Path result((jobject) NULL);

        if (!parseArg(arg, "[K", ::java::nio::file::LinkOption::initializeClass, &a0, &p0, ::java::nio::file::t_LinkOption::parameters_))
        {
          OBJ_CALL(result = self->object.toRealPath(a0));
          return t_Path::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "toRealPath", arg);
        return NULL;
      }

      static PyObject *t_Path_toString(t_Path *self)
      {
        ::java::lang::String result((jobject) NULL);
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      static PyObject *t_Path_get__absolute(t_Path *self, void *data)
      {
        jboolean value;
        OBJ_CALL(value = self->object.isAbsolute());
        Py_RETURN_BOOL(value);
      }

      static PyObject *t_Path_get__fileName(t_Path *self, void *data)
      {
        Path value((jobject) NULL);
        OBJ_CALL(value = self->object.getFileName());
        return t_Path::wrap_Object(value);
      }

      static PyObject *t_Path_get__fileSystem(t_Path *self, void *data)
      {
        ::java::nio::file::FileSystem value((jobject) NULL);
        OBJ_CALL(value = self->object.getFileSystem());
        return ::java::nio::file::t_FileSystem::wrap_Object(value);
      }

      static PyObject *t_Path_get__nameCount(t_Path *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getNameCount());
        return PyLong_FromLong((long) value);
      }

      static PyObject *t_Path_get__parent(t_Path *self, void *data)
      {
        Path value((jobject) NULL);
        OBJ_CALL(value = self->object.getParent());
        return t_Path::wrap_Object(value);
      }

      static PyObject *t_Path_get__root(t_Path *self, void *data)
      {
        Path value((jobject) NULL);
        OBJ_CALL(value = self->object.getRoot());
        return t_Path::wrap_Object(value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/Transition.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *Automaton::class$ = NULL;
          jmethodID *Automaton::mids$ = NULL;
          bool Automaton::live$ = false;

          jclass Automaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/Automaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_438c62480c481c65] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_addEpsilon_438c62480c481c65] = env->getMethodID(cls, "addEpsilon", "(II)V");
              mids$[mid_addTransition_db3e97653d3683f3] = env->getMethodID(cls, "addTransition", "(III)V");
              mids$[mid_addTransition_34ab80131650555f] = env->getMethodID(cls, "addTransition", "(IIII)V");
              mids$[mid_copy_06c1b4541f684199] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_createState_9972fcc56b44e79d] = env->getMethodID(cls, "createState", "()I");
              mids$[mid_finishState_f2cc1bce94666404] = env->getMethodID(cls, "finishState", "()V");
              mids$[mid_getNextTransition_2ceeff7bcecfbfc9] = env->getMethodID(cls, "getNextTransition", "(Lorg/apache/lucene/util/automaton/Transition;)V");
              mids$[mid_getNumStates_9972fcc56b44e79d] = env->getMethodID(cls, "getNumStates", "()I");
              mids$[mid_getNumTransitions_9972fcc56b44e79d] = env->getMethodID(cls, "getNumTransitions", "()I");
              mids$[mid_getNumTransitions_1e143afe1894d213] = env->getMethodID(cls, "getNumTransitions", "(I)I");
              mids$[mid_getSortedTransitions_4286a910eefe1373] = env->getMethodID(cls, "getSortedTransitions", "()[[Lorg/apache/lucene/util/automaton/Transition;");
              mids$[mid_getTransition_a509059daa27d52d] = env->getMethodID(cls, "getTransition", "(IILorg/apache/lucene/util/automaton/Transition;)V");
              mids$[mid_initTransition_b24320c8622f8a72] = env->getMethodID(cls, "initTransition", "(ILorg/apache/lucene/util/automaton/Transition;)I");
              mids$[mid_isAccept_a1d30e1ee40c89a2] = env->getMethodID(cls, "isAccept", "(I)Z");
              mids$[mid_isDeterministic_8454bd5aa23fd11e] = env->getMethodID(cls, "isDeterministic", "()Z");
              mids$[mid_next_588c877f30277ad1] = env->getMethodID(cls, "next", "(Lorg/apache/lucene/util/automaton/Transition;I)I");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_setAccept_b8f283cdbda5c964] = env->getMethodID(cls, "setAccept", "(IZ)V");
              mids$[mid_step_57a58545eba514db] = env->getMethodID(cls, "step", "(II)I");
              mids$[mid_toDot_db9b55ba01e03e4b] = env->getMethodID(cls, "toDot", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Automaton::Automaton() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          Automaton::Automaton(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_438c62480c481c65, a0, a1)) {}

          void Automaton::addEpsilon(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addEpsilon_438c62480c481c65], a0, a1);
          }

          void Automaton::addTransition(jint a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addTransition_db3e97653d3683f3], a0, a1, a2);
          }

          void Automaton::addTransition(jint a0, jint a1, jint a2, jint a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addTransition_34ab80131650555f], a0, a1, a2, a3);
          }

          void Automaton::copy(const Automaton & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_06c1b4541f684199], a0.this$);
          }

          jint Automaton::createState() const
          {
            return env->callIntMethod(this$, mids$[mid_createState_9972fcc56b44e79d]);
          }

          void Automaton::finishState() const
          {
            env->callVoidMethod(this$, mids$[mid_finishState_f2cc1bce94666404]);
          }

          void Automaton::getNextTransition(const ::org::apache::lucene::util::automaton::Transition & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getNextTransition_2ceeff7bcecfbfc9], a0.this$);
          }

          jint Automaton::getNumStates() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumStates_9972fcc56b44e79d]);
          }

          jint Automaton::getNumTransitions() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumTransitions_9972fcc56b44e79d]);
          }

          jint Automaton::getNumTransitions(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_getNumTransitions_1e143afe1894d213], a0);
          }

          JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > Automaton::getSortedTransitions() const
          {
            return JArray< JArray< ::org::apache::lucene::util::automaton::Transition > >(env->callObjectMethod(this$, mids$[mid_getSortedTransitions_4286a910eefe1373]));
          }

          void Automaton::getTransition(jint a0, jint a1, const ::org::apache::lucene::util::automaton::Transition & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_getTransition_a509059daa27d52d], a0, a1, a2.this$);
          }

          jint Automaton::initTransition(jint a0, const ::org::apache::lucene::util::automaton::Transition & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_initTransition_b24320c8622f8a72], a0, a1.this$);
          }

          jboolean Automaton::isAccept(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isAccept_a1d30e1ee40c89a2], a0);
          }

          jboolean Automaton::isDeterministic() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isDeterministic_8454bd5aa23fd11e]);
          }

          jint Automaton::next(const ::org::apache::lucene::util::automaton::Transition & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_next_588c877f30277ad1], a0.this$, a1);
          }

          jlong Automaton::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          void Automaton::setAccept(jint a0, jboolean a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setAccept_b8f283cdbda5c964], a0, a1);
          }

          jint Automaton::step(jint a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_step_57a58545eba514db], a0, a1);
          }

          ::java::lang::String Automaton::toDot() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toDot_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/automaton/Automaton$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_Automaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Automaton_init_(t_Automaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Automaton_addEpsilon(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_addTransition(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_copy(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_createState(t_Automaton *self);
          static PyObject *t_Automaton_finishState(t_Automaton *self);
          static PyObject *t_Automaton_getNextTransition(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_getNumStates(t_Automaton *self);
          static PyObject *t_Automaton_getNumTransitions(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_getSortedTransitions(t_Automaton *self);
          static PyObject *t_Automaton_getTransition(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_initTransition(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_isAccept(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_isDeterministic(t_Automaton *self);
          static PyObject *t_Automaton_next(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_ramBytesUsed(t_Automaton *self);
          static PyObject *t_Automaton_setAccept(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_step(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_toDot(t_Automaton *self);
          static PyObject *t_Automaton_get__deterministic(t_Automaton *self, void *data);
          static PyObject *t_Automaton_get__numStates(t_Automaton *self, void *data);
          static PyObject *t_Automaton_get__numTransitions(t_Automaton *self, void *data);
          static PyObject *t_Automaton_get__sortedTransitions(t_Automaton *self, void *data);
          static PyGetSetDef t_Automaton__fields_[] = {
            DECLARE_GET_FIELD(t_Automaton, deterministic),
            DECLARE_GET_FIELD(t_Automaton, numStates),
            DECLARE_GET_FIELD(t_Automaton, numTransitions),
            DECLARE_GET_FIELD(t_Automaton, sortedTransitions),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Automaton__methods_[] = {
            DECLARE_METHOD(t_Automaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, addEpsilon, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, addTransition, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, copy, METH_O),
            DECLARE_METHOD(t_Automaton, createState, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, finishState, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getNextTransition, METH_O),
            DECLARE_METHOD(t_Automaton, getNumStates, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getNumTransitions, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, getSortedTransitions, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getTransition, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, initTransition, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, isAccept, METH_O),
            DECLARE_METHOD(t_Automaton, isDeterministic, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, next, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, setAccept, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, step, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, toDot, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Automaton)[] = {
            { Py_tp_methods, t_Automaton__methods_ },
            { Py_tp_init, (void *) t_Automaton_init_ },
            { Py_tp_getset, t_Automaton__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Automaton)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Automaton, t_Automaton, Automaton);

          void t_Automaton::install(PyObject *module)
          {
            installType(&PY_TYPE(Automaton), &PY_TYPE_DEF(Automaton), module, "Automaton", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Automaton), "Builder", make_descriptor(&PY_TYPE_DEF(Automaton$Builder)));
          }

          void t_Automaton::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Automaton), "class_", make_descriptor(Automaton::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Automaton), "wrapfn_", make_descriptor(t_Automaton::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Automaton), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Automaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Automaton::initializeClass, 1)))
              return NULL;
            return t_Automaton::wrap_Object(Automaton(((t_Automaton *) arg)->object.this$));
          }
          static PyObject *t_Automaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Automaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Automaton_init_(t_Automaton *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Automaton object((jobject) NULL);

                INT_CALL(object = Automaton());
                self->object = object;
                break;
              }
             case 2:
              {
                jint a0;
                jint a1;
                Automaton object((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  INT_CALL(object = Automaton(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Automaton_addEpsilon(t_Automaton *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.addEpsilon(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addEpsilon", args);
            return NULL;
          }

          static PyObject *t_Automaton_addTransition(t_Automaton *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                jint a0;
                jint a1;
                jint a2;

                if (!parseArgs(args, "III", &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.addTransition(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                jint a0;
                jint a1;
                jint a2;
                jint a3;

                if (!parseArgs(args, "IIII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(self->object.addTransition(a0, a1, a2, a3));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "addTransition", args);
            return NULL;
          }

          static PyObject *t_Automaton_copy(t_Automaton *self, PyObject *arg)
          {
            Automaton a0((jobject) NULL);

            if (!parseArg(arg, "k", Automaton::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copy", arg);
            return NULL;
          }

          static PyObject *t_Automaton_createState(t_Automaton *self)
          {
            jint result;
            OBJ_CALL(result = self->object.createState());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Automaton_finishState(t_Automaton *self)
          {
            OBJ_CALL(self->object.finishState());
            Py_RETURN_NONE;
          }

          static PyObject *t_Automaton_getNextTransition(t_Automaton *self, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Transition a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Transition::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getNextTransition(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getNextTransition", arg);
            return NULL;
          }

          static PyObject *t_Automaton_getNumStates(t_Automaton *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumStates());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Automaton_getNumTransitions(t_Automaton *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.getNumTransitions());
                return PyLong_FromLong((long) result);
              }
              break;
             case 1:
              {
                jint a0;
                jint result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.getNumTransitions(a0));
                  return PyLong_FromLong((long) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getNumTransitions", args);
            return NULL;
          }

          static PyObject *t_Automaton_getSortedTransitions(t_Automaton *self)
          {
            JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > result((jobject) NULL);
            OBJ_CALL(result = self->object.getSortedTransitions());
            return JArray<jobject>(result.this$).wrap(NULL);
          }

          static PyObject *t_Automaton_getTransition(t_Automaton *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::org::apache::lucene::util::automaton::Transition a2((jobject) NULL);

            if (!parseArgs(args, "IIk", ::org::apache::lucene::util::automaton::Transition::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.getTransition(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getTransition", args);
            return NULL;
          }

          static PyObject *t_Automaton_initTransition(t_Automaton *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::automaton::Transition a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "Ik", ::org::apache::lucene::util::automaton::Transition::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.initTransition(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "initTransition", args);
            return NULL;
          }

          static PyObject *t_Automaton_isAccept(t_Automaton *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.isAccept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isAccept", arg);
            return NULL;
          }

          static PyObject *t_Automaton_isDeterministic(t_Automaton *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isDeterministic());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Automaton_next(t_Automaton *self, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Transition a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::automaton::Transition::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.next(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "next", args);
            return NULL;
          }

          static PyObject *t_Automaton_ramBytesUsed(t_Automaton *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Automaton_setAccept(t_Automaton *self, PyObject *args)
          {
            jint a0;
            jboolean a1;

            if (!parseArgs(args, "IZ", &a0, &a1))
            {
              OBJ_CALL(self->object.setAccept(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAccept", args);
            return NULL;
          }

          static PyObject *t_Automaton_step(t_Automaton *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.step(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "step", args);
            return NULL;
          }

          static PyObject *t_Automaton_toDot(t_Automaton *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.toDot());
            return j2p(result);
          }

          static PyObject *t_Automaton_get__deterministic(t_Automaton *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isDeterministic());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_Automaton_get__numStates(t_Automaton *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumStates());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_Automaton_get__numTransitions(t_Automaton *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumTransitions());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_Automaton_get__sortedTransitions(t_Automaton *self, void *data)
          {
            JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > value((jobject) NULL);
            OBJ_CALL(value = self->object.getSortedTransitions());
            return JArray<jobject>(value.this$).wrap(NULL);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/UpToTwoPositiveIntOutputs.h"
#include "org/apache/lucene/util/fst/UpToTwoPositiveIntOutputs.h"
#include "java/lang/Long.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/fst/UpToTwoPositiveIntOutputs$TwoLongs.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *UpToTwoPositiveIntOutputs::class$ = NULL;
          jmethodID *UpToTwoPositiveIntOutputs::mids$ = NULL;
          bool UpToTwoPositiveIntOutputs::live$ = false;

          jclass UpToTwoPositiveIntOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/UpToTwoPositiveIntOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_128a89bbc17a8b69] = env->getMethodID(cls, "add", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_common_b59138a749119a20] = env->getMethodID(cls, "common", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Long;");
              mids$[mid_get_cf9cb5744f7372e6] = env->getMethodID(cls, "get", "(J)Ljava/lang/Long;");
              mids$[mid_get_91b836b5eca98f5a] = env->getMethodID(cls, "get", "(JJ)Lorg/apache/lucene/util/fst/UpToTwoPositiveIntOutputs$TwoLongs;");
              mids$[mid_getNoOutput_d6bcd06f3102c4d9] = env->getMethodID(cls, "getNoOutput", "()Ljava/lang/Object;");
              mids$[mid_getSingleton_7d1ac34dc0fd3834] = env->getStaticMethodID(cls, "getSingleton", "(Z)Lorg/apache/lucene/util/fst/UpToTwoPositiveIntOutputs;");
              mids$[mid_merge_128a89bbc17a8b69] = env->getMethodID(cls, "merge", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_outputToString_8f886c83a83356f0] = env->getMethodID(cls, "outputToString", "(Ljava/lang/Object;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_c602cc71de3e942a] = env->getMethodID(cls, "ramBytesUsed", "(Ljava/lang/Object;)J");
              mids$[mid_read_bd77d49f2c2d164c] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Object;");
              mids$[mid_subtract_b59138a749119a20] = env->getMethodID(cls, "subtract", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Long;");
              mids$[mid_write_9939db8d7cac4f68] = env->getMethodID(cls, "write", "(Ljava/lang/Object;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Object UpToTwoPositiveIntOutputs::add(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_add_128a89bbc17a8b69], a0.this$, a1.this$));
          }

          ::java::lang::Long UpToTwoPositiveIntOutputs::common(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_common_b59138a749119a20], a0.this$, a1.this$));
          }

          ::java::lang::Long UpToTwoPositiveIntOutputs::get(jlong a0) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_get_cf9cb5744f7372e6], a0));
          }

          ::org::apache::lucene::util::fst::UpToTwoPositiveIntOutputs$TwoLongs UpToTwoPositiveIntOutputs::get(jlong a0, jlong a1) const
          {
            return ::org::apache::lucene::util::fst::UpToTwoPositiveIntOutputs$TwoLongs(env->callObjectMethod(this$, mids$[mid_get_91b836b5eca98f5a], a0, a1));
          }

          ::java::lang::Object UpToTwoPositiveIntOutputs::getNoOutput() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getNoOutput_d6bcd06f3102c4d9]));
          }

          UpToTwoPositiveIntOutputs UpToTwoPositiveIntOutputs::getSingleton(jboolean a0)
          {
            jclass cls = env->getClass(initializeClass);
            return UpToTwoPositiveIntOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_7d1ac34dc0fd3834], a0));
          }

          ::java::lang::Object UpToTwoPositiveIntOutputs::merge(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_merge_128a89bbc17a8b69], a0.this$, a1.this$));
          }

          ::java::lang::String UpToTwoPositiveIntOutputs::outputToString(const ::java::lang::Object & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_8f886c83a83356f0], a0.this$));
          }

          jlong UpToTwoPositiveIntOutputs::ramBytesUsed(const ::java::lang::Object & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_c602cc71de3e942a], a0.this$);
          }

          ::java::lang::Object UpToTwoPositiveIntOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_read_bd77d49f2c2d164c], a0.this$));
          }

          ::java::lang::Long UpToTwoPositiveIntOutputs::subtract(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_subtract_b59138a749119a20], a0.this$, a1.this$));
          }

          void UpToTwoPositiveIntOutputs::write(const ::java::lang::Object & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_9939db8d7cac4f68], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_UpToTwoPositiveIntOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UpToTwoPositiveIntOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UpToTwoPositiveIntOutputs_of_(t_UpToTwoPositiveIntOutputs *self, PyObject *args);
          static PyObject *t_UpToTwoPositiveIntOutputs_add(t_UpToTwoPositiveIntOutputs *self, PyObject *args);
          static PyObject *t_UpToTwoPositiveIntOutputs_common(t_UpToTwoPositiveIntOutputs *self, PyObject *args);
          static PyObject *t_UpToTwoPositiveIntOutputs_get(t_UpToTwoPositiveIntOutputs *self, PyObject *args);
          static PyObject *t_UpToTwoPositiveIntOutputs_getNoOutput(t_UpToTwoPositiveIntOutputs *self, PyObject *args);
          static PyObject *t_UpToTwoPositiveIntOutputs_getSingleton(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UpToTwoPositiveIntOutputs_merge(t_UpToTwoPositiveIntOutputs *self, PyObject *args);
          static PyObject *t_UpToTwoPositiveIntOutputs_outputToString(t_UpToTwoPositiveIntOutputs *self, PyObject *args);
          static PyObject *t_UpToTwoPositiveIntOutputs_ramBytesUsed(t_UpToTwoPositiveIntOutputs *self, PyObject *args);
          static PyObject *t_UpToTwoPositiveIntOutputs_read(t_UpToTwoPositiveIntOutputs *self, PyObject *args);
          static PyObject *t_UpToTwoPositiveIntOutputs_subtract(t_UpToTwoPositiveIntOutputs *self, PyObject *args);
          static PyObject *t_UpToTwoPositiveIntOutputs_write(t_UpToTwoPositiveIntOutputs *self, PyObject *args);
          static PyObject *t_UpToTwoPositiveIntOutputs_get__noOutput(t_UpToTwoPositiveIntOutputs *self, void *data);
          static PyObject *t_UpToTwoPositiveIntOutputs_get__parameters_(t_UpToTwoPositiveIntOutputs *self, void *data);
          static PyGetSetDef t_UpToTwoPositiveIntOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_UpToTwoPositiveIntOutputs, noOutput),
            DECLARE_GET_FIELD(t_UpToTwoPositiveIntOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UpToTwoPositiveIntOutputs__methods_[] = {
            DECLARE_METHOD(t_UpToTwoPositiveIntOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpToTwoPositiveIntOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpToTwoPositiveIntOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_UpToTwoPositiveIntOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_UpToTwoPositiveIntOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_UpToTwoPositiveIntOutputs, get, METH_VARARGS),
            DECLARE_METHOD(t_UpToTwoPositiveIntOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_UpToTwoPositiveIntOutputs, getSingleton, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpToTwoPositiveIntOutputs, merge, METH_VARARGS),
            DECLARE_METHOD(t_UpToTwoPositiveIntOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_UpToTwoPositiveIntOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_UpToTwoPositiveIntOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_UpToTwoPositiveIntOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_UpToTwoPositiveIntOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(UpToTwoPositiveIntOutputs)[] = {
            { Py_tp_methods, t_UpToTwoPositiveIntOutputs__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_UpToTwoPositiveIntOutputs__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(UpToTwoPositiveIntOutputs)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::fst::Outputs),
            NULL
          };

          DEFINE_TYPE(UpToTwoPositiveIntOutputs, t_UpToTwoPositiveIntOutputs, UpToTwoPositiveIntOutputs);
          PyObject *t_UpToTwoPositiveIntOutputs::wrap_Object(const UpToTwoPositiveIntOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_UpToTwoPositiveIntOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_UpToTwoPositiveIntOutputs *self = (t_UpToTwoPositiveIntOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_UpToTwoPositiveIntOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_UpToTwoPositiveIntOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_UpToTwoPositiveIntOutputs *self = (t_UpToTwoPositiveIntOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_UpToTwoPositiveIntOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(UpToTwoPositiveIntOutputs), &PY_TYPE_DEF(UpToTwoPositiveIntOutputs), module, "UpToTwoPositiveIntOutputs", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(UpToTwoPositiveIntOutputs), "TwoLongs", make_descriptor(&PY_TYPE_DEF(UpToTwoPositiveIntOutputs$TwoLongs)));
          }

          void t_UpToTwoPositiveIntOutputs::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(UpToTwoPositiveIntOutputs), "class_", make_descriptor(UpToTwoPositiveIntOutputs::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UpToTwoPositiveIntOutputs), "wrapfn_", make_descriptor(t_UpToTwoPositiveIntOutputs::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UpToTwoPositiveIntOutputs), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UpToTwoPositiveIntOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UpToTwoPositiveIntOutputs::initializeClass, 1)))
              return NULL;
            return t_UpToTwoPositiveIntOutputs::wrap_Object(UpToTwoPositiveIntOutputs(((t_UpToTwoPositiveIntOutputs *) arg)->object.this$));
          }
          static PyObject *t_UpToTwoPositiveIntOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UpToTwoPositiveIntOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_UpToTwoPositiveIntOutputs_of_(t_UpToTwoPositiveIntOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_UpToTwoPositiveIntOutputs_add(t_UpToTwoPositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(UpToTwoPositiveIntOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_UpToTwoPositiveIntOutputs_common(t_UpToTwoPositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(PY_TYPE(UpToTwoPositiveIntOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_UpToTwoPositiveIntOutputs_get(t_UpToTwoPositiveIntOutputs *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jlong a0;
                ::java::lang::Long result((jobject) NULL);

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return ::java::lang::t_Long::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jlong a0;
                jlong a1;
                ::org::apache::lucene::util::fst::UpToTwoPositiveIntOutputs$TwoLongs result((jobject) NULL);

                if (!parseArgs(args, "JJ", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.get(a0, a1));
                  return ::org::apache::lucene::util::fst::t_UpToTwoPositiveIntOutputs$TwoLongs::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }

          static PyObject *t_UpToTwoPositiveIntOutputs_getNoOutput(t_UpToTwoPositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(UpToTwoPositiveIntOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_UpToTwoPositiveIntOutputs_getSingleton(PyTypeObject *type, PyObject *arg)
          {
            jboolean a0;
            UpToTwoPositiveIntOutputs result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::UpToTwoPositiveIntOutputs::getSingleton(a0));
              return t_UpToTwoPositiveIntOutputs::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getSingleton", arg);
            return NULL;
          }

          static PyObject *t_UpToTwoPositiveIntOutputs_merge(t_UpToTwoPositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.merge(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(UpToTwoPositiveIntOutputs), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_UpToTwoPositiveIntOutputs_outputToString(t_UpToTwoPositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(UpToTwoPositiveIntOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_UpToTwoPositiveIntOutputs_ramBytesUsed(t_UpToTwoPositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(UpToTwoPositiveIntOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_UpToTwoPositiveIntOutputs_read(t_UpToTwoPositiveIntOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(UpToTwoPositiveIntOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_UpToTwoPositiveIntOutputs_subtract(t_UpToTwoPositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(PY_TYPE(UpToTwoPositiveIntOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_UpToTwoPositiveIntOutputs_write(t_UpToTwoPositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "ok", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(UpToTwoPositiveIntOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_UpToTwoPositiveIntOutputs_get__parameters_(t_UpToTwoPositiveIntOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_UpToTwoPositiveIntOutputs_get__noOutput(t_UpToTwoPositiveIntOutputs *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/eu/BasqueAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace eu {

          ::java::lang::Class *BasqueAnalyzer::class$ = NULL;
          jmethodID *BasqueAnalyzer::mids$ = NULL;
          bool BasqueAnalyzer::live$ = false;
          ::java::lang::String *BasqueAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass BasqueAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/eu/BasqueAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasqueAnalyzer::BasqueAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          BasqueAnalyzer::BasqueAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          BasqueAnalyzer::BasqueAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet BasqueAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace eu {
          static PyObject *t_BasqueAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasqueAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasqueAnalyzer_init_(t_BasqueAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasqueAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_BasqueAnalyzer_get__defaultStopSet(t_BasqueAnalyzer *self, void *data);
          static PyGetSetDef t_BasqueAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_BasqueAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BasqueAnalyzer__methods_[] = {
            DECLARE_METHOD(t_BasqueAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasqueAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasqueAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BasqueAnalyzer)[] = {
            { Py_tp_methods, t_BasqueAnalyzer__methods_ },
            { Py_tp_init, (void *) t_BasqueAnalyzer_init_ },
            { Py_tp_getset, t_BasqueAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BasqueAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(BasqueAnalyzer, t_BasqueAnalyzer, BasqueAnalyzer);

          void t_BasqueAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(BasqueAnalyzer), &PY_TYPE_DEF(BasqueAnalyzer), module, "BasqueAnalyzer", 0);
          }

          void t_BasqueAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasqueAnalyzer), "class_", make_descriptor(BasqueAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasqueAnalyzer), "wrapfn_", make_descriptor(t_BasqueAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasqueAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(BasqueAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasqueAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*BasqueAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_BasqueAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasqueAnalyzer::initializeClass, 1)))
              return NULL;
            return t_BasqueAnalyzer::wrap_Object(BasqueAnalyzer(((t_BasqueAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_BasqueAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasqueAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasqueAnalyzer_init_(t_BasqueAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                BasqueAnalyzer object((jobject) NULL);

                INT_CALL(object = BasqueAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                BasqueAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BasqueAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                BasqueAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BasqueAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BasqueAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::eu::BasqueAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_BasqueAnalyzer_get__defaultStopSet(t_BasqueAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/stempel/StempelFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/stempel/StempelStemmer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {

          ::java::lang::Class *StempelFilter::class$ = NULL;
          jmethodID *StempelFilter::mids$ = NULL;
          bool StempelFilter::live$ = false;
          jint StempelFilter::DEFAULT_MIN_LENGTH = (jint) 0;

          jclass StempelFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/stempel/StempelFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_10ebfd2d6cbcfdf0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/stempel/StempelStemmer;)V");
              mids$[mid_init$_9d5fa47d46a5d825] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/stempel/StempelStemmer;I)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MIN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MIN_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StempelFilter::StempelFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::stempel::StempelStemmer & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_10ebfd2d6cbcfdf0, a0.this$, a1.this$)) {}

          StempelFilter::StempelFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::stempel::StempelStemmer & a1, jint a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_9d5fa47d46a5d825, a0.this$, a1.this$, a2)) {}

          jboolean StempelFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {
          static PyObject *t_StempelFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StempelFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StempelFilter_init_(t_StempelFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StempelFilter_incrementToken(t_StempelFilter *self, PyObject *args);

          static PyMethodDef t_StempelFilter__methods_[] = {
            DECLARE_METHOD(t_StempelFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(StempelFilter)[] = {
            { Py_tp_methods, t_StempelFilter__methods_ },
            { Py_tp_init, (void *) t_StempelFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(StempelFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(StempelFilter, t_StempelFilter, StempelFilter);

          void t_StempelFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(StempelFilter), &PY_TYPE_DEF(StempelFilter), module, "StempelFilter", 0);
          }

          void t_StempelFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(StempelFilter), "class_", make_descriptor(StempelFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StempelFilter), "wrapfn_", make_descriptor(t_StempelFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StempelFilter), "boxfn_", make_descriptor(boxObject));
            env->getClass(StempelFilter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(StempelFilter), "DEFAULT_MIN_LENGTH", make_descriptor(StempelFilter::DEFAULT_MIN_LENGTH));
          }

          static PyObject *t_StempelFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StempelFilter::initializeClass, 1)))
              return NULL;
            return t_StempelFilter::wrap_Object(StempelFilter(((t_StempelFilter *) arg)->object.this$));
          }
          static PyObject *t_StempelFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StempelFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StempelFilter_init_(t_StempelFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::stempel::StempelStemmer a1((jobject) NULL);
                StempelFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::stempel::StempelStemmer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = StempelFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::stempel::StempelStemmer a1((jobject) NULL);
                jint a2;
                StempelFilter object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::stempel::StempelStemmer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = StempelFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StempelFilter_incrementToken(t_StempelFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(StempelFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *LiveDocsFormat::class$ = NULL;
        jmethodID *LiveDocsFormat::mids$ = NULL;
        bool LiveDocsFormat::live$ = false;

        jclass LiveDocsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/LiveDocsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_files_b2e301d4a4757fdf] = env->getMethodID(cls, "files", "(Lorg/apache/lucene/index/SegmentCommitInfo;Ljava/util/Collection;)V");
            mids$[mid_readLiveDocs_f118005014dfdc32] = env->getMethodID(cls, "readLiveDocs", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_writeLiveDocs_d90adf8fed5738cb] = env->getMethodID(cls, "writeLiveDocs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;ILorg/apache/lucene/store/IOContext;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void LiveDocsFormat::files(const ::org::apache::lucene::index::SegmentCommitInfo & a0, const ::java::util::Collection & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_files_b2e301d4a4757fdf], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::Bits LiveDocsFormat::readLiveDocs(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_readLiveDocs_f118005014dfdc32], a0.this$, a1.this$, a2.this$));
        }

        void LiveDocsFormat::writeLiveDocs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::index::SegmentCommitInfo & a2, jint a3, const ::org::apache::lucene::store::IOContext & a4) const
        {
          env->callVoidMethod(this$, mids$[mid_writeLiveDocs_d90adf8fed5738cb], a0.this$, a1.this$, a2.this$, a3, a4.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_LiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveDocsFormat_files(t_LiveDocsFormat *self, PyObject *args);
        static PyObject *t_LiveDocsFormat_readLiveDocs(t_LiveDocsFormat *self, PyObject *args);
        static PyObject *t_LiveDocsFormat_writeLiveDocs(t_LiveDocsFormat *self, PyObject *args);

        static PyMethodDef t_LiveDocsFormat__methods_[] = {
          DECLARE_METHOD(t_LiveDocsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveDocsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveDocsFormat, files, METH_VARARGS),
          DECLARE_METHOD(t_LiveDocsFormat, readLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_LiveDocsFormat, writeLiveDocs, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LiveDocsFormat)[] = {
          { Py_tp_methods, t_LiveDocsFormat__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LiveDocsFormat)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LiveDocsFormat, t_LiveDocsFormat, LiveDocsFormat);

        void t_LiveDocsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(LiveDocsFormat), &PY_TYPE_DEF(LiveDocsFormat), module, "LiveDocsFormat", 0);
        }

        void t_LiveDocsFormat::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LiveDocsFormat), "class_", make_descriptor(LiveDocsFormat::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LiveDocsFormat), "wrapfn_", make_descriptor(t_LiveDocsFormat::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LiveDocsFormat), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LiveDocsFormat::initializeClass, 1)))
            return NULL;
          return t_LiveDocsFormat::wrap_Object(LiveDocsFormat(((t_LiveDocsFormat *) arg)->object.this$));
        }
        static PyObject *t_LiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LiveDocsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LiveDocsFormat_files(t_LiveDocsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          ::java::util::Collection a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.files(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "files", args);
          return NULL;
        }

        static PyObject *t_LiveDocsFormat_readLiveDocs(t_LiveDocsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.readLiveDocs(a0, a1, a2));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "readLiveDocs", args);
          return NULL;
        }

        static PyObject *t_LiveDocsFormat_writeLiveDocs(t_LiveDocsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::store::Directory a1((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a2((jobject) NULL);
          jint a3;
          ::org::apache::lucene::store::IOContext a4((jobject) NULL);

          if (!parseArgs(args, "kkkIk", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.writeLiveDocs(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeLiveDocs", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/DoubleRangeFacetCounts.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/range/DoubleRange.h"
#include "org/apache/lucene/search/DoubleValuesSource.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *DoubleRangeFacetCounts::class$ = NULL;
          jmethodID *DoubleRangeFacetCounts::mids$ = NULL;
          bool DoubleRangeFacetCounts::live$ = false;

          jclass DoubleRangeFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/DoubleRangeFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_036d2c52e7f475dc] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/range/DoubleRange;)V");
              mids$[mid_init$_cc190e2c30fe3399] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/DoubleValuesSource;Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/range/DoubleRange;)V");
              mids$[mid_init$_1308f03dcc7d1849] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/DoubleValuesSource;Lorg/apache/lucene/facet/FacetsCollector;Lorg/apache/lucene/search/Query;[Lorg/apache/lucene/facet/range/DoubleRange;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DoubleRangeFacetCounts::DoubleRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::facet::FacetsCollector & a1, const JArray< ::org::apache::lucene::facet::range::DoubleRange > & a2) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_036d2c52e7f475dc, a0.this$, a1.this$, a2.this$)) {}

          DoubleRangeFacetCounts::DoubleRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::search::DoubleValuesSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const JArray< ::org::apache::lucene::facet::range::DoubleRange > & a3) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_cc190e2c30fe3399, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          DoubleRangeFacetCounts::DoubleRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::search::DoubleValuesSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const ::org::apache::lucene::search::Query & a3, const JArray< ::org::apache::lucene::facet::range::DoubleRange > & a4) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_1308f03dcc7d1849, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_DoubleRangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DoubleRangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DoubleRangeFacetCounts_init_(t_DoubleRangeFacetCounts *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_DoubleRangeFacetCounts__methods_[] = {
            DECLARE_METHOD(t_DoubleRangeFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleRangeFacetCounts, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DoubleRangeFacetCounts)[] = {
            { Py_tp_methods, t_DoubleRangeFacetCounts__methods_ },
            { Py_tp_init, (void *) t_DoubleRangeFacetCounts_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DoubleRangeFacetCounts)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::facet::range::RangeFacetCounts),
            NULL
          };

          DEFINE_TYPE(DoubleRangeFacetCounts, t_DoubleRangeFacetCounts, DoubleRangeFacetCounts);

          void t_DoubleRangeFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(DoubleRangeFacetCounts), &PY_TYPE_DEF(DoubleRangeFacetCounts), module, "DoubleRangeFacetCounts", 0);
          }

          void t_DoubleRangeFacetCounts::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRangeFacetCounts), "class_", make_descriptor(DoubleRangeFacetCounts::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRangeFacetCounts), "wrapfn_", make_descriptor(t_DoubleRangeFacetCounts::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRangeFacetCounts), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DoubleRangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DoubleRangeFacetCounts::initializeClass, 1)))
              return NULL;
            return t_DoubleRangeFacetCounts::wrap_Object(DoubleRangeFacetCounts(((t_DoubleRangeFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_DoubleRangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DoubleRangeFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DoubleRangeFacetCounts_init_(t_DoubleRangeFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a1((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::DoubleRange > a2((jobject) NULL);
                DoubleRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "sk[k", ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::facet::range::DoubleRange::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = DoubleRangeFacetCounts(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::DoubleValuesSource a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::DoubleRange > a3((jobject) NULL);
                DoubleRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skk[k", ::org::apache::lucene::search::DoubleValuesSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::facet::range::DoubleRange::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = DoubleRangeFacetCounts(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::DoubleValuesSource a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                ::org::apache::lucene::search::Query a3((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::DoubleRange > a4((jobject) NULL);
                DoubleRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skkk[k", ::org::apache::lucene::search::DoubleValuesSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::facet::range::DoubleRange::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = DoubleRangeFacetCounts(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *MultiFieldQueryNodeProcessor::class$ = NULL;
              jmethodID *MultiFieldQueryNodeProcessor::mids$ = NULL;
              bool MultiFieldQueryNodeProcessor::live$ = false;

              jclass MultiFieldQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_processChildren_f80bf4f68564485e] = env->getMethodID(cls, "processChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_e420eeaadf0bcd20] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MultiFieldQueryNodeProcessor::MultiFieldQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_MultiFieldQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MultiFieldQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MultiFieldQueryNodeProcessor_init_(t_MultiFieldQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_MultiFieldQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_MultiFieldQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiFieldQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(MultiFieldQueryNodeProcessor)[] = {
                { Py_tp_methods, t_MultiFieldQueryNodeProcessor__methods_ },
                { Py_tp_init, (void *) t_MultiFieldQueryNodeProcessor_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(MultiFieldQueryNodeProcessor)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl),
                NULL
              };

              DEFINE_TYPE(MultiFieldQueryNodeProcessor, t_MultiFieldQueryNodeProcessor, MultiFieldQueryNodeProcessor);

              void t_MultiFieldQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(MultiFieldQueryNodeProcessor), &PY_TYPE_DEF(MultiFieldQueryNodeProcessor), module, "MultiFieldQueryNodeProcessor", 0);
              }

              void t_MultiFieldQueryNodeProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFieldQueryNodeProcessor), "class_", make_descriptor(MultiFieldQueryNodeProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFieldQueryNodeProcessor), "wrapfn_", make_descriptor(t_MultiFieldQueryNodeProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFieldQueryNodeProcessor), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MultiFieldQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MultiFieldQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_MultiFieldQueryNodeProcessor::wrap_Object(MultiFieldQueryNodeProcessor(((t_MultiFieldQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_MultiFieldQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MultiFieldQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MultiFieldQueryNodeProcessor_init_(t_MultiFieldQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                MultiFieldQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = MultiFieldQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKWidthFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKWidthFilter::class$ = NULL;
          jmethodID *CJKWidthFilter::mids$ = NULL;
          bool CJKWidthFilter::live$ = false;

          jclass CJKWidthFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKWidthFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKWidthFilter::CJKWidthFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean CJKWidthFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKWidthFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKWidthFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKWidthFilter_init_(t_CJKWidthFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKWidthFilter_incrementToken(t_CJKWidthFilter *self, PyObject *args);

          static PyMethodDef t_CJKWidthFilter__methods_[] = {
            DECLARE_METHOD(t_CJKWidthFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CJKWidthFilter)[] = {
            { Py_tp_methods, t_CJKWidthFilter__methods_ },
            { Py_tp_init, (void *) t_CJKWidthFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CJKWidthFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(CJKWidthFilter, t_CJKWidthFilter, CJKWidthFilter);

          void t_CJKWidthFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKWidthFilter), &PY_TYPE_DEF(CJKWidthFilter), module, "CJKWidthFilter", 0);
          }

          void t_CJKWidthFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKWidthFilter), "class_", make_descriptor(CJKWidthFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKWidthFilter), "wrapfn_", make_descriptor(t_CJKWidthFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKWidthFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKWidthFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKWidthFilter::initializeClass, 1)))
              return NULL;
            return t_CJKWidthFilter::wrap_Object(CJKWidthFilter(((t_CJKWidthFilter *) arg)->object.this$));
          }
          static PyObject *t_CJKWidthFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKWidthFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKWidthFilter_init_(t_CJKWidthFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            CJKWidthFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = CJKWidthFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKWidthFilter_incrementToken(t_CJKWidthFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(CJKWidthFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsFormat.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {

          ::java::lang::Class *SimpleTextTermVectorsFormat::class$ = NULL;
          jmethodID *SimpleTextTermVectorsFormat::mids$ = NULL;
          bool SimpleTextTermVectorsFormat::live$ = false;

          jclass SimpleTextTermVectorsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_vectorsReader_e8da19a02e97f6f0] = env->getMethodID(cls, "vectorsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsReader;");
              mids$[mid_vectorsWriter_0dc3e01ac1525114] = env->getMethodID(cls, "vectorsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsWriter;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleTextTermVectorsFormat::SimpleTextTermVectorsFormat() : ::org::apache::lucene::codecs::TermVectorsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::TermVectorsReader SimpleTextTermVectorsFormat::vectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_vectorsReader_e8da19a02e97f6f0], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::TermVectorsWriter SimpleTextTermVectorsFormat::vectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::TermVectorsWriter(env->callObjectMethod(this$, mids$[mid_vectorsWriter_0dc3e01ac1525114], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {
          static PyObject *t_SimpleTextTermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleTextTermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleTextTermVectorsFormat_init_(t_SimpleTextTermVectorsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleTextTermVectorsFormat_vectorsReader(t_SimpleTextTermVectorsFormat *self, PyObject *args);
          static PyObject *t_SimpleTextTermVectorsFormat_vectorsWriter(t_SimpleTextTermVectorsFormat *self, PyObject *args);

          static PyMethodDef t_SimpleTextTermVectorsFormat__methods_[] = {
            DECLARE_METHOD(t_SimpleTextTermVectorsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextTermVectorsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextTermVectorsFormat, vectorsReader, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextTermVectorsFormat, vectorsWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleTextTermVectorsFormat)[] = {
            { Py_tp_methods, t_SimpleTextTermVectorsFormat__methods_ },
            { Py_tp_init, (void *) t_SimpleTextTermVectorsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleTextTermVectorsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::TermVectorsFormat),
            NULL
          };

          DEFINE_TYPE(SimpleTextTermVectorsFormat, t_SimpleTextTermVectorsFormat, SimpleTextTermVectorsFormat);

          void t_SimpleTextTermVectorsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleTextTermVectorsFormat), &PY_TYPE_DEF(SimpleTextTermVectorsFormat), module, "SimpleTextTermVectorsFormat", 0);
          }

          void t_SimpleTextTermVectorsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextTermVectorsFormat), "class_", make_descriptor(SimpleTextTermVectorsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextTermVectorsFormat), "wrapfn_", make_descriptor(t_SimpleTextTermVectorsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextTermVectorsFormat), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleTextTermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleTextTermVectorsFormat::initializeClass, 1)))
              return NULL;
            return t_SimpleTextTermVectorsFormat::wrap_Object(SimpleTextTermVectorsFormat(((t_SimpleTextTermVectorsFormat *) arg)->object.this$));
          }
          static PyObject *t_SimpleTextTermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleTextTermVectorsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleTextTermVectorsFormat_init_(t_SimpleTextTermVectorsFormat *self, PyObject *args, PyObject *kwds)
          {
            SimpleTextTermVectorsFormat object((jobject) NULL);

            INT_CALL(object = SimpleTextTermVectorsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_SimpleTextTermVectorsFormat_vectorsReader(t_SimpleTextTermVectorsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.vectorsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextTermVectorsFormat), (PyObject *) self, "vectorsReader", args, 2);
          }

          static PyObject *t_SimpleTextTermVectorsFormat_vectorsWriter(t_SimpleTextTermVectorsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::TermVectorsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.vectorsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_TermVectorsWriter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextTermVectorsFormat), (PyObject *) self, "vectorsWriter", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Encoder::class$ = NULL;
          jmethodID *Encoder::mids$ = NULL;
          bool Encoder::live$ = false;

          jclass Encoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Encoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_encodeText_9bfa75c9f141b67f] = env->getMethodID(cls, "encodeText", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String Encoder::encodeText(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_encodeText_9bfa75c9f141b67f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Encoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Encoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Encoder_encodeText(t_Encoder *self, PyObject *arg);

          static PyMethodDef t_Encoder__methods_[] = {
            DECLARE_METHOD(t_Encoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Encoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Encoder, encodeText, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Encoder)[] = {
            { Py_tp_methods, t_Encoder__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Encoder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Encoder, t_Encoder, Encoder);

          void t_Encoder::install(PyObject *module)
          {
            installType(&PY_TYPE(Encoder), &PY_TYPE_DEF(Encoder), module, "Encoder", 0);
          }

          void t_Encoder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Encoder), "class_", make_descriptor(Encoder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Encoder), "wrapfn_", make_descriptor(t_Encoder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Encoder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Encoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Encoder::initializeClass, 1)))
              return NULL;
            return t_Encoder::wrap_Object(Encoder(((t_Encoder *) arg)->object.this$));
          }
          static PyObject *t_Encoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Encoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Encoder_encodeText(t_Encoder *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.encodeText(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "encodeText", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/bkd/HeapPointWriter.h"
#include "org/apache/lucene/util/bkd/PointWriter.h"
#include "org/apache/lucene/util/bkd/PointValue.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/bkd/BKDConfig.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/bkd/PointReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {

          ::java::lang::Class *HeapPointWriter::class$ = NULL;
          jmethodID *HeapPointWriter::mids$ = NULL;
          jfieldID *HeapPointWriter::fids$ = NULL;
          bool HeapPointWriter::live$ = false;

          jclass HeapPointWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/bkd/HeapPointWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c4ce6b35e77cb8f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/bkd/BKDConfig;I)V");
              mids$[mid_append_c20445b6b5276287] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/util/bkd/PointValue;)V");
              mids$[mid_append_2a8b02a5adcbf830] = env->getMethodID(cls, "append", "([BI)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_computeCardinality_556cd67a8ecf89ce] = env->getMethodID(cls, "computeCardinality", "(II[I)I");
              mids$[mid_count_2e5ae9edcb9b072f] = env->getMethodID(cls, "count", "()J");
              mids$[mid_destroy_f2cc1bce94666404] = env->getMethodID(cls, "destroy", "()V");
              mids$[mid_getPackedValueSlice_a703faa59e58dca1] = env->getMethodID(cls, "getPackedValueSlice", "(I)Lorg/apache/lucene/util/bkd/PointValue;");
              mids$[mid_getReader_d2caf9396a104071] = env->getMethodID(cls, "getReader", "(JJ)Lorg/apache/lucene/util/bkd/PointReader;");
              mids$[mid_swap_438c62480c481c65] = env->getMethodID(cls, "swap", "(II)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_block] = env->getFieldID(cls, "block", "[B");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HeapPointWriter::HeapPointWriter(const ::org::apache::lucene::util::bkd::BKDConfig & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c4ce6b35e77cb8f0, a0.this$, a1)) {}

          void HeapPointWriter::append(const ::org::apache::lucene::util::bkd::PointValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_append_c20445b6b5276287], a0.this$);
          }

          void HeapPointWriter::append(const JArray< jbyte > & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_append_2a8b02a5adcbf830], a0.this$, a1);
          }

          void HeapPointWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          jint HeapPointWriter::computeCardinality(jint a0, jint a1, const JArray< jint > & a2) const
          {
            return env->callIntMethod(this$, mids$[mid_computeCardinality_556cd67a8ecf89ce], a0, a1, a2.this$);
          }

          jlong HeapPointWriter::count() const
          {
            return env->callLongMethod(this$, mids$[mid_count_2e5ae9edcb9b072f]);
          }

          void HeapPointWriter::destroy() const
          {
            env->callVoidMethod(this$, mids$[mid_destroy_f2cc1bce94666404]);
          }

          ::org::apache::lucene::util::bkd::PointValue HeapPointWriter::getPackedValueSlice(jint a0) const
          {
            return ::org::apache::lucene::util::bkd::PointValue(env->callObjectMethod(this$, mids$[mid_getPackedValueSlice_a703faa59e58dca1], a0));
          }

          ::org::apache::lucene::util::bkd::PointReader HeapPointWriter::getReader(jlong a0, jlong a1) const
          {
            return ::org::apache::lucene::util::bkd::PointReader(env->callObjectMethod(this$, mids$[mid_getReader_d2caf9396a104071], a0, a1));
          }

          void HeapPointWriter::swap(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_swap_438c62480c481c65], a0, a1);
          }

          ::java::lang::String HeapPointWriter::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          JArray< jbyte > HeapPointWriter::_get_block() const
          {
            return JArray< jbyte >(env->getObjectField(this$, fids$[fid_block]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {
          static PyObject *t_HeapPointWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HeapPointWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HeapPointWriter_init_(t_HeapPointWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HeapPointWriter_append(t_HeapPointWriter *self, PyObject *args);
          static PyObject *t_HeapPointWriter_close(t_HeapPointWriter *self);
          static PyObject *t_HeapPointWriter_computeCardinality(t_HeapPointWriter *self, PyObject *args);
          static PyObject *t_HeapPointWriter_count(t_HeapPointWriter *self);
          static PyObject *t_HeapPointWriter_destroy(t_HeapPointWriter *self);
          static PyObject *t_HeapPointWriter_getPackedValueSlice(t_HeapPointWriter *self, PyObject *arg);
          static PyObject *t_HeapPointWriter_getReader(t_HeapPointWriter *self, PyObject *args);
          static PyObject *t_HeapPointWriter_swap(t_HeapPointWriter *self, PyObject *args);
          static PyObject *t_HeapPointWriter_toString(t_HeapPointWriter *self, PyObject *args);
          static PyObject *t_HeapPointWriter_get__block(t_HeapPointWriter *self, void *data);

          static PyGetSetDef t_HeapPointWriter__fields_[] = {
            DECLARE_GET_FIELD(t_HeapPointWriter, block),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_HeapPointWriter__methods_[] = {
            DECLARE_METHOD(t_HeapPointWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HeapPointWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HeapPointWriter, append, METH_VARARGS),
            DECLARE_METHOD(t_HeapPointWriter, close, METH_NOARGS),
            DECLARE_METHOD(t_HeapPointWriter, computeCardinality, METH_VARARGS),
            DECLARE_METHOD(t_HeapPointWriter, count, METH_NOARGS),
            DECLARE_METHOD(t_HeapPointWriter, destroy, METH_NOARGS),
            DECLARE_METHOD(t_HeapPointWriter, getPackedValueSlice, METH_O),
            DECLARE_METHOD(t_HeapPointWriter, getReader, METH_VARARGS),
            DECLARE_METHOD(t_HeapPointWriter, swap, METH_VARARGS),
            DECLARE_METHOD(t_HeapPointWriter, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HeapPointWriter)[] = {
            { Py_tp_methods, t_HeapPointWriter__methods_ },
            { Py_tp_init, (void *) t_HeapPointWriter_init_ },
            { Py_tp_getset, t_HeapPointWriter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HeapPointWriter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(HeapPointWriter, t_HeapPointWriter, HeapPointWriter);

          void t_HeapPointWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(HeapPointWriter), &PY_TYPE_DEF(HeapPointWriter), module, "HeapPointWriter", 0);
          }

          void t_HeapPointWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HeapPointWriter), "class_", make_descriptor(HeapPointWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HeapPointWriter), "wrapfn_", make_descriptor(t_HeapPointWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HeapPointWriter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HeapPointWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HeapPointWriter::initializeClass, 1)))
              return NULL;
            return t_HeapPointWriter::wrap_Object(HeapPointWriter(((t_HeapPointWriter *) arg)->object.this$));
          }
          static PyObject *t_HeapPointWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HeapPointWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HeapPointWriter_init_(t_HeapPointWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::bkd::BKDConfig a0((jobject) NULL);
            jint a1;
            HeapPointWriter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::bkd::BKDConfig::initializeClass, &a0, &a1))
            {
              INT_CALL(object = HeapPointWriter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HeapPointWriter_append(t_HeapPointWriter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::bkd::PointValue a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::bkd::PointValue::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.append(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                JArray< jbyte > a0((jobject) NULL);
                jint a1;

                if (!parseArgs(args, "[BI", &a0, &a1))
                {
                  OBJ_CALL(self->object.append(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
          }

          static PyObject *t_HeapPointWriter_close(t_HeapPointWriter *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          static PyObject *t_HeapPointWriter_computeCardinality(t_HeapPointWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;
            JArray< jint > a2((jobject) NULL);
            jint result;

            if (!parseArgs(args, "II[I", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeCardinality(a0, a1, a2));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeCardinality", args);
            return NULL;
          }

          static PyObject *t_HeapPointWriter_count(t_HeapPointWriter *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.count());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_HeapPointWriter_destroy(t_HeapPointWriter *self)
          {
            OBJ_CALL(self->object.destroy());
            Py_RETURN_NONE;
          }

          static PyObject *t_HeapPointWriter_getPackedValueSlice(t_HeapPointWriter *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::util::bkd::PointValue result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getPackedValueSlice(a0));
              return ::org::apache::lucene::util::bkd::t_PointValue::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPackedValueSlice", arg);
            return NULL;
          }

          static PyObject *t_HeapPointWriter_getReader(t_HeapPointWriter *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            ::org::apache::lucene::util::bkd::PointReader result((jobject) NULL);

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getReader(a0, a1));
              return ::org::apache::lucene::util::bkd::t_PointReader::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getReader", args);
            return NULL;
          }

          static PyObject *t_HeapPointWriter_swap(t_HeapPointWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.swap(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "swap", args);
            return NULL;
          }

          static PyObject *t_HeapPointWriter_toString(t_HeapPointWriter *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(HeapPointWriter), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_HeapPointWriter_get__block(t_HeapPointWriter *self, void *data)
          {
            JArray< jbyte > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_block());
            return value.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RAMInputStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/RAMFile.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RAMInputStream::class$ = NULL;
        jmethodID *RAMInputStream::mids$ = NULL;
        bool RAMInputStream::live$ = false;

        jclass RAMInputStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RAMInputStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b0581cc4c8f36a2c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getFilePointer_2e5ae9edcb9b072f] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_length_2e5ae9edcb9b072f] = env->getMethodID(cls, "length", "()J");
            mids$[mid_readByte_871cd52a74f26213] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_seek_9c778c9bce6694df] = env->getMethodID(cls, "seek", "(J)V");
            mids$[mid_slice_552ef5e8b06b1e84] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/IndexInput;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RAMInputStream::RAMInputStream(const ::java::lang::String & a0, const ::org::apache::lucene::store::RAMFile & a1) : ::org::apache::lucene::store::IndexInput(env->newObject(initializeClass, &mids$, mid_init$_b0581cc4c8f36a2c, a0.this$, a1.this$)) {}

        void RAMInputStream::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        jlong RAMInputStream::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_2e5ae9edcb9b072f]);
        }

        jlong RAMInputStream::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_2e5ae9edcb9b072f]);
        }

        jbyte RAMInputStream::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_871cd52a74f26213]);
        }

        void RAMInputStream::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }

        void RAMInputStream::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_9c778c9bce6694df], a0);
        }

        ::org::apache::lucene::store::IndexInput RAMInputStream::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_slice_552ef5e8b06b1e84], a0.this$, a1, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RAMInputStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RAMInputStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RAMInputStream_init_(t_RAMInputStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RAMInputStream_close(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_getFilePointer(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_length(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_readByte(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_readBytes(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_seek(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_slice(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_get__filePointer(t_RAMInputStream *self, void *data);
        static PyGetSetDef t_RAMInputStream__fields_[] = {
          DECLARE_GET_FIELD(t_RAMInputStream, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RAMInputStream__methods_[] = {
          DECLARE_METHOD(t_RAMInputStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMInputStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMInputStream, close, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, length, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, readByte, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, seek, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, slice, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RAMInputStream)[] = {
          { Py_tp_methods, t_RAMInputStream__methods_ },
          { Py_tp_init, (void *) t_RAMInputStream_init_ },
          { Py_tp_getset, t_RAMInputStream__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RAMInputStream)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::IndexInput),
          NULL
        };

        DEFINE_TYPE(RAMInputStream, t_RAMInputStream, RAMInputStream);

        void t_RAMInputStream::install(PyObject *module)
        {
          installType(&PY_TYPE(RAMInputStream), &PY_TYPE_DEF(RAMInputStream), module, "RAMInputStream", 0);
        }

        void t_RAMInputStream::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RAMInputStream), "class_", make_descriptor(RAMInputStream::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RAMInputStream), "wrapfn_", make_descriptor(t_RAMInputStream::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RAMInputStream), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RAMInputStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RAMInputStream::initializeClass, 1)))
            return NULL;
          return t_RAMInputStream::wrap_Object(RAMInputStream(((t_RAMInputStream *) arg)->object.this$));
        }
        static PyObject *t_RAMInputStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RAMInputStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RAMInputStream_init_(t_RAMInputStream *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::RAMFile a1((jobject) NULL);
          RAMInputStream object((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::RAMFile::initializeClass, &a0, &a1))
          {
            INT_CALL(object = RAMInputStream(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RAMInputStream_close(t_RAMInputStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(RAMInputStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_RAMInputStream_getFilePointer(t_RAMInputStream *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(RAMInputStream), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_RAMInputStream_length(t_RAMInputStream *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.length());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(RAMInputStream), (PyObject *) self, "length", args, 2);
        }

        static PyObject *t_RAMInputStream_readByte(t_RAMInputStream *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(RAMInputStream), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_RAMInputStream_readBytes(t_RAMInputStream *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(RAMInputStream), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_RAMInputStream_seek(t_RAMInputStream *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(RAMInputStream), (PyObject *) self, "seek", args, 2);
        }

        static PyObject *t_RAMInputStream_slice(t_RAMInputStream *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(RAMInputStream), (PyObject *) self, "slice", args, 2);
        }

        static PyObject *t_RAMInputStream_get__filePointer(t_RAMInputStream *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *OffsetAttribute::class$ = NULL;
          jmethodID *OffsetAttribute::mids$ = NULL;
          bool OffsetAttribute::live$ = false;

          jclass OffsetAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/OffsetAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_endOffset_9972fcc56b44e79d] = env->getMethodID(cls, "endOffset", "()I");
              mids$[mid_setOffset_438c62480c481c65] = env->getMethodID(cls, "setOffset", "(II)V");
              mids$[mid_startOffset_9972fcc56b44e79d] = env->getMethodID(cls, "startOffset", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint OffsetAttribute::endOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_endOffset_9972fcc56b44e79d]);
          }

          void OffsetAttribute::setOffset(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setOffset_438c62480c481c65], a0, a1);
          }

          jint OffsetAttribute::startOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_startOffset_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_OffsetAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetAttribute_endOffset(t_OffsetAttribute *self);
          static PyObject *t_OffsetAttribute_setOffset(t_OffsetAttribute *self, PyObject *args);
          static PyObject *t_OffsetAttribute_startOffset(t_OffsetAttribute *self);

          static PyMethodDef t_OffsetAttribute__methods_[] = {
            DECLARE_METHOD(t_OffsetAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetAttribute, endOffset, METH_NOARGS),
            DECLARE_METHOD(t_OffsetAttribute, setOffset, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttribute, startOffset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(OffsetAttribute)[] = {
            { Py_tp_methods, t_OffsetAttribute__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(OffsetAttribute)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::Attribute),
            NULL
          };

          DEFINE_TYPE(OffsetAttribute, t_OffsetAttribute, OffsetAttribute);

          void t_OffsetAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(OffsetAttribute), &PY_TYPE_DEF(OffsetAttribute), module, "OffsetAttribute", 0);
          }

          void t_OffsetAttribute::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetAttribute), "class_", make_descriptor(OffsetAttribute::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetAttribute), "wrapfn_", make_descriptor(t_OffsetAttribute::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetAttribute), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OffsetAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OffsetAttribute::initializeClass, 1)))
              return NULL;
            return t_OffsetAttribute::wrap_Object(OffsetAttribute(((t_OffsetAttribute *) arg)->object.this$));
          }
          static PyObject *t_OffsetAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OffsetAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_OffsetAttribute_endOffset(t_OffsetAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.endOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_OffsetAttribute_setOffset(t_OffsetAttribute *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.setOffset(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOffset", args);
            return NULL;
          }

          static PyObject *t_OffsetAttribute_startOffset(t_OffsetAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.startOffset());
            return PyLong_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AfterEffectB.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AfterEffectB::class$ = NULL;
          jmethodID *AfterEffectB::mids$ = NULL;
          bool AfterEffectB::live$ = false;

          jclass AfterEffectB::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AfterEffectB");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_9724c62abce55cf4] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;D)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_scoreTimes1pTfn_3f1239f1e5e20981] = env->getMethodID(cls, "scoreTimes1pTfn", "(Lorg/apache/lucene/search/similarities/BasicStats;)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AfterEffectB::AfterEffectB() : ::org::apache::lucene::search::similarities::AfterEffect(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::search::Explanation AfterEffectB::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_9724c62abce55cf4], a0.this$, a1));
          }

          jdouble AfterEffectB::scoreTimes1pTfn(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_scoreTimes1pTfn_3f1239f1e5e20981], a0.this$);
          }

          ::java::lang::String AfterEffectB::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AfterEffectB_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AfterEffectB_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AfterEffectB_init_(t_AfterEffectB *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AfterEffectB_explain(t_AfterEffectB *self, PyObject *args);
          static PyObject *t_AfterEffectB_scoreTimes1pTfn(t_AfterEffectB *self, PyObject *args);
          static PyObject *t_AfterEffectB_toString(t_AfterEffectB *self, PyObject *args);

          static PyMethodDef t_AfterEffectB__methods_[] = {
            DECLARE_METHOD(t_AfterEffectB, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffectB, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffectB, explain, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffectB, scoreTimes1pTfn, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffectB, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(AfterEffectB)[] = {
            { Py_tp_methods, t_AfterEffectB__methods_ },
            { Py_tp_init, (void *) t_AfterEffectB_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(AfterEffectB)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::AfterEffect),
            NULL
          };

          DEFINE_TYPE(AfterEffectB, t_AfterEffectB, AfterEffectB);

          void t_AfterEffectB::install(PyObject *module)
          {
            installType(&PY_TYPE(AfterEffectB), &PY_TYPE_DEF(AfterEffectB), module, "AfterEffectB", 0);
          }

          void t_AfterEffectB::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(AfterEffectB), "class_", make_descriptor(AfterEffectB::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AfterEffectB), "wrapfn_", make_descriptor(t_AfterEffectB::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AfterEffectB), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AfterEffectB_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AfterEffectB::initializeClass, 1)))
              return NULL;
            return t_AfterEffectB::wrap_Object(AfterEffectB(((t_AfterEffectB *) arg)->object.this$));
          }
          static PyObject *t_AfterEffectB_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AfterEffectB::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AfterEffectB_init_(t_AfterEffectB *self, PyObject *args, PyObject *kwds)
          {
            AfterEffectB object((jobject) NULL);

            INT_CALL(object = AfterEffectB());
            self->object = object;

            return 0;
          }

          static PyObject *t_AfterEffectB_explain(t_AfterEffectB *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(PY_TYPE(AfterEffectB), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_AfterEffectB_scoreTimes1pTfn(t_AfterEffectB *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble result;

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.scoreTimes1pTfn(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(AfterEffectB), (PyObject *) self, "scoreTimes1pTfn", args, 2);
          }

          static PyObject *t_AfterEffectB_toString(t_AfterEffectB *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(AfterEffectB), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/IndriDirichletSimilarity$IndriCollectionModel.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *IndriDirichletSimilarity$IndriCollectionModel::class$ = NULL;
          jmethodID *IndriDirichletSimilarity$IndriCollectionModel::mids$ = NULL;
          bool IndriDirichletSimilarity$IndriCollectionModel::live$ = false;

          jclass IndriDirichletSimilarity$IndriCollectionModel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/IndriDirichletSimilarity$IndriCollectionModel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeProbability_3f1239f1e5e20981] = env->getMethodID(cls, "computeProbability", "(Lorg/apache/lucene/search/similarities/BasicStats;)D");
              mids$[mid_getName_db9b55ba01e03e4b] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndriDirichletSimilarity$IndriCollectionModel::IndriDirichletSimilarity$IndriCollectionModel() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jdouble IndriDirichletSimilarity$IndriCollectionModel::computeProbability(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeProbability_3f1239f1e5e20981], a0.this$);
          }

          ::java::lang::String IndriDirichletSimilarity$IndriCollectionModel::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_IndriDirichletSimilarity$IndriCollectionModel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndriDirichletSimilarity$IndriCollectionModel_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndriDirichletSimilarity$IndriCollectionModel_init_(t_IndriDirichletSimilarity$IndriCollectionModel *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndriDirichletSimilarity$IndriCollectionModel_computeProbability(t_IndriDirichletSimilarity$IndriCollectionModel *self, PyObject *arg);
          static PyObject *t_IndriDirichletSimilarity$IndriCollectionModel_getName(t_IndriDirichletSimilarity$IndriCollectionModel *self);
          static PyObject *t_IndriDirichletSimilarity$IndriCollectionModel_get__name(t_IndriDirichletSimilarity$IndriCollectionModel *self, void *data);
          static PyGetSetDef t_IndriDirichletSimilarity$IndriCollectionModel__fields_[] = {
            DECLARE_GET_FIELD(t_IndriDirichletSimilarity$IndriCollectionModel, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IndriDirichletSimilarity$IndriCollectionModel__methods_[] = {
            DECLARE_METHOD(t_IndriDirichletSimilarity$IndriCollectionModel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndriDirichletSimilarity$IndriCollectionModel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndriDirichletSimilarity$IndriCollectionModel, computeProbability, METH_O),
            DECLARE_METHOD(t_IndriDirichletSimilarity$IndriCollectionModel, getName, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IndriDirichletSimilarity$IndriCollectionModel)[] = {
            { Py_tp_methods, t_IndriDirichletSimilarity$IndriCollectionModel__methods_ },
            { Py_tp_init, (void *) t_IndriDirichletSimilarity$IndriCollectionModel_init_ },
            { Py_tp_getset, t_IndriDirichletSimilarity$IndriCollectionModel__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IndriDirichletSimilarity$IndriCollectionModel)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(IndriDirichletSimilarity$IndriCollectionModel, t_IndriDirichletSimilarity$IndriCollectionModel, IndriDirichletSimilarity$IndriCollectionModel);

          void t_IndriDirichletSimilarity$IndriCollectionModel::install(PyObject *module)
          {
            installType(&PY_TYPE(IndriDirichletSimilarity$IndriCollectionModel), &PY_TYPE_DEF(IndriDirichletSimilarity$IndriCollectionModel), module, "IndriDirichletSimilarity$IndriCollectionModel", 0);
          }

          void t_IndriDirichletSimilarity$IndriCollectionModel::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndriDirichletSimilarity$IndriCollectionModel), "class_", make_descriptor(IndriDirichletSimilarity$IndriCollectionModel::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndriDirichletSimilarity$IndriCollectionModel), "wrapfn_", make_descriptor(t_IndriDirichletSimilarity$IndriCollectionModel::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndriDirichletSimilarity$IndriCollectionModel), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndriDirichletSimilarity$IndriCollectionModel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndriDirichletSimilarity$IndriCollectionModel::initializeClass, 1)))
              return NULL;
            return t_IndriDirichletSimilarity$IndriCollectionModel::wrap_Object(IndriDirichletSimilarity$IndriCollectionModel(((t_IndriDirichletSimilarity$IndriCollectionModel *) arg)->object.this$));
          }
          static PyObject *t_IndriDirichletSimilarity$IndriCollectionModel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndriDirichletSimilarity$IndriCollectionModel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndriDirichletSimilarity$IndriCollectionModel_init_(t_IndriDirichletSimilarity$IndriCollectionModel *self, PyObject *args, PyObject *kwds)
          {
            IndriDirichletSimilarity$IndriCollectionModel object((jobject) NULL);

            INT_CALL(object = IndriDirichletSimilarity$IndriCollectionModel());
            self->object = object;

            return 0;
          }

          static PyObject *t_IndriDirichletSimilarity$IndriCollectionModel_computeProbability(t_IndriDirichletSimilarity$IndriCollectionModel *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeProbability(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeProbability", arg);
            return NULL;
          }

          static PyObject *t_IndriDirichletSimilarity$IndriCollectionModel_getName(t_IndriDirichletSimilarity$IndriCollectionModel *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getName());
            return j2p(result);
          }

          static PyObject *t_IndriDirichletSimilarity$IndriCollectionModel_get__name(t_IndriDirichletSimilarity$IndriCollectionModel *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/RSLPStemmerBase.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *RSLPStemmerBase::class$ = NULL;
          jmethodID *RSLPStemmerBase::mids$ = NULL;
          bool RSLPStemmerBase::live$ = false;

          jclass RSLPStemmerBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/RSLPStemmerBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_parse_676a479803caefe3] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/Map;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RSLPStemmerBase::RSLPStemmerBase() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_RSLPStemmerBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RSLPStemmerBase_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RSLPStemmerBase_init_(t_RSLPStemmerBase *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_RSLPStemmerBase__methods_[] = {
            DECLARE_METHOD(t_RSLPStemmerBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RSLPStemmerBase, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(RSLPStemmerBase)[] = {
            { Py_tp_methods, t_RSLPStemmerBase__methods_ },
            { Py_tp_init, (void *) t_RSLPStemmerBase_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(RSLPStemmerBase)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(RSLPStemmerBase, t_RSLPStemmerBase, RSLPStemmerBase);

          void t_RSLPStemmerBase::install(PyObject *module)
          {
            installType(&PY_TYPE(RSLPStemmerBase), &PY_TYPE_DEF(RSLPStemmerBase), module, "RSLPStemmerBase", 0);
          }

          void t_RSLPStemmerBase::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(RSLPStemmerBase), "class_", make_descriptor(RSLPStemmerBase::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RSLPStemmerBase), "wrapfn_", make_descriptor(t_RSLPStemmerBase::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RSLPStemmerBase), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RSLPStemmerBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RSLPStemmerBase::initializeClass, 1)))
              return NULL;
            return t_RSLPStemmerBase::wrap_Object(RSLPStemmerBase(((t_RSLPStemmerBase *) arg)->object.this$));
          }
          static PyObject *t_RSLPStemmerBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RSLPStemmerBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RSLPStemmerBase_init_(t_RSLPStemmerBase *self, PyObject *args, PyObject *kwds)
          {
            RSLPStemmerBase object((jobject) NULL);

            INT_CALL(object = RSLPStemmerBase());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModel.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModel::class$ = NULL;
          jmethodID *BasicModel::mids$ = NULL;
          bool BasicModel::live$ = false;

          jclass BasicModel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_77a68ba236144920] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_761ab1c432346fd0] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModel::BasicModel() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::search::Explanation BasicModel::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_77a68ba236144920], a0.this$, a1, a2));
          }

          jdouble BasicModel::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_score_761ab1c432346fd0], a0.this$, a1, a2);
          }

          ::java::lang::String BasicModel::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModel_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModel_init_(t_BasicModel *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModel_explain(t_BasicModel *self, PyObject *args);
          static PyObject *t_BasicModel_score(t_BasicModel *self, PyObject *args);
          static PyObject *t_BasicModel_toString(t_BasicModel *self, PyObject *args);

          static PyMethodDef t_BasicModel__methods_[] = {
            DECLARE_METHOD(t_BasicModel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModel, explain, METH_VARARGS),
            DECLARE_METHOD(t_BasicModel, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModel, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BasicModel)[] = {
            { Py_tp_methods, t_BasicModel__methods_ },
            { Py_tp_init, (void *) t_BasicModel_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BasicModel)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BasicModel, t_BasicModel, BasicModel);

          void t_BasicModel::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModel), &PY_TYPE_DEF(BasicModel), module, "BasicModel", 0);
          }

          void t_BasicModel::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasicModel), "class_", make_descriptor(BasicModel::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasicModel), "wrapfn_", make_descriptor(t_BasicModel::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasicModel), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModel::initializeClass, 1)))
              return NULL;
            return t_BasicModel::wrap_Object(BasicModel(((t_BasicModel *) arg)->object.this$));
          }
          static PyObject *t_BasicModel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModel_init_(t_BasicModel *self, PyObject *args, PyObject *kwds)
          {
            BasicModel object((jobject) NULL);

            INT_CALL(object = BasicModel());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModel_explain(t_BasicModel *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_BasicModel_score(t_BasicModel *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            jdouble result;

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.score(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }

          static PyObject *t_BasicModel_toString(t_BasicModel *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(BasicModel), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/GeoEncodingUtils.h"
#include "org/apache/lucene/geo/GeoEncodingUtils$Component2DPredicate.h"
#include "org/apache/lucene/geo/GeoEncodingUtils$DistancePredicate.h"
#include "org/apache/lucene/geo/Component2D.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *GeoEncodingUtils::class$ = NULL;
        jmethodID *GeoEncodingUtils::mids$ = NULL;
        bool GeoEncodingUtils::live$ = false;
        jshort GeoEncodingUtils::BITS = (jshort) 0;
        jint GeoEncodingUtils::MAX_LON_ENCODED = (jint) 0;
        jint GeoEncodingUtils::MIN_LON_ENCODED = (jint) 0;

        jclass GeoEncodingUtils::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/GeoEncodingUtils");

            mids$ = new jmethodID[max_mid];
            mids$[mid_createComponentPredicate_79471eae537a597b] = env->getStaticMethodID(cls, "createComponentPredicate", "(Lorg/apache/lucene/geo/Component2D;)Lorg/apache/lucene/geo/GeoEncodingUtils$Component2DPredicate;");
            mids$[mid_createDistancePredicate_72c4dadf72f59c34] = env->getStaticMethodID(cls, "createDistancePredicate", "(DDD)Lorg/apache/lucene/geo/GeoEncodingUtils$DistancePredicate;");
            mids$[mid_decodeLatitude_f3ddedc0b6f18620] = env->getStaticMethodID(cls, "decodeLatitude", "(I)D");
            mids$[mid_decodeLatitude_bc974b36f386a0c3] = env->getStaticMethodID(cls, "decodeLatitude", "([BI)D");
            mids$[mid_decodeLongitude_f3ddedc0b6f18620] = env->getStaticMethodID(cls, "decodeLongitude", "(I)D");
            mids$[mid_decodeLongitude_bc974b36f386a0c3] = env->getStaticMethodID(cls, "decodeLongitude", "([BI)D");
            mids$[mid_encodeLatitude_c1957bf1459ac23a] = env->getStaticMethodID(cls, "encodeLatitude", "(D)I");
            mids$[mid_encodeLatitudeCeil_c1957bf1459ac23a] = env->getStaticMethodID(cls, "encodeLatitudeCeil", "(D)I");
            mids$[mid_encodeLongitude_c1957bf1459ac23a] = env->getStaticMethodID(cls, "encodeLongitude", "(D)I");
            mids$[mid_encodeLongitudeCeil_c1957bf1459ac23a] = env->getStaticMethodID(cls, "encodeLongitudeCeil", "(D)I");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            BITS = env->getStaticShortField(cls, "BITS");
            MAX_LON_ENCODED = env->getStaticIntField(cls, "MAX_LON_ENCODED");
            MIN_LON_ENCODED = env->getStaticIntField(cls, "MIN_LON_ENCODED");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::geo::GeoEncodingUtils$Component2DPredicate GeoEncodingUtils::createComponentPredicate(const ::org::apache::lucene::geo::Component2D & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::geo::GeoEncodingUtils$Component2DPredicate(env->callStaticObjectMethod(cls, mids$[mid_createComponentPredicate_79471eae537a597b], a0.this$));
        }

        ::org::apache::lucene::geo::GeoEncodingUtils$DistancePredicate GeoEncodingUtils::createDistancePredicate(jdouble a0, jdouble a1, jdouble a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::geo::GeoEncodingUtils$DistancePredicate(env->callStaticObjectMethod(cls, mids$[mid_createDistancePredicate_72c4dadf72f59c34], a0, a1, a2));
        }

        jdouble GeoEncodingUtils::decodeLatitude(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_decodeLatitude_f3ddedc0b6f18620], a0);
        }

        jdouble GeoEncodingUtils::decodeLatitude(const JArray< jbyte > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_decodeLatitude_bc974b36f386a0c3], a0.this$, a1);
        }

        jdouble GeoEncodingUtils::decodeLongitude(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_decodeLongitude_f3ddedc0b6f18620], a0);
        }

        jdouble GeoEncodingUtils::decodeLongitude(const JArray< jbyte > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_decodeLongitude_bc974b36f386a0c3], a0.this$, a1);
        }

        jint GeoEncodingUtils::encodeLatitude(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_encodeLatitude_c1957bf1459ac23a], a0);
        }

        jint GeoEncodingUtils::encodeLatitudeCeil(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_encodeLatitudeCeil_c1957bf1459ac23a], a0);
        }

        jint GeoEncodingUtils::encodeLongitude(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_encodeLongitude_c1957bf1459ac23a], a0);
        }

        jint GeoEncodingUtils::encodeLongitudeCeil(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_encodeLongitudeCeil_c1957bf1459ac23a], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/geo/GeoEncodingUtils$Grid.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_GeoEncodingUtils_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GeoEncodingUtils_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GeoEncodingUtils_createComponentPredicate(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GeoEncodingUtils_createDistancePredicate(PyTypeObject *type, PyObject *args);
        static PyObject *t_GeoEncodingUtils_decodeLatitude(PyTypeObject *type, PyObject *args);
        static PyObject *t_GeoEncodingUtils_decodeLongitude(PyTypeObject *type, PyObject *args);
        static PyObject *t_GeoEncodingUtils_encodeLatitude(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GeoEncodingUtils_encodeLatitudeCeil(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GeoEncodingUtils_encodeLongitude(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GeoEncodingUtils_encodeLongitudeCeil(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_GeoEncodingUtils__methods_[] = {
          DECLARE_METHOD(t_GeoEncodingUtils, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GeoEncodingUtils, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GeoEncodingUtils, createComponentPredicate, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GeoEncodingUtils, createDistancePredicate, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_GeoEncodingUtils, decodeLatitude, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_GeoEncodingUtils, decodeLongitude, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_GeoEncodingUtils, encodeLatitude, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GeoEncodingUtils, encodeLatitudeCeil, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GeoEncodingUtils, encodeLongitude, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GeoEncodingUtils, encodeLongitudeCeil, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(GeoEncodingUtils)[] = {
          { Py_tp_methods, t_GeoEncodingUtils__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(GeoEncodingUtils)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(GeoEncodingUtils, t_GeoEncodingUtils, GeoEncodingUtils);

        void t_GeoEncodingUtils::install(PyObject *module)
        {
          installType(&PY_TYPE(GeoEncodingUtils), &PY_TYPE_DEF(GeoEncodingUtils), module, "GeoEncodingUtils", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoEncodingUtils), "Component2DPredicate", make_descriptor(&PY_TYPE_DEF(GeoEncodingUtils$Component2DPredicate)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoEncodingUtils), "DistancePredicate", make_descriptor(&PY_TYPE_DEF(GeoEncodingUtils$DistancePredicate)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoEncodingUtils), "Grid", make_descriptor(&PY_TYPE_DEF(GeoEncodingUtils$Grid)));
        }

        void t_GeoEncodingUtils::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoEncodingUtils), "class_", make_descriptor(GeoEncodingUtils::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoEncodingUtils), "wrapfn_", make_descriptor(t_GeoEncodingUtils::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoEncodingUtils), "boxfn_", make_descriptor(boxObject));
          env->getClass(GeoEncodingUtils::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoEncodingUtils), "BITS", make_descriptor(GeoEncodingUtils::BITS));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoEncodingUtils), "MAX_LON_ENCODED", make_descriptor(GeoEncodingUtils::MAX_LON_ENCODED));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoEncodingUtils), "MIN_LON_ENCODED", make_descriptor(GeoEncodingUtils::MIN_LON_ENCODED));
        }

        static PyObject *t_GeoEncodingUtils_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, GeoEncodingUtils::initializeClass, 1)))
            return NULL;
          return t_GeoEncodingUtils::wrap_Object(GeoEncodingUtils(((t_GeoEncodingUtils *) arg)->object.this$));
        }
        static PyObject *t_GeoEncodingUtils_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, GeoEncodingUtils::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_GeoEncodingUtils_createComponentPredicate(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::geo::Component2D a0((jobject) NULL);
          ::org::apache::lucene::geo::GeoEncodingUtils$Component2DPredicate result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::geo::Component2D::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::GeoEncodingUtils::createComponentPredicate(a0));
            return ::org::apache::lucene::geo::t_GeoEncodingUtils$Component2DPredicate::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "createComponentPredicate", arg);
          return NULL;
        }

        static PyObject *t_GeoEncodingUtils_createDistancePredicate(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          ::org::apache::lucene::geo::GeoEncodingUtils$DistancePredicate result((jobject) NULL);

          if (!parseArgs(args, "DDD", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::GeoEncodingUtils::createDistancePredicate(a0, a1, a2));
            return ::org::apache::lucene::geo::t_GeoEncodingUtils$DistancePredicate::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "createDistancePredicate", args);
          return NULL;
        }

        static PyObject *t_GeoEncodingUtils_decodeLatitude(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::geo::GeoEncodingUtils::decodeLatitude(a0));
                return PyFloat_FromDouble((double) result);
              }
            }
            break;
           case 2:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jdouble result;

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::geo::GeoEncodingUtils::decodeLatitude(a0, a1));
                return PyFloat_FromDouble((double) result);
              }
            }
          }

          PyErr_SetArgsError(type, "decodeLatitude", args);
          return NULL;
        }

        static PyObject *t_GeoEncodingUtils_decodeLongitude(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::geo::GeoEncodingUtils::decodeLongitude(a0));
                return PyFloat_FromDouble((double) result);
              }
            }
            break;
           case 2:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jdouble result;

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::geo::GeoEncodingUtils::decodeLongitude(a0, a1));
                return PyFloat_FromDouble((double) result);
              }
            }
          }

          PyErr_SetArgsError(type, "decodeLongitude", args);
          return NULL;
        }

        static PyObject *t_GeoEncodingUtils_encodeLatitude(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jint result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::GeoEncodingUtils::encodeLatitude(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "encodeLatitude", arg);
          return NULL;
        }

        static PyObject *t_GeoEncodingUtils_encodeLatitudeCeil(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jint result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::GeoEncodingUtils::encodeLatitudeCeil(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "encodeLatitudeCeil", arg);
          return NULL;
        }

        static PyObject *t_GeoEncodingUtils_encodeLongitude(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jint result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::GeoEncodingUtils::encodeLongitude(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "encodeLongitude", arg);
          return NULL;
        }

        static PyObject *t_GeoEncodingUtils_encodeLongitudeCeil(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jint result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::GeoEncodingUtils::encodeLongitudeCeil(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "encodeLongitudeCeil", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/dict/BinaryDictionary.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/analysis/ko/dict/Dictionary$Morpheme.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ko/dict/Dictionary.h"
#include "org/apache/lucene/analysis/ko/POS$Type.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ko/dict/BinaryDictionary$ResourceScheme.h"
#include "org/apache/lucene/analysis/ko/POS$Tag.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace dict {

            ::java::lang::Class *BinaryDictionary::class$ = NULL;
            jmethodID *BinaryDictionary::mids$ = NULL;
            bool BinaryDictionary::live$ = false;
            ::java::lang::String *BinaryDictionary::DICT_FILENAME_SUFFIX = NULL;
            ::java::lang::String *BinaryDictionary::DICT_HEADER = NULL;
            jint BinaryDictionary::HAS_READING = (jint) 0;
            jint BinaryDictionary::HAS_SINGLE_POS = (jint) 0;
            ::java::lang::String *BinaryDictionary::POSDICT_FILENAME_SUFFIX = NULL;
            ::java::lang::String *BinaryDictionary::POSDICT_HEADER = NULL;
            ::java::lang::String *BinaryDictionary::TARGETMAP_FILENAME_SUFFIX = NULL;
            ::java::lang::String *BinaryDictionary::TARGETMAP_HEADER = NULL;
            jint BinaryDictionary::VERSION = (jint) 0;

            jclass BinaryDictionary::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/dict/BinaryDictionary");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getClassResource_df2b4677efc14b73] = env->getStaticMethodID(cls, "getClassResource", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/io/InputStream;");
                mids$[mid_getLeftId_1e143afe1894d213] = env->getMethodID(cls, "getLeftId", "(I)I");
                mids$[mid_getLeftPOS_b8b0dfb882948f38] = env->getMethodID(cls, "getLeftPOS", "(I)Lorg/apache/lucene/analysis/ko/POS$Tag;");
                mids$[mid_getMorphemes_ec2d69830563855a] = env->getMethodID(cls, "getMorphemes", "(I[CII)[Lorg/apache/lucene/analysis/ko/dict/Dictionary$Morpheme;");
                mids$[mid_getPOSType_b7cb9401295fad9c] = env->getMethodID(cls, "getPOSType", "(I)Lorg/apache/lucene/analysis/ko/POS$Type;");
                mids$[mid_getReading_d7593acad64ef635] = env->getMethodID(cls, "getReading", "(I)Ljava/lang/String;");
                mids$[mid_getResource_37b08fdb683a7357] = env->getStaticMethodID(cls, "getResource", "(Lorg/apache/lucene/analysis/ko/dict/BinaryDictionary$ResourceScheme;Ljava/lang/String;)Ljava/io/InputStream;");
                mids$[mid_getRightId_1e143afe1894d213] = env->getMethodID(cls, "getRightId", "(I)I");
                mids$[mid_getRightPOS_b8b0dfb882948f38] = env->getMethodID(cls, "getRightPOS", "(I)Lorg/apache/lucene/analysis/ko/POS$Tag;");
                mids$[mid_getWordCost_1e143afe1894d213] = env->getMethodID(cls, "getWordCost", "(I)I");
                mids$[mid_lookupWordIds_c36a226219ff2c18] = env->getMethodID(cls, "lookupWordIds", "(ILorg/apache/lucene/util/IntsRef;)V");
                mids$[mid_getResource_f9a3577e7bead470] = env->getMethodID(cls, "getResource", "(Ljava/lang/String;)Ljava/io/InputStream;");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                DICT_FILENAME_SUFFIX = new ::java::lang::String(env->getStaticObjectField(cls, "DICT_FILENAME_SUFFIX", "Ljava/lang/String;"));
                DICT_HEADER = new ::java::lang::String(env->getStaticObjectField(cls, "DICT_HEADER", "Ljava/lang/String;"));
                HAS_READING = env->getStaticIntField(cls, "HAS_READING");
                HAS_SINGLE_POS = env->getStaticIntField(cls, "HAS_SINGLE_POS");
                POSDICT_FILENAME_SUFFIX = new ::java::lang::String(env->getStaticObjectField(cls, "POSDICT_FILENAME_SUFFIX", "Ljava/lang/String;"));
                POSDICT_HEADER = new ::java::lang::String(env->getStaticObjectField(cls, "POSDICT_HEADER", "Ljava/lang/String;"));
                TARGETMAP_FILENAME_SUFFIX = new ::java::lang::String(env->getStaticObjectField(cls, "TARGETMAP_FILENAME_SUFFIX", "Ljava/lang/String;"));
                TARGETMAP_HEADER = new ::java::lang::String(env->getStaticObjectField(cls, "TARGETMAP_HEADER", "Ljava/lang/String;"));
                VERSION = env->getStaticIntField(cls, "VERSION");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::io::InputStream BinaryDictionary::getClassResource(const ::java::lang::Class & a0, const ::java::lang::String & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::io::InputStream(env->callStaticObjectMethod(cls, mids$[mid_getClassResource_df2b4677efc14b73], a0.this$, a1.this$));
            }

            jint BinaryDictionary::getLeftId(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getLeftId_1e143afe1894d213], a0);
            }

            ::org::apache::lucene::analysis::ko::POS$Tag BinaryDictionary::getLeftPOS(jint a0) const
            {
              return ::org::apache::lucene::analysis::ko::POS$Tag(env->callObjectMethod(this$, mids$[mid_getLeftPOS_b8b0dfb882948f38], a0));
            }

            JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > BinaryDictionary::getMorphemes(jint a0, const JArray< jchar > & a1, jint a2, jint a3) const
            {
              return JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme >(env->callObjectMethod(this$, mids$[mid_getMorphemes_ec2d69830563855a], a0, a1.this$, a2, a3));
            }

            ::org::apache::lucene::analysis::ko::POS$Type BinaryDictionary::getPOSType(jint a0) const
            {
              return ::org::apache::lucene::analysis::ko::POS$Type(env->callObjectMethod(this$, mids$[mid_getPOSType_b7cb9401295fad9c], a0));
            }

            ::java::lang::String BinaryDictionary::getReading(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getReading_d7593acad64ef635], a0));
            }

            ::java::io::InputStream BinaryDictionary::getResource(const ::org::apache::lucene::analysis::ko::dict::BinaryDictionary$ResourceScheme & a0, const ::java::lang::String & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::io::InputStream(env->callStaticObjectMethod(cls, mids$[mid_getResource_37b08fdb683a7357], a0.this$, a1.this$));
            }

            jint BinaryDictionary::getRightId(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getRightId_1e143afe1894d213], a0);
            }

            ::org::apache::lucene::analysis::ko::POS$Tag BinaryDictionary::getRightPOS(jint a0) const
            {
              return ::org::apache::lucene::analysis::ko::POS$Tag(env->callObjectMethod(this$, mids$[mid_getRightPOS_b8b0dfb882948f38], a0));
            }

            jint BinaryDictionary::getWordCost(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getWordCost_1e143afe1894d213], a0);
            }

            void BinaryDictionary::lookupWordIds(jint a0, const ::org::apache::lucene::util::IntsRef & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_lookupWordIds_c36a226219ff2c18], a0, a1.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace dict {
            static PyObject *t_BinaryDictionary_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BinaryDictionary_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BinaryDictionary_getClassResource(PyTypeObject *type, PyObject *args);
            static PyObject *t_BinaryDictionary_getLeftId(t_BinaryDictionary *self, PyObject *arg);
            static PyObject *t_BinaryDictionary_getLeftPOS(t_BinaryDictionary *self, PyObject *arg);
            static PyObject *t_BinaryDictionary_getMorphemes(t_BinaryDictionary *self, PyObject *args);
            static PyObject *t_BinaryDictionary_getPOSType(t_BinaryDictionary *self, PyObject *arg);
            static PyObject *t_BinaryDictionary_getReading(t_BinaryDictionary *self, PyObject *arg);
            static PyObject *t_BinaryDictionary_getResource(PyTypeObject *type, PyObject *args);
            static PyObject *t_BinaryDictionary_getRightId(t_BinaryDictionary *self, PyObject *arg);
            static PyObject *t_BinaryDictionary_getRightPOS(t_BinaryDictionary *self, PyObject *arg);
            static PyObject *t_BinaryDictionary_getWordCost(t_BinaryDictionary *self, PyObject *arg);
            static PyObject *t_BinaryDictionary_lookupWordIds(t_BinaryDictionary *self, PyObject *args);

            static PyMethodDef t_BinaryDictionary__methods_[] = {
              DECLARE_METHOD(t_BinaryDictionary, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BinaryDictionary, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BinaryDictionary, getClassResource, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_BinaryDictionary, getLeftId, METH_O),
              DECLARE_METHOD(t_BinaryDictionary, getLeftPOS, METH_O),
              DECLARE_METHOD(t_BinaryDictionary, getMorphemes, METH_VARARGS),
              DECLARE_METHOD(t_BinaryDictionary, getPOSType, METH_O),
              DECLARE_METHOD(t_BinaryDictionary, getReading, METH_O),
              DECLARE_METHOD(t_BinaryDictionary, getResource, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_BinaryDictionary, getRightId, METH_O),
              DECLARE_METHOD(t_BinaryDictionary, getRightPOS, METH_O),
              DECLARE_METHOD(t_BinaryDictionary, getWordCost, METH_O),
              DECLARE_METHOD(t_BinaryDictionary, lookupWordIds, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(BinaryDictionary)[] = {
              { Py_tp_methods, t_BinaryDictionary__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(BinaryDictionary)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(BinaryDictionary, t_BinaryDictionary, BinaryDictionary);

            void t_BinaryDictionary::install(PyObject *module)
            {
              installType(&PY_TYPE(BinaryDictionary), &PY_TYPE_DEF(BinaryDictionary), module, "BinaryDictionary", 0);
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "ResourceScheme", make_descriptor(&PY_TYPE_DEF(BinaryDictionary$ResourceScheme)));
            }

            void t_BinaryDictionary::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "class_", make_descriptor(BinaryDictionary::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "wrapfn_", make_descriptor(t_BinaryDictionary::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "boxfn_", make_descriptor(boxObject));
              env->getClass(BinaryDictionary::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "DICT_FILENAME_SUFFIX", make_descriptor(j2p(*BinaryDictionary::DICT_FILENAME_SUFFIX)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "DICT_HEADER", make_descriptor(j2p(*BinaryDictionary::DICT_HEADER)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "HAS_READING", make_descriptor(BinaryDictionary::HAS_READING));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "HAS_SINGLE_POS", make_descriptor(BinaryDictionary::HAS_SINGLE_POS));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "POSDICT_FILENAME_SUFFIX", make_descriptor(j2p(*BinaryDictionary::POSDICT_FILENAME_SUFFIX)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "POSDICT_HEADER", make_descriptor(j2p(*BinaryDictionary::POSDICT_HEADER)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "TARGETMAP_FILENAME_SUFFIX", make_descriptor(j2p(*BinaryDictionary::TARGETMAP_FILENAME_SUFFIX)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "TARGETMAP_HEADER", make_descriptor(j2p(*BinaryDictionary::TARGETMAP_HEADER)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "VERSION", make_descriptor(BinaryDictionary::VERSION));
            }

            static PyObject *t_BinaryDictionary_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BinaryDictionary::initializeClass, 1)))
                return NULL;
              return t_BinaryDictionary::wrap_Object(BinaryDictionary(((t_BinaryDictionary *) arg)->object.this$));
            }
            static PyObject *t_BinaryDictionary_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BinaryDictionary::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_BinaryDictionary_getClassResource(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String a1((jobject) NULL);
              ::java::io::InputStream result((jobject) NULL);

              if (!parseArgs(args, "Ks", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::ko::dict::BinaryDictionary::getClassResource(a0, a1));
                return ::java::io::t_InputStream::wrap_Object(result);
              }

              PyErr_SetArgsError(type, "getClassResource", args);
              return NULL;
            }

            static PyObject *t_BinaryDictionary_getLeftId(t_BinaryDictionary *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getLeftId(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getLeftId", arg);
              return NULL;
            }

            static PyObject *t_BinaryDictionary_getLeftPOS(t_BinaryDictionary *self, PyObject *arg)
            {
              jint a0;
              ::org::apache::lucene::analysis::ko::POS$Tag result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getLeftPOS(a0));
                return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getLeftPOS", arg);
              return NULL;
            }

            static PyObject *t_BinaryDictionary_getMorphemes(t_BinaryDictionary *self, PyObject *args)
            {
              jint a0;
              JArray< jchar > a1((jobject) NULL);
              jint a2;
              jint a3;
              JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > result((jobject) NULL);

              if (!parseArgs(args, "I[CII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getMorphemes(a0, a1, a2, a3));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::analysis::ko::dict::t_Dictionary$Morpheme::wrap_jobject);
              }

              PyErr_SetArgsError((PyObject *) self, "getMorphemes", args);
              return NULL;
            }

            static PyObject *t_BinaryDictionary_getPOSType(t_BinaryDictionary *self, PyObject *arg)
            {
              jint a0;
              ::org::apache::lucene::analysis::ko::POS$Type result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getPOSType(a0));
                return ::org::apache::lucene::analysis::ko::t_POS$Type::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getPOSType", arg);
              return NULL;
            }

            static PyObject *t_BinaryDictionary_getReading(t_BinaryDictionary *self, PyObject *arg)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getReading(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getReading", arg);
              return NULL;
            }

            static PyObject *t_BinaryDictionary_getResource(PyTypeObject *type, PyObject *args)
            {
              ::org::apache::lucene::analysis::ko::dict::BinaryDictionary$ResourceScheme a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String a1((jobject) NULL);
              ::java::io::InputStream result((jobject) NULL);

              if (!parseArgs(args, "Ks", ::org::apache::lucene::analysis::ko::dict::BinaryDictionary$ResourceScheme::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::ko::dict::t_BinaryDictionary$ResourceScheme::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::ko::dict::BinaryDictionary::getResource(a0, a1));
                return ::java::io::t_InputStream::wrap_Object(result);
              }

              PyErr_SetArgsError(type, "getResource", args);
              return NULL;
            }

            static PyObject *t_BinaryDictionary_getRightId(t_BinaryDictionary *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getRightId(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getRightId", arg);
              return NULL;
            }

            static PyObject *t_BinaryDictionary_getRightPOS(t_BinaryDictionary *self, PyObject *arg)
            {
              jint a0;
              ::org::apache::lucene::analysis::ko::POS$Tag result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getRightPOS(a0));
                return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getRightPOS", arg);
              return NULL;
            }

            static PyObject *t_BinaryDictionary_getWordCost(t_BinaryDictionary *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getWordCost(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getWordCost", arg);
              return NULL;
            }

            static PyObject *t_BinaryDictionary_lookupWordIds(t_BinaryDictionary *self, PyObject *args)
            {
              jint a0;
              ::org::apache::lucene::util::IntsRef a1((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.lookupWordIds(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "lookupWordIds", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymGraphFilter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymGraphFilter::class$ = NULL;
          jmethodID *SynonymGraphFilter::mids$ = NULL;
          bool SynonymGraphFilter::live$ = false;
          ::java::lang::String *SynonymGraphFilter::TYPE_SYNONYM = NULL;

          jclass SynonymGraphFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymGraphFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e2bb65681e534f99] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/synonym/SynonymMap;Z)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              TYPE_SYNONYM = new ::java::lang::String(env->getStaticObjectField(cls, "TYPE_SYNONYM", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymGraphFilter::SynonymGraphFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::synonym::SynonymMap & a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_e2bb65681e534f99, a0.this$, a1.this$, a2)) {}

          jboolean SynonymGraphFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void SynonymGraphFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymGraphFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymGraphFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymGraphFilter_init_(t_SynonymGraphFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymGraphFilter_incrementToken(t_SynonymGraphFilter *self, PyObject *args);
          static PyObject *t_SynonymGraphFilter_reset(t_SynonymGraphFilter *self, PyObject *args);

          static PyMethodDef t_SynonymGraphFilter__methods_[] = {
            DECLARE_METHOD(t_SynonymGraphFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymGraphFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymGraphFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_SynonymGraphFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SynonymGraphFilter)[] = {
            { Py_tp_methods, t_SynonymGraphFilter__methods_ },
            { Py_tp_init, (void *) t_SynonymGraphFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SynonymGraphFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(SynonymGraphFilter, t_SynonymGraphFilter, SynonymGraphFilter);

          void t_SynonymGraphFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymGraphFilter), &PY_TYPE_DEF(SynonymGraphFilter), module, "SynonymGraphFilter", 0);
          }

          void t_SynonymGraphFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymGraphFilter), "class_", make_descriptor(SynonymGraphFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymGraphFilter), "wrapfn_", make_descriptor(t_SynonymGraphFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymGraphFilter), "boxfn_", make_descriptor(boxObject));
            env->getClass(SynonymGraphFilter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymGraphFilter), "TYPE_SYNONYM", make_descriptor(j2p(*SynonymGraphFilter::TYPE_SYNONYM)));
          }

          static PyObject *t_SynonymGraphFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymGraphFilter::initializeClass, 1)))
              return NULL;
            return t_SynonymGraphFilter::wrap_Object(SynonymGraphFilter(((t_SynonymGraphFilter *) arg)->object.this$));
          }
          static PyObject *t_SynonymGraphFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymGraphFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymGraphFilter_init_(t_SynonymGraphFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::synonym::SynonymMap a1((jobject) NULL);
            jboolean a2;
            SynonymGraphFilter object((jobject) NULL);

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::synonym::SynonymMap::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SynonymGraphFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymGraphFilter_incrementToken(t_SynonymGraphFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SynonymGraphFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_SynonymGraphFilter_reset(t_SynonymGraphFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SynonymGraphFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
